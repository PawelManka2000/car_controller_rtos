
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800579c  0800579c  0001579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057dc  080057dc  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080057dc  080057dc  000157dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057e4  080057e4  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057e4  080057e4  000157e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057e8  080057e8  000157e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080057ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000028  08005814  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  08005814  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017ec6  00000000  00000000  0002009b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003399  00000000  00000000  00037f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001318  00000000  00000000  0003b300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed7  00000000  00000000  0003c618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026817  00000000  00000000  0003d4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018265  00000000  00000000  00063d06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001026bb  00000000  00000000  0007bf6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ef4  00000000  00000000  0017e628  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0018351c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000028 	.word	0x20000028
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005784 	.word	0x08005784

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000002c 	.word	0x2000002c
 800021c:	08005784 	.word	0x08005784

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <SystemClock_Config>:




void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	2238      	movs	r2, #56	; 0x38
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 f8fe 	bl	800572c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800053e:	2000      	movs	r0, #0
 8000540:	f001 f96c 	bl	800181c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	2340      	movs	r3, #64	; 0x40
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800055a:	2304      	movs	r3, #4
 800055c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800055e:	2355      	movs	r3, #85	; 0x55
 8000560:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	4618      	mov	r0, r3
 8000574:	f001 fa06 	bl	8001984 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800057e:	f000 fbdd 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2303      	movs	r3, #3
 8000588:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2104      	movs	r1, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fd04 	bl	8001fa8 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005a6:	f000 fbc9 	bl	8000d3c <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	; 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}

080005b2 <update_encoder_info>:
 *      Author: pawel
 */

#include "encoder_driver.h"

void update_encoder_info(EncoderInfo* encoder_info){
 80005b2:	b480      	push	{r7}
 80005b4:	b083      	sub	sp, #12
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	889a      	ldrh	r2, [r3, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	809a      	strh	r2, [r3, #4]

}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <update_position>:
 */

#include "engine_driver.h"

void update_position(EngineInfo* eng_info)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

	eng_info->last_position = eng_info->position;
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	685a      	ldr	r2, [r3, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	609a      	str	r2, [r3, #8]
	EncoderInfo* encoder_info = eng_info->encoder_info;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	617b      	str	r3, [r7, #20]
	update_encoder_info(encoder_info);
 80005f2:	6978      	ldr	r0, [r7, #20]
 80005f4:	f7ff ffdd 	bl	80005b2 <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 80005f8:	697b      	ldr	r3, [r7, #20]
 80005fa:	889a      	ldrh	r2, [r3, #4]
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	88db      	ldrh	r3, [r3, #6]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	b29b      	uxth	r3, r3
 8000604:	827b      	strh	r3, [r7, #18]

	//encoder increase
	if (encoder_diff > 0){
 8000606:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800060a:	2b00      	cmp	r3, #0
 800060c:	dd29      	ble.n	8000662 <update_position+0x86>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	2b10      	cmp	r3, #16
 800061c:	d119      	bne.n	8000652 <update_position+0x76>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 800061e:	697b      	ldr	r3, [r7, #20]
 8000620:	889b      	ldrh	r3, [r3, #4]
 8000622:	461a      	mov	r2, r3
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	bfb8      	it	lt
 8000632:	425b      	neglt	r3, r3
 8000634:	817b      	strh	r3, [r7, #10]
			int16_t position_change = encoder_info->last_counter_value + postreload_count;
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	88da      	ldrh	r2, [r3, #6]
 800063a:	897b      	ldrh	r3, [r7, #10]
 800063c:	4413      	add	r3, r2
 800063e:	b29b      	uxth	r3, r3
 8000640:	813b      	strh	r3, [r7, #8]
			eng_info->position = eng_info->last_position - position_change;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800064a:	1ad2      	subs	r2, r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	605a      	str	r2, [r3, #4]
		}

	}


}
 8000650:	e034      	b.n	80006bc <update_position+0xe0>
			eng_info->position = eng_info->last_position + encoder_diff;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	689a      	ldr	r2, [r3, #8]
 8000656:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800065a:	441a      	add	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	605a      	str	r2, [r3, #4]
}
 8000660:	e02c      	b.n	80006bc <update_position+0xe0>
	}else if(encoder_diff < 0) //encoder decrease
 8000662:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000666:	2b00      	cmp	r3, #0
 8000668:	da28      	bge.n	80006bc <update_position+0xe0>
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f003 0310 	and.w	r3, r3, #16
 8000676:	2b10      	cmp	r3, #16
 8000678:	d019      	beq.n	80006ae <update_position+0xd2>
			int16_t postreload_count = encoder_info->counter_value;
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	889b      	ldrh	r3, [r3, #4]
 800067e:	823b      	strh	r3, [r7, #16]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000688:	b29a      	uxth	r2, r3
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	88db      	ldrh	r3, [r3, #6]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	b29b      	uxth	r3, r3
 8000692:	81fb      	strh	r3, [r7, #14]
			int16_t position_change = postreload_count + prereload_count;
 8000694:	8a3a      	ldrh	r2, [r7, #16]
 8000696:	89fb      	ldrh	r3, [r7, #14]
 8000698:	4413      	add	r3, r2
 800069a:	b29b      	uxth	r3, r3
 800069c:	81bb      	strh	r3, [r7, #12]
			eng_info->position = eng_info->last_position + position_change;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	689a      	ldr	r2, [r3, #8]
 80006a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006a6:	441a      	add	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	605a      	str	r2, [r3, #4]
}
 80006ac:	e006      	b.n	80006bc <update_position+0xe0>
			eng_info->position = eng_info->last_position + encoder_diff;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	689a      	ldr	r2, [r3, #8]
 80006b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006b6:	441a      	add	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	605a      	str	r2, [r3, #4]
}
 80006bc:	bf00      	nop
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	; 0x28
 80006c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b2f      	ldr	r3, [pc, #188]	; (8000798 <MX_GPIO_Init+0xd4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006de:	4a2e      	ldr	r2, [pc, #184]	; (8000798 <MX_GPIO_Init+0xd4>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006e6:	4b2c      	ldr	r3, [pc, #176]	; (8000798 <MX_GPIO_Init+0xd4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f2:	4b29      	ldr	r3, [pc, #164]	; (8000798 <MX_GPIO_Init+0xd4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f6:	4a28      	ldr	r2, [pc, #160]	; (8000798 <MX_GPIO_Init+0xd4>)
 80006f8:	f043 0320 	orr.w	r3, r3, #32
 80006fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006fe:	4b26      	ldr	r3, [pc, #152]	; (8000798 <MX_GPIO_Init+0xd4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000702:	f003 0320 	and.w	r3, r3, #32
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <MX_GPIO_Init+0xd4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070e:	4a22      	ldr	r2, [pc, #136]	; (8000798 <MX_GPIO_Init+0xd4>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <MX_GPIO_Init+0xd4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	60bb      	str	r3, [r7, #8]
 8000720:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_GPIO_Init+0xd4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_GPIO_Init+0xd4>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <MX_GPIO_Init+0xd4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2123      	movs	r1, #35	; 0x23
 800073e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000742:	f001 f82f 	bl	80017a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000756:	f107 0314 	add.w	r3, r7, #20
 800075a:	4619      	mov	r1, r3
 800075c:	480f      	ldr	r0, [pc, #60]	; (800079c <MX_GPIO_Init+0xd8>)
 800075e:	f000 fe9f 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8000762:	2323      	movs	r3, #35	; 0x23
 8000764:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000766:	2301      	movs	r3, #1
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0314 	add.w	r3, r7, #20
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f000 fe90 	bl	80014a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000780:	2200      	movs	r2, #0
 8000782:	2100      	movs	r1, #0
 8000784:	2028      	movs	r0, #40	; 0x28
 8000786:	f000 fe63 	bl	8001450 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800078a:	2028      	movs	r0, #40	; 0x28
 800078c:	f000 fe7a 	bl	8001484 <HAL_NVIC_EnableIRQ>

}
 8000790:	bf00      	nop
 8000792:	3728      	adds	r7, #40	; 0x28
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40021000 	.word	0x40021000
 800079c:	48000800 	.word	0x48000800

080007a0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim8;


void MX_TIM1_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]
 80007d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2234      	movs	r2, #52	; 0x34
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 ffa6 	bl	800572c <memset>

  htim1.Instance = TIM1;
 80007e0:	4b57      	ldr	r3, [pc, #348]	; (8000940 <MX_TIM1_Init+0x1a0>)
 80007e2:	4a58      	ldr	r2, [pc, #352]	; (8000944 <MX_TIM1_Init+0x1a4>)
 80007e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 172000-1;
 80007e6:	4b56      	ldr	r3, [pc, #344]	; (8000940 <MX_TIM1_Init+0x1a0>)
 80007e8:	4a57      	ldr	r2, [pc, #348]	; (8000948 <MX_TIM1_Init+0x1a8>)
 80007ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ec:	4b54      	ldr	r3, [pc, #336]	; (8000940 <MX_TIM1_Init+0x1a0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80007f2:	4b53      	ldr	r3, [pc, #332]	; (8000940 <MX_TIM1_Init+0x1a0>)
 80007f4:	2263      	movs	r2, #99	; 0x63
 80007f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f8:	4b51      	ldr	r3, [pc, #324]	; (8000940 <MX_TIM1_Init+0x1a0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007fe:	4b50      	ldr	r3, [pc, #320]	; (8000940 <MX_TIM1_Init+0x1a0>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000804:	4b4e      	ldr	r3, [pc, #312]	; (8000940 <MX_TIM1_Init+0x1a0>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800080a:	484d      	ldr	r0, [pc, #308]	; (8000940 <MX_TIM1_Init+0x1a0>)
 800080c:	f002 f868 	bl	80028e0 <HAL_TIM_Base_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000816:	f000 fa91 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800081a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800081e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000820:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000824:	4619      	mov	r1, r3
 8000826:	4846      	ldr	r0, [pc, #280]	; (8000940 <MX_TIM1_Init+0x1a0>)
 8000828:	f002 fea6 	bl	8003578 <HAL_TIM_ConfigClockSource>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000832:	f000 fa83 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000836:	4842      	ldr	r0, [pc, #264]	; (8000940 <MX_TIM1_Init+0x1a0>)
 8000838:	f002 f992 	bl	8002b60 <HAL_TIM_PWM_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000842:	f000 fa7b 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800084a:	2300      	movs	r3, #0
 800084c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000852:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000856:	4619      	mov	r1, r3
 8000858:	4839      	ldr	r0, [pc, #228]	; (8000940 <MX_TIM1_Init+0x1a0>)
 800085a:	f003 fd8d 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000864:	f000 fa6a 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000868:	2360      	movs	r3, #96	; 0x60
 800086a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000870:	2300      	movs	r3, #0
 8000872:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800087c:	2300      	movs	r3, #0
 800087e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000880:	2300      	movs	r3, #0
 8000882:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000888:	2200      	movs	r2, #0
 800088a:	4619      	mov	r1, r3
 800088c:	482c      	ldr	r0, [pc, #176]	; (8000940 <MX_TIM1_Init+0x1a0>)
 800088e:	f002 fd5f 	bl	8003350 <HAL_TIM_PWM_ConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000898:	f000 fa50 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008a0:	2204      	movs	r2, #4
 80008a2:	4619      	mov	r1, r3
 80008a4:	4826      	ldr	r0, [pc, #152]	; (8000940 <MX_TIM1_Init+0x1a0>)
 80008a6:	f002 fd53 	bl	8003350 <HAL_TIM_PWM_ConfigChannel>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80008b0:	f000 fa44 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008b8:	2208      	movs	r2, #8
 80008ba:	4619      	mov	r1, r3
 80008bc:	4820      	ldr	r0, [pc, #128]	; (8000940 <MX_TIM1_Init+0x1a0>)
 80008be:	f002 fd47 	bl	8003350 <HAL_TIM_PWM_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80008c8:	f000 fa38 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008d0:	220c      	movs	r2, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	481a      	ldr	r0, [pc, #104]	; (8000940 <MX_TIM1_Init+0x1a0>)
 80008d6:	f002 fd3b 	bl	8003350 <HAL_TIM_PWM_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80008e0:	f000 fa2c 	bl	8000d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800090a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	4619      	mov	r1, r3
 8000920:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_TIM1_Init+0x1a0>)
 8000922:	f003 fdbf 	bl	80044a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 800092c:	f000 fa06 	bl	8000d3c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <MX_TIM1_Init+0x1a0>)
 8000932:	f000 fb7d 	bl	8001030 <HAL_TIM_MspPostInit>

}
 8000936:	bf00      	nop
 8000938:	3770      	adds	r7, #112	; 0x70
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000044 	.word	0x20000044
 8000944:	40012c00 	.word	0x40012c00
 8000948:	00029fdf 	.word	0x00029fdf

0800094c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000952:	f107 030c 	add.w	r3, r7, #12
 8000956:	2224      	movs	r2, #36	; 0x24
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f004 fee6 	bl	800572c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800096a:	4b21      	ldr	r3, [pc, #132]	; (80009f0 <MX_TIM4_Init+0xa4>)
 800096c:	4a21      	ldr	r2, [pc, #132]	; (80009f4 <MX_TIM4_Init+0xa8>)
 800096e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000970:	4b1f      	ldr	r3, [pc, #124]	; (80009f0 <MX_TIM4_Init+0xa4>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <MX_TIM4_Init+0xa4>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <MX_TIM4_Init+0xa4>)
 800097e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000982:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b1a      	ldr	r3, [pc, #104]	; (80009f0 <MX_TIM4_Init+0xa4>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800098a:	4b19      	ldr	r3, [pc, #100]	; (80009f0 <MX_TIM4_Init+0xa4>)
 800098c:	2280      	movs	r2, #128	; 0x80
 800098e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000990:	2303      	movs	r3, #3
 8000992:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000998:	2301      	movs	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800099c:	2300      	movs	r3, #0
 800099e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80009a0:	230a      	movs	r3, #10
 80009a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009a8:	2301      	movs	r3, #1
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	4619      	mov	r1, r3
 80009ba:	480d      	ldr	r0, [pc, #52]	; (80009f0 <MX_TIM4_Init+0xa4>)
 80009bc:	f002 fa44 	bl	8002e48 <HAL_TIM_Encoder_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80009c6:	f000 f9b9 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009d2:	463b      	mov	r3, r7
 80009d4:	4619      	mov	r1, r3
 80009d6:	4806      	ldr	r0, [pc, #24]	; (80009f0 <MX_TIM4_Init+0xa4>)
 80009d8:	f003 fcce 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80009e2:	f000 f9ab 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80009e6:	bf00      	nop
 80009e8:	3730      	adds	r7, #48	; 0x30
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000090 	.word	0x20000090
 80009f4:	40000800 	.word	0x40000800

080009f8 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000a08:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <MX_TIM7_Init+0x64>)
 8000a0a:	4a15      	ldr	r2, [pc, #84]	; (8000a60 <MX_TIM7_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <MX_TIM7_Init+0x64>)
 8000a10:	22a9      	movs	r2, #169	; 0xa9
 8000a12:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_TIM7_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	; (8000a5c <MX_TIM7_Init+0x64>)
 8000a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a20:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <MX_TIM7_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000a28:	480c      	ldr	r0, [pc, #48]	; (8000a5c <MX_TIM7_Init+0x64>)
 8000a2a:	f001 ff59 	bl	80028e0 <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000a34:	f000 f982 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000a40:	1d3b      	adds	r3, r7, #4
 8000a42:	4619      	mov	r1, r3
 8000a44:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_TIM7_Init+0x64>)
 8000a46:	f003 fc97 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 f974 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	200000dc 	.word	0x200000dc
 8000a60:	40001400 	.word	0x40001400

08000a64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM8_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b088      	sub	sp, #32
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a84:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000a86:	4a24      	ldr	r2, [pc, #144]	; (8000b18 <MX_TIM8_Init+0xb4>)
 8000a88:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a8a:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a90:	4b20      	ldr	r3, [pc, #128]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a96:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a9c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000ab0:	4818      	ldr	r0, [pc, #96]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000ab2:	f001 ff15 	bl	80028e0 <HAL_TIM_Base_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 f93e 	bl	8000d3c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000ac4:	2370      	movs	r3, #112	; 0x70
 8000ac6:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480e      	ldr	r0, [pc, #56]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000adc:	f002 fe62 	bl	80037a4 <HAL_TIM_SlaveConfigSynchro>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8000ae6:	f000 f929 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000af6:	463b      	mov	r3, r7
 8000af8:	4619      	mov	r1, r3
 8000afa:	4806      	ldr	r0, [pc, #24]	; (8000b14 <MX_TIM8_Init+0xb0>)
 8000afc:	f003 fc3c 	bl	8004378 <HAL_TIMEx_MasterConfigSynchronization>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000b06:	f000 f919 	bl	8000d3c <Error_Handler>
  }


}
 8000b0a:	bf00      	nop
 8000b0c:	3720      	adds	r7, #32
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	20000128 	.word	0x20000128
 8000b18:	40013400 	.word	0x40013400

08000b1c <MX_LPUART1_UART_Init>:

 UART_HandleTypeDef huart1;
 UART_HandleTypeDef hlpuart1;

void MX_LPUART1_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000b20:	4b21      	ldr	r3, [pc, #132]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b22:	4a22      	ldr	r2, [pc, #136]	; (8000bac <MX_LPUART1_UART_Init+0x90>)
 8000b24:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b26:	4b20      	ldr	r3, [pc, #128]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b1c      	ldr	r3, [pc, #112]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b13      	ldr	r3, [pc, #76]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b5e:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b60:	f003 fd7a 	bl	8004658 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 f8e7 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	480d      	ldr	r0, [pc, #52]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b72:	f004 fb15 	bl	80051a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000b7c:	f000 f8de 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b80:	2100      	movs	r1, #0
 8000b82:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b84:	f004 fb4a 	bl	800521c <HAL_UARTEx_SetRxFifoThreshold>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000b8e:	f000 f8d5 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_LPUART1_UART_Init+0x8c>)
 8000b94:	f004 facb 	bl	800512e <HAL_UARTEx_DisableFifoMode>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000b9e:	f000 f8cd 	bl	8000d3c <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000208 	.word	0x20000208
 8000bac:	40008000 	.word	0x40008000

08000bb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000bb4:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bb6:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <MX_USART1_UART_Init+0x94>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bba:	4b21      	ldr	r3, [pc, #132]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000bfa:	f003 fd2d 	bl	8004658 <HAL_UART_Init>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c04:	f000 f89a 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c08:	2100      	movs	r1, #0
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000c0c:	f004 fac8 	bl	80051a0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c16:	f000 f891 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	4808      	ldr	r0, [pc, #32]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000c1e:	f004 fafd 	bl	800521c <HAL_UARTEx_SetRxFifoThreshold>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c28:	f000 f888 	bl	8000d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_USART1_UART_Init+0x90>)
 8000c2e:	f004 fa7e 	bl	800512e <HAL_UARTEx_DisableFifoMode>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c38:	f000 f880 	bl	8000d3c <Error_Handler>
  }

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000174 	.word	0x20000174
 8000c44:	40013800 	.word	0x40013800

08000c48 <main>:
//	engine_info->encoder_info = *encoder_info;
//}
//

int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b09a      	sub	sp, #104	; 0x68
 8000c4c:	af00      	add	r7, sp, #0

  HAL_Init();
 8000c4e:	f000 fb00 	bl	8001252 <HAL_Init>
  SystemClock_Config();
 8000c52:	f7ff fc63 	bl	800051c <SystemClock_Config>
  MX_GPIO_Init();
 8000c56:	f7ff fd35 	bl	80006c4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000c5a:	f7ff ff5f 	bl	8000b1c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000c5e:	f7ff ffa7 	bl	8000bb0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000c62:	f7ff fd9d 	bl	80007a0 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000c66:	f7ff fe71 	bl	800094c <MX_TIM4_Init>
  MX_TIM7_Init();
 8000c6a:	f7ff fec5 	bl	80009f8 <MX_TIM7_Init>
  MX_TIM8_Init();
 8000c6e:	f7ff fef9 	bl	8000a64 <MX_TIM8_Init>

  HAL_TIM_Base_Start(&htim8);
 8000c72:	481d      	ldr	r0, [pc, #116]	; (8000ce8 <main+0xa0>)
 8000c74:	f001 fe8c 	bl	8002990 <HAL_TIM_Base_Start>

  static __IO uint16_t pulseCounter = 0;
  static __IO uint16_t previous_pulseCounter = 0;


  HAL_TIM_Base_Start_IT(&htim7);
 8000c78:	481c      	ldr	r0, [pc, #112]	; (8000cec <main+0xa4>)
 8000c7a:	f001 fef9 	bl	8002a70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c7e:	2100      	movs	r1, #0
 8000c80:	481b      	ldr	r0, [pc, #108]	; (8000cf0 <main+0xa8>)
 8000c82:	f001 ffcf 	bl	8002c24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c86:	2104      	movs	r1, #4
 8000c88:	4819      	ldr	r0, [pc, #100]	; (8000cf0 <main+0xa8>)
 8000c8a:	f001 ffcb 	bl	8002c24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000c8e:	2108      	movs	r1, #8
 8000c90:	4817      	ldr	r0, [pc, #92]	; (8000cf0 <main+0xa8>)
 8000c92:	f001 ffc7 	bl	8002c24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000c96:	210c      	movs	r1, #12
 8000c98:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <main+0xa8>)
 8000c9a:	f001 ffc3 	bl	8002c24 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000c9e:	213c      	movs	r1, #60	; 0x3c
 8000ca0:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <main+0xac>)
 8000ca2:	f002 f977 	bl	8002f94 <HAL_TIM_Encoder_Start>

  TIM1->CCR1 = 40;
 8000ca6:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <main+0xb0>)
 8000ca8:	2228      	movs	r2, #40	; 0x28
 8000caa:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 40;
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <main+0xb0>)
 8000cae:	2228      	movs	r2, #40	; 0x28
 8000cb0:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 40;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <main+0xb0>)
 8000cb4:	2228      	movs	r2, #40	; 0x28
 8000cb6:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 40;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <main+0xb0>)
 8000cba:	2228      	movs	r2, #40	; 0x28
 8000cbc:	641a      	str	r2, [r3, #64]	; 0x40


  timer_counter = 1;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <main+0xb4>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	801a      	strh	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ccc:	f000 fd6a 	bl	80017a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2102      	movs	r1, #2
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd8:	f000 fd64 	bl	80017a4 <HAL_GPIO_WritePin>
//
//	  sprintf(&(message[strlen(message)]), "to %d \n\r", received_data_int);
//
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);

	  HAL_Delay(1000);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ce0:	f000 fadc 	bl	800129c <HAL_Delay>
 8000ce4:	e7fa      	b.n	8000cdc <main+0x94>
 8000ce6:	bf00      	nop
 8000ce8:	20000128 	.word	0x20000128
 8000cec:	200000dc 	.word	0x200000dc
 8000cf0:	20000044 	.word	0x20000044
 8000cf4:	20000090 	.word	0x20000090
 8000cf8:	40012c00 	.word	0x40012c00
 8000cfc:	2000029c 	.word	0x2000029c

08000d00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)engine_info.engine_updater_tim->Instance) {
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d108      	bne.n	8000d28 <HAL_TIM_PeriodElapsedCallback+0x28>

    	update_position(&engine_info);
 8000d16:	4806      	ldr	r0, [pc, #24]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d18:	f7ff fc60 	bl	80005dc <update_position>
        timer_counter = __HAL_TIM_GET_COUNTER(&htim4);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000d26:	801a      	strh	r2, [r3, #0]
    }



//  /* USER CODE END Callback 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000008 	.word	0x20000008
 8000d34:	20000090 	.word	0x20000090
 8000d38:	2000029c 	.word	0x2000029c

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x44>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_MspInit+0x44>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x44>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	6593      	str	r3, [r2, #88]	; 0x58
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d7e:	f000 fdf1 	bl	8001964 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0a0      	sub	sp, #128	; 0x80
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	2254      	movs	r2, #84	; 0x54
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 fcbb 	bl	800572c <memset>
  if(huart->Instance==LPUART1)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <HAL_UART_MspInit+0x120>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d137      	bne.n	8000e30 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000dc0:	2320      	movs	r3, #32
 8000dc2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc8:	f107 0318 	add.w	r3, r7, #24
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f001 fb39 	bl	8002444 <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd8:	f7ff ffb0 	bl	8000d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ddc:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000de0:	4a34      	ldr	r2, [pc, #208]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000de8:	4b32      	ldr	r3, [pc, #200]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df4:	4b2f      	ldr	r3, [pc, #188]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df8:	4a2e      	ldr	r2, [pc, #184]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e00:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e0c:	230c      	movs	r3, #12
 8000e0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	2302      	movs	r3, #2
 8000e12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000e1c:	230c      	movs	r3, #12
 8000e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e24:	4619      	mov	r1, r3
 8000e26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2a:	f000 fb39 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e2e:	e03a      	b.n	8000ea6 <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a20      	ldr	r2, [pc, #128]	; (8000eb8 <HAL_UART_MspInit+0x128>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d135      	bne.n	8000ea6 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e42:	f107 0318 	add.w	r3, r7, #24
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fafc 	bl	8002444 <HAL_RCCEx_PeriphCLKConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000e52:	f7ff ff73 	bl	8000d3c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e5a:	4a16      	ldr	r2, [pc, #88]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e60:	6613      	str	r3, [r2, #96]	; 0x60
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	4a10      	ldr	r2, [pc, #64]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000e74:	f043 0304 	orr.w	r3, r3, #4
 8000e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <HAL_UART_MspInit+0x124>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	f003 0304 	and.w	r3, r3, #4
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e86:	2330      	movs	r3, #48	; 0x30
 8000e88:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e96:	2307      	movs	r3, #7
 8000e98:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e9a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <HAL_UART_MspInit+0x12c>)
 8000ea2:	f000 fafd 	bl	80014a0 <HAL_GPIO_Init>
}
 8000ea6:	bf00      	nop
 8000ea8:	3780      	adds	r7, #128	; 0x80
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40008000 	.word	0x40008000
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40013800 	.word	0x40013800
 8000ebc:	48000800 	.word	0x48000800

08000ec0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08c      	sub	sp, #48	; 0x30
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <HAL_TIM_Base_MspInit+0xd4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10c      	bne.n	8000efc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ee6:	4a2c      	ldr	r2, [pc, #176]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000ee8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000eec:	6613      	str	r3, [r2, #96]	; 0x60
 8000eee:	4b2a      	ldr	r3, [pc, #168]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ef2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ef6:	61bb      	str	r3, [r7, #24]
 8000ef8:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000efa:	e046      	b.n	8000f8a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM7)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <HAL_TIM_Base_MspInit+0xdc>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d114      	bne.n	8000f30 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000f06:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000f0c:	f043 0320 	orr.w	r3, r3, #32
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
 8000f12:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	f003 0320 	and.w	r3, r3, #32
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2037      	movs	r0, #55	; 0x37
 8000f24:	f000 fa94 	bl	8001450 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8000f28:	2037      	movs	r0, #55	; 0x37
 8000f2a:	f000 faab 	bl	8001484 <HAL_NVIC_EnableIRQ>
}
 8000f2e:	e02c      	b.n	8000f8a <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <HAL_TIM_Base_MspInit+0xe0>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d127      	bne.n	8000f8a <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f3e:	4a16      	ldr	r2, [pc, #88]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000f40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f44:	6613      	str	r3, [r2, #96]	; 0x60
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000f58:	f043 0302 	orr.w	r3, r3, #2
 8000f5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_TIM_Base_MspInit+0xd8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f6a:	2340      	movs	r3, #64	; 0x40
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <HAL_TIM_Base_MspInit+0xe4>)
 8000f86:	f000 fa8b 	bl	80014a0 <HAL_GPIO_Init>
}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	; 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40012c00 	.word	0x40012c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40001400 	.word	0x40001400
 8000fa0:	40013400 	.word	0x40013400
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a18      	ldr	r2, [pc, #96]	; (8001028 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d129      	bne.n	800101e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_TIM_Encoder_MspInit+0x84>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a17      	ldr	r2, [pc, #92]	; (800102c <HAL_TIM_Encoder_MspInit+0x84>)
 8000fd0:	f043 0304 	orr.w	r3, r3, #4
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b15      	ldr	r3, [pc, #84]	; (800102c <HAL_TIM_Encoder_MspInit+0x84>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f003 0304 	and.w	r3, r3, #4
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <HAL_TIM_Encoder_MspInit+0x84>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a11      	ldr	r2, [pc, #68]	; (800102c <HAL_TIM_Encoder_MspInit+0x84>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <HAL_TIM_Encoder_MspInit+0x84>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ffa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800100c:	230a      	movs	r3, #10
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f000 fa41 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40000800 	.word	0x40000800
 800102c:	40021000 	.word	0x40021000

08001030 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	f107 030c 	add.w	r3, r7, #12
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a11      	ldr	r2, [pc, #68]	; (8001094 <HAL_TIM_MspPostInit+0x64>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d11b      	bne.n	800108a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_TIM_MspPostInit+0x68>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <HAL_TIM_MspPostInit+0x68>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_TIM_MspPostInit+0x68>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800106a:	230f      	movs	r3, #15
 800106c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800107a:	2302      	movs	r3, #2
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <HAL_TIM_MspPostInit+0x6c>)
 8001086:	f000 fa0b 	bl	80014a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40012c00 	.word	0x40012c00
 8001098:	40021000 	.word	0x40021000
 800109c:	48000800 	.word	0x48000800

080010a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010a8:	2300      	movs	r3, #0
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_InitTick+0xc4>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	4a2b      	ldr	r2, [pc, #172]	; (8001164 <HAL_InitTick+0xc4>)
 80010b6:	f043 0310 	orr.w	r3, r3, #16
 80010ba:	6593      	str	r3, [r2, #88]	; 0x58
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <HAL_InitTick+0xc4>)
 80010be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010c0:	f003 0310 	and.w	r3, r3, #16
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c8:	f107 020c 	add.w	r2, r7, #12
 80010cc:	f107 0310 	add.w	r3, r7, #16
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 f93e 	bl	8002354 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010d8:	f001 f910 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 80010dc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e0:	4a21      	ldr	r2, [pc, #132]	; (8001168 <HAL_InitTick+0xc8>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0c9b      	lsrs	r3, r3, #18
 80010e8:	3b01      	subs	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <HAL_InitTick+0xcc>)
 80010ee:	4a20      	ldr	r2, [pc, #128]	; (8001170 <HAL_InitTick+0xd0>)
 80010f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <HAL_InitTick+0xcc>)
 80010f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <HAL_InitTick+0xcc>)
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001100:	4b1a      	ldr	r3, [pc, #104]	; (800116c <HAL_InitTick+0xcc>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_InitTick+0xcc>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800110c:	4817      	ldr	r0, [pc, #92]	; (800116c <HAL_InitTick+0xcc>)
 800110e:	f001 fbe7 	bl	80028e0 <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001118:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800111c:	2b00      	cmp	r3, #0
 800111e:	d11b      	bne.n	8001158 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001120:	4812      	ldr	r0, [pc, #72]	; (800116c <HAL_InitTick+0xcc>)
 8001122:	f001 fca5 	bl	8002a70 <HAL_TIM_Base_Start_IT>
 8001126:	4603      	mov	r3, r0
 8001128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800112c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001130:	2b00      	cmp	r3, #0
 8001132:	d111      	bne.n	8001158 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001134:	2036      	movs	r0, #54	; 0x36
 8001136:	f000 f9a5 	bl	8001484 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d808      	bhi.n	8001152 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	2036      	movs	r0, #54	; 0x36
 8001146:	f000 f983 	bl	8001450 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_InitTick+0xd4>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	e002      	b.n	8001158 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800115c:	4618      	mov	r0, r3
 800115e:	3730      	adds	r7, #48	; 0x30
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	431bde83 	.word	0x431bde83
 800116c:	200002a0 	.word	0x200002a0
 8001170:	40001000 	.word	0x40001000
 8001174:	20000020 	.word	0x20000020

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011ac:	f000 fb12 	bl	80017d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <TIM6_DAC_IRQHandler+0x10>)
 80011ba:	f001 ff79 	bl	80030b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200002a0 	.word	0x200002a0

080011c8 <TIM7_DAC_IRQHandler>:

void TIM7_DAC_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <TIM7_DAC_IRQHandler+0x10>)
 80011ce:	f001 ff6f 	bl	80030b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200000dc 	.word	0x200000dc

080011dc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <SystemInit+0x20>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a05      	ldr	r2, [pc, #20]	; (80011fc <SystemInit+0x20>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f0:	bf00      	nop
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001200:	480d      	ldr	r0, [pc, #52]	; (8001238 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001202:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001204:	f7ff ffea 	bl	80011dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <LoopForever+0x6>)
  ldr r1, =_edata
 800120a:	490d      	ldr	r1, [pc, #52]	; (8001240 <LoopForever+0xa>)
  ldr r2, =_sidata
 800120c:	4a0d      	ldr	r2, [pc, #52]	; (8001244 <LoopForever+0xe>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001210:	e002      	b.n	8001218 <LoopCopyDataInit>

08001212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001216:	3304      	adds	r3, #4

08001218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800121c:	d3f9      	bcc.n	8001212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800121e:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001220:	4c0a      	ldr	r4, [pc, #40]	; (800124c <LoopForever+0x16>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001224:	e001      	b.n	800122a <LoopFillZerobss>

08001226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001228:	3204      	adds	r2, #4

0800122a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800122c:	d3fb      	bcc.n	8001226 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800122e:	f004 fa85 	bl	800573c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001232:	f7ff fd09 	bl	8000c48 <main>

08001236 <LoopForever>:

LoopForever:
    b LoopForever
 8001236:	e7fe      	b.n	8001236 <LoopForever>
  ldr   r0, =_estack
 8001238:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800123c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001240:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001244:	080057ec 	.word	0x080057ec
  ldr r2, =_sbss
 8001248:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800124c:	2000037c 	.word	0x2000037c

08001250 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001250:	e7fe      	b.n	8001250 <ADC1_2_IRQHandler>

08001252 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001258:	2300      	movs	r3, #0
 800125a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f8ec 	bl	800143a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001262:	200f      	movs	r0, #15
 8001264:	f7ff ff1c 	bl	80010a0 <HAL_InitTick>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	e001      	b.n	8001278 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001274:	f7ff fd68 	bl	8000d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001278:	79fb      	ldrb	r3, [r7, #7]

}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200002ec 	.word	0x200002ec

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d004      	beq.n	80012c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_Delay+0x40>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4413      	add	r3, r2
 80012be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c0:	bf00      	nop
 80012c2:	f7ff ffdf 	bl	8001284 <HAL_GetTick>
 80012c6:	4602      	mov	r2, r0
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	68fa      	ldr	r2, [r7, #12]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d8f7      	bhi.n	80012c2 <HAL_Delay+0x26>
  {
  }
}
 80012d2:	bf00      	nop
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000024 	.word	0x20000024

080012e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f0:	4b0c      	ldr	r3, [pc, #48]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012fc:	4013      	ands	r3, r2
 80012fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800130c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001312:	4a04      	ldr	r2, [pc, #16]	; (8001324 <__NVIC_SetPriorityGrouping+0x44>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	60d3      	str	r3, [r2, #12]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <__NVIC_GetPriorityGrouping+0x18>)
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	f003 0307 	and.w	r3, r3, #7
}
 8001336:	4618      	mov	r0, r3
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	2b00      	cmp	r3, #0
 8001354:	db0b      	blt.n	800136e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	f003 021f 	and.w	r2, r3, #31
 800135c:	4907      	ldr	r1, [pc, #28]	; (800137c <__NVIC_EnableIRQ+0x38>)
 800135e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001362:	095b      	lsrs	r3, r3, #5
 8001364:	2001      	movs	r0, #1
 8001366:	fa00 f202 	lsl.w	r2, r0, r2
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800136e:	bf00      	nop
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	4603      	mov	r3, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	2b00      	cmp	r3, #0
 8001392:	db0a      	blt.n	80013aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	490c      	ldr	r1, [pc, #48]	; (80013cc <__NVIC_SetPriority+0x4c>)
 800139a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139e:	0112      	lsls	r2, r2, #4
 80013a0:	b2d2      	uxtb	r2, r2
 80013a2:	440b      	add	r3, r1
 80013a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a8:	e00a      	b.n	80013c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	4908      	ldr	r1, [pc, #32]	; (80013d0 <__NVIC_SetPriority+0x50>)
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	3b04      	subs	r3, #4
 80013b8:	0112      	lsls	r2, r2, #4
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	440b      	add	r3, r1
 80013be:	761a      	strb	r2, [r3, #24]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000e100 	.word	0xe000e100
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b089      	sub	sp, #36	; 0x24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	f1c3 0307 	rsb	r3, r3, #7
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	bf28      	it	cs
 80013f2:	2304      	movcs	r3, #4
 80013f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	3304      	adds	r3, #4
 80013fa:	2b06      	cmp	r3, #6
 80013fc:	d902      	bls.n	8001404 <NVIC_EncodePriority+0x30>
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	3b03      	subs	r3, #3
 8001402:	e000      	b.n	8001406 <NVIC_EncodePriority+0x32>
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	f04f 32ff 	mov.w	r2, #4294967295
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43da      	mvns	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	401a      	ands	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800141c:	f04f 31ff 	mov.w	r1, #4294967295
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	43d9      	mvns	r1, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800142c:	4313      	orrs	r3, r2
         );
}
 800142e:	4618      	mov	r0, r3
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ff4c 	bl	80012e0 <__NVIC_SetPriorityGrouping>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145e:	f7ff ff63 	bl	8001328 <__NVIC_GetPriorityGrouping>
 8001462:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	68b9      	ldr	r1, [r7, #8]
 8001468:	6978      	ldr	r0, [r7, #20]
 800146a:	f7ff ffb3 	bl	80013d4 <NVIC_EncodePriority>
 800146e:	4602      	mov	r2, r0
 8001470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff82 	bl	8001380 <__NVIC_SetPriority>
}
 800147c:	bf00      	nop
 800147e:	3718      	adds	r7, #24
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff56 	bl	8001344 <__NVIC_EnableIRQ>
}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014ae:	e15a      	b.n	8001766 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	2101      	movs	r1, #1
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 814c 	beq.w	8001760 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d005      	beq.n	80014e0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d130      	bne.n	8001542 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	2203      	movs	r2, #3
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	68da      	ldr	r2, [r3, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001516:	2201      	movs	r2, #1
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	f003 0201 	and.w	r2, r3, #1
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f003 0303 	and.w	r3, r3, #3
 800154a:	2b03      	cmp	r3, #3
 800154c:	d017      	beq.n	800157e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	4013      	ands	r3, r2
 8001564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d123      	bne.n	80015d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001596:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	f003 0307 	and.w	r3, r3, #7
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	220f      	movs	r2, #15
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43db      	mvns	r3, r3
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	691a      	ldr	r2, [r3, #16]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	08da      	lsrs	r2, r3, #3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3208      	adds	r2, #8
 80015cc:	6939      	ldr	r1, [r7, #16]
 80015ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	2203      	movs	r2, #3
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	43db      	mvns	r3, r3
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4013      	ands	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	f003 0203 	and.w	r2, r3, #3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800160e:	2b00      	cmp	r3, #0
 8001610:	f000 80a6 	beq.w	8001760 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001614:	4b5b      	ldr	r3, [pc, #364]	; (8001784 <HAL_GPIO_Init+0x2e4>)
 8001616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001618:	4a5a      	ldr	r2, [pc, #360]	; (8001784 <HAL_GPIO_Init+0x2e4>)
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	6613      	str	r3, [r2, #96]	; 0x60
 8001620:	4b58      	ldr	r3, [pc, #352]	; (8001784 <HAL_GPIO_Init+0x2e4>)
 8001622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800162c:	4a56      	ldr	r2, [pc, #344]	; (8001788 <HAL_GPIO_Init+0x2e8>)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	3302      	adds	r3, #2
 8001634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	220f      	movs	r2, #15
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001656:	d01f      	beq.n	8001698 <HAL_GPIO_Init+0x1f8>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4a4c      	ldr	r2, [pc, #304]	; (800178c <HAL_GPIO_Init+0x2ec>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d019      	beq.n	8001694 <HAL_GPIO_Init+0x1f4>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a4b      	ldr	r2, [pc, #300]	; (8001790 <HAL_GPIO_Init+0x2f0>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d013      	beq.n	8001690 <HAL_GPIO_Init+0x1f0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a4a      	ldr	r2, [pc, #296]	; (8001794 <HAL_GPIO_Init+0x2f4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d00d      	beq.n	800168c <HAL_GPIO_Init+0x1ec>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4a49      	ldr	r2, [pc, #292]	; (8001798 <HAL_GPIO_Init+0x2f8>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d007      	beq.n	8001688 <HAL_GPIO_Init+0x1e8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a48      	ldr	r2, [pc, #288]	; (800179c <HAL_GPIO_Init+0x2fc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d101      	bne.n	8001684 <HAL_GPIO_Init+0x1e4>
 8001680:	2305      	movs	r3, #5
 8001682:	e00a      	b.n	800169a <HAL_GPIO_Init+0x1fa>
 8001684:	2306      	movs	r3, #6
 8001686:	e008      	b.n	800169a <HAL_GPIO_Init+0x1fa>
 8001688:	2304      	movs	r3, #4
 800168a:	e006      	b.n	800169a <HAL_GPIO_Init+0x1fa>
 800168c:	2303      	movs	r3, #3
 800168e:	e004      	b.n	800169a <HAL_GPIO_Init+0x1fa>
 8001690:	2302      	movs	r3, #2
 8001692:	e002      	b.n	800169a <HAL_GPIO_Init+0x1fa>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_GPIO_Init+0x1fa>
 8001698:	2300      	movs	r3, #0
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	f002 0203 	and.w	r2, r2, #3
 80016a0:	0092      	lsls	r2, r2, #2
 80016a2:	4093      	lsls	r3, r2
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016aa:	4937      	ldr	r1, [pc, #220]	; (8001788 <HAL_GPIO_Init+0x2e8>)
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	089b      	lsrs	r3, r3, #2
 80016b0:	3302      	adds	r3, #2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016b8:	4b39      	ldr	r3, [pc, #228]	; (80017a0 <HAL_GPIO_Init+0x300>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016dc:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <HAL_GPIO_Init+0x300>)
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <HAL_GPIO_Init+0x300>)
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43db      	mvns	r3, r3
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001706:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_GPIO_Init+0x300>)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_GPIO_Init+0x300>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43db      	mvns	r3, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <HAL_GPIO_Init+0x300>)
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001736:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <HAL_GPIO_Init+0x300>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800175a:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <HAL_GPIO_Init+0x300>)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	3301      	adds	r3, #1
 8001764:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	fa22 f303 	lsr.w	r3, r2, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	f47f ae9d 	bne.w	80014b0 <HAL_GPIO_Init+0x10>
  }
}
 8001776:	bf00      	nop
 8001778:	bf00      	nop
 800177a:	371c      	adds	r7, #28
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000
 800178c:	48000400 	.word	0x48000400
 8001790:	48000800 	.word	0x48000800
 8001794:	48000c00 	.word	0x48000c00
 8001798:	48001000 	.word	0x48001000
 800179c:	48001400 	.word	0x48001400
 80017a0:	40010400 	.word	0x40010400

080017a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	807b      	strh	r3, [r7, #2]
 80017b0:	4613      	mov	r3, r2
 80017b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b4:	787b      	ldrb	r3, [r7, #1]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ba:	887a      	ldrh	r2, [r7, #2]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017c0:	e002      	b.n	80017c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017c2:	887a      	ldrh	r2, [r7, #2]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017e0:	695a      	ldr	r2, [r3, #20]
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d006      	beq.n	80017f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017ec:	88fb      	ldrh	r3, [r7, #6]
 80017ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 f806 	bl	8001804 <HAL_GPIO_EXTI_Callback>
  }
}
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40010400 	.word	0x40010400

08001804 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d141      	bne.n	80018ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800182a:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001836:	d131      	bne.n	800189c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001838:	4b47      	ldr	r3, [pc, #284]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800183e:	4a46      	ldr	r2, [pc, #280]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001844:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001848:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001850:	4a41      	ldr	r2, [pc, #260]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001856:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001858:	4b40      	ldr	r3, [pc, #256]	; (800195c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2232      	movs	r2, #50	; 0x32
 800185e:	fb02 f303 	mul.w	r3, r2, r3
 8001862:	4a3f      	ldr	r2, [pc, #252]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001864:	fba2 2303 	umull	r2, r3, r2, r3
 8001868:	0c9b      	lsrs	r3, r3, #18
 800186a:	3301      	adds	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800186e:	e002      	b.n	8001876 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	3b01      	subs	r3, #1
 8001874:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001876:	4b38      	ldr	r3, [pc, #224]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800187e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001882:	d102      	bne.n	800188a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f2      	bne.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800188a:	4b33      	ldr	r3, [pc, #204]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001896:	d158      	bne.n	800194a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e057      	b.n	800194c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800189c:	4b2e      	ldr	r3, [pc, #184]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800189e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018a2:	4a2d      	ldr	r2, [pc, #180]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018ac:	e04d      	b.n	800194a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018b4:	d141      	bne.n	800193a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018b6:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c2:	d131      	bne.n	8001928 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018c4:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ca:	4a23      	ldr	r2, [pc, #140]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018dc:	4a1e      	ldr	r2, [pc, #120]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2232      	movs	r2, #50	; 0x32
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	4a1c      	ldr	r2, [pc, #112]	; (8001960 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018fa:	e002      	b.n	8001902 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	3b01      	subs	r3, #1
 8001900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800190e:	d102      	bne.n	8001916 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f2      	bne.n	80018fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001916:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001922:	d112      	bne.n	800194a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e011      	b.n	800194c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800192e:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001934:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001938:	e007      	b.n	800194a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800193a:	4b07      	ldr	r3, [pc, #28]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001944:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001948:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	40007000 	.word	0x40007000
 800195c:	2000001c 	.word	0x2000001c
 8001960:	431bde83 	.word	0x431bde83

08001964 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800196e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001972:	6093      	str	r3, [r2, #8]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40007000 	.word	0x40007000

08001984 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d101      	bne.n	8001996 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e2fe      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d075      	beq.n	8001a8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a2:	4b97      	ldr	r3, [pc, #604]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019ac:	4b94      	ldr	r3, [pc, #592]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	2b0c      	cmp	r3, #12
 80019ba:	d102      	bne.n	80019c2 <HAL_RCC_OscConfig+0x3e>
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d002      	beq.n	80019c8 <HAL_RCC_OscConfig+0x44>
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d10b      	bne.n	80019e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	4b8d      	ldr	r3, [pc, #564]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d05b      	beq.n	8001a8c <HAL_RCC_OscConfig+0x108>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d157      	bne.n	8001a8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e2d9      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d106      	bne.n	80019f8 <HAL_RCC_OscConfig+0x74>
 80019ea:	4b85      	ldr	r3, [pc, #532]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a84      	ldr	r2, [pc, #528]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0xb0>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x98>
 8001a02:	4b7f      	ldr	r3, [pc, #508]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a7e      	ldr	r2, [pc, #504]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b7c      	ldr	r3, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a7b      	ldr	r2, [pc, #492]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xb0>
 8001a1c:	4b78      	ldr	r3, [pc, #480]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a77      	ldr	r2, [pc, #476]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a74      	ldr	r2, [pc, #464]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc22 	bl	8001284 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fc1e 	bl	8001284 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e29e      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a56:	4b6a      	ldr	r3, [pc, #424]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xc0>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff fc0e 	bl	8001284 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fc0a 	bl	8001284 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e28a      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a7e:	4b60      	ldr	r3, [pc, #384]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0xe8>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d075      	beq.n	8001b86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a9a:	4b59      	ldr	r3, [pc, #356]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aa4:	4b56      	ldr	r3, [pc, #344]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	d102      	bne.n	8001aba <HAL_RCC_OscConfig+0x136>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d002      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x13c>
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11f      	bne.n	8001b00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac0:	4b4f      	ldr	r3, [pc, #316]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d005      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x154>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e25d      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad8:	4b49      	ldr	r3, [pc, #292]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691b      	ldr	r3, [r3, #16]
 8001ae4:	061b      	lsls	r3, r3, #24
 8001ae6:	4946      	ldr	r1, [pc, #280]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001aec:	4b45      	ldr	r3, [pc, #276]	; (8001c04 <HAL_RCC_OscConfig+0x280>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fad5 	bl	80010a0 <HAL_InitTick>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d043      	beq.n	8001b84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e249      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d023      	beq.n	8001b50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b08:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a3c      	ldr	r2, [pc, #240]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b14:	f7ff fbb6 	bl	8001284 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1c:	f7ff fbb2 	bl	8001284 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e232      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2e:	4b34      	ldr	r3, [pc, #208]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b31      	ldr	r3, [pc, #196]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	061b      	lsls	r3, r3, #24
 8001b48:	492d      	ldr	r1, [pc, #180]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
 8001b4e:	e01a      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a2a      	ldr	r2, [pc, #168]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001b56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb92 	bl	8001284 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff fb8e 	bl	8001284 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e20e      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b76:	4b22      	ldr	r3, [pc, #136]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1e0>
 8001b82:	e000      	b.n	8001b86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d041      	beq.n	8001c16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d01c      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9a:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ba0:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001baa:	f7ff fb6b 	bl	8001284 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb2:	f7ff fb67 	bl	8001284 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e1e7      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001bc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0ef      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x22e>
 8001bd2:	e020      	b.n	8001c16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd4:	4b0a      	ldr	r3, [pc, #40]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	4a09      	ldr	r2, [pc, #36]	; (8001c00 <HAL_RCC_OscConfig+0x27c>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fb4e 	bl	8001284 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bea:	e00d      	b.n	8001c08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bec:	f7ff fb4a 	bl	8001284 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d906      	bls.n	8001c08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1ca      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	20000020 	.word	0x20000020
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c08:	4b8c      	ldr	r3, [pc, #560]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001c0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1ea      	bne.n	8001bec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0304 	and.w	r3, r3, #4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80a6 	beq.w	8001d70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c24:	2300      	movs	r3, #0
 8001c26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c28:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_OscConfig+0x2b4>
 8001c34:	2301      	movs	r3, #1
 8001c36:	e000      	b.n	8001c3a <HAL_RCC_OscConfig+0x2b6>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00d      	beq.n	8001c5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	4b7f      	ldr	r3, [pc, #508]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c42:	4a7e      	ldr	r2, [pc, #504]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6593      	str	r3, [r2, #88]	; 0x58
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c56:	2301      	movs	r3, #1
 8001c58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c5a:	4b79      	ldr	r3, [pc, #484]	; (8001e40 <HAL_RCC_OscConfig+0x4bc>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d118      	bne.n	8001c98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c66:	4b76      	ldr	r3, [pc, #472]	; (8001e40 <HAL_RCC_OscConfig+0x4bc>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a75      	ldr	r2, [pc, #468]	; (8001e40 <HAL_RCC_OscConfig+0x4bc>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c72:	f7ff fb07 	bl	8001284 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7a:	f7ff fb03 	bl	8001284 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e183      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c8c:	4b6c      	ldr	r3, [pc, #432]	; (8001e40 <HAL_RCC_OscConfig+0x4bc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x32e>
 8001ca0:	4b66      	ldr	r3, [pc, #408]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	4a65      	ldr	r2, [pc, #404]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cb0:	e024      	b.n	8001cfc <HAL_RCC_OscConfig+0x378>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d110      	bne.n	8001cdc <HAL_RCC_OscConfig+0x358>
 8001cba:	4b60      	ldr	r3, [pc, #384]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc0:	4a5e      	ldr	r2, [pc, #376]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cca:	4b5c      	ldr	r3, [pc, #368]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd0:	4a5a      	ldr	r2, [pc, #360]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cda:	e00f      	b.n	8001cfc <HAL_RCC_OscConfig+0x378>
 8001cdc:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce2:	4a56      	ldr	r2, [pc, #344]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001ce4:	f023 0301 	bic.w	r3, r3, #1
 8001ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a52      	ldr	r2, [pc, #328]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001cf4:	f023 0304 	bic.w	r3, r3, #4
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d016      	beq.n	8001d32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff fabe 	bl	8001284 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7ff faba 	bl	8001284 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e138      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d22:	4b46      	ldr	r3, [pc, #280]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0ed      	beq.n	8001d0c <HAL_RCC_OscConfig+0x388>
 8001d30:	e015      	b.n	8001d5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d32:	f7ff faa7 	bl	8001284 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d38:	e00a      	b.n	8001d50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7ff faa3 	bl	8001284 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e121      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d50:	4b3a      	ldr	r3, [pc, #232]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1ed      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d5e:	7ffb      	ldrb	r3, [r7, #31]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b35      	ldr	r3, [pc, #212]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a34      	ldr	r2, [pc, #208]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0320 	and.w	r3, r3, #32
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d03c      	beq.n	8001df6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01c      	beq.n	8001dbe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d84:	4b2d      	ldr	r3, [pc, #180]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001d86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d8a:	4a2c      	ldr	r2, [pc, #176]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fa76 	bl	8001284 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d9c:	f7ff fa72 	bl	8001284 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e0f2      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dae:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001db0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0ef      	beq.n	8001d9c <HAL_RCC_OscConfig+0x418>
 8001dbc:	e01b      	b.n	8001df6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001dbe:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dc4:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001dc6:	f023 0301 	bic.w	r3, r3, #1
 8001dca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff fa59 	bl	8001284 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dd6:	f7ff fa55 	bl	8001284 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e0d5      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ef      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80c9 	beq.w	8001f92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e00:	4b0e      	ldr	r3, [pc, #56]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 030c 	and.w	r3, r3, #12
 8001e08:	2b0c      	cmp	r3, #12
 8001e0a:	f000 8083 	beq.w	8001f14 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d15e      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_RCC_OscConfig+0x4b8>)
 8001e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff fa2f 	bl	8001284 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	e00c      	b.n	8001e44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff fa2b 	bl	8001284 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d905      	bls.n	8001e44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e0ab      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e44:	4b55      	ldr	r3, [pc, #340]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1ec      	bne.n	8001e2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e50:	4b52      	ldr	r3, [pc, #328]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001e52:	68da      	ldr	r2, [r3, #12]
 8001e54:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <HAL_RCC_OscConfig+0x61c>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	6a11      	ldr	r1, [r2, #32]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e60:	3a01      	subs	r2, #1
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	4311      	orrs	r1, r2
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e6a:	0212      	lsls	r2, r2, #8
 8001e6c:	4311      	orrs	r1, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e72:	0852      	lsrs	r2, r2, #1
 8001e74:	3a01      	subs	r2, #1
 8001e76:	0552      	lsls	r2, r2, #21
 8001e78:	4311      	orrs	r1, r2
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e7e:	0852      	lsrs	r2, r2, #1
 8001e80:	3a01      	subs	r2, #1
 8001e82:	0652      	lsls	r2, r2, #25
 8001e84:	4311      	orrs	r1, r2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001e8a:	06d2      	lsls	r2, r2, #27
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	4943      	ldr	r1, [pc, #268]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e94:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ea0:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a3d      	ldr	r2, [pc, #244]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff f9ea 	bl	8001284 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff f9e6 	bl	8001284 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e066      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec6:	4b35      	ldr	r3, [pc, #212]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x530>
 8001ed2:	e05e      	b.n	8001f92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a30      	ldr	r2, [pc, #192]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001eda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff f9d0 	bl	8001284 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee8:	f7ff f9cc 	bl	8001284 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e04c      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001efa:	4b28      	ldr	r3, [pc, #160]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001f08:	68da      	ldr	r2, [r3, #12]
 8001f0a:	4924      	ldr	r1, [pc, #144]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_RCC_OscConfig+0x620>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	60cb      	str	r3, [r1, #12]
 8001f12:	e03e      	b.n	8001f92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e039      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f20:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCC_OscConfig+0x618>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0203 	and.w	r2, r3, #3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d12c      	bne.n	8001f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d123      	bne.n	8001f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d11b      	bne.n	8001f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f62:	429a      	cmp	r2, r3
 8001f64:	d113      	bne.n	8001f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	085b      	lsrs	r3, r3, #1
 8001f72:	3b01      	subs	r3, #1
 8001f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f84:	085b      	lsrs	r3, r3, #1
 8001f86:	3b01      	subs	r3, #1
 8001f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d001      	beq.n	8001f92 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e000      	b.n	8001f94 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3720      	adds	r7, #32
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	019f800c 	.word	0x019f800c
 8001fa4:	feeefffc 	.word	0xfeeefffc

08001fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e11e      	b.n	80021fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b91      	ldr	r3, [pc, #580]	; (8002208 <HAL_RCC_ClockConfig+0x260>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d910      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b8e      	ldr	r3, [pc, #568]	; (8002208 <HAL_RCC_ClockConfig+0x260>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 020f 	bic.w	r2, r3, #15
 8001fd6:	498c      	ldr	r1, [pc, #560]	; (8002208 <HAL_RCC_ClockConfig+0x260>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b8a      	ldr	r3, [pc, #552]	; (8002208 <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e106      	b.n	80021fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d073      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d129      	bne.n	8002058 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002004:	4b81      	ldr	r3, [pc, #516]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0f4      	b.n	80021fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002014:	f000 f9d0 	bl	80023b8 <RCC_GetSysClockFreqFromPLLSource>
 8002018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4a7c      	ldr	r2, [pc, #496]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d93f      	bls.n	80020a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002022:	4b7a      	ldr	r3, [pc, #488]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d009      	beq.n	8002042 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002036:	2b00      	cmp	r3, #0
 8002038:	d033      	beq.n	80020a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800203e:	2b00      	cmp	r3, #0
 8002040:	d12f      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002042:	4b72      	ldr	r3, [pc, #456]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800204a:	4a70      	ldr	r2, [pc, #448]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 800204c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002050:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	e024      	b.n	80020a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b02      	cmp	r3, #2
 800205e:	d107      	bne.n	8002070 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002060:	4b6a      	ldr	r3, [pc, #424]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d109      	bne.n	8002080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0c6      	b.n	80021fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002070:	4b66      	ldr	r3, [pc, #408]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0be      	b.n	80021fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002080:	f000 f8ce 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8002084:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4a61      	ldr	r2, [pc, #388]	; (8002210 <HAL_RCC_ClockConfig+0x268>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d909      	bls.n	80020a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800208e:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002096:	4a5d      	ldr	r2, [pc, #372]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800209c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800209e:	2380      	movs	r3, #128	; 0x80
 80020a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020a2:	4b5a      	ldr	r3, [pc, #360]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	f023 0203 	bic.w	r2, r3, #3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4957      	ldr	r1, [pc, #348]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b4:	f7ff f8e6 	bl	8001284 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020bc:	f7ff f8e2 	bl	8001284 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e095      	b.n	80021fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020d2:	4b4e      	ldr	r3, [pc, #312]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 020c 	and.w	r2, r3, #12
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d1eb      	bne.n	80020bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d023      	beq.n	8002138 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a42      	ldr	r2, [pc, #264]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002106:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002114:	4b3d      	ldr	r3, [pc, #244]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800211c:	4a3b      	ldr	r2, [pc, #236]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 800211e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002122:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002124:	4b39      	ldr	r3, [pc, #228]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	4936      	ldr	r1, [pc, #216]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
 8002136:	e008      	b.n	800214a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b80      	cmp	r3, #128	; 0x80
 800213c:	d105      	bne.n	800214a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800213e:	4b33      	ldr	r3, [pc, #204]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	4a32      	ldr	r2, [pc, #200]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 8002144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002148:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800214a:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_RCC_ClockConfig+0x260>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d21d      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002158:	4b2b      	ldr	r3, [pc, #172]	; (8002208 <HAL_RCC_ClockConfig+0x260>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 020f 	bic.w	r2, r3, #15
 8002160:	4929      	ldr	r1, [pc, #164]	; (8002208 <HAL_RCC_ClockConfig+0x260>)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002168:	f7ff f88c 	bl	8001284 <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	e00a      	b.n	8002186 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002170:	f7ff f888 	bl	8001284 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	f241 3288 	movw	r2, #5000	; 0x1388
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e03b      	b.n	80021fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_RCC_ClockConfig+0x260>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d1ed      	bne.n	8002170 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4917      	ldr	r1, [pc, #92]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490f      	ldr	r1, [pc, #60]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021d2:	f000 f825 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_RCC_ClockConfig+0x264>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490c      	ldr	r1, [pc, #48]	; (8002214 <HAL_RCC_ClockConfig+0x26c>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	fa22 f303 	lsr.w	r3, r2, r3
 80021ee:	4a0a      	ldr	r2, [pc, #40]	; (8002218 <HAL_RCC_ClockConfig+0x270>)
 80021f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021f2:	4b0a      	ldr	r3, [pc, #40]	; (800221c <HAL_RCC_ClockConfig+0x274>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe ff52 	bl	80010a0 <HAL_InitTick>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40022000 	.word	0x40022000
 800220c:	40021000 	.word	0x40021000
 8002210:	04c4b400 	.word	0x04c4b400
 8002214:	0800579c 	.word	0x0800579c
 8002218:	2000001c 	.word	0x2000001c
 800221c:	20000020 	.word	0x20000020

08002220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002226:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b04      	cmp	r3, #4
 8002230:	d102      	bne.n	8002238 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002232:	4b2a      	ldr	r3, [pc, #168]	; (80022dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	e047      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d102      	bne.n	800224a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002244:	4b26      	ldr	r3, [pc, #152]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	e03e      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b0c      	cmp	r3, #12
 8002254:	d136      	bne.n	80022c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002260:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	f003 030f 	and.w	r3, r3, #15
 800226a:	3301      	adds	r3, #1
 800226c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d10c      	bne.n	800228e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002274:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	fbb2 f3f3 	udiv	r3, r2, r3
 800227c:	4a16      	ldr	r2, [pc, #88]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800227e:	68d2      	ldr	r2, [r2, #12]
 8002280:	0a12      	lsrs	r2, r2, #8
 8002282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002286:	fb02 f303 	mul.w	r3, r2, r3
 800228a:	617b      	str	r3, [r7, #20]
      break;
 800228c:	e00c      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800228e:	4a13      	ldr	r2, [pc, #76]	; (80022dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	fbb2 f3f3 	udiv	r3, r2, r3
 8002296:	4a10      	ldr	r2, [pc, #64]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002298:	68d2      	ldr	r2, [r2, #12]
 800229a:	0a12      	lsrs	r2, r2, #8
 800229c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022a0:	fb02 f303 	mul.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
      break;
 80022a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0e5b      	lsrs	r3, r3, #25
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	3301      	adds	r3, #1
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	e001      	b.n	80022c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022c8:	693b      	ldr	r3, [r7, #16]
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	00f42400 	.word	0x00f42400
 80022e0:	016e3600 	.word	0x016e3600

080022e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	2000001c 	.word	0x2000001c

080022fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002300:	f7ff fff0 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002304:	4602      	mov	r2, r0
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	0a1b      	lsrs	r3, r3, #8
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	4904      	ldr	r1, [pc, #16]	; (8002324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002312:	5ccb      	ldrb	r3, [r1, r3]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800231c:	4618      	mov	r0, r3
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40021000 	.word	0x40021000
 8002324:	080057ac 	.word	0x080057ac

08002328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800232c:	f7ff ffda 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002330:	4602      	mov	r2, r0
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	0adb      	lsrs	r3, r3, #11
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800233e:	5ccb      	ldrb	r3, [r1, r3]
 8002340:	f003 031f 	and.w	r3, r3, #31
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002348:	4618      	mov	r0, r3
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	080057ac 	.word	0x080057ac

08002354 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	220f      	movs	r2, #15
 8002362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002364:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002370:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_RCC_GetClockConfig+0x5c>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_GetClockConfig+0x5c>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	08db      	lsrs	r3, r3, #3
 800238e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <HAL_RCC_GetClockConfig+0x60>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 020f 	and.w	r2, r3, #15
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40022000 	.word	0x40022000

080023b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	3301      	adds	r3, #1
 80023d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	d10c      	bne.n	80023f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023dc:	4a17      	ldr	r2, [pc, #92]	; (800243c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023e6:	68d2      	ldr	r2, [r2, #12]
 80023e8:	0a12      	lsrs	r2, r2, #8
 80023ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	617b      	str	r3, [r7, #20]
    break;
 80023f4:	e00c      	b.n	8002410 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023f6:	4a12      	ldr	r2, [pc, #72]	; (8002440 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fe:	4a0e      	ldr	r2, [pc, #56]	; (8002438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002400:	68d2      	ldr	r2, [r2, #12]
 8002402:	0a12      	lsrs	r2, r2, #8
 8002404:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002408:	fb02 f303 	mul.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    break;
 800240e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0e5b      	lsrs	r3, r3, #25
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	3301      	adds	r3, #1
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	fbb2 f3f3 	udiv	r3, r2, r3
 8002428:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800242a:	687b      	ldr	r3, [r7, #4]
}
 800242c:	4618      	mov	r0, r3
 800242e:	371c      	adds	r7, #28
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	40021000 	.word	0x40021000
 800243c:	016e3600 	.word	0x016e3600
 8002440:	00f42400 	.word	0x00f42400

08002444 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800244c:	2300      	movs	r3, #0
 800244e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002450:	2300      	movs	r3, #0
 8002452:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800245c:	2b00      	cmp	r3, #0
 800245e:	f000 8098 	beq.w	8002592 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002466:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10d      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b40      	ldr	r3, [pc, #256]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	4a3f      	ldr	r2, [pc, #252]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	6593      	str	r3, [r2, #88]	; 0x58
 800247e:	4b3d      	ldr	r3, [pc, #244]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800248a:	2301      	movs	r3, #1
 800248c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800248e:	4b3a      	ldr	r3, [pc, #232]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a39      	ldr	r2, [pc, #228]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800249a:	f7fe fef3 	bl	8001284 <HAL_GetTick>
 800249e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024a0:	e009      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7fe feef 	bl	8001284 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d902      	bls.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	74fb      	strb	r3, [r7, #19]
        break;
 80024b4:	e005      	b.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024b6:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0ef      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80024c2:	7cfb      	ldrb	r3, [r7, #19]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d159      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01e      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d019      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024e4:	4b23      	ldr	r3, [pc, #140]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024f0:	4b20      	ldr	r3, [pc, #128]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f6:	4a1f      	ldr	r2, [pc, #124]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002500:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002506:	4a1b      	ldr	r2, [pc, #108]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800250c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002510:	4a18      	ldr	r2, [pc, #96]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d016      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002522:	f7fe feaf 	bl	8001284 <HAL_GetTick>
 8002526:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002528:	e00b      	b.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252a:	f7fe feab 	bl	8001284 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	f241 3288 	movw	r2, #5000	; 0x1388
 8002538:	4293      	cmp	r3, r2
 800253a:	d902      	bls.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	74fb      	strb	r3, [r7, #19]
            break;
 8002540:	e006      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ec      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002550:	7cfb      	ldrb	r3, [r7, #19]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10b      	bne.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002556:	4b07      	ldr	r3, [pc, #28]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002564:	4903      	ldr	r1, [pc, #12]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800256c:	e008      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800256e:	7cfb      	ldrb	r3, [r7, #19]
 8002570:	74bb      	strb	r3, [r7, #18]
 8002572:	e005      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002574:	40021000 	.word	0x40021000
 8002578:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800257c:	7cfb      	ldrb	r3, [r7, #19]
 800257e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002580:	7c7b      	ldrb	r3, [r7, #17]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4ba7      	ldr	r3, [pc, #668]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4aa6      	ldr	r2, [pc, #664]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800259e:	4ba1      	ldr	r3, [pc, #644]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f023 0203 	bic.w	r2, r3, #3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	499d      	ldr	r1, [pc, #628]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025c0:	4b98      	ldr	r3, [pc, #608]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 020c 	bic.w	r2, r3, #12
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	4995      	ldr	r1, [pc, #596]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0304 	and.w	r3, r3, #4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025e2:	4b90      	ldr	r3, [pc, #576]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	498c      	ldr	r1, [pc, #560]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002604:	4b87      	ldr	r3, [pc, #540]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	4984      	ldr	r1, [pc, #528]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002626:	4b7f      	ldr	r3, [pc, #508]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	497b      	ldr	r1, [pc, #492]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0320 	and.w	r3, r3, #32
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002648:	4b76      	ldr	r3, [pc, #472]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	4973      	ldr	r1, [pc, #460]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800266a:	4b6e      	ldr	r3, [pc, #440]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
 8002678:	496a      	ldr	r1, [pc, #424]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800268c:	4b65      	ldr	r3, [pc, #404]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4962      	ldr	r1, [pc, #392]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ae:	4b5d      	ldr	r3, [pc, #372]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	4959      	ldr	r1, [pc, #356]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026d0:	4b54      	ldr	r3, [pc, #336]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026d6:	f023 0203 	bic.w	r2, r3, #3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	4951      	ldr	r1, [pc, #324]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026f2:	4b4c      	ldr	r3, [pc, #304]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	4948      	ldr	r1, [pc, #288]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002710:	2b00      	cmp	r3, #0
 8002712:	d015      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002714:	4b43      	ldr	r3, [pc, #268]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4940      	ldr	r1, [pc, #256]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002732:	d105      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002734:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	4a3a      	ldr	r2, [pc, #232]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800273e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	2b00      	cmp	r3, #0
 800274a:	d015      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800274c:	4b35      	ldr	r3, [pc, #212]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002752:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800275a:	4932      	ldr	r1, [pc, #200]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275c:	4313      	orrs	r3, r2
 800275e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800276a:	d105      	bne.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800276c:	4b2d      	ldr	r3, [pc, #180]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4a2c      	ldr	r2, [pc, #176]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002776:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d015      	beq.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002784:	4b27      	ldr	r3, [pc, #156]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	4924      	ldr	r1, [pc, #144]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002794:	4313      	orrs	r3, r2
 8002796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a2:	d105      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a4:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	4a1e      	ldr	r2, [pc, #120]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027ae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d015      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027bc:	4b19      	ldr	r3, [pc, #100]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ca:	4916      	ldr	r1, [pc, #88]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027da:	d105      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027dc:	4b11      	ldr	r3, [pc, #68]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	4a10      	ldr	r2, [pc, #64]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027e6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d019      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	4908      	ldr	r1, [pc, #32]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002812:	d109      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002814:	4b03      	ldr	r3, [pc, #12]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a02      	ldr	r2, [pc, #8]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800281e:	60d3      	str	r3, [r2, #12]
 8002820:	e002      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002834:	4b29      	ldr	r3, [pc, #164]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002842:	4926      	ldr	r1, [pc, #152]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002852:	d105      	bne.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4a20      	ldr	r2, [pc, #128]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800286c:	4b1b      	ldr	r3, [pc, #108]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800287a:	4918      	ldr	r1, [pc, #96]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d105      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d015      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028a4:	4b0d      	ldr	r3, [pc, #52]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	490a      	ldr	r1, [pc, #40]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028c2:	d105      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c4:	4b05      	ldr	r3, [pc, #20]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ce:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40021000 	.word	0x40021000

080028e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e049      	b.n	8002986 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe fada 	bl	8000ec0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	f000 ffaa 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d001      	beq.n	80029a8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e04c      	b.n	8002a42 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a26      	ldr	r2, [pc, #152]	; (8002a50 <HAL_TIM_Base_Start+0xc0>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d022      	beq.n	8002a00 <HAL_TIM_Base_Start+0x70>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d01d      	beq.n	8002a00 <HAL_TIM_Base_Start+0x70>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a22      	ldr	r2, [pc, #136]	; (8002a54 <HAL_TIM_Base_Start+0xc4>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d018      	beq.n	8002a00 <HAL_TIM_Base_Start+0x70>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <HAL_TIM_Base_Start+0xc8>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d013      	beq.n	8002a00 <HAL_TIM_Base_Start+0x70>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a1f      	ldr	r2, [pc, #124]	; (8002a5c <HAL_TIM_Base_Start+0xcc>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00e      	beq.n	8002a00 <HAL_TIM_Base_Start+0x70>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_TIM_Base_Start+0xd0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d009      	beq.n	8002a00 <HAL_TIM_Base_Start+0x70>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	; (8002a64 <HAL_TIM_Base_Start+0xd4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d004      	beq.n	8002a00 <HAL_TIM_Base_Start+0x70>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_TIM_Base_Start+0xd8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d115      	bne.n	8002a2c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689a      	ldr	r2, [r3, #8]
 8002a06:	4b19      	ldr	r3, [pc, #100]	; (8002a6c <HAL_TIM_Base_Start+0xdc>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d015      	beq.n	8002a3e <HAL_TIM_Base_Start+0xae>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a18:	d011      	beq.n	8002a3e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a2a:	e008      	b.n	8002a3e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f042 0201 	orr.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e000      	b.n	8002a40 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3714      	adds	r7, #20
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40012c00 	.word	0x40012c00
 8002a54:	40000400 	.word	0x40000400
 8002a58:	40000800 	.word	0x40000800
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	40013400 	.word	0x40013400
 8002a64:	40014000 	.word	0x40014000
 8002a68:	40015000 	.word	0x40015000
 8002a6c:	00010007 	.word	0x00010007

08002a70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d001      	beq.n	8002a88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e054      	b.n	8002b32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_TIM_Base_Start_IT+0xd0>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d022      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab2:	d01d      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a22      	ldr	r2, [pc, #136]	; (8002b44 <HAL_TIM_Base_Start_IT+0xd4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d018      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a21      	ldr	r2, [pc, #132]	; (8002b48 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a1f      	ldr	r2, [pc, #124]	; (8002b4c <HAL_TIM_Base_Start_IT+0xdc>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00e      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1e      	ldr	r2, [pc, #120]	; (8002b50 <HAL_TIM_Base_Start_IT+0xe0>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d009      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <HAL_TIM_Base_Start_IT+0xe4>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_TIM_Base_Start_IT+0x80>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <HAL_TIM_Base_Start_IT+0xe8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d115      	bne.n	8002b1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	4b19      	ldr	r3, [pc, #100]	; (8002b5c <HAL_TIM_Base_Start_IT+0xec>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b06      	cmp	r3, #6
 8002b00:	d015      	beq.n	8002b2e <HAL_TIM_Base_Start_IT+0xbe>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b08:	d011      	beq.n	8002b2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	e008      	b.n	8002b2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f042 0201 	orr.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]
 8002b2c:	e000      	b.n	8002b30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	40000400 	.word	0x40000400
 8002b48:	40000800 	.word	0x40000800
 8002b4c:	40000c00 	.word	0x40000c00
 8002b50:	40013400 	.word	0x40013400
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40015000 	.word	0x40015000
 8002b5c:	00010007 	.word	0x00010007

08002b60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e049      	b.n	8002c06 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f841 	bl	8002c0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f000 fe6a 	bl	8003878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c16:	bf00      	nop
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
	...

08002c24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d109      	bne.n	8002c48 <HAL_TIM_PWM_Start+0x24>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	e03c      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x9e>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d109      	bne.n	8002c62 <HAL_TIM_PWM_Start+0x3e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	bf14      	ite	ne
 8002c5a:	2301      	movne	r3, #1
 8002c5c:	2300      	moveq	r3, #0
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	e02f      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x9e>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d109      	bne.n	8002c7c <HAL_TIM_PWM_Start+0x58>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	e022      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x9e>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	2b0c      	cmp	r3, #12
 8002c80:	d109      	bne.n	8002c96 <HAL_TIM_PWM_Start+0x72>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	bf14      	ite	ne
 8002c8e:	2301      	movne	r3, #1
 8002c90:	2300      	moveq	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	e015      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x9e>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d109      	bne.n	8002cb0 <HAL_TIM_PWM_Start+0x8c>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	bf14      	ite	ne
 8002ca8:	2301      	movne	r3, #1
 8002caa:	2300      	moveq	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e008      	b.n	8002cc2 <HAL_TIM_PWM_Start+0x9e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	bf14      	ite	ne
 8002cbc:	2301      	movne	r3, #1
 8002cbe:	2300      	moveq	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0a6      	b.n	8002e18 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <HAL_TIM_PWM_Start+0xb6>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd8:	e023      	b.n	8002d22 <HAL_TIM_PWM_Start+0xfe>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_PWM_Start+0xc6>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce8:	e01b      	b.n	8002d22 <HAL_TIM_PWM_Start+0xfe>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0xd6>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cf8:	e013      	b.n	8002d22 <HAL_TIM_PWM_Start+0xfe>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b0c      	cmp	r3, #12
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xe6>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d08:	e00b      	b.n	8002d22 <HAL_TIM_PWM_Start+0xfe>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b10      	cmp	r3, #16
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start+0xf6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d18:	e003      	b.n	8002d22 <HAL_TIM_PWM_Start+0xfe>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2201      	movs	r2, #1
 8002d28:	6839      	ldr	r1, [r7, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f001 fafe 	bl	800432c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <HAL_TIM_PWM_Start+0x1fc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d018      	beq.n	8002d6c <HAL_TIM_PWM_Start+0x148>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a39      	ldr	r2, [pc, #228]	; (8002e24 <HAL_TIM_PWM_Start+0x200>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d013      	beq.n	8002d6c <HAL_TIM_PWM_Start+0x148>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a37      	ldr	r2, [pc, #220]	; (8002e28 <HAL_TIM_PWM_Start+0x204>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00e      	beq.n	8002d6c <HAL_TIM_PWM_Start+0x148>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a36      	ldr	r2, [pc, #216]	; (8002e2c <HAL_TIM_PWM_Start+0x208>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d009      	beq.n	8002d6c <HAL_TIM_PWM_Start+0x148>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a34      	ldr	r2, [pc, #208]	; (8002e30 <HAL_TIM_PWM_Start+0x20c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d004      	beq.n	8002d6c <HAL_TIM_PWM_Start+0x148>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a33      	ldr	r2, [pc, #204]	; (8002e34 <HAL_TIM_PWM_Start+0x210>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_TIM_PWM_Start+0x14c>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_TIM_PWM_Start+0x14e>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d84:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a25      	ldr	r2, [pc, #148]	; (8002e20 <HAL_TIM_PWM_Start+0x1fc>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d022      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x1b2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d01d      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x1b2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a26      	ldr	r2, [pc, #152]	; (8002e38 <HAL_TIM_PWM_Start+0x214>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d018      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x1b2>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <HAL_TIM_PWM_Start+0x218>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x1b2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <HAL_TIM_PWM_Start+0x21c>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x1b2>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <HAL_TIM_PWM_Start+0x200>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x1b2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a18      	ldr	r2, [pc, #96]	; (8002e28 <HAL_TIM_PWM_Start+0x204>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_TIM_PWM_Start+0x1b2>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_TIM_PWM_Start+0x210>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d115      	bne.n	8002e02 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <HAL_TIM_PWM_Start+0x220>)
 8002dde:	4013      	ands	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d015      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1f0>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dee:	d011      	beq.n	8002e14 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e00:	e008      	b.n	8002e14 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0201 	orr.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e000      	b.n	8002e16 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40012c00 	.word	0x40012c00
 8002e24:	40013400 	.word	0x40013400
 8002e28:	40014000 	.word	0x40014000
 8002e2c:	40014400 	.word	0x40014400
 8002e30:	40014800 	.word	0x40014800
 8002e34:	40015000 	.word	0x40015000
 8002e38:	40000400 	.word	0x40000400
 8002e3c:	40000800 	.word	0x40000800
 8002e40:	40000c00 	.word	0x40000c00
 8002e44:	00010007 	.word	0x00010007

08002e48 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e097      	b.n	8002f8c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d106      	bne.n	8002e76 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7fe f899 	bl	8000fa8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002e8c:	f023 0307 	bic.w	r3, r3, #7
 8002e90:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3304      	adds	r3, #4
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	4610      	mov	r0, r2
 8002e9e:	f000 fceb 	bl	8003878 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eca:	f023 0303 	bic.w	r3, r3, #3
 8002ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	689a      	ldr	r2, [r3, #8]
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	4313      	orrs	r3, r2
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002ee8:	f023 030c 	bic.w	r3, r3, #12
 8002eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ef4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	4313      	orrs	r3, r2
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	011a      	lsls	r2, r3, #4
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	031b      	lsls	r3, r3, #12
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f26:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002f2e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fac:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fb4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fbc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d110      	bne.n	8002fe6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d102      	bne.n	8002fd0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fca:	7b7b      	ldrb	r3, [r7, #13]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d001      	beq.n	8002fd4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e069      	b.n	80030a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe4:	e031      	b.n	800304a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b04      	cmp	r3, #4
 8002fea:	d110      	bne.n	800300e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fec:	7bbb      	ldrb	r3, [r7, #14]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d102      	bne.n	8002ff8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ff2:	7b3b      	ldrb	r3, [r7, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d001      	beq.n	8002ffc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e055      	b.n	80030a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2202      	movs	r2, #2
 8003000:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800300c:	e01d      	b.n	800304a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d108      	bne.n	8003026 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003014:	7bbb      	ldrb	r3, [r7, #14]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800301a:	7b7b      	ldrb	r3, [r7, #13]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d102      	bne.n	8003026 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003020:	7b3b      	ldrb	r3, [r7, #12]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d001      	beq.n	800302a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e03e      	b.n	80030a8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2202      	movs	r2, #2
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2202      	movs	r2, #2
 8003036:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_TIM_Encoder_Start+0xc4>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d008      	beq.n	8003068 <HAL_TIM_Encoder_Start+0xd4>
 8003056:	e00f      	b.n	8003078 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2201      	movs	r2, #1
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f001 f963 	bl	800432c <TIM_CCxChannelCmd>
      break;
 8003066:	e016      	b.n	8003096 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2201      	movs	r2, #1
 800306e:	2104      	movs	r1, #4
 8003070:	4618      	mov	r0, r3
 8003072:	f001 f95b 	bl	800432c <TIM_CCxChannelCmd>
      break;
 8003076:	e00e      	b.n	8003096 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2201      	movs	r2, #1
 800307e:	2100      	movs	r1, #0
 8003080:	4618      	mov	r0, r3
 8003082:	f001 f953 	bl	800432c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2201      	movs	r2, #1
 800308c:	2104      	movs	r1, #4
 800308e:	4618      	mov	r0, r3
 8003090:	f001 f94c 	bl	800432c <TIM_CCxChannelCmd>
      break;
 8003094:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f042 0201 	orr.w	r2, r2, #1
 80030a4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68db      	ldr	r3, [r3, #12]
 80030be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d020      	beq.n	8003114 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01b      	beq.n	8003114 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0202 	mvn.w	r2, #2
 80030e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fb9e 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 8003100:	e005      	b.n	800310e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 fb90 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 fba1 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d020      	beq.n	8003160 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01b      	beq.n	8003160 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0204 	mvn.w	r2, #4
 8003130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fb78 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 800314c:	e005      	b.n	800315a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 fb6a 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 fb7b 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b00      	cmp	r3, #0
 8003168:	d020      	beq.n	80031ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0308 	and.w	r3, r3, #8
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0208 	mvn.w	r2, #8
 800317c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2204      	movs	r2, #4
 8003182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fb52 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fb44 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fb55 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d020      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01b      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f06f 0210 	mvn.w	r2, #16
 80031c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2208      	movs	r2, #8
 80031ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fb2c 	bl	800383c <HAL_TIM_IC_CaptureCallback>
 80031e4:	e005      	b.n	80031f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fb1e 	bl	8003828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fb2f 	bl	8003850 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0201 	mvn.w	r2, #1
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fd72 	bl	8000d00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b00      	cmp	r3, #0
 8003224:	d104      	bne.n	8003230 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00c      	beq.n	800324a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003236:	2b00      	cmp	r3, #0
 8003238:	d007      	beq.n	800324a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f001 f9cb 	bl	80045e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00c      	beq.n	800326e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325a:	2b00      	cmp	r3, #0
 800325c:	d007      	beq.n	800326e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f001 f9c3 	bl	80045f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00c      	beq.n	8003292 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	2b00      	cmp	r3, #0
 8003280:	d007      	beq.n	8003292 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800328a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fae9 	bl	8003864 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00c      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f06f 0220 	mvn.w	r2, #32
 80032ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f001 f98b 	bl	80045cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00c      	beq.n	80032da <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80032d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f001 f997 	bl	8004608 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00c      	beq.n	80032fe <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80032f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f001 f98f 	bl	800461c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00c      	beq.n	8003322 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d007      	beq.n	8003322 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800331a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f001 f987 	bl	8004630 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00c      	beq.n	8003346 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d007      	beq.n	8003346 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800333e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f001 f97f 	bl	8004644 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0ff      	b.n	800356e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b14      	cmp	r3, #20
 800337a:	f200 80f0 	bhi.w	800355e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033d9 	.word	0x080033d9
 8003388:	0800355f 	.word	0x0800355f
 800338c:	0800355f 	.word	0x0800355f
 8003390:	0800355f 	.word	0x0800355f
 8003394:	08003419 	.word	0x08003419
 8003398:	0800355f 	.word	0x0800355f
 800339c:	0800355f 	.word	0x0800355f
 80033a0:	0800355f 	.word	0x0800355f
 80033a4:	0800345b 	.word	0x0800345b
 80033a8:	0800355f 	.word	0x0800355f
 80033ac:	0800355f 	.word	0x0800355f
 80033b0:	0800355f 	.word	0x0800355f
 80033b4:	0800349b 	.word	0x0800349b
 80033b8:	0800355f 	.word	0x0800355f
 80033bc:	0800355f 	.word	0x0800355f
 80033c0:	0800355f 	.word	0x0800355f
 80033c4:	080034dd 	.word	0x080034dd
 80033c8:	0800355f 	.word	0x0800355f
 80033cc:	0800355f 	.word	0x0800355f
 80033d0:	0800355f 	.word	0x0800355f
 80033d4:	0800351d 	.word	0x0800351d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68b9      	ldr	r1, [r7, #8]
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fafe 	bl	80039e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	699a      	ldr	r2, [r3, #24]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f042 0208 	orr.w	r2, r2, #8
 80033f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0204 	bic.w	r2, r2, #4
 8003402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6999      	ldr	r1, [r3, #24]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	691a      	ldr	r2, [r3, #16]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	619a      	str	r2, [r3, #24]
      break;
 8003416:	e0a5      	b.n	8003564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68b9      	ldr	r1, [r7, #8]
 800341e:	4618      	mov	r0, r3
 8003420:	f000 fb78 	bl	8003b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	021a      	lsls	r2, r3, #8
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	619a      	str	r2, [r3, #24]
      break;
 8003458:	e084      	b.n	8003564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fbeb 	bl	8003c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69da      	ldr	r2, [r3, #28]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f042 0208 	orr.w	r2, r2, #8
 8003474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	69da      	ldr	r2, [r3, #28]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0204 	bic.w	r2, r2, #4
 8003484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	61da      	str	r2, [r3, #28]
      break;
 8003498:	e064      	b.n	8003564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68b9      	ldr	r1, [r7, #8]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 fc5d 	bl	8003d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69da      	ldr	r2, [r3, #28]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69da      	ldr	r2, [r3, #28]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69d9      	ldr	r1, [r3, #28]
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	021a      	lsls	r2, r3, #8
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	61da      	str	r2, [r3, #28]
      break;
 80034da:	e043      	b.n	8003564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68b9      	ldr	r1, [r7, #8]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fcd0 	bl	8003e88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0208 	orr.w	r2, r2, #8
 80034f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0204 	bic.w	r2, r2, #4
 8003506:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800351a:	e023      	b.n	8003564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fd1a 	bl	8003f5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003536:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003546:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	021a      	lsls	r2, r3, #8
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800355c:	e002      	b.n	8003564 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	75fb      	strb	r3, [r7, #23]
      break;
 8003562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800356c:	7dfb      	ldrb	r3, [r7, #23]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop

08003578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIM_ConfigClockSource+0x1c>
 8003590:	2302      	movs	r3, #2
 8003592:	e0f6      	b.n	8003782 <HAL_TIM_ConfigClockSource+0x20a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80035b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68ba      	ldr	r2, [r7, #8]
 80035c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6f      	ldr	r2, [pc, #444]	; (800378c <HAL_TIM_ConfigClockSource+0x214>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	f000 80c1 	beq.w	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 80035d4:	4a6d      	ldr	r2, [pc, #436]	; (800378c <HAL_TIM_ConfigClockSource+0x214>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	f200 80c6 	bhi.w	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 80035dc:	4a6c      	ldr	r2, [pc, #432]	; (8003790 <HAL_TIM_ConfigClockSource+0x218>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	f000 80b9 	beq.w	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 80035e4:	4a6a      	ldr	r2, [pc, #424]	; (8003790 <HAL_TIM_ConfigClockSource+0x218>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	f200 80be 	bhi.w	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 80035ec:	4a69      	ldr	r2, [pc, #420]	; (8003794 <HAL_TIM_ConfigClockSource+0x21c>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	f000 80b1 	beq.w	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 80035f4:	4a67      	ldr	r2, [pc, #412]	; (8003794 <HAL_TIM_ConfigClockSource+0x21c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	f200 80b6 	bhi.w	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 80035fc:	4a66      	ldr	r2, [pc, #408]	; (8003798 <HAL_TIM_ConfigClockSource+0x220>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	f000 80a9 	beq.w	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 8003604:	4a64      	ldr	r2, [pc, #400]	; (8003798 <HAL_TIM_ConfigClockSource+0x220>)
 8003606:	4293      	cmp	r3, r2
 8003608:	f200 80ae 	bhi.w	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 800360c:	4a63      	ldr	r2, [pc, #396]	; (800379c <HAL_TIM_ConfigClockSource+0x224>)
 800360e:	4293      	cmp	r3, r2
 8003610:	f000 80a1 	beq.w	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 8003614:	4a61      	ldr	r2, [pc, #388]	; (800379c <HAL_TIM_ConfigClockSource+0x224>)
 8003616:	4293      	cmp	r3, r2
 8003618:	f200 80a6 	bhi.w	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 800361c:	4a60      	ldr	r2, [pc, #384]	; (80037a0 <HAL_TIM_ConfigClockSource+0x228>)
 800361e:	4293      	cmp	r3, r2
 8003620:	f000 8099 	beq.w	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 8003624:	4a5e      	ldr	r2, [pc, #376]	; (80037a0 <HAL_TIM_ConfigClockSource+0x228>)
 8003626:	4293      	cmp	r3, r2
 8003628:	f200 809e 	bhi.w	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 800362c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003630:	f000 8091 	beq.w	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 8003634:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003638:	f200 8096 	bhi.w	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 800363c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003640:	f000 8089 	beq.w	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 8003644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003648:	f200 808e 	bhi.w	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 800364c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003650:	d03e      	beq.n	80036d0 <HAL_TIM_ConfigClockSource+0x158>
 8003652:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003656:	f200 8087 	bhi.w	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 800365a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800365e:	f000 8086 	beq.w	800376e <HAL_TIM_ConfigClockSource+0x1f6>
 8003662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003666:	d87f      	bhi.n	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 8003668:	2b70      	cmp	r3, #112	; 0x70
 800366a:	d01a      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x12a>
 800366c:	2b70      	cmp	r3, #112	; 0x70
 800366e:	d87b      	bhi.n	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 8003670:	2b60      	cmp	r3, #96	; 0x60
 8003672:	d050      	beq.n	8003716 <HAL_TIM_ConfigClockSource+0x19e>
 8003674:	2b60      	cmp	r3, #96	; 0x60
 8003676:	d877      	bhi.n	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 8003678:	2b50      	cmp	r3, #80	; 0x50
 800367a:	d03c      	beq.n	80036f6 <HAL_TIM_ConfigClockSource+0x17e>
 800367c:	2b50      	cmp	r3, #80	; 0x50
 800367e:	d873      	bhi.n	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 8003680:	2b40      	cmp	r3, #64	; 0x40
 8003682:	d058      	beq.n	8003736 <HAL_TIM_ConfigClockSource+0x1be>
 8003684:	2b40      	cmp	r3, #64	; 0x40
 8003686:	d86f      	bhi.n	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 8003688:	2b30      	cmp	r3, #48	; 0x30
 800368a:	d064      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 800368c:	2b30      	cmp	r3, #48	; 0x30
 800368e:	d86b      	bhi.n	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 8003690:	2b20      	cmp	r3, #32
 8003692:	d060      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 8003694:	2b20      	cmp	r3, #32
 8003696:	d867      	bhi.n	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d05c      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 800369c:	2b10      	cmp	r3, #16
 800369e:	d05a      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x1de>
 80036a0:	e062      	b.n	8003768 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036b2:	f000 fe1b 	bl	80042ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	609a      	str	r2, [r3, #8]
      break;
 80036ce:	e04f      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036e0:	f000 fe04 	bl	80042ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f2:	609a      	str	r2, [r3, #8]
      break;
 80036f4:	e03c      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003702:	461a      	mov	r2, r3
 8003704:	f000 fd76 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2150      	movs	r1, #80	; 0x50
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fdcf 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8003714:	e02c      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003722:	461a      	mov	r2, r3
 8003724:	f000 fd95 	bl	8004252 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2160      	movs	r1, #96	; 0x60
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fdbf 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8003734:	e01c      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003742:	461a      	mov	r2, r3
 8003744:	f000 fd56 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2140      	movs	r1, #64	; 0x40
 800374e:	4618      	mov	r0, r3
 8003750:	f000 fdaf 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8003754:	e00c      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4619      	mov	r1, r3
 8003760:	4610      	mov	r0, r2
 8003762:	f000 fda6 	bl	80042b2 <TIM_ITRx_SetConfig>
      break;
 8003766:	e003      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	73fb      	strb	r3, [r7, #15]
      break;
 800376c:	e000      	b.n	8003770 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800376e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003780:	7bfb      	ldrb	r3, [r7, #15]
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	00100070 	.word	0x00100070
 8003790:	00100060 	.word	0x00100060
 8003794:	00100050 	.word	0x00100050
 8003798:	00100040 	.word	0x00100040
 800379c:	00100030 	.word	0x00100030
 80037a0:	00100020 	.word	0x00100020

080037a4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_TIM_SlaveConfigSynchro+0x18>
 80037b8:	2302      	movs	r3, #2
 80037ba:	e031      	b.n	8003820 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fc30 	bl	8004034 <TIM_SlaveTimer_SetConfig>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e018      	b.n	8003820 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037fc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800380c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a4c      	ldr	r2, [pc, #304]	; (80039bc <TIM_Base_SetConfig+0x144>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d017      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003896:	d013      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a49      	ldr	r2, [pc, #292]	; (80039c0 <TIM_Base_SetConfig+0x148>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d00f      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a48      	ldr	r2, [pc, #288]	; (80039c4 <TIM_Base_SetConfig+0x14c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a47      	ldr	r2, [pc, #284]	; (80039c8 <TIM_Base_SetConfig+0x150>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a46      	ldr	r2, [pc, #280]	; (80039cc <TIM_Base_SetConfig+0x154>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x48>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a45      	ldr	r2, [pc, #276]	; (80039d0 <TIM_Base_SetConfig+0x158>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a39      	ldr	r2, [pc, #228]	; (80039bc <TIM_Base_SetConfig+0x144>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d023      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d01f      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a36      	ldr	r2, [pc, #216]	; (80039c0 <TIM_Base_SetConfig+0x148>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01b      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a35      	ldr	r2, [pc, #212]	; (80039c4 <TIM_Base_SetConfig+0x14c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d017      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a34      	ldr	r2, [pc, #208]	; (80039c8 <TIM_Base_SetConfig+0x150>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a33      	ldr	r2, [pc, #204]	; (80039cc <TIM_Base_SetConfig+0x154>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00f      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <TIM_Base_SetConfig+0x15c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00b      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a32      	ldr	r2, [pc, #200]	; (80039d8 <TIM_Base_SetConfig+0x160>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a31      	ldr	r2, [pc, #196]	; (80039dc <TIM_Base_SetConfig+0x164>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d003      	beq.n	8003922 <TIM_Base_SetConfig+0xaa>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2c      	ldr	r2, [pc, #176]	; (80039d0 <TIM_Base_SetConfig+0x158>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d108      	bne.n	8003934 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	4313      	orrs	r3, r2
 8003940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	689a      	ldr	r2, [r3, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a18      	ldr	r2, [pc, #96]	; (80039bc <TIM_Base_SetConfig+0x144>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a1a      	ldr	r2, [pc, #104]	; (80039cc <TIM_Base_SetConfig+0x154>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00f      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <TIM_Base_SetConfig+0x15c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00b      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a19      	ldr	r2, [pc, #100]	; (80039d8 <TIM_Base_SetConfig+0x160>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d007      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <TIM_Base_SetConfig+0x164>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d003      	beq.n	8003988 <TIM_Base_SetConfig+0x110>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a13      	ldr	r2, [pc, #76]	; (80039d0 <TIM_Base_SetConfig+0x158>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d103      	bne.n	8003990 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	691a      	ldr	r2, [r3, #16]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d105      	bne.n	80039ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	f023 0201 	bic.w	r2, r3, #1
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	611a      	str	r2, [r3, #16]
  }
}
 80039ae:	bf00      	nop
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40012c00 	.word	0x40012c00
 80039c0:	40000400 	.word	0x40000400
 80039c4:	40000800 	.word	0x40000800
 80039c8:	40000c00 	.word	0x40000c00
 80039cc:	40013400 	.word	0x40013400
 80039d0:	40015000 	.word	0x40015000
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f023 0201 	bic.w	r2, r3, #1
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f023 0302 	bic.w	r3, r3, #2
 8003a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a30      	ldr	r2, [pc, #192]	; (8003afc <TIM_OC1_SetConfig+0x11c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d013      	beq.n	8003a68 <TIM_OC1_SetConfig+0x88>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a2f      	ldr	r2, [pc, #188]	; (8003b00 <TIM_OC1_SetConfig+0x120>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d00f      	beq.n	8003a68 <TIM_OC1_SetConfig+0x88>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a2e      	ldr	r2, [pc, #184]	; (8003b04 <TIM_OC1_SetConfig+0x124>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d00b      	beq.n	8003a68 <TIM_OC1_SetConfig+0x88>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4a2d      	ldr	r2, [pc, #180]	; (8003b08 <TIM_OC1_SetConfig+0x128>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d007      	beq.n	8003a68 <TIM_OC1_SetConfig+0x88>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a2c      	ldr	r2, [pc, #176]	; (8003b0c <TIM_OC1_SetConfig+0x12c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d003      	beq.n	8003a68 <TIM_OC1_SetConfig+0x88>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a2b      	ldr	r2, [pc, #172]	; (8003b10 <TIM_OC1_SetConfig+0x130>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d10c      	bne.n	8003a82 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	f023 0308 	bic.w	r3, r3, #8
 8003a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f023 0304 	bic.w	r3, r3, #4
 8003a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <TIM_OC1_SetConfig+0x11c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <TIM_OC1_SetConfig+0xd2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a1c      	ldr	r2, [pc, #112]	; (8003b00 <TIM_OC1_SetConfig+0x120>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00f      	beq.n	8003ab2 <TIM_OC1_SetConfig+0xd2>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a1b      	ldr	r2, [pc, #108]	; (8003b04 <TIM_OC1_SetConfig+0x124>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d00b      	beq.n	8003ab2 <TIM_OC1_SetConfig+0xd2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <TIM_OC1_SetConfig+0x128>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d007      	beq.n	8003ab2 <TIM_OC1_SetConfig+0xd2>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a19      	ldr	r2, [pc, #100]	; (8003b0c <TIM_OC1_SetConfig+0x12c>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d003      	beq.n	8003ab2 <TIM_OC1_SetConfig+0xd2>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a18      	ldr	r2, [pc, #96]	; (8003b10 <TIM_OC1_SetConfig+0x130>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d111      	bne.n	8003ad6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	697a      	ldr	r2, [r7, #20]
 8003aee:	621a      	str	r2, [r3, #32]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	40012c00 	.word	0x40012c00
 8003b00:	40013400 	.word	0x40013400
 8003b04:	40014000 	.word	0x40014000
 8003b08:	40014400 	.word	0x40014400
 8003b0c:	40014800 	.word	0x40014800
 8003b10:	40015000 	.word	0x40015000

08003b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b087      	sub	sp, #28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a1b      	ldr	r3, [r3, #32]
 8003b28:	f023 0210 	bic.w	r2, r3, #16
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0320 	bic.w	r3, r3, #32
 8003b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a2c      	ldr	r2, [pc, #176]	; (8003c24 <TIM_OC2_SetConfig+0x110>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d007      	beq.n	8003b88 <TIM_OC2_SetConfig+0x74>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a2b      	ldr	r2, [pc, #172]	; (8003c28 <TIM_OC2_SetConfig+0x114>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_OC2_SetConfig+0x74>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a2a      	ldr	r2, [pc, #168]	; (8003c2c <TIM_OC2_SetConfig+0x118>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10d      	bne.n	8003ba4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <TIM_OC2_SetConfig+0x110>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d013      	beq.n	8003bd4 <TIM_OC2_SetConfig+0xc0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a1e      	ldr	r2, [pc, #120]	; (8003c28 <TIM_OC2_SetConfig+0x114>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00f      	beq.n	8003bd4 <TIM_OC2_SetConfig+0xc0>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <TIM_OC2_SetConfig+0x11c>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00b      	beq.n	8003bd4 <TIM_OC2_SetConfig+0xc0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <TIM_OC2_SetConfig+0x120>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_OC2_SetConfig+0xc0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <TIM_OC2_SetConfig+0x124>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_OC2_SetConfig+0xc0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a17      	ldr	r2, [pc, #92]	; (8003c2c <TIM_OC2_SetConfig+0x118>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d113      	bne.n	8003bfc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	bf00      	nop
 8003c18:	371c      	adds	r7, #28
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40013400 	.word	0x40013400
 8003c2c:	40015000 	.word	0x40015000
 8003c30:	40014000 	.word	0x40014000
 8003c34:	40014400 	.word	0x40014400
 8003c38:	40014800 	.word	0x40014800

08003c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0303 	bic.w	r3, r3, #3
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	697a      	ldr	r2, [r7, #20]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a2b      	ldr	r2, [pc, #172]	; (8003d48 <TIM_OC3_SetConfig+0x10c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d007      	beq.n	8003cae <TIM_OC3_SetConfig+0x72>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a2a      	ldr	r2, [pc, #168]	; (8003d4c <TIM_OC3_SetConfig+0x110>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d003      	beq.n	8003cae <TIM_OC3_SetConfig+0x72>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a29      	ldr	r2, [pc, #164]	; (8003d50 <TIM_OC3_SetConfig+0x114>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10d      	bne.n	8003cca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	021b      	lsls	r3, r3, #8
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	; (8003d48 <TIM_OC3_SetConfig+0x10c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d013      	beq.n	8003cfa <TIM_OC3_SetConfig+0xbe>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1d      	ldr	r2, [pc, #116]	; (8003d4c <TIM_OC3_SetConfig+0x110>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d00f      	beq.n	8003cfa <TIM_OC3_SetConfig+0xbe>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1d      	ldr	r2, [pc, #116]	; (8003d54 <TIM_OC3_SetConfig+0x118>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <TIM_OC3_SetConfig+0xbe>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1c      	ldr	r2, [pc, #112]	; (8003d58 <TIM_OC3_SetConfig+0x11c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d007      	beq.n	8003cfa <TIM_OC3_SetConfig+0xbe>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <TIM_OC3_SetConfig+0x120>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d003      	beq.n	8003cfa <TIM_OC3_SetConfig+0xbe>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a16      	ldr	r2, [pc, #88]	; (8003d50 <TIM_OC3_SetConfig+0x114>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d113      	bne.n	8003d22 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	699b      	ldr	r3, [r3, #24]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	621a      	str	r2, [r3, #32]
}
 8003d3c:	bf00      	nop
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr
 8003d48:	40012c00 	.word	0x40012c00
 8003d4c:	40013400 	.word	0x40013400
 8003d50:	40015000 	.word	0x40015000
 8003d54:	40014000 	.word	0x40014000
 8003d58:	40014400 	.word	0x40014400
 8003d5c:	40014800 	.word	0x40014800

08003d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	031b      	lsls	r3, r3, #12
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	; (8003e70 <TIM_OC4_SetConfig+0x110>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <TIM_OC4_SetConfig+0x74>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a2b      	ldr	r2, [pc, #172]	; (8003e74 <TIM_OC4_SetConfig+0x114>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_OC4_SetConfig+0x74>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <TIM_OC4_SetConfig+0x118>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10d      	bne.n	8003df0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	031b      	lsls	r3, r3, #12
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a1f      	ldr	r2, [pc, #124]	; (8003e70 <TIM_OC4_SetConfig+0x110>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d013      	beq.n	8003e20 <TIM_OC4_SetConfig+0xc0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <TIM_OC4_SetConfig+0x114>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00f      	beq.n	8003e20 <TIM_OC4_SetConfig+0xc0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a1e      	ldr	r2, [pc, #120]	; (8003e7c <TIM_OC4_SetConfig+0x11c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d00b      	beq.n	8003e20 <TIM_OC4_SetConfig+0xc0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <TIM_OC4_SetConfig+0x120>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d007      	beq.n	8003e20 <TIM_OC4_SetConfig+0xc0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a1c      	ldr	r2, [pc, #112]	; (8003e84 <TIM_OC4_SetConfig+0x124>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d003      	beq.n	8003e20 <TIM_OC4_SetConfig+0xc0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <TIM_OC4_SetConfig+0x118>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d113      	bne.n	8003e48 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	019b      	lsls	r3, r3, #6
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	019b      	lsls	r3, r3, #6
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40012c00 	.word	0x40012c00
 8003e74:	40013400 	.word	0x40013400
 8003e78:	40015000 	.word	0x40015000
 8003e7c:	40014000 	.word	0x40014000
 8003e80:	40014400 	.word	0x40014400
 8003e84:	40014800 	.word	0x40014800

08003e88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003ecc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	041b      	lsls	r3, r3, #16
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a19      	ldr	r2, [pc, #100]	; (8003f44 <TIM_OC5_SetConfig+0xbc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d013      	beq.n	8003f0a <TIM_OC5_SetConfig+0x82>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a18      	ldr	r2, [pc, #96]	; (8003f48 <TIM_OC5_SetConfig+0xc0>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00f      	beq.n	8003f0a <TIM_OC5_SetConfig+0x82>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <TIM_OC5_SetConfig+0xc4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d00b      	beq.n	8003f0a <TIM_OC5_SetConfig+0x82>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <TIM_OC5_SetConfig+0xc8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d007      	beq.n	8003f0a <TIM_OC5_SetConfig+0x82>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <TIM_OC5_SetConfig+0xcc>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d003      	beq.n	8003f0a <TIM_OC5_SetConfig+0x82>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <TIM_OC5_SetConfig+0xd0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d109      	bne.n	8003f1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	021b      	lsls	r3, r3, #8
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	621a      	str	r2, [r3, #32]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40012c00 	.word	0x40012c00
 8003f48:	40013400 	.word	0x40013400
 8003f4c:	40014000 	.word	0x40014000
 8003f50:	40014400 	.word	0x40014400
 8003f54:	40014800 	.word	0x40014800
 8003f58:	40015000 	.word	0x40015000

08003f5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b087      	sub	sp, #28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	051b      	lsls	r3, r3, #20
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a1a      	ldr	r2, [pc, #104]	; (800401c <TIM_OC6_SetConfig+0xc0>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d013      	beq.n	8003fe0 <TIM_OC6_SetConfig+0x84>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a19      	ldr	r2, [pc, #100]	; (8004020 <TIM_OC6_SetConfig+0xc4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00f      	beq.n	8003fe0 <TIM_OC6_SetConfig+0x84>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a18      	ldr	r2, [pc, #96]	; (8004024 <TIM_OC6_SetConfig+0xc8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d00b      	beq.n	8003fe0 <TIM_OC6_SetConfig+0x84>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a17      	ldr	r2, [pc, #92]	; (8004028 <TIM_OC6_SetConfig+0xcc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d007      	beq.n	8003fe0 <TIM_OC6_SetConfig+0x84>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a16      	ldr	r2, [pc, #88]	; (800402c <TIM_OC6_SetConfig+0xd0>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d003      	beq.n	8003fe0 <TIM_OC6_SetConfig+0x84>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a15      	ldr	r2, [pc, #84]	; (8004030 <TIM_OC6_SetConfig+0xd4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d109      	bne.n	8003ff4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	029b      	lsls	r3, r3, #10
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	697a      	ldr	r2, [r7, #20]
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685a      	ldr	r2, [r3, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	621a      	str	r2, [r3, #32]
}
 800400e:	bf00      	nop
 8004010:	371c      	adds	r7, #28
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	40012c00 	.word	0x40012c00
 8004020:	40013400 	.word	0x40013400
 8004024:	40014000 	.word	0x40014000
 8004028:	40014400 	.word	0x40014400
 800402c:	40014800 	.word	0x40014800
 8004030:	40015000 	.word	0x40015000

08004034 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004054:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004066:	f023 0307 	bic.w	r3, r3, #7
 800406a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	4a56      	ldr	r2, [pc, #344]	; (80041dc <TIM_SlaveTimer_SetConfig+0x1a8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	f000 80a2 	beq.w	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 800408a:	4a54      	ldr	r2, [pc, #336]	; (80041dc <TIM_SlaveTimer_SetConfig+0x1a8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	f200 809b 	bhi.w	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 8004092:	4a53      	ldr	r2, [pc, #332]	; (80041e0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8004094:	4293      	cmp	r3, r2
 8004096:	f000 809a 	beq.w	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 800409a:	4a51      	ldr	r2, [pc, #324]	; (80041e0 <TIM_SlaveTimer_SetConfig+0x1ac>)
 800409c:	4293      	cmp	r3, r2
 800409e:	f200 8093 	bhi.w	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 80040a2:	4a50      	ldr	r2, [pc, #320]	; (80041e4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	f000 8092 	beq.w	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 80040aa:	4a4e      	ldr	r2, [pc, #312]	; (80041e4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	f200 808b 	bhi.w	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 80040b2:	4a4d      	ldr	r2, [pc, #308]	; (80041e8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	f000 808a 	beq.w	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 80040ba:	4a4b      	ldr	r2, [pc, #300]	; (80041e8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	f200 8083 	bhi.w	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 80040c2:	4a4a      	ldr	r2, [pc, #296]	; (80041ec <TIM_SlaveTimer_SetConfig+0x1b8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	f000 8082 	beq.w	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 80040ca:	4a48      	ldr	r2, [pc, #288]	; (80041ec <TIM_SlaveTimer_SetConfig+0x1b8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d87b      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 80040d0:	4a47      	ldr	r2, [pc, #284]	; (80041f0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d07b      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 80040d6:	4a46      	ldr	r2, [pc, #280]	; (80041f0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d875      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 80040dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80040e0:	d075      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 80040e2:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80040e6:	d86f      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 80040e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ec:	d06f      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 80040ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f2:	d869      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 80040f4:	2b70      	cmp	r3, #112	; 0x70
 80040f6:	d01a      	beq.n	800412e <TIM_SlaveTimer_SetConfig+0xfa>
 80040f8:	2b70      	cmp	r3, #112	; 0x70
 80040fa:	d865      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 80040fc:	2b60      	cmp	r3, #96	; 0x60
 80040fe:	d059      	beq.n	80041b4 <TIM_SlaveTimer_SetConfig+0x180>
 8004100:	2b60      	cmp	r3, #96	; 0x60
 8004102:	d861      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 8004104:	2b50      	cmp	r3, #80	; 0x50
 8004106:	d04b      	beq.n	80041a0 <TIM_SlaveTimer_SetConfig+0x16c>
 8004108:	2b50      	cmp	r3, #80	; 0x50
 800410a:	d85d      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 800410c:	2b40      	cmp	r3, #64	; 0x40
 800410e:	d019      	beq.n	8004144 <TIM_SlaveTimer_SetConfig+0x110>
 8004110:	2b40      	cmp	r3, #64	; 0x40
 8004112:	d859      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 8004114:	2b30      	cmp	r3, #48	; 0x30
 8004116:	d05a      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 8004118:	2b30      	cmp	r3, #48	; 0x30
 800411a:	d855      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d056      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 8004120:	2b20      	cmp	r3, #32
 8004122:	d851      	bhi.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d052      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 8004128:	2b10      	cmp	r3, #16
 800412a:	d050      	beq.n	80041ce <TIM_SlaveTimer_SetConfig+0x19a>
 800412c:	e04c      	b.n	80041c8 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800413e:	f000 f8d5 	bl	80042ec <TIM_ETR_SetConfig>
      break;
 8004142:	e045      	b.n	80041d0 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2b05      	cmp	r3, #5
 800414a:	d004      	beq.n	8004156 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8004150:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8004154:	d101      	bne.n	800415a <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e03b      	b.n	80041d2 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6a1a      	ldr	r2, [r3, #32]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f022 0201 	bic.w	r2, r2, #1
 8004170:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004180:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	4313      	orrs	r3, r2
 800418c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	621a      	str	r2, [r3, #32]
      break;
 800419e:	e017      	b.n	80041d0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ac:	461a      	mov	r2, r3
 80041ae:	f000 f821 	bl	80041f4 <TIM_TI1_ConfigInputStage>
      break;
 80041b2:	e00d      	b.n	80041d0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041c0:	461a      	mov	r2, r3
 80041c2:	f000 f846 	bl	8004252 <TIM_TI2_ConfigInputStage>
      break;
 80041c6:	e003      	b.n	80041d0 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	75fb      	strb	r3, [r7, #23]
      break;
 80041cc:	e000      	b.n	80041d0 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 80041ce:	bf00      	nop
  }

  return status;
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	00100070 	.word	0x00100070
 80041e0:	00100060 	.word	0x00100060
 80041e4:	00100050 	.word	0x00100050
 80041e8:	00100040 	.word	0x00100040
 80041ec:	00100030 	.word	0x00100030
 80041f0:	00100020 	.word	0x00100020

080041f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	f023 0201 	bic.w	r2, r3, #1
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800421e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f023 030a 	bic.w	r3, r3, #10
 8004230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004252:	b480      	push	{r7}
 8004254:	b087      	sub	sp, #28
 8004256:	af00      	add	r7, sp, #0
 8004258:	60f8      	str	r0, [r7, #12]
 800425a:	60b9      	str	r1, [r7, #8]
 800425c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f023 0210 	bic.w	r2, r3, #16
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800427c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	031b      	lsls	r3, r3, #12
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800428e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	4313      	orrs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	693a      	ldr	r2, [r7, #16]
 800429e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	621a      	str	r2, [r3, #32]
}
 80042a6:	bf00      	nop
 80042a8:	371c      	adds	r7, #28
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80042c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f043 0307 	orr.w	r3, r3, #7
 80042d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	609a      	str	r2, [r3, #8]
}
 80042e0:	bf00      	nop
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	021a      	lsls	r2, r3, #8
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	431a      	orrs	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4313      	orrs	r3, r2
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2201      	movs	r2, #1
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a1a      	ldr	r2, [r3, #32]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	43db      	mvns	r3, r3
 800434e:	401a      	ands	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1a      	ldr	r2, [r3, #32]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	fa01 f303 	lsl.w	r3, r1, r3
 8004364:	431a      	orrs	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	621a      	str	r2, [r3, #32]
}
 800436a:	bf00      	nop
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800438c:	2302      	movs	r3, #2
 800438e:	e074      	b.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a34      	ldr	r2, [pc, #208]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d009      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a33      	ldr	r2, [pc, #204]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d004      	beq.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a31      	ldr	r2, [pc, #196]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d108      	bne.n	80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4313      	orrs	r3, r2
 80043de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80043e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a21      	ldr	r2, [pc, #132]	; (8004488 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d022      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004410:	d01d      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a1f      	ldr	r2, [pc, #124]	; (8004494 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d018      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a1d      	ldr	r2, [pc, #116]	; (8004498 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a1c      	ldr	r2, [pc, #112]	; (800449c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00e      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a15      	ldr	r2, [pc, #84]	; (800448c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d009      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a11      	ldr	r2, [pc, #68]	; (8004490 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10c      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4313      	orrs	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	40012c00 	.word	0x40012c00
 800448c:	40013400 	.word	0x40013400
 8004490:	40015000 	.word	0x40015000
 8004494:	40000400 	.word	0x40000400
 8004498:	40000800 	.word	0x40000800
 800449c:	40000c00 	.word	0x40000c00
 80044a0:	40014000 	.word	0x40014000

080044a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044bc:	2302      	movs	r3, #2
 80044be:	e078      	b.n	80045b2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	699b      	ldr	r3, [r3, #24]
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	4313      	orrs	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1c      	ldr	r2, [pc, #112]	; (80045c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1b      	ldr	r2, [pc, #108]	; (80045c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d11c      	bne.n	80045a0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004570:	051b      	lsls	r3, r3, #20
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3714      	adds	r7, #20
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40015000 	.word	0x40015000

080045cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr

08004644 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800464c:	bf00      	nop
 800464e:	370c      	adds	r7, #12
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b082      	sub	sp, #8
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e042      	b.n	80046f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7fc fb87 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2224      	movs	r2, #36	; 0x24
 8004686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0201 	bic.w	r2, r2, #1
 8004698:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fb24 	bl	8004cf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f825 	bl	80046f8 <UART_SetConfig>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d101      	bne.n	80046b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e01b      	b.n	80046f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 fba3 	bl	8004e34 <UART_CheckIdleState>
 80046ee:	4603      	mov	r3, r0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b08c      	sub	sp, #48	; 0x30
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	689a      	ldr	r2, [r3, #8]
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	431a      	orrs	r2, r3
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	4313      	orrs	r3, r2
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4baa      	ldr	r3, [pc, #680]	; (80049d0 <UART_SetConfig+0x2d8>)
 8004728:	4013      	ands	r3, r2
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	6812      	ldr	r2, [r2, #0]
 800472e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004730:	430b      	orrs	r3, r1
 8004732:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a9f      	ldr	r2, [pc, #636]	; (80049d4 <UART_SetConfig+0x2dc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004760:	4313      	orrs	r3, r2
 8004762:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800476e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004778:	430b      	orrs	r3, r1
 800477a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004782:	f023 010f 	bic.w	r1, r3, #15
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a90      	ldr	r2, [pc, #576]	; (80049d8 <UART_SetConfig+0x2e0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d125      	bne.n	80047e8 <UART_SetConfig+0xf0>
 800479c:	4b8f      	ldr	r3, [pc, #572]	; (80049dc <UART_SetConfig+0x2e4>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	2b03      	cmp	r3, #3
 80047a8:	d81a      	bhi.n	80047e0 <UART_SetConfig+0xe8>
 80047aa:	a201      	add	r2, pc, #4	; (adr r2, 80047b0 <UART_SetConfig+0xb8>)
 80047ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b0:	080047c1 	.word	0x080047c1
 80047b4:	080047d1 	.word	0x080047d1
 80047b8:	080047c9 	.word	0x080047c9
 80047bc:	080047d9 	.word	0x080047d9
 80047c0:	2301      	movs	r3, #1
 80047c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047c6:	e116      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80047c8:	2302      	movs	r3, #2
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ce:	e112      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047d6:	e10e      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047de:	e10a      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e6:	e106      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a7c      	ldr	r2, [pc, #496]	; (80049e0 <UART_SetConfig+0x2e8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d138      	bne.n	8004864 <UART_SetConfig+0x16c>
 80047f2:	4b7a      	ldr	r3, [pc, #488]	; (80049dc <UART_SetConfig+0x2e4>)
 80047f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f8:	f003 030c 	and.w	r3, r3, #12
 80047fc:	2b0c      	cmp	r3, #12
 80047fe:	d82d      	bhi.n	800485c <UART_SetConfig+0x164>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x110>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	0800483d 	.word	0x0800483d
 800480c:	0800485d 	.word	0x0800485d
 8004810:	0800485d 	.word	0x0800485d
 8004814:	0800485d 	.word	0x0800485d
 8004818:	0800484d 	.word	0x0800484d
 800481c:	0800485d 	.word	0x0800485d
 8004820:	0800485d 	.word	0x0800485d
 8004824:	0800485d 	.word	0x0800485d
 8004828:	08004845 	.word	0x08004845
 800482c:	0800485d 	.word	0x0800485d
 8004830:	0800485d 	.word	0x0800485d
 8004834:	0800485d 	.word	0x0800485d
 8004838:	08004855 	.word	0x08004855
 800483c:	2300      	movs	r3, #0
 800483e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004842:	e0d8      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004844:	2302      	movs	r3, #2
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800484a:	e0d4      	b.n	80049f6 <UART_SetConfig+0x2fe>
 800484c:	2304      	movs	r3, #4
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004852:	e0d0      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004854:	2308      	movs	r3, #8
 8004856:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800485a:	e0cc      	b.n	80049f6 <UART_SetConfig+0x2fe>
 800485c:	2310      	movs	r3, #16
 800485e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004862:	e0c8      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a5e      	ldr	r2, [pc, #376]	; (80049e4 <UART_SetConfig+0x2ec>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d125      	bne.n	80048ba <UART_SetConfig+0x1c2>
 800486e:	4b5b      	ldr	r3, [pc, #364]	; (80049dc <UART_SetConfig+0x2e4>)
 8004870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004874:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004878:	2b30      	cmp	r3, #48	; 0x30
 800487a:	d016      	beq.n	80048aa <UART_SetConfig+0x1b2>
 800487c:	2b30      	cmp	r3, #48	; 0x30
 800487e:	d818      	bhi.n	80048b2 <UART_SetConfig+0x1ba>
 8004880:	2b20      	cmp	r3, #32
 8004882:	d00a      	beq.n	800489a <UART_SetConfig+0x1a2>
 8004884:	2b20      	cmp	r3, #32
 8004886:	d814      	bhi.n	80048b2 <UART_SetConfig+0x1ba>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <UART_SetConfig+0x19a>
 800488c:	2b10      	cmp	r3, #16
 800488e:	d008      	beq.n	80048a2 <UART_SetConfig+0x1aa>
 8004890:	e00f      	b.n	80048b2 <UART_SetConfig+0x1ba>
 8004892:	2300      	movs	r3, #0
 8004894:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004898:	e0ad      	b.n	80049f6 <UART_SetConfig+0x2fe>
 800489a:	2302      	movs	r3, #2
 800489c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a0:	e0a9      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80048a2:	2304      	movs	r3, #4
 80048a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048a8:	e0a5      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80048aa:	2308      	movs	r3, #8
 80048ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b0:	e0a1      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80048b2:	2310      	movs	r3, #16
 80048b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048b8:	e09d      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a4a      	ldr	r2, [pc, #296]	; (80049e8 <UART_SetConfig+0x2f0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d125      	bne.n	8004910 <UART_SetConfig+0x218>
 80048c4:	4b45      	ldr	r3, [pc, #276]	; (80049dc <UART_SetConfig+0x2e4>)
 80048c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80048ce:	2bc0      	cmp	r3, #192	; 0xc0
 80048d0:	d016      	beq.n	8004900 <UART_SetConfig+0x208>
 80048d2:	2bc0      	cmp	r3, #192	; 0xc0
 80048d4:	d818      	bhi.n	8004908 <UART_SetConfig+0x210>
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d00a      	beq.n	80048f0 <UART_SetConfig+0x1f8>
 80048da:	2b80      	cmp	r3, #128	; 0x80
 80048dc:	d814      	bhi.n	8004908 <UART_SetConfig+0x210>
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <UART_SetConfig+0x1f0>
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d008      	beq.n	80048f8 <UART_SetConfig+0x200>
 80048e6:	e00f      	b.n	8004908 <UART_SetConfig+0x210>
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048ee:	e082      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80048f0:	2302      	movs	r3, #2
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f6:	e07e      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80048f8:	2304      	movs	r3, #4
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048fe:	e07a      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004900:	2308      	movs	r3, #8
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004906:	e076      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004908:	2310      	movs	r3, #16
 800490a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800490e:	e072      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a35      	ldr	r2, [pc, #212]	; (80049ec <UART_SetConfig+0x2f4>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d12a      	bne.n	8004970 <UART_SetConfig+0x278>
 800491a:	4b30      	ldr	r3, [pc, #192]	; (80049dc <UART_SetConfig+0x2e4>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004924:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004928:	d01a      	beq.n	8004960 <UART_SetConfig+0x268>
 800492a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800492e:	d81b      	bhi.n	8004968 <UART_SetConfig+0x270>
 8004930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004934:	d00c      	beq.n	8004950 <UART_SetConfig+0x258>
 8004936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800493a:	d815      	bhi.n	8004968 <UART_SetConfig+0x270>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d003      	beq.n	8004948 <UART_SetConfig+0x250>
 8004940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004944:	d008      	beq.n	8004958 <UART_SetConfig+0x260>
 8004946:	e00f      	b.n	8004968 <UART_SetConfig+0x270>
 8004948:	2300      	movs	r3, #0
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800494e:	e052      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004950:	2302      	movs	r3, #2
 8004952:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004956:	e04e      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004958:	2304      	movs	r3, #4
 800495a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800495e:	e04a      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004960:	2308      	movs	r3, #8
 8004962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004966:	e046      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004968:	2310      	movs	r3, #16
 800496a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800496e:	e042      	b.n	80049f6 <UART_SetConfig+0x2fe>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <UART_SetConfig+0x2dc>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d13a      	bne.n	80049f0 <UART_SetConfig+0x2f8>
 800497a:	4b18      	ldr	r3, [pc, #96]	; (80049dc <UART_SetConfig+0x2e4>)
 800497c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004980:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004984:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004988:	d01a      	beq.n	80049c0 <UART_SetConfig+0x2c8>
 800498a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800498e:	d81b      	bhi.n	80049c8 <UART_SetConfig+0x2d0>
 8004990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004994:	d00c      	beq.n	80049b0 <UART_SetConfig+0x2b8>
 8004996:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800499a:	d815      	bhi.n	80049c8 <UART_SetConfig+0x2d0>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d003      	beq.n	80049a8 <UART_SetConfig+0x2b0>
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	d008      	beq.n	80049b8 <UART_SetConfig+0x2c0>
 80049a6:	e00f      	b.n	80049c8 <UART_SetConfig+0x2d0>
 80049a8:	2300      	movs	r3, #0
 80049aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ae:	e022      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80049b0:	2302      	movs	r3, #2
 80049b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049b6:	e01e      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80049b8:	2304      	movs	r3, #4
 80049ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049be:	e01a      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80049c0:	2308      	movs	r3, #8
 80049c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049c6:	e016      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80049c8:	2310      	movs	r3, #16
 80049ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049ce:	e012      	b.n	80049f6 <UART_SetConfig+0x2fe>
 80049d0:	cfff69f3 	.word	0xcfff69f3
 80049d4:	40008000 	.word	0x40008000
 80049d8:	40013800 	.word	0x40013800
 80049dc:	40021000 	.word	0x40021000
 80049e0:	40004400 	.word	0x40004400
 80049e4:	40004800 	.word	0x40004800
 80049e8:	40004c00 	.word	0x40004c00
 80049ec:	40005000 	.word	0x40005000
 80049f0:	2310      	movs	r3, #16
 80049f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4aae      	ldr	r2, [pc, #696]	; (8004cb4 <UART_SetConfig+0x5bc>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	f040 8097 	bne.w	8004b30 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a06:	2b08      	cmp	r3, #8
 8004a08:	d823      	bhi.n	8004a52 <UART_SetConfig+0x35a>
 8004a0a:	a201      	add	r2, pc, #4	; (adr r2, 8004a10 <UART_SetConfig+0x318>)
 8004a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a10:	08004a35 	.word	0x08004a35
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a3d 	.word	0x08004a3d
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a43 	.word	0x08004a43
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a53 	.word	0x08004a53
 8004a2c:	08004a53 	.word	0x08004a53
 8004a30:	08004a4b 	.word	0x08004a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a34:	f7fd fc62 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 8004a38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a3a:	e010      	b.n	8004a5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b9e      	ldr	r3, [pc, #632]	; (8004cb8 <UART_SetConfig+0x5c0>)
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a40:	e00d      	b.n	8004a5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fd fbed 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8004a46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a48:	e009      	b.n	8004a5e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a50:	e005      	b.n	8004a5e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004a5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	f000 8130 	beq.w	8004cc6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	4a94      	ldr	r2, [pc, #592]	; (8004cbc <UART_SetConfig+0x5c4>)
 8004a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a78:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	4413      	add	r3, r2
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d305      	bcc.n	8004a96 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d903      	bls.n	8004a9e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a9c:	e113      	b.n	8004cc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	60bb      	str	r3, [r7, #8]
 8004aa4:	60fa      	str	r2, [r7, #12]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	4a84      	ldr	r2, [pc, #528]	; (8004cbc <UART_SetConfig+0x5c4>)
 8004aac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004abc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ac0:	f7fb fbae 	bl	8000220 <__aeabi_uldivmod>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4619      	mov	r1, r3
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	020b      	lsls	r3, r1, #8
 8004ad6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ada:	0202      	lsls	r2, r0, #8
 8004adc:	6979      	ldr	r1, [r7, #20]
 8004ade:	6849      	ldr	r1, [r1, #4]
 8004ae0:	0849      	lsrs	r1, r1, #1
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	4605      	mov	r5, r0
 8004ae8:	eb12 0804 	adds.w	r8, r2, r4
 8004aec:	eb43 0905 	adc.w	r9, r3, r5
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	469a      	mov	sl, r3
 8004af8:	4693      	mov	fp, r2
 8004afa:	4652      	mov	r2, sl
 8004afc:	465b      	mov	r3, fp
 8004afe:	4640      	mov	r0, r8
 8004b00:	4649      	mov	r1, r9
 8004b02:	f7fb fb8d 	bl	8000220 <__aeabi_uldivmod>
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b14:	d308      	bcc.n	8004b28 <UART_SetConfig+0x430>
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b1c:	d204      	bcs.n	8004b28 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6a3a      	ldr	r2, [r7, #32]
 8004b24:	60da      	str	r2, [r3, #12]
 8004b26:	e0ce      	b.n	8004cc6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004b2e:	e0ca      	b.n	8004cc6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b38:	d166      	bne.n	8004c08 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004b3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d827      	bhi.n	8004b92 <UART_SetConfig+0x49a>
 8004b42:	a201      	add	r2, pc, #4	; (adr r2, 8004b48 <UART_SetConfig+0x450>)
 8004b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b48:	08004b6d 	.word	0x08004b6d
 8004b4c:	08004b75 	.word	0x08004b75
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	08004b93 	.word	0x08004b93
 8004b58:	08004b83 	.word	0x08004b83
 8004b5c:	08004b93 	.word	0x08004b93
 8004b60:	08004b93 	.word	0x08004b93
 8004b64:	08004b93 	.word	0x08004b93
 8004b68:	08004b8b 	.word	0x08004b8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b6c:	f7fd fbc6 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 8004b70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b72:	e014      	b.n	8004b9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b74:	f7fd fbd8 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 8004b78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b7a:	e010      	b.n	8004b9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b7c:	4b4e      	ldr	r3, [pc, #312]	; (8004cb8 <UART_SetConfig+0x5c0>)
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b80:	e00d      	b.n	8004b9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b82:	f7fd fb4d 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8004b86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004b88:	e009      	b.n	8004b9e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004b90:	e005      	b.n	8004b9e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004b9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	f000 8090 	beq.w	8004cc6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004baa:	4a44      	ldr	r2, [pc, #272]	; (8004cbc <UART_SetConfig+0x5c4>)
 8004bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bb8:	005a      	lsls	r2, r3, #1
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	085b      	lsrs	r3, r3, #1
 8004bc0:	441a      	add	r2, r3
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b0f      	cmp	r3, #15
 8004bd0:	d916      	bls.n	8004c00 <UART_SetConfig+0x508>
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bd8:	d212      	bcs.n	8004c00 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bda:	6a3b      	ldr	r3, [r7, #32]
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	f023 030f 	bic.w	r3, r3, #15
 8004be2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	f003 0307 	and.w	r3, r3, #7
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	8bfb      	ldrh	r3, [r7, #30]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	8bfa      	ldrh	r2, [r7, #30]
 8004bfc:	60da      	str	r2, [r3, #12]
 8004bfe:	e062      	b.n	8004cc6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c06:	e05e      	b.n	8004cc6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c08:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d828      	bhi.n	8004c62 <UART_SetConfig+0x56a>
 8004c10:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x520>)
 8004c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c16:	bf00      	nop
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c45 	.word	0x08004c45
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c63 	.word	0x08004c63
 8004c28:	08004c53 	.word	0x08004c53
 8004c2c:	08004c63 	.word	0x08004c63
 8004c30:	08004c63 	.word	0x08004c63
 8004c34:	08004c63 	.word	0x08004c63
 8004c38:	08004c5b 	.word	0x08004c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7fd fb5e 	bl	80022fc <HAL_RCC_GetPCLK1Freq>
 8004c40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c42:	e014      	b.n	8004c6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c44:	f7fd fb70 	bl	8002328 <HAL_RCC_GetPCLK2Freq>
 8004c48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c4a:	e010      	b.n	8004c6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <UART_SetConfig+0x5c0>)
 8004c4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c50:	e00d      	b.n	8004c6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c52:	f7fd fae5 	bl	8002220 <HAL_RCC_GetSysClockFreq>
 8004c56:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c58:	e009      	b.n	8004c6e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c60:	e005      	b.n	8004c6e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c6c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d028      	beq.n	8004cc6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c78:	4a10      	ldr	r2, [pc, #64]	; (8004cbc <UART_SetConfig+0x5c4>)
 8004c7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	441a      	add	r2, r3
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c96:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	2b0f      	cmp	r3, #15
 8004c9c:	d910      	bls.n	8004cc0 <UART_SetConfig+0x5c8>
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca4:	d20c      	bcs.n	8004cc0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	60da      	str	r2, [r3, #12]
 8004cb0:	e009      	b.n	8004cc6 <UART_SetConfig+0x5ce>
 8004cb2:	bf00      	nop
 8004cb4:	40008000 	.word	0x40008000
 8004cb8:	00f42400 	.word	0x00f42400
 8004cbc:	080057b4 	.word	0x080057b4
      }
      else
      {
        ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004ce2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3730      	adds	r7, #48	; 0x30
 8004cea:	46bd      	mov	sp, r7
 8004cec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004cf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f003 0308 	and.w	r3, r3, #8
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	f003 0304 	and.w	r3, r3, #4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	f003 0320 	and.w	r3, r3, #32
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d01a      	beq.n	8004e06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dee:	d10a      	bne.n	8004e06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
  }
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b098      	sub	sp, #96	; 0x60
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e44:	f7fc fa1e 	bl	8001284 <HAL_GetTick>
 8004e48:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d12f      	bne.n	8004eb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e60:	2200      	movs	r2, #0
 8004e62:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f88e 	bl	8004f88 <UART_WaitOnFlagUntilTimeout>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d022      	beq.n	8004eb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e86:	653b      	str	r3, [r7, #80]	; 0x50
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e90:	647b      	str	r3, [r7, #68]	; 0x44
 8004e92:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e96:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e98:	e841 2300 	strex	r3, r2, [r1]
 8004e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1e6      	bne.n	8004e72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e063      	b.n	8004f80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d149      	bne.n	8004f5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ec6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f857 	bl	8004f88 <UART_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d03c      	beq.n	8004f5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	e853 3f00 	ldrex	r3, [r3]
 8004eec:	623b      	str	r3, [r7, #32]
   return(result);
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ef4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004efe:	633b      	str	r3, [r7, #48]	; 0x30
 8004f00:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f06:	e841 2300 	strex	r3, r2, [r1]
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1e6      	bne.n	8004ee0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	3308      	adds	r3, #8
 8004f18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3308      	adds	r3, #8
 8004f30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f32:	61fa      	str	r2, [r7, #28]
 8004f34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	69b9      	ldr	r1, [r7, #24]
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	617b      	str	r3, [r7, #20]
   return(result);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e5      	bne.n	8004f12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2220      	movs	r2, #32
 8004f4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e012      	b.n	8004f80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3758      	adds	r7, #88	; 0x58
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f98:	e04f      	b.n	800503a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9a:	69bb      	ldr	r3, [r7, #24]
 8004f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa0:	d04b      	beq.n	800503a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa2:	f7fc f96f 	bl	8001284 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d302      	bcc.n	8004fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e04e      	b.n	800505a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d037      	beq.n	800503a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b80      	cmp	r3, #128	; 0x80
 8004fce:	d034      	beq.n	800503a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	2b40      	cmp	r3, #64	; 0x40
 8004fd4:	d031      	beq.n	800503a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	f003 0308 	and.w	r3, r3, #8
 8004fe0:	2b08      	cmp	r3, #8
 8004fe2:	d110      	bne.n	8005006 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2208      	movs	r2, #8
 8004fea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f838 	bl	8005062 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e029      	b.n	800505a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005010:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005014:	d111      	bne.n	800503a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800501e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f81e 	bl	8005062 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2220      	movs	r2, #32
 800502a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e00f      	b.n	800505a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	4013      	ands	r3, r2
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	429a      	cmp	r2, r3
 8005048:	bf0c      	ite	eq
 800504a:	2301      	moveq	r3, #1
 800504c:	2300      	movne	r3, #0
 800504e:	b2db      	uxtb	r3, r3
 8005050:	461a      	mov	r2, r3
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	429a      	cmp	r2, r3
 8005056:	d0a0      	beq.n	8004f9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005062:	b480      	push	{r7}
 8005064:	b095      	sub	sp, #84	; 0x54
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800507e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	461a      	mov	r2, r3
 8005086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005088:	643b      	str	r3, [r7, #64]	; 0x40
 800508a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800508e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e6      	bne.n	800506a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	e853 3f00 	ldrex	r3, [r3]
 80050aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80050c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80050c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e3      	bne.n	800509c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d118      	bne.n	800510e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	f023 0310 	bic.w	r3, r3, #16
 80050f0:	647b      	str	r3, [r7, #68]	; 0x44
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	461a      	mov	r2, r3
 80050f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050fa:	61bb      	str	r3, [r7, #24]
 80050fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6979      	ldr	r1, [r7, #20]
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	613b      	str	r3, [r7, #16]
   return(result);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e6      	bne.n	80050dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005122:	bf00      	nop
 8005124:	3754      	adds	r7, #84	; 0x54
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_UARTEx_DisableFifoMode+0x16>
 8005140:	2302      	movs	r3, #2
 8005142:	e027      	b.n	8005194 <HAL_UARTEx_DisableFifoMode+0x66>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2224      	movs	r2, #36	; 0x24
 8005150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f022 0201 	bic.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005172:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2220      	movs	r2, #32
 8005186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e02d      	b.n	8005214 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f022 0201 	bic.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f84f 	bl	8005298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2220      	movs	r2, #32
 8005206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800522c:	2b01      	cmp	r3, #1
 800522e:	d101      	bne.n	8005234 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005230:	2302      	movs	r3, #2
 8005232:	e02d      	b.n	8005290 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2224      	movs	r2, #36	; 0x24
 8005240:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0201 	bic.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f811 	bl	8005298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2220      	movs	r2, #32
 8005282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d108      	bne.n	80052ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052b8:	e031      	b.n	800531e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052ba:	2308      	movs	r3, #8
 80052bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052be:	2308      	movs	r3, #8
 80052c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	0e5b      	lsrs	r3, r3, #25
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	0f5b      	lsrs	r3, r3, #29
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052e2:	7bbb      	ldrb	r3, [r7, #14]
 80052e4:	7b3a      	ldrb	r2, [r7, #12]
 80052e6:	4911      	ldr	r1, [pc, #68]	; (800532c <UARTEx_SetNbDataToProcess+0x94>)
 80052e8:	5c8a      	ldrb	r2, [r1, r2]
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052ee:	7b3a      	ldrb	r2, [r7, #12]
 80052f0:	490f      	ldr	r1, [pc, #60]	; (8005330 <UARTEx_SetNbDataToProcess+0x98>)
 80052f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005300:	7bfb      	ldrb	r3, [r7, #15]
 8005302:	7b7a      	ldrb	r2, [r7, #13]
 8005304:	4909      	ldr	r1, [pc, #36]	; (800532c <UARTEx_SetNbDataToProcess+0x94>)
 8005306:	5c8a      	ldrb	r2, [r1, r2]
 8005308:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800530c:	7b7a      	ldrb	r2, [r7, #13]
 800530e:	4908      	ldr	r1, [pc, #32]	; (8005330 <UARTEx_SetNbDataToProcess+0x98>)
 8005310:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005312:	fb93 f3f2 	sdiv	r3, r3, r2
 8005316:	b29a      	uxth	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800531e:	bf00      	nop
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
 800532a:	bf00      	nop
 800532c:	080057cc 	.word	0x080057cc
 8005330:	080057d4 	.word	0x080057d4

08005334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08a      	sub	sp, #40	; 0x28
 8005338:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800533a:	2300      	movs	r3, #0
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800533e:	4b7d      	ldr	r3, [pc, #500]	; (8005534 <xTaskIncrementTick+0x200>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	f040 80ec 	bne.w	8005520 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005348:	4b7b      	ldr	r3, [pc, #492]	; (8005538 <xTaskIncrementTick+0x204>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3301      	adds	r3, #1
 800534e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005350:	4a79      	ldr	r2, [pc, #484]	; (8005538 <xTaskIncrementTick+0x204>)
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d120      	bne.n	800539e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800535c:	4b77      	ldr	r3, [pc, #476]	; (800553c <xTaskIncrementTick+0x208>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800536a:	f383 8811 	msr	BASEPRI, r3
 800536e:	f3bf 8f6f 	isb	sy
 8005372:	f3bf 8f4f 	dsb	sy
 8005376:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005378:	bf00      	nop
 800537a:	e7fe      	b.n	800537a <xTaskIncrementTick+0x46>
 800537c:	4b6f      	ldr	r3, [pc, #444]	; (800553c <xTaskIncrementTick+0x208>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	61fb      	str	r3, [r7, #28]
 8005382:	4b6f      	ldr	r3, [pc, #444]	; (8005540 <xTaskIncrementTick+0x20c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a6d      	ldr	r2, [pc, #436]	; (800553c <xTaskIncrementTick+0x208>)
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4a6d      	ldr	r2, [pc, #436]	; (8005540 <xTaskIncrementTick+0x20c>)
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	4b6c      	ldr	r3, [pc, #432]	; (8005544 <xTaskIncrementTick+0x210>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3301      	adds	r3, #1
 8005396:	4a6b      	ldr	r2, [pc, #428]	; (8005544 <xTaskIncrementTick+0x210>)
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	f000 f93d 	bl	8005618 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800539e:	4b6a      	ldr	r3, [pc, #424]	; (8005548 <xTaskIncrementTick+0x214>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a3a      	ldr	r2, [r7, #32]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	f0c0 80a6 	bcc.w	80054f6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053aa:	4b64      	ldr	r3, [pc, #400]	; (800553c <xTaskIncrementTick+0x208>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053b4:	4b64      	ldr	r3, [pc, #400]	; (8005548 <xTaskIncrementTick+0x214>)
 80053b6:	f04f 32ff 	mov.w	r2, #4294967295
 80053ba:	601a      	str	r2, [r3, #0]
                    break;
 80053bc:	e09b      	b.n	80054f6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053be:	4b5f      	ldr	r3, [pc, #380]	; (800553c <xTaskIncrementTick+0x208>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80053ce:	6a3a      	ldr	r2, [r7, #32]
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d203      	bcs.n	80053de <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80053d6:	4a5c      	ldr	r2, [pc, #368]	; (8005548 <xTaskIncrementTick+0x214>)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80053dc:	e08b      	b.n	80054f6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	613b      	str	r3, [r7, #16]
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	68d2      	ldr	r2, [r2, #12]
 80053ec:	609a      	str	r2, [r3, #8]
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	69ba      	ldr	r2, [r7, #24]
 80053f4:	6892      	ldr	r2, [r2, #8]
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	3304      	adds	r3, #4
 8005400:	429a      	cmp	r2, r3
 8005402:	d103      	bne.n	800540c <xTaskIncrementTick+0xd8>
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	68da      	ldr	r2, [r3, #12]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	605a      	str	r2, [r3, #4]
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	2200      	movs	r2, #0
 8005410:	615a      	str	r2, [r3, #20]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	1e5a      	subs	r2, r3, #1
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005420:	2b00      	cmp	r3, #0
 8005422:	d01e      	beq.n	8005462 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	69db      	ldr	r3, [r3, #28]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	6a12      	ldr	r2, [r2, #32]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6a1b      	ldr	r3, [r3, #32]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	69d2      	ldr	r2, [r2, #28]
 800543c:	605a      	str	r2, [r3, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	3318      	adds	r3, #24
 8005446:	429a      	cmp	r2, r3
 8005448:	d103      	bne.n	8005452 <xTaskIncrementTick+0x11e>
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	6a1a      	ldr	r2, [r3, #32]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	605a      	str	r2, [r3, #4]
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	2200      	movs	r2, #0
 8005456:	629a      	str	r2, [r3, #40]	; 0x28
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	1e5a      	subs	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005466:	2201      	movs	r2, #1
 8005468:	409a      	lsls	r2, r3
 800546a:	4b38      	ldr	r3, [pc, #224]	; (800554c <xTaskIncrementTick+0x218>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4313      	orrs	r3, r2
 8005470:	4a36      	ldr	r2, [pc, #216]	; (800554c <xTaskIncrementTick+0x218>)
 8005472:	6013      	str	r3, [r2, #0]
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005478:	4935      	ldr	r1, [pc, #212]	; (8005550 <xTaskIncrementTick+0x21c>)
 800547a:	4613      	mov	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	3304      	adds	r3, #4
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	60bb      	str	r3, [r7, #8]
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	609a      	str	r2, [r3, #8]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	60da      	str	r2, [r3, #12]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	3204      	adds	r2, #4
 80054a0:	605a      	str	r2, [r3, #4]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	1d1a      	adds	r2, r3, #4
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	609a      	str	r2, [r3, #8]
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4a26      	ldr	r2, [pc, #152]	; (8005550 <xTaskIncrementTick+0x21c>)
 80054b8:	441a      	add	r2, r3
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	615a      	str	r2, [r3, #20]
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	4923      	ldr	r1, [pc, #140]	; (8005550 <xTaskIncrementTick+0x21c>)
 80054c4:	4613      	mov	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	440b      	add	r3, r1
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1c59      	adds	r1, r3, #1
 80054d2:	481f      	ldr	r0, [pc, #124]	; (8005550 <xTaskIncrementTick+0x21c>)
 80054d4:	4613      	mov	r3, r2
 80054d6:	009b      	lsls	r3, r3, #2
 80054d8:	4413      	add	r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4403      	add	r3, r0
 80054de:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e4:	4b1b      	ldr	r3, [pc, #108]	; (8005554 <xTaskIncrementTick+0x220>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ea:	429a      	cmp	r2, r3
 80054ec:	f67f af5d 	bls.w	80053aa <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80054f0:	2301      	movs	r3, #1
 80054f2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054f4:	e759      	b.n	80053aa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80054f6:	4b17      	ldr	r3, [pc, #92]	; (8005554 <xTaskIncrementTick+0x220>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054fc:	4914      	ldr	r1, [pc, #80]	; (8005550 <xTaskIncrementTick+0x21c>)
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b01      	cmp	r3, #1
 800550c:	d901      	bls.n	8005512 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800550e:	2301      	movs	r3, #1
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8005512:	4b11      	ldr	r3, [pc, #68]	; (8005558 <xTaskIncrementTick+0x224>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800551a:	2301      	movs	r3, #1
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
 800551e:	e004      	b.n	800552a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8005520:	4b0e      	ldr	r3, [pc, #56]	; (800555c <xTaskIncrementTick+0x228>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3301      	adds	r3, #1
 8005526:	4a0d      	ldr	r2, [pc, #52]	; (800555c <xTaskIncrementTick+0x228>)
 8005528:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800552c:	4618      	mov	r0, r3
 800552e:	3728      	adds	r7, #40	; 0x28
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000378 	.word	0x20000378
 8005538:	20000360 	.word	0x20000360
 800553c:	20000358 	.word	0x20000358
 8005540:	2000035c 	.word	0x2000035c
 8005544:	20000370 	.word	0x20000370
 8005548:	20000374 	.word	0x20000374
 800554c:	20000364 	.word	0x20000364
 8005550:	200002f4 	.word	0x200002f4
 8005554:	200002f0 	.word	0x200002f0
 8005558:	2000036c 	.word	0x2000036c
 800555c:	20000368 	.word	0x20000368

08005560 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005566:	4b27      	ldr	r3, [pc, #156]	; (8005604 <vTaskSwitchContext+0xa4>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d003      	beq.n	8005576 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800556e:	4b26      	ldr	r3, [pc, #152]	; (8005608 <vTaskSwitchContext+0xa8>)
 8005570:	2201      	movs	r2, #1
 8005572:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8005574:	e03f      	b.n	80055f6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8005576:	4b24      	ldr	r3, [pc, #144]	; (8005608 <vTaskSwitchContext+0xa8>)
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800557c:	4b23      	ldr	r3, [pc, #140]	; (800560c <vTaskSwitchContext+0xac>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	fab3 f383 	clz	r3, r3
 8005588:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800558a:	7afb      	ldrb	r3, [r7, #11]
 800558c:	f1c3 031f 	rsb	r3, r3, #31
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	491f      	ldr	r1, [pc, #124]	; (8005610 <vTaskSwitchContext+0xb0>)
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	440b      	add	r3, r1
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <vTaskSwitchContext+0x5c>
        __asm volatile
 80055a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055aa:	f383 8811 	msr	BASEPRI, r3
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f3bf 8f4f 	dsb	sy
 80055b6:	607b      	str	r3, [r7, #4]
    }
 80055b8:	bf00      	nop
 80055ba:	e7fe      	b.n	80055ba <vTaskSwitchContext+0x5a>
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4a12      	ldr	r2, [pc, #72]	; (8005610 <vTaskSwitchContext+0xb0>)
 80055c8:	4413      	add	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	605a      	str	r2, [r3, #4]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	685a      	ldr	r2, [r3, #4]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	3308      	adds	r3, #8
 80055de:	429a      	cmp	r2, r3
 80055e0:	d104      	bne.n	80055ec <vTaskSwitchContext+0x8c>
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	605a      	str	r2, [r3, #4]
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	4a08      	ldr	r2, [pc, #32]	; (8005614 <vTaskSwitchContext+0xb4>)
 80055f4:	6013      	str	r3, [r2, #0]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	20000378 	.word	0x20000378
 8005608:	2000036c 	.word	0x2000036c
 800560c:	20000364 	.word	0x20000364
 8005610:	200002f4 	.word	0x200002f4
 8005614:	200002f0 	.word	0x200002f0

08005618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <prvResetNextTaskUnblockTime+0x30>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d104      	bne.n	8005630 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005626:	4b09      	ldr	r3, [pc, #36]	; (800564c <prvResetNextTaskUnblockTime+0x34>)
 8005628:	f04f 32ff 	mov.w	r2, #4294967295
 800562c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800562e:	e005      	b.n	800563c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005630:	4b05      	ldr	r3, [pc, #20]	; (8005648 <prvResetNextTaskUnblockTime+0x30>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a04      	ldr	r2, [pc, #16]	; (800564c <prvResetNextTaskUnblockTime+0x34>)
 800563a:	6013      	str	r3, [r2, #0]
}
 800563c:	bf00      	nop
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	20000358 	.word	0x20000358
 800564c:	20000374 	.word	0x20000374

08005650 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005650:	4b07      	ldr	r3, [pc, #28]	; (8005670 <pxCurrentTCBConst2>)
 8005652:	6819      	ldr	r1, [r3, #0]
 8005654:	6808      	ldr	r0, [r1, #0]
 8005656:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800565a:	f380 8809 	msr	PSP, r0
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f04f 0000 	mov.w	r0, #0
 8005666:	f380 8811 	msr	BASEPRI, r0
 800566a:	4770      	bx	lr
 800566c:	f3af 8000 	nop.w

08005670 <pxCurrentTCBConst2>:
 8005670:	200002f0 	.word	0x200002f0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005674:	bf00      	nop
 8005676:	bf00      	nop
	...

08005680 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005680:	f3ef 8009 	mrs	r0, PSP
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <pxCurrentTCBConst>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	f01e 0f10 	tst.w	lr, #16
 8005690:	bf08      	it	eq
 8005692:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005696:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800569a:	6010      	str	r0, [r2, #0]
 800569c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056a4:	f380 8811 	msr	BASEPRI, r0
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	f3bf 8f6f 	isb	sy
 80056b0:	f7ff ff56 	bl	8005560 <vTaskSwitchContext>
 80056b4:	f04f 0000 	mov.w	r0, #0
 80056b8:	f380 8811 	msr	BASEPRI, r0
 80056bc:	bc09      	pop	{r0, r3}
 80056be:	6819      	ldr	r1, [r3, #0]
 80056c0:	6808      	ldr	r0, [r1, #0]
 80056c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c6:	f01e 0f10 	tst.w	lr, #16
 80056ca:	bf08      	it	eq
 80056cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056d0:	f380 8809 	msr	PSP, r0
 80056d4:	f3bf 8f6f 	isb	sy
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop
 80056dc:	f3af 8000 	nop.w

080056e0 <pxCurrentTCBConst>:
 80056e0:	200002f0 	.word	0x200002f0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop

080056e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0
        __asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	607b      	str	r3, [r7, #4]
    }
 8005700:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005702:	f7ff fe17 	bl	8005334 <xTaskIncrementTick>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d003      	beq.n	8005714 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800570c:	4b06      	ldr	r3, [pc, #24]	; (8005728 <SysTick_Handler+0x40>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	2300      	movs	r3, #0
 8005716:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800571e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	e000ed04 	.word	0xe000ed04

0800572c <memset>:
 800572c:	4402      	add	r2, r0
 800572e:	4603      	mov	r3, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	d100      	bne.n	8005736 <memset+0xa>
 8005734:	4770      	bx	lr
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	e7f9      	b.n	8005730 <memset+0x4>

0800573c <__libc_init_array>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4d0d      	ldr	r5, [pc, #52]	; (8005774 <__libc_init_array+0x38>)
 8005740:	4c0d      	ldr	r4, [pc, #52]	; (8005778 <__libc_init_array+0x3c>)
 8005742:	1b64      	subs	r4, r4, r5
 8005744:	10a4      	asrs	r4, r4, #2
 8005746:	2600      	movs	r6, #0
 8005748:	42a6      	cmp	r6, r4
 800574a:	d109      	bne.n	8005760 <__libc_init_array+0x24>
 800574c:	4d0b      	ldr	r5, [pc, #44]	; (800577c <__libc_init_array+0x40>)
 800574e:	4c0c      	ldr	r4, [pc, #48]	; (8005780 <__libc_init_array+0x44>)
 8005750:	f000 f818 	bl	8005784 <_init>
 8005754:	1b64      	subs	r4, r4, r5
 8005756:	10a4      	asrs	r4, r4, #2
 8005758:	2600      	movs	r6, #0
 800575a:	42a6      	cmp	r6, r4
 800575c:	d105      	bne.n	800576a <__libc_init_array+0x2e>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	f855 3b04 	ldr.w	r3, [r5], #4
 8005764:	4798      	blx	r3
 8005766:	3601      	adds	r6, #1
 8005768:	e7ee      	b.n	8005748 <__libc_init_array+0xc>
 800576a:	f855 3b04 	ldr.w	r3, [r5], #4
 800576e:	4798      	blx	r3
 8005770:	3601      	adds	r6, #1
 8005772:	e7f2      	b.n	800575a <__libc_init_array+0x1e>
 8005774:	080057e4 	.word	0x080057e4
 8005778:	080057e4 	.word	0x080057e4
 800577c:	080057e4 	.word	0x080057e4
 8005780:	080057e8 	.word	0x080057e8

08005784 <_init>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	bf00      	nop
 8005788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800578a:	bc08      	pop	{r3}
 800578c:	469e      	mov	lr, r3
 800578e:	4770      	bx	lr

08005790 <_fini>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	bf00      	nop
 8005794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005796:	bc08      	pop	{r3}
 8005798:	469e      	mov	lr, r3
 800579a:	4770      	bx	lr
