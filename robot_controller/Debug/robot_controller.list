
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004d7c  08004d7c  00014d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dbc  08004dbc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004dbc  08004dbc  00014dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004dc4  08004dc4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004dc4  08004dc4  00014dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004dc8  08004dc8  00014dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  08004dd8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08004dd8  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016471  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fba  00000000  00000000  000364f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a0  00000000  00000000  000394b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e81  00000000  00000000  0003a750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026430  00000000  00000000  0003b5d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001705a  00000000  00000000  00061a01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001024a2  00000000  00000000  00078a5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d94  00000000  00000000  0017af00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0017fc94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004d64 	.word	0x08004d64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	08004d64 	.word	0x08004d64

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <SystemClock_Config>:




void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	2238      	movs	r2, #56	; 0x38
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f004 fbee 	bl	8004d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 ff22 	bl	8001388 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	2340      	movs	r3, #64	; 0x40
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800055a:	2304      	movs	r3, #4
 800055c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800055e:	2355      	movs	r3, #85	; 0x55
 8000560:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	4618      	mov	r0, r3
 8000574:	f000 ffbc 	bl	80014f0 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800057e:	f000 fa41 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2303      	movs	r3, #3
 8000588:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2104      	movs	r1, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f001 faba 	bl	8001b14 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005a6:	f000 fa2d 	bl	8000a04 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	; 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a2e      	ldr	r2, [pc, #184]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e2:	4b29      	ldr	r3, [pc, #164]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a28      	ldr	r2, [pc, #160]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005e8:	f043 0320 	orr.w	r3, r3, #32
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b23      	ldr	r3, [pc, #140]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a22      	ldr	r2, [pc, #136]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2123      	movs	r1, #35	; 0x23
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f000 fe6d 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <MX_GPIO_Init+0xd8>)
 800064e:	f000 fcdd 	bl	800100c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8000652:	2323      	movs	r3, #35	; 0x23
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f000 fcce 	bl	800100c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2028      	movs	r0, #40	; 0x28
 8000676:	f000 fca1 	bl	8000fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067a:	2028      	movs	r0, #40	; 0x28
 800067c:	f000 fcb8 	bl	8000ff0 <HAL_NVIC_EnableIRQ>

}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	48000800 	.word	0x48000800

08000690 <MX_TIM1_Init>:


TIM_HandleTypeDef htim1;

void MX_TIM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	; 0x70
 8000694:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 fb1e 	bl	8004d0c <memset>

  htim1.Instance = TIM1;
 80006d0:	4b57      	ldr	r3, [pc, #348]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006d2:	4a58      	ldr	r2, [pc, #352]	; (8000834 <MX_TIM1_Init+0x1a4>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 172000-1;
 80006d6:	4b56      	ldr	r3, [pc, #344]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006d8:	4a57      	ldr	r2, [pc, #348]	; (8000838 <MX_TIM1_Init+0x1a8>)
 80006da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b54      	ldr	r3, [pc, #336]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80006e2:	4b53      	ldr	r3, [pc, #332]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006e4:	2263      	movs	r2, #99	; 0x63
 80006e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e8:	4b51      	ldr	r3, [pc, #324]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ee:	4b50      	ldr	r3, [pc, #320]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f4:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fa:	484d      	ldr	r0, [pc, #308]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006fc:	f001 fea6 	bl	800244c <HAL_TIM_Base_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000706:	f000 f97d 	bl	8000a04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000710:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000714:	4619      	mov	r1, r3
 8000716:	4846      	ldr	r0, [pc, #280]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000718:	f002 fb40 	bl	8002d9c <HAL_TIM_ConfigClockSource>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000722:	f000 f96f 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000726:	4842      	ldr	r0, [pc, #264]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000728:	f001 ff60 	bl	80025ec <HAL_TIM_PWM_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000732:	f000 f967 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000742:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000746:	4619      	mov	r1, r3
 8000748:	4839      	ldr	r0, [pc, #228]	; (8000830 <MX_TIM1_Init+0x1a0>)
 800074a:	f003 f905 	bl	8003958 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000754:	f000 f956 	bl	8000a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000758:	2360      	movs	r3, #96	; 0x60
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000760:	2300      	movs	r3, #0
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000764:	2300      	movs	r3, #0
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000774:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	482c      	ldr	r0, [pc, #176]	; (8000830 <MX_TIM1_Init+0x1a0>)
 800077e:	f002 f9f9 	bl	8002b74 <HAL_TIM_PWM_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000788:	f000 f93c 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800078c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000790:	2204      	movs	r2, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4826      	ldr	r0, [pc, #152]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000796:	f002 f9ed 	bl	8002b74 <HAL_TIM_PWM_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80007a0:	f000 f930 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a8:	2208      	movs	r2, #8
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80007ae:	f002 f9e1 	bl	8002b74 <HAL_TIM_PWM_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80007b8:	f000 f924 	bl	8000a04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c0:	220c      	movs	r2, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	481a      	ldr	r0, [pc, #104]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80007c6:	f002 f9d5 	bl	8002b74 <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80007d0:	f000 f918 	bl	8000a04 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000812:	f003 f937 	bl	8003a84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 800081c:	f000 f8f2 	bl	8000a04 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000822:	f000 f9d1 	bl	8000bc8 <HAL_TIM_MspPostInit>

}
 8000826:	bf00      	nop
 8000828:	3770      	adds	r7, #112	; 0x70
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000028 	.word	0x20000028
 8000834:	40012c00 	.word	0x40012c00
 8000838:	00029fdf 	.word	0x00029fdf

0800083c <MX_LPUART1_UART_Init>:

 UART_HandleTypeDef huart1;
 UART_HandleTypeDef hlpuart1;

void MX_LPUART1_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 8000840:	4b20      	ldr	r3, [pc, #128]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 8000842:	4a21      	ldr	r2, [pc, #132]	; (80008c8 <MX_LPUART1_UART_Init+0x8c>)
 8000844:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000846:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 8000848:	4a20      	ldr	r2, [pc, #128]	; (80008cc <MX_LPUART1_UART_Init+0x90>)
 800084a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000852:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000858:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800085e:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 8000860:	220c      	movs	r2, #12
 8000862:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000864:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 800087e:	f003 f9db 	bl	8003c38 <HAL_UART_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000888:	f000 f8bc 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	480d      	ldr	r0, [pc, #52]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 8000890:	f003 ff76 	bl	8004780 <HAL_UARTEx_SetTxFifoThreshold>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800089a:	f000 f8b3 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800089e:	2100      	movs	r1, #0
 80008a0:	4808      	ldr	r0, [pc, #32]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 80008a2:	f003 ffab 	bl	80047fc <HAL_UARTEx_SetRxFifoThreshold>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80008ac:	f000 f8aa 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MX_LPUART1_UART_Init+0x88>)
 80008b2:	f003 ff2c 	bl	800470e <HAL_UARTEx_DisableFifoMode>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80008bc:	f000 f8a2 	bl	8000a04 <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000108 	.word	0x20000108
 80008c8:	40008000 	.word	0x40008000
 80008cc:	00033324 	.word	0x00033324

080008d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80008d4:	4b22      	ldr	r3, [pc, #136]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008d6:	4a23      	ldr	r2, [pc, #140]	; (8000964 <MX_USART1_UART_Init+0x94>)
 80008d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008da:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f4:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008f6:	220c      	movs	r2, #12
 80008f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <MX_USART1_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_USART1_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_USART1_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_USART1_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000918:	4811      	ldr	r0, [pc, #68]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800091a:	f003 f98d 	bl	8003c38 <HAL_UART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f86e 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800092c:	f003 ff28 	bl	8004780 <HAL_UARTEx_SetTxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000936:	f000 f865 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093a:	2100      	movs	r1, #0
 800093c:	4808      	ldr	r0, [pc, #32]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800093e:	f003 ff5d 	bl	80047fc <HAL_UARTEx_SetRxFifoThreshold>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000948:	f000 f85c 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800094c:	4804      	ldr	r0, [pc, #16]	; (8000960 <MX_USART1_UART_Init+0x90>)
 800094e:	f003 fede 	bl	800470e <HAL_UARTEx_DisableFifoMode>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000958:	f000 f854 	bl	8000a04 <Error_Handler>
  }

}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000074 	.word	0x20000074
 8000964:	40013800 	.word	0x40013800

08000968 <main>:
#include "uart_configuration.h"
#include "timers_configuration.h"


int main(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0

  HAL_Init();
 800096c:	f000 fa37 	bl	8000dde <HAL_Init>
  SystemClock_Config();
 8000970:	f7ff fdd4 	bl	800051c <SystemClock_Config>
  MX_GPIO_Init();
 8000974:	f7ff fe1e 	bl	80005b4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000978:	f7ff ff60 	bl	800083c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800097c:	f7ff ffa8 	bl	80008d0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000980:	f7ff fe86 	bl	8000690 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000984:	2100      	movs	r1, #0
 8000986:	4814      	ldr	r0, [pc, #80]	; (80009d8 <main+0x70>)
 8000988:	f001 fe92 	bl	80026b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800098c:	2104      	movs	r1, #4
 800098e:	4812      	ldr	r0, [pc, #72]	; (80009d8 <main+0x70>)
 8000990:	f001 fe8e 	bl	80026b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000994:	2108      	movs	r1, #8
 8000996:	4810      	ldr	r0, [pc, #64]	; (80009d8 <main+0x70>)
 8000998:	f001 fe8a 	bl	80026b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800099c:	210c      	movs	r1, #12
 800099e:	480e      	ldr	r0, [pc, #56]	; (80009d8 <main+0x70>)
 80009a0:	f001 fe86 	bl	80026b0 <HAL_TIM_PWM_Start>

  TIM1->CCR1 = 50;
 80009a4:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <main+0x74>)
 80009a6:	2232      	movs	r2, #50	; 0x32
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 50;
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <main+0x74>)
 80009ac:	2232      	movs	r2, #50	; 0x32
 80009ae:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 50;
 80009b0:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <main+0x74>)
 80009b2:	2232      	movs	r2, #50	; 0x32
 80009b4:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 50;
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <main+0x74>)
 80009b8:	2232      	movs	r2, #50	; 0x32
 80009ba:	641a      	str	r2, [r3, #64]	; 0x40
//  TIM1->CCR2 = 70;
//  TIM1->CCR3 = 70;
//  TIM1->CCR4 = 70;


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2101      	movs	r1, #1
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f000 fca4 	bl	8001310 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2102      	movs	r1, #2
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d0:	f000 fc9e 	bl	8001310 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <main+0x6c>
 80009d6:	bf00      	nop
 80009d8:	20000028 	.word	0x20000028
 80009dc:	40012c00 	.word	0x40012c00

080009e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d101      	bne.n	80009f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009f2:	f000 fa0d 	bl	8000e10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40001000 	.word	0x40001000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	; 0x60
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a46:	f000 fd43 	bl	80014d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b0a0      	sub	sp, #128	; 0x80
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	f107 0318 	add.w	r3, r7, #24
 8000a74:	2254      	movs	r2, #84	; 0x54
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f004 f947 	bl	8004d0c <memset>
  if(huart->Instance==LPUART1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a3d      	ldr	r2, [pc, #244]	; (8000b78 <HAL_UART_MspInit+0x120>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d137      	bne.n	8000af8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a88:	2320      	movs	r3, #32
 8000a8a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0318 	add.w	r3, r7, #24
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 fa8b 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000aa0:	f7ff ffb0 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000aa4:	4b35      	ldr	r3, [pc, #212]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000aa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000aa8:	4a34      	ldr	r2, [pc, #208]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ab0:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac0:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000ac2:	f043 0301 	orr.w	r3, r3, #1
 8000ac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac8:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ad4:	230c      	movs	r3, #12
 8000ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000aec:	4619      	mov	r1, r3
 8000aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af2:	f000 fa8b 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000af6:	e03a      	b.n	8000b6e <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a20      	ldr	r2, [pc, #128]	; (8000b80 <HAL_UART_MspInit+0x128>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d135      	bne.n	8000b6e <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b02:	2301      	movs	r3, #1
 8000b04:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b0a:	f107 0318 	add.w	r3, r7, #24
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 fa4e 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000b1a:	f7ff ff73 	bl	8000a04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b22:	4a16      	ldr	r2, [pc, #88]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b28:	6613      	str	r3, [r2, #96]	; 0x60
 8000b2a:	4b14      	ldr	r3, [pc, #80]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3a:	4a10      	ldr	r2, [pc, #64]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <HAL_UART_MspInit+0x124>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b4e:	2330      	movs	r3, #48	; 0x30
 8000b50:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b52:	2302      	movs	r3, #2
 8000b54:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b5e:	2307      	movs	r3, #7
 8000b60:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000b66:	4619      	mov	r1, r3
 8000b68:	4806      	ldr	r0, [pc, #24]	; (8000b84 <HAL_UART_MspInit+0x12c>)
 8000b6a:	f000 fa4f 	bl	800100c <HAL_GPIO_Init>
}
 8000b6e:	bf00      	nop
 8000b70:	3780      	adds	r7, #128	; 0x80
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40008000 	.word	0x40008000
 8000b7c:	40021000 	.word	0x40021000
 8000b80:	40013800 	.word	0x40013800
 8000b84:	48000800 	.word	0x48000800

08000b88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_TIM_Base_MspInit+0x38>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d10b      	bne.n	8000bb2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	4a09      	ldr	r2, [pc, #36]	; (8000bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ba0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40012c00 	.word	0x40012c00
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a11      	ldr	r2, [pc, #68]	; (8000c2c <HAL_TIM_MspPostInit+0x64>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d11b      	bne.n	8000c22 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bea:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_TIM_MspPostInit+0x68>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a10      	ldr	r2, [pc, #64]	; (8000c30 <HAL_TIM_MspPostInit+0x68>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_TIM_MspPostInit+0x68>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000c02:	230f      	movs	r3, #15
 8000c04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000c12:	2302      	movs	r3, #2
 8000c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_TIM_MspPostInit+0x6c>)
 8000c1e:	f000 f9f5 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40012c00 	.word	0x40012c00
 8000c30:	40021000 	.word	0x40021000
 8000c34:	48000800 	.word	0x48000800

08000c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c4e:	4b2d      	ldr	r3, [pc, #180]	; (8000d04 <HAL_InitTick+0xcc>)
 8000c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c52:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <HAL_InitTick+0xcc>)
 8000c54:	f043 0310 	orr.w	r3, r3, #16
 8000c58:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5a:	4b2a      	ldr	r3, [pc, #168]	; (8000d04 <HAL_InitTick+0xcc>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	f003 0310 	and.w	r3, r3, #16
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c66:	f107 020c 	add.w	r2, r7, #12
 8000c6a:	f107 0310 	add.w	r3, r7, #16
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 f925 	bl	8001ec0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c76:	f001 f8f7 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8000c7a:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c7e:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <HAL_InitTick+0xd0>)
 8000c80:	fba2 2303 	umull	r2, r3, r2, r3
 8000c84:	0c9b      	lsrs	r3, r3, #18
 8000c86:	3b01      	subs	r3, #1
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c8a:	4b20      	ldr	r3, [pc, #128]	; (8000d0c <HAL_InitTick+0xd4>)
 8000c8c:	4a20      	ldr	r2, [pc, #128]	; (8000d10 <HAL_InitTick+0xd8>)
 8000c8e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c90:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_InitTick+0xd4>)
 8000c92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c96:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c98:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_InitTick+0xd4>)
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	; (8000d0c <HAL_InitTick+0xd4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <HAL_InitTick+0xd4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000caa:	4818      	ldr	r0, [pc, #96]	; (8000d0c <HAL_InitTick+0xd4>)
 8000cac:	f001 fbce 	bl	800244c <HAL_TIM_Base_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d11b      	bne.n	8000cf6 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000cbe:	4813      	ldr	r0, [pc, #76]	; (8000d0c <HAL_InitTick+0xd4>)
 8000cc0:	f001 fc1c 	bl	80024fc <HAL_TIM_Base_Start_IT>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d111      	bne.n	8000cf6 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cd2:	2036      	movs	r0, #54	; 0x36
 8000cd4:	f000 f98c 	bl	8000ff0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b0f      	cmp	r3, #15
 8000cdc:	d808      	bhi.n	8000cf0 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	6879      	ldr	r1, [r7, #4]
 8000ce2:	2036      	movs	r0, #54	; 0x36
 8000ce4:	f000 f96a 	bl	8000fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ce8:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <HAL_InitTick+0xdc>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6013      	str	r3, [r2, #0]
 8000cee:	e002      	b.n	8000cf6 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3730      	adds	r7, #48	; 0x30
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000
 8000d08:	431bde83 	.word	0x431bde83
 8000d0c:	2000019c 	.word	0x2000019c
 8000d10:	40001000 	.word	0x40001000
 8000d14:	20000004 	.word	0x20000004

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <NMI_Handler+0x4>

08000d1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <HardFault_Handler+0x4>

08000d24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <MemManage_Handler+0x4>

08000d2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d4c:	f000 faf8 	bl	8001340 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <TIM6_DAC_IRQHandler+0x10>)
 8000d5a:	f001 fdbb 	bl	80028d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000019c 	.word	0x2000019c

08000d68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SystemInit+0x20>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a05      	ldr	r2, [pc, #20]	; (8000d88 <SystemInit+0x20>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d8e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d90:	f7ff ffea 	bl	8000d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d94:	480c      	ldr	r0, [pc, #48]	; (8000dc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d96:	490d      	ldr	r1, [pc, #52]	; (8000dcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <LoopForever+0xe>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dac:	4c0a      	ldr	r4, [pc, #40]	; (8000dd8 <LoopForever+0x16>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dba:	f003 ffaf 	bl	8004d1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dbe:	f7ff fdd3 	bl	8000968 <main>

08000dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000dc2:	e7fe      	b.n	8000dc2 <LoopForever>
  ldr   r0, =_estack
 8000dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dd0:	08004dcc 	.word	0x08004dcc
  ldr r2, =_sbss
 8000dd4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd8:	20000278 	.word	0x20000278

08000ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ddc:	e7fe      	b.n	8000ddc <ADC1_2_IRQHandler>

08000dde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f8dc 	bl	8000fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dee:	200f      	movs	r0, #15
 8000df0:	f7ff ff22 	bl	8000c38 <HAL_InitTick>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d002      	beq.n	8000e00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	71fb      	strb	r3, [r7, #7]
 8000dfe:	e001      	b.n	8000e04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e00:	f7ff fe06 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e04:	79fb      	ldrb	r3, [r7, #7]

}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x1c>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x20>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <HAL_IncTick+0x1c>)
 8000e20:	6013      	str	r3, [r2, #0]
}
 8000e22:	bf00      	nop
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	200001e8 	.word	0x200001e8
 8000e30:	20000008 	.word	0x20000008

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200001e8 	.word	0x200001e8

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff4c 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
 8000fc8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fca:	f7ff ff63 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	68b9      	ldr	r1, [r7, #8]
 8000fd4:	6978      	ldr	r0, [r7, #20]
 8000fd6:	f7ff ffb3 	bl	8000f40 <NVIC_EncodePriority>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff82 	bl	8000eec <__NVIC_SetPriority>
}
 8000fe8:	bf00      	nop
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ff56 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b087      	sub	sp, #28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800101a:	e15a      	b.n	80012d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	2101      	movs	r1, #1
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa01 f303 	lsl.w	r3, r1, r3
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f000 814c 	beq.w	80012cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b01      	cmp	r3, #1
 800103e:	d005      	beq.n	800104c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001048:	2b02      	cmp	r3, #2
 800104a:	d130      	bne.n	80010ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	2203      	movs	r2, #3
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001082:	2201      	movs	r2, #1
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	f003 0201 	and.w	r2, r3, #1
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d017      	beq.n	80010ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	2203      	movs	r2, #3
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	43db      	mvns	r3, r3
 80010cc:	693a      	ldr	r2, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d123      	bne.n	800113e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	08da      	lsrs	r2, r3, #3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3208      	adds	r2, #8
 80010fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001102:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	220f      	movs	r2, #15
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4013      	ands	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	691a      	ldr	r2, [r3, #16]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	6939      	ldr	r1, [r7, #16]
 800113a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	2203      	movs	r2, #3
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f003 0203 	and.w	r2, r3, #3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	4313      	orrs	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	693a      	ldr	r2, [r7, #16]
 8001170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 80a6 	beq.w	80012cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001180:	4b5b      	ldr	r3, [pc, #364]	; (80012f0 <HAL_GPIO_Init+0x2e4>)
 8001182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001184:	4a5a      	ldr	r2, [pc, #360]	; (80012f0 <HAL_GPIO_Init+0x2e4>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	6613      	str	r3, [r2, #96]	; 0x60
 800118c:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <HAL_GPIO_Init+0x2e4>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	f003 0301 	and.w	r3, r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001198:	4a56      	ldr	r2, [pc, #344]	; (80012f4 <HAL_GPIO_Init+0x2e8>)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	089b      	lsrs	r3, r3, #2
 800119e:	3302      	adds	r3, #2
 80011a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	220f      	movs	r2, #15
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4013      	ands	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011c2:	d01f      	beq.n	8001204 <HAL_GPIO_Init+0x1f8>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4a4c      	ldr	r2, [pc, #304]	; (80012f8 <HAL_GPIO_Init+0x2ec>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d019      	beq.n	8001200 <HAL_GPIO_Init+0x1f4>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a4b      	ldr	r2, [pc, #300]	; (80012fc <HAL_GPIO_Init+0x2f0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d013      	beq.n	80011fc <HAL_GPIO_Init+0x1f0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <HAL_GPIO_Init+0x2f4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00d      	beq.n	80011f8 <HAL_GPIO_Init+0x1ec>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a49      	ldr	r2, [pc, #292]	; (8001304 <HAL_GPIO_Init+0x2f8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x1e8>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a48      	ldr	r2, [pc, #288]	; (8001308 <HAL_GPIO_Init+0x2fc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d101      	bne.n	80011f0 <HAL_GPIO_Init+0x1e4>
 80011ec:	2305      	movs	r3, #5
 80011ee:	e00a      	b.n	8001206 <HAL_GPIO_Init+0x1fa>
 80011f0:	2306      	movs	r3, #6
 80011f2:	e008      	b.n	8001206 <HAL_GPIO_Init+0x1fa>
 80011f4:	2304      	movs	r3, #4
 80011f6:	e006      	b.n	8001206 <HAL_GPIO_Init+0x1fa>
 80011f8:	2303      	movs	r3, #3
 80011fa:	e004      	b.n	8001206 <HAL_GPIO_Init+0x1fa>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e002      	b.n	8001206 <HAL_GPIO_Init+0x1fa>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <HAL_GPIO_Init+0x1fa>
 8001204:	2300      	movs	r3, #0
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	f002 0203 	and.w	r2, r2, #3
 800120c:	0092      	lsls	r2, r2, #2
 800120e:	4093      	lsls	r3, r2
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001216:	4937      	ldr	r1, [pc, #220]	; (80012f4 <HAL_GPIO_Init+0x2e8>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001224:	4b39      	ldr	r3, [pc, #228]	; (800130c <HAL_GPIO_Init+0x300>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001248:	4a30      	ldr	r2, [pc, #192]	; (800130c <HAL_GPIO_Init+0x300>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800124e:	4b2f      	ldr	r3, [pc, #188]	; (800130c <HAL_GPIO_Init+0x300>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001272:	4a26      	ldr	r2, [pc, #152]	; (800130c <HAL_GPIO_Init+0x300>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <HAL_GPIO_Init+0x300>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <HAL_GPIO_Init+0x300>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012a2:	4b1a      	ldr	r3, [pc, #104]	; (800130c <HAL_GPIO_Init+0x300>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <HAL_GPIO_Init+0x300>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f47f ae9d 	bne.w	800101c <HAL_GPIO_Init+0x10>
  }
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000
 80012f8:	48000400 	.word	0x48000400
 80012fc:	48000800 	.word	0x48000800
 8001300:	48000c00 	.word	0x48000c00
 8001304:	48001000 	.word	0x48001000
 8001308:	48001400 	.word	0x48001400
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800132c:	e002      	b.n	8001334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132e:	887a      	ldrh	r2, [r7, #2]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800134a:	4b08      	ldr	r3, [pc, #32]	; (800136c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	88fb      	ldrh	r3, [r7, #6]
 8001350:	4013      	ands	r3, r2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d006      	beq.n	8001364 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001356:	4a05      	ldr	r2, [pc, #20]	; (800136c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800135c:	88fb      	ldrh	r3, [r7, #6]
 800135e:	4618      	mov	r0, r3
 8001360:	f000 f806 	bl	8001370 <HAL_GPIO_EXTI_Callback>
  }
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40010400 	.word	0x40010400

08001370 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d141      	bne.n	800141a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001396:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800139e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013a2:	d131      	bne.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013a4:	4b47      	ldr	r3, [pc, #284]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013aa:	4a46      	ldr	r2, [pc, #280]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b4:	4b43      	ldr	r3, [pc, #268]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013bc:	4a41      	ldr	r2, [pc, #260]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013c4:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2232      	movs	r2, #50	; 0x32
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	4a3f      	ldr	r2, [pc, #252]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	3301      	adds	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013da:	e002      	b.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3b01      	subs	r3, #1
 80013e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ee:	d102      	bne.n	80013f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f2      	bne.n	80013dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001402:	d158      	bne.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e057      	b.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800140a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800140e:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001410:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001414:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001418:	e04d      	b.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001420:	d141      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800142a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800142e:	d131      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001436:	4a23      	ldr	r2, [pc, #140]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001440:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001448:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800144a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800144e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2232      	movs	r2, #50	; 0x32
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	4a1c      	ldr	r2, [pc, #112]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800145c:	fba2 2303 	umull	r2, r3, r2, r3
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001466:	e002      	b.n	800146e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	3b01      	subs	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800146e:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147a:	d102      	bne.n	8001482 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f2      	bne.n	8001468 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800148e:	d112      	bne.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e011      	b.n	80014b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800149a:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014a4:	e007      	b.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a6:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ae:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3714      	adds	r7, #20
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40007000 	.word	0x40007000
 80014c8:	20000000 	.word	0x20000000
 80014cc:	431bde83 	.word	0x431bde83

080014d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a04      	ldr	r2, [pc, #16]	; (80014ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80014da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014de:	6093      	str	r3, [r2, #8]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40007000 	.word	0x40007000

080014f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e2fe      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	2b00      	cmp	r3, #0
 800150c:	d075      	beq.n	80015fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800150e:	4b97      	ldr	r3, [pc, #604]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001518:	4b94      	ldr	r3, [pc, #592]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	f003 0303 	and.w	r3, r3, #3
 8001520:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d102      	bne.n	800152e <HAL_RCC_OscConfig+0x3e>
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d002      	beq.n	8001534 <HAL_RCC_OscConfig+0x44>
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	2b08      	cmp	r3, #8
 8001532:	d10b      	bne.n	800154c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001534:	4b8d      	ldr	r3, [pc, #564]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d05b      	beq.n	80015f8 <HAL_RCC_OscConfig+0x108>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d157      	bne.n	80015f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e2d9      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001554:	d106      	bne.n	8001564 <HAL_RCC_OscConfig+0x74>
 8001556:	4b85      	ldr	r3, [pc, #532]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a84      	ldr	r2, [pc, #528]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e01d      	b.n	80015a0 <HAL_RCC_OscConfig+0xb0>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x98>
 800156e:	4b7f      	ldr	r3, [pc, #508]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a7e      	ldr	r2, [pc, #504]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001578:	6013      	str	r3, [r2, #0]
 800157a:	4b7c      	ldr	r3, [pc, #496]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a7b      	ldr	r2, [pc, #492]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0xb0>
 8001588:	4b78      	ldr	r3, [pc, #480]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a77      	ldr	r2, [pc, #476]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800158e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001592:	6013      	str	r3, [r2, #0]
 8001594:	4b75      	ldr	r3, [pc, #468]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a74      	ldr	r2, [pc, #464]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800159a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc44 	bl	8000e34 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fc40 	bl	8000e34 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e29e      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c2:	4b6a      	ldr	r3, [pc, #424]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f0      	beq.n	80015b0 <HAL_RCC_OscConfig+0xc0>
 80015ce:	e014      	b.n	80015fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fc30 	bl	8000e34 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015d8:	f7ff fc2c 	bl	8000e34 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b64      	cmp	r3, #100	; 0x64
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e28a      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015ea:	4b60      	ldr	r3, [pc, #384]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0xe8>
 80015f6:	e000      	b.n	80015fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d075      	beq.n	80016f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001606:	4b59      	ldr	r3, [pc, #356]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	f003 030c 	and.w	r3, r3, #12
 800160e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001610:	4b56      	ldr	r3, [pc, #344]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0303 	and.w	r3, r3, #3
 8001618:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d102      	bne.n	8001626 <HAL_RCC_OscConfig+0x136>
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d002      	beq.n	800162c <HAL_RCC_OscConfig+0x13c>
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b04      	cmp	r3, #4
 800162a:	d11f      	bne.n	800166c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162c:	4b4f      	ldr	r3, [pc, #316]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_OscConfig+0x154>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e25d      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001644:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	061b      	lsls	r3, r3, #24
 8001652:	4946      	ldr	r1, [pc, #280]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001654:	4313      	orrs	r3, r2
 8001656:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001658:	4b45      	ldr	r3, [pc, #276]	; (8001770 <HAL_RCC_OscConfig+0x280>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff faeb 	bl	8000c38 <HAL_InitTick>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d043      	beq.n	80016f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e249      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d023      	beq.n	80016bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001674:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a3c      	ldr	r2, [pc, #240]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800167a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fbd8 	bl	8000e34 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fbd4 	bl	8000e34 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e232      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800169a:	4b34      	ldr	r3, [pc, #208]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f0      	beq.n	8001688 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	061b      	lsls	r3, r3, #24
 80016b4:	492d      	ldr	r1, [pc, #180]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
 80016ba:	e01a      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016bc:	4b2b      	ldr	r3, [pc, #172]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a2a      	ldr	r2, [pc, #168]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 80016c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff fbb4 	bl	8000e34 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d0:	f7ff fbb0 	bl	8000e34 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e20e      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x1e0>
 80016ee:	e000      	b.n	80016f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d041      	beq.n	8001782 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01c      	beq.n	8001740 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001706:	4b19      	ldr	r3, [pc, #100]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff fb8d 	bl	8000e34 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171e:	f7ff fb89 	bl	8000e34 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1e7      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001730:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0ef      	beq.n	800171e <HAL_RCC_OscConfig+0x22e>
 800173e:	e020      	b.n	8001782 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_RCC_OscConfig+0x27c>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff fb70 	bl	8000e34 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001756:	e00d      	b.n	8001774 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff fb6c 	bl	8000e34 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d906      	bls.n	8001774 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e1ca      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001774:	4b8c      	ldr	r3, [pc, #560]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1ea      	bne.n	8001758 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 80a6 	beq.w	80018dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001794:	4b84      	ldr	r3, [pc, #528]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_OscConfig+0x2b4>
 80017a0:	2301      	movs	r3, #1
 80017a2:	e000      	b.n	80017a6 <HAL_RCC_OscConfig+0x2b6>
 80017a4:	2300      	movs	r3, #0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00d      	beq.n	80017c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017aa:	4b7f      	ldr	r3, [pc, #508]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	4a7e      	ldr	r2, [pc, #504]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 80017b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b4:	6593      	str	r3, [r2, #88]	; 0x58
 80017b6:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 80017b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017c2:	2301      	movs	r3, #1
 80017c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c6:	4b79      	ldr	r3, [pc, #484]	; (80019ac <HAL_RCC_OscConfig+0x4bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d118      	bne.n	8001804 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d2:	4b76      	ldr	r3, [pc, #472]	; (80019ac <HAL_RCC_OscConfig+0x4bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a75      	ldr	r2, [pc, #468]	; (80019ac <HAL_RCC_OscConfig+0x4bc>)
 80017d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017de:	f7ff fb29 	bl	8000e34 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e4:	e008      	b.n	80017f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e6:	f7ff fb25 	bl	8000e34 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d901      	bls.n	80017f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80017f4:	2303      	movs	r3, #3
 80017f6:	e183      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f8:	4b6c      	ldr	r3, [pc, #432]	; (80019ac <HAL_RCC_OscConfig+0x4bc>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d0f0      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d108      	bne.n	800181e <HAL_RCC_OscConfig+0x32e>
 800180c:	4b66      	ldr	r3, [pc, #408]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	4a65      	ldr	r2, [pc, #404]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181c:	e024      	b.n	8001868 <HAL_RCC_OscConfig+0x378>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b05      	cmp	r3, #5
 8001824:	d110      	bne.n	8001848 <HAL_RCC_OscConfig+0x358>
 8001826:	4b60      	ldr	r3, [pc, #384]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182c:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 800182e:	f043 0304 	orr.w	r3, r3, #4
 8001832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183c:	4a5a      	ldr	r2, [pc, #360]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001846:	e00f      	b.n	8001868 <HAL_RCC_OscConfig+0x378>
 8001848:	4b57      	ldr	r3, [pc, #348]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 800184a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800184e:	4a56      	ldr	r2, [pc, #344]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001850:	f023 0301 	bic.w	r3, r3, #1
 8001854:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 800185a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185e:	4a52      	ldr	r2, [pc, #328]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d016      	beq.n	800189e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001870:	f7ff fae0 	bl	8000e34 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001876:	e00a      	b.n	800188e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001878:	f7ff fadc 	bl	8000e34 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	f241 3288 	movw	r2, #5000	; 0x1388
 8001886:	4293      	cmp	r3, r2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e138      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800188e:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ed      	beq.n	8001878 <HAL_RCC_OscConfig+0x388>
 800189c:	e015      	b.n	80018ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff fac9 	bl	8000e34 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff fac5 	bl	8000e34 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e121      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018bc:	4b3a      	ldr	r3, [pc, #232]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ed      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80018ca:	7ffb      	ldrb	r3, [r7, #31]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d0:	4b35      	ldr	r3, [pc, #212]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 80018d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d4:	4a34      	ldr	r2, [pc, #208]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 80018d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0320 	and.w	r3, r3, #32
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d03c      	beq.n	8001962 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01c      	beq.n	800192a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 80018f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f6:	4a2c      	ldr	r2, [pc, #176]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fa98 	bl	8000e34 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001908:	f7ff fa94 	bl	8000e34 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e0f2      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800191a:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 800191c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ef      	beq.n	8001908 <HAL_RCC_OscConfig+0x418>
 8001928:	e01b      	b.n	8001962 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 800192c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001930:	4a1d      	ldr	r2, [pc, #116]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193a:	f7ff fa7b 	bl	8000e34 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001942:	f7ff fa77 	bl	8000e34 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e0d5      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001956:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ef      	bne.n	8001942 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 80c9 	beq.w	8001afe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b0c      	cmp	r3, #12
 8001976:	f000 8083 	beq.w	8001a80 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d15e      	bne.n	8001a40 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_RCC_OscConfig+0x4b8>)
 8001988:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800198c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198e:	f7ff fa51 	bl	8000e34 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001994:	e00c      	b.n	80019b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001996:	f7ff fa4d 	bl	8000e34 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d905      	bls.n	80019b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0ab      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019b0:	4b55      	ldr	r3, [pc, #340]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d1ec      	bne.n	8001996 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019bc:	4b52      	ldr	r3, [pc, #328]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 80019be:	68da      	ldr	r2, [r3, #12]
 80019c0:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <HAL_RCC_OscConfig+0x61c>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	6a11      	ldr	r1, [r2, #32]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019cc:	3a01      	subs	r2, #1
 80019ce:	0112      	lsls	r2, r2, #4
 80019d0:	4311      	orrs	r1, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80019d6:	0212      	lsls	r2, r2, #8
 80019d8:	4311      	orrs	r1, r2
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80019de:	0852      	lsrs	r2, r2, #1
 80019e0:	3a01      	subs	r2, #1
 80019e2:	0552      	lsls	r2, r2, #21
 80019e4:	4311      	orrs	r1, r2
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019ea:	0852      	lsrs	r2, r2, #1
 80019ec:	3a01      	subs	r2, #1
 80019ee:	0652      	lsls	r2, r2, #25
 80019f0:	4311      	orrs	r1, r2
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80019f6:	06d2      	lsls	r2, r2, #27
 80019f8:	430a      	orrs	r2, r1
 80019fa:	4943      	ldr	r1, [pc, #268]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a00:	4b41      	ldr	r3, [pc, #260]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a40      	ldr	r2, [pc, #256]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4a3d      	ldr	r2, [pc, #244]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fa0c 	bl	8000e34 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff fa08 	bl	8000e34 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e066      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	4b35      	ldr	r3, [pc, #212]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0x530>
 8001a3e:	e05e      	b.n	8001afe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a40:	4b31      	ldr	r3, [pc, #196]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a30      	ldr	r2, [pc, #192]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f9f2 	bl	8000e34 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a54:	f7ff f9ee 	bl	8000e34 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e04c      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f0      	bne.n	8001a54 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001a72:	4b25      	ldr	r3, [pc, #148]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a74:	68da      	ldr	r2, [r3, #12]
 8001a76:	4924      	ldr	r1, [pc, #144]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a78:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <HAL_RCC_OscConfig+0x620>)
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	60cb      	str	r3, [r1, #12]
 8001a7e:	e03e      	b.n	8001afe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e039      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_RCC_OscConfig+0x618>)
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0203 	and.w	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6a1b      	ldr	r3, [r3, #32]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d12c      	bne.n	8001afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d123      	bne.n	8001afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d11b      	bne.n	8001afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d113      	bne.n	8001afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d109      	bne.n	8001afa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	085b      	lsrs	r3, r3, #1
 8001af2:	3b01      	subs	r3, #1
 8001af4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	019f800c 	.word	0x019f800c
 8001b10:	feeefffc 	.word	0xfeeefffc

08001b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e11e      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b2c:	4b91      	ldr	r3, [pc, #580]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d910      	bls.n	8001b5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b3a:	4b8e      	ldr	r3, [pc, #568]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 020f 	bic.w	r2, r3, #15
 8001b42:	498c      	ldr	r1, [pc, #560]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b8a      	ldr	r3, [pc, #552]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e106      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d073      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d129      	bne.n	8001bc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b70:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d101      	bne.n	8001b80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0f4      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001b80:	f000 f9d0 	bl	8001f24 <RCC_GetSysClockFreqFromPLLSource>
 8001b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4a7c      	ldr	r2, [pc, #496]	; (8001d7c <HAL_RCC_ClockConfig+0x268>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d93f      	bls.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001b8e:	4b7a      	ldr	r3, [pc, #488]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d009      	beq.n	8001bae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d033      	beq.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d12f      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb6:	4a70      	ldr	r2, [pc, #448]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	e024      	b.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d107      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d109      	bne.n	8001bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e0c6      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bdc:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e0be      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001bec:	f000 f8ce 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	4a61      	ldr	r2, [pc, #388]	; (8001d7c <HAL_RCC_ClockConfig+0x268>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d909      	bls.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001bfa:	4b5f      	ldr	r3, [pc, #380]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c02:	4a5d      	ldr	r2, [pc, #372]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c0e:	4b5a      	ldr	r3, [pc, #360]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f023 0203 	bic.w	r2, r3, #3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4957      	ldr	r1, [pc, #348]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c20:	f7ff f908 	bl	8000e34 <HAL_GetTick>
 8001c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c28:	f7ff f904 	bl	8000e34 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e095      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 020c 	and.w	r2, r3, #12
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d1eb      	bne.n	8001c28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d023      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c68:	4b43      	ldr	r3, [pc, #268]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	4a42      	ldr	r2, [pc, #264]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001c80:	4b3d      	ldr	r3, [pc, #244]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001c88:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	4936      	ldr	r1, [pc, #216]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	608b      	str	r3, [r1, #8]
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	2b80      	cmp	r3, #128	; 0x80
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d21d      	bcs.n	8001d00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 020f 	bic.w	r2, r3, #15
 8001ccc:	4929      	ldr	r1, [pc, #164]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001cd4:	f7ff f8ae 	bl	8000e34 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7ff f8aa 	bl	8000e34 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e03b      	b.n	8001d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b20      	ldr	r3, [pc, #128]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d1ed      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0304 	and.w	r3, r3, #4
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d008      	beq.n	8001d1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	4917      	ldr	r1, [pc, #92]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d009      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	490f      	ldr	r1, [pc, #60]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d3e:	f000 f825 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d42:	4602      	mov	r2, r0
 8001d44:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	490c      	ldr	r1, [pc, #48]	; (8001d80 <HAL_RCC_ClockConfig+0x26c>)
 8001d50:	5ccb      	ldrb	r3, [r1, r3]
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <HAL_RCC_ClockConfig+0x270>)
 8001d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d5e:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_RCC_ClockConfig+0x274>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe ff68 	bl	8000c38 <HAL_InitTick>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40022000 	.word	0x40022000
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	04c4b400 	.word	0x04c4b400
 8001d80:	08004d7c 	.word	0x08004d7c
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d92:	4b2c      	ldr	r3, [pc, #176]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d102      	bne.n	8001da4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e047      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001da4:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d102      	bne.n	8001db6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db0:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e03e      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001db6:	4b23      	ldr	r3, [pc, #140]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b0c      	cmp	r3, #12
 8001dc0:	d136      	bne.n	8001e30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de8:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dea:	68d2      	ldr	r2, [r2, #12]
 8001dec:	0a12      	lsrs	r2, r2, #8
 8001dee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001df2:	fb02 f303 	mul.w	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
      break;
 8001df8:	e00c      	b.n	8001e14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e02:	4a10      	ldr	r2, [pc, #64]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e04:	68d2      	ldr	r2, [r2, #12]
 8001e06:	0a12      	lsrs	r2, r2, #8
 8001e08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001e0c:	fb02 f303 	mul.w	r3, r2, r3
 8001e10:	617b      	str	r3, [r7, #20]
      break;
 8001e12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e14:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0e5b      	lsrs	r3, r3, #25
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	e001      	b.n	8001e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e34:	693b      	ldr	r3, [r7, #16]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	00f42400 	.word	0x00f42400
 8001e4c:	016e3600 	.word	0x016e3600

08001e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001e56:	681b      	ldr	r3, [r3, #0]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	20000000 	.word	0x20000000

08001e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001e6c:	f7ff fff0 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e70:	4602      	mov	r2, r0
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	0a1b      	lsrs	r3, r3, #8
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	4904      	ldr	r1, [pc, #16]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e7e:	5ccb      	ldrb	r3, [r1, r3]
 8001e80:	f003 031f 	and.w	r3, r3, #31
 8001e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	08004d8c 	.word	0x08004d8c

08001e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e98:	f7ff ffda 	bl	8001e50 <HAL_RCC_GetHCLKFreq>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	0adb      	lsrs	r3, r3, #11
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	4904      	ldr	r1, [pc, #16]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001eaa:	5ccb      	ldrb	r3, [r1, r3]
 8001eac:	f003 031f 	and.w	r3, r3, #31
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	08004d8c 	.word	0x08004d8c

08001ec0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	220f      	movs	r2, #15
 8001ece:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ed0:	4b12      	ldr	r3, [pc, #72]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001edc:	4b0f      	ldr	r3, [pc, #60]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f02:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_RCC_GetClockConfig+0x60>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 020f 	and.w	r2, r3, #15
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40022000 	.word	0x40022000

08001f24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f2a:	4b1e      	ldr	r3, [pc, #120]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	091b      	lsrs	r3, r3, #4
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	3301      	adds	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d10c      	bne.n	8001f62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f50:	4a14      	ldr	r2, [pc, #80]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f52:	68d2      	ldr	r2, [r2, #12]
 8001f54:	0a12      	lsrs	r2, r2, #8
 8001f56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f5a:	fb02 f303 	mul.w	r3, r2, r3
 8001f5e:	617b      	str	r3, [r7, #20]
    break;
 8001f60:	e00c      	b.n	8001f7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001f62:	4a12      	ldr	r2, [pc, #72]	; (8001fac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6a:	4a0e      	ldr	r2, [pc, #56]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f6c:	68d2      	ldr	r2, [r2, #12]
 8001f6e:	0a12      	lsrs	r2, r2, #8
 8001f70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
    break;
 8001f7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	0e5b      	lsrs	r3, r3, #25
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	3301      	adds	r3, #1
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001f96:	687b      	ldr	r3, [r7, #4]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	371c      	adds	r7, #28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	016e3600 	.word	0x016e3600
 8001fac:	00f42400 	.word	0x00f42400

08001fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fb8:	2300      	movs	r3, #0
 8001fba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 8098 	beq.w	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10d      	bne.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fde:	4b40      	ldr	r3, [pc, #256]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	4a3f      	ldr	r2, [pc, #252]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fea:	4b3d      	ldr	r3, [pc, #244]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a39      	ldr	r2, [pc, #228]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002006:	f7fe ff15 	bl	8000e34 <HAL_GetTick>
 800200a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800200c:	e009      	b.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7fe ff11 	bl	8000e34 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d902      	bls.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	74fb      	strb	r3, [r7, #19]
        break;
 8002020:	e005      	b.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ef      	beq.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800202e:	7cfb      	ldrb	r3, [r7, #19]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d159      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002034:	4b2a      	ldr	r3, [pc, #168]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800203a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d01e      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	429a      	cmp	r2, r3
 800204e:	d019      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002050:	4b23      	ldr	r3, [pc, #140]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800205e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002062:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800206c:	4b1c      	ldr	r3, [pc, #112]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800206e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002072:	4a1b      	ldr	r2, [pc, #108]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800207c:	4a18      	ldr	r2, [pc, #96]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7fe fed1 	bl	8000e34 <HAL_GetTick>
 8002092:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002094:	e00b      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002096:	f7fe fecd 	bl	8000e34 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d902      	bls.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	74fb      	strb	r3, [r7, #19]
            break;
 80020ac:	e006      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d0ec      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c2:	4b07      	ldr	r3, [pc, #28]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020d0:	4903      	ldr	r1, [pc, #12]	; (80020e0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80020d8:	e008      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80020da:	7cfb      	ldrb	r3, [r7, #19]
 80020dc:	74bb      	strb	r3, [r7, #18]
 80020de:	e005      	b.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80020e0:	40021000 	.word	0x40021000
 80020e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020ec:	7c7b      	ldrb	r3, [r7, #17]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d105      	bne.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f2:	4ba7      	ldr	r3, [pc, #668]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	4aa6      	ldr	r2, [pc, #664]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00a      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800210a:	4ba1      	ldr	r3, [pc, #644]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002110:	f023 0203 	bic.w	r2, r3, #3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	499d      	ldr	r1, [pc, #628]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211a:	4313      	orrs	r3, r2
 800211c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00a      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800212c:	4b98      	ldr	r3, [pc, #608]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	f023 020c 	bic.w	r2, r3, #12
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	4995      	ldr	r1, [pc, #596]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00a      	beq.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800214e:	4b90      	ldr	r3, [pc, #576]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002154:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	498c      	ldr	r1, [pc, #560]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800215e:	4313      	orrs	r3, r2
 8002160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0308 	and.w	r3, r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00a      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002170:	4b87      	ldr	r3, [pc, #540]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002176:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	4984      	ldr	r1, [pc, #528]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0310 	and.w	r3, r3, #16
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00a      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002192:	4b7f      	ldr	r3, [pc, #508]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002198:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	497b      	ldr	r1, [pc, #492]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0320 	and.w	r3, r3, #32
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d00a      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021b4:	4b76      	ldr	r3, [pc, #472]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	4973      	ldr	r1, [pc, #460]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021d6:	4b6e      	ldr	r3, [pc, #440]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	496a      	ldr	r1, [pc, #424]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00a      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80021f8:	4b65      	ldr	r3, [pc, #404]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4962      	ldr	r1, [pc, #392]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00a      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800221a:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002228:	4959      	ldr	r1, [pc, #356]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00a      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800223c:	4b54      	ldr	r3, [pc, #336]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800223e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002242:	f023 0203 	bic.w	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224a:	4951      	ldr	r1, [pc, #324]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800224c:	4313      	orrs	r3, r2
 800224e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00a      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800225e:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002264:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226c:	4948      	ldr	r1, [pc, #288]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800226e:	4313      	orrs	r3, r2
 8002270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d015      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002280:	4b43      	ldr	r3, [pc, #268]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002286:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4940      	ldr	r1, [pc, #256]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002290:	4313      	orrs	r3, r2
 8002292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800229e:	d105      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022a0:	4b3b      	ldr	r3, [pc, #236]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4a3a      	ldr	r2, [pc, #232]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d015      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022b8:	4b35      	ldr	r3, [pc, #212]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c6:	4932      	ldr	r1, [pc, #200]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022d6:	d105      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022d8:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	4a2c      	ldr	r2, [pc, #176]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022e2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d015      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	4924      	ldr	r1, [pc, #144]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230e:	d105      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002310:	4b1f      	ldr	r3, [pc, #124]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	4a1e      	ldr	r2, [pc, #120]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800231a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d015      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800232a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002336:	4916      	ldr	r1, [pc, #88]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002338:	4313      	orrs	r3, r2
 800233a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002342:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002346:	d105      	bne.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002348:	4b11      	ldr	r3, [pc, #68]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a10      	ldr	r2, [pc, #64]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800234e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002352:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d019      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002360:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4908      	ldr	r1, [pc, #32]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002370:	4313      	orrs	r3, r2
 8002372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800237e:	d109      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002380:	4b03      	ldr	r3, [pc, #12]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	4a02      	ldr	r2, [pc, #8]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800238a:	60d3      	str	r3, [r2, #12]
 800238c:	e002      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d015      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80023a0:	4b29      	ldr	r3, [pc, #164]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ae:	4926      	ldr	r1, [pc, #152]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023be:	d105      	bne.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a20      	ldr	r2, [pc, #128]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d015      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023de:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e6:	4918      	ldr	r1, [pc, #96]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023f6:	d105      	bne.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	4a12      	ldr	r2, [pc, #72]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80023fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002402:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d015      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002410:	4b0d      	ldr	r3, [pc, #52]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002412:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002416:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	490a      	ldr	r1, [pc, #40]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002420:	4313      	orrs	r3, r2
 8002422:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800242a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800242e:	d105      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002430:	4b05      	ldr	r3, [pc, #20]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002436:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800243a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800243c:	7cbb      	ldrb	r3, [r7, #18]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000

0800244c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e049      	b.n	80024f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d106      	bne.n	8002478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fb88 	bl	8000b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3304      	adds	r3, #4
 8002488:	4619      	mov	r1, r3
 800248a:	4610      	mov	r0, r2
 800248c:	f000 fdc4 	bl	8003018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2201      	movs	r2, #1
 80024d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
	...

080024fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d001      	beq.n	8002514 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e054      	b.n	80025be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a26      	ldr	r2, [pc, #152]	; (80025cc <HAL_TIM_Base_Start_IT+0xd0>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d022      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x80>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800253e:	d01d      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x80>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a22      	ldr	r2, [pc, #136]	; (80025d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d018      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x80>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a21      	ldr	r2, [pc, #132]	; (80025d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d013      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x80>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1f      	ldr	r2, [pc, #124]	; (80025d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00e      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x80>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a1e      	ldr	r2, [pc, #120]	; (80025dc <HAL_TIM_Base_Start_IT+0xe0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d009      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x80>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1c      	ldr	r2, [pc, #112]	; (80025e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d004      	beq.n	800257c <HAL_TIM_Base_Start_IT+0x80>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1b      	ldr	r2, [pc, #108]	; (80025e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d115      	bne.n	80025a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_TIM_Base_Start_IT+0xec>)
 8002584:	4013      	ands	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b06      	cmp	r3, #6
 800258c:	d015      	beq.n	80025ba <HAL_TIM_Base_Start_IT+0xbe>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002594:	d011      	beq.n	80025ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a6:	e008      	b.n	80025ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e000      	b.n	80025bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40012c00 	.word	0x40012c00
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40000c00 	.word	0x40000c00
 80025dc:	40013400 	.word	0x40013400
 80025e0:	40014000 	.word	0x40014000
 80025e4:	40015000 	.word	0x40015000
 80025e8:	00010007 	.word	0x00010007

080025ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e049      	b.n	8002692 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f841 	bl	800269a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	3304      	adds	r3, #4
 8002628:	4619      	mov	r1, r3
 800262a:	4610      	mov	r0, r2
 800262c:	f000 fcf4 	bl	8003018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3708      	adds	r7, #8
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d109      	bne.n	80026d4 <HAL_TIM_PWM_Start+0x24>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	bf14      	ite	ne
 80026cc:	2301      	movne	r3, #1
 80026ce:	2300      	moveq	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e03c      	b.n	800274e <HAL_TIM_PWM_Start+0x9e>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d109      	bne.n	80026ee <HAL_TIM_PWM_Start+0x3e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e02f      	b.n	800274e <HAL_TIM_PWM_Start+0x9e>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b08      	cmp	r3, #8
 80026f2:	d109      	bne.n	8002708 <HAL_TIM_PWM_Start+0x58>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	e022      	b.n	800274e <HAL_TIM_PWM_Start+0x9e>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b0c      	cmp	r3, #12
 800270c:	d109      	bne.n	8002722 <HAL_TIM_PWM_Start+0x72>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b01      	cmp	r3, #1
 8002718:	bf14      	ite	ne
 800271a:	2301      	movne	r3, #1
 800271c:	2300      	moveq	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	e015      	b.n	800274e <HAL_TIM_PWM_Start+0x9e>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b10      	cmp	r3, #16
 8002726:	d109      	bne.n	800273c <HAL_TIM_PWM_Start+0x8c>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	e008      	b.n	800274e <HAL_TIM_PWM_Start+0x9e>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b01      	cmp	r3, #1
 8002746:	bf14      	ite	ne
 8002748:	2301      	movne	r3, #1
 800274a:	2300      	moveq	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0a6      	b.n	80028a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d104      	bne.n	8002766 <HAL_TIM_PWM_Start+0xb6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002764:	e023      	b.n	80027ae <HAL_TIM_PWM_Start+0xfe>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d104      	bne.n	8002776 <HAL_TIM_PWM_Start+0xc6>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002774:	e01b      	b.n	80027ae <HAL_TIM_PWM_Start+0xfe>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	2b08      	cmp	r3, #8
 800277a:	d104      	bne.n	8002786 <HAL_TIM_PWM_Start+0xd6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2202      	movs	r2, #2
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002784:	e013      	b.n	80027ae <HAL_TIM_PWM_Start+0xfe>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d104      	bne.n	8002796 <HAL_TIM_PWM_Start+0xe6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002794:	e00b      	b.n	80027ae <HAL_TIM_PWM_Start+0xfe>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	2b10      	cmp	r3, #16
 800279a:	d104      	bne.n	80027a6 <HAL_TIM_PWM_Start+0xf6>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027a4:	e003      	b.n	80027ae <HAL_TIM_PWM_Start+0xfe>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2202      	movs	r2, #2
 80027aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2201      	movs	r2, #1
 80027b4:	6839      	ldr	r1, [r7, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 f8a8 	bl	800390c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a3a      	ldr	r2, [pc, #232]	; (80028ac <HAL_TIM_PWM_Start+0x1fc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_TIM_PWM_Start+0x148>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a39      	ldr	r2, [pc, #228]	; (80028b0 <HAL_TIM_PWM_Start+0x200>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_TIM_PWM_Start+0x148>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a37      	ldr	r2, [pc, #220]	; (80028b4 <HAL_TIM_PWM_Start+0x204>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_TIM_PWM_Start+0x148>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a36      	ldr	r2, [pc, #216]	; (80028b8 <HAL_TIM_PWM_Start+0x208>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_TIM_PWM_Start+0x148>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a34      	ldr	r2, [pc, #208]	; (80028bc <HAL_TIM_PWM_Start+0x20c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_TIM_PWM_Start+0x148>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a33      	ldr	r2, [pc, #204]	; (80028c0 <HAL_TIM_PWM_Start+0x210>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d101      	bne.n	80027fc <HAL_TIM_PWM_Start+0x14c>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_TIM_PWM_Start+0x14e>
 80027fc:	2300      	movs	r3, #0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a25      	ldr	r2, [pc, #148]	; (80028ac <HAL_TIM_PWM_Start+0x1fc>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_TIM_PWM_Start+0x1b2>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d01d      	beq.n	8002862 <HAL_TIM_PWM_Start+0x1b2>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a26      	ldr	r2, [pc, #152]	; (80028c4 <HAL_TIM_PWM_Start+0x214>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_TIM_PWM_Start+0x1b2>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a24      	ldr	r2, [pc, #144]	; (80028c8 <HAL_TIM_PWM_Start+0x218>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_TIM_PWM_Start+0x1b2>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a23      	ldr	r2, [pc, #140]	; (80028cc <HAL_TIM_PWM_Start+0x21c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_TIM_PWM_Start+0x1b2>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a19      	ldr	r2, [pc, #100]	; (80028b0 <HAL_TIM_PWM_Start+0x200>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_TIM_PWM_Start+0x1b2>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a18      	ldr	r2, [pc, #96]	; (80028b4 <HAL_TIM_PWM_Start+0x204>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_TIM_PWM_Start+0x1b2>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a18      	ldr	r2, [pc, #96]	; (80028c0 <HAL_TIM_PWM_Start+0x210>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d115      	bne.n	800288e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <HAL_TIM_PWM_Start+0x220>)
 800286a:	4013      	ands	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2b06      	cmp	r3, #6
 8002872:	d015      	beq.n	80028a0 <HAL_TIM_PWM_Start+0x1f0>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800287a:	d011      	beq.n	80028a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288c:	e008      	b.n	80028a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e000      	b.n	80028a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40013400 	.word	0x40013400
 80028b4:	40014000 	.word	0x40014000
 80028b8:	40014400 	.word	0x40014400
 80028bc:	40014800 	.word	0x40014800
 80028c0:	40015000 	.word	0x40015000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	00010007 	.word	0x00010007

080028d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d020      	beq.n	8002938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0202 	mvn.w	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fb5c 	bl	8002fdc <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fb4e 	bl	8002fc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fb5f 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d020      	beq.n	8002984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0204 	mvn.w	r2, #4
 8002954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fb36 	bl	8002fdc <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fb28 	bl	8002fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 fb39 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d020      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0208 	mvn.w	r2, #8
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2204      	movs	r2, #4
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 fb10 	bl	8002fdc <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fb02 	bl	8002fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 fb13 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d020      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0210 	mvn.w	r2, #16
 80029ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2208      	movs	r2, #8
 80029f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 faea 	bl	8002fdc <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fadc 	bl	8002fc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 faed 	bl	8002ff0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fd ffd0 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d104      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00c      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d007      	beq.n	8002a6e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8002a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f001 f8a9 	bl	8003bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00c      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002a8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f001 f8a1 	bl	8003bd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00c      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d007      	beq.n	8002ab6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 faa7 	bl	8003004 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00c      	beq.n	8002ada <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f003 0320 	and.w	r3, r3, #32
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d007      	beq.n	8002ada <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f06f 0220 	mvn.w	r2, #32
 8002ad2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f001 f869 	bl	8003bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00c      	beq.n	8002afe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d007      	beq.n	8002afe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8002af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f001 f875 	bl	8003be8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00c      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8002b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f001 f86d 	bl	8003bfc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00c      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d007      	beq.n	8002b46 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f001 f865 	bl	8003c10 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00c      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f001 f85d 	bl	8003c24 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e0ff      	b.n	8002d92 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b14      	cmp	r3, #20
 8002b9e:	f200 80f0 	bhi.w	8002d82 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002ba2:	a201      	add	r2, pc, #4	; (adr r2, 8002ba8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba8:	08002bfd 	.word	0x08002bfd
 8002bac:	08002d83 	.word	0x08002d83
 8002bb0:	08002d83 	.word	0x08002d83
 8002bb4:	08002d83 	.word	0x08002d83
 8002bb8:	08002c3d 	.word	0x08002c3d
 8002bbc:	08002d83 	.word	0x08002d83
 8002bc0:	08002d83 	.word	0x08002d83
 8002bc4:	08002d83 	.word	0x08002d83
 8002bc8:	08002c7f 	.word	0x08002c7f
 8002bcc:	08002d83 	.word	0x08002d83
 8002bd0:	08002d83 	.word	0x08002d83
 8002bd4:	08002d83 	.word	0x08002d83
 8002bd8:	08002cbf 	.word	0x08002cbf
 8002bdc:	08002d83 	.word	0x08002d83
 8002be0:	08002d83 	.word	0x08002d83
 8002be4:	08002d83 	.word	0x08002d83
 8002be8:	08002d01 	.word	0x08002d01
 8002bec:	08002d83 	.word	0x08002d83
 8002bf0:	08002d83 	.word	0x08002d83
 8002bf4:	08002d83 	.word	0x08002d83
 8002bf8:	08002d41 	.word	0x08002d41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fabc 	bl	8003180 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699a      	ldr	r2, [r3, #24]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0208 	orr.w	r2, r2, #8
 8002c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0204 	bic.w	r2, r2, #4
 8002c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6999      	ldr	r1, [r3, #24]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	691a      	ldr	r2, [r3, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	619a      	str	r2, [r3, #24]
      break;
 8002c3a:	e0a5      	b.n	8002d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 fb36 	bl	80032b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699a      	ldr	r2, [r3, #24]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699a      	ldr	r2, [r3, #24]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6999      	ldr	r1, [r3, #24]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	021a      	lsls	r2, r3, #8
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	619a      	str	r2, [r3, #24]
      break;
 8002c7c:	e084      	b.n	8002d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68b9      	ldr	r1, [r7, #8]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fba9 	bl	80033dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69da      	ldr	r2, [r3, #28]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0208 	orr.w	r2, r2, #8
 8002c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	69da      	ldr	r2, [r3, #28]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0204 	bic.w	r2, r2, #4
 8002ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69d9      	ldr	r1, [r3, #28]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	61da      	str	r2, [r3, #28]
      break;
 8002cbc:	e064      	b.n	8002d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68b9      	ldr	r1, [r7, #8]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f000 fc1b 	bl	8003500 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69da      	ldr	r2, [r3, #28]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	69da      	ldr	r2, [r3, #28]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69d9      	ldr	r1, [r3, #28]
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	021a      	lsls	r2, r3, #8
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	61da      	str	r2, [r3, #28]
      break;
 8002cfe:	e043      	b.n	8002d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68b9      	ldr	r1, [r7, #8]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fc8e 	bl	8003628 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0208 	orr.w	r2, r2, #8
 8002d1a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0204 	bic.w	r2, r2, #4
 8002d2a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002d3e:	e023      	b.n	8002d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68b9      	ldr	r1, [r7, #8]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fcd8 	bl	80036fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d6a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	021a      	lsls	r2, r3, #8
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002d80:	e002      	b.n	8002d88 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	75fb      	strb	r3, [r7, #23]
      break;
 8002d86:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop

08002d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_TIM_ConfigClockSource+0x1c>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e0f6      	b.n	8002fa6 <HAL_TIM_ConfigClockSource+0x20a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002dd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6f      	ldr	r2, [pc, #444]	; (8002fb0 <HAL_TIM_ConfigClockSource+0x214>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	f000 80c1 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002df8:	4a6d      	ldr	r2, [pc, #436]	; (8002fb0 <HAL_TIM_ConfigClockSource+0x214>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	f200 80c6 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e00:	4a6c      	ldr	r2, [pc, #432]	; (8002fb4 <HAL_TIM_ConfigClockSource+0x218>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	f000 80b9 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002e08:	4a6a      	ldr	r2, [pc, #424]	; (8002fb4 <HAL_TIM_ConfigClockSource+0x218>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f200 80be 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e10:	4a69      	ldr	r2, [pc, #420]	; (8002fb8 <HAL_TIM_ConfigClockSource+0x21c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	f000 80b1 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002e18:	4a67      	ldr	r2, [pc, #412]	; (8002fb8 <HAL_TIM_ConfigClockSource+0x21c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	f200 80b6 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e20:	4a66      	ldr	r2, [pc, #408]	; (8002fbc <HAL_TIM_ConfigClockSource+0x220>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	f000 80a9 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002e28:	4a64      	ldr	r2, [pc, #400]	; (8002fbc <HAL_TIM_ConfigClockSource+0x220>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	f200 80ae 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e30:	4a63      	ldr	r2, [pc, #396]	; (8002fc0 <HAL_TIM_ConfigClockSource+0x224>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	f000 80a1 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002e38:	4a61      	ldr	r2, [pc, #388]	; (8002fc0 <HAL_TIM_ConfigClockSource+0x224>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	f200 80a6 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e40:	4a60      	ldr	r2, [pc, #384]	; (8002fc4 <HAL_TIM_ConfigClockSource+0x228>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	f000 8099 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002e48:	4a5e      	ldr	r2, [pc, #376]	; (8002fc4 <HAL_TIM_ConfigClockSource+0x228>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	f200 809e 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e50:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002e54:	f000 8091 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002e58:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002e5c:	f200 8096 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e64:	f000 8089 	beq.w	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e6c:	f200 808e 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e74:	d03e      	beq.n	8002ef4 <HAL_TIM_ConfigClockSource+0x158>
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7a:	f200 8087 	bhi.w	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e82:	f000 8086 	beq.w	8002f92 <HAL_TIM_ConfigClockSource+0x1f6>
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d87f      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e8c:	2b70      	cmp	r3, #112	; 0x70
 8002e8e:	d01a      	beq.n	8002ec6 <HAL_TIM_ConfigClockSource+0x12a>
 8002e90:	2b70      	cmp	r3, #112	; 0x70
 8002e92:	d87b      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e94:	2b60      	cmp	r3, #96	; 0x60
 8002e96:	d050      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0x19e>
 8002e98:	2b60      	cmp	r3, #96	; 0x60
 8002e9a:	d877      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002e9c:	2b50      	cmp	r3, #80	; 0x50
 8002e9e:	d03c      	beq.n	8002f1a <HAL_TIM_ConfigClockSource+0x17e>
 8002ea0:	2b50      	cmp	r3, #80	; 0x50
 8002ea2:	d873      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d058      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0x1be>
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d86f      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002eac:	2b30      	cmp	r3, #48	; 0x30
 8002eae:	d064      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002eb0:	2b30      	cmp	r3, #48	; 0x30
 8002eb2:	d86b      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002eb4:	2b20      	cmp	r3, #32
 8002eb6:	d060      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002eb8:	2b20      	cmp	r3, #32
 8002eba:	d867      	bhi.n	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d05c      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002ec0:	2b10      	cmp	r3, #16
 8002ec2:	d05a      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x1de>
 8002ec4:	e062      	b.n	8002f8c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ed6:	f000 fcf9 	bl	80038cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68ba      	ldr	r2, [r7, #8]
 8002ef0:	609a      	str	r2, [r3, #8]
      break;
 8002ef2:	e04f      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f04:	f000 fce2 	bl	80038cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f16:	609a      	str	r2, [r3, #8]
      break;
 8002f18:	e03c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f26:	461a      	mov	r2, r3
 8002f28:	f000 fc54 	bl	80037d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2150      	movs	r1, #80	; 0x50
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 fcad 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 8002f38:	e02c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f46:	461a      	mov	r2, r3
 8002f48:	f000 fc73 	bl	8003832 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2160      	movs	r1, #96	; 0x60
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fc9d 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 8002f58:	e01c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f66:	461a      	mov	r2, r3
 8002f68:	f000 fc34 	bl	80037d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2140      	movs	r1, #64	; 0x40
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fc8d 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 8002f78:	e00c      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f000 fc84 	bl	8003892 <TIM_ITRx_SetConfig>
      break;
 8002f8a:	e003      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f90:	e000      	b.n	8002f94 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	00100070 	.word	0x00100070
 8002fb4:	00100060 	.word	0x00100060
 8002fb8:	00100050 	.word	0x00100050
 8002fbc:	00100040 	.word	0x00100040
 8002fc0:	00100030 	.word	0x00100030
 8002fc4:	00100020 	.word	0x00100020

08002fc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a4c      	ldr	r2, [pc, #304]	; (800315c <TIM_Base_SetConfig+0x144>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d017      	beq.n	8003060 <TIM_Base_SetConfig+0x48>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003036:	d013      	beq.n	8003060 <TIM_Base_SetConfig+0x48>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a49      	ldr	r2, [pc, #292]	; (8003160 <TIM_Base_SetConfig+0x148>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00f      	beq.n	8003060 <TIM_Base_SetConfig+0x48>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a48      	ldr	r2, [pc, #288]	; (8003164 <TIM_Base_SetConfig+0x14c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d00b      	beq.n	8003060 <TIM_Base_SetConfig+0x48>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a47      	ldr	r2, [pc, #284]	; (8003168 <TIM_Base_SetConfig+0x150>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d007      	beq.n	8003060 <TIM_Base_SetConfig+0x48>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a46      	ldr	r2, [pc, #280]	; (800316c <TIM_Base_SetConfig+0x154>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d003      	beq.n	8003060 <TIM_Base_SetConfig+0x48>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4a45      	ldr	r2, [pc, #276]	; (8003170 <TIM_Base_SetConfig+0x158>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d108      	bne.n	8003072 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a39      	ldr	r2, [pc, #228]	; (800315c <TIM_Base_SetConfig+0x144>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d023      	beq.n	80030c2 <TIM_Base_SetConfig+0xaa>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003080:	d01f      	beq.n	80030c2 <TIM_Base_SetConfig+0xaa>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a36      	ldr	r2, [pc, #216]	; (8003160 <TIM_Base_SetConfig+0x148>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d01b      	beq.n	80030c2 <TIM_Base_SetConfig+0xaa>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a35      	ldr	r2, [pc, #212]	; (8003164 <TIM_Base_SetConfig+0x14c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d017      	beq.n	80030c2 <TIM_Base_SetConfig+0xaa>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a34      	ldr	r2, [pc, #208]	; (8003168 <TIM_Base_SetConfig+0x150>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <TIM_Base_SetConfig+0xaa>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a33      	ldr	r2, [pc, #204]	; (800316c <TIM_Base_SetConfig+0x154>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00f      	beq.n	80030c2 <TIM_Base_SetConfig+0xaa>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a33      	ldr	r2, [pc, #204]	; (8003174 <TIM_Base_SetConfig+0x15c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00b      	beq.n	80030c2 <TIM_Base_SetConfig+0xaa>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a32      	ldr	r2, [pc, #200]	; (8003178 <TIM_Base_SetConfig+0x160>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d007      	beq.n	80030c2 <TIM_Base_SetConfig+0xaa>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a31      	ldr	r2, [pc, #196]	; (800317c <TIM_Base_SetConfig+0x164>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d003      	beq.n	80030c2 <TIM_Base_SetConfig+0xaa>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a2c      	ldr	r2, [pc, #176]	; (8003170 <TIM_Base_SetConfig+0x158>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d108      	bne.n	80030d4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a18      	ldr	r2, [pc, #96]	; (800315c <TIM_Base_SetConfig+0x144>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d013      	beq.n	8003128 <TIM_Base_SetConfig+0x110>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a1a      	ldr	r2, [pc, #104]	; (800316c <TIM_Base_SetConfig+0x154>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00f      	beq.n	8003128 <TIM_Base_SetConfig+0x110>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a1a      	ldr	r2, [pc, #104]	; (8003174 <TIM_Base_SetConfig+0x15c>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00b      	beq.n	8003128 <TIM_Base_SetConfig+0x110>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a19      	ldr	r2, [pc, #100]	; (8003178 <TIM_Base_SetConfig+0x160>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d007      	beq.n	8003128 <TIM_Base_SetConfig+0x110>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a18      	ldr	r2, [pc, #96]	; (800317c <TIM_Base_SetConfig+0x164>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d003      	beq.n	8003128 <TIM_Base_SetConfig+0x110>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a13      	ldr	r2, [pc, #76]	; (8003170 <TIM_Base_SetConfig+0x158>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d103      	bne.n	8003130 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b01      	cmp	r3, #1
 8003140:	d105      	bne.n	800314e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f023 0201 	bic.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	611a      	str	r2, [r3, #16]
  }
}
 800314e:	bf00      	nop
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40013400 	.word	0x40013400
 8003170:	40015000 	.word	0x40015000
 8003174:	40014000 	.word	0x40014000
 8003178:	40014400 	.word	0x40014400
 800317c:	40014800 	.word	0x40014800

08003180 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f023 0201 	bic.w	r2, r3, #1
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f023 0302 	bic.w	r3, r3, #2
 80031cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a30      	ldr	r2, [pc, #192]	; (800329c <TIM_OC1_SetConfig+0x11c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <TIM_OC1_SetConfig+0x88>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a2f      	ldr	r2, [pc, #188]	; (80032a0 <TIM_OC1_SetConfig+0x120>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00f      	beq.n	8003208 <TIM_OC1_SetConfig+0x88>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a2e      	ldr	r2, [pc, #184]	; (80032a4 <TIM_OC1_SetConfig+0x124>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00b      	beq.n	8003208 <TIM_OC1_SetConfig+0x88>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a2d      	ldr	r2, [pc, #180]	; (80032a8 <TIM_OC1_SetConfig+0x128>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_OC1_SetConfig+0x88>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <TIM_OC1_SetConfig+0x12c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_OC1_SetConfig+0x88>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a2b      	ldr	r2, [pc, #172]	; (80032b0 <TIM_OC1_SetConfig+0x130>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d10c      	bne.n	8003222 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0308 	bic.w	r3, r3, #8
 800320e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	4313      	orrs	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0304 	bic.w	r3, r3, #4
 8003220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a1d      	ldr	r2, [pc, #116]	; (800329c <TIM_OC1_SetConfig+0x11c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d013      	beq.n	8003252 <TIM_OC1_SetConfig+0xd2>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a1c      	ldr	r2, [pc, #112]	; (80032a0 <TIM_OC1_SetConfig+0x120>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00f      	beq.n	8003252 <TIM_OC1_SetConfig+0xd2>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a1b      	ldr	r2, [pc, #108]	; (80032a4 <TIM_OC1_SetConfig+0x124>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d00b      	beq.n	8003252 <TIM_OC1_SetConfig+0xd2>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a1a      	ldr	r2, [pc, #104]	; (80032a8 <TIM_OC1_SetConfig+0x128>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d007      	beq.n	8003252 <TIM_OC1_SetConfig+0xd2>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a19      	ldr	r2, [pc, #100]	; (80032ac <TIM_OC1_SetConfig+0x12c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d003      	beq.n	8003252 <TIM_OC1_SetConfig+0xd2>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <TIM_OC1_SetConfig+0x130>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d111      	bne.n	8003276 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	695b      	ldr	r3, [r3, #20]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	693a      	ldr	r2, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68fa      	ldr	r2, [r7, #12]
 8003280:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	621a      	str	r2, [r3, #32]
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	40012c00 	.word	0x40012c00
 80032a0:	40013400 	.word	0x40013400
 80032a4:	40014000 	.word	0x40014000
 80032a8:	40014400 	.word	0x40014400
 80032ac:	40014800 	.word	0x40014800
 80032b0:	40015000 	.word	0x40015000

080032b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b087      	sub	sp, #28
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f023 0210 	bic.w	r2, r3, #16
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	021b      	lsls	r3, r3, #8
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	f023 0320 	bic.w	r3, r3, #32
 8003302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4313      	orrs	r3, r2
 800330e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a2c      	ldr	r2, [pc, #176]	; (80033c4 <TIM_OC2_SetConfig+0x110>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d007      	beq.n	8003328 <TIM_OC2_SetConfig+0x74>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a2b      	ldr	r2, [pc, #172]	; (80033c8 <TIM_OC2_SetConfig+0x114>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d003      	beq.n	8003328 <TIM_OC2_SetConfig+0x74>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a2a      	ldr	r2, [pc, #168]	; (80033cc <TIM_OC2_SetConfig+0x118>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d10d      	bne.n	8003344 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003342:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a1f      	ldr	r2, [pc, #124]	; (80033c4 <TIM_OC2_SetConfig+0x110>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d013      	beq.n	8003374 <TIM_OC2_SetConfig+0xc0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a1e      	ldr	r2, [pc, #120]	; (80033c8 <TIM_OC2_SetConfig+0x114>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00f      	beq.n	8003374 <TIM_OC2_SetConfig+0xc0>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a1e      	ldr	r2, [pc, #120]	; (80033d0 <TIM_OC2_SetConfig+0x11c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d00b      	beq.n	8003374 <TIM_OC2_SetConfig+0xc0>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a1d      	ldr	r2, [pc, #116]	; (80033d4 <TIM_OC2_SetConfig+0x120>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d007      	beq.n	8003374 <TIM_OC2_SetConfig+0xc0>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a1c      	ldr	r2, [pc, #112]	; (80033d8 <TIM_OC2_SetConfig+0x124>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d003      	beq.n	8003374 <TIM_OC2_SetConfig+0xc0>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	4a17      	ldr	r2, [pc, #92]	; (80033cc <TIM_OC2_SetConfig+0x118>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d113      	bne.n	800339c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800337a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003382:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	693a      	ldr	r2, [r7, #16]
 800338c:	4313      	orrs	r3, r2
 800338e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	697a      	ldr	r2, [r7, #20]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40013400 	.word	0x40013400
 80033cc:	40015000 	.word	0x40015000
 80033d0:	40014000 	.word	0x40014000
 80033d4:	40014400 	.word	0x40014400
 80033d8:	40014800 	.word	0x40014800

080033dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033dc:	b480      	push	{r7}
 80033de:	b087      	sub	sp, #28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1b      	ldr	r3, [r3, #32]
 80033f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0303 	bic.w	r3, r3, #3
 8003416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	4313      	orrs	r3, r2
 8003434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a2b      	ldr	r2, [pc, #172]	; (80034e8 <TIM_OC3_SetConfig+0x10c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <TIM_OC3_SetConfig+0x72>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a2a      	ldr	r2, [pc, #168]	; (80034ec <TIM_OC3_SetConfig+0x110>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_OC3_SetConfig+0x72>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a29      	ldr	r2, [pc, #164]	; (80034f0 <TIM_OC3_SetConfig+0x114>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d10d      	bne.n	800346a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a1e      	ldr	r2, [pc, #120]	; (80034e8 <TIM_OC3_SetConfig+0x10c>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <TIM_OC3_SetConfig+0xbe>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <TIM_OC3_SetConfig+0x110>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00f      	beq.n	800349a <TIM_OC3_SetConfig+0xbe>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a1d      	ldr	r2, [pc, #116]	; (80034f4 <TIM_OC3_SetConfig+0x118>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d00b      	beq.n	800349a <TIM_OC3_SetConfig+0xbe>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a1c      	ldr	r2, [pc, #112]	; (80034f8 <TIM_OC3_SetConfig+0x11c>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d007      	beq.n	800349a <TIM_OC3_SetConfig+0xbe>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a1b      	ldr	r2, [pc, #108]	; (80034fc <TIM_OC3_SetConfig+0x120>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d003      	beq.n	800349a <TIM_OC3_SetConfig+0xbe>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a16      	ldr	r2, [pc, #88]	; (80034f0 <TIM_OC3_SetConfig+0x114>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d113      	bne.n	80034c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	693a      	ldr	r2, [r7, #16]
 80034be:	4313      	orrs	r3, r2
 80034c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	621a      	str	r2, [r3, #32]
}
 80034dc:	bf00      	nop
 80034de:	371c      	adds	r7, #28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40012c00 	.word	0x40012c00
 80034ec:	40013400 	.word	0x40013400
 80034f0:	40015000 	.word	0x40015000
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800

08003500 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800352e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	021b      	lsls	r3, r3, #8
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800354e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	031b      	lsls	r3, r3, #12
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a2c      	ldr	r2, [pc, #176]	; (8003610 <TIM_OC4_SetConfig+0x110>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <TIM_OC4_SetConfig+0x74>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a2b      	ldr	r2, [pc, #172]	; (8003614 <TIM_OC4_SetConfig+0x114>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_OC4_SetConfig+0x74>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a2a      	ldr	r2, [pc, #168]	; (8003618 <TIM_OC4_SetConfig+0x118>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d10d      	bne.n	8003590 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800357a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	031b      	lsls	r3, r3, #12
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800358e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a1f      	ldr	r2, [pc, #124]	; (8003610 <TIM_OC4_SetConfig+0x110>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <TIM_OC4_SetConfig+0xc0>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a1e      	ldr	r2, [pc, #120]	; (8003614 <TIM_OC4_SetConfig+0x114>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d00f      	beq.n	80035c0 <TIM_OC4_SetConfig+0xc0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a1e      	ldr	r2, [pc, #120]	; (800361c <TIM_OC4_SetConfig+0x11c>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_OC4_SetConfig+0xc0>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <TIM_OC4_SetConfig+0x120>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_OC4_SetConfig+0xc0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <TIM_OC4_SetConfig+0x124>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_OC4_SetConfig+0xc0>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a17      	ldr	r2, [pc, #92]	; (8003618 <TIM_OC4_SetConfig+0x118>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d113      	bne.n	80035e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	019b      	lsls	r3, r3, #6
 80035d6:	693a      	ldr	r2, [r7, #16]
 80035d8:	4313      	orrs	r3, r2
 80035da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	019b      	lsls	r3, r3, #6
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40013400 	.word	0x40013400
 8003618:	40015000 	.word	0x40015000
 800361c:	40014000 	.word	0x40014000
 8003620:	40014400 	.word	0x40014400
 8003624:	40014800 	.word	0x40014800

08003628 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800365a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800366c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	041b      	lsls	r3, r3, #16
 8003674:	693a      	ldr	r2, [r7, #16]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a19      	ldr	r2, [pc, #100]	; (80036e4 <TIM_OC5_SetConfig+0xbc>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <TIM_OC5_SetConfig+0x82>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a18      	ldr	r2, [pc, #96]	; (80036e8 <TIM_OC5_SetConfig+0xc0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00f      	beq.n	80036aa <TIM_OC5_SetConfig+0x82>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a17      	ldr	r2, [pc, #92]	; (80036ec <TIM_OC5_SetConfig+0xc4>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d00b      	beq.n	80036aa <TIM_OC5_SetConfig+0x82>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a16      	ldr	r2, [pc, #88]	; (80036f0 <TIM_OC5_SetConfig+0xc8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d007      	beq.n	80036aa <TIM_OC5_SetConfig+0x82>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <TIM_OC5_SetConfig+0xcc>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d003      	beq.n	80036aa <TIM_OC5_SetConfig+0x82>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <TIM_OC5_SetConfig+0xd0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d109      	bne.n	80036be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	021b      	lsls	r3, r3, #8
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	621a      	str	r2, [r3, #32]
}
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40012c00 	.word	0x40012c00
 80036e8:	40013400 	.word	0x40013400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40014400 	.word	0x40014400
 80036f4:	40014800 	.word	0x40014800
 80036f8:	40015000 	.word	0x40015000

080036fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800372a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	021b      	lsls	r3, r3, #8
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4313      	orrs	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003742:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	051b      	lsls	r3, r3, #20
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	4313      	orrs	r3, r2
 800374e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a1a      	ldr	r2, [pc, #104]	; (80037bc <TIM_OC6_SetConfig+0xc0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d013      	beq.n	8003780 <TIM_OC6_SetConfig+0x84>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a19      	ldr	r2, [pc, #100]	; (80037c0 <TIM_OC6_SetConfig+0xc4>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00f      	beq.n	8003780 <TIM_OC6_SetConfig+0x84>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <TIM_OC6_SetConfig+0xc8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d00b      	beq.n	8003780 <TIM_OC6_SetConfig+0x84>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a17      	ldr	r2, [pc, #92]	; (80037c8 <TIM_OC6_SetConfig+0xcc>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d007      	beq.n	8003780 <TIM_OC6_SetConfig+0x84>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a16      	ldr	r2, [pc, #88]	; (80037cc <TIM_OC6_SetConfig+0xd0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d003      	beq.n	8003780 <TIM_OC6_SetConfig+0x84>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a15      	ldr	r2, [pc, #84]	; (80037d0 <TIM_OC6_SetConfig+0xd4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d109      	bne.n	8003794 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003786:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	029b      	lsls	r3, r3, #10
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	621a      	str	r2, [r3, #32]
}
 80037ae:	bf00      	nop
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40012c00 	.word	0x40012c00
 80037c0:	40013400 	.word	0x40013400
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400
 80037cc:	40014800 	.word	0x40014800
 80037d0:	40015000 	.word	0x40015000

080037d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	f023 0201 	bic.w	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f023 030a 	bic.w	r3, r3, #10
 8003810:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	693a      	ldr	r2, [r7, #16]
 800381e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	697a      	ldr	r2, [r7, #20]
 8003824:	621a      	str	r2, [r3, #32]
}
 8003826:	bf00      	nop
 8003828:	371c      	adds	r7, #28
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003832:	b480      	push	{r7}
 8003834:	b087      	sub	sp, #28
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	f023 0210 	bic.w	r2, r3, #16
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800385c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	031b      	lsls	r3, r3, #12
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800386e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	011b      	lsls	r3, r3, #4
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003892:	b480      	push	{r7}
 8003894:	b085      	sub	sp, #20
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f043 0307 	orr.w	r3, r3, #7
 80038b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	609a      	str	r2, [r3, #8]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	021a      	lsls	r2, r3, #8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	431a      	orrs	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	609a      	str	r2, [r3, #8]
}
 8003900:	bf00      	nop
 8003902:	371c      	adds	r7, #28
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr

0800390c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800390c:	b480      	push	{r7}
 800390e:	b087      	sub	sp, #28
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 031f 	and.w	r3, r3, #31
 800391e:	2201      	movs	r2, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6a1a      	ldr	r2, [r3, #32]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	43db      	mvns	r3, r3
 800392e:	401a      	ands	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a1a      	ldr	r2, [r3, #32]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f003 031f 	and.w	r3, r3, #31
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	fa01 f303 	lsl.w	r3, r1, r3
 8003944:	431a      	orrs	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	621a      	str	r2, [r3, #32]
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
	...

08003958 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d101      	bne.n	8003970 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800396c:	2302      	movs	r3, #2
 800396e:	e074      	b.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a34      	ldr	r2, [pc, #208]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d009      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a33      	ldr	r2, [pc, #204]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a31      	ldr	r2, [pc, #196]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d108      	bne.n	80039c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039b4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80039c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a21      	ldr	r2, [pc, #132]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d022      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f0:	d01d      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a1f      	ldr	r2, [pc, #124]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d018      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d013      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a1c      	ldr	r2, [pc, #112]	; (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d00e      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d009      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a18      	ldr	r2, [pc, #96]	; (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d004      	beq.n	8003a2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a11      	ldr	r2, [pc, #68]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10c      	bne.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	68ba      	ldr	r2, [r7, #8]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a58:	2300      	movs	r3, #0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	40012c00 	.word	0x40012c00
 8003a6c:	40013400 	.word	0x40013400
 8003a70:	40015000 	.word	0x40015000
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40014000 	.word	0x40014000

08003a84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	e078      	b.n	8003b92 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b06:	4313      	orrs	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	4313      	orrs	r3, r2
 8003b18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d009      	beq.n	8003b46 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d004      	beq.n	8003b46 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a19      	ldr	r2, [pc, #100]	; (8003ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d11c      	bne.n	8003b80 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	051b      	lsls	r3, r3, #20
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40013400 	.word	0x40013400
 8003ba8:	40015000 	.word	0x40015000

08003bac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e042      	b.n	8003cd0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fc fefb 	bl	8000a58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2224      	movs	r2, #36	; 0x24
 8003c66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0201 	bic.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 fb24 	bl	80042d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f825 	bl	8003cd8 <UART_SetConfig>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d101      	bne.n	8003c98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e01b      	b.n	8003cd0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f042 0201 	orr.w	r2, r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fba3 	bl	8004414 <UART_CheckIdleState>
 8003cce:	4603      	mov	r3, r0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cdc:	b08c      	sub	sp, #48	; 0x30
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	431a      	orrs	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	4baa      	ldr	r3, [pc, #680]	; (8003fb0 <UART_SetConfig+0x2d8>)
 8003d08:	4013      	ands	r3, r2
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	6812      	ldr	r2, [r2, #0]
 8003d0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a9f      	ldr	r2, [pc, #636]	; (8003fb4 <UART_SetConfig+0x2dc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d40:	4313      	orrs	r3, r2
 8003d42:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d4e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	6812      	ldr	r2, [r2, #0]
 8003d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d58:	430b      	orrs	r3, r1
 8003d5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	f023 010f 	bic.w	r1, r3, #15
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a90      	ldr	r2, [pc, #576]	; (8003fb8 <UART_SetConfig+0x2e0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d125      	bne.n	8003dc8 <UART_SetConfig+0xf0>
 8003d7c:	4b8f      	ldr	r3, [pc, #572]	; (8003fbc <UART_SetConfig+0x2e4>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d81a      	bhi.n	8003dc0 <UART_SetConfig+0xe8>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <UART_SetConfig+0xb8>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003db1 	.word	0x08003db1
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003db9 	.word	0x08003db9
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da6:	e116      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003da8:	2302      	movs	r3, #2
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e112      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003db0:	2304      	movs	r3, #4
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e10e      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003db8:	2308      	movs	r3, #8
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dbe:	e10a      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc6:	e106      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7c      	ldr	r2, [pc, #496]	; (8003fc0 <UART_SetConfig+0x2e8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d138      	bne.n	8003e44 <UART_SetConfig+0x16c>
 8003dd2:	4b7a      	ldr	r3, [pc, #488]	; (8003fbc <UART_SetConfig+0x2e4>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	f003 030c 	and.w	r3, r3, #12
 8003ddc:	2b0c      	cmp	r3, #12
 8003dde:	d82d      	bhi.n	8003e3c <UART_SetConfig+0x164>
 8003de0:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0x110>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e1d 	.word	0x08003e1d
 8003dec:	08003e3d 	.word	0x08003e3d
 8003df0:	08003e3d 	.word	0x08003e3d
 8003df4:	08003e3d 	.word	0x08003e3d
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003e3d 	.word	0x08003e3d
 8003e00:	08003e3d 	.word	0x08003e3d
 8003e04:	08003e3d 	.word	0x08003e3d
 8003e08:	08003e25 	.word	0x08003e25
 8003e0c:	08003e3d 	.word	0x08003e3d
 8003e10:	08003e3d 	.word	0x08003e3d
 8003e14:	08003e3d 	.word	0x08003e3d
 8003e18:	08003e35 	.word	0x08003e35
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e22:	e0d8      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e24:	2302      	movs	r3, #2
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e2a:	e0d4      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e32:	e0d0      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e34:	2308      	movs	r3, #8
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e3a:	e0cc      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e3c:	2310      	movs	r3, #16
 8003e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e42:	e0c8      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a5e      	ldr	r2, [pc, #376]	; (8003fc4 <UART_SetConfig+0x2ec>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d125      	bne.n	8003e9a <UART_SetConfig+0x1c2>
 8003e4e:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <UART_SetConfig+0x2e4>)
 8003e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e58:	2b30      	cmp	r3, #48	; 0x30
 8003e5a:	d016      	beq.n	8003e8a <UART_SetConfig+0x1b2>
 8003e5c:	2b30      	cmp	r3, #48	; 0x30
 8003e5e:	d818      	bhi.n	8003e92 <UART_SetConfig+0x1ba>
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d00a      	beq.n	8003e7a <UART_SetConfig+0x1a2>
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d814      	bhi.n	8003e92 <UART_SetConfig+0x1ba>
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <UART_SetConfig+0x19a>
 8003e6c:	2b10      	cmp	r3, #16
 8003e6e:	d008      	beq.n	8003e82 <UART_SetConfig+0x1aa>
 8003e70:	e00f      	b.n	8003e92 <UART_SetConfig+0x1ba>
 8003e72:	2300      	movs	r3, #0
 8003e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e78:	e0ad      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e80:	e0a9      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e82:	2304      	movs	r3, #4
 8003e84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e88:	e0a5      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e90:	e0a1      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e92:	2310      	movs	r3, #16
 8003e94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e98:	e09d      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a4a      	ldr	r2, [pc, #296]	; (8003fc8 <UART_SetConfig+0x2f0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d125      	bne.n	8003ef0 <UART_SetConfig+0x218>
 8003ea4:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <UART_SetConfig+0x2e4>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eae:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb0:	d016      	beq.n	8003ee0 <UART_SetConfig+0x208>
 8003eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb4:	d818      	bhi.n	8003ee8 <UART_SetConfig+0x210>
 8003eb6:	2b80      	cmp	r3, #128	; 0x80
 8003eb8:	d00a      	beq.n	8003ed0 <UART_SetConfig+0x1f8>
 8003eba:	2b80      	cmp	r3, #128	; 0x80
 8003ebc:	d814      	bhi.n	8003ee8 <UART_SetConfig+0x210>
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <UART_SetConfig+0x1f0>
 8003ec2:	2b40      	cmp	r3, #64	; 0x40
 8003ec4:	d008      	beq.n	8003ed8 <UART_SetConfig+0x200>
 8003ec6:	e00f      	b.n	8003ee8 <UART_SetConfig+0x210>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ece:	e082      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed6:	e07e      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003ed8:	2304      	movs	r3, #4
 8003eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ede:	e07a      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ee6:	e076      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003ee8:	2310      	movs	r3, #16
 8003eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eee:	e072      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a35      	ldr	r2, [pc, #212]	; (8003fcc <UART_SetConfig+0x2f4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d12a      	bne.n	8003f50 <UART_SetConfig+0x278>
 8003efa:	4b30      	ldr	r3, [pc, #192]	; (8003fbc <UART_SetConfig+0x2e4>)
 8003efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f08:	d01a      	beq.n	8003f40 <UART_SetConfig+0x268>
 8003f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f0e:	d81b      	bhi.n	8003f48 <UART_SetConfig+0x270>
 8003f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f14:	d00c      	beq.n	8003f30 <UART_SetConfig+0x258>
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1a:	d815      	bhi.n	8003f48 <UART_SetConfig+0x270>
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <UART_SetConfig+0x250>
 8003f20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f24:	d008      	beq.n	8003f38 <UART_SetConfig+0x260>
 8003f26:	e00f      	b.n	8003f48 <UART_SetConfig+0x270>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f2e:	e052      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003f30:	2302      	movs	r3, #2
 8003f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f36:	e04e      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003f38:	2304      	movs	r3, #4
 8003f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3e:	e04a      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003f40:	2308      	movs	r3, #8
 8003f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f46:	e046      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003f48:	2310      	movs	r3, #16
 8003f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f4e:	e042      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <UART_SetConfig+0x2dc>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d13a      	bne.n	8003fd0 <UART_SetConfig+0x2f8>
 8003f5a:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <UART_SetConfig+0x2e4>)
 8003f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f68:	d01a      	beq.n	8003fa0 <UART_SetConfig+0x2c8>
 8003f6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f6e:	d81b      	bhi.n	8003fa8 <UART_SetConfig+0x2d0>
 8003f70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f74:	d00c      	beq.n	8003f90 <UART_SetConfig+0x2b8>
 8003f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f7a:	d815      	bhi.n	8003fa8 <UART_SetConfig+0x2d0>
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d003      	beq.n	8003f88 <UART_SetConfig+0x2b0>
 8003f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f84:	d008      	beq.n	8003f98 <UART_SetConfig+0x2c0>
 8003f86:	e00f      	b.n	8003fa8 <UART_SetConfig+0x2d0>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f8e:	e022      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003f90:	2302      	movs	r3, #2
 8003f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f96:	e01e      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003f98:	2304      	movs	r3, #4
 8003f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f9e:	e01a      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003fa0:	2308      	movs	r3, #8
 8003fa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fa6:	e016      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fae:	e012      	b.n	8003fd6 <UART_SetConfig+0x2fe>
 8003fb0:	cfff69f3 	.word	0xcfff69f3
 8003fb4:	40008000 	.word	0x40008000
 8003fb8:	40013800 	.word	0x40013800
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	40004400 	.word	0x40004400
 8003fc4:	40004800 	.word	0x40004800
 8003fc8:	40004c00 	.word	0x40004c00
 8003fcc:	40005000 	.word	0x40005000
 8003fd0:	2310      	movs	r3, #16
 8003fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4aae      	ldr	r2, [pc, #696]	; (8004294 <UART_SetConfig+0x5bc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f040 8097 	bne.w	8004110 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fe2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d823      	bhi.n	8004032 <UART_SetConfig+0x35a>
 8003fea:	a201      	add	r2, pc, #4	; (adr r2, 8003ff0 <UART_SetConfig+0x318>)
 8003fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff0:	08004015 	.word	0x08004015
 8003ff4:	08004033 	.word	0x08004033
 8003ff8:	0800401d 	.word	0x0800401d
 8003ffc:	08004033 	.word	0x08004033
 8004000:	08004023 	.word	0x08004023
 8004004:	08004033 	.word	0x08004033
 8004008:	08004033 	.word	0x08004033
 800400c:	08004033 	.word	0x08004033
 8004010:	0800402b 	.word	0x0800402b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004014:	f7fd ff28 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8004018:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800401a:	e010      	b.n	800403e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800401c:	4b9e      	ldr	r3, [pc, #632]	; (8004298 <UART_SetConfig+0x5c0>)
 800401e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004020:	e00d      	b.n	800403e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004022:	f7fd feb3 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004028:	e009      	b.n	800403e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004030:	e005      	b.n	800403e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800403c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 8130 	beq.w	80042a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	4a94      	ldr	r2, [pc, #592]	; (800429c <UART_SetConfig+0x5c4>)
 800404c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004050:	461a      	mov	r2, r3
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	fbb3 f3f2 	udiv	r3, r3, r2
 8004058:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4613      	mov	r3, r2
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	4413      	add	r3, r2
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	429a      	cmp	r2, r3
 8004068:	d305      	bcc.n	8004076 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	429a      	cmp	r2, r3
 8004074:	d903      	bls.n	800407e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800407c:	e113      	b.n	80042a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	2200      	movs	r2, #0
 8004082:	60bb      	str	r3, [r7, #8]
 8004084:	60fa      	str	r2, [r7, #12]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	4a84      	ldr	r2, [pc, #528]	; (800429c <UART_SetConfig+0x5c4>)
 800408c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004090:	b29b      	uxth	r3, r3
 8004092:	2200      	movs	r2, #0
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800409c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040a0:	f7fc f8be 	bl	8000220 <__aeabi_uldivmod>
 80040a4:	4602      	mov	r2, r0
 80040a6:	460b      	mov	r3, r1
 80040a8:	4610      	mov	r0, r2
 80040aa:	4619      	mov	r1, r3
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	020b      	lsls	r3, r1, #8
 80040b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80040ba:	0202      	lsls	r2, r0, #8
 80040bc:	6979      	ldr	r1, [r7, #20]
 80040be:	6849      	ldr	r1, [r1, #4]
 80040c0:	0849      	lsrs	r1, r1, #1
 80040c2:	2000      	movs	r0, #0
 80040c4:	460c      	mov	r4, r1
 80040c6:	4605      	mov	r5, r0
 80040c8:	eb12 0804 	adds.w	r8, r2, r4
 80040cc:	eb43 0905 	adc.w	r9, r3, r5
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	469a      	mov	sl, r3
 80040d8:	4693      	mov	fp, r2
 80040da:	4652      	mov	r2, sl
 80040dc:	465b      	mov	r3, fp
 80040de:	4640      	mov	r0, r8
 80040e0:	4649      	mov	r1, r9
 80040e2:	f7fc f89d 	bl	8000220 <__aeabi_uldivmod>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4613      	mov	r3, r2
 80040ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f4:	d308      	bcc.n	8004108 <UART_SetConfig+0x430>
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fc:	d204      	bcs.n	8004108 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a3a      	ldr	r2, [r7, #32]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	e0ce      	b.n	80042a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800410e:	e0ca      	b.n	80042a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004118:	d166      	bne.n	80041e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800411a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800411e:	2b08      	cmp	r3, #8
 8004120:	d827      	bhi.n	8004172 <UART_SetConfig+0x49a>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0x450>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	0800414d 	.word	0x0800414d
 800412c:	08004155 	.word	0x08004155
 8004130:	0800415d 	.word	0x0800415d
 8004134:	08004173 	.word	0x08004173
 8004138:	08004163 	.word	0x08004163
 800413c:	08004173 	.word	0x08004173
 8004140:	08004173 	.word	0x08004173
 8004144:	08004173 	.word	0x08004173
 8004148:	0800416b 	.word	0x0800416b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800414c:	f7fd fe8c 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8004150:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004152:	e014      	b.n	800417e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004154:	f7fd fe9e 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8004158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800415a:	e010      	b.n	800417e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800415c:	4b4e      	ldr	r3, [pc, #312]	; (8004298 <UART_SetConfig+0x5c0>)
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004160:	e00d      	b.n	800417e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004162:	f7fd fe13 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8004166:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004168:	e009      	b.n	800417e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004170:	e005      	b.n	800417e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800417c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8090 	beq.w	80042a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	4a44      	ldr	r2, [pc, #272]	; (800429c <UART_SetConfig+0x5c4>)
 800418c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004190:	461a      	mov	r2, r3
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	fbb3 f3f2 	udiv	r3, r3, r2
 8004198:	005a      	lsls	r2, r3, #1
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	441a      	add	r2, r3
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2b0f      	cmp	r3, #15
 80041b0:	d916      	bls.n	80041e0 <UART_SetConfig+0x508>
 80041b2:	6a3b      	ldr	r3, [r7, #32]
 80041b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041b8:	d212      	bcs.n	80041e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	b29b      	uxth	r3, r3
 80041be:	f023 030f 	bic.w	r3, r3, #15
 80041c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	085b      	lsrs	r3, r3, #1
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	f003 0307 	and.w	r3, r3, #7
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	8bfb      	ldrh	r3, [r7, #30]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	8bfa      	ldrh	r2, [r7, #30]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	e062      	b.n	80042a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041e6:	e05e      	b.n	80042a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d828      	bhi.n	8004242 <UART_SetConfig+0x56a>
 80041f0:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <UART_SetConfig+0x520>)
 80041f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f6:	bf00      	nop
 80041f8:	0800421d 	.word	0x0800421d
 80041fc:	08004225 	.word	0x08004225
 8004200:	0800422d 	.word	0x0800422d
 8004204:	08004243 	.word	0x08004243
 8004208:	08004233 	.word	0x08004233
 800420c:	08004243 	.word	0x08004243
 8004210:	08004243 	.word	0x08004243
 8004214:	08004243 	.word	0x08004243
 8004218:	0800423b 	.word	0x0800423b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800421c:	f7fd fe24 	bl	8001e68 <HAL_RCC_GetPCLK1Freq>
 8004220:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004222:	e014      	b.n	800424e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004224:	f7fd fe36 	bl	8001e94 <HAL_RCC_GetPCLK2Freq>
 8004228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800422a:	e010      	b.n	800424e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800422c:	4b1a      	ldr	r3, [pc, #104]	; (8004298 <UART_SetConfig+0x5c0>)
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004230:	e00d      	b.n	800424e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004232:	f7fd fdab 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8004236:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004238:	e009      	b.n	800424e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004240:	e005      	b.n	800424e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800424c:	bf00      	nop
    }

    if (pclk != 0U)
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	2b00      	cmp	r3, #0
 8004252:	d028      	beq.n	80042a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004258:	4a10      	ldr	r2, [pc, #64]	; (800429c <UART_SetConfig+0x5c4>)
 800425a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800425e:	461a      	mov	r2, r3
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	fbb3 f2f2 	udiv	r2, r3, r2
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	441a      	add	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	2b0f      	cmp	r3, #15
 800427c:	d910      	bls.n	80042a0 <UART_SetConfig+0x5c8>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004284:	d20c      	bcs.n	80042a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	b29a      	uxth	r2, r3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60da      	str	r2, [r3, #12]
 8004290:	e009      	b.n	80042a6 <UART_SetConfig+0x5ce>
 8004292:	bf00      	nop
 8004294:	40008000 	.word	0x40008000
 8004298:	00f42400 	.word	0x00f42400
 800429c:	08004d94 	.word	0x08004d94
      }
      else
      {
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80042c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3730      	adds	r7, #48	; 0x30
 80042ca:	46bd      	mov	sp, r7
 80042cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00a      	beq.n	80042fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	d00a      	beq.n	800431c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00a      	beq.n	800433e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	430a      	orrs	r2, r1
 800433c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00a      	beq.n	8004360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	430a      	orrs	r2, r1
 800435e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	430a      	orrs	r2, r1
 8004380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004386:	f003 0320 	and.w	r3, r3, #32
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01a      	beq.n	80043e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043ce:	d10a      	bne.n	80043e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	430a      	orrs	r2, r1
 8004406:	605a      	str	r2, [r3, #4]
  }
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b098      	sub	sp, #96	; 0x60
 8004418:	af02      	add	r7, sp, #8
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004424:	f7fc fd06 	bl	8000e34 <HAL_GetTick>
 8004428:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b08      	cmp	r3, #8
 8004436:	d12f      	bne.n	8004498 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004440:	2200      	movs	r2, #0
 8004442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f88e 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d022      	beq.n	8004498 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	e853 3f00 	ldrex	r3, [r3]
 800445e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004466:	653b      	str	r3, [r7, #80]	; 0x50
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004470:	647b      	str	r3, [r7, #68]	; 0x44
 8004472:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004474:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004478:	e841 2300 	strex	r3, r2, [r1]
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800447e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e6      	bne.n	8004452 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2220      	movs	r2, #32
 8004488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e063      	b.n	8004560 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d149      	bne.n	800453a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ae:	2200      	movs	r2, #0
 80044b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f857 	bl	8004568 <UART_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d03c      	beq.n	800453a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	e853 3f00 	ldrex	r3, [r3]
 80044cc:	623b      	str	r3, [r7, #32]
   return(result);
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	461a      	mov	r2, r3
 80044dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044de:	633b      	str	r3, [r7, #48]	; 0x30
 80044e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e6:	e841 2300 	strex	r3, r2, [r1]
 80044ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1e6      	bne.n	80044c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3308      	adds	r3, #8
 80044f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	60fb      	str	r3, [r7, #12]
   return(result);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f023 0301 	bic.w	r3, r3, #1
 8004508:	64bb      	str	r3, [r7, #72]	; 0x48
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004512:	61fa      	str	r2, [r7, #28]
 8004514:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	69b9      	ldr	r1, [r7, #24]
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	617b      	str	r3, [r7, #20]
   return(result);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e5      	bne.n	80044f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2220      	movs	r2, #32
 800452a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e012      	b.n	8004560 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3758      	adds	r7, #88	; 0x58
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	4613      	mov	r3, r2
 8004576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004578:	e04f      	b.n	800461a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d04b      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004582:	f7fc fc57 	bl	8000e34 <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	429a      	cmp	r2, r3
 8004590:	d302      	bcc.n	8004598 <UART_WaitOnFlagUntilTimeout+0x30>
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e04e      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d037      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0xb2>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b80      	cmp	r3, #128	; 0x80
 80045ae:	d034      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0xb2>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b40      	cmp	r3, #64	; 0x40
 80045b4:	d031      	beq.n	800461a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69db      	ldr	r3, [r3, #28]
 80045bc:	f003 0308 	and.w	r3, r3, #8
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d110      	bne.n	80045e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2208      	movs	r2, #8
 80045ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f000 f838 	bl	8004642 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2208      	movs	r2, #8
 80045d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e029      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045f4:	d111      	bne.n	800461a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 f81e 	bl	8004642 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e00f      	b.n	800463a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	4013      	ands	r3, r2
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	429a      	cmp	r2, r3
 8004628:	bf0c      	ite	eq
 800462a:	2301      	moveq	r3, #1
 800462c:	2300      	movne	r3, #0
 800462e:	b2db      	uxtb	r3, r3
 8004630:	461a      	mov	r2, r3
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	429a      	cmp	r2, r3
 8004636:	d0a0      	beq.n	800457a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}

08004642 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004642:	b480      	push	{r7}
 8004644:	b095      	sub	sp, #84	; 0x54
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004652:	e853 3f00 	ldrex	r3, [r3]
 8004656:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800465e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	461a      	mov	r2, r3
 8004666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004668:	643b      	str	r3, [r7, #64]	; 0x40
 800466a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800466c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800466e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004670:	e841 2300 	strex	r3, r2, [r1]
 8004674:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e6      	bne.n	800464a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3308      	adds	r3, #8
 8004682:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	e853 3f00 	ldrex	r3, [r3]
 800468a:	61fb      	str	r3, [r7, #28]
   return(result);
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	64bb      	str	r3, [r7, #72]	; 0x48
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	3308      	adds	r3, #8
 800469e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e3      	bne.n	800467c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d118      	bne.n	80046ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 0310 	bic.w	r3, r3, #16
 80046d0:	647b      	str	r3, [r7, #68]	; 0x44
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046da:	61bb      	str	r3, [r7, #24]
 80046dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6979      	ldr	r1, [r7, #20]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	613b      	str	r3, [r7, #16]
   return(result);
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e6      	bne.n	80046bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004702:	bf00      	nop
 8004704:	3754      	adds	r7, #84	; 0x54
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800470e:	b480      	push	{r7}
 8004710:	b085      	sub	sp, #20
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_UARTEx_DisableFifoMode+0x16>
 8004720:	2302      	movs	r3, #2
 8004722:	e027      	b.n	8004774 <HAL_UARTEx_DisableFifoMode+0x66>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2224      	movs	r2, #36	; 0x24
 8004730:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004752:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3714      	adds	r7, #20
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004794:	2302      	movs	r3, #2
 8004796:	e02d      	b.n	80047f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2224      	movs	r2, #36	; 0x24
 80047a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f84f 	bl	8004878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004810:	2302      	movs	r3, #2
 8004812:	e02d      	b.n	8004870 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2224      	movs	r2, #36	; 0x24
 8004820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f811 	bl	8004878 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	4618      	mov	r0, r3
 8004872:	3710      	adds	r7, #16
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004884:	2b00      	cmp	r3, #0
 8004886:	d108      	bne.n	800489a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004898:	e031      	b.n	80048fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800489a:	2308      	movs	r3, #8
 800489c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800489e:	2308      	movs	r3, #8
 80048a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	0e5b      	lsrs	r3, r3, #25
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	0f5b      	lsrs	r3, r3, #29
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048c2:	7bbb      	ldrb	r3, [r7, #14]
 80048c4:	7b3a      	ldrb	r2, [r7, #12]
 80048c6:	4911      	ldr	r1, [pc, #68]	; (800490c <UARTEx_SetNbDataToProcess+0x94>)
 80048c8:	5c8a      	ldrb	r2, [r1, r2]
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048ce:	7b3a      	ldrb	r2, [r7, #12]
 80048d0:	490f      	ldr	r1, [pc, #60]	; (8004910 <UARTEx_SetNbDataToProcess+0x98>)
 80048d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80048d8:	b29a      	uxth	r2, r3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	7b7a      	ldrb	r2, [r7, #13]
 80048e4:	4909      	ldr	r1, [pc, #36]	; (800490c <UARTEx_SetNbDataToProcess+0x94>)
 80048e6:	5c8a      	ldrb	r2, [r1, r2]
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048ec:	7b7a      	ldrb	r2, [r7, #13]
 80048ee:	4908      	ldr	r1, [pc, #32]	; (8004910 <UARTEx_SetNbDataToProcess+0x98>)
 80048f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048fe:	bf00      	nop
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	08004dac 	.word	0x08004dac
 8004910:	08004db4 	.word	0x08004db4

08004914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08a      	sub	sp, #40	; 0x28
 8004918:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800491a:	2300      	movs	r3, #0
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800491e:	4b7d      	ldr	r3, [pc, #500]	; (8004b14 <xTaskIncrementTick+0x200>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f040 80ec 	bne.w	8004b00 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004928:	4b7b      	ldr	r3, [pc, #492]	; (8004b18 <xTaskIncrementTick+0x204>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3301      	adds	r3, #1
 800492e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004930:	4a79      	ldr	r2, [pc, #484]	; (8004b18 <xTaskIncrementTick+0x204>)
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d120      	bne.n	800497e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800493c:	4b77      	ldr	r3, [pc, #476]	; (8004b1c <xTaskIncrementTick+0x208>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8004958:	bf00      	nop
 800495a:	e7fe      	b.n	800495a <xTaskIncrementTick+0x46>
 800495c:	4b6f      	ldr	r3, [pc, #444]	; (8004b1c <xTaskIncrementTick+0x208>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	61fb      	str	r3, [r7, #28]
 8004962:	4b6f      	ldr	r3, [pc, #444]	; (8004b20 <xTaskIncrementTick+0x20c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a6d      	ldr	r2, [pc, #436]	; (8004b1c <xTaskIncrementTick+0x208>)
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4a6d      	ldr	r2, [pc, #436]	; (8004b20 <xTaskIncrementTick+0x20c>)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b6c      	ldr	r3, [pc, #432]	; (8004b24 <xTaskIncrementTick+0x210>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3301      	adds	r3, #1
 8004976:	4a6b      	ldr	r2, [pc, #428]	; (8004b24 <xTaskIncrementTick+0x210>)
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	f000 f93d 	bl	8004bf8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800497e:	4b6a      	ldr	r3, [pc, #424]	; (8004b28 <xTaskIncrementTick+0x214>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	6a3a      	ldr	r2, [r7, #32]
 8004984:	429a      	cmp	r2, r3
 8004986:	f0c0 80a6 	bcc.w	8004ad6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800498a:	4b64      	ldr	r3, [pc, #400]	; (8004b1c <xTaskIncrementTick+0x208>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d104      	bne.n	800499e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004994:	4b64      	ldr	r3, [pc, #400]	; (8004b28 <xTaskIncrementTick+0x214>)
 8004996:	f04f 32ff 	mov.w	r2, #4294967295
 800499a:	601a      	str	r2, [r3, #0]
                    break;
 800499c:	e09b      	b.n	8004ad6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800499e:	4b5f      	ldr	r3, [pc, #380]	; (8004b1c <xTaskIncrementTick+0x208>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80049ae:	6a3a      	ldr	r2, [r7, #32]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d203      	bcs.n	80049be <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80049b6:	4a5c      	ldr	r2, [pc, #368]	; (8004b28 <xTaskIncrementTick+0x214>)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80049bc:	e08b      	b.n	8004ad6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	68d2      	ldr	r2, [r2, #12]
 80049cc:	609a      	str	r2, [r3, #8]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	6892      	ldr	r2, [r2, #8]
 80049d6:	605a      	str	r2, [r3, #4]
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	3304      	adds	r3, #4
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d103      	bne.n	80049ec <xTaskIncrementTick+0xd8>
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	605a      	str	r2, [r3, #4]
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2200      	movs	r2, #0
 80049f0:	615a      	str	r2, [r3, #20]
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	1e5a      	subs	r2, r3, #1
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01e      	beq.n	8004a42 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	69db      	ldr	r3, [r3, #28]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	6a12      	ldr	r2, [r2, #32]
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	69d2      	ldr	r2, [r2, #28]
 8004a1c:	605a      	str	r2, [r3, #4]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	3318      	adds	r3, #24
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d103      	bne.n	8004a32 <xTaskIncrementTick+0x11e>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	6a1a      	ldr	r2, [r3, #32]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	2200      	movs	r2, #0
 8004a36:	629a      	str	r2, [r3, #40]	; 0x28
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	1e5a      	subs	r2, r3, #1
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	2201      	movs	r2, #1
 8004a48:	409a      	lsls	r2, r3
 8004a4a:	4b38      	ldr	r3, [pc, #224]	; (8004b2c <xTaskIncrementTick+0x218>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	4a36      	ldr	r2, [pc, #216]	; (8004b2c <xTaskIncrementTick+0x218>)
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a58:	4935      	ldr	r1, [pc, #212]	; (8004b30 <xTaskIncrementTick+0x21c>)
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	440b      	add	r3, r1
 8004a64:	3304      	adds	r3, #4
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	60da      	str	r2, [r3, #12]
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	3204      	adds	r2, #4
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	1d1a      	adds	r2, r3, #4
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	609a      	str	r2, [r3, #8]
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <xTaskIncrementTick+0x21c>)
 8004a98:	441a      	add	r2, r3
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	615a      	str	r2, [r3, #20]
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	4923      	ldr	r1, [pc, #140]	; (8004b30 <xTaskIncrementTick+0x21c>)
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	1c59      	adds	r1, r3, #1
 8004ab2:	481f      	ldr	r0, [pc, #124]	; (8004b30 <xTaskIncrementTick+0x21c>)
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4403      	add	r3, r0
 8004abe:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac4:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <xTaskIncrementTick+0x220>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aca:	429a      	cmp	r2, r3
 8004acc:	f67f af5d 	bls.w	800498a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ad4:	e759      	b.n	800498a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ad6:	4b17      	ldr	r3, [pc, #92]	; (8004b34 <xTaskIncrementTick+0x220>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	4914      	ldr	r1, [pc, #80]	; (8004b30 <xTaskIncrementTick+0x21c>)
 8004ade:	4613      	mov	r3, r2
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	4413      	add	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	440b      	add	r3, r1
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d901      	bls.n	8004af2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8004aee:	2301      	movs	r3, #1
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <xTaskIncrementTick+0x224>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d007      	beq.n	8004b0a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8004afa:	2301      	movs	r3, #1
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
 8004afe:	e004      	b.n	8004b0a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <xTaskIncrementTick+0x228>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <xTaskIncrementTick+0x228>)
 8004b08:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	; 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20000274 	.word	0x20000274
 8004b18:	2000025c 	.word	0x2000025c
 8004b1c:	20000254 	.word	0x20000254
 8004b20:	20000258 	.word	0x20000258
 8004b24:	2000026c 	.word	0x2000026c
 8004b28:	20000270 	.word	0x20000270
 8004b2c:	20000260 	.word	0x20000260
 8004b30:	200001f0 	.word	0x200001f0
 8004b34:	200001ec 	.word	0x200001ec
 8004b38:	20000268 	.word	0x20000268
 8004b3c:	20000264 	.word	0x20000264

08004b40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b087      	sub	sp, #28
 8004b44:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b46:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <vTaskSwitchContext+0xa4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <vTaskSwitchContext+0xa8>)
 8004b50:	2201      	movs	r2, #1
 8004b52:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8004b54:	e03f      	b.n	8004bd6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004b56:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <vTaskSwitchContext+0xa8>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b5c:	4b23      	ldr	r3, [pc, #140]	; (8004bec <vTaskSwitchContext+0xac>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	fab3 f383 	clz	r3, r3
 8004b68:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004b6a:	7afb      	ldrb	r3, [r7, #11]
 8004b6c:	f1c3 031f 	rsb	r3, r3, #31
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	491f      	ldr	r1, [pc, #124]	; (8004bf0 <vTaskSwitchContext+0xb0>)
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	4613      	mov	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	440b      	add	r3, r1
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	607b      	str	r3, [r7, #4]
    }
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <vTaskSwitchContext+0x5a>
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4613      	mov	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4413      	add	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <vTaskSwitchContext+0xb0>)
 8004ba8:	4413      	add	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	605a      	str	r2, [r3, #4]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d104      	bne.n	8004bcc <vTaskSwitchContext+0x8c>
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	605a      	str	r2, [r3, #4]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	4a08      	ldr	r2, [pc, #32]	; (8004bf4 <vTaskSwitchContext+0xb4>)
 8004bd4:	6013      	str	r3, [r2, #0]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000274 	.word	0x20000274
 8004be8:	20000268 	.word	0x20000268
 8004bec:	20000260 	.word	0x20000260
 8004bf0:	200001f0 	.word	0x200001f0
 8004bf4:	200001ec 	.word	0x200001ec

08004bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bfc:	4b0a      	ldr	r3, [pc, #40]	; (8004c28 <prvResetNextTaskUnblockTime+0x30>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d104      	bne.n	8004c10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004c06:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <prvResetNextTaskUnblockTime+0x34>)
 8004c08:	f04f 32ff 	mov.w	r2, #4294967295
 8004c0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004c0e:	e005      	b.n	8004c1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <prvResetNextTaskUnblockTime+0x30>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a04      	ldr	r2, [pc, #16]	; (8004c2c <prvResetNextTaskUnblockTime+0x34>)
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	20000254 	.word	0x20000254
 8004c2c:	20000270 	.word	0x20000270

08004c30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <pxCurrentTCBConst2>)
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	6808      	ldr	r0, [r1, #0]
 8004c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3a:	f380 8809 	msr	PSP, r0
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8811 	msr	BASEPRI, r0
 8004c4a:	4770      	bx	lr
 8004c4c:	f3af 8000 	nop.w

08004c50 <pxCurrentTCBConst2>:
 8004c50:	200001ec 	.word	0x200001ec
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
	...

08004c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c60:	f3ef 8009 	mrs	r0, PSP
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <pxCurrentTCBConst>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	f01e 0f10 	tst.w	lr, #16
 8004c70:	bf08      	it	eq
 8004c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	6010      	str	r0, [r2, #0]
 8004c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c84:	f380 8811 	msr	BASEPRI, r0
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f7ff ff56 	bl	8004b40 <vTaskSwitchContext>
 8004c94:	f04f 0000 	mov.w	r0, #0
 8004c98:	f380 8811 	msr	BASEPRI, r0
 8004c9c:	bc09      	pop	{r0, r3}
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	6808      	ldr	r0, [r1, #0]
 8004ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca6:	f01e 0f10 	tst.w	lr, #16
 8004caa:	bf08      	it	eq
 8004cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cb0:	f380 8809 	msr	PSP, r0
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w

08004cc0 <pxCurrentTCBConst>:
 8004cc0:	200001ec 	.word	0x200001ec
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop

08004cc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
        __asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	607b      	str	r3, [r7, #4]
    }
 8004ce0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004ce2:	f7ff fe17 	bl	8004914 <xTaskIncrementTick>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <SysTick_Handler+0x40>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004cfe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <memset>:
 8004d0c:	4402      	add	r2, r0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d100      	bne.n	8004d16 <memset+0xa>
 8004d14:	4770      	bx	lr
 8004d16:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1a:	e7f9      	b.n	8004d10 <memset+0x4>

08004d1c <__libc_init_array>:
 8004d1c:	b570      	push	{r4, r5, r6, lr}
 8004d1e:	4d0d      	ldr	r5, [pc, #52]	; (8004d54 <__libc_init_array+0x38>)
 8004d20:	4c0d      	ldr	r4, [pc, #52]	; (8004d58 <__libc_init_array+0x3c>)
 8004d22:	1b64      	subs	r4, r4, r5
 8004d24:	10a4      	asrs	r4, r4, #2
 8004d26:	2600      	movs	r6, #0
 8004d28:	42a6      	cmp	r6, r4
 8004d2a:	d109      	bne.n	8004d40 <__libc_init_array+0x24>
 8004d2c:	4d0b      	ldr	r5, [pc, #44]	; (8004d5c <__libc_init_array+0x40>)
 8004d2e:	4c0c      	ldr	r4, [pc, #48]	; (8004d60 <__libc_init_array+0x44>)
 8004d30:	f000 f818 	bl	8004d64 <_init>
 8004d34:	1b64      	subs	r4, r4, r5
 8004d36:	10a4      	asrs	r4, r4, #2
 8004d38:	2600      	movs	r6, #0
 8004d3a:	42a6      	cmp	r6, r4
 8004d3c:	d105      	bne.n	8004d4a <__libc_init_array+0x2e>
 8004d3e:	bd70      	pop	{r4, r5, r6, pc}
 8004d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d44:	4798      	blx	r3
 8004d46:	3601      	adds	r6, #1
 8004d48:	e7ee      	b.n	8004d28 <__libc_init_array+0xc>
 8004d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4e:	4798      	blx	r3
 8004d50:	3601      	adds	r6, #1
 8004d52:	e7f2      	b.n	8004d3a <__libc_init_array+0x1e>
 8004d54:	08004dc4 	.word	0x08004dc4
 8004d58:	08004dc4 	.word	0x08004dc4
 8004d5c:	08004dc4 	.word	0x08004dc4
 8004d60:	08004dc8 	.word	0x08004dc8

08004d64 <_init>:
 8004d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d66:	bf00      	nop
 8004d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6a:	bc08      	pop	{r3}
 8004d6c:	469e      	mov	lr, r3
 8004d6e:	4770      	bx	lr

08004d70 <_fini>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr
