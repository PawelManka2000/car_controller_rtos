
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1e8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800d3c8  0800d3c8  0000e3c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d934  0800d934  0000f1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d934  0800d934  0000e934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d93c  0800d93c  0000f1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d93c  0800d93c  0000e93c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d940  0800d940  0000e940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800d944  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200001d0  0800db14  0000f1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800db14  0000f81c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d046  00000000  00000000  0000f200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004240  00000000  00000000  0002c246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e8  00000000  00000000  00030488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010e4  00000000  00000000  00031a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029704  00000000  00000000  00032b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e0c3  00000000  00000000  0005c258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105f61  00000000  00000000  0007a31b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018027c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007050  00000000  00000000  001802c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00187310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d3b0 	.word	0x0800d3b0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800d3b0 	.word	0x0800d3b0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2238      	movs	r2, #56	@ 0x38
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f008 f9cf 	bl	80093e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001056:	2000      	movs	r0, #0
 8001058:	f002 f8de 	bl	8003218 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001072:	2304      	movs	r3, #4
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001076:	2355      	movs	r3, #85	@ 0x55
 8001078:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f002 f978 	bl	8003380 <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001096:	f001 f987 	bl	80023a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2303      	movs	r3, #3
 80010a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 fc76 	bl	80039a4 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010be:	f001 f973 	bl	80023a8 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	@ 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b2f      	ldr	r3, [pc, #188]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a2e      	ldr	r2, [pc, #184]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b2c      	ldr	r3, [pc, #176]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b29      	ldr	r3, [pc, #164]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a28      	ldr	r2, [pc, #160]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b1d      	ldr	r3, [pc, #116]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a1c      	ldr	r2, [pc, #112]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <MX_GPIO_Init+0xd4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2123      	movs	r1, #35	@ 0x23
 8001146:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114a:	f002 f84d 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800114e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001154:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001158:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	4619      	mov	r1, r3
 8001164:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001166:	f001 febd 	bl	8002ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 800116a:	2323      	movs	r3, #35	@ 0x23
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001184:	f001 feae 	bl	8002ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001188:	2200      	movs	r2, #0
 800118a:	2100      	movs	r1, #0
 800118c:	2028      	movs	r0, #40	@ 0x28
 800118e:	f001 fdc1 	bl	8002d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001192:	2028      	movs	r0, #40	@ 0x28
 8001194:	f001 fdd8 	bl	8002d48 <HAL_NVIC_EnableIRQ>

}
 8001198:	bf00      	nop
 800119a:	3728      	adds	r7, #40	@ 0x28
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48000800 	.word	0x48000800

080011a8 <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b09c      	sub	sp, #112	@ 0x70
 80011ac:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
 80011d8:	615a      	str	r2, [r3, #20]
 80011da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	2234      	movs	r2, #52	@ 0x34
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f008 f8ff 	bl	80093e6 <memset>

  htim1.Instance = TIM1;
 80011e8:	4b57      	ldr	r3, [pc, #348]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011ea:	4a58      	ldr	r2, [pc, #352]	@ (800134c <MX_TIM1_Init+0x1a4>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 80011ee:	4b56      	ldr	r3, [pc, #344]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011f0:	4a57      	ldr	r2, [pc, #348]	@ (8001350 <MX_TIM1_Init+0x1a8>)
 80011f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b54      	ldr	r3, [pc, #336]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80011fa:	4b53      	ldr	r3, [pc, #332]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80011fc:	2263      	movs	r2, #99	@ 0x63
 80011fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001200:	4b51      	ldr	r3, [pc, #324]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001202:	2200      	movs	r2, #0
 8001204:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001206:	4b50      	ldr	r3, [pc, #320]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001208:	2200      	movs	r2, #0
 800120a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120c:	4b4e      	ldr	r3, [pc, #312]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 800120e:	2200      	movs	r2, #0
 8001210:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001212:	484d      	ldr	r0, [pc, #308]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001214:	f003 f862 	bl	80042dc <HAL_TIM_Base_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800121e:	f001 f8c3 	bl	80023a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001222:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001226:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001228:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800122c:	4619      	mov	r1, r3
 800122e:	4846      	ldr	r0, [pc, #280]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001230:	f003 fea0 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800123a:	f001 f8b5 	bl	80023a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800123e:	4842      	ldr	r0, [pc, #264]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001240:	f003 f98c 	bl	800455c <HAL_TIM_PWM_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800124a:	f001 f8ad 	bl	80023a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800125e:	4619      	mov	r1, r3
 8001260:	4839      	ldr	r0, [pc, #228]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001262:	f004 fc65 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800126c:	f001 f89c 	bl	80023a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001270:	2360      	movs	r3, #96	@ 0x60
 8001272:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001278:	2300      	movs	r3, #0
 800127a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001284:	2300      	movs	r3, #0
 8001286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	482c      	ldr	r0, [pc, #176]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 8001296:	f003 fd59 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012a0:	f001 f882 	bl	80023a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012a8:	2204      	movs	r2, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	4826      	ldr	r0, [pc, #152]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80012ae:	f003 fd4d 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012b8:	f001 f876 	bl	80023a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012bc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c0:	2208      	movs	r2, #8
 80012c2:	4619      	mov	r1, r3
 80012c4:	4820      	ldr	r0, [pc, #128]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80012c6:	f003 fd41 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012d0:	f001 f86a 	bl	80023a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012d8:	220c      	movs	r2, #12
 80012da:	4619      	mov	r1, r3
 80012dc:	481a      	ldr	r0, [pc, #104]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 80012de:	f003 fd35 	bl	8004d4c <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80012e8:	f001 f85e 	bl	80023a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001300:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001304:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001316:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800131c:	2300      	movs	r3, #0
 800131e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4807      	ldr	r0, [pc, #28]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 800132a:	f004 fc97 	bl	8005c5c <HAL_TIMEx_ConfigBreakDeadTime>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001334:	f001 f838 	bl	80023a8 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001338:	4803      	ldr	r0, [pc, #12]	@ (8001348 <MX_TIM1_Init+0x1a0>)
 800133a:	f001 fa2f 	bl	800279c <HAL_TIM_MspPostInit>

}
 800133e:	bf00      	nop
 8001340:	3770      	adds	r7, #112	@ 0x70
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001ec 	.word	0x200001ec
 800134c:	40012c00 	.word	0x40012c00
 8001350:	0002980f 	.word	0x0002980f

08001354 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08c      	sub	sp, #48	@ 0x30
 8001358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2224      	movs	r2, #36	@ 0x24
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f008 f83f 	bl	80093e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001372:	4b21      	ldr	r3, [pc, #132]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001374:	4a21      	ldr	r2, [pc, #132]	@ (80013fc <MX_TIM3_Init+0xa8>)
 8001376:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001378:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 800137a:	2200      	movs	r2, #0
 800137c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1e      	ldr	r3, [pc, #120]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001384:	4b1c      	ldr	r3, [pc, #112]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001386:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b1a      	ldr	r3, [pc, #104]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001398:	2303      	movs	r3, #3
 800139a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800139c:	2300      	movs	r3, #0
 800139e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	480d      	ldr	r0, [pc, #52]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 80013c4:	f003 fa3e 	bl	8004844 <HAL_TIM_Encoder_Init>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013ce:	f000 ffeb 	bl	80023a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013da:	463b      	mov	r3, r7
 80013dc:	4619      	mov	r1, r3
 80013de:	4806      	ldr	r0, [pc, #24]	@ (80013f8 <MX_TIM3_Init+0xa4>)
 80013e0:	f004 fba6 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013ea:	f000 ffdd 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	@ 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000238 	.word	0x20000238
 80013fc:	40000400 	.word	0x40000400

08001400 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08c      	sub	sp, #48	@ 0x30
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	2224      	movs	r2, #36	@ 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	4618      	mov	r0, r3
 8001410:	f007 ffe9 	bl	80093e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001414:	463b      	mov	r3, r7
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800141e:	4b21      	ldr	r3, [pc, #132]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001420:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <MX_TIM4_Init+0xa8>)
 8001422:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001424:	4b1f      	ldr	r3, [pc, #124]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	4b1e      	ldr	r3, [pc, #120]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001430:	4b1c      	ldr	r3, [pc, #112]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001432:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001436:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001438:	4b1a      	ldr	r3, [pc, #104]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800143e:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001440:	2280      	movs	r2, #128	@ 0x80
 8001442:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001444:	2303      	movs	r3, #3
 8001446:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800144c:	2301      	movs	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001450:	2300      	movs	r3, #0
 8001452:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001454:	230a      	movs	r3, #10
 8001456:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001458:	2300      	movs	r3, #0
 800145a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800145c:	2301      	movs	r3, #1
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	4619      	mov	r1, r3
 800146e:	480d      	ldr	r0, [pc, #52]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 8001470:	f003 f9e8 	bl	8004844 <HAL_TIM_Encoder_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800147a:	f000 ff95 	bl	80023a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001486:	463b      	mov	r3, r7
 8001488:	4619      	mov	r1, r3
 800148a:	4806      	ldr	r0, [pc, #24]	@ (80014a4 <MX_TIM4_Init+0xa4>)
 800148c:	f004 fb50 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001496:	f000 ff87 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	3730      	adds	r7, #48	@ 0x30
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000284 	.word	0x20000284
 80014a8:	40000800 	.word	0x40000800

080014ac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	@ 0x30
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b2:	f107 030c 	add.w	r3, r7, #12
 80014b6:	2224      	movs	r2, #36	@ 0x24
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f007 ff93 	bl	80093e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ca:	4b21      	ldr	r3, [pc, #132]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014cc:	4a21      	ldr	r2, [pc, #132]	@ (8001554 <MX_TIM5_Init+0xa8>)
 80014ce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014de:	f04f 32ff 	mov.w	r2, #4294967295
 80014e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b19      	ldr	r3, [pc, #100]	@ (8001550 <MX_TIM5_Init+0xa4>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f0:	2303      	movs	r3, #3
 80014f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f4:	2300      	movs	r3, #0
 80014f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f8:	2301      	movs	r3, #1
 80014fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001504:	2300      	movs	r3, #0
 8001506:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001508:	2301      	movs	r3, #1
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4619      	mov	r1, r3
 800151a:	480d      	ldr	r0, [pc, #52]	@ (8001550 <MX_TIM5_Init+0xa4>)
 800151c:	f003 f992 	bl	8004844 <HAL_TIM_Encoder_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001526:	f000 ff3f 	bl	80023a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001532:	463b      	mov	r3, r7
 8001534:	4619      	mov	r1, r3
 8001536:	4806      	ldr	r0, [pc, #24]	@ (8001550 <MX_TIM5_Init+0xa4>)
 8001538:	f004 fafa 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001542:	f000 ff31 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	3730      	adds	r7, #48	@ 0x30
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	200002d0 	.word	0x200002d0
 8001554:	40000c00 	.word	0x40000c00

08001558 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155e:	1d3b      	adds	r3, r7, #4
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001568:	4b14      	ldr	r3, [pc, #80]	@ (80015bc <MX_TIM7_Init+0x64>)
 800156a:	4a15      	ldr	r2, [pc, #84]	@ (80015c0 <MX_TIM7_Init+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 800156e:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <MX_TIM7_Init+0x64>)
 8001570:	22a9      	movs	r2, #169	@ 0xa9
 8001572:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b11      	ldr	r3, [pc, #68]	@ (80015bc <MX_TIM7_Init+0x64>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 800157a:	4b10      	ldr	r3, [pc, #64]	@ (80015bc <MX_TIM7_Init+0x64>)
 800157c:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001580:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <MX_TIM7_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001588:	480c      	ldr	r0, [pc, #48]	@ (80015bc <MX_TIM7_Init+0x64>)
 800158a:	f002 fea7 	bl	80042dc <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001594:	f000 ff08 	bl	80023a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015a0:	1d3b      	adds	r3, r7, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	4805      	ldr	r0, [pc, #20]	@ (80015bc <MX_TIM7_Init+0x64>)
 80015a6:	f004 fac3 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015b0:	f000 fefa 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000031c 	.word	0x2000031c
 80015c0:	40001400 	.word	0x40001400

080015c4 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08c      	sub	sp, #48	@ 0x30
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	2224      	movs	r2, #36	@ 0x24
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f007 ff07 	bl	80093e6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	463b      	mov	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015e4:	4a23      	ldr	r2, [pc, #140]	@ (8001674 <MX_TIM8_Init+0xb0>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015e8:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b20      	ldr	r3, [pc, #128]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_TIM8_Init+0xac>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_TIM8_Init+0xac>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_TIM8_Init+0xac>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800160e:	2303      	movs	r3, #3
 8001610:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001616:	2301      	movs	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800161e:	2300      	movs	r3, #0
 8001620:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001626:	2301      	movs	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4619      	mov	r1, r3
 8001638:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_TIM8_Init+0xac>)
 800163a:	f003 f903 	bl	8004844 <HAL_TIM_Encoder_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001644:	f000 feb0 	bl	80023a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_TIM8_Init+0xac>)
 800165a:	f004 fa69 	bl	8005b30 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001664:	f000 fea0 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3730      	adds	r7, #48	@ 0x30
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000368 	.word	0x20000368
 8001674:	40013400 	.word	0x40013400

08001678 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800167c:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 800167e:	4a22      	ldr	r2, [pc, #136]	@ (8001708 <MX_LPUART1_UART_Init+0x90>)
 8001680:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001682:	4b20      	ldr	r3, [pc, #128]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a8:	4b16      	ldr	r3, [pc, #88]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b13      	ldr	r3, [pc, #76]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016ba:	4812      	ldr	r0, [pc, #72]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016bc:	f004 fba8 	bl	8005e10 <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016c6:	f000 fe6f 	bl	80023a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ca:	2100      	movs	r1, #0
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016ce:	f006 fc00 	bl	8007ed2 <HAL_UARTEx_SetTxFifoThreshold>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016d8:	f000 fe66 	bl	80023a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016dc:	2100      	movs	r1, #0
 80016de:	4809      	ldr	r0, [pc, #36]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016e0:	f006 fc35 	bl	8007f4e <HAL_UARTEx_SetRxFifoThreshold>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016ea:	f000 fe5d 	bl	80023a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	@ (8001704 <MX_LPUART1_UART_Init+0x8c>)
 80016f0:	f006 fbb6 	bl	8007e60 <HAL_UARTEx_DisableFifoMode>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016fa:	f000 fe55 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000448 	.word	0x20000448
 8001708:	40008000 	.word	0x40008000

0800170c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001710:	4b22      	ldr	r3, [pc, #136]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001712:	4a23      	ldr	r2, [pc, #140]	@ (80017a0 <MX_USART1_UART_Init+0x94>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b1f      	ldr	r3, [pc, #124]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b1c      	ldr	r3, [pc, #112]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b1a      	ldr	r3, [pc, #104]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b19      	ldr	r3, [pc, #100]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b17      	ldr	r3, [pc, #92]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001748:	4b14      	ldr	r3, [pc, #80]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800174e:	4b13      	ldr	r3, [pc, #76]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001754:	4811      	ldr	r0, [pc, #68]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001756:	f004 fb5b 	bl	8005e10 <HAL_UART_Init>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001760:	f000 fe22 	bl	80023a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001764:	2100      	movs	r1, #0
 8001766:	480d      	ldr	r0, [pc, #52]	@ (800179c <MX_USART1_UART_Init+0x90>)
 8001768:	f006 fbb3 	bl	8007ed2 <HAL_UARTEx_SetTxFifoThreshold>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001772:	f000 fe19 	bl	80023a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001776:	2100      	movs	r1, #0
 8001778:	4808      	ldr	r0, [pc, #32]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800177a:	f006 fbe8 	bl	8007f4e <HAL_UARTEx_SetRxFifoThreshold>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001784:	f000 fe10 	bl	80023a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001788:	4804      	ldr	r0, [pc, #16]	@ (800179c <MX_USART1_UART_Init+0x90>)
 800178a:	f006 fb69 	bl	8007e60 <HAL_UARTEx_DisableFifoMode>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001794:	f000 fe08 	bl	80023a8 <Error_Handler>
  }

}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200003b4 	.word	0x200003b4
 80017a0:	40013800 	.word	0x40013800

080017a4 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
	L298N_driver->current_PWM = 0;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	683a      	ldr	r2, [r7, #0]
 80017c8:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	8b3a      	ldrh	r2, [r7, #24]
 80017ce:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8c3a      	ldrh	r2, [r7, #32]
 80017da:	831a      	strh	r2, [r3, #24]

}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr

080017e8 <L298N_update_pwm>:


void L298N_update_pwm(L298N_driver* L298_driver, uint8_t new_pwm_count)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	460b      	mov	r3, r1
 80017f2:	70fb      	strb	r3, [r7, #3]
	L298_driver->current_PWM = new_pwm_count;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	78fa      	ldrb	r2, [r7, #3]
 80017f8:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <L298N_update_pwm+0x28>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	7a1a      	ldrb	r2, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	635a      	str	r2, [r3, #52]	@ 0x34

}
 800180e:	e036      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b04      	cmp	r3, #4
 8001816:	d107      	bne.n	8001828 <L298N_update_pwm+0x40>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	7a19      	ldrb	r1, [r3, #8]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	460b      	mov	r3, r1
 8001824:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001826:	e02a      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b08      	cmp	r3, #8
 800182e:	d107      	bne.n	8001840 <L298N_update_pwm+0x58>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7a19      	ldrb	r1, [r3, #8]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	460b      	mov	r3, r1
 800183c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800183e:	e01e      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b0c      	cmp	r3, #12
 8001846:	d107      	bne.n	8001858 <L298N_update_pwm+0x70>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	7a19      	ldrb	r1, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	460b      	mov	r3, r1
 8001854:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001856:	e012      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b10      	cmp	r3, #16
 800185e:	d107      	bne.n	8001870 <L298N_update_pwm+0x88>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	7a19      	ldrb	r1, [r3, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	460b      	mov	r3, r1
 800186c:	6493      	str	r3, [r2, #72]	@ 0x48
}
 800186e:	e006      	b.n	800187e <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	7a19      	ldrb	r1, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	460b      	mov	r3, r1
 800187c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, E_L298N_MODE l298n_mode)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	460b      	mov	r3, r1
 8001894:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == BACKWARD)
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d110      	bne.n	80018be <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68d8      	ldr	r0, [r3, #12]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	8a1b      	ldrh	r3, [r3, #16]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4619      	mov	r1, r3
 80018a8:	f001 fc9e 	bl	80031e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6958      	ldr	r0, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	8b1b      	ldrh	r3, [r3, #24]
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	f001 fc96 	bl	80031e8 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 80018bc:	e026      	b.n	800190c <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == FORWARD)
 80018be:	78fb      	ldrb	r3, [r7, #3]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d110      	bne.n	80018e6 <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68d8      	ldr	r0, [r3, #12]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	8a1b      	ldrh	r3, [r3, #16]
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	f001 fc8a 	bl	80031e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6958      	ldr	r0, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	8b1b      	ldrh	r3, [r3, #24]
 80018dc:	2201      	movs	r2, #1
 80018de:	4619      	mov	r1, r3
 80018e0:	f001 fc82 	bl	80031e8 <HAL_GPIO_WritePin>
}
 80018e4:	e012      	b.n	800190c <L298N_set_input_configuration+0x82>
	else if(l298n_mode == STOP)
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d10f      	bne.n	800190c <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68d8      	ldr	r0, [r3, #12]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	8a1b      	ldrh	r3, [r3, #16]
 80018f4:	2200      	movs	r2, #0
 80018f6:	4619      	mov	r1, r3
 80018f8:	f001 fc76 	bl	80031e8 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6958      	ldr	r0, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	8b1b      	ldrh	r3, [r3, #24]
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	f001 fc6e 	bl	80031e8 <HAL_GPIO_WritePin>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <init_driving_system>:
static char states_buffer[80];
static void add_state_to_states_buffer(MotorState* motor_state);


void init_driving_system(DrivingSystem* driving_system, MotorStruct* lb_motor, MotorStruct* lf_motor, MotorStruct* rb_motor, MotorStruct* rf_motor)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
 8001920:	603b      	str	r3, [r7, #0]

	driving_system->left_motors_lst[0] = lb_motor;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	68ba      	ldr	r2, [r7, #8]
 8001926:	601a      	str	r2, [r3, #0]
	driving_system->left_motors_lst[1] = lf_motor;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	605a      	str	r2, [r3, #4]
	driving_system->right_motors_lst[0] = rb_motor;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	609a      	str	r2, [r3, #8]
	driving_system->right_motors_lst[1] = rf_motor;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	60da      	str	r2, [r3, #12]
}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <default_init_driving_system_if>:

void default_init_driving_system_if(DrivingSystemIface* drv_system_if){
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

	drv_system_if->exe_cmd = execute_cmd;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <default_init_driving_system_if+0x20>)
 8001954:	601a      	str	r2, [r3, #0]
	drv_system_if->send_state = send_state;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <default_init_driving_system_if+0x24>)
 800195a:	605a      	str	r2, [r3, #4]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	08001971 	.word	0x08001971
 800196c:	08001b19 	.word	0x08001b19

08001970 <execute_cmd>:

void execute_cmd(DrivingSystem* driving_system, uint8_t* cmd){
 8001970:	b5b0      	push	{r4, r5, r7, lr}
 8001972:	b08e      	sub	sp, #56	@ 0x38
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]


	uint8_t cmd_code[] = "00";
 800197a:	4a2f      	ldr	r2, [pc, #188]	@ (8001a38 <execute_cmd+0xc8>)
 800197c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	4611      	mov	r1, r2
 8001984:	8019      	strh	r1, [r3, #0]
 8001986:	3302      	adds	r3, #2
 8001988:	0c12      	lsrs	r2, r2, #16
 800198a:	701a      	strb	r2, [r3, #0]
	uint8_t payload[] = "0000000";
 800198c:	4a2b      	ldr	r2, [pc, #172]	@ (8001a3c <execute_cmd+0xcc>)
 800198e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001992:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001996:	e883 0003 	stmia.w	r3, {r0, r1}

	parse_cmd_code(cmd, cmd_code);
 800199a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800199e:	4619      	mov	r1, r3
 80019a0:	6838      	ldr	r0, [r7, #0]
 80019a2:	f000 fb49 	bl	8002038 <parse_cmd_code>
	parse_payload(cmd, payload);
 80019a6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019aa:	4619      	mov	r1, r3
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f000 fb79 	bl	80020a4 <parse_payload>

//	uint8_t* send_state_literall = (uint8_t*)STATE_CMD_LIT;
//	uint8_t* forward_state_literall = (uint8_t*)FORWARD_CMD_LIT;


	if(cmd_code[0] == 1)
 80019b2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d103      	bne.n	80019c2 <execute_cmd+0x52>
	{
		send_state(driving_system);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f8ac 	bl	8001b18 <send_state>
	}
	else{
		uint8_t msg[] = "Undefined First Cmd Literall";
		send_drv_err(msg);
	}
}
 80019c0:	e035      	b.n	8001a2e <execute_cmd+0xbe>
	}else if(cmd_code[0] == 2)
 80019c2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d11a      	bne.n	8001a00 <execute_cmd+0x90>
	    float vel = 0;
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	62bb      	str	r3, [r7, #40]	@ 0x28
	    sscanf(payload, "%f", &vel);
 80019d0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80019d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d8:	4919      	ldr	r1, [pc, #100]	@ (8001a40 <execute_cmd+0xd0>)
 80019da:	4618      	mov	r0, r3
 80019dc:	f007 fc94 	bl	8009308 <siscanf>
		if(cmd_code[1] == 1)
 80019e0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d103      	bne.n	80019f0 <execute_cmd+0x80>
			send_state(driving_system);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f000 f895 	bl	8001b18 <send_state>
}
 80019ee:	e01e      	b.n	8001a2e <execute_cmd+0xbe>
		}else if(cmd_code[1] == 2)
 80019f0:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d11a      	bne.n	8001a2e <execute_cmd+0xbe>
			send_drv_err("Backward not implemented");
 80019f8:	4812      	ldr	r0, [pc, #72]	@ (8001a44 <execute_cmd+0xd4>)
 80019fa:	f000 f829 	bl	8001a50 <send_drv_err>
}
 80019fe:	e016      	b.n	8001a2e <execute_cmd+0xbe>
	}else if(cmd_code[0] == 3){
 8001a00:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001a04:	2b03      	cmp	r3, #3
 8001a06:	d103      	bne.n	8001a10 <execute_cmd+0xa0>
		send_drv_err("PWM Mode unimplemented");
 8001a08:	480f      	ldr	r0, [pc, #60]	@ (8001a48 <execute_cmd+0xd8>)
 8001a0a:	f000 f821 	bl	8001a50 <send_drv_err>
}
 8001a0e:	e00e      	b.n	8001a2e <execute_cmd+0xbe>
		uint8_t msg[] = "Undefined First Cmd Literall";
 8001a10:	4b0e      	ldr	r3, [pc, #56]	@ (8001a4c <execute_cmd+0xdc>)
 8001a12:	f107 0408 	add.w	r4, r7, #8
 8001a16:	461d      	mov	r5, r3
 8001a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a20:	c407      	stmia	r4!, {r0, r1, r2}
 8001a22:	7023      	strb	r3, [r4, #0]
		send_drv_err(msg);
 8001a24:	f107 0308 	add.w	r3, r7, #8
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f811 	bl	8001a50 <send_drv_err>
}
 8001a2e:	bf00      	nop
 8001a30:	3738      	adds	r7, #56	@ 0x38
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bdb0      	pop	{r4, r5, r7, pc}
 8001a36:	bf00      	nop
 8001a38:	0800d400 	.word	0x0800d400
 8001a3c:	0800d404 	.word	0x0800d404
 8001a40:	0800d3c8 	.word	0x0800d3c8
 8001a44:	0800d3cc 	.word	0x0800d3cc
 8001a48:	0800d3e8 	.word	0x0800d3e8
 8001a4c:	0800d40c 	.word	0x0800d40c

08001a50 <send_drv_err>:



void send_drv_err(char* msg){
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b09c      	sub	sp, #112	@ 0x70
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2264      	movs	r2, #100	@ 0x64
 8001a5e:	2100      	movs	r1, #0
 8001a60:	4618      	mov	r0, r3
 8001a62:	f007 fcc0 	bl	80093e6 <memset>
	strcat(err_buffer, DRIVING_ERR);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fc28 	bl	80002c0 <strlen>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461a      	mov	r2, r3
 8001a74:	f107 030c 	add.w	r3, r7, #12
 8001a78:	4413      	add	r3, r2
 8001a7a:	4917      	ldr	r1, [pc, #92]	@ (8001ad8 <send_drv_err+0x88>)
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	460b      	mov	r3, r1
 8001a80:	cb03      	ldmia	r3!, {r0, r1}
 8001a82:	6010      	str	r0, [r2, #0]
 8001a84:	6051      	str	r1, [r2, #4]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	7213      	strb	r3, [r2, #8]
	strcat(err_buffer, msg);
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f007 fcb0 	bl	80093f6 <strcat>
	strcat(err_buffer, "\n\r");
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fc10 	bl	80002c0 <strlen>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8001adc <send_drv_err+0x8c>)
 8001aac:	8811      	ldrh	r1, [r2, #0]
 8001aae:	7892      	ldrb	r2, [r2, #2]
 8001ab0:	8019      	strh	r1, [r3, #0]
 8001ab2:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer),STATE_SENDING_TIMEOUT);
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fc01 	bl	80002c0 <strlen>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	f107 010c 	add.w	r1, r7, #12
 8001ac6:	2364      	movs	r3, #100	@ 0x64
 8001ac8:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <send_drv_err+0x90>)
 8001aca:	f004 f9f1 	bl	8005eb0 <HAL_UART_Transmit>

}
 8001ace:	bf00      	nop
 8001ad0:	3770      	adds	r7, #112	@ 0x70
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	0800d42c 	.word	0x0800d42c
 8001adc:	0800d438 	.word	0x0800d438
 8001ae0:	20000448 	.word	0x20000448

08001ae4 <add_state_to_states_buffer>:


static void add_state_to_states_buffer(MotorState* motor_state){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

	memset(state_str, '\0', sizeof(state_str));
 8001aec:	2214      	movs	r2, #20
 8001aee:	2100      	movs	r1, #0
 8001af0:	4807      	ldr	r0, [pc, #28]	@ (8001b10 <add_state_to_states_buffer+0x2c>)
 8001af2:	f007 fc78 	bl	80093e6 <memset>
	str_motor_state(motor_state, state_str);
 8001af6:	4906      	ldr	r1, [pc, #24]	@ (8001b10 <add_state_to_states_buffer+0x2c>)
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f867 	bl	8001bcc <str_motor_state>
	strcat(states_buffer, state_str);
 8001afe:	4904      	ldr	r1, [pc, #16]	@ (8001b10 <add_state_to_states_buffer+0x2c>)
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <add_state_to_states_buffer+0x30>)
 8001b02:	f007 fc78 	bl	80093f6 <strcat>

}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200004dc 	.word	0x200004dc
 8001b14:	200004f0 	.word	0x200004f0

08001b18 <send_state>:
	}

}


void send_state(DrivingSystem* driving_system){
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]


	memset(states_buffer, '\0', sizeof(states_buffer));
 8001b20:	2250      	movs	r2, #80	@ 0x50
 8001b22:	2100      	movs	r1, #0
 8001b24:	4815      	ldr	r0, [pc, #84]	@ (8001b7c <send_state+0x64>)
 8001b26:	f007 fc5e 	bl	80093e6 <memset>

	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	e013      	b.n	8001b58 <send_state+0x40>

		add_state_to_states_buffer(driving_system->left_motors_lst[i]->motor_state);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff ffd2 	bl	8001ae4 <add_state_to_states_buffer>
		add_state_to_states_buffer(driving_system->right_motors_lst[i]->motor_state);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	3202      	adds	r2, #2
 8001b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ffc9 	bl	8001ae4 <add_state_to_states_buffer>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3301      	adds	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	dde8      	ble.n	8001b30 <send_state+0x18>
	}

	HAL_UART_Transmit(&hlpuart1,(uint8_t*) states_buffer, strlen(states_buffer),STATE_SENDING_TIMEOUT);
 8001b5e:	4807      	ldr	r0, [pc, #28]	@ (8001b7c <send_state+0x64>)
 8001b60:	f7fe fbae 	bl	80002c0 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	2364      	movs	r3, #100	@ 0x64
 8001b6a:	4904      	ldr	r1, [pc, #16]	@ (8001b7c <send_state+0x64>)
 8001b6c:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <send_state+0x68>)
 8001b6e:	f004 f99f 	bl	8005eb0 <HAL_UART_Transmit>

}
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	200004f0 	.word	0x200004f0
 8001b80:	20000448 	.word	0x20000448

08001b84 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	601a      	str	r2, [r3, #0]

}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	889a      	ldrh	r2, [r3, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	809a      	strh	r2, [r3, #4]

}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <str_motor_state>:
#include <motor_features.h>
#include "motor_driver.h"
#include "timers_configuration.h"


void str_motor_state(MotorState* motor_state, char* state_buffer){
 8001bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bce:	b087      	sub	sp, #28
 8001bd0:	af04      	add	r7, sp, #16
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]

	sprintf(state_buffer, "%d,%.2f,%.2f\n\r", motor_state->motor_id, motor_state->set_velocity, motor_state->measured_velocity);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7c1b      	ldrb	r3, [r3, #16]
 8001bda:	461e      	mov	r6, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcd9 	bl	8000598 <__aeabi_f2d>
 8001be6:	4604      	mov	r4, r0
 8001be8:	460d      	mov	r5, r1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fcd2 	bl	8000598 <__aeabi_f2d>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001bfc:	e9cd 4500 	strd	r4, r5, [sp]
 8001c00:	4632      	mov	r2, r6
 8001c02:	4904      	ldr	r1, [pc, #16]	@ (8001c14 <str_motor_state+0x48>)
 8001c04:	6838      	ldr	r0, [r7, #0]
 8001c06:	f007 fb5f 	bl	80092c8 <siprintf>
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	0800d43c 	.word	0x0800d43c

08001c18 <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	68ba      	ldr	r2, [r7, #8]
 8001c2a:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
	motor_struct->updater_timer_periods = CountPeriodS(updater_tim_);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 fab2 	bl	800219c <CountPeriodS>
 8001c38:	eef0 7a40 	vmov.f32	s15, s0
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_struct->encoder_info = enc_inf_param_;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	615a      	str	r2, [r3, #20]
	motor_struct->pid_controller = pid_controller_;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]

}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	ed93 7a00 	vldr	s14, [r3]
 8001c7a:	eef0 0a47 	vmov.f32	s1, s14
 8001c7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c82:	4610      	mov	r0, r2
 8001c84:	f000 f8d4 	bl	8001e30 <pid_calculate>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001c8c:	897b      	ldrh	r3, [r7, #10]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 f9ba 	bl	8002008 <saturate_pwm>
 8001c94:	4603      	mov	r3, r0
 8001c96:	727b      	strb	r3, [r7, #9]
	L298N_update_pwm(motor_struct->L298N_driver, saturated_pwm_value);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	7a7a      	ldrb	r2, [r7, #9]
 8001c9e:	4611      	mov	r1, r2
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fda1 	bl	80017e8 <L298N_update_pwm>

}
 8001ca6:	bf00      	nop
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 8001cc0:	6838      	ldr	r0, [r7, #0]
 8001cc2:	f7ff ff6d 	bl	8001ba0 <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	889a      	ldrh	r2, [r3, #4]
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	88db      	ldrh	r3, [r3, #6]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 8001cd8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	dd1f      	ble.n	8001d20 <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0310 	and.w	r3, r3, #16
 8001cec:	2b10      	cmp	r3, #16
 8001cee:	d114      	bne.n	8001d1a <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	889b      	ldrh	r3, [r3, #4]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bfb8      	it	lt
 8001d04:	425b      	neglt	r3, r3
 8001d06:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	88da      	ldrh	r2, [r3, #6]
 8001d0c:	89fb      	ldrh	r3, [r7, #14]
 8001d0e:	4413      	add	r3, r2
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	425b      	negs	r3, r3
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	82fb      	strh	r3, [r7, #22]
 8001d18:	e023      	b.n	8001d62 <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001d1a:	8abb      	ldrh	r3, [r7, #20]
 8001d1c:	82fb      	strh	r3, [r7, #22]
 8001d1e:	e020      	b.n	8001d62 <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 8001d20:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da1c      	bge.n	8001d62 <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b10      	cmp	r3, #16
 8001d36:	d012      	beq.n	8001d5e <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	889b      	ldrh	r3, [r3, #4]
 8001d3c:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	88db      	ldrh	r3, [r3, #6]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 8001d52:	8a7a      	ldrh	r2, [r7, #18]
 8001d54:	8a3b      	ldrh	r3, [r7, #16]
 8001d56:	4413      	add	r3, r2
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	82fb      	strh	r3, [r7, #22]
 8001d5c:	e001      	b.n	8001d62 <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001d5e:	8abb      	ldrh	r3, [r7, #20]
 8001d60:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 8001d62:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f000 f91a 	bl	8001fa0 <convert_to_radians>
 8001d6c:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d76:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <update_measured_velocity>:
{
	motor_state->set_velocity = velocity;
}

void update_measured_velocity(MotorStruct* motor_struct)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	MotorState *curr_motor_state = motor_struct->motor_state;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	60fb      	str	r3, [r7, #12]
	float rotary_displacement_ = rotary_displacement(curr_motor_state);
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f810 	bl	8001dc0 <rotary_displacement>
 8001da0:	ed87 0a02 	vstr	s0, [r7, #8]
	curr_motor_state->measured_velocity = (float)rotary_displacement_ / motor_struct->updater_timer_periods;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	ed93 7a04 	vldr	s14, [r3, #16]
 8001daa:	edd7 6a02 	vldr	s13, [r7, #8]
 8001dae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edc3 7a00 	vstr	s15, [r3]

}
 8001db8:	bf00      	nop
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

	return motor_state->position - motor_state->last_position;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <pid_init>:
#include "pid_controller.h"
#include "motor_features.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b087      	sub	sp, #28
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6178      	str	r0, [r7, #20]
 8001dee:	ed87 0a04 	vstr	s0, [r7, #16]
 8001df2:	edc7 0a03 	vstr	s1, [r7, #12]
 8001df6:	ed87 1a02 	vstr	s2, [r7, #8]
 8001dfa:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	68fa      	ldr	r2, [r7, #12]
 8001e16:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	615a      	str	r2, [r3, #20]
}
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <pid_calculate>:
float d_term;
float pid_output;


uint8_t pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e3c:	edc7 0a01 	vstr	s1, [r7, #4]

	error = setpoint - process_variable;
 8001e40:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e4c:	4b4f      	ldr	r3, [pc, #316]	@ (8001f8c <pid_calculate+0x15c>)
 8001e4e:	edc3 7a00 	vstr	s15, [r3]
	pid_data->total_error += error;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e58:	4b4c      	ldr	r3, [pc, #304]	@ (8001f8c <pid_calculate+0x15c>)
 8001e5a:	edd3 7a00 	vldr	s15, [r3]
 8001e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	edc3 7a01 	vstr	s15, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e6e:	4b47      	ldr	r3, [pc, #284]	@ (8001f8c <pid_calculate+0x15c>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e78:	4b45      	ldr	r3, [pc, #276]	@ (8001f90 <pid_calculate+0x160>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	ed93 7a03 	vldr	s14, [r3, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e8e:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <pid_calculate+0x164>)
 8001e90:	edc3 7a00 	vstr	s15, [r3]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f8c <pid_calculate+0x15c>)
 8001e9c:	edd3 6a00 	vldr	s13, [r3]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001eaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eae:	4b3a      	ldr	r3, [pc, #232]	@ (8001f98 <pid_calculate+0x168>)
 8001eb0:	edc3 7a00 	vstr	s15, [r3]

	pid_output = p_term + i_term + d_term;
 8001eb4:	4b36      	ldr	r3, [pc, #216]	@ (8001f90 <pid_calculate+0x160>)
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	4b36      	ldr	r3, [pc, #216]	@ (8001f94 <pid_calculate+0x164>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ec4:	4b34      	ldr	r3, [pc, #208]	@ (8001f98 <pid_calculate+0x168>)
 8001ec6:	edd3 7a00 	vldr	s15, [r3]
 8001eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ece:	4b33      	ldr	r3, [pc, #204]	@ (8001f9c <pid_calculate+0x16c>)
 8001ed0:	edc3 7a00 	vstr	s15, [r3]

    // Anti-windup
    if (pid_output < -pid_data->anti_windup_limit)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	425b      	negs	r3, r3
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ee2:	4b2e      	ldr	r3, [pc, #184]	@ (8001f9c <pid_calculate+0x16c>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef0:	dd15      	ble.n	8001f1e <pid_calculate+0xee>
    {
        pid_output = -pid_data->anti_windup_limit;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	425b      	negs	r3, r3
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f00:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <pid_calculate+0x16c>)
 8001f02:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001f8c <pid_calculate+0x15c>)
 8001f0e:	edd3 7a00 	vldr	s15, [r3]
 8001f12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	edc3 7a01 	vstr	s15, [r3, #4]
 8001f1c:	e021      	b.n	8001f62 <pid_calculate+0x132>

    } else if (pid_output > pid_data->anti_windup_limit)
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	ee07 3a90 	vmov	s15, r3
 8001f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <pid_calculate+0x16c>)
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f38:	d513      	bpl.n	8001f62 <pid_calculate+0x132>
    {
        pid_output = pid_data->anti_windup_limit;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	ee07 3a90 	vmov	s15, r3
 8001f42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <pid_calculate+0x16c>)
 8001f48:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <pid_calculate+0x15c>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	edc3 7a01 	vstr	s15, [r3, #4]
    }


	pid_data->previous_error = error;
 8001f62:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <pid_calculate+0x15c>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	601a      	str	r2, [r3, #0]
	uint8_t saturated_pwm_value = saturate_pwm(pid_output);
 8001f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f9c <pid_calculate+0x16c>)
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f74:	ee17 0a90 	vmov	r0, s15
 8001f78:	f000 f846 	bl	8002008 <saturate_pwm>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	75fb      	strb	r3, [r7, #23]
	return saturated_pwm_value;
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000540 	.word	0x20000540
 8001f90:	20000544 	.word	0x20000544
 8001f94:	20000548 	.word	0x20000548
 8001f98:	2000054c 	.word	0x2000054c
 8001f9c:	20000550 	.word	0x20000550

08001fa0 <convert_to_radians>:

#include "motor_features.h"



float convert_to_radians(int32_t enc_position){
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fb2:	ee17 0a90 	vmov	r0, s15
 8001fb6:	f7fe faef 	bl	8000598 <__aeabi_f2d>
 8001fba:	a30f      	add	r3, pc, #60	@ (adr r3, 8001ff8 <convert_to_radians+0x58>)
 8001fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc0:	f7fe fb42 	bl	8000648 <__aeabi_dmul>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	a30c      	add	r3, pc, #48	@ (adr r3, 8002000 <convert_to_radians+0x60>)
 8001fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd2:	f7fe fc63 	bl	800089c <__aeabi_ddiv>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	f7fe fe2b 	bl	8000c38 <__aeabi_d2f>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	ee07 3a90 	vmov	s15, r3

}
 8001fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	f3af 8000 	nop.w
 8001ff8:	54442d18 	.word	0x54442d18
 8001ffc:	401921fb 	.word	0x401921fb
 8002000:	00000000 	.word	0x00000000
 8002004:	40ae6400 	.word	0x40ae6400

08002008 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]


	if (pwm_value < PWM_MIN_VALUE){
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	da02      	bge.n	800201c <saturate_pwm+0x14>
		pwm_value = (uint8_t)PWM_MIN_VALUE;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	e004      	b.n	8002026 <saturate_pwm+0x1e>
	}else if(pwm_value > PWM_MAX_VALUE){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b62      	cmp	r3, #98	@ 0x62
 8002020:	dd01      	ble.n	8002026 <saturate_pwm+0x1e>
		pwm_value = (uint8_t)PWM_MAX_VALUE;
 8002022:	2362      	movs	r3, #98	@ 0x62
 8002024:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	b2db      	uxtb	r3, r3

}
 800202a:	4618      	mov	r0, r3
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <parse_cmd_code>:

#include "parser_features.h"



void parse_cmd_code(uint8_t* cmd, uint8_t* cmd_code){
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]

	if (cmd[0] >= '0' && cmd[0] <= '9') {
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b2f      	cmp	r3, #47	@ 0x2f
 8002048:	d90a      	bls.n	8002060 <parse_cmd_code+0x28>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b39      	cmp	r3, #57	@ 0x39
 8002050:	d806      	bhi.n	8002060 <parse_cmd_code+0x28>
		cmd_code[0] = cmd[0] - '0';
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	3b30      	subs	r3, #48	@ 0x30
 8002058:	b2da      	uxtb	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	701a      	strb	r2, [r3, #0]
 800205e:	e002      	b.n	8002066 <parse_cmd_code+0x2e>

	}else{
		send_parsing_err("cmd[0] wrong format");
 8002060:	480e      	ldr	r0, [pc, #56]	@ (800209c <parse_cmd_code+0x64>)
 8002062:	f000 f84f 	bl	8002104 <send_parsing_err>
	}

	if (cmd[1] >= '0' && cmd[1] <= '9') {
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	3301      	adds	r3, #1
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	2b2f      	cmp	r3, #47	@ 0x2f
 800206e:	d90d      	bls.n	800208c <parse_cmd_code+0x54>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	3301      	adds	r3, #1
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b39      	cmp	r3, #57	@ 0x39
 8002078:	d808      	bhi.n	800208c <parse_cmd_code+0x54>
		cmd_code[1] = cmd[1] - '0';
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3301      	adds	r3, #1
 800207e:	781a      	ldrb	r2, [r3, #0]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	3301      	adds	r3, #1
 8002084:	3a30      	subs	r2, #48	@ 0x30
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]
 800208a:	e003      	b.n	8002094 <parse_cmd_code+0x5c>
	}else{
		send_parsing_err("cmd[1] wrong format");
 800208c:	4804      	ldr	r0, [pc, #16]	@ (80020a0 <parse_cmd_code+0x68>)
 800208e:	f000 f839 	bl	8002104 <send_parsing_err>
	}

}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	0800d44c 	.word	0x0800d44c
 80020a0:	0800d460 	.word	0x0800d460

080020a4 <parse_payload>:

void parse_payload(char* cmd, uint8_t* payload) {
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]

    uint8_t cmd_index = 2;
 80020ae:	2302      	movs	r3, #2
 80020b0:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	60bb      	str	r3, [r7, #8]

    while (cmd[cmd_index] != CMD_END_CHAR) {
 80020b6:	e014      	b.n	80020e2 <parse_payload+0x3e>

    	if(i == PAYLOAD_LENGHT-1){
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b07      	cmp	r3, #7
 80020bc:	d103      	bne.n	80020c6 <parse_payload+0x22>
    		send_parsing_err(" cmd end char not received");
 80020be:	4810      	ldr	r0, [pc, #64]	@ (8002100 <parse_payload+0x5c>)
 80020c0:	f000 f820 	bl	8002104 <send_parsing_err>
    		break;
 80020c4:	e013      	b.n	80020ee <parse_payload+0x4a>
    	}
        payload[i] = cmd[cmd_index];
 80020c6:	7bfb      	ldrb	r3, [r7, #15]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	441a      	add	r2, r3
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	6839      	ldr	r1, [r7, #0]
 80020d0:	440b      	add	r3, r1
 80020d2:	7812      	ldrb	r2, [r2, #0]
 80020d4:	701a      	strb	r2, [r3, #0]
        i++;
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	3301      	adds	r3, #1
 80020da:	60bb      	str	r3, [r7, #8]
        cmd_index++;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	3301      	adds	r3, #1
 80020e0:	73fb      	strb	r3, [r7, #15]
    while (cmd[cmd_index] != CMD_END_CHAR) {
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	4413      	add	r3, r2
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b66      	cmp	r3, #102	@ 0x66
 80020ec:	d1e4      	bne.n	80020b8 <parse_payload+0x14>
    }

    payload[i] = '\0';
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	0800d474 	.word	0x0800d474

08002104 <send_parsing_err>:

void send_parsing_err(char* msg){
 8002104:	b580      	push	{r7, lr}
 8002106:	b09c      	sub	sp, #112	@ 0x70
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 800210c:	f107 030c 	add.w	r3, r7, #12
 8002110:	2264      	movs	r2, #100	@ 0x64
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f007 f966 	bl	80093e6 <memset>
	strcat(err_buffer, PARSING_ERR);
 800211a:	f107 030c 	add.w	r3, r7, #12
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe f8ce 	bl	80002c0 <strlen>
 8002124:	4603      	mov	r3, r0
 8002126:	461a      	mov	r2, r3
 8002128:	f107 030c 	add.w	r3, r7, #12
 800212c:	4413      	add	r3, r2
 800212e:	4918      	ldr	r1, [pc, #96]	@ (8002190 <send_parsing_err+0x8c>)
 8002130:	461a      	mov	r2, r3
 8002132:	460b      	mov	r3, r1
 8002134:	cb03      	ldmia	r3!, {r0, r1}
 8002136:	6010      	str	r0, [r2, #0]
 8002138:	6051      	str	r1, [r2, #4]
 800213a:	8819      	ldrh	r1, [r3, #0]
 800213c:	789b      	ldrb	r3, [r3, #2]
 800213e:	8111      	strh	r1, [r2, #8]
 8002140:	7293      	strb	r3, [r2, #10]
	strcat(err_buffer, msg);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4618      	mov	r0, r3
 800214a:	f007 f954 	bl	80093f6 <strcat>
	strcat(err_buffer, "\n\r");
 800214e:	f107 030c 	add.w	r3, r7, #12
 8002152:	4618      	mov	r0, r3
 8002154:	f7fe f8b4 	bl	80002c0 <strlen>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	4413      	add	r3, r2
 8002162:	4a0c      	ldr	r2, [pc, #48]	@ (8002194 <send_parsing_err+0x90>)
 8002164:	8811      	ldrh	r1, [r2, #0]
 8002166:	7892      	ldrb	r2, [r2, #2]
 8002168:	8019      	strh	r1, [r3, #0]
 800216a:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer),100);
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f8a5 	bl	80002c0 <strlen>
 8002176:	4603      	mov	r3, r0
 8002178:	b29a      	uxth	r2, r3
 800217a:	f107 010c 	add.w	r1, r7, #12
 800217e:	2364      	movs	r3, #100	@ 0x64
 8002180:	4805      	ldr	r0, [pc, #20]	@ (8002198 <send_parsing_err+0x94>)
 8002182:	f003 fe95 	bl	8005eb0 <HAL_UART_Transmit>

}
 8002186:	bf00      	nop
 8002188:	3770      	adds	r7, #112	@ 0x70
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	0800d490 	.word	0x0800d490
 8002194:	0800d49c 	.word	0x0800d49c
 8002198:	20000448 	.word	0x20000448

0800219c <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 80021b0:	f001 fd96 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 80021b4:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80021d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d4:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	ee07 3a90 	vmov	s15, r3
}
 80021de:	eeb0 0a67 	vmov.f32	s0, s15
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <main>:
uint8_t pwm_output;
uint64_t tick;
void generate_stair_signal(void);

int main(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af04      	add	r7, sp, #16

  HAL_Init();
 80021ee:	f000 fcb4 	bl	8002b5a <HAL_Init>
  SystemClock_Config();
 80021f2:	f7fe ff1f 	bl	8001034 <SystemClock_Config>
  MX_GPIO_Init();
 80021f6:	f7fe ff69 	bl	80010cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80021fa:	f7ff fa3d 	bl	8001678 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80021fe:	f7ff fa85 	bl	800170c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002202:	f7fe ffd1 	bl	80011a8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002206:	f7ff f8a5 	bl	8001354 <MX_TIM3_Init>
  MX_TIM4_Init();
 800220a:	f7ff f8f9 	bl	8001400 <MX_TIM4_Init>
  MX_TIM5_Init();
 800220e:	f7ff f94d 	bl	80014ac <MX_TIM5_Init>
  MX_TIM7_Init();
 8002212:	f7ff f9a1 	bl	8001558 <MX_TIM7_Init>
  MX_TIM8_Init();
 8002216:	f7ff f9d5 	bl	80015c4 <MX_TIM8_Init>

  init_encoder_info(&encoder_info, &htim4);
 800221a:	4935      	ldr	r1, [pc, #212]	@ (80022f0 <main+0x108>)
 800221c:	4835      	ldr	r0, [pc, #212]	@ (80022f4 <main+0x10c>)
 800221e:	f7ff fcb1 	bl	8001b84 <init_encoder_info>
  L298N_init(&L298N_lb, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 8002222:	2302      	movs	r3, #2
 8002224:	9302      	str	r3, [sp, #8]
 8002226:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800222a:	9301      	str	r3, [sp, #4]
 800222c:	2301      	movs	r3, #1
 800222e:	9300      	str	r3, [sp, #0]
 8002230:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002234:	4a30      	ldr	r2, [pc, #192]	@ (80022f8 <main+0x110>)
 8002236:	2100      	movs	r1, #0
 8002238:	4830      	ldr	r0, [pc, #192]	@ (80022fc <main+0x114>)
 800223a:	f7ff fab3 	bl	80017a4 <L298N_init>
  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 800223e:	215f      	movs	r1, #95	@ 0x5f
 8002240:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8002244:	eef7 0a08 	vmov.f32	s1, #120	@ 0x3fc00000  1.5
 8002248:	ed9f 0a2d 	vldr	s0, [pc, #180]	@ 8002300 <main+0x118>
 800224c:	482d      	ldr	r0, [pc, #180]	@ (8002304 <main+0x11c>)
 800224e:	f7ff fdca 	bl	8001de6 <pid_init>
  init_motor(&lb_motor, &lb_motor_state, &htim7, &encoder_info, &pid_controller, &L298N_lb);
 8002252:	4b2a      	ldr	r3, [pc, #168]	@ (80022fc <main+0x114>)
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	4b2b      	ldr	r3, [pc, #172]	@ (8002304 <main+0x11c>)
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	4b26      	ldr	r3, [pc, #152]	@ (80022f4 <main+0x10c>)
 800225c:	4a2a      	ldr	r2, [pc, #168]	@ (8002308 <main+0x120>)
 800225e:	492b      	ldr	r1, [pc, #172]	@ (800230c <main+0x124>)
 8002260:	482b      	ldr	r0, [pc, #172]	@ (8002310 <main+0x128>)
 8002262:	f7ff fcd9 	bl	8001c18 <init_motor>

  pwm_output = 0;
 8002266:	4b2b      	ldr	r3, [pc, #172]	@ (8002314 <main+0x12c>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]
  tick = 0;
 800226c:	492a      	ldr	r1, [pc, #168]	@ (8002318 <main+0x130>)
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	f04f 0300 	mov.w	r3, #0
 8002276:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 800227a:	4823      	ldr	r0, [pc, #140]	@ (8002308 <main+0x120>)
 800227c:	f002 f8f6 	bl	800446c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 8002280:	4826      	ldr	r0, [pc, #152]	@ (800231c <main+0x134>)
 8002282:	f002 f883 	bl	800438c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002286:	2100      	movs	r1, #0
 8002288:	481b      	ldr	r0, [pc, #108]	@ (80022f8 <main+0x110>)
 800228a:	f002 f9c9 	bl	8004620 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800228e:	2104      	movs	r1, #4
 8002290:	4819      	ldr	r0, [pc, #100]	@ (80022f8 <main+0x110>)
 8002292:	f002 f9c5 	bl	8004620 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002296:	2108      	movs	r1, #8
 8002298:	4817      	ldr	r0, [pc, #92]	@ (80022f8 <main+0x110>)
 800229a:	f002 f9c1 	bl	8004620 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800229e:	210c      	movs	r1, #12
 80022a0:	4815      	ldr	r0, [pc, #84]	@ (80022f8 <main+0x110>)
 80022a2:	f002 f9bd 	bl	8004620 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80022a6:	213c      	movs	r1, #60	@ 0x3c
 80022a8:	4811      	ldr	r0, [pc, #68]	@ (80022f0 <main+0x108>)
 80022aa:	f002 fb71 	bl	8004990 <HAL_TIM_Encoder_Start>


  updater_timer_periods = CountPeriodS(lb_motor.motor_updater_tim);
 80022ae:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <main+0x128>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7ff ff72 	bl	800219c <CountPeriodS>
 80022b8:	eef0 7a40 	vmov.f32	s15, s0
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <main+0x138>)
 80022be:	edc3 7a00 	vstr	s15, [r3]
  L298N_set_input_configuration(&L298N_lb, FORWARD);
 80022c2:	2101      	movs	r1, #1
 80022c4:	480d      	ldr	r0, [pc, #52]	@ (80022fc <main+0x114>)
 80022c6:	f7ff fae0 	bl	800188a <L298N_set_input_configuration>
  init_driving_system(&driving_system ,&lb_motor, &lb_motor, &lb_motor, &lb_motor);
 80022ca:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <main+0x128>)
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <main+0x128>)
 80022d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002310 <main+0x128>)
 80022d2:	490f      	ldr	r1, [pc, #60]	@ (8002310 <main+0x128>)
 80022d4:	4813      	ldr	r0, [pc, #76]	@ (8002324 <main+0x13c>)
 80022d6:	f7ff fb1d 	bl	8001914 <init_driving_system>
  default_init_driving_system_if(&drv_system_if);
 80022da:	4813      	ldr	r0, [pc, #76]	@ (8002328 <main+0x140>)
 80022dc:	f7ff fb34 	bl	8001948 <default_init_driving_system_if>

  /* USER CODE END 2 */

  HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 80022e0:	2209      	movs	r2, #9
 80022e2:	4912      	ldr	r1, [pc, #72]	@ (800232c <main+0x144>)
 80022e4:	4812      	ldr	r0, [pc, #72]	@ (8002330 <main+0x148>)
 80022e6:	f003 fe71 	bl	8005fcc <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 80022ea:	bf00      	nop
 80022ec:	e7fd      	b.n	80022ea <main+0x102>
 80022ee:	bf00      	nop
 80022f0:	20000284 	.word	0x20000284
 80022f4:	20000554 	.word	0x20000554
 80022f8:	200001ec 	.word	0x200001ec
 80022fc:	2000058c 	.word	0x2000058c
 8002300:	3dcccccd 	.word	0x3dcccccd
 8002304:	20000574 	.word	0x20000574
 8002308:	2000031c 	.word	0x2000031c
 800230c:	200005a8 	.word	0x200005a8
 8002310:	2000055c 	.word	0x2000055c
 8002314:	200005e2 	.word	0x200005e2
 8002318:	200005e8 	.word	0x200005e8
 800231c:	20000368 	.word	0x20000368
 8002320:	200005d4 	.word	0x200005d4
 8002324:	200005bc 	.word	0x200005bc
 8002328:	200005cc 	.word	0x200005cc
 800232c:	200005d8 	.word	0x200005d8
 8002330:	20000448 	.word	0x20000448

08002334 <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]


	drv_system_if.exe_cmd(&driving_system, cmd_data);
 800233c:	4b06      	ldr	r3, [pc, #24]	@ (8002358 <HAL_UART_RxCpltCallback+0x24>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4906      	ldr	r1, [pc, #24]	@ (800235c <HAL_UART_RxCpltCallback+0x28>)
 8002342:	4807      	ldr	r0, [pc, #28]	@ (8002360 <HAL_UART_RxCpltCallback+0x2c>)
 8002344:	4798      	blx	r3
	HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 8002346:	2209      	movs	r2, #9
 8002348:	4904      	ldr	r1, [pc, #16]	@ (800235c <HAL_UART_RxCpltCallback+0x28>)
 800234a:	4806      	ldr	r0, [pc, #24]	@ (8002364 <HAL_UART_RxCpltCallback+0x30>)
 800234c:	f003 fe3e 	bl	8005fcc <HAL_UART_Receive_IT>

}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	200005cc 	.word	0x200005cc
 800235c:	200005d8 	.word	0x200005d8
 8002360:	200005bc 	.word	0x200005bc
 8002364:	20000448 	.word	0x20000448

08002368 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)lb_motor.motor_updater_tim->Instance) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d10d      	bne.n	800239a <HAL_TIM_PeriodElapsedCallback+0x32>

    	update_motor_position(lb_motor.motor_state, lb_motor.encoder_info);
 800237e:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a08      	ldr	r2, [pc, #32]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002384:	6892      	ldr	r2, [r2, #8]
 8002386:	4611      	mov	r1, r2
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fc90 	bl	8001cae <update_motor_position>
    	update_measured_velocity(&lb_motor);
 800238e:	4805      	ldr	r0, [pc, #20]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002390:	f7ff fcfc 	bl	8001d8c <update_measured_velocity>
    	regulate_velocity(&lb_motor);
 8002394:	4803      	ldr	r0, [pc, #12]	@ (80023a4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002396:	f7ff fc61 	bl	8001c5c <regulate_velocity>
    }



//  /* USER CODE END Callback 1 */
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	2000055c 	.word	0x2000055c

080023a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023ac:	b672      	cpsid	i
}
 80023ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023b0:	bf00      	nop
 80023b2:	e7fd      	b.n	80023b0 <Error_Handler+0x8>

080023b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ba:	4b0f      	ldr	r3, [pc, #60]	@ (80023f8 <HAL_MspInit+0x44>)
 80023bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023be:	4a0e      	ldr	r2, [pc, #56]	@ (80023f8 <HAL_MspInit+0x44>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80023c6:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <HAL_MspInit+0x44>)
 80023c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_MspInit+0x44>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d6:	4a08      	ldr	r2, [pc, #32]	@ (80023f8 <HAL_MspInit+0x44>)
 80023d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80023de:	4b06      	ldr	r3, [pc, #24]	@ (80023f8 <HAL_MspInit+0x44>)
 80023e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023ea:	f000 ffb9 	bl	8003360 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000

080023fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0a0      	sub	sp, #128	@ 0x80
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002414:	f107 0318 	add.w	r3, r7, #24
 8002418:	2254      	movs	r2, #84	@ 0x54
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f006 ffe2 	bl	80093e6 <memset>
  if(huart->Instance==LPUART1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a41      	ldr	r2, [pc, #260]	@ (800252c <HAL_UART_MspInit+0x130>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d13f      	bne.n	80024ac <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800242c:	2320      	movs	r3, #32
 800242e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002430:	2300      	movs	r3, #0
 8002432:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002434:	f107 0318 	add.w	r3, r7, #24
 8002438:	4618      	mov	r0, r3
 800243a:	f001 fd01 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002444:	f7ff ffb0 	bl	80023a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002448:	4b39      	ldr	r3, [pc, #228]	@ (8002530 <HAL_UART_MspInit+0x134>)
 800244a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244c:	4a38      	ldr	r2, [pc, #224]	@ (8002530 <HAL_UART_MspInit+0x134>)
 800244e:	f043 0301 	orr.w	r3, r3, #1
 8002452:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002454:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <HAL_UART_MspInit+0x134>)
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002460:	4b33      	ldr	r3, [pc, #204]	@ (8002530 <HAL_UART_MspInit+0x134>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002464:	4a32      	ldr	r2, [pc, #200]	@ (8002530 <HAL_UART_MspInit+0x134>)
 8002466:	f043 0301 	orr.w	r3, r3, #1
 800246a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246c:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <HAL_UART_MspInit+0x134>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002478:	230c      	movs	r3, #12
 800247a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002488:	230c      	movs	r3, #12
 800248a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002490:	4619      	mov	r1, r3
 8002492:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002496:	f000 fd25 	bl	8002ee4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800249a:	2200      	movs	r2, #0
 800249c:	2100      	movs	r1, #0
 800249e:	205b      	movs	r0, #91	@ 0x5b
 80024a0:	f000 fc38 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80024a4:	205b      	movs	r0, #91	@ 0x5b
 80024a6:	f000 fc4f 	bl	8002d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80024aa:	e03a      	b.n	8002522 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a20      	ldr	r2, [pc, #128]	@ (8002534 <HAL_UART_MspInit+0x138>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d135      	bne.n	8002522 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80024b6:	2301      	movs	r3, #1
 80024b8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024be:	f107 0318 	add.w	r3, r7, #24
 80024c2:	4618      	mov	r0, r3
 80024c4:	f001 fcbc 	bl	8003e40 <HAL_RCCEx_PeriphCLKConfig>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80024ce:	f7ff ff6b 	bl	80023a8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024d2:	4b17      	ldr	r3, [pc, #92]	@ (8002530 <HAL_UART_MspInit+0x134>)
 80024d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d6:	4a16      	ldr	r2, [pc, #88]	@ (8002530 <HAL_UART_MspInit+0x134>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80024de:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <HAL_UART_MspInit+0x134>)
 80024e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ea:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <HAL_UART_MspInit+0x134>)
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	4a10      	ldr	r2, [pc, #64]	@ (8002530 <HAL_UART_MspInit+0x134>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002530 <HAL_UART_MspInit+0x134>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	60bb      	str	r3, [r7, #8]
 8002500:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002502:	2330      	movs	r3, #48	@ 0x30
 8002504:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002512:	2307      	movs	r3, #7
 8002514:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002516:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800251a:	4619      	mov	r1, r3
 800251c:	4806      	ldr	r0, [pc, #24]	@ (8002538 <HAL_UART_MspInit+0x13c>)
 800251e:	f000 fce1 	bl	8002ee4 <HAL_GPIO_Init>
}
 8002522:	bf00      	nop
 8002524:	3780      	adds	r7, #128	@ 0x80
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	40008000 	.word	0x40008000
 8002530:	40021000 	.word	0x40021000
 8002534:	40013800 	.word	0x40013800
 8002538:	48000800 	.word	0x48000800

0800253c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a16      	ldr	r2, [pc, #88]	@ (80025a4 <HAL_TIM_Base_MspInit+0x68>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d10c      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254e:	4b16      	ldr	r3, [pc, #88]	@ (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002552:	4a15      	ldr	r2, [pc, #84]	@ (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002554:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002558:	6613      	str	r3, [r2, #96]	@ 0x60
 800255a:	4b13      	ldr	r3, [pc, #76]	@ (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 800255c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002566:	e018      	b.n	800259a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a0f      	ldr	r2, [pc, #60]	@ (80025ac <HAL_TIM_Base_MspInit+0x70>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d113      	bne.n	800259a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002576:	4a0c      	ldr	r2, [pc, #48]	@ (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002578:	f043 0320 	orr.w	r3, r3, #32
 800257c:	6593      	str	r3, [r2, #88]	@ 0x58
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_TIM_Base_MspInit+0x6c>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2037      	movs	r0, #55	@ 0x37
 8002590:	f000 fbc0 	bl	8002d14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002594:	2037      	movs	r0, #55	@ 0x37
 8002596:	f000 fbd7 	bl	8002d48 <HAL_NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40001400 	.word	0x40001400

080025b0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b090      	sub	sp, #64	@ 0x40
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6c      	ldr	r2, [pc, #432]	@ (8002780 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d129      	bne.n	8002626 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	4a6b      	ldr	r2, [pc, #428]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80025d8:	f043 0302 	orr.w	r3, r3, #2
 80025dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80025de:	4b69      	ldr	r3, [pc, #420]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ea:	4b66      	ldr	r3, [pc, #408]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80025ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ee:	4a65      	ldr	r2, [pc, #404]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f6:	4b63      	ldr	r3, [pc, #396]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80025f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002602:	2350      	movs	r3, #80	@ 0x50
 8002604:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002612:	2302      	movs	r3, #2
 8002614:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002616:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800261a:	4619      	mov	r1, r3
 800261c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002620:	f000 fc60 	bl	8002ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002624:	e0a7      	b.n	8002776 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a57      	ldr	r2, [pc, #348]	@ (8002788 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d12a      	bne.n	8002686 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002630:	4b54      	ldr	r3, [pc, #336]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002634:	4a53      	ldr	r2, [pc, #332]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002636:	f043 0304 	orr.w	r3, r3, #4
 800263a:	6593      	str	r3, [r2, #88]	@ 0x58
 800263c:	4b51      	ldr	r3, [pc, #324]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	623b      	str	r3, [r7, #32]
 8002646:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b4e      	ldr	r3, [pc, #312]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800264a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264c:	4a4d      	ldr	r2, [pc, #308]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002654:	4b4b      	ldr	r3, [pc, #300]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002660:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002664:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002672:	230a      	movs	r3, #10
 8002674:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002676:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800267a:	4619      	mov	r1, r3
 800267c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002680:	f000 fc30 	bl	8002ee4 <HAL_GPIO_Init>
}
 8002684:	e077      	b.n	8002776 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a40      	ldr	r2, [pc, #256]	@ (800278c <HAL_TIM_Encoder_MspInit+0x1dc>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d145      	bne.n	800271c <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002690:	4b3c      	ldr	r3, [pc, #240]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002694:	4a3b      	ldr	r2, [pc, #236]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	6593      	str	r3, [r2, #88]	@ 0x58
 800269c:	4b39      	ldr	r3, [pc, #228]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026a8:	4b36      	ldr	r3, [pc, #216]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ac:	4a35      	ldr	r2, [pc, #212]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026b4:	4b33      	ldr	r3, [pc, #204]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b8:	f003 0302 	and.w	r3, r3, #2
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c0:	4b30      	ldr	r3, [pc, #192]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026c4:	4a2f      	ldr	r2, [pc, #188]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	613b      	str	r3, [r7, #16]
 80026d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026d8:	2304      	movs	r3, #4
 80026da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026dc:	2302      	movs	r3, #2
 80026de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e0:	2300      	movs	r3, #0
 80026e2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e4:	2300      	movs	r3, #0
 80026e6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026e8:	2302      	movs	r3, #2
 80026ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026f0:	4619      	mov	r1, r3
 80026f2:	4827      	ldr	r0, [pc, #156]	@ (8002790 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80026f4:	f000 fbf6 	bl	8002ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80026f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 800270a:	2301      	movs	r3, #1
 800270c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800270e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002712:	4619      	mov	r1, r3
 8002714:	481f      	ldr	r0, [pc, #124]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002716:	f000 fbe5 	bl	8002ee4 <HAL_GPIO_Init>
}
 800271a:	e02c      	b.n	8002776 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d127      	bne.n	8002776 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002726:	4b17      	ldr	r3, [pc, #92]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272a:	4a16      	ldr	r2, [pc, #88]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800272c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002730:	6613      	str	r3, [r2, #96]	@ 0x60
 8002732:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002736:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800273e:	4b11      	ldr	r3, [pc, #68]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002742:	4a10      	ldr	r2, [pc, #64]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002744:	f043 0304 	orr.w	r3, r3, #4
 8002748:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800274a:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	60bb      	str	r3, [r7, #8]
 8002754:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002756:	23c0      	movs	r3, #192	@ 0xc0
 8002758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275a:	2302      	movs	r3, #2
 800275c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002766:	2304      	movs	r3, #4
 8002768:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800276a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800276e:	4619      	mov	r1, r3
 8002770:	4808      	ldr	r0, [pc, #32]	@ (8002794 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002772:	f000 fbb7 	bl	8002ee4 <HAL_GPIO_Init>
}
 8002776:	bf00      	nop
 8002778:	3740      	adds	r7, #64	@ 0x40
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40000400 	.word	0x40000400
 8002784:	40021000 	.word	0x40021000
 8002788:	40000800 	.word	0x40000800
 800278c:	40000c00 	.word	0x40000c00
 8002790:	48000400 	.word	0x48000400
 8002794:	48000800 	.word	0x48000800
 8002798:	40013400 	.word	0x40013400

0800279c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b088      	sub	sp, #32
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 030c 	add.w	r3, r7, #12
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a11      	ldr	r2, [pc, #68]	@ (8002800 <HAL_TIM_MspPostInit+0x64>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d11b      	bne.n	80027f6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <HAL_TIM_MspPostInit+0x68>)
 80027c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027c2:	4a10      	ldr	r2, [pc, #64]	@ (8002804 <HAL_TIM_MspPostInit+0x68>)
 80027c4:	f043 0304 	orr.w	r3, r3, #4
 80027c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002804 <HAL_TIM_MspPostInit+0x68>)
 80027cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80027d6:	230f      	movs	r3, #15
 80027d8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027ea:	f107 030c 	add.w	r3, r7, #12
 80027ee:	4619      	mov	r1, r3
 80027f0:	4805      	ldr	r0, [pc, #20]	@ (8002808 <HAL_TIM_MspPostInit+0x6c>)
 80027f2:	f000 fb77 	bl	8002ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027f6:	bf00      	nop
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40012c00 	.word	0x40012c00
 8002804:	40021000 	.word	0x40021000
 8002808:	48000800 	.word	0x48000800

0800280c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b08c      	sub	sp, #48	@ 0x30
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002818:	2300      	movs	r3, #0
 800281a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800281c:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <HAL_InitTick+0xc4>)
 800281e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002820:	4a2b      	ldr	r2, [pc, #172]	@ (80028d0 <HAL_InitTick+0xc4>)
 8002822:	f043 0310 	orr.w	r3, r3, #16
 8002826:	6593      	str	r3, [r2, #88]	@ 0x58
 8002828:	4b29      	ldr	r3, [pc, #164]	@ (80028d0 <HAL_InitTick+0xc4>)
 800282a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002834:	f107 020c 	add.w	r2, r7, #12
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f001 fa86 	bl	8003d50 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002844:	f001 fa58 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
 8002848:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800284a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284c:	4a21      	ldr	r2, [pc, #132]	@ (80028d4 <HAL_InitTick+0xc8>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0c9b      	lsrs	r3, r3, #18
 8002854:	3b01      	subs	r3, #1
 8002856:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002858:	4b1f      	ldr	r3, [pc, #124]	@ (80028d8 <HAL_InitTick+0xcc>)
 800285a:	4a20      	ldr	r2, [pc, #128]	@ (80028dc <HAL_InitTick+0xd0>)
 800285c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800285e:	4b1e      	ldr	r3, [pc, #120]	@ (80028d8 <HAL_InitTick+0xcc>)
 8002860:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002864:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002866:	4a1c      	ldr	r2, [pc, #112]	@ (80028d8 <HAL_InitTick+0xcc>)
 8002868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800286c:	4b1a      	ldr	r3, [pc, #104]	@ (80028d8 <HAL_InitTick+0xcc>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002872:	4b19      	ldr	r3, [pc, #100]	@ (80028d8 <HAL_InitTick+0xcc>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002878:	4817      	ldr	r0, [pc, #92]	@ (80028d8 <HAL_InitTick+0xcc>)
 800287a:	f001 fd2f 	bl	80042dc <HAL_TIM_Base_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002884:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002888:	2b00      	cmp	r3, #0
 800288a:	d11b      	bne.n	80028c4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800288c:	4812      	ldr	r0, [pc, #72]	@ (80028d8 <HAL_InitTick+0xcc>)
 800288e:	f001 fded 	bl	800446c <HAL_TIM_Base_Start_IT>
 8002892:	4603      	mov	r3, r0
 8002894:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002898:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80028a0:	2036      	movs	r0, #54	@ 0x36
 80028a2:	f000 fa51 	bl	8002d48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b0f      	cmp	r3, #15
 80028aa:	d808      	bhi.n	80028be <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80028ac:	2200      	movs	r2, #0
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	2036      	movs	r0, #54	@ 0x36
 80028b2:	f000 fa2f 	bl	8002d14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028b6:	4a0a      	ldr	r2, [pc, #40]	@ (80028e0 <HAL_InitTick+0xd4>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e002      	b.n	80028c4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80028c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3730      	adds	r7, #48	@ 0x30
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	200005f0 	.word	0x200005f0
 80028dc:	40001000 	.word	0x40001000
 80028e0:	20000004 	.word	0x20000004

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <NMI_Handler+0x4>

080028ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <HardFault_Handler+0x4>

080028f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <MemManage_Handler+0x4>

080028fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <BusFault_Handler+0x4>

08002904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <UsageFault_Handler+0x4>

0800290c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
	...

0800291c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002920:	4802      	ldr	r0, [pc, #8]	@ (800292c <TIM6_DAC_IRQHandler+0x10>)
 8002922:	f002 f8c3 	bl	8004aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200005f0 	.word	0x200005f0

08002930 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002934:	4802      	ldr	r0, [pc, #8]	@ (8002940 <TIM7_DAC_IRQHandler+0x10>)
 8002936:	f002 f8b9 	bl	8004aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	2000031c 	.word	0x2000031c

08002944 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002948:	4802      	ldr	r0, [pc, #8]	@ (8002954 <LPUART1_IRQHandler+0x10>)
 800294a:	f003 fb8b 	bl	8006064 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000448 	.word	0x20000448

08002958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
	return 1;
 800295c:	2301      	movs	r3, #1
}
 800295e:	4618      	mov	r0, r3
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <_kill>:

int _kill(int pid, int sig)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002972:	f006 fd99 	bl	80094a8 <__errno>
 8002976:	4603      	mov	r3, r0
 8002978:	2216      	movs	r2, #22
 800297a:	601a      	str	r2, [r3, #0]
	return -1;
 800297c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <_exit>:

void _exit (int status)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002990:	f04f 31ff 	mov.w	r1, #4294967295
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff ffe7 	bl	8002968 <_kill>
	while (1) {}		/* Make sure we hang here */
 800299a:	bf00      	nop
 800299c:	e7fd      	b.n	800299a <_exit+0x12>

0800299e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	60f8      	str	r0, [r7, #12]
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	e00a      	b.n	80029c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80029b0:	f3af 8000 	nop.w
 80029b4:	4601      	mov	r1, r0
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	1c5a      	adds	r2, r3, #1
 80029ba:	60ba      	str	r2, [r7, #8]
 80029bc:	b2ca      	uxtb	r2, r1
 80029be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	3301      	adds	r3, #1
 80029c4:	617b      	str	r3, [r7, #20]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	dbf0      	blt.n	80029b0 <_read+0x12>
	}

return len;
 80029ce:	687b      	ldr	r3, [r7, #4]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e009      	b.n	80029fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	60ba      	str	r2, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	3301      	adds	r3, #1
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	dbf1      	blt.n	80029ea <_write+0x12>
	}
	return len;
 8002a06:	687b      	ldr	r3, [r7, #4]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_close>:

int _close(int file)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	return -1;
 8002a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a38:	605a      	str	r2, [r3, #4]
	return 0;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <_isatty>:

int _isatty(int file)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	return 1;
 8002a50:	2301      	movs	r3, #1
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b085      	sub	sp, #20
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
	return 0;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a80:	4a14      	ldr	r2, [pc, #80]	@ (8002ad4 <_sbrk+0x5c>)
 8002a82:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <_sbrk+0x60>)
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a8c:	4b13      	ldr	r3, [pc, #76]	@ (8002adc <_sbrk+0x64>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <_sbrk+0x64>)
 8002a96:	4a12      	ldr	r2, [pc, #72]	@ (8002ae0 <_sbrk+0x68>)
 8002a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a9a:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <_sbrk+0x64>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d207      	bcs.n	8002ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002aa8:	f006 fcfe 	bl	80094a8 <__errno>
 8002aac:	4603      	mov	r3, r0
 8002aae:	220c      	movs	r2, #12
 8002ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ab6:	e009      	b.n	8002acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ab8:	4b08      	ldr	r3, [pc, #32]	@ (8002adc <_sbrk+0x64>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002abe:	4b07      	ldr	r3, [pc, #28]	@ (8002adc <_sbrk+0x64>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a05      	ldr	r2, [pc, #20]	@ (8002adc <_sbrk+0x64>)
 8002ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3718      	adds	r7, #24
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20020000 	.word	0x20020000
 8002ad8:	00000400 	.word	0x00000400
 8002adc:	2000063c 	.word	0x2000063c
 8002ae0:	20000820 	.word	0x20000820

08002ae4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <SystemInit+0x20>)
 8002aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aee:	4a05      	ldr	r2, [pc, #20]	@ (8002b04 <SystemInit+0x20>)
 8002af0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002af4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002b08:	480d      	ldr	r0, [pc, #52]	@ (8002b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002b0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b0c:	f7ff ffea 	bl	8002ae4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b10:	480c      	ldr	r0, [pc, #48]	@ (8002b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8002b12:	490d      	ldr	r1, [pc, #52]	@ (8002b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002b14:	4a0d      	ldr	r2, [pc, #52]	@ (8002b4c <LoopForever+0xe>)
  movs r3, #0
 8002b16:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002b18:	e002      	b.n	8002b20 <LoopCopyDataInit>

08002b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1e:	3304      	adds	r3, #4

08002b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b24:	d3f9      	bcc.n	8002b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002b28:	4c0a      	ldr	r4, [pc, #40]	@ (8002b54 <LoopForever+0x16>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b2c:	e001      	b.n	8002b32 <LoopFillZerobss>

08002b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b30:	3204      	adds	r2, #4

08002b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b34:	d3fb      	bcc.n	8002b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b36:	f006 fcbd 	bl	80094b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b3a:	f7ff fb55 	bl	80021e8 <main>

08002b3e <LoopForever>:

LoopForever:
    b LoopForever
 8002b3e:	e7fe      	b.n	8002b3e <LoopForever>
  ldr   r0, =_estack
 8002b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b48:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002b4c:	0800d944 	.word	0x0800d944
  ldr r2, =_sbss
 8002b50:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002b54:	2000081c 	.word	0x2000081c

08002b58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b58:	e7fe      	b.n	8002b58 <ADC1_2_IRQHandler>

08002b5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b60:	2300      	movs	r3, #0
 8002b62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b64:	2003      	movs	r0, #3
 8002b66:	f000 f8ca 	bl	8002cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b6a:	200f      	movs	r0, #15
 8002b6c:	f7ff fe4e 	bl	800280c <HAL_InitTick>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	71fb      	strb	r3, [r7, #7]
 8002b7a:	e001      	b.n	8002b80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b7c:	f7ff fc1a 	bl	80023b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b80:	79fb      	ldrb	r3, [r7, #7]

}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
	...

08002b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_GetTick+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 }
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000640 	.word	0x20000640

08002ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bd6:	4a04      	ldr	r2, [pc, #16]	@ (8002be8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	60d3      	str	r3, [r2, #12]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	e000ed00 	.word	0xe000ed00

08002bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bf0:	4b04      	ldr	r3, [pc, #16]	@ (8002c04 <__NVIC_GetPriorityGrouping+0x18>)
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	0a1b      	lsrs	r3, r3, #8
 8002bf6:	f003 0307 	and.w	r3, r3, #7
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000ed00 	.word	0xe000ed00

08002c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	db0b      	blt.n	8002c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	f003 021f 	and.w	r2, r3, #31
 8002c20:	4907      	ldr	r1, [pc, #28]	@ (8002c40 <__NVIC_EnableIRQ+0x38>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	095b      	lsrs	r3, r3, #5
 8002c28:	2001      	movs	r0, #1
 8002c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	e000e100 	.word	0xe000e100

08002c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	db0a      	blt.n	8002c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	490c      	ldr	r1, [pc, #48]	@ (8002c90 <__NVIC_SetPriority+0x4c>)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	0112      	lsls	r2, r2, #4
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	440b      	add	r3, r1
 8002c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c6c:	e00a      	b.n	8002c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	b2da      	uxtb	r2, r3
 8002c72:	4908      	ldr	r1, [pc, #32]	@ (8002c94 <__NVIC_SetPriority+0x50>)
 8002c74:	79fb      	ldrb	r3, [r7, #7]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	3b04      	subs	r3, #4
 8002c7c:	0112      	lsls	r2, r2, #4
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	440b      	add	r3, r1
 8002c82:	761a      	strb	r2, [r3, #24]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000e100 	.word	0xe000e100
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	@ 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	f1c3 0307 	rsb	r3, r3, #7
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	bf28      	it	cs
 8002cb6:	2304      	movcs	r3, #4
 8002cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	2b06      	cmp	r3, #6
 8002cc0:	d902      	bls.n	8002cc8 <NVIC_EncodePriority+0x30>
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3b03      	subs	r3, #3
 8002cc6:	e000      	b.n	8002cca <NVIC_EncodePriority+0x32>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	401a      	ands	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cea:	43d9      	mvns	r1, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	4313      	orrs	r3, r2
         );
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	@ 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7ff ff4c 	bl	8002ba4 <__NVIC_SetPriorityGrouping>
}
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d22:	f7ff ff63 	bl	8002bec <__NVIC_GetPriorityGrouping>
 8002d26:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	6978      	ldr	r0, [r7, #20]
 8002d2e:	f7ff ffb3 	bl	8002c98 <NVIC_EncodePriority>
 8002d32:	4602      	mov	r2, r0
 8002d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff82 	bl	8002c44 <__NVIC_SetPriority>
}
 8002d40:	bf00      	nop
 8002d42:	3718      	adds	r7, #24
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff ff56 	bl	8002c08 <__NVIC_EnableIRQ>
}
 8002d5c:	bf00      	nop
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d005      	beq.n	8002d88 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2204      	movs	r2, #4
 8002d80:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	73fb      	strb	r3, [r7, #15]
 8002d86:	e037      	b.n	8002df8 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 020e 	bic.w	r2, r2, #14
 8002d96:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002da6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dca:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002dd4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00c      	beq.n	8002df8 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dec:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002df6:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d00d      	beq.n	8002e4a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2204      	movs	r2, #4
 8002e32:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e047      	b.n	8002eda <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 020e 	bic.w	r2, r2, #14
 8002e58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0201 	bic.w	r2, r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f003 021f 	and.w	r2, r3, #31
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e96:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00c      	beq.n	8002eba <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002eb8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	4798      	blx	r3
    }
  }
  return status;
 8002eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ef2:	e15a      	b.n	80031aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	2101      	movs	r1, #1
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	fa01 f303 	lsl.w	r3, r1, r3
 8002f00:	4013      	ands	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 814c 	beq.w	80031a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 0303 	and.w	r3, r3, #3
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d005      	beq.n	8002f24 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d130      	bne.n	8002f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2203      	movs	r2, #3
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 0201 	and.w	r2, r3, #1
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	2b03      	cmp	r3, #3
 8002f90:	d017      	beq.n	8002fc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d123      	bne.n	8003016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	08da      	lsrs	r2, r3, #3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3208      	adds	r2, #8
 8002fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	220f      	movs	r2, #15
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	43db      	mvns	r3, r3
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	691a      	ldr	r2, [r3, #16]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4313      	orrs	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	08da      	lsrs	r2, r3, #3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	3208      	adds	r2, #8
 8003010:	6939      	ldr	r1, [r7, #16]
 8003012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	4013      	ands	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	4313      	orrs	r3, r2
 8003042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80a6 	beq.w	80031a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003058:	4b5b      	ldr	r3, [pc, #364]	@ (80031c8 <HAL_GPIO_Init+0x2e4>)
 800305a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800305c:	4a5a      	ldr	r2, [pc, #360]	@ (80031c8 <HAL_GPIO_Init+0x2e4>)
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	6613      	str	r3, [r2, #96]	@ 0x60
 8003064:	4b58      	ldr	r3, [pc, #352]	@ (80031c8 <HAL_GPIO_Init+0x2e4>)
 8003066:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003070:	4a56      	ldr	r2, [pc, #344]	@ (80031cc <HAL_GPIO_Init+0x2e8>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	089b      	lsrs	r3, r3, #2
 8003076:	3302      	adds	r3, #2
 8003078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	220f      	movs	r2, #15
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800309a:	d01f      	beq.n	80030dc <HAL_GPIO_Init+0x1f8>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a4c      	ldr	r2, [pc, #304]	@ (80031d0 <HAL_GPIO_Init+0x2ec>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d019      	beq.n	80030d8 <HAL_GPIO_Init+0x1f4>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a4b      	ldr	r2, [pc, #300]	@ (80031d4 <HAL_GPIO_Init+0x2f0>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d013      	beq.n	80030d4 <HAL_GPIO_Init+0x1f0>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a4a      	ldr	r2, [pc, #296]	@ (80031d8 <HAL_GPIO_Init+0x2f4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d00d      	beq.n	80030d0 <HAL_GPIO_Init+0x1ec>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a49      	ldr	r2, [pc, #292]	@ (80031dc <HAL_GPIO_Init+0x2f8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d007      	beq.n	80030cc <HAL_GPIO_Init+0x1e8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a48      	ldr	r2, [pc, #288]	@ (80031e0 <HAL_GPIO_Init+0x2fc>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d101      	bne.n	80030c8 <HAL_GPIO_Init+0x1e4>
 80030c4:	2305      	movs	r3, #5
 80030c6:	e00a      	b.n	80030de <HAL_GPIO_Init+0x1fa>
 80030c8:	2306      	movs	r3, #6
 80030ca:	e008      	b.n	80030de <HAL_GPIO_Init+0x1fa>
 80030cc:	2304      	movs	r3, #4
 80030ce:	e006      	b.n	80030de <HAL_GPIO_Init+0x1fa>
 80030d0:	2303      	movs	r3, #3
 80030d2:	e004      	b.n	80030de <HAL_GPIO_Init+0x1fa>
 80030d4:	2302      	movs	r3, #2
 80030d6:	e002      	b.n	80030de <HAL_GPIO_Init+0x1fa>
 80030d8:	2301      	movs	r3, #1
 80030da:	e000      	b.n	80030de <HAL_GPIO_Init+0x1fa>
 80030dc:	2300      	movs	r3, #0
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	f002 0203 	and.w	r2, r2, #3
 80030e4:	0092      	lsls	r2, r2, #2
 80030e6:	4093      	lsls	r3, r2
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030ee:	4937      	ldr	r1, [pc, #220]	@ (80031cc <HAL_GPIO_Init+0x2e8>)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030fc:	4b39      	ldr	r3, [pc, #228]	@ (80031e4 <HAL_GPIO_Init+0x300>)
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	43db      	mvns	r3, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4013      	ands	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003120:	4a30      	ldr	r2, [pc, #192]	@ (80031e4 <HAL_GPIO_Init+0x300>)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003126:	4b2f      	ldr	r3, [pc, #188]	@ (80031e4 <HAL_GPIO_Init+0x300>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	43db      	mvns	r3, r3
 8003130:	693a      	ldr	r2, [r7, #16]
 8003132:	4013      	ands	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800314a:	4a26      	ldr	r2, [pc, #152]	@ (80031e4 <HAL_GPIO_Init+0x300>)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003150:	4b24      	ldr	r3, [pc, #144]	@ (80031e4 <HAL_GPIO_Init+0x300>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003174:	4a1b      	ldr	r2, [pc, #108]	@ (80031e4 <HAL_GPIO_Init+0x300>)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800317a:	4b1a      	ldr	r3, [pc, #104]	@ (80031e4 <HAL_GPIO_Init+0x300>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800319e:	4a11      	ldr	r2, [pc, #68]	@ (80031e4 <HAL_GPIO_Init+0x300>)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3301      	adds	r3, #1
 80031a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	fa22 f303 	lsr.w	r3, r2, r3
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	f47f ae9d 	bne.w	8002ef4 <HAL_GPIO_Init+0x10>
  }
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40010000 	.word	0x40010000
 80031d0:	48000400 	.word	0x48000400
 80031d4:	48000800 	.word	0x48000800
 80031d8:	48000c00 	.word	0x48000c00
 80031dc:	48001000 	.word	0x48001000
 80031e0:	48001400 	.word	0x48001400
 80031e4:	40010400 	.word	0x40010400

080031e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	807b      	strh	r3, [r7, #2]
 80031f4:	4613      	mov	r3, r2
 80031f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f8:	787b      	ldrb	r3, [r7, #1]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003204:	e002      	b.n	800320c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d141      	bne.n	80032aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003226:	4b4b      	ldr	r3, [pc, #300]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003232:	d131      	bne.n	8003298 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b47      	ldr	r3, [pc, #284]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800323a:	4a46      	ldr	r2, [pc, #280]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003244:	4b43      	ldr	r3, [pc, #268]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800324c:	4a41      	ldr	r2, [pc, #260]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003254:	4b40      	ldr	r3, [pc, #256]	@ (8003358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2232      	movs	r2, #50	@ 0x32
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	4a3f      	ldr	r2, [pc, #252]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	0c9b      	lsrs	r3, r3, #18
 8003266:	3301      	adds	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326a:	e002      	b.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3b01      	subs	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003272:	4b38      	ldr	r3, [pc, #224]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800327e:	d102      	bne.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f2      	bne.n	800326c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003286:	4b33      	ldr	r3, [pc, #204]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003292:	d158      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e057      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003298:	4b2e      	ldr	r3, [pc, #184]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800329e:	4a2d      	ldr	r2, [pc, #180]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032a8:	e04d      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032b0:	d141      	bne.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b2:	4b28      	ldr	r3, [pc, #160]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032be:	d131      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c0:	4b24      	ldr	r3, [pc, #144]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032c6:	4a23      	ldr	r2, [pc, #140]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d0:	4b20      	ldr	r3, [pc, #128]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80032d8:	4a1e      	ldr	r2, [pc, #120]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2232      	movs	r2, #50	@ 0x32
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	4a1c      	ldr	r2, [pc, #112]	@ (800335c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0c9b      	lsrs	r3, r3, #18
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f6:	e002      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fe:	4b15      	ldr	r3, [pc, #84]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800330a:	d102      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f2      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003312:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800331e:	d112      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e011      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800332a:	4a0a      	ldr	r2, [pc, #40]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003334:	e007      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003336:	4b07      	ldr	r3, [pc, #28]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800333e:	4a05      	ldr	r2, [pc, #20]	@ (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003344:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40007000 	.word	0x40007000
 8003358:	20000000 	.word	0x20000000
 800335c:	431bde83 	.word	0x431bde83

08003360 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a04      	ldr	r2, [pc, #16]	@ (800337c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800336a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800336e:	6093      	str	r3, [r2, #8]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40007000 	.word	0x40007000

08003380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e2fe      	b.n	8003990 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d075      	beq.n	800348a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339e:	4b97      	ldr	r3, [pc, #604]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a8:	4b94      	ldr	r3, [pc, #592]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d102      	bne.n	80033be <HAL_RCC_OscConfig+0x3e>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d002      	beq.n	80033c4 <HAL_RCC_OscConfig+0x44>
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d10b      	bne.n	80033dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	4b8d      	ldr	r3, [pc, #564]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d05b      	beq.n	8003488 <HAL_RCC_OscConfig+0x108>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d157      	bne.n	8003488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e2d9      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_OscConfig+0x74>
 80033e6:	4b85      	ldr	r3, [pc, #532]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a84      	ldr	r2, [pc, #528]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x98>
 80033fe:	4b7f      	ldr	r3, [pc, #508]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7e      	ldr	r2, [pc, #504]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b7c      	ldr	r3, [pc, #496]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7b      	ldr	r2, [pc, #492]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 8003418:	4b78      	ldr	r3, [pc, #480]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a77      	ldr	r2, [pc, #476]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b75      	ldr	r3, [pc, #468]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a74      	ldr	r2, [pc, #464]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800342e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7ff fba8 	bl	8002b8c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7ff fba4 	bl	8002b8c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	@ 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e29e      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003452:	4b6a      	ldr	r3, [pc, #424]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xc0>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7ff fb94 	bl	8002b8c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7ff fb90 	bl	8002b8c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	@ 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e28a      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800347a:	4b60      	ldr	r3, [pc, #384]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0xe8>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d075      	beq.n	8003582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003496:	4b59      	ldr	r3, [pc, #356]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a0:	4b56      	ldr	r3, [pc, #344]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_OscConfig+0x136>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d002      	beq.n	80034bc <HAL_RCC_OscConfig+0x13c>
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d11f      	bne.n	80034fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034bc:	4b4f      	ldr	r3, [pc, #316]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_OscConfig+0x154>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e25d      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d4:	4b49      	ldr	r3, [pc, #292]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	4946      	ldr	r1, [pc, #280]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034e8:	4b45      	ldr	r3, [pc, #276]	@ (8003600 <HAL_RCC_OscConfig+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7ff f98d 	bl	800280c <HAL_InitTick>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d043      	beq.n	8003580 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e249      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d023      	beq.n	800354c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003504:	4b3d      	ldr	r3, [pc, #244]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a3c      	ldr	r2, [pc, #240]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 800350a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800350e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7ff fb3c 	bl	8002b8c <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003518:	f7ff fb38 	bl	8002b8c <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e232      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352a:	4b34      	ldr	r3, [pc, #208]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b31      	ldr	r3, [pc, #196]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	492d      	ldr	r1, [pc, #180]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
 800354a:	e01a      	b.n	8003582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354c:	4b2b      	ldr	r3, [pc, #172]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2a      	ldr	r2, [pc, #168]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003552:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7ff fb18 	bl	8002b8c <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7ff fb14 	bl	8002b8c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e20e      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003572:	4b22      	ldr	r3, [pc, #136]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x1e0>
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d041      	beq.n	8003612 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003596:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800359c:	4a17      	ldr	r2, [pc, #92]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7ff faf1 	bl	8002b8c <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ae:	f7ff faed 	bl	8002b8c <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1e7      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c0:	4b0e      	ldr	r3, [pc, #56]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80035c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ef      	beq.n	80035ae <HAL_RCC_OscConfig+0x22e>
 80035ce:	e020      	b.n	8003612 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d0:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d6:	4a09      	ldr	r2, [pc, #36]	@ (80035fc <HAL_RCC_OscConfig+0x27c>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7ff fad4 	bl	8002b8c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e6:	e00d      	b.n	8003604 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7ff fad0 	bl	8002b8c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d906      	bls.n	8003604 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1ca      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003604:	4b8c      	ldr	r3, [pc, #560]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1ea      	bne.n	80035e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80a6 	beq.w	800376c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003620:	2300      	movs	r3, #0
 8003622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003624:	4b84      	ldr	r3, [pc, #528]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x2b4>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x2b6>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4b7f      	ldr	r3, [pc, #508]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363e:	4a7e      	ldr	r2, [pc, #504]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	@ 0x58
 8003646:	4b7c      	ldr	r3, [pc, #496]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003652:	2301      	movs	r3, #1
 8003654:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003656:	4b79      	ldr	r3, [pc, #484]	@ (800383c <HAL_RCC_OscConfig+0x4bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003662:	4b76      	ldr	r3, [pc, #472]	@ (800383c <HAL_RCC_OscConfig+0x4bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a75      	ldr	r2, [pc, #468]	@ (800383c <HAL_RCC_OscConfig+0x4bc>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7ff fa8d 	bl	8002b8c <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7ff fa89 	bl	8002b8c <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e183      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003688:	4b6c      	ldr	r3, [pc, #432]	@ (800383c <HAL_RCC_OscConfig+0x4bc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d108      	bne.n	80036ae <HAL_RCC_OscConfig+0x32e>
 800369c:	4b66      	ldr	r3, [pc, #408]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036a2:	4a65      	ldr	r2, [pc, #404]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036ac:	e024      	b.n	80036f8 <HAL_RCC_OscConfig+0x378>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d110      	bne.n	80036d8 <HAL_RCC_OscConfig+0x358>
 80036b6:	4b60      	ldr	r3, [pc, #384]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036bc:	4a5e      	ldr	r2, [pc, #376]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036cc:	4a5a      	ldr	r2, [pc, #360]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036d6:	e00f      	b.n	80036f8 <HAL_RCC_OscConfig+0x378>
 80036d8:	4b57      	ldr	r3, [pc, #348]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	4a56      	ldr	r2, [pc, #344]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036e8:	4b53      	ldr	r3, [pc, #332]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036ee:	4a52      	ldr	r2, [pc, #328]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d016      	beq.n	800372e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7ff fa44 	bl	8002b8c <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7ff fa40 	bl	8002b8c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e138      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371e:	4b46      	ldr	r3, [pc, #280]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ed      	beq.n	8003708 <HAL_RCC_OscConfig+0x388>
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7ff fa2d 	bl	8002b8c <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7ff fa29 	bl	8002b8c <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e121      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800374c:	4b3a      	ldr	r3, [pc, #232]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ed      	bne.n	8003736 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800375a:	7ffb      	ldrb	r3, [r7, #31]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003760:	4b35      	ldr	r3, [pc, #212]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003764:	4a34      	ldr	r2, [pc, #208]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d03c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01c      	beq.n	80037ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003780:	4b2d      	ldr	r3, [pc, #180]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003782:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003786:	4a2c      	ldr	r2, [pc, #176]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7ff f9fc 	bl	8002b8c <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003798:	f7ff f9f8 	bl	8002b8c <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0f2      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037aa:	4b23      	ldr	r3, [pc, #140]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <HAL_RCC_OscConfig+0x418>
 80037b8:	e01b      	b.n	80037f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7ff f9df 	bl	8002b8c <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d2:	f7ff f9db 	bl	8002b8c <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e0d5      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037e4:	4b14      	ldr	r3, [pc, #80]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ef      	bne.n	80037d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80c9 	beq.w	800398e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b0c      	cmp	r3, #12
 8003806:	f000 8083 	beq.w	8003910 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d15e      	bne.n	80038d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003812:	4b09      	ldr	r3, [pc, #36]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a08      	ldr	r2, [pc, #32]	@ (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003818:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7ff f9b5 	bl	8002b8c <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003824:	e00c      	b.n	8003840 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7ff f9b1 	bl	8002b8c <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d905      	bls.n	8003840 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0ab      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
 8003838:	40021000 	.word	0x40021000
 800383c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003840:	4b55      	ldr	r3, [pc, #340]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ec      	bne.n	8003826 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384c:	4b52      	ldr	r3, [pc, #328]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	4b52      	ldr	r3, [pc, #328]	@ (800399c <HAL_RCC_OscConfig+0x61c>)
 8003852:	4013      	ands	r3, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6a11      	ldr	r1, [r2, #32]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800385c:	3a01      	subs	r2, #1
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003866:	0212      	lsls	r2, r2, #8
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800386e:	0852      	lsrs	r2, r2, #1
 8003870:	3a01      	subs	r2, #1
 8003872:	0552      	lsls	r2, r2, #21
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0652      	lsls	r2, r2, #25
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003886:	06d2      	lsls	r2, r2, #27
 8003888:	430a      	orrs	r2, r1
 800388a:	4943      	ldr	r1, [pc, #268]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 800388c:	4313      	orrs	r3, r2
 800388e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b41      	ldr	r3, [pc, #260]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a40      	ldr	r2, [pc, #256]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800389c:	4b3e      	ldr	r3, [pc, #248]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a3d      	ldr	r2, [pc, #244]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7ff f970 	bl	8002b8c <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7ff f96c 	bl	8002b8c <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e066      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	4b35      	ldr	r3, [pc, #212]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x530>
 80038ce:	e05e      	b.n	800398e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b31      	ldr	r3, [pc, #196]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a30      	ldr	r2, [pc, #192]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 80038d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038dc:	f7ff f956 	bl	8002b8c <HAL_GetTick>
 80038e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e2:	e008      	b.n	80038f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e4:	f7ff f952 	bl	8002b8c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d901      	bls.n	80038f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80038f2:	2303      	movs	r3, #3
 80038f4:	e04c      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f6:	4b28      	ldr	r3, [pc, #160]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f0      	bne.n	80038e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003902:	4b25      	ldr	r3, [pc, #148]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	4924      	ldr	r1, [pc, #144]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 8003908:	4b25      	ldr	r3, [pc, #148]	@ (80039a0 <HAL_RCC_OscConfig+0x620>)
 800390a:	4013      	ands	r3, r2
 800390c:	60cb      	str	r3, [r1, #12]
 800390e:	e03e      	b.n	800398e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d101      	bne.n	800391c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e039      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800391c:	4b1e      	ldr	r3, [pc, #120]	@ (8003998 <HAL_RCC_OscConfig+0x618>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f003 0203 	and.w	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	429a      	cmp	r2, r3
 800392e:	d12c      	bne.n	800398a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393a:	3b01      	subs	r3, #1
 800393c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d123      	bne.n	800398a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800394c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d11b      	bne.n	800398a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d113      	bne.n	800398a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396c:	085b      	lsrs	r3, r3, #1
 800396e:	3b01      	subs	r3, #1
 8003970:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d109      	bne.n	800398a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003980:	085b      	lsrs	r3, r3, #1
 8003982:	3b01      	subs	r3, #1
 8003984:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3720      	adds	r7, #32
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40021000 	.word	0x40021000
 800399c:	019f800c 	.word	0x019f800c
 80039a0:	feeefffc 	.word	0xfeeefffc

080039a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e11e      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b91      	ldr	r3, [pc, #580]	@ (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d910      	bls.n	80039ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 020f 	bic.w	r2, r3, #15
 80039d2:	498c      	ldr	r1, [pc, #560]	@ (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b8a      	ldr	r3, [pc, #552]	@ (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e106      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d073      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d129      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a00:	4b81      	ldr	r3, [pc, #516]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0f4      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a10:	f000 f9d0 	bl	8003db4 <RCC_GetSysClockFreqFromPLLSource>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4a7c      	ldr	r2, [pc, #496]	@ (8003c0c <HAL_RCC_ClockConfig+0x268>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d93f      	bls.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d033      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12f      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a3e:	4b72      	ldr	r3, [pc, #456]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a46:	4a70      	ldr	r2, [pc, #448]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a4e:	2380      	movs	r3, #128	@ 0x80
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e024      	b.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0c6      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6c:	4b66      	ldr	r3, [pc, #408]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0be      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a7c:	f000 f8ce 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4a61      	ldr	r2, [pc, #388]	@ (8003c0c <HAL_RCC_ClockConfig+0x268>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d909      	bls.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a92:	4a5d      	ldr	r2, [pc, #372]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a9a:	2380      	movs	r3, #128	@ 0x80
 8003a9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a9e:	4b5a      	ldr	r3, [pc, #360]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4957      	ldr	r1, [pc, #348]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab0:	f7ff f86c 	bl	8002b8c <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7ff f868 	bl	8002b8c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e095      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	4b4e      	ldr	r3, [pc, #312]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 020c 	and.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1eb      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d023      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af8:	4b43      	ldr	r3, [pc, #268]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a42      	ldr	r2, [pc, #264]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003afe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b10:	4b3d      	ldr	r3, [pc, #244]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b18:	4a3b      	ldr	r2, [pc, #236]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b39      	ldr	r3, [pc, #228]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4936      	ldr	r1, [pc, #216]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b80      	cmp	r3, #128	@ 0x80
 8003b38:	d105      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b3a:	4b33      	ldr	r3, [pc, #204]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4a32      	ldr	r2, [pc, #200]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b46:	4b2f      	ldr	r3, [pc, #188]	@ (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d21d      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b54:	4b2b      	ldr	r3, [pc, #172]	@ (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 020f 	bic.w	r2, r3, #15
 8003b5c:	4929      	ldr	r1, [pc, #164]	@ (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b64:	f7ff f812 	bl	8002b8c <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7ff f80e 	bl	8002b8c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e03b      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	@ (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1ed      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4917      	ldr	r1, [pc, #92]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bba:	4b13      	ldr	r3, [pc, #76]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	490f      	ldr	r1, [pc, #60]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bce:	f000 f825 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	490c      	ldr	r1, [pc, #48]	@ (8003c10 <HAL_RCC_ClockConfig+0x26c>)
 8003be0:	5ccb      	ldrb	r3, [r1, r3]
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	4a0a      	ldr	r2, [pc, #40]	@ (8003c14 <HAL_RCC_ClockConfig+0x270>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bee:	4b0a      	ldr	r3, [pc, #40]	@ (8003c18 <HAL_RCC_ClockConfig+0x274>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fe fe0a 	bl	800280c <HAL_InitTick>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40022000 	.word	0x40022000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	04c4b400 	.word	0x04c4b400
 8003c10:	0800d4ac 	.word	0x0800d4ac
 8003c14:	20000000 	.word	0x20000000
 8003c18:	20000004 	.word	0x20000004

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c22:	4b2c      	ldr	r3, [pc, #176]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e047      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c34:	4b27      	ldr	r3, [pc, #156]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d102      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c40:	4b26      	ldr	r3, [pc, #152]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e03e      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c46:	4b23      	ldr	r3, [pc, #140]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d136      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c52:	4b20      	ldr	r3, [pc, #128]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3301      	adds	r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d10c      	bne.n	8003c8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c70:	4a1a      	ldr	r2, [pc, #104]	@ (8003cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	4a16      	ldr	r2, [pc, #88]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7a:	68d2      	ldr	r2, [r2, #12]
 8003c7c:	0a12      	lsrs	r2, r2, #8
 8003c7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
      break;
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c8a:	4a13      	ldr	r2, [pc, #76]	@ (8003cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4a10      	ldr	r2, [pc, #64]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	0a12      	lsrs	r2, r2, #8
 8003c98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
      break;
 8003ca2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	0e5b      	lsrs	r3, r3, #25
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e001      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cc4:	693b      	ldr	r3, [r7, #16]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	00f42400 	.word	0x00f42400
 8003cdc:	016e3600 	.word	0x016e3600

08003ce0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ce4:	4b03      	ldr	r3, [pc, #12]	@ (8003cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000000 	.word	0x20000000

08003cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cfc:	f7ff fff0 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d00:	4602      	mov	r2, r0
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	4904      	ldr	r1, [pc, #16]	@ (8003d20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d0e:	5ccb      	ldrb	r3, [r1, r3]
 8003d10:	f003 031f 	and.w	r3, r3, #31
 8003d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	0800d4bc 	.word	0x0800d4bc

08003d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d28:	f7ff ffda 	bl	8003ce0 <HAL_RCC_GetHCLKFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b06      	ldr	r3, [pc, #24]	@ (8003d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	0adb      	lsrs	r3, r3, #11
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	4904      	ldr	r1, [pc, #16]	@ (8003d4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	0800d4bc 	.word	0x0800d4bc

08003d50 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	220f      	movs	r2, #15
 8003d5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d60:	4b12      	ldr	r3, [pc, #72]	@ (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f003 0203 	and.w	r2, r3, #3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d78:	4b0c      	ldr	r3, [pc, #48]	@ (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d84:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <HAL_RCC_GetClockConfig+0x5c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	08db      	lsrs	r3, r3, #3
 8003d8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d92:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <HAL_RCC_GetClockConfig+0x60>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 020f 	and.w	r2, r3, #15
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	601a      	str	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	40022000 	.word	0x40022000

08003db4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dba:	4b1e      	ldr	r3, [pc, #120]	@ (8003e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	091b      	lsrs	r3, r3, #4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b03      	cmp	r3, #3
 8003dd6:	d10c      	bne.n	8003df2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dd8:	4a17      	ldr	r2, [pc, #92]	@ (8003e38 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	4a14      	ldr	r2, [pc, #80]	@ (8003e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003de2:	68d2      	ldr	r2, [r2, #12]
 8003de4:	0a12      	lsrs	r2, r2, #8
 8003de6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	617b      	str	r3, [r7, #20]
    break;
 8003df0:	e00c      	b.n	8003e0c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003df2:	4a12      	ldr	r2, [pc, #72]	@ (8003e3c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8003e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dfc:	68d2      	ldr	r2, [r2, #12]
 8003dfe:	0a12      	lsrs	r2, r2, #8
 8003e00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e04:	fb02 f303 	mul.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
    break;
 8003e0a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e0c:	4b09      	ldr	r3, [pc, #36]	@ (8003e34 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	0e5b      	lsrs	r3, r3, #25
 8003e12:	f003 0303 	and.w	r3, r3, #3
 8003e16:	3301      	adds	r3, #1
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e24:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e26:	687b      	ldr	r3, [r7, #4]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	371c      	adds	r7, #28
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	40021000 	.word	0x40021000
 8003e38:	016e3600 	.word	0x016e3600
 8003e3c:	00f42400 	.word	0x00f42400

08003e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e48:	2300      	movs	r3, #0
 8003e4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8098 	beq.w	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	4b43      	ldr	r3, [pc, #268]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10d      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	4b40      	ldr	r3, [pc, #256]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	4a3f      	ldr	r2, [pc, #252]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e7a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e82:	60bb      	str	r3, [r7, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e86:	2301      	movs	r3, #1
 8003e88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e8a:	4b3a      	ldr	r3, [pc, #232]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a39      	ldr	r2, [pc, #228]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e96:	f7fe fe79 	bl	8002b8c <HAL_GetTick>
 8003e9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e9c:	e009      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9e:	f7fe fe75 	bl	8002b8c <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d902      	bls.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	74fb      	strb	r3, [r7, #19]
        break;
 8003eb0:	e005      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003eb2:	4b30      	ldr	r3, [pc, #192]	@ (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ef      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d159      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ece:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d01e      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d019      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ee0:	4b23      	ldr	r3, [pc, #140]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eec:	4b20      	ldr	r3, [pc, #128]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003efc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f0c:	4a18      	ldr	r2, [pc, #96]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d016      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1e:	f7fe fe35 	bl	8002b8c <HAL_GetTick>
 8003f22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f24:	e00b      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f26:	f7fe fe31 	bl	8002b8c <HAL_GetTick>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	1ad3      	subs	r3, r2, r3
 8003f30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d902      	bls.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	74fb      	strb	r3, [r7, #19]
            break;
 8003f3c:	e006      	b.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0ec      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f4c:	7cfb      	ldrb	r3, [r7, #19]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10b      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f52:	4b07      	ldr	r3, [pc, #28]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f60:	4903      	ldr	r1, [pc, #12]	@ (8003f70 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f68:	e008      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	74bb      	strb	r3, [r7, #18]
 8003f6e:	e005      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f70:	40021000 	.word	0x40021000
 8003f74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f78:	7cfb      	ldrb	r3, [r7, #19]
 8003f7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f7c:	7c7b      	ldrb	r3, [r7, #17]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d105      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f82:	4ba7      	ldr	r3, [pc, #668]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f86:	4aa6      	ldr	r2, [pc, #664]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f8c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f9a:	4ba1      	ldr	r3, [pc, #644]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fa0:	f023 0203 	bic.w	r2, r3, #3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	499d      	ldr	r1, [pc, #628]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00a      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fbc:	4b98      	ldr	r3, [pc, #608]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc2:	f023 020c 	bic.w	r2, r3, #12
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4995      	ldr	r1, [pc, #596]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0304 	and.w	r3, r3, #4
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d00a      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fde:	4b90      	ldr	r3, [pc, #576]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	498c      	ldr	r1, [pc, #560]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00a      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004000:	4b87      	ldr	r3, [pc, #540]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004006:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	4984      	ldr	r1, [pc, #528]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004010:	4313      	orrs	r3, r2
 8004012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0310 	and.w	r3, r3, #16
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004022:	4b7f      	ldr	r3, [pc, #508]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004028:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	497b      	ldr	r1, [pc, #492]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004032:	4313      	orrs	r3, r2
 8004034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0320 	and.w	r3, r3, #32
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004044:	4b76      	ldr	r3, [pc, #472]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800404a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	4973      	ldr	r1, [pc, #460]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004054:	4313      	orrs	r3, r2
 8004056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00a      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004066:	4b6e      	ldr	r3, [pc, #440]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	496a      	ldr	r1, [pc, #424]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00a      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004088:	4b65      	ldr	r3, [pc, #404]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800408e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	4962      	ldr	r1, [pc, #392]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00a      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040b8:	4959      	ldr	r1, [pc, #356]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00a      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040cc:	4b54      	ldr	r3, [pc, #336]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040d2:	f023 0203 	bic.w	r2, r3, #3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040da:	4951      	ldr	r1, [pc, #324]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ee:	4b4c      	ldr	r3, [pc, #304]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fc:	4948      	ldr	r1, [pc, #288]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004110:	4b43      	ldr	r3, [pc, #268]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800411e:	4940      	ldr	r1, [pc, #256]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800412a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800412e:	d105      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004130:	4b3b      	ldr	r3, [pc, #236]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a3a      	ldr	r2, [pc, #232]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004136:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800413a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004144:	2b00      	cmp	r3, #0
 8004146:	d015      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004148:	4b35      	ldr	r3, [pc, #212]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800414a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004156:	4932      	ldr	r1, [pc, #200]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004158:	4313      	orrs	r3, r2
 800415a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004162:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004166:	d105      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004168:	4b2d      	ldr	r3, [pc, #180]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a2c      	ldr	r2, [pc, #176]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800416e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004172:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004180:	4b27      	ldr	r3, [pc, #156]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004186:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800418e:	4924      	ldr	r1, [pc, #144]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800419e:	d105      	bne.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d015      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041b8:	4b19      	ldr	r3, [pc, #100]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c6:	4916      	ldr	r1, [pc, #88]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041d6:	d105      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4a10      	ldr	r2, [pc, #64]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d019      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fe:	4908      	ldr	r1, [pc, #32]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800420e:	d109      	bne.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004210:	4b03      	ldr	r3, [pc, #12]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	4a02      	ldr	r2, [pc, #8]	@ (8004220 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800421a:	60d3      	str	r3, [r2, #12]
 800421c:	e002      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800421e:	bf00      	nop
 8004220:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d015      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004230:	4b29      	ldr	r3, [pc, #164]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004236:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800423e:	4926      	ldr	r1, [pc, #152]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004240:	4313      	orrs	r3, r2
 8004242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800424e:	d105      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004250:	4b21      	ldr	r3, [pc, #132]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	4a20      	ldr	r2, [pc, #128]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004256:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800425a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d015      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004268:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800426e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004276:	4918      	ldr	r1, [pc, #96]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004286:	d105      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004288:	4b13      	ldr	r3, [pc, #76]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	4a12      	ldr	r2, [pc, #72]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800428e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004292:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d015      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042a0:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80042a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ae:	490a      	ldr	r1, [pc, #40]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042be:	d105      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4a04      	ldr	r2, [pc, #16]	@ (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000

080042dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e049      	b.n	8004382 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d106      	bne.n	8004308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7fe f91a 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	3304      	adds	r3, #4
 8004318:	4619      	mov	r1, r3
 800431a:	4610      	mov	r0, r2
 800431c:	f000 ff68 	bl	80051f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b01      	cmp	r3, #1
 800439e:	d001      	beq.n	80043a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e04c      	b.n	800443e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a26      	ldr	r2, [pc, #152]	@ (800444c <HAL_TIM_Base_Start+0xc0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d022      	beq.n	80043fc <HAL_TIM_Base_Start+0x70>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043be:	d01d      	beq.n	80043fc <HAL_TIM_Base_Start+0x70>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a22      	ldr	r2, [pc, #136]	@ (8004450 <HAL_TIM_Base_Start+0xc4>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d018      	beq.n	80043fc <HAL_TIM_Base_Start+0x70>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a21      	ldr	r2, [pc, #132]	@ (8004454 <HAL_TIM_Base_Start+0xc8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <HAL_TIM_Base_Start+0x70>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1f      	ldr	r2, [pc, #124]	@ (8004458 <HAL_TIM_Base_Start+0xcc>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00e      	beq.n	80043fc <HAL_TIM_Base_Start+0x70>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1e      	ldr	r2, [pc, #120]	@ (800445c <HAL_TIM_Base_Start+0xd0>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_TIM_Base_Start+0x70>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004460 <HAL_TIM_Base_Start+0xd4>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_TIM_Base_Start+0x70>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004464 <HAL_TIM_Base_Start+0xd8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d115      	bne.n	8004428 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	4b19      	ldr	r3, [pc, #100]	@ (8004468 <HAL_TIM_Base_Start+0xdc>)
 8004404:	4013      	ands	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b06      	cmp	r3, #6
 800440c:	d015      	beq.n	800443a <HAL_TIM_Base_Start+0xae>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004414:	d011      	beq.n	800443a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0201 	orr.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004426:	e008      	b.n	800443a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0201 	orr.w	r2, r2, #1
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e000      	b.n	800443c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800443a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3714      	adds	r7, #20
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	40012c00 	.word	0x40012c00
 8004450:	40000400 	.word	0x40000400
 8004454:	40000800 	.word	0x40000800
 8004458:	40000c00 	.word	0x40000c00
 800445c:	40013400 	.word	0x40013400
 8004460:	40014000 	.word	0x40014000
 8004464:	40015000 	.word	0x40015000
 8004468:	00010007 	.word	0x00010007

0800446c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800447a:	b2db      	uxtb	r3, r3
 800447c:	2b01      	cmp	r3, #1
 800447e:	d001      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e054      	b.n	800452e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a26      	ldr	r2, [pc, #152]	@ (800453c <HAL_TIM_Base_Start_IT+0xd0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d022      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ae:	d01d      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a22      	ldr	r2, [pc, #136]	@ (8004540 <HAL_TIM_Base_Start_IT+0xd4>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d018      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a21      	ldr	r2, [pc, #132]	@ (8004544 <HAL_TIM_Base_Start_IT+0xd8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d013      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004548 <HAL_TIM_Base_Start_IT+0xdc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00e      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1e      	ldr	r2, [pc, #120]	@ (800454c <HAL_TIM_Base_Start_IT+0xe0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d009      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a1c      	ldr	r2, [pc, #112]	@ (8004550 <HAL_TIM_Base_Start_IT+0xe4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d004      	beq.n	80044ec <HAL_TIM_Base_Start_IT+0x80>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004554 <HAL_TIM_Base_Start_IT+0xe8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d115      	bne.n	8004518 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689a      	ldr	r2, [r3, #8]
 80044f2:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_TIM_Base_Start_IT+0xec>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b06      	cmp	r3, #6
 80044fc:	d015      	beq.n	800452a <HAL_TIM_Base_Start_IT+0xbe>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004504:	d011      	beq.n	800452a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f042 0201 	orr.w	r2, r2, #1
 8004514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004516:	e008      	b.n	800452a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	e000      	b.n	800452c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800452a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40012c00 	.word	0x40012c00
 8004540:	40000400 	.word	0x40000400
 8004544:	40000800 	.word	0x40000800
 8004548:	40000c00 	.word	0x40000c00
 800454c:	40013400 	.word	0x40013400
 8004550:	40014000 	.word	0x40014000
 8004554:	40015000 	.word	0x40015000
 8004558:	00010007 	.word	0x00010007

0800455c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e049      	b.n	8004602 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 f841 	bl	800460a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f000 fe28 	bl	80051f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}

0800460a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800460a:	b480      	push	{r7}
 800460c:	b083      	sub	sp, #12
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <HAL_TIM_PWM_Start+0x24>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	bf14      	ite	ne
 800463c:	2301      	movne	r3, #1
 800463e:	2300      	moveq	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e03c      	b.n	80046be <HAL_TIM_PWM_Start+0x9e>
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	2b04      	cmp	r3, #4
 8004648:	d109      	bne.n	800465e <HAL_TIM_PWM_Start+0x3e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b01      	cmp	r3, #1
 8004654:	bf14      	ite	ne
 8004656:	2301      	movne	r3, #1
 8004658:	2300      	moveq	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	e02f      	b.n	80046be <HAL_TIM_PWM_Start+0x9e>
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	2b08      	cmp	r3, #8
 8004662:	d109      	bne.n	8004678 <HAL_TIM_PWM_Start+0x58>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	bf14      	ite	ne
 8004670:	2301      	movne	r3, #1
 8004672:	2300      	moveq	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	e022      	b.n	80046be <HAL_TIM_PWM_Start+0x9e>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b0c      	cmp	r3, #12
 800467c:	d109      	bne.n	8004692 <HAL_TIM_PWM_Start+0x72>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	bf14      	ite	ne
 800468a:	2301      	movne	r3, #1
 800468c:	2300      	moveq	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	e015      	b.n	80046be <HAL_TIM_PWM_Start+0x9e>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b10      	cmp	r3, #16
 8004696:	d109      	bne.n	80046ac <HAL_TIM_PWM_Start+0x8c>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	bf14      	ite	ne
 80046a4:	2301      	movne	r3, #1
 80046a6:	2300      	moveq	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	e008      	b.n	80046be <HAL_TIM_PWM_Start+0x9e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	bf14      	ite	ne
 80046b8:	2301      	movne	r3, #1
 80046ba:	2300      	moveq	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e0a6      	b.n	8004814 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <HAL_TIM_PWM_Start+0xb6>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2202      	movs	r2, #2
 80046d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046d4:	e023      	b.n	800471e <HAL_TIM_PWM_Start+0xfe>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d104      	bne.n	80046e6 <HAL_TIM_PWM_Start+0xc6>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e4:	e01b      	b.n	800471e <HAL_TIM_PWM_Start+0xfe>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d104      	bne.n	80046f6 <HAL_TIM_PWM_Start+0xd6>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f4:	e013      	b.n	800471e <HAL_TIM_PWM_Start+0xfe>
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b0c      	cmp	r3, #12
 80046fa:	d104      	bne.n	8004706 <HAL_TIM_PWM_Start+0xe6>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2202      	movs	r2, #2
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004704:	e00b      	b.n	800471e <HAL_TIM_PWM_Start+0xfe>
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b10      	cmp	r3, #16
 800470a:	d104      	bne.n	8004716 <HAL_TIM_PWM_Start+0xf6>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004714:	e003      	b.n	800471e <HAL_TIM_PWM_Start+0xfe>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2202      	movs	r2, #2
 800471a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2201      	movs	r2, #1
 8004724:	6839      	ldr	r1, [r7, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f001 f9dc 	bl	8005ae4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3a      	ldr	r2, [pc, #232]	@ (800481c <HAL_TIM_PWM_Start+0x1fc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d018      	beq.n	8004768 <HAL_TIM_PWM_Start+0x148>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a39      	ldr	r2, [pc, #228]	@ (8004820 <HAL_TIM_PWM_Start+0x200>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d013      	beq.n	8004768 <HAL_TIM_PWM_Start+0x148>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a37      	ldr	r2, [pc, #220]	@ (8004824 <HAL_TIM_PWM_Start+0x204>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d00e      	beq.n	8004768 <HAL_TIM_PWM_Start+0x148>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a36      	ldr	r2, [pc, #216]	@ (8004828 <HAL_TIM_PWM_Start+0x208>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d009      	beq.n	8004768 <HAL_TIM_PWM_Start+0x148>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a34      	ldr	r2, [pc, #208]	@ (800482c <HAL_TIM_PWM_Start+0x20c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d004      	beq.n	8004768 <HAL_TIM_PWM_Start+0x148>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a33      	ldr	r2, [pc, #204]	@ (8004830 <HAL_TIM_PWM_Start+0x210>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d101      	bne.n	800476c <HAL_TIM_PWM_Start+0x14c>
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_TIM_PWM_Start+0x14e>
 800476c:	2300      	movs	r3, #0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d007      	beq.n	8004782 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004780:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a25      	ldr	r2, [pc, #148]	@ (800481c <HAL_TIM_PWM_Start+0x1fc>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d022      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x1b2>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004794:	d01d      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x1b2>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a26      	ldr	r2, [pc, #152]	@ (8004834 <HAL_TIM_PWM_Start+0x214>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d018      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x1b2>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a24      	ldr	r2, [pc, #144]	@ (8004838 <HAL_TIM_PWM_Start+0x218>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d013      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x1b2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a23      	ldr	r2, [pc, #140]	@ (800483c <HAL_TIM_PWM_Start+0x21c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00e      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x1b2>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a19      	ldr	r2, [pc, #100]	@ (8004820 <HAL_TIM_PWM_Start+0x200>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d009      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x1b2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a18      	ldr	r2, [pc, #96]	@ (8004824 <HAL_TIM_PWM_Start+0x204>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d004      	beq.n	80047d2 <HAL_TIM_PWM_Start+0x1b2>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <HAL_TIM_PWM_Start+0x210>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d115      	bne.n	80047fe <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	4b19      	ldr	r3, [pc, #100]	@ (8004840 <HAL_TIM_PWM_Start+0x220>)
 80047da:	4013      	ands	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b06      	cmp	r3, #6
 80047e2:	d015      	beq.n	8004810 <HAL_TIM_PWM_Start+0x1f0>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047ea:	d011      	beq.n	8004810 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fc:	e008      	b.n	8004810 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0201 	orr.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	e000      	b.n	8004812 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004810:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40012c00 	.word	0x40012c00
 8004820:	40013400 	.word	0x40013400
 8004824:	40014000 	.word	0x40014000
 8004828:	40014400 	.word	0x40014400
 800482c:	40014800 	.word	0x40014800
 8004830:	40015000 	.word	0x40015000
 8004834:	40000400 	.word	0x40000400
 8004838:	40000800 	.word	0x40000800
 800483c:	40000c00 	.word	0x40000c00
 8004840:	00010007 	.word	0x00010007

08004844 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e097      	b.n	8004988 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7fd fe9f 	bl	80025b0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2202      	movs	r2, #2
 8004876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004888:	f023 0307 	bic.w	r3, r3, #7
 800488c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3304      	adds	r3, #4
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f000 fca9 	bl	80051f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048c6:	f023 0303 	bic.w	r3, r3, #3
 80048ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	4313      	orrs	r3, r2
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	4313      	orrs	r3, r2
 80048dc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80048e4:	f023 030c 	bic.w	r3, r3, #12
 80048e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	021b      	lsls	r3, r3, #8
 8004900:	4313      	orrs	r3, r2
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	011a      	lsls	r2, r3, #4
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	031b      	lsls	r3, r3, #12
 8004914:	4313      	orrs	r3, r2
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004922:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	4313      	orrs	r3, r2
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049a0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80049a8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049b0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049b8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d110      	bne.n	80049e2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d102      	bne.n	80049cc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049c6:	7b7b      	ldrb	r3, [r7, #13]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d001      	beq.n	80049d0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e069      	b.n	8004aa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049e0:	e031      	b.n	8004a46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d110      	bne.n	8004a0a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d102      	bne.n	80049f4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049ee:	7b3b      	ldrb	r3, [r7, #12]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d001      	beq.n	80049f8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e055      	b.n	8004aa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a08:	e01d      	b.n	8004a46 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d108      	bne.n	8004a22 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a10:	7bbb      	ldrb	r3, [r7, #14]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d105      	bne.n	8004a22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a16:	7b7b      	ldrb	r3, [r7, #13]
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d102      	bne.n	8004a22 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a1c:	7b3b      	ldrb	r3, [r7, #12]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d001      	beq.n	8004a26 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e03e      	b.n	8004aa4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2202      	movs	r2, #2
 8004a2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d003      	beq.n	8004a54 <HAL_TIM_Encoder_Start+0xc4>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	d008      	beq.n	8004a64 <HAL_TIM_Encoder_Start+0xd4>
 8004a52:	e00f      	b.n	8004a74 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f001 f841 	bl	8005ae4 <TIM_CCxChannelCmd>
      break;
 8004a62:	e016      	b.n	8004a92 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	2104      	movs	r1, #4
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 f839 	bl	8005ae4 <TIM_CCxChannelCmd>
      break;
 8004a72:	e00e      	b.n	8004a92 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f001 f831 	bl	8005ae4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2201      	movs	r2, #1
 8004a88:	2104      	movs	r1, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f001 f82a 	bl	8005ae4 <TIM_CCxChannelCmd>
      break;
 8004a90:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0201 	orr.w	r2, r2, #1
 8004aa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0202 	mvn.w	r2, #2
 8004ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fb5c 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fb4e 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fb5f 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0304 	and.w	r3, r3, #4
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d020      	beq.n	8004b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0204 	mvn.w	r2, #4
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2202      	movs	r2, #2
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fb36 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fb28 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb39 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d020      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0308 	and.w	r3, r3, #8
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0208 	mvn.w	r2, #8
 8004b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2204      	movs	r2, #4
 8004b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f003 0303 	and.w	r3, r3, #3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fb10 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fb02 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fb13 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d020      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0310 	and.w	r3, r3, #16
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01b      	beq.n	8004bf4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0210 	mvn.w	r2, #16
 8004bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2208      	movs	r2, #8
 8004bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d003      	beq.n	8004be2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 faea 	bl	80051b4 <HAL_TIM_IC_CaptureCallback>
 8004be0:	e005      	b.n	8004bee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fadc 	bl	80051a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f000 faed 	bl	80051c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00c      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d007      	beq.n	8004c18 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0201 	mvn.w	r2, #1
 8004c10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fd fba8 	bl	8002368 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00c      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d007      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 f8a9 	bl	8005d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00c      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f001 f8a1 	bl	8005dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00c      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d007      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 faa7 	bl	80051dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00c      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f06f 0220 	mvn.w	r2, #32
 8004caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f001 f869 	bl	8005d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00c      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d007      	beq.n	8004cd6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 f875 	bl	8005dc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00c      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f001 f86d 	bl	8005dd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00c      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d007      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f001 f865 	bl	8005de8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00c      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d007      	beq.n	8004d42 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f001 f85d 	bl	8005dfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d42:	bf00      	nop
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d66:	2302      	movs	r3, #2
 8004d68:	e0ff      	b.n	8004f6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b14      	cmp	r3, #20
 8004d76:	f200 80f0 	bhi.w	8004f5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004dd5 	.word	0x08004dd5
 8004d84:	08004f5b 	.word	0x08004f5b
 8004d88:	08004f5b 	.word	0x08004f5b
 8004d8c:	08004f5b 	.word	0x08004f5b
 8004d90:	08004e15 	.word	0x08004e15
 8004d94:	08004f5b 	.word	0x08004f5b
 8004d98:	08004f5b 	.word	0x08004f5b
 8004d9c:	08004f5b 	.word	0x08004f5b
 8004da0:	08004e57 	.word	0x08004e57
 8004da4:	08004f5b 	.word	0x08004f5b
 8004da8:	08004f5b 	.word	0x08004f5b
 8004dac:	08004f5b 	.word	0x08004f5b
 8004db0:	08004e97 	.word	0x08004e97
 8004db4:	08004f5b 	.word	0x08004f5b
 8004db8:	08004f5b 	.word	0x08004f5b
 8004dbc:	08004f5b 	.word	0x08004f5b
 8004dc0:	08004ed9 	.word	0x08004ed9
 8004dc4:	08004f5b 	.word	0x08004f5b
 8004dc8:	08004f5b 	.word	0x08004f5b
 8004dcc:	08004f5b 	.word	0x08004f5b
 8004dd0:	08004f19 	.word	0x08004f19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fabc 	bl	8005358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	699a      	ldr	r2, [r3, #24]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f042 0208 	orr.w	r2, r2, #8
 8004dee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0204 	bic.w	r2, r2, #4
 8004dfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	6999      	ldr	r1, [r3, #24]
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	691a      	ldr	r2, [r3, #16]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	619a      	str	r2, [r3, #24]
      break;
 8004e12:	e0a5      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f000 fb36 	bl	800548c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	699a      	ldr	r2, [r3, #24]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	699a      	ldr	r2, [r3, #24]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6999      	ldr	r1, [r3, #24]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	619a      	str	r2, [r3, #24]
      break;
 8004e54:	e084      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68b9      	ldr	r1, [r7, #8]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f000 fba9 	bl	80055b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0208 	orr.w	r2, r2, #8
 8004e70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0204 	bic.w	r2, r2, #4
 8004e80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69d9      	ldr	r1, [r3, #28]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	430a      	orrs	r2, r1
 8004e92:	61da      	str	r2, [r3, #28]
      break;
 8004e94:	e064      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68b9      	ldr	r1, [r7, #8]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fc1b 	bl	80056d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	69da      	ldr	r2, [r3, #28]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004eb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ec0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	021a      	lsls	r2, r3, #8
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	61da      	str	r2, [r3, #28]
      break;
 8004ed6:	e043      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fc8e 	bl	8005800 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0208 	orr.w	r2, r2, #8
 8004ef2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 0204 	bic.w	r2, r2, #4
 8004f02:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	430a      	orrs	r2, r1
 8004f14:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004f16:	e023      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fcd8 	bl	80058d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f42:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004f58:	e002      	b.n	8004f60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f68:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop

08004f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_ConfigClockSource+0x1c>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e0f6      	b.n	800517e <HAL_TIM_ConfigClockSource+0x20a>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004fae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68ba      	ldr	r2, [r7, #8]
 8004fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a6f      	ldr	r2, [pc, #444]	@ (8005188 <HAL_TIM_ConfigClockSource+0x214>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	f000 80c1 	beq.w	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8004fd0:	4a6d      	ldr	r2, [pc, #436]	@ (8005188 <HAL_TIM_ConfigClockSource+0x214>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	f200 80c6 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fd8:	4a6c      	ldr	r2, [pc, #432]	@ (800518c <HAL_TIM_ConfigClockSource+0x218>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	f000 80b9 	beq.w	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8004fe0:	4a6a      	ldr	r2, [pc, #424]	@ (800518c <HAL_TIM_ConfigClockSource+0x218>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	f200 80be 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fe8:	4a69      	ldr	r2, [pc, #420]	@ (8005190 <HAL_TIM_ConfigClockSource+0x21c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	f000 80b1 	beq.w	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8004ff0:	4a67      	ldr	r2, [pc, #412]	@ (8005190 <HAL_TIM_ConfigClockSource+0x21c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	f200 80b6 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ff8:	4a66      	ldr	r2, [pc, #408]	@ (8005194 <HAL_TIM_ConfigClockSource+0x220>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	f000 80a9 	beq.w	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8005000:	4a64      	ldr	r2, [pc, #400]	@ (8005194 <HAL_TIM_ConfigClockSource+0x220>)
 8005002:	4293      	cmp	r3, r2
 8005004:	f200 80ae 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005008:	4a63      	ldr	r2, [pc, #396]	@ (8005198 <HAL_TIM_ConfigClockSource+0x224>)
 800500a:	4293      	cmp	r3, r2
 800500c:	f000 80a1 	beq.w	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8005010:	4a61      	ldr	r2, [pc, #388]	@ (8005198 <HAL_TIM_ConfigClockSource+0x224>)
 8005012:	4293      	cmp	r3, r2
 8005014:	f200 80a6 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005018:	4a60      	ldr	r2, [pc, #384]	@ (800519c <HAL_TIM_ConfigClockSource+0x228>)
 800501a:	4293      	cmp	r3, r2
 800501c:	f000 8099 	beq.w	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8005020:	4a5e      	ldr	r2, [pc, #376]	@ (800519c <HAL_TIM_ConfigClockSource+0x228>)
 8005022:	4293      	cmp	r3, r2
 8005024:	f200 809e 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005028:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800502c:	f000 8091 	beq.w	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8005030:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005034:	f200 8096 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800503c:	f000 8089 	beq.w	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8005040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005044:	f200 808e 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800504c:	d03e      	beq.n	80050cc <HAL_TIM_ConfigClockSource+0x158>
 800504e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005052:	f200 8087 	bhi.w	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800505a:	f000 8086 	beq.w	800516a <HAL_TIM_ConfigClockSource+0x1f6>
 800505e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005062:	d87f      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005064:	2b70      	cmp	r3, #112	@ 0x70
 8005066:	d01a      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x12a>
 8005068:	2b70      	cmp	r3, #112	@ 0x70
 800506a:	d87b      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 800506c:	2b60      	cmp	r3, #96	@ 0x60
 800506e:	d050      	beq.n	8005112 <HAL_TIM_ConfigClockSource+0x19e>
 8005070:	2b60      	cmp	r3, #96	@ 0x60
 8005072:	d877      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005074:	2b50      	cmp	r3, #80	@ 0x50
 8005076:	d03c      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0x17e>
 8005078:	2b50      	cmp	r3, #80	@ 0x50
 800507a:	d873      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 800507c:	2b40      	cmp	r3, #64	@ 0x40
 800507e:	d058      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0x1be>
 8005080:	2b40      	cmp	r3, #64	@ 0x40
 8005082:	d86f      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005084:	2b30      	cmp	r3, #48	@ 0x30
 8005086:	d064      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8005088:	2b30      	cmp	r3, #48	@ 0x30
 800508a:	d86b      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 800508c:	2b20      	cmp	r3, #32
 800508e:	d060      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8005090:	2b20      	cmp	r3, #32
 8005092:	d867      	bhi.n	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d05c      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 8005098:	2b10      	cmp	r3, #16
 800509a:	d05a      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x1de>
 800509c:	e062      	b.n	8005164 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050ae:	f000 fcf9 	bl	8005aa4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80050c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68ba      	ldr	r2, [r7, #8]
 80050c8:	609a      	str	r2, [r3, #8]
      break;
 80050ca:	e04f      	b.n	800516c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80050dc:	f000 fce2 	bl	8005aa4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050ee:	609a      	str	r2, [r3, #8]
      break;
 80050f0:	e03c      	b.n	800516c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050fe:	461a      	mov	r2, r3
 8005100:	f000 fc54 	bl	80059ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2150      	movs	r1, #80	@ 0x50
 800510a:	4618      	mov	r0, r3
 800510c:	f000 fcad 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005110:	e02c      	b.n	800516c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800511e:	461a      	mov	r2, r3
 8005120:	f000 fc73 	bl	8005a0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2160      	movs	r1, #96	@ 0x60
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fc9d 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005130:	e01c      	b.n	800516c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800513e:	461a      	mov	r2, r3
 8005140:	f000 fc34 	bl	80059ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2140      	movs	r1, #64	@ 0x40
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fc8d 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005150:	e00c      	b.n	800516c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f000 fc84 	bl	8005a6a <TIM_ITRx_SetConfig>
      break;
 8005162:	e003      	b.n	800516c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	73fb      	strb	r3, [r7, #15]
      break;
 8005168:	e000      	b.n	800516c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800516a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	00100070 	.word	0x00100070
 800518c:	00100060 	.word	0x00100060
 8005190:	00100050 	.word	0x00100050
 8005194:	00100040 	.word	0x00100040
 8005198:	00100030 	.word	0x00100030
 800519c:	00100020 	.word	0x00100020

080051a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a4c      	ldr	r2, [pc, #304]	@ (8005334 <TIM_Base_SetConfig+0x144>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d017      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800520e:	d013      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a49      	ldr	r2, [pc, #292]	@ (8005338 <TIM_Base_SetConfig+0x148>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d00f      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a48      	ldr	r2, [pc, #288]	@ (800533c <TIM_Base_SetConfig+0x14c>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d00b      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a47      	ldr	r2, [pc, #284]	@ (8005340 <TIM_Base_SetConfig+0x150>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d007      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a46      	ldr	r2, [pc, #280]	@ (8005344 <TIM_Base_SetConfig+0x154>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d003      	beq.n	8005238 <TIM_Base_SetConfig+0x48>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a45      	ldr	r2, [pc, #276]	@ (8005348 <TIM_Base_SetConfig+0x158>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d108      	bne.n	800524a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800523e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a39      	ldr	r2, [pc, #228]	@ (8005334 <TIM_Base_SetConfig+0x144>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d023      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005258:	d01f      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a36      	ldr	r2, [pc, #216]	@ (8005338 <TIM_Base_SetConfig+0x148>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d01b      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a35      	ldr	r2, [pc, #212]	@ (800533c <TIM_Base_SetConfig+0x14c>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d017      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a34      	ldr	r2, [pc, #208]	@ (8005340 <TIM_Base_SetConfig+0x150>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a33      	ldr	r2, [pc, #204]	@ (8005344 <TIM_Base_SetConfig+0x154>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00f      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a33      	ldr	r2, [pc, #204]	@ (800534c <TIM_Base_SetConfig+0x15c>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d00b      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a32      	ldr	r2, [pc, #200]	@ (8005350 <TIM_Base_SetConfig+0x160>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d007      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a31      	ldr	r2, [pc, #196]	@ (8005354 <TIM_Base_SetConfig+0x164>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d003      	beq.n	800529a <TIM_Base_SetConfig+0xaa>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2c      	ldr	r2, [pc, #176]	@ (8005348 <TIM_Base_SetConfig+0x158>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d108      	bne.n	80052ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	68fa      	ldr	r2, [r7, #12]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a18      	ldr	r2, [pc, #96]	@ (8005334 <TIM_Base_SetConfig+0x144>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d013      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a1a      	ldr	r2, [pc, #104]	@ (8005344 <TIM_Base_SetConfig+0x154>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00f      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1a      	ldr	r2, [pc, #104]	@ (800534c <TIM_Base_SetConfig+0x15c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d00b      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a19      	ldr	r2, [pc, #100]	@ (8005350 <TIM_Base_SetConfig+0x160>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d007      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a18      	ldr	r2, [pc, #96]	@ (8005354 <TIM_Base_SetConfig+0x164>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d003      	beq.n	8005300 <TIM_Base_SetConfig+0x110>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	4a13      	ldr	r2, [pc, #76]	@ (8005348 <TIM_Base_SetConfig+0x158>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d103      	bne.n	8005308 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	691a      	ldr	r2, [r3, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d105      	bne.n	8005326 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	f023 0201 	bic.w	r2, r3, #1
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	611a      	str	r2, [r3, #16]
  }
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40012c00 	.word	0x40012c00
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800
 8005340:	40000c00 	.word	0x40000c00
 8005344:	40013400 	.word	0x40013400
 8005348:	40015000 	.word	0x40015000
 800534c:	40014000 	.word	0x40014000
 8005350:	40014400 	.word	0x40014400
 8005354:	40014800 	.word	0x40014800

08005358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	f023 0201 	bic.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f023 0303 	bic.w	r3, r3, #3
 8005392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 0302 	bic.w	r3, r3, #2
 80053a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a30      	ldr	r2, [pc, #192]	@ (8005474 <TIM_OC1_SetConfig+0x11c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d013      	beq.n	80053e0 <TIM_OC1_SetConfig+0x88>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005478 <TIM_OC1_SetConfig+0x120>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00f      	beq.n	80053e0 <TIM_OC1_SetConfig+0x88>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a2e      	ldr	r2, [pc, #184]	@ (800547c <TIM_OC1_SetConfig+0x124>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d00b      	beq.n	80053e0 <TIM_OC1_SetConfig+0x88>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005480 <TIM_OC1_SetConfig+0x128>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d007      	beq.n	80053e0 <TIM_OC1_SetConfig+0x88>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005484 <TIM_OC1_SetConfig+0x12c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d003      	beq.n	80053e0 <TIM_OC1_SetConfig+0x88>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a2b      	ldr	r2, [pc, #172]	@ (8005488 <TIM_OC1_SetConfig+0x130>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d10c      	bne.n	80053fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	f023 0308 	bic.w	r3, r3, #8
 80053e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f023 0304 	bic.w	r3, r3, #4
 80053f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005474 <TIM_OC1_SetConfig+0x11c>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d013      	beq.n	800542a <TIM_OC1_SetConfig+0xd2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a1c      	ldr	r2, [pc, #112]	@ (8005478 <TIM_OC1_SetConfig+0x120>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_OC1_SetConfig+0xd2>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a1b      	ldr	r2, [pc, #108]	@ (800547c <TIM_OC1_SetConfig+0x124>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d00b      	beq.n	800542a <TIM_OC1_SetConfig+0xd2>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a1a      	ldr	r2, [pc, #104]	@ (8005480 <TIM_OC1_SetConfig+0x128>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_OC1_SetConfig+0xd2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a19      	ldr	r2, [pc, #100]	@ (8005484 <TIM_OC1_SetConfig+0x12c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_OC1_SetConfig+0xd2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a18      	ldr	r2, [pc, #96]	@ (8005488 <TIM_OC1_SetConfig+0x130>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d111      	bne.n	800544e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	695b      	ldr	r3, [r3, #20]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	693a      	ldr	r2, [r7, #16]
 800544a:	4313      	orrs	r3, r2
 800544c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	621a      	str	r2, [r3, #32]
}
 8005468:	bf00      	nop
 800546a:	371c      	adds	r7, #28
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40013400 	.word	0x40013400
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800
 8005488:	40015000 	.word	0x40015000

0800548c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a1b      	ldr	r3, [r3, #32]
 800549a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	f023 0210 	bic.w	r2, r3, #16
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	699b      	ldr	r3, [r3, #24]
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80054ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f023 0320 	bic.w	r3, r3, #32
 80054da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a2c      	ldr	r2, [pc, #176]	@ (800559c <TIM_OC2_SetConfig+0x110>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d007      	beq.n	8005500 <TIM_OC2_SetConfig+0x74>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a2b      	ldr	r2, [pc, #172]	@ (80055a0 <TIM_OC2_SetConfig+0x114>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d003      	beq.n	8005500 <TIM_OC2_SetConfig+0x74>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a2a      	ldr	r2, [pc, #168]	@ (80055a4 <TIM_OC2_SetConfig+0x118>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d10d      	bne.n	800551c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800551a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a1f      	ldr	r2, [pc, #124]	@ (800559c <TIM_OC2_SetConfig+0x110>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <TIM_OC2_SetConfig+0xc0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a1e      	ldr	r2, [pc, #120]	@ (80055a0 <TIM_OC2_SetConfig+0x114>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d00f      	beq.n	800554c <TIM_OC2_SetConfig+0xc0>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a1e      	ldr	r2, [pc, #120]	@ (80055a8 <TIM_OC2_SetConfig+0x11c>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_OC2_SetConfig+0xc0>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a1d      	ldr	r2, [pc, #116]	@ (80055ac <TIM_OC2_SetConfig+0x120>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_OC2_SetConfig+0xc0>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a1c      	ldr	r2, [pc, #112]	@ (80055b0 <TIM_OC2_SetConfig+0x124>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_OC2_SetConfig+0xc0>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a17      	ldr	r2, [pc, #92]	@ (80055a4 <TIM_OC2_SetConfig+0x118>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d113      	bne.n	8005574 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005552:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800555a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	695b      	ldr	r3, [r3, #20]
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	699b      	ldr	r3, [r3, #24]
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	621a      	str	r2, [r3, #32]
}
 800558e:	bf00      	nop
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40012c00 	.word	0x40012c00
 80055a0:	40013400 	.word	0x40013400
 80055a4:	40015000 	.word	0x40015000
 80055a8:	40014000 	.word	0x40014000
 80055ac:	40014400 	.word	0x40014400
 80055b0:	40014800 	.word	0x40014800

080055b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a1b      	ldr	r3, [r3, #32]
 80055c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2b      	ldr	r2, [pc, #172]	@ (80056c0 <TIM_OC3_SetConfig+0x10c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d007      	beq.n	8005626 <TIM_OC3_SetConfig+0x72>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2a      	ldr	r2, [pc, #168]	@ (80056c4 <TIM_OC3_SetConfig+0x110>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d003      	beq.n	8005626 <TIM_OC3_SetConfig+0x72>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a29      	ldr	r2, [pc, #164]	@ (80056c8 <TIM_OC3_SetConfig+0x114>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10d      	bne.n	8005642 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800562c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	021b      	lsls	r3, r3, #8
 8005634:	697a      	ldr	r2, [r7, #20]
 8005636:	4313      	orrs	r3, r2
 8005638:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005640:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a1e      	ldr	r2, [pc, #120]	@ (80056c0 <TIM_OC3_SetConfig+0x10c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <TIM_OC3_SetConfig+0xbe>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a1d      	ldr	r2, [pc, #116]	@ (80056c4 <TIM_OC3_SetConfig+0x110>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00f      	beq.n	8005672 <TIM_OC3_SetConfig+0xbe>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <TIM_OC3_SetConfig+0x118>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00b      	beq.n	8005672 <TIM_OC3_SetConfig+0xbe>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a1c      	ldr	r2, [pc, #112]	@ (80056d0 <TIM_OC3_SetConfig+0x11c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d007      	beq.n	8005672 <TIM_OC3_SetConfig+0xbe>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a1b      	ldr	r2, [pc, #108]	@ (80056d4 <TIM_OC3_SetConfig+0x120>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d003      	beq.n	8005672 <TIM_OC3_SetConfig+0xbe>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a16      	ldr	r2, [pc, #88]	@ (80056c8 <TIM_OC3_SetConfig+0x114>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d113      	bne.n	800569a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	621a      	str	r2, [r3, #32]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	40012c00 	.word	0x40012c00
 80056c4:	40013400 	.word	0x40013400
 80056c8:	40015000 	.word	0x40015000
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40014400 	.word	0x40014400
 80056d4:	40014800 	.word	0x40014800

080056d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d8:	b480      	push	{r7}
 80056da:	b087      	sub	sp, #28
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800570a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	021b      	lsls	r3, r3, #8
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005726:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	031b      	lsls	r3, r3, #12
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a2c      	ldr	r2, [pc, #176]	@ (80057e8 <TIM_OC4_SetConfig+0x110>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d007      	beq.n	800574c <TIM_OC4_SetConfig+0x74>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a2b      	ldr	r2, [pc, #172]	@ (80057ec <TIM_OC4_SetConfig+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d003      	beq.n	800574c <TIM_OC4_SetConfig+0x74>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a2a      	ldr	r2, [pc, #168]	@ (80057f0 <TIM_OC4_SetConfig+0x118>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d10d      	bne.n	8005768 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	031b      	lsls	r3, r3, #12
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a1f      	ldr	r2, [pc, #124]	@ (80057e8 <TIM_OC4_SetConfig+0x110>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d013      	beq.n	8005798 <TIM_OC4_SetConfig+0xc0>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1e      	ldr	r2, [pc, #120]	@ (80057ec <TIM_OC4_SetConfig+0x114>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d00f      	beq.n	8005798 <TIM_OC4_SetConfig+0xc0>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1e      	ldr	r2, [pc, #120]	@ (80057f4 <TIM_OC4_SetConfig+0x11c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00b      	beq.n	8005798 <TIM_OC4_SetConfig+0xc0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1d      	ldr	r2, [pc, #116]	@ (80057f8 <TIM_OC4_SetConfig+0x120>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_OC4_SetConfig+0xc0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1c      	ldr	r2, [pc, #112]	@ (80057fc <TIM_OC4_SetConfig+0x124>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC4_SetConfig+0xc0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a17      	ldr	r2, [pc, #92]	@ (80057f0 <TIM_OC4_SetConfig+0x118>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d113      	bne.n	80057c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800579e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80057a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	019b      	lsls	r3, r3, #6
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	019b      	lsls	r3, r3, #6
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40013400 	.word	0x40013400
 80057f0:	40015000 	.word	0x40015000
 80057f4:	40014000 	.word	0x40014000
 80057f8:	40014400 	.word	0x40014400
 80057fc:	40014800 	.word	0x40014800

08005800 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800582e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005844:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	041b      	lsls	r3, r3, #16
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4313      	orrs	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4a19      	ldr	r2, [pc, #100]	@ (80058bc <TIM_OC5_SetConfig+0xbc>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <TIM_OC5_SetConfig+0x82>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a18      	ldr	r2, [pc, #96]	@ (80058c0 <TIM_OC5_SetConfig+0xc0>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00f      	beq.n	8005882 <TIM_OC5_SetConfig+0x82>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a17      	ldr	r2, [pc, #92]	@ (80058c4 <TIM_OC5_SetConfig+0xc4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00b      	beq.n	8005882 <TIM_OC5_SetConfig+0x82>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a16      	ldr	r2, [pc, #88]	@ (80058c8 <TIM_OC5_SetConfig+0xc8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_OC5_SetConfig+0x82>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a15      	ldr	r2, [pc, #84]	@ (80058cc <TIM_OC5_SetConfig+0xcc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_OC5_SetConfig+0x82>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a14      	ldr	r2, [pc, #80]	@ (80058d0 <TIM_OC5_SetConfig+0xd0>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d109      	bne.n	8005896 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005888:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	621a      	str	r2, [r3, #32]
}
 80058b0:	bf00      	nop
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	40013400 	.word	0x40013400
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800
 80058d0:	40015000 	.word	0x40015000

080058d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005906:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800591a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	051b      	lsls	r3, r3, #20
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a1a      	ldr	r2, [pc, #104]	@ (8005994 <TIM_OC6_SetConfig+0xc0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d013      	beq.n	8005958 <TIM_OC6_SetConfig+0x84>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a19      	ldr	r2, [pc, #100]	@ (8005998 <TIM_OC6_SetConfig+0xc4>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00f      	beq.n	8005958 <TIM_OC6_SetConfig+0x84>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a18      	ldr	r2, [pc, #96]	@ (800599c <TIM_OC6_SetConfig+0xc8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00b      	beq.n	8005958 <TIM_OC6_SetConfig+0x84>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a17      	ldr	r2, [pc, #92]	@ (80059a0 <TIM_OC6_SetConfig+0xcc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <TIM_OC6_SetConfig+0x84>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a16      	ldr	r2, [pc, #88]	@ (80059a4 <TIM_OC6_SetConfig+0xd0>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_OC6_SetConfig+0x84>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a15      	ldr	r2, [pc, #84]	@ (80059a8 <TIM_OC6_SetConfig+0xd4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d109      	bne.n	800596c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800595e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	029b      	lsls	r3, r3, #10
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40013400 	.word	0x40013400
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800
 80059a8:	40015000 	.word	0x40015000

080059ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f023 0201 	bic.w	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	011b      	lsls	r3, r3, #4
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	4313      	orrs	r3, r2
 80059e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 030a 	bic.w	r3, r3, #10
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	621a      	str	r2, [r3, #32]
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b087      	sub	sp, #28
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	60f8      	str	r0, [r7, #12]
 8005a12:	60b9      	str	r1, [r7, #8]
 8005a14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6a1b      	ldr	r3, [r3, #32]
 8005a20:	f023 0210 	bic.w	r2, r3, #16
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005a34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	031b      	lsls	r3, r3, #12
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005a46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr

08005a6a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
 8005a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005a80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f043 0307 	orr.w	r3, r3, #7
 8005a90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	609a      	str	r2, [r3, #8]
}
 8005a98:	bf00      	nop
 8005a9a:	3714      	adds	r7, #20
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005abe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	021a      	lsls	r2, r3, #8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	697a      	ldr	r2, [r7, #20]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	609a      	str	r2, [r3, #8]
}
 8005ad8:	bf00      	nop
 8005ada:	371c      	adds	r7, #28
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	2201      	movs	r2, #1
 8005af8:	fa02 f303 	lsl.w	r3, r2, r3
 8005afc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6a1a      	ldr	r2, [r3, #32]
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	43db      	mvns	r3, r3
 8005b06:	401a      	ands	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a1a      	ldr	r2, [r3, #32]
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f003 031f 	and.w	r3, r3, #31
 8005b16:	6879      	ldr	r1, [r7, #4]
 8005b18:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
	...

08005b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e074      	b.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a34      	ldr	r2, [pc, #208]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d009      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a33      	ldr	r2, [pc, #204]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d004      	beq.n	8005b86 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a31      	ldr	r2, [pc, #196]	@ (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d108      	bne.n	8005b98 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005b8c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a21      	ldr	r2, [pc, #132]	@ (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d022      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc8:	d01d      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a1f      	ldr	r2, [pc, #124]	@ (8005c4c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d018      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d013      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a1c      	ldr	r2, [pc, #112]	@ (8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00e      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a15      	ldr	r2, [pc, #84]	@ (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a18      	ldr	r2, [pc, #96]	@ (8005c58 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d004      	beq.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a11      	ldr	r2, [pc, #68]	@ (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d10c      	bne.n	8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3714      	adds	r7, #20
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	40012c00 	.word	0x40012c00
 8005c44:	40013400 	.word	0x40013400
 8005c48:	40015000 	.word	0x40015000
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40014000 	.word	0x40014000

08005c5c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e078      	b.n	8005d6a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	699b      	ldr	r3, [r3, #24]
 8005cec:	041b      	lsls	r3, r3, #16
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1c      	ldr	r2, [pc, #112]	@ (8005d78 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d009      	beq.n	8005d1e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005d7c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d004      	beq.n	8005d1e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a19      	ldr	r2, [pc, #100]	@ (8005d80 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d11c      	bne.n	8005d58 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d28:	051b      	lsls	r3, r3, #20
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	40012c00 	.word	0x40012c00
 8005d7c:	40013400 	.word	0x40013400
 8005d80:	40015000 	.word	0x40015000

08005d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e042      	b.n	8005ea8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d106      	bne.n	8005e3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7fc fae1 	bl	80023fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2224      	movs	r2, #36	@ 0x24
 8005e3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0201 	bic.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 ff42 	bl	8006ce4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fc43 	bl	80066ec <UART_SetConfig>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e01b      	b.n	8005ea8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005e8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0201 	orr.w	r2, r2, #1
 8005e9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 ffc1 	bl	8006e28 <UART_CheckIdleState>
 8005ea6:	4603      	mov	r3, r0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	@ 0x28
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	d17b      	bne.n	8005fc2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_UART_Transmit+0x26>
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e074      	b.n	8005fc4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2221      	movs	r2, #33	@ 0x21
 8005ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eea:	f7fc fe4f 	bl	8002b8c <HAL_GetTick>
 8005eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	88fa      	ldrh	r2, [r7, #6]
 8005ef4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f08:	d108      	bne.n	8005f1c <HAL_UART_Transmit+0x6c>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d104      	bne.n	8005f1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	61bb      	str	r3, [r7, #24]
 8005f1a:	e003      	b.n	8005f24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f20:	2300      	movs	r3, #0
 8005f22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f24:	e030      	b.n	8005f88 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2180      	movs	r1, #128	@ 0x80
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f001 f823 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e03d      	b.n	8005fc4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10b      	bne.n	8005f66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	881b      	ldrh	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	3302      	adds	r3, #2
 8005f62:	61bb      	str	r3, [r7, #24]
 8005f64:	e007      	b.n	8005f76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	781a      	ldrb	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	3301      	adds	r3, #1
 8005f74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1c8      	bne.n	8005f26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	2140      	movs	r1, #64	@ 0x40
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f000 ffec 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e006      	b.n	8005fc4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	e000      	b.n	8005fc4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
  }
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b08a      	sub	sp, #40	@ 0x28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	d137      	bne.n	8006054 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_UART_Receive_IT+0x24>
 8005fea:	88fb      	ldrh	r3, [r7, #6]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e030      	b.n	8006056 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <HAL_UART_Receive_IT+0x94>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d01f      	beq.n	8006044 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	e853 3f00 	ldrex	r3, [r3]
 800601e:	613b      	str	r3, [r7, #16]
   return(result);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006026:	627b      	str	r3, [r7, #36]	@ 0x24
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006030:	623b      	str	r3, [r7, #32]
 8006032:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006034:	69f9      	ldr	r1, [r7, #28]
 8006036:	6a3a      	ldr	r2, [r7, #32]
 8006038:	e841 2300 	strex	r3, r2, [r1]
 800603c:	61bb      	str	r3, [r7, #24]
   return(result);
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1e6      	bne.n	8006012 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006044:	88fb      	ldrh	r3, [r7, #6]
 8006046:	461a      	mov	r2, r3
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f001 f804 	bl	8007058 <UART_Start_Receive_IT>
 8006050:	4603      	mov	r3, r0
 8006052:	e000      	b.n	8006056 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006054:	2302      	movs	r3, #2
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	3728      	adds	r7, #40	@ 0x28
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40008000 	.word	0x40008000

08006064 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b0ba      	sub	sp, #232	@ 0xe8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800608a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800608e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006092:	4013      	ands	r3, r2
 8006094:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006098:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800609c:	2b00      	cmp	r3, #0
 800609e:	d11b      	bne.n	80060d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80060a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d015      	beq.n	80060d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80060ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b0:	f003 0320 	and.w	r3, r3, #32
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d105      	bne.n	80060c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80060b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d009      	beq.n	80060d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 82e3 	beq.w	8006694 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4798      	blx	r3
      }
      return;
 80060d6:	e2dd      	b.n	8006694 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80060d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80060dc:	2b00      	cmp	r3, #0
 80060de:	f000 8123 	beq.w	8006328 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80060e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80060e6:	4b8d      	ldr	r3, [pc, #564]	@ (800631c <HAL_UART_IRQHandler+0x2b8>)
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80060ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80060f2:	4b8b      	ldr	r3, [pc, #556]	@ (8006320 <HAL_UART_IRQHandler+0x2bc>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 8116 	beq.w	8006328 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80060fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d011      	beq.n	800612c <HAL_UART_IRQHandler+0xc8>
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2201      	movs	r2, #1
 800611a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006122:	f043 0201 	orr.w	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800612c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d011      	beq.n	800615c <HAL_UART_IRQHandler+0xf8>
 8006138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d00b      	beq.n	800615c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2202      	movs	r2, #2
 800614a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006152:	f043 0204 	orr.w	r2, r3, #4
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800615c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006160:	f003 0304 	and.w	r3, r3, #4
 8006164:	2b00      	cmp	r3, #0
 8006166:	d011      	beq.n	800618c <HAL_UART_IRQHandler+0x128>
 8006168:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2204      	movs	r2, #4
 800617a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006182:	f043 0202 	orr.w	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800618c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b00      	cmp	r3, #0
 8006196:	d017      	beq.n	80061c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800619c:	f003 0320 	and.w	r3, r3, #32
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d105      	bne.n	80061b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80061a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80061a8:	4b5c      	ldr	r3, [pc, #368]	@ (800631c <HAL_UART_IRQHandler+0x2b8>)
 80061aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2208      	movs	r2, #8
 80061b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061be:	f043 0208 	orr.w	r2, r3, #8
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d012      	beq.n	80061fa <HAL_UART_IRQHandler+0x196>
 80061d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00c      	beq.n	80061fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 8249 	beq.w	8006698 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d013      	beq.n	800623a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006212:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006216:	f003 0320 	and.w	r3, r3, #32
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800621e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d007      	beq.n	800623a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006240:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800624e:	2b40      	cmp	r3, #64	@ 0x40
 8006250:	d005      	beq.n	800625e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006256:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800625a:	2b00      	cmp	r3, #0
 800625c:	d054      	beq.n	8006308 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 f81c 	bl	800729c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800626e:	2b40      	cmp	r3, #64	@ 0x40
 8006270:	d146      	bne.n	8006300 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3308      	adds	r3, #8
 8006278:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006288:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800628c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006290:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800629e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80062a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80062aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80062ae:	e841 2300 	strex	r3, r2, [r1]
 80062b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80062b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1d9      	bne.n	8006272 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d017      	beq.n	80062f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ce:	4a15      	ldr	r2, [pc, #84]	@ (8006324 <HAL_UART_IRQHandler+0x2c0>)
 80062d0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fc fd9c 	bl	8002e16 <HAL_DMA_Abort_IT>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d019      	beq.n	8006318 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80062f2:	4610      	mov	r0, r2
 80062f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f6:	e00f      	b.n	8006318 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f9e1 	bl	80066c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062fe:	e00b      	b.n	8006318 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f9dd 	bl	80066c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006306:	e007      	b.n	8006318 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f9d9 	bl	80066c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8006316:	e1bf      	b.n	8006698 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006318:	bf00      	nop
    return;
 800631a:	e1bd      	b.n	8006698 <HAL_UART_IRQHandler+0x634>
 800631c:	10000001 	.word	0x10000001
 8006320:	04000120 	.word	0x04000120
 8006324:	08007369 	.word	0x08007369

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800632c:	2b01      	cmp	r3, #1
 800632e:	f040 8153 	bne.w	80065d8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006336:	f003 0310 	and.w	r3, r3, #16
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 814c 	beq.w	80065d8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	2b00      	cmp	r3, #0
 800634a:	f000 8145 	beq.w	80065d8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2210      	movs	r2, #16
 8006354:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006360:	2b40      	cmp	r3, #64	@ 0x40
 8006362:	f040 80bb 	bne.w	80064dc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006374:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 818f 	beq.w	800669c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006384:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006388:	429a      	cmp	r2, r3
 800638a:	f080 8187 	bcs.w	800669c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006394:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0320 	and.w	r3, r3, #32
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f040 8087 	bne.w	80064ba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063b8:	e853 3f00 	ldrex	r3, [r3]
 80063bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80063c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80063d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063da:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80063e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80063ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1da      	bne.n	80063ac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3308      	adds	r3, #8
 80063fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006406:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006408:	f023 0301 	bic.w	r3, r3, #1
 800640c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800641a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800641e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006420:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006422:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006426:	e841 2300 	strex	r3, r2, [r1]
 800642a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800642c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1e1      	bne.n	80063f6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3308      	adds	r3, #8
 8006438:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800643c:	e853 3f00 	ldrex	r3, [r3]
 8006440:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006448:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3308      	adds	r3, #8
 8006452:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006456:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006458:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800645c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800645e:	e841 2300 	strex	r3, r2, [r1]
 8006462:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006464:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1e3      	bne.n	8006432 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2220      	movs	r2, #32
 800646e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006480:	e853 3f00 	ldrex	r3, [r3]
 8006484:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006488:	f023 0310 	bic.w	r3, r3, #16
 800648c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800649a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800649c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80064a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e4      	bne.n	8006478 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fc fc55 	bl	8002d64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2202      	movs	r2, #2
 80064be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f8fd 	bl	80066d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80064da:	e0df      	b.n	800669c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80d1 	beq.w	80066a0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80064fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80cc 	beq.w	80066a0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006510:	e853 3f00 	ldrex	r3, [r3]
 8006514:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006518:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800651c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800652a:	647b      	str	r3, [r7, #68]	@ 0x44
 800652c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006532:	e841 2300 	strex	r3, r2, [r1]
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1e4      	bne.n	8006508 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3308      	adds	r3, #8
 8006544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	623b      	str	r3, [r7, #32]
   return(result);
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006554:	f023 0301 	bic.w	r3, r3, #1
 8006558:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3308      	adds	r3, #8
 8006562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006566:	633a      	str	r2, [r7, #48]	@ 0x30
 8006568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800656a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800656c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1e1      	bne.n	800653e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	60fb      	str	r3, [r7, #12]
   return(result);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0310 	bic.w	r3, r3, #16
 80065a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	69b9      	ldr	r1, [r7, #24]
 80065b6:	69fa      	ldr	r2, [r7, #28]
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	617b      	str	r3, [r7, #20]
   return(result);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e4      	bne.n	800658e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80065ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f87f 	bl	80066d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80065d6:	e063      	b.n	80066a0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80065d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00e      	beq.n	8006602 <HAL_UART_IRQHandler+0x59e>
 80065e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80065e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d008      	beq.n	8006602 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80065f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 fc12 	bl	8007e24 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006600:	e051      	b.n	80066a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800660a:	2b00      	cmp	r3, #0
 800660c:	d014      	beq.n	8006638 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800660e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006616:	2b00      	cmp	r3, #0
 8006618:	d105      	bne.n	8006626 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800661a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800661e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d008      	beq.n	8006638 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800662a:	2b00      	cmp	r3, #0
 800662c:	d03a      	beq.n	80066a4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	4798      	blx	r3
    }
    return;
 8006636:	e035      	b.n	80066a4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800663c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <HAL_UART_IRQHandler+0x5f4>
 8006644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d003      	beq.n	8006658 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fe9f 	bl	8007394 <UART_EndTransmit_IT>
    return;
 8006656:	e026      	b.n	80066a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800665c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d009      	beq.n	8006678 <HAL_UART_IRQHandler+0x614>
 8006664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006668:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800666c:	2b00      	cmp	r3, #0
 800666e:	d003      	beq.n	8006678 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f001 fbeb 	bl	8007e4c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006676:	e016      	b.n	80066a6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800667c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006680:	2b00      	cmp	r3, #0
 8006682:	d010      	beq.n	80066a6 <HAL_UART_IRQHandler+0x642>
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006688:	2b00      	cmp	r3, #0
 800668a:	da0c      	bge.n	80066a6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fbd3 	bl	8007e38 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006692:	e008      	b.n	80066a6 <HAL_UART_IRQHandler+0x642>
      return;
 8006694:	bf00      	nop
 8006696:	e006      	b.n	80066a6 <HAL_UART_IRQHandler+0x642>
    return;
 8006698:	bf00      	nop
 800669a:	e004      	b.n	80066a6 <HAL_UART_IRQHandler+0x642>
      return;
 800669c:	bf00      	nop
 800669e:	e002      	b.n	80066a6 <HAL_UART_IRQHandler+0x642>
      return;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <HAL_UART_IRQHandler+0x642>
    return;
 80066a4:	bf00      	nop
  }
}
 80066a6:	37e8      	adds	r7, #232	@ 0xe8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	460b      	mov	r3, r1
 80066de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066f0:	b08c      	sub	sp, #48	@ 0x30
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066f6:	2300      	movs	r3, #0
 80066f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	431a      	orrs	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	431a      	orrs	r2, r3
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	4313      	orrs	r3, r2
 8006712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681a      	ldr	r2, [r3, #0]
 800671a:	4baa      	ldr	r3, [pc, #680]	@ (80069c4 <UART_SetConfig+0x2d8>)
 800671c:	4013      	ands	r3, r2
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006724:	430b      	orrs	r3, r1
 8006726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a9f      	ldr	r2, [pc, #636]	@ (80069c8 <UART_SetConfig+0x2dc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006754:	4313      	orrs	r3, r2
 8006756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006762:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800676c:	430b      	orrs	r3, r1
 800676e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006776:	f023 010f 	bic.w	r1, r3, #15
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a90      	ldr	r2, [pc, #576]	@ (80069cc <UART_SetConfig+0x2e0>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d125      	bne.n	80067dc <UART_SetConfig+0xf0>
 8006790:	4b8f      	ldr	r3, [pc, #572]	@ (80069d0 <UART_SetConfig+0x2e4>)
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	2b03      	cmp	r3, #3
 800679c:	d81a      	bhi.n	80067d4 <UART_SetConfig+0xe8>
 800679e:	a201      	add	r2, pc, #4	@ (adr r2, 80067a4 <UART_SetConfig+0xb8>)
 80067a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a4:	080067b5 	.word	0x080067b5
 80067a8:	080067c5 	.word	0x080067c5
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	2301      	movs	r3, #1
 80067b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ba:	e116      	b.n	80069ea <UART_SetConfig+0x2fe>
 80067bc:	2302      	movs	r3, #2
 80067be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067c2:	e112      	b.n	80069ea <UART_SetConfig+0x2fe>
 80067c4:	2304      	movs	r3, #4
 80067c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ca:	e10e      	b.n	80069ea <UART_SetConfig+0x2fe>
 80067cc:	2308      	movs	r3, #8
 80067ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067d2:	e10a      	b.n	80069ea <UART_SetConfig+0x2fe>
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067da:	e106      	b.n	80069ea <UART_SetConfig+0x2fe>
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a7c      	ldr	r2, [pc, #496]	@ (80069d4 <UART_SetConfig+0x2e8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d138      	bne.n	8006858 <UART_SetConfig+0x16c>
 80067e6:	4b7a      	ldr	r3, [pc, #488]	@ (80069d0 <UART_SetConfig+0x2e4>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067ec:	f003 030c 	and.w	r3, r3, #12
 80067f0:	2b0c      	cmp	r3, #12
 80067f2:	d82d      	bhi.n	8006850 <UART_SetConfig+0x164>
 80067f4:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <UART_SetConfig+0x110>)
 80067f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fa:	bf00      	nop
 80067fc:	08006831 	.word	0x08006831
 8006800:	08006851 	.word	0x08006851
 8006804:	08006851 	.word	0x08006851
 8006808:	08006851 	.word	0x08006851
 800680c:	08006841 	.word	0x08006841
 8006810:	08006851 	.word	0x08006851
 8006814:	08006851 	.word	0x08006851
 8006818:	08006851 	.word	0x08006851
 800681c:	08006839 	.word	0x08006839
 8006820:	08006851 	.word	0x08006851
 8006824:	08006851 	.word	0x08006851
 8006828:	08006851 	.word	0x08006851
 800682c:	08006849 	.word	0x08006849
 8006830:	2300      	movs	r3, #0
 8006832:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006836:	e0d8      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006838:	2302      	movs	r3, #2
 800683a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800683e:	e0d4      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006840:	2304      	movs	r3, #4
 8006842:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006846:	e0d0      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006848:	2308      	movs	r3, #8
 800684a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800684e:	e0cc      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006850:	2310      	movs	r3, #16
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006856:	e0c8      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a5e      	ldr	r2, [pc, #376]	@ (80069d8 <UART_SetConfig+0x2ec>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d125      	bne.n	80068ae <UART_SetConfig+0x1c2>
 8006862:	4b5b      	ldr	r3, [pc, #364]	@ (80069d0 <UART_SetConfig+0x2e4>)
 8006864:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006868:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800686c:	2b30      	cmp	r3, #48	@ 0x30
 800686e:	d016      	beq.n	800689e <UART_SetConfig+0x1b2>
 8006870:	2b30      	cmp	r3, #48	@ 0x30
 8006872:	d818      	bhi.n	80068a6 <UART_SetConfig+0x1ba>
 8006874:	2b20      	cmp	r3, #32
 8006876:	d00a      	beq.n	800688e <UART_SetConfig+0x1a2>
 8006878:	2b20      	cmp	r3, #32
 800687a:	d814      	bhi.n	80068a6 <UART_SetConfig+0x1ba>
 800687c:	2b00      	cmp	r3, #0
 800687e:	d002      	beq.n	8006886 <UART_SetConfig+0x19a>
 8006880:	2b10      	cmp	r3, #16
 8006882:	d008      	beq.n	8006896 <UART_SetConfig+0x1aa>
 8006884:	e00f      	b.n	80068a6 <UART_SetConfig+0x1ba>
 8006886:	2300      	movs	r3, #0
 8006888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800688c:	e0ad      	b.n	80069ea <UART_SetConfig+0x2fe>
 800688e:	2302      	movs	r3, #2
 8006890:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006894:	e0a9      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006896:	2304      	movs	r3, #4
 8006898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800689c:	e0a5      	b.n	80069ea <UART_SetConfig+0x2fe>
 800689e:	2308      	movs	r3, #8
 80068a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068a4:	e0a1      	b.n	80069ea <UART_SetConfig+0x2fe>
 80068a6:	2310      	movs	r3, #16
 80068a8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ac:	e09d      	b.n	80069ea <UART_SetConfig+0x2fe>
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a4a      	ldr	r2, [pc, #296]	@ (80069dc <UART_SetConfig+0x2f0>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d125      	bne.n	8006904 <UART_SetConfig+0x218>
 80068b8:	4b45      	ldr	r3, [pc, #276]	@ (80069d0 <UART_SetConfig+0x2e4>)
 80068ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80068c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80068c4:	d016      	beq.n	80068f4 <UART_SetConfig+0x208>
 80068c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80068c8:	d818      	bhi.n	80068fc <UART_SetConfig+0x210>
 80068ca:	2b80      	cmp	r3, #128	@ 0x80
 80068cc:	d00a      	beq.n	80068e4 <UART_SetConfig+0x1f8>
 80068ce:	2b80      	cmp	r3, #128	@ 0x80
 80068d0:	d814      	bhi.n	80068fc <UART_SetConfig+0x210>
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <UART_SetConfig+0x1f0>
 80068d6:	2b40      	cmp	r3, #64	@ 0x40
 80068d8:	d008      	beq.n	80068ec <UART_SetConfig+0x200>
 80068da:	e00f      	b.n	80068fc <UART_SetConfig+0x210>
 80068dc:	2300      	movs	r3, #0
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068e2:	e082      	b.n	80069ea <UART_SetConfig+0x2fe>
 80068e4:	2302      	movs	r3, #2
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068ea:	e07e      	b.n	80069ea <UART_SetConfig+0x2fe>
 80068ec:	2304      	movs	r3, #4
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068f2:	e07a      	b.n	80069ea <UART_SetConfig+0x2fe>
 80068f4:	2308      	movs	r3, #8
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80068fa:	e076      	b.n	80069ea <UART_SetConfig+0x2fe>
 80068fc:	2310      	movs	r3, #16
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006902:	e072      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a35      	ldr	r2, [pc, #212]	@ (80069e0 <UART_SetConfig+0x2f4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d12a      	bne.n	8006964 <UART_SetConfig+0x278>
 800690e:	4b30      	ldr	r3, [pc, #192]	@ (80069d0 <UART_SetConfig+0x2e4>)
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006914:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006918:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800691c:	d01a      	beq.n	8006954 <UART_SetConfig+0x268>
 800691e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006922:	d81b      	bhi.n	800695c <UART_SetConfig+0x270>
 8006924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006928:	d00c      	beq.n	8006944 <UART_SetConfig+0x258>
 800692a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800692e:	d815      	bhi.n	800695c <UART_SetConfig+0x270>
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <UART_SetConfig+0x250>
 8006934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006938:	d008      	beq.n	800694c <UART_SetConfig+0x260>
 800693a:	e00f      	b.n	800695c <UART_SetConfig+0x270>
 800693c:	2300      	movs	r3, #0
 800693e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006942:	e052      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006944:	2302      	movs	r3, #2
 8006946:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800694a:	e04e      	b.n	80069ea <UART_SetConfig+0x2fe>
 800694c:	2304      	movs	r3, #4
 800694e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006952:	e04a      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006954:	2308      	movs	r3, #8
 8006956:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800695a:	e046      	b.n	80069ea <UART_SetConfig+0x2fe>
 800695c:	2310      	movs	r3, #16
 800695e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006962:	e042      	b.n	80069ea <UART_SetConfig+0x2fe>
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a17      	ldr	r2, [pc, #92]	@ (80069c8 <UART_SetConfig+0x2dc>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d13a      	bne.n	80069e4 <UART_SetConfig+0x2f8>
 800696e:	4b18      	ldr	r3, [pc, #96]	@ (80069d0 <UART_SetConfig+0x2e4>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006974:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006978:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800697c:	d01a      	beq.n	80069b4 <UART_SetConfig+0x2c8>
 800697e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006982:	d81b      	bhi.n	80069bc <UART_SetConfig+0x2d0>
 8006984:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006988:	d00c      	beq.n	80069a4 <UART_SetConfig+0x2b8>
 800698a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800698e:	d815      	bhi.n	80069bc <UART_SetConfig+0x2d0>
 8006990:	2b00      	cmp	r3, #0
 8006992:	d003      	beq.n	800699c <UART_SetConfig+0x2b0>
 8006994:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006998:	d008      	beq.n	80069ac <UART_SetConfig+0x2c0>
 800699a:	e00f      	b.n	80069bc <UART_SetConfig+0x2d0>
 800699c:	2300      	movs	r3, #0
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069a2:	e022      	b.n	80069ea <UART_SetConfig+0x2fe>
 80069a4:	2302      	movs	r3, #2
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069aa:	e01e      	b.n	80069ea <UART_SetConfig+0x2fe>
 80069ac:	2304      	movs	r3, #4
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069b2:	e01a      	b.n	80069ea <UART_SetConfig+0x2fe>
 80069b4:	2308      	movs	r3, #8
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069ba:	e016      	b.n	80069ea <UART_SetConfig+0x2fe>
 80069bc:	2310      	movs	r3, #16
 80069be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80069c2:	e012      	b.n	80069ea <UART_SetConfig+0x2fe>
 80069c4:	cfff69f3 	.word	0xcfff69f3
 80069c8:	40008000 	.word	0x40008000
 80069cc:	40013800 	.word	0x40013800
 80069d0:	40021000 	.word	0x40021000
 80069d4:	40004400 	.word	0x40004400
 80069d8:	40004800 	.word	0x40004800
 80069dc:	40004c00 	.word	0x40004c00
 80069e0:	40005000 	.word	0x40005000
 80069e4:	2310      	movs	r3, #16
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4aae      	ldr	r2, [pc, #696]	@ (8006ca8 <UART_SetConfig+0x5bc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	f040 8097 	bne.w	8006b24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	d823      	bhi.n	8006a46 <UART_SetConfig+0x35a>
 80069fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006a04 <UART_SetConfig+0x318>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a29 	.word	0x08006a29
 8006a08:	08006a47 	.word	0x08006a47
 8006a0c:	08006a31 	.word	0x08006a31
 8006a10:	08006a47 	.word	0x08006a47
 8006a14:	08006a37 	.word	0x08006a37
 8006a18:	08006a47 	.word	0x08006a47
 8006a1c:	08006a47 	.word	0x08006a47
 8006a20:	08006a47 	.word	0x08006a47
 8006a24:	08006a3f 	.word	0x08006a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a28:	f7fd f966 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
 8006a2c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a2e:	e010      	b.n	8006a52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a30:	4b9e      	ldr	r3, [pc, #632]	@ (8006cac <UART_SetConfig+0x5c0>)
 8006a32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a34:	e00d      	b.n	8006a52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a36:	f7fd f8f1 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8006a3a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a3c:	e009      	b.n	8006a52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a44:	e005      	b.n	8006a52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 8130 	beq.w	8006cba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5e:	4a94      	ldr	r2, [pc, #592]	@ (8006cb0 <UART_SetConfig+0x5c4>)
 8006a60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a64:	461a      	mov	r2, r3
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	685a      	ldr	r2, [r3, #4]
 8006a72:	4613      	mov	r3, r2
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	4413      	add	r3, r2
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d305      	bcc.n	8006a8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d903      	bls.n	8006a92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a90:	e113      	b.n	8006cba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a94:	2200      	movs	r2, #0
 8006a96:	60bb      	str	r3, [r7, #8]
 8006a98:	60fa      	str	r2, [r7, #12]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a9e:	4a84      	ldr	r2, [pc, #528]	@ (8006cb0 <UART_SetConfig+0x5c4>)
 8006aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	603b      	str	r3, [r7, #0]
 8006aaa:	607a      	str	r2, [r7, #4]
 8006aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ab4:	f7fa f910 	bl	8000cd8 <__aeabi_uldivmod>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	460b      	mov	r3, r1
 8006abc:	4610      	mov	r0, r2
 8006abe:	4619      	mov	r1, r3
 8006ac0:	f04f 0200 	mov.w	r2, #0
 8006ac4:	f04f 0300 	mov.w	r3, #0
 8006ac8:	020b      	lsls	r3, r1, #8
 8006aca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ace:	0202      	lsls	r2, r0, #8
 8006ad0:	6979      	ldr	r1, [r7, #20]
 8006ad2:	6849      	ldr	r1, [r1, #4]
 8006ad4:	0849      	lsrs	r1, r1, #1
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	460c      	mov	r4, r1
 8006ada:	4605      	mov	r5, r0
 8006adc:	eb12 0804 	adds.w	r8, r2, r4
 8006ae0:	eb43 0905 	adc.w	r9, r3, r5
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	469a      	mov	sl, r3
 8006aec:	4693      	mov	fp, r2
 8006aee:	4652      	mov	r2, sl
 8006af0:	465b      	mov	r3, fp
 8006af2:	4640      	mov	r0, r8
 8006af4:	4649      	mov	r1, r9
 8006af6:	f7fa f8ef 	bl	8000cd8 <__aeabi_uldivmod>
 8006afa:	4602      	mov	r2, r0
 8006afc:	460b      	mov	r3, r1
 8006afe:	4613      	mov	r3, r2
 8006b00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006b08:	d308      	bcc.n	8006b1c <UART_SetConfig+0x430>
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b10:	d204      	bcs.n	8006b1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6a3a      	ldr	r2, [r7, #32]
 8006b18:	60da      	str	r2, [r3, #12]
 8006b1a:	e0ce      	b.n	8006cba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006b22:	e0ca      	b.n	8006cba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	69db      	ldr	r3, [r3, #28]
 8006b28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b2c:	d166      	bne.n	8006bfc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006b2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d827      	bhi.n	8006b86 <UART_SetConfig+0x49a>
 8006b36:	a201      	add	r2, pc, #4	@ (adr r2, 8006b3c <UART_SetConfig+0x450>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b61 	.word	0x08006b61
 8006b40:	08006b69 	.word	0x08006b69
 8006b44:	08006b71 	.word	0x08006b71
 8006b48:	08006b87 	.word	0x08006b87
 8006b4c:	08006b77 	.word	0x08006b77
 8006b50:	08006b87 	.word	0x08006b87
 8006b54:	08006b87 	.word	0x08006b87
 8006b58:	08006b87 	.word	0x08006b87
 8006b5c:	08006b7f 	.word	0x08006b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b60:	f7fd f8ca 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
 8006b64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b66:	e014      	b.n	8006b92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b68:	f7fd f8dc 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8006b6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b6e:	e010      	b.n	8006b92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b70:	4b4e      	ldr	r3, [pc, #312]	@ (8006cac <UART_SetConfig+0x5c0>)
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b74:	e00d      	b.n	8006b92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b76:	f7fd f851 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8006b7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006b7c:	e009      	b.n	8006b92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006b84:	e005      	b.n	8006b92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006b90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f000 8090 	beq.w	8006cba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9e:	4a44      	ldr	r2, [pc, #272]	@ (8006cb0 <UART_SetConfig+0x5c4>)
 8006ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006bac:	005a      	lsls	r2, r3, #1
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	085b      	lsrs	r3, r3, #1
 8006bb4:	441a      	add	r2, r3
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	d916      	bls.n	8006bf4 <UART_SetConfig+0x508>
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bcc:	d212      	bcs.n	8006bf4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006bce:	6a3b      	ldr	r3, [r7, #32]
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	f023 030f 	bic.w	r3, r3, #15
 8006bd6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006bd8:	6a3b      	ldr	r3, [r7, #32]
 8006bda:	085b      	lsrs	r3, r3, #1
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	f003 0307 	and.w	r3, r3, #7
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	8bfb      	ldrh	r3, [r7, #30]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	8bfa      	ldrh	r2, [r7, #30]
 8006bf0:	60da      	str	r2, [r3, #12]
 8006bf2:	e062      	b.n	8006cba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006bfa:	e05e      	b.n	8006cba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bfc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d828      	bhi.n	8006c56 <UART_SetConfig+0x56a>
 8006c04:	a201      	add	r2, pc, #4	@ (adr r2, 8006c0c <UART_SetConfig+0x520>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c31 	.word	0x08006c31
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c41 	.word	0x08006c41
 8006c18:	08006c57 	.word	0x08006c57
 8006c1c:	08006c47 	.word	0x08006c47
 8006c20:	08006c57 	.word	0x08006c57
 8006c24:	08006c57 	.word	0x08006c57
 8006c28:	08006c57 	.word	0x08006c57
 8006c2c:	08006c4f 	.word	0x08006c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c30:	f7fd f862 	bl	8003cf8 <HAL_RCC_GetPCLK1Freq>
 8006c34:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c36:	e014      	b.n	8006c62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c38:	f7fd f874 	bl	8003d24 <HAL_RCC_GetPCLK2Freq>
 8006c3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c3e:	e010      	b.n	8006c62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c40:	4b1a      	ldr	r3, [pc, #104]	@ (8006cac <UART_SetConfig+0x5c0>)
 8006c42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c44:	e00d      	b.n	8006c62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c46:	f7fc ffe9 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8006c4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006c4c:	e009      	b.n	8006c62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006c54:	e005      	b.n	8006c62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006c60:	bf00      	nop
    }

    if (pclk != 0U)
 8006c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d028      	beq.n	8006cba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6c:	4a10      	ldr	r2, [pc, #64]	@ (8006cb0 <UART_SetConfig+0x5c4>)
 8006c6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c72:	461a      	mov	r2, r3
 8006c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c76:	fbb3 f2f2 	udiv	r2, r3, r2
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	441a      	add	r2, r3
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	2b0f      	cmp	r3, #15
 8006c90:	d910      	bls.n	8006cb4 <UART_SetConfig+0x5c8>
 8006c92:	6a3b      	ldr	r3, [r7, #32]
 8006c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c98:	d20c      	bcs.n	8006cb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60da      	str	r2, [r3, #12]
 8006ca4:	e009      	b.n	8006cba <UART_SetConfig+0x5ce>
 8006ca6:	bf00      	nop
 8006ca8:	40008000 	.word	0x40008000
 8006cac:	00f42400 	.word	0x00f42400
 8006cb0:	0800d4c4 	.word	0x0800d4c4
      }
      else
      {
        ret = HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006cd6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3730      	adds	r7, #48	@ 0x30
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ce4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00a      	beq.n	8006d0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00a      	beq.n	8006d30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d78:	f003 0310 	and.w	r3, r3, #16
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00a      	beq.n	8006d96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	430a      	orrs	r2, r1
 8006d94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00a      	beq.n	8006db8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	430a      	orrs	r2, r1
 8006db6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01a      	beq.n	8006dfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006de2:	d10a      	bne.n	8006dfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	605a      	str	r2, [r3, #4]
  }
}
 8006e1c:	bf00      	nop
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b098      	sub	sp, #96	@ 0x60
 8006e2c:	af02      	add	r7, sp, #8
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e38:	f7fb fea8 	bl	8002b8c <HAL_GetTick>
 8006e3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d12f      	bne.n	8006eac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e50:	9300      	str	r3, [sp, #0]
 8006e52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e54:	2200      	movs	r2, #0
 8006e56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 f88e 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d022      	beq.n	8006eac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e8c:	e841 2300 	strex	r3, r2, [r1]
 8006e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1e6      	bne.n	8006e66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ea8:	2303      	movs	r3, #3
 8006eaa:	e063      	b.n	8006f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0304 	and.w	r3, r3, #4
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d149      	bne.n	8006f4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006eba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 f857 	bl	8006f7c <UART_WaitOnFlagUntilTimeout>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d03c      	beq.n	8006f4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006edc:	e853 3f00 	ldrex	r3, [r3]
 8006ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ef2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ef4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006efa:	e841 2300 	strex	r3, r2, [r1]
 8006efe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1e6      	bne.n	8006ed4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	e853 3f00 	ldrex	r3, [r3]
 8006f14:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f023 0301 	bic.w	r3, r3, #1
 8006f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	3308      	adds	r3, #8
 8006f24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f26:	61fa      	str	r2, [r7, #28]
 8006f28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2a:	69b9      	ldr	r1, [r7, #24]
 8006f2c:	69fa      	ldr	r2, [r7, #28]
 8006f2e:	e841 2300 	strex	r3, r2, [r1]
 8006f32:	617b      	str	r3, [r7, #20]
   return(result);
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d1e5      	bne.n	8006f06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2220      	movs	r2, #32
 8006f3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e012      	b.n	8006f74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2220      	movs	r2, #32
 8006f5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3758      	adds	r7, #88	@ 0x58
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f8c:	e04f      	b.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f94:	d04b      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f96:	f7fb fdf9 	bl	8002b8c <HAL_GetTick>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	1ad3      	subs	r3, r2, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d302      	bcc.n	8006fac <UART_WaitOnFlagUntilTimeout+0x30>
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006fac:	2303      	movs	r3, #3
 8006fae:	e04e      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 0304 	and.w	r3, r3, #4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d037      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b80      	cmp	r3, #128	@ 0x80
 8006fc2:	d034      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	2b40      	cmp	r3, #64	@ 0x40
 8006fc8:	d031      	beq.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69db      	ldr	r3, [r3, #28]
 8006fd0:	f003 0308 	and.w	r3, r3, #8
 8006fd4:	2b08      	cmp	r3, #8
 8006fd6:	d110      	bne.n	8006ffa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2208      	movs	r2, #8
 8006fde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 f95b 	bl	800729c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2208      	movs	r2, #8
 8006fea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e029      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007004:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007008:	d111      	bne.n	800702e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007012:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f941 	bl	800729c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800702a:	2303      	movs	r3, #3
 800702c:	e00f      	b.n	800704e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	69da      	ldr	r2, [r3, #28]
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4013      	ands	r3, r2
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	bf0c      	ite	eq
 800703e:	2301      	moveq	r3, #1
 8007040:	2300      	movne	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	79fb      	ldrb	r3, [r7, #7]
 8007048:	429a      	cmp	r2, r3
 800704a:	d0a0      	beq.n	8006f8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3710      	adds	r7, #16
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
	...

08007058 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007058:	b480      	push	{r7}
 800705a:	b0a3      	sub	sp, #140	@ 0x8c
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	4613      	mov	r3, r2
 8007064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	68ba      	ldr	r2, [r7, #8]
 800706a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	88fa      	ldrh	r2, [r7, #6]
 8007070:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	88fa      	ldrh	r2, [r7, #6]
 8007078:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800708a:	d10e      	bne.n	80070aa <UART_Start_Receive_IT+0x52>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d105      	bne.n	80070a0 <UART_Start_Receive_IT+0x48>
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800709a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800709e:	e02d      	b.n	80070fc <UART_Start_Receive_IT+0xa4>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	22ff      	movs	r2, #255	@ 0xff
 80070a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070a8:	e028      	b.n	80070fc <UART_Start_Receive_IT+0xa4>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10d      	bne.n	80070ce <UART_Start_Receive_IT+0x76>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d104      	bne.n	80070c4 <UART_Start_Receive_IT+0x6c>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	22ff      	movs	r2, #255	@ 0xff
 80070be:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070c2:	e01b      	b.n	80070fc <UART_Start_Receive_IT+0xa4>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	227f      	movs	r2, #127	@ 0x7f
 80070c8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070cc:	e016      	b.n	80070fc <UART_Start_Receive_IT+0xa4>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070d6:	d10d      	bne.n	80070f4 <UART_Start_Receive_IT+0x9c>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d104      	bne.n	80070ea <UART_Start_Receive_IT+0x92>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	227f      	movs	r2, #127	@ 0x7f
 80070e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070e8:	e008      	b.n	80070fc <UART_Start_Receive_IT+0xa4>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	223f      	movs	r2, #63	@ 0x3f
 80070ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80070f2:	e003      	b.n	80070fc <UART_Start_Receive_IT+0xa4>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2200      	movs	r2, #0
 8007100:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2222      	movs	r2, #34	@ 0x22
 8007108:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	3308      	adds	r3, #8
 8007112:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800711c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800711e:	f043 0301 	orr.w	r3, r3, #1
 8007122:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	3308      	adds	r3, #8
 800712c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007130:	673a      	str	r2, [r7, #112]	@ 0x70
 8007132:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007136:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800713e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e3      	bne.n	800710c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800714c:	d14f      	bne.n	80071ee <UART_Start_Receive_IT+0x196>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007154:	88fa      	ldrh	r2, [r7, #6]
 8007156:	429a      	cmp	r2, r3
 8007158:	d349      	bcc.n	80071ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007162:	d107      	bne.n	8007174 <UART_Start_Receive_IT+0x11c>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d103      	bne.n	8007174 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	4a47      	ldr	r2, [pc, #284]	@ (800728c <UART_Start_Receive_IT+0x234>)
 8007170:	675a      	str	r2, [r3, #116]	@ 0x74
 8007172:	e002      	b.n	800717a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4a46      	ldr	r2, [pc, #280]	@ (8007290 <UART_Start_Receive_IT+0x238>)
 8007178:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d01a      	beq.n	80071b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007192:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007196:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80071a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071a6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80071aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80071ac:	e841 2300 	strex	r3, r2, [r1]
 80071b0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80071b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1e4      	bne.n	8007182 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3308      	adds	r3, #8
 80071d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80071d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80071da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80071de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80071e0:	e841 2300 	strex	r3, r2, [r1]
 80071e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80071e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d1e5      	bne.n	80071b8 <UART_Start_Receive_IT+0x160>
 80071ec:	e046      	b.n	800727c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071f6:	d107      	bne.n	8007208 <UART_Start_Receive_IT+0x1b0>
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4a24      	ldr	r2, [pc, #144]	@ (8007294 <UART_Start_Receive_IT+0x23c>)
 8007204:	675a      	str	r2, [r3, #116]	@ 0x74
 8007206:	e002      	b.n	800720e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a23      	ldr	r2, [pc, #140]	@ (8007298 <UART_Start_Receive_IT+0x240>)
 800720c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d019      	beq.n	800724a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800722a:	677b      	str	r3, [r7, #116]	@ 0x74
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007234:	637b      	str	r3, [r7, #52]	@ 0x34
 8007236:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800723a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e6      	bne.n	8007216 <UART_Start_Receive_IT+0x1be>
 8007248:	e018      	b.n	800727c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	613b      	str	r3, [r7, #16]
   return(result);
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f043 0320 	orr.w	r3, r3, #32
 800725e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007268:	623b      	str	r3, [r7, #32]
 800726a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	69f9      	ldr	r1, [r7, #28]
 800726e:	6a3a      	ldr	r2, [r7, #32]
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	61bb      	str	r3, [r7, #24]
   return(result);
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e6      	bne.n	800724a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800727c:	2300      	movs	r3, #0
}
 800727e:	4618      	mov	r0, r3
 8007280:	378c      	adds	r7, #140	@ 0x8c
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	08007abd 	.word	0x08007abd
 8007290:	0800775d 	.word	0x0800775d
 8007294:	080075a5 	.word	0x080075a5
 8007298:	080073ed 	.word	0x080073ed

0800729c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800729c:	b480      	push	{r7}
 800729e:	b095      	sub	sp, #84	@ 0x54
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80072b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80072c4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1e6      	bne.n	80072a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3308      	adds	r3, #8
 80072dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072de:	6a3b      	ldr	r3, [r7, #32]
 80072e0:	e853 3f00 	ldrex	r3, [r3]
 80072e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	3308      	adds	r3, #8
 80072f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80072fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007302:	e841 2300 	strex	r3, r2, [r1]
 8007306:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1e3      	bne.n	80072d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007312:	2b01      	cmp	r3, #1
 8007314:	d118      	bne.n	8007348 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	e853 3f00 	ldrex	r3, [r3]
 8007322:	60bb      	str	r3, [r7, #8]
   return(result);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f023 0310 	bic.w	r3, r3, #16
 800732a:	647b      	str	r3, [r7, #68]	@ 0x44
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	461a      	mov	r2, r3
 8007332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007338:	6979      	ldr	r1, [r7, #20]
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	e841 2300 	strex	r3, r2, [r1]
 8007340:	613b      	str	r3, [r7, #16]
   return(result);
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1e6      	bne.n	8007316 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800735c:	bf00      	nop
 800735e:	3754      	adds	r7, #84	@ 0x54
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007374:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2200      	movs	r2, #0
 800737a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2200      	movs	r2, #0
 8007382:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f7ff f99a 	bl	80066c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	61bb      	str	r3, [r7, #24]
 80073bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073be:	6979      	ldr	r1, [r7, #20]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	e841 2300 	strex	r3, r2, [r1]
 80073c6:	613b      	str	r3, [r7, #16]
   return(result);
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e6      	bne.n	800739c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f7ff f965 	bl	80066ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073e2:	bf00      	nop
 80073e4:	3720      	adds	r7, #32
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
	...

080073ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b09c      	sub	sp, #112	@ 0x70
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007404:	2b22      	cmp	r3, #34	@ 0x22
 8007406:	f040 80be 	bne.w	8007586 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007414:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007418:	b2d9      	uxtb	r1, r3
 800741a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800741e:	b2da      	uxtb	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007424:	400a      	ands	r2, r1
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742e:	1c5a      	adds	r2, r3, #1
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800743a:	b29b      	uxth	r3, r3
 800743c:	3b01      	subs	r3, #1
 800743e:	b29a      	uxth	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800744c:	b29b      	uxth	r3, r3
 800744e:	2b00      	cmp	r3, #0
 8007450:	f040 80a1 	bne.w	8007596 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007462:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007464:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007468:	66bb      	str	r3, [r7, #104]	@ 0x68
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007472:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007474:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007478:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e6      	bne.n	8007454 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3308      	adds	r3, #8
 800748c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007490:	e853 3f00 	ldrex	r3, [r3]
 8007494:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007498:	f023 0301 	bic.w	r3, r3, #1
 800749c:	667b      	str	r3, [r7, #100]	@ 0x64
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3308      	adds	r3, #8
 80074a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80074a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80074a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074ae:	e841 2300 	strex	r3, r2, [r1]
 80074b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e5      	bne.n	8007486 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2220      	movs	r2, #32
 80074be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4a33      	ldr	r2, [pc, #204]	@ (80075a0 <UART_RxISR_8BIT+0x1b4>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d01f      	beq.n	8007518 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d018      	beq.n	8007518 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	623b      	str	r3, [r7, #32]
   return(result);
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	461a      	mov	r2, r3
 8007502:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007504:	633b      	str	r3, [r7, #48]	@ 0x30
 8007506:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007508:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800750a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800750c:	e841 2300 	strex	r3, r2, [r1]
 8007510:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007514:	2b00      	cmp	r3, #0
 8007516:	d1e6      	bne.n	80074e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800751c:	2b01      	cmp	r3, #1
 800751e:	d12e      	bne.n	800757e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2200      	movs	r2, #0
 8007524:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	60fb      	str	r3, [r7, #12]
   return(result);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0310 	bic.w	r3, r3, #16
 800753a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	461a      	mov	r2, r3
 8007542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007544:	61fb      	str	r3, [r7, #28]
 8007546:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007548:	69b9      	ldr	r1, [r7, #24]
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	e841 2300 	strex	r3, r2, [r1]
 8007550:	617b      	str	r3, [r7, #20]
   return(result);
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1e6      	bne.n	8007526 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	69db      	ldr	r3, [r3, #28]
 800755e:	f003 0310 	and.w	r3, r3, #16
 8007562:	2b10      	cmp	r3, #16
 8007564:	d103      	bne.n	800756e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2210      	movs	r2, #16
 800756c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff f8ac 	bl	80066d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800757c:	e00b      	b.n	8007596 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fa fed8 	bl	8002334 <HAL_UART_RxCpltCallback>
}
 8007584:	e007      	b.n	8007596 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699a      	ldr	r2, [r3, #24]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0208 	orr.w	r2, r2, #8
 8007594:	619a      	str	r2, [r3, #24]
}
 8007596:	bf00      	nop
 8007598:	3770      	adds	r7, #112	@ 0x70
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	40008000 	.word	0x40008000

080075a4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b09c      	sub	sp, #112	@ 0x70
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80075b2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075bc:	2b22      	cmp	r3, #34	@ 0x22
 80075be:	f040 80be 	bne.w	800773e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80075d2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80075d6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80075da:	4013      	ands	r3, r2
 80075dc:	b29a      	uxth	r2, r3
 80075de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80075e0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075e6:	1c9a      	adds	r2, r3, #2
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	3b01      	subs	r3, #1
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007604:	b29b      	uxth	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	f040 80a1 	bne.w	800774e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800761a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800761c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007620:	667b      	str	r3, [r7, #100]	@ 0x64
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800762a:	657b      	str	r3, [r7, #84]	@ 0x54
 800762c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007630:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e6      	bne.n	800760c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3308      	adds	r3, #8
 8007644:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007648:	e853 3f00 	ldrex	r3, [r3]
 800764c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	f023 0301 	bic.w	r3, r3, #1
 8007654:	663b      	str	r3, [r7, #96]	@ 0x60
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3308      	adds	r3, #8
 800765c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800765e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007660:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007664:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800766c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e5      	bne.n	800763e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2220      	movs	r2, #32
 8007676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a33      	ldr	r2, [pc, #204]	@ (8007758 <UART_RxISR_16BIT+0x1b4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d01f      	beq.n	80076d0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d018      	beq.n	80076d0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80076b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80076be:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e6      	bne.n	800769e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d12e      	bne.n	8007736 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	e853 3f00 	ldrex	r3, [r3]
 80076ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f023 0310 	bic.w	r3, r3, #16
 80076f2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076fc:	61bb      	str	r3, [r7, #24]
 80076fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	6979      	ldr	r1, [r7, #20]
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	613b      	str	r3, [r7, #16]
   return(result);
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e6      	bne.n	80076de <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69db      	ldr	r3, [r3, #28]
 8007716:	f003 0310 	and.w	r3, r3, #16
 800771a:	2b10      	cmp	r3, #16
 800771c:	d103      	bne.n	8007726 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2210      	movs	r2, #16
 8007724:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800772c:	4619      	mov	r1, r3
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f7fe ffd0 	bl	80066d4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007734:	e00b      	b.n	800774e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fa fdfc 	bl	8002334 <HAL_UART_RxCpltCallback>
}
 800773c:	e007      	b.n	800774e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	699a      	ldr	r2, [r3, #24]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0208 	orr.w	r2, r2, #8
 800774c:	619a      	str	r2, [r3, #24]
}
 800774e:	bf00      	nop
 8007750:	3770      	adds	r7, #112	@ 0x70
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	40008000 	.word	0x40008000

0800775c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b0ac      	sub	sp, #176	@ 0xb0
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800776a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	69db      	ldr	r3, [r3, #28]
 8007774:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007792:	2b22      	cmp	r3, #34	@ 0x22
 8007794:	f040 8182 	bne.w	8007a9c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800779e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077a2:	e125      	b.n	80079f0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077aa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80077ae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80077b2:	b2d9      	uxtb	r1, r3
 80077b4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077be:	400a      	ands	r2, r1
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80077c8:	1c5a      	adds	r2, r3, #1
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	3b01      	subs	r3, #1
 80077d8:	b29a      	uxth	r2, r3
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	69db      	ldr	r3, [r3, #28]
 80077e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077ee:	f003 0307 	and.w	r3, r3, #7
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d053      	beq.n	800789e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d011      	beq.n	8007826 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00b      	beq.n	8007826 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2201      	movs	r2, #1
 8007814:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800781c:	f043 0201 	orr.w	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007826:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800782a:	f003 0302 	and.w	r3, r3, #2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d011      	beq.n	8007856 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007836:	f003 0301 	and.w	r3, r3, #1
 800783a:	2b00      	cmp	r3, #0
 800783c:	d00b      	beq.n	8007856 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2202      	movs	r2, #2
 8007844:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800784c:	f043 0204 	orr.w	r2, r3, #4
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007856:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800785a:	f003 0304 	and.w	r3, r3, #4
 800785e:	2b00      	cmp	r3, #0
 8007860:	d011      	beq.n	8007886 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00b      	beq.n	8007886 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2204      	movs	r2, #4
 8007874:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800787c:	f043 0202 	orr.w	r2, r3, #2
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800788c:	2b00      	cmp	r3, #0
 800788e:	d006      	beq.n	800789e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f7fe ff15 	bl	80066c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2200      	movs	r2, #0
 800789a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f040 80a2 	bne.w	80079f0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80078b4:	e853 3f00 	ldrex	r3, [r3]
 80078b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80078ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	461a      	mov	r2, r3
 80078ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80078d0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80078d4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80078d6:	e841 2300 	strex	r3, r2, [r1]
 80078da:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80078dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d1e4      	bne.n	80078ac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3308      	adds	r3, #8
 80078e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078ec:	e853 3f00 	ldrex	r3, [r3]
 80078f0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80078f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80078f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80078f8:	f023 0301 	bic.w	r3, r3, #1
 80078fc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800790a:	66ba      	str	r2, [r7, #104]	@ 0x68
 800790c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007910:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007912:	e841 2300 	strex	r3, r2, [r1]
 8007916:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007918:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1e1      	bne.n	80078e2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2220      	movs	r2, #32
 8007922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a5f      	ldr	r2, [pc, #380]	@ (8007ab4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d021      	beq.n	8007980 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	685b      	ldr	r3, [r3, #4]
 8007942:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01a      	beq.n	8007980 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007958:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800795a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800795e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800796c:	657b      	str	r3, [r7, #84]	@ 0x54
 800796e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007970:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007972:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007974:	e841 2300 	strex	r3, r2, [r1]
 8007978:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800797a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d1e4      	bne.n	800794a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007984:	2b01      	cmp	r3, #1
 8007986:	d130      	bne.n	80079ea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007996:	e853 3f00 	ldrex	r3, [r3]
 800799a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800799c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800799e:	f023 0310 	bic.w	r3, r3, #16
 80079a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80079b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e4      	bne.n	800798e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f003 0310 	and.w	r3, r3, #16
 80079ce:	2b10      	cmp	r3, #16
 80079d0:	d103      	bne.n	80079da <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2210      	movs	r2, #16
 80079d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80079e0:	4619      	mov	r1, r3
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f7fe fe76 	bl	80066d4 <HAL_UARTEx_RxEventCallback>
 80079e8:	e002      	b.n	80079f0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fa fca2 	bl	8002334 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d006      	beq.n	8007a06 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80079f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	f47f aecf 	bne.w	80077a4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a0c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a10:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d049      	beq.n	8007aac <UART_RxISR_8BIT_FIFOEN+0x350>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a1e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d242      	bcs.n	8007aac <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6a3b      	ldr	r3, [r7, #32]
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3308      	adds	r3, #8
 8007a46:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e3      	bne.n	8007a26 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	4a15      	ldr	r2, [pc, #84]	@ (8007ab8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007a62:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	f043 0320 	orr.w	r3, r3, #32
 8007a78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	461a      	mov	r2, r3
 8007a82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a86:	61bb      	str	r3, [r7, #24]
 8007a88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6979      	ldr	r1, [r7, #20]
 8007a8c:	69ba      	ldr	r2, [r7, #24]
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	613b      	str	r3, [r7, #16]
   return(result);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e4      	bne.n	8007a64 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a9a:	e007      	b.n	8007aac <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699a      	ldr	r2, [r3, #24]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0208 	orr.w	r2, r2, #8
 8007aaa:	619a      	str	r2, [r3, #24]
}
 8007aac:	bf00      	nop
 8007aae:	37b0      	adds	r7, #176	@ 0xb0
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	40008000 	.word	0x40008000
 8007ab8:	080073ed 	.word	0x080073ed

08007abc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b0ae      	sub	sp, #184	@ 0xb8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007aca:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69db      	ldr	r3, [r3, #28]
 8007ad4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007af2:	2b22      	cmp	r3, #34	@ 0x22
 8007af4:	f040 8186 	bne.w	8007e04 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007afe:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b02:	e129      	b.n	8007d58 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0a:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007b16:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007b1a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007b1e:	4013      	ands	r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2c:	1c9a      	adds	r2, r3, #2
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d053      	beq.n	8007c02 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d011      	beq.n	8007b8a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007b66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2201      	movs	r2, #1
 8007b78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b80:	f043 0201 	orr.w	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d011      	beq.n	8007bba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007b96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb0:	f043 0204 	orr.w	r2, r3, #4
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d011      	beq.n	8007bea <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007bc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be0:	f043 0202 	orr.w	r2, r3, #2
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7fe fd63 	bl	80066c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f040 80a4 	bne.w	8007d58 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007c32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c36:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007c3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007c3e:	e841 2300 	strex	r3, r2, [r1]
 8007c42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1e2      	bne.n	8007c10 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3308      	adds	r3, #8
 8007c50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c54:	e853 3f00 	ldrex	r3, [r3]
 8007c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007c5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c60:	f023 0301 	bic.w	r3, r3, #1
 8007c64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007c72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c7a:	e841 2300 	strex	r3, r2, [r1]
 8007c7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1e1      	bne.n	8007c4a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a5f      	ldr	r2, [pc, #380]	@ (8007e1c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d021      	beq.n	8007ce8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d01a      	beq.n	8007ce8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007cc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cc2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cd6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007cda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e4      	bne.n	8007cb2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d130      	bne.n	8007d52 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d06:	f023 0310 	bic.w	r3, r3, #16
 8007d0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	461a      	mov	r2, r3
 8007d14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d1a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007d20:	e841 2300 	strex	r3, r2, [r1]
 8007d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e4      	bne.n	8007cf6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	f003 0310 	and.w	r3, r3, #16
 8007d36:	2b10      	cmp	r3, #16
 8007d38:	d103      	bne.n	8007d42 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2210      	movs	r2, #16
 8007d40:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d48:	4619      	mov	r1, r3
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7fe fcc2 	bl	80066d4 <HAL_UARTEx_RxEventCallback>
 8007d50:	e002      	b.n	8007d58 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7fa faee 	bl	8002334 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d58:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d006      	beq.n	8007d6e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007d60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d64:	f003 0320 	and.w	r3, r3, #32
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f47f aecb 	bne.w	8007b04 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d74:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d78:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d049      	beq.n	8007e14 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d86:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d242      	bcs.n	8007e14 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3308      	adds	r3, #8
 8007d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d9e:	6a3b      	ldr	r3, [r7, #32]
 8007da0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007da4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3308      	adds	r3, #8
 8007dae:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007db2:	633a      	str	r2, [r7, #48]	@ 0x30
 8007db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e3      	bne.n	8007d8e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a15      	ldr	r2, [pc, #84]	@ (8007e20 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007dca:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f043 0320 	orr.w	r3, r3, #32
 8007de0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	69b9      	ldr	r1, [r7, #24]
 8007df4:	69fa      	ldr	r2, [r7, #28]
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	617b      	str	r3, [r7, #20]
   return(result);
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e4      	bne.n	8007dcc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e02:	e007      	b.n	8007e14 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f042 0208 	orr.w	r2, r2, #8
 8007e12:	619a      	str	r2, [r3, #24]
}
 8007e14:	bf00      	nop
 8007e16:	37b8      	adds	r7, #184	@ 0xb8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}
 8007e1c:	40008000 	.word	0x40008000
 8007e20:	080075a5 	.word	0x080075a5

08007e24 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e6e:	2b01      	cmp	r3, #1
 8007e70:	d101      	bne.n	8007e76 <HAL_UARTEx_DisableFifoMode+0x16>
 8007e72:	2302      	movs	r3, #2
 8007e74:	e027      	b.n	8007ec6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2224      	movs	r2, #36	@ 0x24
 8007e82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f022 0201 	bic.w	r2, r2, #1
 8007e9c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007ea4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d101      	bne.n	8007eea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ee6:	2302      	movs	r3, #2
 8007ee8:	e02d      	b.n	8007f46 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2224      	movs	r2, #36	@ 0x24
 8007ef6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0201 	bic.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	430a      	orrs	r2, r1
 8007f24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f850 	bl	8007fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	68fa      	ldr	r2, [r7, #12]
 8007f32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2220      	movs	r2, #32
 8007f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007f44:	2300      	movs	r3, #0
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d101      	bne.n	8007f66 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007f62:	2302      	movs	r3, #2
 8007f64:	e02d      	b.n	8007fc2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2224      	movs	r2, #36	@ 0x24
 8007f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0201 	bic.w	r2, r2, #1
 8007f8c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	430a      	orrs	r2, r1
 8007fa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f812 	bl	8007fcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	68fa      	ldr	r2, [r7, #12]
 8007fae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d108      	bne.n	8007fee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007fec:	e031      	b.n	8008052 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007fee:	2308      	movs	r3, #8
 8007ff0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ff2:	2308      	movs	r3, #8
 8007ff4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	0e5b      	lsrs	r3, r3, #25
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	0f5b      	lsrs	r3, r3, #29
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 0307 	and.w	r3, r3, #7
 8008014:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008016:	7bbb      	ldrb	r3, [r7, #14]
 8008018:	7b3a      	ldrb	r2, [r7, #12]
 800801a:	4911      	ldr	r1, [pc, #68]	@ (8008060 <UARTEx_SetNbDataToProcess+0x94>)
 800801c:	5c8a      	ldrb	r2, [r1, r2]
 800801e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008022:	7b3a      	ldrb	r2, [r7, #12]
 8008024:	490f      	ldr	r1, [pc, #60]	@ (8008064 <UARTEx_SetNbDataToProcess+0x98>)
 8008026:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008028:	fb93 f3f2 	sdiv	r3, r3, r2
 800802c:	b29a      	uxth	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	7b7a      	ldrb	r2, [r7, #13]
 8008038:	4909      	ldr	r1, [pc, #36]	@ (8008060 <UARTEx_SetNbDataToProcess+0x94>)
 800803a:	5c8a      	ldrb	r2, [r1, r2]
 800803c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008040:	7b7a      	ldrb	r2, [r7, #13]
 8008042:	4908      	ldr	r1, [pc, #32]	@ (8008064 <UARTEx_SetNbDataToProcess+0x98>)
 8008044:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008046:	fb93 f3f2 	sdiv	r3, r3, r2
 800804a:	b29a      	uxth	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008052:	bf00      	nop
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	0800d4dc 	.word	0x0800d4dc
 8008064:	0800d4e4 	.word	0x0800d4e4

08008068 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b08a      	sub	sp, #40	@ 0x28
 800806c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800806e:	2300      	movs	r3, #0
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008072:	4b7e      	ldr	r3, [pc, #504]	@ (800826c <xTaskIncrementTick+0x204>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	f040 80ed 	bne.w	8008256 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800807c:	4b7c      	ldr	r3, [pc, #496]	@ (8008270 <xTaskIncrementTick+0x208>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3301      	adds	r3, #1
 8008082:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008084:	4a7a      	ldr	r2, [pc, #488]	@ (8008270 <xTaskIncrementTick+0x208>)
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d121      	bne.n	80080d4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008090:	4b78      	ldr	r3, [pc, #480]	@ (8008274 <xTaskIncrementTick+0x20c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00b      	beq.n	80080b2 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800809a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809e:	f383 8811 	msr	BASEPRI, r3
 80080a2:	f3bf 8f6f 	isb	sy
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80080ac:	bf00      	nop
 80080ae:	bf00      	nop
 80080b0:	e7fd      	b.n	80080ae <xTaskIncrementTick+0x46>
 80080b2:	4b70      	ldr	r3, [pc, #448]	@ (8008274 <xTaskIncrementTick+0x20c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	61fb      	str	r3, [r7, #28]
 80080b8:	4b6f      	ldr	r3, [pc, #444]	@ (8008278 <xTaskIncrementTick+0x210>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a6d      	ldr	r2, [pc, #436]	@ (8008274 <xTaskIncrementTick+0x20c>)
 80080be:	6013      	str	r3, [r2, #0]
 80080c0:	4a6d      	ldr	r2, [pc, #436]	@ (8008278 <xTaskIncrementTick+0x210>)
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	6013      	str	r3, [r2, #0]
 80080c6:	4b6d      	ldr	r3, [pc, #436]	@ (800827c <xTaskIncrementTick+0x214>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3301      	adds	r3, #1
 80080cc:	4a6b      	ldr	r2, [pc, #428]	@ (800827c <xTaskIncrementTick+0x214>)
 80080ce:	6013      	str	r3, [r2, #0]
 80080d0:	f000 f93e 	bl	8008350 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80080d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008280 <xTaskIncrementTick+0x218>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6a3a      	ldr	r2, [r7, #32]
 80080da:	429a      	cmp	r2, r3
 80080dc:	f0c0 80a6 	bcc.w	800822c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080e0:	4b64      	ldr	r3, [pc, #400]	@ (8008274 <xTaskIncrementTick+0x20c>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ea:	4b65      	ldr	r3, [pc, #404]	@ (8008280 <xTaskIncrementTick+0x218>)
 80080ec:	f04f 32ff 	mov.w	r2, #4294967295
 80080f0:	601a      	str	r2, [r3, #0]
                    break;
 80080f2:	e09b      	b.n	800822c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f4:	4b5f      	ldr	r3, [pc, #380]	@ (8008274 <xTaskIncrementTick+0x20c>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8008104:	6a3a      	ldr	r2, [r7, #32]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	429a      	cmp	r2, r3
 800810a:	d203      	bcs.n	8008114 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800810c:	4a5c      	ldr	r2, [pc, #368]	@ (8008280 <xTaskIncrementTick+0x218>)
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008112:	e08b      	b.n	800822c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	695b      	ldr	r3, [r3, #20]
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	69bb      	ldr	r3, [r7, #24]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	69ba      	ldr	r2, [r7, #24]
 8008120:	68d2      	ldr	r2, [r2, #12]
 8008122:	609a      	str	r2, [r3, #8]
 8008124:	69bb      	ldr	r3, [r7, #24]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	69ba      	ldr	r2, [r7, #24]
 800812a:	6892      	ldr	r2, [r2, #8]
 800812c:	605a      	str	r2, [r3, #4]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	3304      	adds	r3, #4
 8008136:	429a      	cmp	r2, r3
 8008138:	d103      	bne.n	8008142 <xTaskIncrementTick+0xda>
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	69bb      	ldr	r3, [r7, #24]
 8008144:	2200      	movs	r2, #0
 8008146:	615a      	str	r2, [r3, #20]
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	1e5a      	subs	r2, r3, #1
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008156:	2b00      	cmp	r3, #0
 8008158:	d01e      	beq.n	8008198 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	6a12      	ldr	r2, [r2, #32]
 8008168:	609a      	str	r2, [r3, #8]
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	6a1b      	ldr	r3, [r3, #32]
 800816e:	69ba      	ldr	r2, [r7, #24]
 8008170:	69d2      	ldr	r2, [r2, #28]
 8008172:	605a      	str	r2, [r3, #4]
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	3318      	adds	r3, #24
 800817c:	429a      	cmp	r2, r3
 800817e:	d103      	bne.n	8008188 <xTaskIncrementTick+0x120>
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	6a1a      	ldr	r2, [r3, #32]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	605a      	str	r2, [r3, #4]
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	2200      	movs	r2, #0
 800818c:	629a      	str	r2, [r3, #40]	@ 0x28
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	1e5a      	subs	r2, r3, #1
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819c:	2201      	movs	r2, #1
 800819e:	409a      	lsls	r2, r3
 80081a0:	4b38      	ldr	r3, [pc, #224]	@ (8008284 <xTaskIncrementTick+0x21c>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4313      	orrs	r3, r2
 80081a6:	4a37      	ldr	r2, [pc, #220]	@ (8008284 <xTaskIncrementTick+0x21c>)
 80081a8:	6013      	str	r3, [r2, #0]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081ae:	4936      	ldr	r1, [pc, #216]	@ (8008288 <xTaskIncrementTick+0x220>)
 80081b0:	4613      	mov	r3, r2
 80081b2:	009b      	lsls	r3, r3, #2
 80081b4:	4413      	add	r3, r2
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	440b      	add	r3, r1
 80081ba:	3304      	adds	r3, #4
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60bb      	str	r3, [r7, #8]
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	609a      	str	r2, [r3, #8]
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	689a      	ldr	r2, [r3, #8]
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	60da      	str	r2, [r3, #12]
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	689b      	ldr	r3, [r3, #8]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	3204      	adds	r2, #4
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	1d1a      	adds	r2, r3, #4
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	609a      	str	r2, [r3, #8]
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4a26      	ldr	r2, [pc, #152]	@ (8008288 <xTaskIncrementTick+0x220>)
 80081ee:	441a      	add	r2, r3
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	615a      	str	r2, [r3, #20]
 80081f4:	69bb      	ldr	r3, [r7, #24]
 80081f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f8:	4923      	ldr	r1, [pc, #140]	@ (8008288 <xTaskIncrementTick+0x220>)
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	440b      	add	r3, r1
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	1c59      	adds	r1, r3, #1
 8008208:	481f      	ldr	r0, [pc, #124]	@ (8008288 <xTaskIncrementTick+0x220>)
 800820a:	4613      	mov	r3, r2
 800820c:	009b      	lsls	r3, r3, #2
 800820e:	4413      	add	r3, r2
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4403      	add	r3, r0
 8008214:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800821a:	4b1c      	ldr	r3, [pc, #112]	@ (800828c <xTaskIncrementTick+0x224>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008220:	429a      	cmp	r2, r3
 8008222:	f67f af5d 	bls.w	80080e0 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8008226:	2301      	movs	r3, #1
 8008228:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800822a:	e759      	b.n	80080e0 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800822c:	4b17      	ldr	r3, [pc, #92]	@ (800828c <xTaskIncrementTick+0x224>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008232:	4915      	ldr	r1, [pc, #84]	@ (8008288 <xTaskIncrementTick+0x220>)
 8008234:	4613      	mov	r3, r2
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	4413      	add	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d901      	bls.n	8008248 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8008244:	2301      	movs	r3, #1
 8008246:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008248:	4b11      	ldr	r3, [pc, #68]	@ (8008290 <xTaskIncrementTick+0x228>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d007      	beq.n	8008260 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8008250:	2301      	movs	r3, #1
 8008252:	627b      	str	r3, [r7, #36]	@ 0x24
 8008254:	e004      	b.n	8008260 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008256:	4b0f      	ldr	r3, [pc, #60]	@ (8008294 <xTaskIncrementTick+0x22c>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3301      	adds	r3, #1
 800825c:	4a0d      	ldr	r2, [pc, #52]	@ (8008294 <xTaskIncrementTick+0x22c>)
 800825e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008262:	4618      	mov	r0, r3
 8008264:	3728      	adds	r7, #40	@ 0x28
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	200006cc 	.word	0x200006cc
 8008270:	200006b4 	.word	0x200006b4
 8008274:	200006ac 	.word	0x200006ac
 8008278:	200006b0 	.word	0x200006b0
 800827c:	200006c4 	.word	0x200006c4
 8008280:	200006c8 	.word	0x200006c8
 8008284:	200006b8 	.word	0x200006b8
 8008288:	20000648 	.word	0x20000648
 800828c:	20000644 	.word	0x20000644
 8008290:	200006c0 	.word	0x200006c0
 8008294:	200006bc 	.word	0x200006bc

08008298 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800829e:	4b27      	ldr	r3, [pc, #156]	@ (800833c <vTaskSwitchContext+0xa4>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80082a6:	4b26      	ldr	r3, [pc, #152]	@ (8008340 <vTaskSwitchContext+0xa8>)
 80082a8:	2201      	movs	r2, #1
 80082aa:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80082ac:	e040      	b.n	8008330 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80082ae:	4b24      	ldr	r3, [pc, #144]	@ (8008340 <vTaskSwitchContext+0xa8>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082b4:	4b23      	ldr	r3, [pc, #140]	@ (8008344 <vTaskSwitchContext+0xac>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	fab3 f383 	clz	r3, r3
 80082c0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80082c2:	7afb      	ldrb	r3, [r7, #11]
 80082c4:	f1c3 031f 	rsb	r3, r3, #31
 80082c8:	617b      	str	r3, [r7, #20]
 80082ca:	491f      	ldr	r1, [pc, #124]	@ (8008348 <vTaskSwitchContext+0xb0>)
 80082cc:	697a      	ldr	r2, [r7, #20]
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	440b      	add	r3, r1
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10b      	bne.n	80082f6 <vTaskSwitchContext+0x5e>
        __asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	607b      	str	r3, [r7, #4]
    }
 80082f0:	bf00      	nop
 80082f2:	bf00      	nop
 80082f4:	e7fd      	b.n	80082f2 <vTaskSwitchContext+0x5a>
 80082f6:	697a      	ldr	r2, [r7, #20]
 80082f8:	4613      	mov	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	4413      	add	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4a11      	ldr	r2, [pc, #68]	@ (8008348 <vTaskSwitchContext+0xb0>)
 8008302:	4413      	add	r3, r2
 8008304:	613b      	str	r3, [r7, #16]
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	685a      	ldr	r2, [r3, #4]
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	605a      	str	r2, [r3, #4]
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	685a      	ldr	r2, [r3, #4]
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	3308      	adds	r3, #8
 8008318:	429a      	cmp	r2, r3
 800831a:	d104      	bne.n	8008326 <vTaskSwitchContext+0x8e>
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	605a      	str	r2, [r3, #4]
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	4a07      	ldr	r2, [pc, #28]	@ (800834c <vTaskSwitchContext+0xb4>)
 800832e:	6013      	str	r3, [r2, #0]
}
 8008330:	bf00      	nop
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	200006cc 	.word	0x200006cc
 8008340:	200006c0 	.word	0x200006c0
 8008344:	200006b8 	.word	0x200006b8
 8008348:	20000648 	.word	0x20000648
 800834c:	20000644 	.word	0x20000644

08008350 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008350:	b480      	push	{r7}
 8008352:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008354:	4b0a      	ldr	r3, [pc, #40]	@ (8008380 <prvResetNextTaskUnblockTime+0x30>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800835e:	4b09      	ldr	r3, [pc, #36]	@ (8008384 <prvResetNextTaskUnblockTime+0x34>)
 8008360:	f04f 32ff 	mov.w	r2, #4294967295
 8008364:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8008366:	e005      	b.n	8008374 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008368:	4b05      	ldr	r3, [pc, #20]	@ (8008380 <prvResetNextTaskUnblockTime+0x30>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a04      	ldr	r2, [pc, #16]	@ (8008384 <prvResetNextTaskUnblockTime+0x34>)
 8008372:	6013      	str	r3, [r2, #0]
}
 8008374:	bf00      	nop
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop
 8008380:	200006ac 	.word	0x200006ac
 8008384:	200006c8 	.word	0x200006c8
	...

08008390 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008390:	4b07      	ldr	r3, [pc, #28]	@ (80083b0 <pxCurrentTCBConst2>)
 8008392:	6819      	ldr	r1, [r3, #0]
 8008394:	6808      	ldr	r0, [r1, #0]
 8008396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839a:	f380 8809 	msr	PSP, r0
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f04f 0000 	mov.w	r0, #0
 80083a6:	f380 8811 	msr	BASEPRI, r0
 80083aa:	4770      	bx	lr
 80083ac:	f3af 8000 	nop.w

080083b0 <pxCurrentTCBConst2>:
 80083b0:	20000644 	.word	0x20000644
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop
	...

080083c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80083c0:	f3ef 8009 	mrs	r0, PSP
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	4b15      	ldr	r3, [pc, #84]	@ (8008420 <pxCurrentTCBConst>)
 80083ca:	681a      	ldr	r2, [r3, #0]
 80083cc:	f01e 0f10 	tst.w	lr, #16
 80083d0:	bf08      	it	eq
 80083d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80083d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083da:	6010      	str	r0, [r2, #0]
 80083dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80083e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80083e4:	f380 8811 	msr	BASEPRI, r0
 80083e8:	f3bf 8f4f 	dsb	sy
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f7ff ff52 	bl	8008298 <vTaskSwitchContext>
 80083f4:	f04f 0000 	mov.w	r0, #0
 80083f8:	f380 8811 	msr	BASEPRI, r0
 80083fc:	bc09      	pop	{r0, r3}
 80083fe:	6819      	ldr	r1, [r3, #0]
 8008400:	6808      	ldr	r0, [r1, #0]
 8008402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008406:	f01e 0f10 	tst.w	lr, #16
 800840a:	bf08      	it	eq
 800840c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008410:	f380 8809 	msr	PSP, r0
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	f3af 8000 	nop.w

08008420 <pxCurrentTCBConst>:
 8008420:	20000644 	.word	0x20000644
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop

08008428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
        __asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	607b      	str	r3, [r7, #4]
    }
 8008440:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008442:	f7ff fe11 	bl	8008068 <xTaskIncrementTick>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800844c:	4b06      	ldr	r3, [pc, #24]	@ (8008468 <SysTick_Handler+0x40>)
 800844e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008452:	601a      	str	r2, [r3, #0]
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800845e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <__cvt>:
 800846c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	ec57 6b10 	vmov	r6, r7, d0
 8008474:	2f00      	cmp	r7, #0
 8008476:	460c      	mov	r4, r1
 8008478:	4619      	mov	r1, r3
 800847a:	463b      	mov	r3, r7
 800847c:	bfbb      	ittet	lt
 800847e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008482:	461f      	movlt	r7, r3
 8008484:	2300      	movge	r3, #0
 8008486:	232d      	movlt	r3, #45	@ 0x2d
 8008488:	700b      	strb	r3, [r1, #0]
 800848a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800848c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008490:	4691      	mov	r9, r2
 8008492:	f023 0820 	bic.w	r8, r3, #32
 8008496:	bfbc      	itt	lt
 8008498:	4632      	movlt	r2, r6
 800849a:	4616      	movlt	r6, r2
 800849c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80084a0:	d005      	beq.n	80084ae <__cvt+0x42>
 80084a2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80084a6:	d100      	bne.n	80084aa <__cvt+0x3e>
 80084a8:	3401      	adds	r4, #1
 80084aa:	2102      	movs	r1, #2
 80084ac:	e000      	b.n	80084b0 <__cvt+0x44>
 80084ae:	2103      	movs	r1, #3
 80084b0:	ab03      	add	r3, sp, #12
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	ab02      	add	r3, sp, #8
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	ec47 6b10 	vmov	d0, r6, r7
 80084bc:	4653      	mov	r3, sl
 80084be:	4622      	mov	r2, r4
 80084c0:	f001 f8be 	bl	8009640 <_dtoa_r>
 80084c4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80084c8:	4605      	mov	r5, r0
 80084ca:	d119      	bne.n	8008500 <__cvt+0x94>
 80084cc:	f019 0f01 	tst.w	r9, #1
 80084d0:	d00e      	beq.n	80084f0 <__cvt+0x84>
 80084d2:	eb00 0904 	add.w	r9, r0, r4
 80084d6:	2200      	movs	r2, #0
 80084d8:	2300      	movs	r3, #0
 80084da:	4630      	mov	r0, r6
 80084dc:	4639      	mov	r1, r7
 80084de:	f7f8 fb1b 	bl	8000b18 <__aeabi_dcmpeq>
 80084e2:	b108      	cbz	r0, 80084e8 <__cvt+0x7c>
 80084e4:	f8cd 900c 	str.w	r9, [sp, #12]
 80084e8:	2230      	movs	r2, #48	@ 0x30
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	454b      	cmp	r3, r9
 80084ee:	d31e      	bcc.n	800852e <__cvt+0xc2>
 80084f0:	9b03      	ldr	r3, [sp, #12]
 80084f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084f4:	1b5b      	subs	r3, r3, r5
 80084f6:	4628      	mov	r0, r5
 80084f8:	6013      	str	r3, [r2, #0]
 80084fa:	b004      	add	sp, #16
 80084fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008500:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008504:	eb00 0904 	add.w	r9, r0, r4
 8008508:	d1e5      	bne.n	80084d6 <__cvt+0x6a>
 800850a:	7803      	ldrb	r3, [r0, #0]
 800850c:	2b30      	cmp	r3, #48	@ 0x30
 800850e:	d10a      	bne.n	8008526 <__cvt+0xba>
 8008510:	2200      	movs	r2, #0
 8008512:	2300      	movs	r3, #0
 8008514:	4630      	mov	r0, r6
 8008516:	4639      	mov	r1, r7
 8008518:	f7f8 fafe 	bl	8000b18 <__aeabi_dcmpeq>
 800851c:	b918      	cbnz	r0, 8008526 <__cvt+0xba>
 800851e:	f1c4 0401 	rsb	r4, r4, #1
 8008522:	f8ca 4000 	str.w	r4, [sl]
 8008526:	f8da 3000 	ldr.w	r3, [sl]
 800852a:	4499      	add	r9, r3
 800852c:	e7d3      	b.n	80084d6 <__cvt+0x6a>
 800852e:	1c59      	adds	r1, r3, #1
 8008530:	9103      	str	r1, [sp, #12]
 8008532:	701a      	strb	r2, [r3, #0]
 8008534:	e7d9      	b.n	80084ea <__cvt+0x7e>

08008536 <__exponent>:
 8008536:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008538:	2900      	cmp	r1, #0
 800853a:	bfba      	itte	lt
 800853c:	4249      	neglt	r1, r1
 800853e:	232d      	movlt	r3, #45	@ 0x2d
 8008540:	232b      	movge	r3, #43	@ 0x2b
 8008542:	2909      	cmp	r1, #9
 8008544:	7002      	strb	r2, [r0, #0]
 8008546:	7043      	strb	r3, [r0, #1]
 8008548:	dd29      	ble.n	800859e <__exponent+0x68>
 800854a:	f10d 0307 	add.w	r3, sp, #7
 800854e:	461d      	mov	r5, r3
 8008550:	270a      	movs	r7, #10
 8008552:	461a      	mov	r2, r3
 8008554:	fbb1 f6f7 	udiv	r6, r1, r7
 8008558:	fb07 1416 	mls	r4, r7, r6, r1
 800855c:	3430      	adds	r4, #48	@ 0x30
 800855e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008562:	460c      	mov	r4, r1
 8008564:	2c63      	cmp	r4, #99	@ 0x63
 8008566:	f103 33ff 	add.w	r3, r3, #4294967295
 800856a:	4631      	mov	r1, r6
 800856c:	dcf1      	bgt.n	8008552 <__exponent+0x1c>
 800856e:	3130      	adds	r1, #48	@ 0x30
 8008570:	1e94      	subs	r4, r2, #2
 8008572:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008576:	1c41      	adds	r1, r0, #1
 8008578:	4623      	mov	r3, r4
 800857a:	42ab      	cmp	r3, r5
 800857c:	d30a      	bcc.n	8008594 <__exponent+0x5e>
 800857e:	f10d 0309 	add.w	r3, sp, #9
 8008582:	1a9b      	subs	r3, r3, r2
 8008584:	42ac      	cmp	r4, r5
 8008586:	bf88      	it	hi
 8008588:	2300      	movhi	r3, #0
 800858a:	3302      	adds	r3, #2
 800858c:	4403      	add	r3, r0
 800858e:	1a18      	subs	r0, r3, r0
 8008590:	b003      	add	sp, #12
 8008592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008594:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008598:	f801 6f01 	strb.w	r6, [r1, #1]!
 800859c:	e7ed      	b.n	800857a <__exponent+0x44>
 800859e:	2330      	movs	r3, #48	@ 0x30
 80085a0:	3130      	adds	r1, #48	@ 0x30
 80085a2:	7083      	strb	r3, [r0, #2]
 80085a4:	70c1      	strb	r1, [r0, #3]
 80085a6:	1d03      	adds	r3, r0, #4
 80085a8:	e7f1      	b.n	800858e <__exponent+0x58>
	...

080085ac <_printf_float>:
 80085ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085b0:	b08d      	sub	sp, #52	@ 0x34
 80085b2:	460c      	mov	r4, r1
 80085b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80085b8:	4616      	mov	r6, r2
 80085ba:	461f      	mov	r7, r3
 80085bc:	4605      	mov	r5, r0
 80085be:	f000 ff29 	bl	8009414 <_localeconv_r>
 80085c2:	6803      	ldr	r3, [r0, #0]
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7f7 fe7a 	bl	80002c0 <strlen>
 80085cc:	2300      	movs	r3, #0
 80085ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d0:	f8d8 3000 	ldr.w	r3, [r8]
 80085d4:	9005      	str	r0, [sp, #20]
 80085d6:	3307      	adds	r3, #7
 80085d8:	f023 0307 	bic.w	r3, r3, #7
 80085dc:	f103 0208 	add.w	r2, r3, #8
 80085e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80085e4:	f8d4 b000 	ldr.w	fp, [r4]
 80085e8:	f8c8 2000 	str.w	r2, [r8]
 80085ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80085f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80085f4:	9307      	str	r3, [sp, #28]
 80085f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80085fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80085fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008602:	4b9c      	ldr	r3, [pc, #624]	@ (8008874 <_printf_float+0x2c8>)
 8008604:	f04f 32ff 	mov.w	r2, #4294967295
 8008608:	f7f8 fab8 	bl	8000b7c <__aeabi_dcmpun>
 800860c:	bb70      	cbnz	r0, 800866c <_printf_float+0xc0>
 800860e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008612:	4b98      	ldr	r3, [pc, #608]	@ (8008874 <_printf_float+0x2c8>)
 8008614:	f04f 32ff 	mov.w	r2, #4294967295
 8008618:	f7f8 fa92 	bl	8000b40 <__aeabi_dcmple>
 800861c:	bb30      	cbnz	r0, 800866c <_printf_float+0xc0>
 800861e:	2200      	movs	r2, #0
 8008620:	2300      	movs	r3, #0
 8008622:	4640      	mov	r0, r8
 8008624:	4649      	mov	r1, r9
 8008626:	f7f8 fa81 	bl	8000b2c <__aeabi_dcmplt>
 800862a:	b110      	cbz	r0, 8008632 <_printf_float+0x86>
 800862c:	232d      	movs	r3, #45	@ 0x2d
 800862e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008632:	4a91      	ldr	r2, [pc, #580]	@ (8008878 <_printf_float+0x2cc>)
 8008634:	4b91      	ldr	r3, [pc, #580]	@ (800887c <_printf_float+0x2d0>)
 8008636:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800863a:	bf94      	ite	ls
 800863c:	4690      	movls	r8, r2
 800863e:	4698      	movhi	r8, r3
 8008640:	2303      	movs	r3, #3
 8008642:	6123      	str	r3, [r4, #16]
 8008644:	f02b 0304 	bic.w	r3, fp, #4
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	f04f 0900 	mov.w	r9, #0
 800864e:	9700      	str	r7, [sp, #0]
 8008650:	4633      	mov	r3, r6
 8008652:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008654:	4621      	mov	r1, r4
 8008656:	4628      	mov	r0, r5
 8008658:	f000 f9d2 	bl	8008a00 <_printf_common>
 800865c:	3001      	adds	r0, #1
 800865e:	f040 808d 	bne.w	800877c <_printf_float+0x1d0>
 8008662:	f04f 30ff 	mov.w	r0, #4294967295
 8008666:	b00d      	add	sp, #52	@ 0x34
 8008668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800866c:	4642      	mov	r2, r8
 800866e:	464b      	mov	r3, r9
 8008670:	4640      	mov	r0, r8
 8008672:	4649      	mov	r1, r9
 8008674:	f7f8 fa82 	bl	8000b7c <__aeabi_dcmpun>
 8008678:	b140      	cbz	r0, 800868c <_printf_float+0xe0>
 800867a:	464b      	mov	r3, r9
 800867c:	2b00      	cmp	r3, #0
 800867e:	bfbc      	itt	lt
 8008680:	232d      	movlt	r3, #45	@ 0x2d
 8008682:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008686:	4a7e      	ldr	r2, [pc, #504]	@ (8008880 <_printf_float+0x2d4>)
 8008688:	4b7e      	ldr	r3, [pc, #504]	@ (8008884 <_printf_float+0x2d8>)
 800868a:	e7d4      	b.n	8008636 <_printf_float+0x8a>
 800868c:	6863      	ldr	r3, [r4, #4]
 800868e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008692:	9206      	str	r2, [sp, #24]
 8008694:	1c5a      	adds	r2, r3, #1
 8008696:	d13b      	bne.n	8008710 <_printf_float+0x164>
 8008698:	2306      	movs	r3, #6
 800869a:	6063      	str	r3, [r4, #4]
 800869c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80086a0:	2300      	movs	r3, #0
 80086a2:	6022      	str	r2, [r4, #0]
 80086a4:	9303      	str	r3, [sp, #12]
 80086a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80086a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80086ac:	ab09      	add	r3, sp, #36	@ 0x24
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	6861      	ldr	r1, [r4, #4]
 80086b2:	ec49 8b10 	vmov	d0, r8, r9
 80086b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80086ba:	4628      	mov	r0, r5
 80086bc:	f7ff fed6 	bl	800846c <__cvt>
 80086c0:	9b06      	ldr	r3, [sp, #24]
 80086c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086c4:	2b47      	cmp	r3, #71	@ 0x47
 80086c6:	4680      	mov	r8, r0
 80086c8:	d129      	bne.n	800871e <_printf_float+0x172>
 80086ca:	1cc8      	adds	r0, r1, #3
 80086cc:	db02      	blt.n	80086d4 <_printf_float+0x128>
 80086ce:	6863      	ldr	r3, [r4, #4]
 80086d0:	4299      	cmp	r1, r3
 80086d2:	dd41      	ble.n	8008758 <_printf_float+0x1ac>
 80086d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80086d8:	fa5f fa8a 	uxtb.w	sl, sl
 80086dc:	3901      	subs	r1, #1
 80086de:	4652      	mov	r2, sl
 80086e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80086e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80086e6:	f7ff ff26 	bl	8008536 <__exponent>
 80086ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086ec:	1813      	adds	r3, r2, r0
 80086ee:	2a01      	cmp	r2, #1
 80086f0:	4681      	mov	r9, r0
 80086f2:	6123      	str	r3, [r4, #16]
 80086f4:	dc02      	bgt.n	80086fc <_printf_float+0x150>
 80086f6:	6822      	ldr	r2, [r4, #0]
 80086f8:	07d2      	lsls	r2, r2, #31
 80086fa:	d501      	bpl.n	8008700 <_printf_float+0x154>
 80086fc:	3301      	adds	r3, #1
 80086fe:	6123      	str	r3, [r4, #16]
 8008700:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0a2      	beq.n	800864e <_printf_float+0xa2>
 8008708:	232d      	movs	r3, #45	@ 0x2d
 800870a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800870e:	e79e      	b.n	800864e <_printf_float+0xa2>
 8008710:	9a06      	ldr	r2, [sp, #24]
 8008712:	2a47      	cmp	r2, #71	@ 0x47
 8008714:	d1c2      	bne.n	800869c <_printf_float+0xf0>
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1c0      	bne.n	800869c <_printf_float+0xf0>
 800871a:	2301      	movs	r3, #1
 800871c:	e7bd      	b.n	800869a <_printf_float+0xee>
 800871e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008722:	d9db      	bls.n	80086dc <_printf_float+0x130>
 8008724:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008728:	d118      	bne.n	800875c <_printf_float+0x1b0>
 800872a:	2900      	cmp	r1, #0
 800872c:	6863      	ldr	r3, [r4, #4]
 800872e:	dd0b      	ble.n	8008748 <_printf_float+0x19c>
 8008730:	6121      	str	r1, [r4, #16]
 8008732:	b913      	cbnz	r3, 800873a <_printf_float+0x18e>
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	07d0      	lsls	r0, r2, #31
 8008738:	d502      	bpl.n	8008740 <_printf_float+0x194>
 800873a:	3301      	adds	r3, #1
 800873c:	440b      	add	r3, r1
 800873e:	6123      	str	r3, [r4, #16]
 8008740:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008742:	f04f 0900 	mov.w	r9, #0
 8008746:	e7db      	b.n	8008700 <_printf_float+0x154>
 8008748:	b913      	cbnz	r3, 8008750 <_printf_float+0x1a4>
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	07d2      	lsls	r2, r2, #31
 800874e:	d501      	bpl.n	8008754 <_printf_float+0x1a8>
 8008750:	3302      	adds	r3, #2
 8008752:	e7f4      	b.n	800873e <_printf_float+0x192>
 8008754:	2301      	movs	r3, #1
 8008756:	e7f2      	b.n	800873e <_printf_float+0x192>
 8008758:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800875c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800875e:	4299      	cmp	r1, r3
 8008760:	db05      	blt.n	800876e <_printf_float+0x1c2>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	6121      	str	r1, [r4, #16]
 8008766:	07d8      	lsls	r0, r3, #31
 8008768:	d5ea      	bpl.n	8008740 <_printf_float+0x194>
 800876a:	1c4b      	adds	r3, r1, #1
 800876c:	e7e7      	b.n	800873e <_printf_float+0x192>
 800876e:	2900      	cmp	r1, #0
 8008770:	bfd4      	ite	le
 8008772:	f1c1 0202 	rsble	r2, r1, #2
 8008776:	2201      	movgt	r2, #1
 8008778:	4413      	add	r3, r2
 800877a:	e7e0      	b.n	800873e <_printf_float+0x192>
 800877c:	6823      	ldr	r3, [r4, #0]
 800877e:	055a      	lsls	r2, r3, #21
 8008780:	d407      	bmi.n	8008792 <_printf_float+0x1e6>
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	4642      	mov	r2, r8
 8008786:	4631      	mov	r1, r6
 8008788:	4628      	mov	r0, r5
 800878a:	47b8      	blx	r7
 800878c:	3001      	adds	r0, #1
 800878e:	d12b      	bne.n	80087e8 <_printf_float+0x23c>
 8008790:	e767      	b.n	8008662 <_printf_float+0xb6>
 8008792:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008796:	f240 80dd 	bls.w	8008954 <_printf_float+0x3a8>
 800879a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800879e:	2200      	movs	r2, #0
 80087a0:	2300      	movs	r3, #0
 80087a2:	f7f8 f9b9 	bl	8000b18 <__aeabi_dcmpeq>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d033      	beq.n	8008812 <_printf_float+0x266>
 80087aa:	4a37      	ldr	r2, [pc, #220]	@ (8008888 <_printf_float+0x2dc>)
 80087ac:	2301      	movs	r3, #1
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	f43f af54 	beq.w	8008662 <_printf_float+0xb6>
 80087ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80087be:	4543      	cmp	r3, r8
 80087c0:	db02      	blt.n	80087c8 <_printf_float+0x21c>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	07d8      	lsls	r0, r3, #31
 80087c6:	d50f      	bpl.n	80087e8 <_printf_float+0x23c>
 80087c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087cc:	4631      	mov	r1, r6
 80087ce:	4628      	mov	r0, r5
 80087d0:	47b8      	blx	r7
 80087d2:	3001      	adds	r0, #1
 80087d4:	f43f af45 	beq.w	8008662 <_printf_float+0xb6>
 80087d8:	f04f 0900 	mov.w	r9, #0
 80087dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80087e0:	f104 0a1a 	add.w	sl, r4, #26
 80087e4:	45c8      	cmp	r8, r9
 80087e6:	dc09      	bgt.n	80087fc <_printf_float+0x250>
 80087e8:	6823      	ldr	r3, [r4, #0]
 80087ea:	079b      	lsls	r3, r3, #30
 80087ec:	f100 8103 	bmi.w	80089f6 <_printf_float+0x44a>
 80087f0:	68e0      	ldr	r0, [r4, #12]
 80087f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087f4:	4298      	cmp	r0, r3
 80087f6:	bfb8      	it	lt
 80087f8:	4618      	movlt	r0, r3
 80087fa:	e734      	b.n	8008666 <_printf_float+0xba>
 80087fc:	2301      	movs	r3, #1
 80087fe:	4652      	mov	r2, sl
 8008800:	4631      	mov	r1, r6
 8008802:	4628      	mov	r0, r5
 8008804:	47b8      	blx	r7
 8008806:	3001      	adds	r0, #1
 8008808:	f43f af2b 	beq.w	8008662 <_printf_float+0xb6>
 800880c:	f109 0901 	add.w	r9, r9, #1
 8008810:	e7e8      	b.n	80087e4 <_printf_float+0x238>
 8008812:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008814:	2b00      	cmp	r3, #0
 8008816:	dc39      	bgt.n	800888c <_printf_float+0x2e0>
 8008818:	4a1b      	ldr	r2, [pc, #108]	@ (8008888 <_printf_float+0x2dc>)
 800881a:	2301      	movs	r3, #1
 800881c:	4631      	mov	r1, r6
 800881e:	4628      	mov	r0, r5
 8008820:	47b8      	blx	r7
 8008822:	3001      	adds	r0, #1
 8008824:	f43f af1d 	beq.w	8008662 <_printf_float+0xb6>
 8008828:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800882c:	ea59 0303 	orrs.w	r3, r9, r3
 8008830:	d102      	bne.n	8008838 <_printf_float+0x28c>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	07d9      	lsls	r1, r3, #31
 8008836:	d5d7      	bpl.n	80087e8 <_printf_float+0x23c>
 8008838:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800883c:	4631      	mov	r1, r6
 800883e:	4628      	mov	r0, r5
 8008840:	47b8      	blx	r7
 8008842:	3001      	adds	r0, #1
 8008844:	f43f af0d 	beq.w	8008662 <_printf_float+0xb6>
 8008848:	f04f 0a00 	mov.w	sl, #0
 800884c:	f104 0b1a 	add.w	fp, r4, #26
 8008850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008852:	425b      	negs	r3, r3
 8008854:	4553      	cmp	r3, sl
 8008856:	dc01      	bgt.n	800885c <_printf_float+0x2b0>
 8008858:	464b      	mov	r3, r9
 800885a:	e793      	b.n	8008784 <_printf_float+0x1d8>
 800885c:	2301      	movs	r3, #1
 800885e:	465a      	mov	r2, fp
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	f43f aefb 	beq.w	8008662 <_printf_float+0xb6>
 800886c:	f10a 0a01 	add.w	sl, sl, #1
 8008870:	e7ee      	b.n	8008850 <_printf_float+0x2a4>
 8008872:	bf00      	nop
 8008874:	7fefffff 	.word	0x7fefffff
 8008878:	0800d4ec 	.word	0x0800d4ec
 800887c:	0800d4f0 	.word	0x0800d4f0
 8008880:	0800d4f4 	.word	0x0800d4f4
 8008884:	0800d4f8 	.word	0x0800d4f8
 8008888:	0800d888 	.word	0x0800d888
 800888c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800888e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008892:	4553      	cmp	r3, sl
 8008894:	bfa8      	it	ge
 8008896:	4653      	movge	r3, sl
 8008898:	2b00      	cmp	r3, #0
 800889a:	4699      	mov	r9, r3
 800889c:	dc36      	bgt.n	800890c <_printf_float+0x360>
 800889e:	f04f 0b00 	mov.w	fp, #0
 80088a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088a6:	f104 021a 	add.w	r2, r4, #26
 80088aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80088ac:	9306      	str	r3, [sp, #24]
 80088ae:	eba3 0309 	sub.w	r3, r3, r9
 80088b2:	455b      	cmp	r3, fp
 80088b4:	dc31      	bgt.n	800891a <_printf_float+0x36e>
 80088b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088b8:	459a      	cmp	sl, r3
 80088ba:	dc3a      	bgt.n	8008932 <_printf_float+0x386>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	07da      	lsls	r2, r3, #31
 80088c0:	d437      	bmi.n	8008932 <_printf_float+0x386>
 80088c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088c4:	ebaa 0903 	sub.w	r9, sl, r3
 80088c8:	9b06      	ldr	r3, [sp, #24]
 80088ca:	ebaa 0303 	sub.w	r3, sl, r3
 80088ce:	4599      	cmp	r9, r3
 80088d0:	bfa8      	it	ge
 80088d2:	4699      	movge	r9, r3
 80088d4:	f1b9 0f00 	cmp.w	r9, #0
 80088d8:	dc33      	bgt.n	8008942 <_printf_float+0x396>
 80088da:	f04f 0800 	mov.w	r8, #0
 80088de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088e2:	f104 0b1a 	add.w	fp, r4, #26
 80088e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088e8:	ebaa 0303 	sub.w	r3, sl, r3
 80088ec:	eba3 0309 	sub.w	r3, r3, r9
 80088f0:	4543      	cmp	r3, r8
 80088f2:	f77f af79 	ble.w	80087e8 <_printf_float+0x23c>
 80088f6:	2301      	movs	r3, #1
 80088f8:	465a      	mov	r2, fp
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f aeae 	beq.w	8008662 <_printf_float+0xb6>
 8008906:	f108 0801 	add.w	r8, r8, #1
 800890a:	e7ec      	b.n	80088e6 <_printf_float+0x33a>
 800890c:	4642      	mov	r2, r8
 800890e:	4631      	mov	r1, r6
 8008910:	4628      	mov	r0, r5
 8008912:	47b8      	blx	r7
 8008914:	3001      	adds	r0, #1
 8008916:	d1c2      	bne.n	800889e <_printf_float+0x2f2>
 8008918:	e6a3      	b.n	8008662 <_printf_float+0xb6>
 800891a:	2301      	movs	r3, #1
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	9206      	str	r2, [sp, #24]
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	f43f ae9c 	beq.w	8008662 <_printf_float+0xb6>
 800892a:	9a06      	ldr	r2, [sp, #24]
 800892c:	f10b 0b01 	add.w	fp, fp, #1
 8008930:	e7bb      	b.n	80088aa <_printf_float+0x2fe>
 8008932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008936:	4631      	mov	r1, r6
 8008938:	4628      	mov	r0, r5
 800893a:	47b8      	blx	r7
 800893c:	3001      	adds	r0, #1
 800893e:	d1c0      	bne.n	80088c2 <_printf_float+0x316>
 8008940:	e68f      	b.n	8008662 <_printf_float+0xb6>
 8008942:	9a06      	ldr	r2, [sp, #24]
 8008944:	464b      	mov	r3, r9
 8008946:	4442      	add	r2, r8
 8008948:	4631      	mov	r1, r6
 800894a:	4628      	mov	r0, r5
 800894c:	47b8      	blx	r7
 800894e:	3001      	adds	r0, #1
 8008950:	d1c3      	bne.n	80088da <_printf_float+0x32e>
 8008952:	e686      	b.n	8008662 <_printf_float+0xb6>
 8008954:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008958:	f1ba 0f01 	cmp.w	sl, #1
 800895c:	dc01      	bgt.n	8008962 <_printf_float+0x3b6>
 800895e:	07db      	lsls	r3, r3, #31
 8008960:	d536      	bpl.n	80089d0 <_printf_float+0x424>
 8008962:	2301      	movs	r3, #1
 8008964:	4642      	mov	r2, r8
 8008966:	4631      	mov	r1, r6
 8008968:	4628      	mov	r0, r5
 800896a:	47b8      	blx	r7
 800896c:	3001      	adds	r0, #1
 800896e:	f43f ae78 	beq.w	8008662 <_printf_float+0xb6>
 8008972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f ae70 	beq.w	8008662 <_printf_float+0xb6>
 8008982:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008986:	2200      	movs	r2, #0
 8008988:	2300      	movs	r3, #0
 800898a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800898e:	f7f8 f8c3 	bl	8000b18 <__aeabi_dcmpeq>
 8008992:	b9c0      	cbnz	r0, 80089c6 <_printf_float+0x41a>
 8008994:	4653      	mov	r3, sl
 8008996:	f108 0201 	add.w	r2, r8, #1
 800899a:	4631      	mov	r1, r6
 800899c:	4628      	mov	r0, r5
 800899e:	47b8      	blx	r7
 80089a0:	3001      	adds	r0, #1
 80089a2:	d10c      	bne.n	80089be <_printf_float+0x412>
 80089a4:	e65d      	b.n	8008662 <_printf_float+0xb6>
 80089a6:	2301      	movs	r3, #1
 80089a8:	465a      	mov	r2, fp
 80089aa:	4631      	mov	r1, r6
 80089ac:	4628      	mov	r0, r5
 80089ae:	47b8      	blx	r7
 80089b0:	3001      	adds	r0, #1
 80089b2:	f43f ae56 	beq.w	8008662 <_printf_float+0xb6>
 80089b6:	f108 0801 	add.w	r8, r8, #1
 80089ba:	45d0      	cmp	r8, sl
 80089bc:	dbf3      	blt.n	80089a6 <_printf_float+0x3fa>
 80089be:	464b      	mov	r3, r9
 80089c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80089c4:	e6df      	b.n	8008786 <_printf_float+0x1da>
 80089c6:	f04f 0800 	mov.w	r8, #0
 80089ca:	f104 0b1a 	add.w	fp, r4, #26
 80089ce:	e7f4      	b.n	80089ba <_printf_float+0x40e>
 80089d0:	2301      	movs	r3, #1
 80089d2:	4642      	mov	r2, r8
 80089d4:	e7e1      	b.n	800899a <_printf_float+0x3ee>
 80089d6:	2301      	movs	r3, #1
 80089d8:	464a      	mov	r2, r9
 80089da:	4631      	mov	r1, r6
 80089dc:	4628      	mov	r0, r5
 80089de:	47b8      	blx	r7
 80089e0:	3001      	adds	r0, #1
 80089e2:	f43f ae3e 	beq.w	8008662 <_printf_float+0xb6>
 80089e6:	f108 0801 	add.w	r8, r8, #1
 80089ea:	68e3      	ldr	r3, [r4, #12]
 80089ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80089ee:	1a5b      	subs	r3, r3, r1
 80089f0:	4543      	cmp	r3, r8
 80089f2:	dcf0      	bgt.n	80089d6 <_printf_float+0x42a>
 80089f4:	e6fc      	b.n	80087f0 <_printf_float+0x244>
 80089f6:	f04f 0800 	mov.w	r8, #0
 80089fa:	f104 0919 	add.w	r9, r4, #25
 80089fe:	e7f4      	b.n	80089ea <_printf_float+0x43e>

08008a00 <_printf_common>:
 8008a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a04:	4616      	mov	r6, r2
 8008a06:	4698      	mov	r8, r3
 8008a08:	688a      	ldr	r2, [r1, #8]
 8008a0a:	690b      	ldr	r3, [r1, #16]
 8008a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a10:	4293      	cmp	r3, r2
 8008a12:	bfb8      	it	lt
 8008a14:	4613      	movlt	r3, r2
 8008a16:	6033      	str	r3, [r6, #0]
 8008a18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a1c:	4607      	mov	r7, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	b10a      	cbz	r2, 8008a26 <_printf_common+0x26>
 8008a22:	3301      	adds	r3, #1
 8008a24:	6033      	str	r3, [r6, #0]
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	0699      	lsls	r1, r3, #26
 8008a2a:	bf42      	ittt	mi
 8008a2c:	6833      	ldrmi	r3, [r6, #0]
 8008a2e:	3302      	addmi	r3, #2
 8008a30:	6033      	strmi	r3, [r6, #0]
 8008a32:	6825      	ldr	r5, [r4, #0]
 8008a34:	f015 0506 	ands.w	r5, r5, #6
 8008a38:	d106      	bne.n	8008a48 <_printf_common+0x48>
 8008a3a:	f104 0a19 	add.w	sl, r4, #25
 8008a3e:	68e3      	ldr	r3, [r4, #12]
 8008a40:	6832      	ldr	r2, [r6, #0]
 8008a42:	1a9b      	subs	r3, r3, r2
 8008a44:	42ab      	cmp	r3, r5
 8008a46:	dc26      	bgt.n	8008a96 <_printf_common+0x96>
 8008a48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a4c:	6822      	ldr	r2, [r4, #0]
 8008a4e:	3b00      	subs	r3, #0
 8008a50:	bf18      	it	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	0692      	lsls	r2, r2, #26
 8008a56:	d42b      	bmi.n	8008ab0 <_printf_common+0xb0>
 8008a58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a5c:	4641      	mov	r1, r8
 8008a5e:	4638      	mov	r0, r7
 8008a60:	47c8      	blx	r9
 8008a62:	3001      	adds	r0, #1
 8008a64:	d01e      	beq.n	8008aa4 <_printf_common+0xa4>
 8008a66:	6823      	ldr	r3, [r4, #0]
 8008a68:	6922      	ldr	r2, [r4, #16]
 8008a6a:	f003 0306 	and.w	r3, r3, #6
 8008a6e:	2b04      	cmp	r3, #4
 8008a70:	bf02      	ittt	eq
 8008a72:	68e5      	ldreq	r5, [r4, #12]
 8008a74:	6833      	ldreq	r3, [r6, #0]
 8008a76:	1aed      	subeq	r5, r5, r3
 8008a78:	68a3      	ldr	r3, [r4, #8]
 8008a7a:	bf0c      	ite	eq
 8008a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a80:	2500      	movne	r5, #0
 8008a82:	4293      	cmp	r3, r2
 8008a84:	bfc4      	itt	gt
 8008a86:	1a9b      	subgt	r3, r3, r2
 8008a88:	18ed      	addgt	r5, r5, r3
 8008a8a:	2600      	movs	r6, #0
 8008a8c:	341a      	adds	r4, #26
 8008a8e:	42b5      	cmp	r5, r6
 8008a90:	d11a      	bne.n	8008ac8 <_printf_common+0xc8>
 8008a92:	2000      	movs	r0, #0
 8008a94:	e008      	b.n	8008aa8 <_printf_common+0xa8>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4652      	mov	r2, sl
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	4638      	mov	r0, r7
 8008a9e:	47c8      	blx	r9
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d103      	bne.n	8008aac <_printf_common+0xac>
 8008aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aac:	3501      	adds	r5, #1
 8008aae:	e7c6      	b.n	8008a3e <_printf_common+0x3e>
 8008ab0:	18e1      	adds	r1, r4, r3
 8008ab2:	1c5a      	adds	r2, r3, #1
 8008ab4:	2030      	movs	r0, #48	@ 0x30
 8008ab6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008aba:	4422      	add	r2, r4
 8008abc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ac0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ac4:	3302      	adds	r3, #2
 8008ac6:	e7c7      	b.n	8008a58 <_printf_common+0x58>
 8008ac8:	2301      	movs	r3, #1
 8008aca:	4622      	mov	r2, r4
 8008acc:	4641      	mov	r1, r8
 8008ace:	4638      	mov	r0, r7
 8008ad0:	47c8      	blx	r9
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d0e6      	beq.n	8008aa4 <_printf_common+0xa4>
 8008ad6:	3601      	adds	r6, #1
 8008ad8:	e7d9      	b.n	8008a8e <_printf_common+0x8e>
	...

08008adc <_printf_i>:
 8008adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae0:	7e0f      	ldrb	r7, [r1, #24]
 8008ae2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ae4:	2f78      	cmp	r7, #120	@ 0x78
 8008ae6:	4691      	mov	r9, r2
 8008ae8:	4680      	mov	r8, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	469a      	mov	sl, r3
 8008aee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008af2:	d807      	bhi.n	8008b04 <_printf_i+0x28>
 8008af4:	2f62      	cmp	r7, #98	@ 0x62
 8008af6:	d80a      	bhi.n	8008b0e <_printf_i+0x32>
 8008af8:	2f00      	cmp	r7, #0
 8008afa:	f000 80d2 	beq.w	8008ca2 <_printf_i+0x1c6>
 8008afe:	2f58      	cmp	r7, #88	@ 0x58
 8008b00:	f000 80b9 	beq.w	8008c76 <_printf_i+0x19a>
 8008b04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b08:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b0c:	e03a      	b.n	8008b84 <_printf_i+0xa8>
 8008b0e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b12:	2b15      	cmp	r3, #21
 8008b14:	d8f6      	bhi.n	8008b04 <_printf_i+0x28>
 8008b16:	a101      	add	r1, pc, #4	@ (adr r1, 8008b1c <_printf_i+0x40>)
 8008b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b1c:	08008b75 	.word	0x08008b75
 8008b20:	08008b89 	.word	0x08008b89
 8008b24:	08008b05 	.word	0x08008b05
 8008b28:	08008b05 	.word	0x08008b05
 8008b2c:	08008b05 	.word	0x08008b05
 8008b30:	08008b05 	.word	0x08008b05
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b05 	.word	0x08008b05
 8008b3c:	08008b05 	.word	0x08008b05
 8008b40:	08008b05 	.word	0x08008b05
 8008b44:	08008b05 	.word	0x08008b05
 8008b48:	08008c89 	.word	0x08008c89
 8008b4c:	08008bb3 	.word	0x08008bb3
 8008b50:	08008c43 	.word	0x08008c43
 8008b54:	08008b05 	.word	0x08008b05
 8008b58:	08008b05 	.word	0x08008b05
 8008b5c:	08008cab 	.word	0x08008cab
 8008b60:	08008b05 	.word	0x08008b05
 8008b64:	08008bb3 	.word	0x08008bb3
 8008b68:	08008b05 	.word	0x08008b05
 8008b6c:	08008b05 	.word	0x08008b05
 8008b70:	08008c4b 	.word	0x08008c4b
 8008b74:	6833      	ldr	r3, [r6, #0]
 8008b76:	1d1a      	adds	r2, r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6032      	str	r2, [r6, #0]
 8008b7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b80:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b84:	2301      	movs	r3, #1
 8008b86:	e09d      	b.n	8008cc4 <_printf_i+0x1e8>
 8008b88:	6833      	ldr	r3, [r6, #0]
 8008b8a:	6820      	ldr	r0, [r4, #0]
 8008b8c:	1d19      	adds	r1, r3, #4
 8008b8e:	6031      	str	r1, [r6, #0]
 8008b90:	0606      	lsls	r6, r0, #24
 8008b92:	d501      	bpl.n	8008b98 <_printf_i+0xbc>
 8008b94:	681d      	ldr	r5, [r3, #0]
 8008b96:	e003      	b.n	8008ba0 <_printf_i+0xc4>
 8008b98:	0645      	lsls	r5, r0, #25
 8008b9a:	d5fb      	bpl.n	8008b94 <_printf_i+0xb8>
 8008b9c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008ba0:	2d00      	cmp	r5, #0
 8008ba2:	da03      	bge.n	8008bac <_printf_i+0xd0>
 8008ba4:	232d      	movs	r3, #45	@ 0x2d
 8008ba6:	426d      	negs	r5, r5
 8008ba8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bac:	4859      	ldr	r0, [pc, #356]	@ (8008d14 <_printf_i+0x238>)
 8008bae:	230a      	movs	r3, #10
 8008bb0:	e011      	b.n	8008bd6 <_printf_i+0xfa>
 8008bb2:	6821      	ldr	r1, [r4, #0]
 8008bb4:	6833      	ldr	r3, [r6, #0]
 8008bb6:	0608      	lsls	r0, r1, #24
 8008bb8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bbc:	d402      	bmi.n	8008bc4 <_printf_i+0xe8>
 8008bbe:	0649      	lsls	r1, r1, #25
 8008bc0:	bf48      	it	mi
 8008bc2:	b2ad      	uxthmi	r5, r5
 8008bc4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bc6:	4853      	ldr	r0, [pc, #332]	@ (8008d14 <_printf_i+0x238>)
 8008bc8:	6033      	str	r3, [r6, #0]
 8008bca:	bf14      	ite	ne
 8008bcc:	230a      	movne	r3, #10
 8008bce:	2308      	moveq	r3, #8
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bd6:	6866      	ldr	r6, [r4, #4]
 8008bd8:	60a6      	str	r6, [r4, #8]
 8008bda:	2e00      	cmp	r6, #0
 8008bdc:	bfa2      	ittt	ge
 8008bde:	6821      	ldrge	r1, [r4, #0]
 8008be0:	f021 0104 	bicge.w	r1, r1, #4
 8008be4:	6021      	strge	r1, [r4, #0]
 8008be6:	b90d      	cbnz	r5, 8008bec <_printf_i+0x110>
 8008be8:	2e00      	cmp	r6, #0
 8008bea:	d04b      	beq.n	8008c84 <_printf_i+0x1a8>
 8008bec:	4616      	mov	r6, r2
 8008bee:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bf2:	fb03 5711 	mls	r7, r3, r1, r5
 8008bf6:	5dc7      	ldrb	r7, [r0, r7]
 8008bf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bfc:	462f      	mov	r7, r5
 8008bfe:	42bb      	cmp	r3, r7
 8008c00:	460d      	mov	r5, r1
 8008c02:	d9f4      	bls.n	8008bee <_printf_i+0x112>
 8008c04:	2b08      	cmp	r3, #8
 8008c06:	d10b      	bne.n	8008c20 <_printf_i+0x144>
 8008c08:	6823      	ldr	r3, [r4, #0]
 8008c0a:	07df      	lsls	r7, r3, #31
 8008c0c:	d508      	bpl.n	8008c20 <_printf_i+0x144>
 8008c0e:	6923      	ldr	r3, [r4, #16]
 8008c10:	6861      	ldr	r1, [r4, #4]
 8008c12:	4299      	cmp	r1, r3
 8008c14:	bfde      	ittt	le
 8008c16:	2330      	movle	r3, #48	@ 0x30
 8008c18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c20:	1b92      	subs	r2, r2, r6
 8008c22:	6122      	str	r2, [r4, #16]
 8008c24:	f8cd a000 	str.w	sl, [sp]
 8008c28:	464b      	mov	r3, r9
 8008c2a:	aa03      	add	r2, sp, #12
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	4640      	mov	r0, r8
 8008c30:	f7ff fee6 	bl	8008a00 <_printf_common>
 8008c34:	3001      	adds	r0, #1
 8008c36:	d14a      	bne.n	8008cce <_printf_i+0x1f2>
 8008c38:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3c:	b004      	add	sp, #16
 8008c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c42:	6823      	ldr	r3, [r4, #0]
 8008c44:	f043 0320 	orr.w	r3, r3, #32
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	4833      	ldr	r0, [pc, #204]	@ (8008d18 <_printf_i+0x23c>)
 8008c4c:	2778      	movs	r7, #120	@ 0x78
 8008c4e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c52:	6823      	ldr	r3, [r4, #0]
 8008c54:	6831      	ldr	r1, [r6, #0]
 8008c56:	061f      	lsls	r7, r3, #24
 8008c58:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c5c:	d402      	bmi.n	8008c64 <_printf_i+0x188>
 8008c5e:	065f      	lsls	r7, r3, #25
 8008c60:	bf48      	it	mi
 8008c62:	b2ad      	uxthmi	r5, r5
 8008c64:	6031      	str	r1, [r6, #0]
 8008c66:	07d9      	lsls	r1, r3, #31
 8008c68:	bf44      	itt	mi
 8008c6a:	f043 0320 	orrmi.w	r3, r3, #32
 8008c6e:	6023      	strmi	r3, [r4, #0]
 8008c70:	b11d      	cbz	r5, 8008c7a <_printf_i+0x19e>
 8008c72:	2310      	movs	r3, #16
 8008c74:	e7ac      	b.n	8008bd0 <_printf_i+0xf4>
 8008c76:	4827      	ldr	r0, [pc, #156]	@ (8008d14 <_printf_i+0x238>)
 8008c78:	e7e9      	b.n	8008c4e <_printf_i+0x172>
 8008c7a:	6823      	ldr	r3, [r4, #0]
 8008c7c:	f023 0320 	bic.w	r3, r3, #32
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	e7f6      	b.n	8008c72 <_printf_i+0x196>
 8008c84:	4616      	mov	r6, r2
 8008c86:	e7bd      	b.n	8008c04 <_printf_i+0x128>
 8008c88:	6833      	ldr	r3, [r6, #0]
 8008c8a:	6825      	ldr	r5, [r4, #0]
 8008c8c:	6961      	ldr	r1, [r4, #20]
 8008c8e:	1d18      	adds	r0, r3, #4
 8008c90:	6030      	str	r0, [r6, #0]
 8008c92:	062e      	lsls	r6, r5, #24
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	d501      	bpl.n	8008c9c <_printf_i+0x1c0>
 8008c98:	6019      	str	r1, [r3, #0]
 8008c9a:	e002      	b.n	8008ca2 <_printf_i+0x1c6>
 8008c9c:	0668      	lsls	r0, r5, #25
 8008c9e:	d5fb      	bpl.n	8008c98 <_printf_i+0x1bc>
 8008ca0:	8019      	strh	r1, [r3, #0]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	6123      	str	r3, [r4, #16]
 8008ca6:	4616      	mov	r6, r2
 8008ca8:	e7bc      	b.n	8008c24 <_printf_i+0x148>
 8008caa:	6833      	ldr	r3, [r6, #0]
 8008cac:	1d1a      	adds	r2, r3, #4
 8008cae:	6032      	str	r2, [r6, #0]
 8008cb0:	681e      	ldr	r6, [r3, #0]
 8008cb2:	6862      	ldr	r2, [r4, #4]
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4630      	mov	r0, r6
 8008cb8:	f7f7 fab2 	bl	8000220 <memchr>
 8008cbc:	b108      	cbz	r0, 8008cc2 <_printf_i+0x1e6>
 8008cbe:	1b80      	subs	r0, r0, r6
 8008cc0:	6060      	str	r0, [r4, #4]
 8008cc2:	6863      	ldr	r3, [r4, #4]
 8008cc4:	6123      	str	r3, [r4, #16]
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ccc:	e7aa      	b.n	8008c24 <_printf_i+0x148>
 8008cce:	6923      	ldr	r3, [r4, #16]
 8008cd0:	4632      	mov	r2, r6
 8008cd2:	4649      	mov	r1, r9
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	47d0      	blx	sl
 8008cd8:	3001      	adds	r0, #1
 8008cda:	d0ad      	beq.n	8008c38 <_printf_i+0x15c>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	079b      	lsls	r3, r3, #30
 8008ce0:	d413      	bmi.n	8008d0a <_printf_i+0x22e>
 8008ce2:	68e0      	ldr	r0, [r4, #12]
 8008ce4:	9b03      	ldr	r3, [sp, #12]
 8008ce6:	4298      	cmp	r0, r3
 8008ce8:	bfb8      	it	lt
 8008cea:	4618      	movlt	r0, r3
 8008cec:	e7a6      	b.n	8008c3c <_printf_i+0x160>
 8008cee:	2301      	movs	r3, #1
 8008cf0:	4632      	mov	r2, r6
 8008cf2:	4649      	mov	r1, r9
 8008cf4:	4640      	mov	r0, r8
 8008cf6:	47d0      	blx	sl
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	d09d      	beq.n	8008c38 <_printf_i+0x15c>
 8008cfc:	3501      	adds	r5, #1
 8008cfe:	68e3      	ldr	r3, [r4, #12]
 8008d00:	9903      	ldr	r1, [sp, #12]
 8008d02:	1a5b      	subs	r3, r3, r1
 8008d04:	42ab      	cmp	r3, r5
 8008d06:	dcf2      	bgt.n	8008cee <_printf_i+0x212>
 8008d08:	e7eb      	b.n	8008ce2 <_printf_i+0x206>
 8008d0a:	2500      	movs	r5, #0
 8008d0c:	f104 0619 	add.w	r6, r4, #25
 8008d10:	e7f5      	b.n	8008cfe <_printf_i+0x222>
 8008d12:	bf00      	nop
 8008d14:	0800d4fc 	.word	0x0800d4fc
 8008d18:	0800d50d 	.word	0x0800d50d

08008d1c <_scanf_float>:
 8008d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d20:	b087      	sub	sp, #28
 8008d22:	4617      	mov	r7, r2
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	688b      	ldr	r3, [r1, #8]
 8008d28:	1e5a      	subs	r2, r3, #1
 8008d2a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008d2e:	bf81      	itttt	hi
 8008d30:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008d34:	eb03 0b05 	addhi.w	fp, r3, r5
 8008d38:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008d3c:	608b      	strhi	r3, [r1, #8]
 8008d3e:	680b      	ldr	r3, [r1, #0]
 8008d40:	460a      	mov	r2, r1
 8008d42:	f04f 0500 	mov.w	r5, #0
 8008d46:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008d4a:	f842 3b1c 	str.w	r3, [r2], #28
 8008d4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008d52:	4680      	mov	r8, r0
 8008d54:	460c      	mov	r4, r1
 8008d56:	bf98      	it	ls
 8008d58:	f04f 0b00 	movls.w	fp, #0
 8008d5c:	9201      	str	r2, [sp, #4]
 8008d5e:	4616      	mov	r6, r2
 8008d60:	46aa      	mov	sl, r5
 8008d62:	46a9      	mov	r9, r5
 8008d64:	9502      	str	r5, [sp, #8]
 8008d66:	68a2      	ldr	r2, [r4, #8]
 8008d68:	b152      	cbz	r2, 8008d80 <_scanf_float+0x64>
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008d70:	d864      	bhi.n	8008e3c <_scanf_float+0x120>
 8008d72:	2b40      	cmp	r3, #64	@ 0x40
 8008d74:	d83c      	bhi.n	8008df0 <_scanf_float+0xd4>
 8008d76:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008d7a:	b2c8      	uxtb	r0, r1
 8008d7c:	280e      	cmp	r0, #14
 8008d7e:	d93a      	bls.n	8008df6 <_scanf_float+0xda>
 8008d80:	f1b9 0f00 	cmp.w	r9, #0
 8008d84:	d003      	beq.n	8008d8e <_scanf_float+0x72>
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d8c:	6023      	str	r3, [r4, #0]
 8008d8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d92:	f1ba 0f01 	cmp.w	sl, #1
 8008d96:	f200 8117 	bhi.w	8008fc8 <_scanf_float+0x2ac>
 8008d9a:	9b01      	ldr	r3, [sp, #4]
 8008d9c:	429e      	cmp	r6, r3
 8008d9e:	f200 8108 	bhi.w	8008fb2 <_scanf_float+0x296>
 8008da2:	2001      	movs	r0, #1
 8008da4:	b007      	add	sp, #28
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008dae:	2a0d      	cmp	r2, #13
 8008db0:	d8e6      	bhi.n	8008d80 <_scanf_float+0x64>
 8008db2:	a101      	add	r1, pc, #4	@ (adr r1, 8008db8 <_scanf_float+0x9c>)
 8008db4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008db8:	08008eff 	.word	0x08008eff
 8008dbc:	08008d81 	.word	0x08008d81
 8008dc0:	08008d81 	.word	0x08008d81
 8008dc4:	08008d81 	.word	0x08008d81
 8008dc8:	08008f5f 	.word	0x08008f5f
 8008dcc:	08008f37 	.word	0x08008f37
 8008dd0:	08008d81 	.word	0x08008d81
 8008dd4:	08008d81 	.word	0x08008d81
 8008dd8:	08008f0d 	.word	0x08008f0d
 8008ddc:	08008d81 	.word	0x08008d81
 8008de0:	08008d81 	.word	0x08008d81
 8008de4:	08008d81 	.word	0x08008d81
 8008de8:	08008d81 	.word	0x08008d81
 8008dec:	08008ec5 	.word	0x08008ec5
 8008df0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008df4:	e7db      	b.n	8008dae <_scanf_float+0x92>
 8008df6:	290e      	cmp	r1, #14
 8008df8:	d8c2      	bhi.n	8008d80 <_scanf_float+0x64>
 8008dfa:	a001      	add	r0, pc, #4	@ (adr r0, 8008e00 <_scanf_float+0xe4>)
 8008dfc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e00:	08008eb5 	.word	0x08008eb5
 8008e04:	08008d81 	.word	0x08008d81
 8008e08:	08008eb5 	.word	0x08008eb5
 8008e0c:	08008f4b 	.word	0x08008f4b
 8008e10:	08008d81 	.word	0x08008d81
 8008e14:	08008e5d 	.word	0x08008e5d
 8008e18:	08008e9b 	.word	0x08008e9b
 8008e1c:	08008e9b 	.word	0x08008e9b
 8008e20:	08008e9b 	.word	0x08008e9b
 8008e24:	08008e9b 	.word	0x08008e9b
 8008e28:	08008e9b 	.word	0x08008e9b
 8008e2c:	08008e9b 	.word	0x08008e9b
 8008e30:	08008e9b 	.word	0x08008e9b
 8008e34:	08008e9b 	.word	0x08008e9b
 8008e38:	08008e9b 	.word	0x08008e9b
 8008e3c:	2b6e      	cmp	r3, #110	@ 0x6e
 8008e3e:	d809      	bhi.n	8008e54 <_scanf_float+0x138>
 8008e40:	2b60      	cmp	r3, #96	@ 0x60
 8008e42:	d8b2      	bhi.n	8008daa <_scanf_float+0x8e>
 8008e44:	2b54      	cmp	r3, #84	@ 0x54
 8008e46:	d07b      	beq.n	8008f40 <_scanf_float+0x224>
 8008e48:	2b59      	cmp	r3, #89	@ 0x59
 8008e4a:	d199      	bne.n	8008d80 <_scanf_float+0x64>
 8008e4c:	2d07      	cmp	r5, #7
 8008e4e:	d197      	bne.n	8008d80 <_scanf_float+0x64>
 8008e50:	2508      	movs	r5, #8
 8008e52:	e02c      	b.n	8008eae <_scanf_float+0x192>
 8008e54:	2b74      	cmp	r3, #116	@ 0x74
 8008e56:	d073      	beq.n	8008f40 <_scanf_float+0x224>
 8008e58:	2b79      	cmp	r3, #121	@ 0x79
 8008e5a:	e7f6      	b.n	8008e4a <_scanf_float+0x12e>
 8008e5c:	6821      	ldr	r1, [r4, #0]
 8008e5e:	05c8      	lsls	r0, r1, #23
 8008e60:	d51b      	bpl.n	8008e9a <_scanf_float+0x17e>
 8008e62:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008e66:	6021      	str	r1, [r4, #0]
 8008e68:	f109 0901 	add.w	r9, r9, #1
 8008e6c:	f1bb 0f00 	cmp.w	fp, #0
 8008e70:	d003      	beq.n	8008e7a <_scanf_float+0x15e>
 8008e72:	3201      	adds	r2, #1
 8008e74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e78:	60a2      	str	r2, [r4, #8]
 8008e7a:	68a3      	ldr	r3, [r4, #8]
 8008e7c:	3b01      	subs	r3, #1
 8008e7e:	60a3      	str	r3, [r4, #8]
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	3301      	adds	r3, #1
 8008e84:	6123      	str	r3, [r4, #16]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	607b      	str	r3, [r7, #4]
 8008e8e:	f340 8087 	ble.w	8008fa0 <_scanf_float+0x284>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	3301      	adds	r3, #1
 8008e96:	603b      	str	r3, [r7, #0]
 8008e98:	e765      	b.n	8008d66 <_scanf_float+0x4a>
 8008e9a:	eb1a 0105 	adds.w	r1, sl, r5
 8008e9e:	f47f af6f 	bne.w	8008d80 <_scanf_float+0x64>
 8008ea2:	6822      	ldr	r2, [r4, #0]
 8008ea4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008ea8:	6022      	str	r2, [r4, #0]
 8008eaa:	460d      	mov	r5, r1
 8008eac:	468a      	mov	sl, r1
 8008eae:	f806 3b01 	strb.w	r3, [r6], #1
 8008eb2:	e7e2      	b.n	8008e7a <_scanf_float+0x15e>
 8008eb4:	6822      	ldr	r2, [r4, #0]
 8008eb6:	0610      	lsls	r0, r2, #24
 8008eb8:	f57f af62 	bpl.w	8008d80 <_scanf_float+0x64>
 8008ebc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ec0:	6022      	str	r2, [r4, #0]
 8008ec2:	e7f4      	b.n	8008eae <_scanf_float+0x192>
 8008ec4:	f1ba 0f00 	cmp.w	sl, #0
 8008ec8:	d10e      	bne.n	8008ee8 <_scanf_float+0x1cc>
 8008eca:	f1b9 0f00 	cmp.w	r9, #0
 8008ece:	d10e      	bne.n	8008eee <_scanf_float+0x1d2>
 8008ed0:	6822      	ldr	r2, [r4, #0]
 8008ed2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008ed6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008eda:	d108      	bne.n	8008eee <_scanf_float+0x1d2>
 8008edc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ee0:	6022      	str	r2, [r4, #0]
 8008ee2:	f04f 0a01 	mov.w	sl, #1
 8008ee6:	e7e2      	b.n	8008eae <_scanf_float+0x192>
 8008ee8:	f1ba 0f02 	cmp.w	sl, #2
 8008eec:	d055      	beq.n	8008f9a <_scanf_float+0x27e>
 8008eee:	2d01      	cmp	r5, #1
 8008ef0:	d002      	beq.n	8008ef8 <_scanf_float+0x1dc>
 8008ef2:	2d04      	cmp	r5, #4
 8008ef4:	f47f af44 	bne.w	8008d80 <_scanf_float+0x64>
 8008ef8:	3501      	adds	r5, #1
 8008efa:	b2ed      	uxtb	r5, r5
 8008efc:	e7d7      	b.n	8008eae <_scanf_float+0x192>
 8008efe:	f1ba 0f01 	cmp.w	sl, #1
 8008f02:	f47f af3d 	bne.w	8008d80 <_scanf_float+0x64>
 8008f06:	f04f 0a02 	mov.w	sl, #2
 8008f0a:	e7d0      	b.n	8008eae <_scanf_float+0x192>
 8008f0c:	b97d      	cbnz	r5, 8008f2e <_scanf_float+0x212>
 8008f0e:	f1b9 0f00 	cmp.w	r9, #0
 8008f12:	f47f af38 	bne.w	8008d86 <_scanf_float+0x6a>
 8008f16:	6822      	ldr	r2, [r4, #0]
 8008f18:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f1c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f20:	f040 8108 	bne.w	8009134 <_scanf_float+0x418>
 8008f24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f28:	6022      	str	r2, [r4, #0]
 8008f2a:	2501      	movs	r5, #1
 8008f2c:	e7bf      	b.n	8008eae <_scanf_float+0x192>
 8008f2e:	2d03      	cmp	r5, #3
 8008f30:	d0e2      	beq.n	8008ef8 <_scanf_float+0x1dc>
 8008f32:	2d05      	cmp	r5, #5
 8008f34:	e7de      	b.n	8008ef4 <_scanf_float+0x1d8>
 8008f36:	2d02      	cmp	r5, #2
 8008f38:	f47f af22 	bne.w	8008d80 <_scanf_float+0x64>
 8008f3c:	2503      	movs	r5, #3
 8008f3e:	e7b6      	b.n	8008eae <_scanf_float+0x192>
 8008f40:	2d06      	cmp	r5, #6
 8008f42:	f47f af1d 	bne.w	8008d80 <_scanf_float+0x64>
 8008f46:	2507      	movs	r5, #7
 8008f48:	e7b1      	b.n	8008eae <_scanf_float+0x192>
 8008f4a:	6822      	ldr	r2, [r4, #0]
 8008f4c:	0591      	lsls	r1, r2, #22
 8008f4e:	f57f af17 	bpl.w	8008d80 <_scanf_float+0x64>
 8008f52:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008f56:	6022      	str	r2, [r4, #0]
 8008f58:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f5c:	e7a7      	b.n	8008eae <_scanf_float+0x192>
 8008f5e:	6822      	ldr	r2, [r4, #0]
 8008f60:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008f64:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008f68:	d006      	beq.n	8008f78 <_scanf_float+0x25c>
 8008f6a:	0550      	lsls	r0, r2, #21
 8008f6c:	f57f af08 	bpl.w	8008d80 <_scanf_float+0x64>
 8008f70:	f1b9 0f00 	cmp.w	r9, #0
 8008f74:	f000 80de 	beq.w	8009134 <_scanf_float+0x418>
 8008f78:	0591      	lsls	r1, r2, #22
 8008f7a:	bf58      	it	pl
 8008f7c:	9902      	ldrpl	r1, [sp, #8]
 8008f7e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f82:	bf58      	it	pl
 8008f84:	eba9 0101 	subpl.w	r1, r9, r1
 8008f88:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008f8c:	bf58      	it	pl
 8008f8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f92:	6022      	str	r2, [r4, #0]
 8008f94:	f04f 0900 	mov.w	r9, #0
 8008f98:	e789      	b.n	8008eae <_scanf_float+0x192>
 8008f9a:	f04f 0a03 	mov.w	sl, #3
 8008f9e:	e786      	b.n	8008eae <_scanf_float+0x192>
 8008fa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008fa4:	4639      	mov	r1, r7
 8008fa6:	4640      	mov	r0, r8
 8008fa8:	4798      	blx	r3
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f43f aedb 	beq.w	8008d66 <_scanf_float+0x4a>
 8008fb0:	e6e6      	b.n	8008d80 <_scanf_float+0x64>
 8008fb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fba:	463a      	mov	r2, r7
 8008fbc:	4640      	mov	r0, r8
 8008fbe:	4798      	blx	r3
 8008fc0:	6923      	ldr	r3, [r4, #16]
 8008fc2:	3b01      	subs	r3, #1
 8008fc4:	6123      	str	r3, [r4, #16]
 8008fc6:	e6e8      	b.n	8008d9a <_scanf_float+0x7e>
 8008fc8:	1e6b      	subs	r3, r5, #1
 8008fca:	2b06      	cmp	r3, #6
 8008fcc:	d824      	bhi.n	8009018 <_scanf_float+0x2fc>
 8008fce:	2d02      	cmp	r5, #2
 8008fd0:	d836      	bhi.n	8009040 <_scanf_float+0x324>
 8008fd2:	9b01      	ldr	r3, [sp, #4]
 8008fd4:	429e      	cmp	r6, r3
 8008fd6:	f67f aee4 	bls.w	8008da2 <_scanf_float+0x86>
 8008fda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fe2:	463a      	mov	r2, r7
 8008fe4:	4640      	mov	r0, r8
 8008fe6:	4798      	blx	r3
 8008fe8:	6923      	ldr	r3, [r4, #16]
 8008fea:	3b01      	subs	r3, #1
 8008fec:	6123      	str	r3, [r4, #16]
 8008fee:	e7f0      	b.n	8008fd2 <_scanf_float+0x2b6>
 8008ff0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ff4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008ff8:	463a      	mov	r2, r7
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4798      	blx	r3
 8008ffe:	6923      	ldr	r3, [r4, #16]
 8009000:	3b01      	subs	r3, #1
 8009002:	6123      	str	r3, [r4, #16]
 8009004:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009008:	fa5f fa8a 	uxtb.w	sl, sl
 800900c:	f1ba 0f02 	cmp.w	sl, #2
 8009010:	d1ee      	bne.n	8008ff0 <_scanf_float+0x2d4>
 8009012:	3d03      	subs	r5, #3
 8009014:	b2ed      	uxtb	r5, r5
 8009016:	1b76      	subs	r6, r6, r5
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	05da      	lsls	r2, r3, #23
 800901c:	d530      	bpl.n	8009080 <_scanf_float+0x364>
 800901e:	055b      	lsls	r3, r3, #21
 8009020:	d511      	bpl.n	8009046 <_scanf_float+0x32a>
 8009022:	9b01      	ldr	r3, [sp, #4]
 8009024:	429e      	cmp	r6, r3
 8009026:	f67f aebc 	bls.w	8008da2 <_scanf_float+0x86>
 800902a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800902e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009032:	463a      	mov	r2, r7
 8009034:	4640      	mov	r0, r8
 8009036:	4798      	blx	r3
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	3b01      	subs	r3, #1
 800903c:	6123      	str	r3, [r4, #16]
 800903e:	e7f0      	b.n	8009022 <_scanf_float+0x306>
 8009040:	46aa      	mov	sl, r5
 8009042:	46b3      	mov	fp, r6
 8009044:	e7de      	b.n	8009004 <_scanf_float+0x2e8>
 8009046:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	2965      	cmp	r1, #101	@ 0x65
 800904e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009052:	f106 35ff 	add.w	r5, r6, #4294967295
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	d00c      	beq.n	8009074 <_scanf_float+0x358>
 800905a:	2945      	cmp	r1, #69	@ 0x45
 800905c:	d00a      	beq.n	8009074 <_scanf_float+0x358>
 800905e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009062:	463a      	mov	r2, r7
 8009064:	4640      	mov	r0, r8
 8009066:	4798      	blx	r3
 8009068:	6923      	ldr	r3, [r4, #16]
 800906a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800906e:	3b01      	subs	r3, #1
 8009070:	1eb5      	subs	r5, r6, #2
 8009072:	6123      	str	r3, [r4, #16]
 8009074:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009078:	463a      	mov	r2, r7
 800907a:	4640      	mov	r0, r8
 800907c:	4798      	blx	r3
 800907e:	462e      	mov	r6, r5
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	f012 0210 	ands.w	r2, r2, #16
 8009086:	d001      	beq.n	800908c <_scanf_float+0x370>
 8009088:	2000      	movs	r0, #0
 800908a:	e68b      	b.n	8008da4 <_scanf_float+0x88>
 800908c:	7032      	strb	r2, [r6, #0]
 800908e:	6823      	ldr	r3, [r4, #0]
 8009090:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009098:	d11c      	bne.n	80090d4 <_scanf_float+0x3b8>
 800909a:	9b02      	ldr	r3, [sp, #8]
 800909c:	454b      	cmp	r3, r9
 800909e:	eba3 0209 	sub.w	r2, r3, r9
 80090a2:	d123      	bne.n	80090ec <_scanf_float+0x3d0>
 80090a4:	9901      	ldr	r1, [sp, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	4640      	mov	r0, r8
 80090aa:	f002 fc41 	bl	800b930 <_strtod_r>
 80090ae:	9b03      	ldr	r3, [sp, #12]
 80090b0:	6821      	ldr	r1, [r4, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f011 0f02 	tst.w	r1, #2
 80090b8:	ec57 6b10 	vmov	r6, r7, d0
 80090bc:	f103 0204 	add.w	r2, r3, #4
 80090c0:	d01f      	beq.n	8009102 <_scanf_float+0x3e6>
 80090c2:	9903      	ldr	r1, [sp, #12]
 80090c4:	600a      	str	r2, [r1, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	e9c3 6700 	strd	r6, r7, [r3]
 80090cc:	68e3      	ldr	r3, [r4, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60e3      	str	r3, [r4, #12]
 80090d2:	e7d9      	b.n	8009088 <_scanf_float+0x36c>
 80090d4:	9b04      	ldr	r3, [sp, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d0e4      	beq.n	80090a4 <_scanf_float+0x388>
 80090da:	9905      	ldr	r1, [sp, #20]
 80090dc:	230a      	movs	r3, #10
 80090de:	3101      	adds	r1, #1
 80090e0:	4640      	mov	r0, r8
 80090e2:	f002 fca5 	bl	800ba30 <_strtol_r>
 80090e6:	9b04      	ldr	r3, [sp, #16]
 80090e8:	9e05      	ldr	r6, [sp, #20]
 80090ea:	1ac2      	subs	r2, r0, r3
 80090ec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80090f0:	429e      	cmp	r6, r3
 80090f2:	bf28      	it	cs
 80090f4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80090f8:	4910      	ldr	r1, [pc, #64]	@ (800913c <_scanf_float+0x420>)
 80090fa:	4630      	mov	r0, r6
 80090fc:	f000 f8e4 	bl	80092c8 <siprintf>
 8009100:	e7d0      	b.n	80090a4 <_scanf_float+0x388>
 8009102:	f011 0f04 	tst.w	r1, #4
 8009106:	9903      	ldr	r1, [sp, #12]
 8009108:	600a      	str	r2, [r1, #0]
 800910a:	d1dc      	bne.n	80090c6 <_scanf_float+0x3aa>
 800910c:	681d      	ldr	r5, [r3, #0]
 800910e:	4632      	mov	r2, r6
 8009110:	463b      	mov	r3, r7
 8009112:	4630      	mov	r0, r6
 8009114:	4639      	mov	r1, r7
 8009116:	f7f7 fd31 	bl	8000b7c <__aeabi_dcmpun>
 800911a:	b128      	cbz	r0, 8009128 <_scanf_float+0x40c>
 800911c:	4808      	ldr	r0, [pc, #32]	@ (8009140 <_scanf_float+0x424>)
 800911e:	f000 f9ff 	bl	8009520 <nanf>
 8009122:	ed85 0a00 	vstr	s0, [r5]
 8009126:	e7d1      	b.n	80090cc <_scanf_float+0x3b0>
 8009128:	4630      	mov	r0, r6
 800912a:	4639      	mov	r1, r7
 800912c:	f7f7 fd84 	bl	8000c38 <__aeabi_d2f>
 8009130:	6028      	str	r0, [r5, #0]
 8009132:	e7cb      	b.n	80090cc <_scanf_float+0x3b0>
 8009134:	f04f 0900 	mov.w	r9, #0
 8009138:	e629      	b.n	8008d8e <_scanf_float+0x72>
 800913a:	bf00      	nop
 800913c:	0800d51e 	.word	0x0800d51e
 8009140:	0800d8d0 	.word	0x0800d8d0

08009144 <std>:
 8009144:	2300      	movs	r3, #0
 8009146:	b510      	push	{r4, lr}
 8009148:	4604      	mov	r4, r0
 800914a:	e9c0 3300 	strd	r3, r3, [r0]
 800914e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009152:	6083      	str	r3, [r0, #8]
 8009154:	8181      	strh	r1, [r0, #12]
 8009156:	6643      	str	r3, [r0, #100]	@ 0x64
 8009158:	81c2      	strh	r2, [r0, #14]
 800915a:	6183      	str	r3, [r0, #24]
 800915c:	4619      	mov	r1, r3
 800915e:	2208      	movs	r2, #8
 8009160:	305c      	adds	r0, #92	@ 0x5c
 8009162:	f000 f940 	bl	80093e6 <memset>
 8009166:	4b0d      	ldr	r3, [pc, #52]	@ (800919c <std+0x58>)
 8009168:	6263      	str	r3, [r4, #36]	@ 0x24
 800916a:	4b0d      	ldr	r3, [pc, #52]	@ (80091a0 <std+0x5c>)
 800916c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800916e:	4b0d      	ldr	r3, [pc, #52]	@ (80091a4 <std+0x60>)
 8009170:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009172:	4b0d      	ldr	r3, [pc, #52]	@ (80091a8 <std+0x64>)
 8009174:	6323      	str	r3, [r4, #48]	@ 0x30
 8009176:	4b0d      	ldr	r3, [pc, #52]	@ (80091ac <std+0x68>)
 8009178:	6224      	str	r4, [r4, #32]
 800917a:	429c      	cmp	r4, r3
 800917c:	d006      	beq.n	800918c <std+0x48>
 800917e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009182:	4294      	cmp	r4, r2
 8009184:	d002      	beq.n	800918c <std+0x48>
 8009186:	33d0      	adds	r3, #208	@ 0xd0
 8009188:	429c      	cmp	r4, r3
 800918a:	d105      	bne.n	8009198 <std+0x54>
 800918c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009194:	f000 b9b2 	b.w	80094fc <__retarget_lock_init_recursive>
 8009198:	bd10      	pop	{r4, pc}
 800919a:	bf00      	nop
 800919c:	0800935d 	.word	0x0800935d
 80091a0:	08009383 	.word	0x08009383
 80091a4:	080093bb 	.word	0x080093bb
 80091a8:	080093df 	.word	0x080093df
 80091ac:	200006d0 	.word	0x200006d0

080091b0 <stdio_exit_handler>:
 80091b0:	4a02      	ldr	r2, [pc, #8]	@ (80091bc <stdio_exit_handler+0xc>)
 80091b2:	4903      	ldr	r1, [pc, #12]	@ (80091c0 <stdio_exit_handler+0x10>)
 80091b4:	4803      	ldr	r0, [pc, #12]	@ (80091c4 <stdio_exit_handler+0x14>)
 80091b6:	f000 b869 	b.w	800928c <_fwalk_sglue>
 80091ba:	bf00      	nop
 80091bc:	20000008 	.word	0x20000008
 80091c0:	0800c421 	.word	0x0800c421
 80091c4:	20000018 	.word	0x20000018

080091c8 <cleanup_stdio>:
 80091c8:	6841      	ldr	r1, [r0, #4]
 80091ca:	4b0c      	ldr	r3, [pc, #48]	@ (80091fc <cleanup_stdio+0x34>)
 80091cc:	4299      	cmp	r1, r3
 80091ce:	b510      	push	{r4, lr}
 80091d0:	4604      	mov	r4, r0
 80091d2:	d001      	beq.n	80091d8 <cleanup_stdio+0x10>
 80091d4:	f003 f924 	bl	800c420 <_fflush_r>
 80091d8:	68a1      	ldr	r1, [r4, #8]
 80091da:	4b09      	ldr	r3, [pc, #36]	@ (8009200 <cleanup_stdio+0x38>)
 80091dc:	4299      	cmp	r1, r3
 80091de:	d002      	beq.n	80091e6 <cleanup_stdio+0x1e>
 80091e0:	4620      	mov	r0, r4
 80091e2:	f003 f91d 	bl	800c420 <_fflush_r>
 80091e6:	68e1      	ldr	r1, [r4, #12]
 80091e8:	4b06      	ldr	r3, [pc, #24]	@ (8009204 <cleanup_stdio+0x3c>)
 80091ea:	4299      	cmp	r1, r3
 80091ec:	d004      	beq.n	80091f8 <cleanup_stdio+0x30>
 80091ee:	4620      	mov	r0, r4
 80091f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f4:	f003 b914 	b.w	800c420 <_fflush_r>
 80091f8:	bd10      	pop	{r4, pc}
 80091fa:	bf00      	nop
 80091fc:	200006d0 	.word	0x200006d0
 8009200:	20000738 	.word	0x20000738
 8009204:	200007a0 	.word	0x200007a0

08009208 <global_stdio_init.part.0>:
 8009208:	b510      	push	{r4, lr}
 800920a:	4b0b      	ldr	r3, [pc, #44]	@ (8009238 <global_stdio_init.part.0+0x30>)
 800920c:	4c0b      	ldr	r4, [pc, #44]	@ (800923c <global_stdio_init.part.0+0x34>)
 800920e:	4a0c      	ldr	r2, [pc, #48]	@ (8009240 <global_stdio_init.part.0+0x38>)
 8009210:	601a      	str	r2, [r3, #0]
 8009212:	4620      	mov	r0, r4
 8009214:	2200      	movs	r2, #0
 8009216:	2104      	movs	r1, #4
 8009218:	f7ff ff94 	bl	8009144 <std>
 800921c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009220:	2201      	movs	r2, #1
 8009222:	2109      	movs	r1, #9
 8009224:	f7ff ff8e 	bl	8009144 <std>
 8009228:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800922c:	2202      	movs	r2, #2
 800922e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009232:	2112      	movs	r1, #18
 8009234:	f7ff bf86 	b.w	8009144 <std>
 8009238:	20000808 	.word	0x20000808
 800923c:	200006d0 	.word	0x200006d0
 8009240:	080091b1 	.word	0x080091b1

08009244 <__sfp_lock_acquire>:
 8009244:	4801      	ldr	r0, [pc, #4]	@ (800924c <__sfp_lock_acquire+0x8>)
 8009246:	f000 b95a 	b.w	80094fe <__retarget_lock_acquire_recursive>
 800924a:	bf00      	nop
 800924c:	20000811 	.word	0x20000811

08009250 <__sfp_lock_release>:
 8009250:	4801      	ldr	r0, [pc, #4]	@ (8009258 <__sfp_lock_release+0x8>)
 8009252:	f000 b955 	b.w	8009500 <__retarget_lock_release_recursive>
 8009256:	bf00      	nop
 8009258:	20000811 	.word	0x20000811

0800925c <__sinit>:
 800925c:	b510      	push	{r4, lr}
 800925e:	4604      	mov	r4, r0
 8009260:	f7ff fff0 	bl	8009244 <__sfp_lock_acquire>
 8009264:	6a23      	ldr	r3, [r4, #32]
 8009266:	b11b      	cbz	r3, 8009270 <__sinit+0x14>
 8009268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800926c:	f7ff bff0 	b.w	8009250 <__sfp_lock_release>
 8009270:	4b04      	ldr	r3, [pc, #16]	@ (8009284 <__sinit+0x28>)
 8009272:	6223      	str	r3, [r4, #32]
 8009274:	4b04      	ldr	r3, [pc, #16]	@ (8009288 <__sinit+0x2c>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1f5      	bne.n	8009268 <__sinit+0xc>
 800927c:	f7ff ffc4 	bl	8009208 <global_stdio_init.part.0>
 8009280:	e7f2      	b.n	8009268 <__sinit+0xc>
 8009282:	bf00      	nop
 8009284:	080091c9 	.word	0x080091c9
 8009288:	20000808 	.word	0x20000808

0800928c <_fwalk_sglue>:
 800928c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009290:	4607      	mov	r7, r0
 8009292:	4688      	mov	r8, r1
 8009294:	4614      	mov	r4, r2
 8009296:	2600      	movs	r6, #0
 8009298:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800929c:	f1b9 0901 	subs.w	r9, r9, #1
 80092a0:	d505      	bpl.n	80092ae <_fwalk_sglue+0x22>
 80092a2:	6824      	ldr	r4, [r4, #0]
 80092a4:	2c00      	cmp	r4, #0
 80092a6:	d1f7      	bne.n	8009298 <_fwalk_sglue+0xc>
 80092a8:	4630      	mov	r0, r6
 80092aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ae:	89ab      	ldrh	r3, [r5, #12]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d907      	bls.n	80092c4 <_fwalk_sglue+0x38>
 80092b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80092b8:	3301      	adds	r3, #1
 80092ba:	d003      	beq.n	80092c4 <_fwalk_sglue+0x38>
 80092bc:	4629      	mov	r1, r5
 80092be:	4638      	mov	r0, r7
 80092c0:	47c0      	blx	r8
 80092c2:	4306      	orrs	r6, r0
 80092c4:	3568      	adds	r5, #104	@ 0x68
 80092c6:	e7e9      	b.n	800929c <_fwalk_sglue+0x10>

080092c8 <siprintf>:
 80092c8:	b40e      	push	{r1, r2, r3}
 80092ca:	b500      	push	{lr}
 80092cc:	b09c      	sub	sp, #112	@ 0x70
 80092ce:	ab1d      	add	r3, sp, #116	@ 0x74
 80092d0:	9002      	str	r0, [sp, #8]
 80092d2:	9006      	str	r0, [sp, #24]
 80092d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80092d8:	4809      	ldr	r0, [pc, #36]	@ (8009300 <siprintf+0x38>)
 80092da:	9107      	str	r1, [sp, #28]
 80092dc:	9104      	str	r1, [sp, #16]
 80092de:	4909      	ldr	r1, [pc, #36]	@ (8009304 <siprintf+0x3c>)
 80092e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e4:	9105      	str	r1, [sp, #20]
 80092e6:	6800      	ldr	r0, [r0, #0]
 80092e8:	9301      	str	r3, [sp, #4]
 80092ea:	a902      	add	r1, sp, #8
 80092ec:	f002 fbfe 	bl	800baec <_svfiprintf_r>
 80092f0:	9b02      	ldr	r3, [sp, #8]
 80092f2:	2200      	movs	r2, #0
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	b01c      	add	sp, #112	@ 0x70
 80092f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092fc:	b003      	add	sp, #12
 80092fe:	4770      	bx	lr
 8009300:	20000014 	.word	0x20000014
 8009304:	ffff0208 	.word	0xffff0208

08009308 <siscanf>:
 8009308:	b40e      	push	{r1, r2, r3}
 800930a:	b530      	push	{r4, r5, lr}
 800930c:	b09c      	sub	sp, #112	@ 0x70
 800930e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009310:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009314:	f854 5b04 	ldr.w	r5, [r4], #4
 8009318:	f8ad 2014 	strh.w	r2, [sp, #20]
 800931c:	9002      	str	r0, [sp, #8]
 800931e:	9006      	str	r0, [sp, #24]
 8009320:	f7f6 ffce 	bl	80002c0 <strlen>
 8009324:	4b0b      	ldr	r3, [pc, #44]	@ (8009354 <siscanf+0x4c>)
 8009326:	9003      	str	r0, [sp, #12]
 8009328:	9007      	str	r0, [sp, #28]
 800932a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800932c:	480a      	ldr	r0, [pc, #40]	@ (8009358 <siscanf+0x50>)
 800932e:	9401      	str	r4, [sp, #4]
 8009330:	2300      	movs	r3, #0
 8009332:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009334:	9314      	str	r3, [sp, #80]	@ 0x50
 8009336:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800933a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800933e:	462a      	mov	r2, r5
 8009340:	4623      	mov	r3, r4
 8009342:	a902      	add	r1, sp, #8
 8009344:	6800      	ldr	r0, [r0, #0]
 8009346:	f002 fd25 	bl	800bd94 <__ssvfiscanf_r>
 800934a:	b01c      	add	sp, #112	@ 0x70
 800934c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009350:	b003      	add	sp, #12
 8009352:	4770      	bx	lr
 8009354:	0800937f 	.word	0x0800937f
 8009358:	20000014 	.word	0x20000014

0800935c <__sread>:
 800935c:	b510      	push	{r4, lr}
 800935e:	460c      	mov	r4, r1
 8009360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009364:	f000 f87c 	bl	8009460 <_read_r>
 8009368:	2800      	cmp	r0, #0
 800936a:	bfab      	itete	ge
 800936c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800936e:	89a3      	ldrhlt	r3, [r4, #12]
 8009370:	181b      	addge	r3, r3, r0
 8009372:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009376:	bfac      	ite	ge
 8009378:	6563      	strge	r3, [r4, #84]	@ 0x54
 800937a:	81a3      	strhlt	r3, [r4, #12]
 800937c:	bd10      	pop	{r4, pc}

0800937e <__seofread>:
 800937e:	2000      	movs	r0, #0
 8009380:	4770      	bx	lr

08009382 <__swrite>:
 8009382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009386:	461f      	mov	r7, r3
 8009388:	898b      	ldrh	r3, [r1, #12]
 800938a:	05db      	lsls	r3, r3, #23
 800938c:	4605      	mov	r5, r0
 800938e:	460c      	mov	r4, r1
 8009390:	4616      	mov	r6, r2
 8009392:	d505      	bpl.n	80093a0 <__swrite+0x1e>
 8009394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009398:	2302      	movs	r3, #2
 800939a:	2200      	movs	r2, #0
 800939c:	f000 f84e 	bl	800943c <_lseek_r>
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093aa:	81a3      	strh	r3, [r4, #12]
 80093ac:	4632      	mov	r2, r6
 80093ae:	463b      	mov	r3, r7
 80093b0:	4628      	mov	r0, r5
 80093b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093b6:	f000 b865 	b.w	8009484 <_write_r>

080093ba <__sseek>:
 80093ba:	b510      	push	{r4, lr}
 80093bc:	460c      	mov	r4, r1
 80093be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093c2:	f000 f83b 	bl	800943c <_lseek_r>
 80093c6:	1c43      	adds	r3, r0, #1
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	bf15      	itete	ne
 80093cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093d6:	81a3      	strheq	r3, [r4, #12]
 80093d8:	bf18      	it	ne
 80093da:	81a3      	strhne	r3, [r4, #12]
 80093dc:	bd10      	pop	{r4, pc}

080093de <__sclose>:
 80093de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e2:	f000 b81b 	b.w	800941c <_close_r>

080093e6 <memset>:
 80093e6:	4402      	add	r2, r0
 80093e8:	4603      	mov	r3, r0
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d100      	bne.n	80093f0 <memset+0xa>
 80093ee:	4770      	bx	lr
 80093f0:	f803 1b01 	strb.w	r1, [r3], #1
 80093f4:	e7f9      	b.n	80093ea <memset+0x4>

080093f6 <strcat>:
 80093f6:	b510      	push	{r4, lr}
 80093f8:	4602      	mov	r2, r0
 80093fa:	7814      	ldrb	r4, [r2, #0]
 80093fc:	4613      	mov	r3, r2
 80093fe:	3201      	adds	r2, #1
 8009400:	2c00      	cmp	r4, #0
 8009402:	d1fa      	bne.n	80093fa <strcat+0x4>
 8009404:	3b01      	subs	r3, #1
 8009406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800940a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800940e:	2a00      	cmp	r2, #0
 8009410:	d1f9      	bne.n	8009406 <strcat+0x10>
 8009412:	bd10      	pop	{r4, pc}

08009414 <_localeconv_r>:
 8009414:	4800      	ldr	r0, [pc, #0]	@ (8009418 <_localeconv_r+0x4>)
 8009416:	4770      	bx	lr
 8009418:	20000154 	.word	0x20000154

0800941c <_close_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4d06      	ldr	r5, [pc, #24]	@ (8009438 <_close_r+0x1c>)
 8009420:	2300      	movs	r3, #0
 8009422:	4604      	mov	r4, r0
 8009424:	4608      	mov	r0, r1
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	f7f9 faf2 	bl	8002a10 <_close>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_close_r+0x1a>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	b103      	cbz	r3, 8009436 <_close_r+0x1a>
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	2000080c 	.word	0x2000080c

0800943c <_lseek_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d07      	ldr	r5, [pc, #28]	@ (800945c <_lseek_r+0x20>)
 8009440:	4604      	mov	r4, r0
 8009442:	4608      	mov	r0, r1
 8009444:	4611      	mov	r1, r2
 8009446:	2200      	movs	r2, #0
 8009448:	602a      	str	r2, [r5, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f7f9 fb07 	bl	8002a5e <_lseek>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_lseek_r+0x1e>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_lseek_r+0x1e>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	2000080c 	.word	0x2000080c

08009460 <_read_r>:
 8009460:	b538      	push	{r3, r4, r5, lr}
 8009462:	4d07      	ldr	r5, [pc, #28]	@ (8009480 <_read_r+0x20>)
 8009464:	4604      	mov	r4, r0
 8009466:	4608      	mov	r0, r1
 8009468:	4611      	mov	r1, r2
 800946a:	2200      	movs	r2, #0
 800946c:	602a      	str	r2, [r5, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	f7f9 fa95 	bl	800299e <_read>
 8009474:	1c43      	adds	r3, r0, #1
 8009476:	d102      	bne.n	800947e <_read_r+0x1e>
 8009478:	682b      	ldr	r3, [r5, #0]
 800947a:	b103      	cbz	r3, 800947e <_read_r+0x1e>
 800947c:	6023      	str	r3, [r4, #0]
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	2000080c 	.word	0x2000080c

08009484 <_write_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4d07      	ldr	r5, [pc, #28]	@ (80094a4 <_write_r+0x20>)
 8009488:	4604      	mov	r4, r0
 800948a:	4608      	mov	r0, r1
 800948c:	4611      	mov	r1, r2
 800948e:	2200      	movs	r2, #0
 8009490:	602a      	str	r2, [r5, #0]
 8009492:	461a      	mov	r2, r3
 8009494:	f7f9 faa0 	bl	80029d8 <_write>
 8009498:	1c43      	adds	r3, r0, #1
 800949a:	d102      	bne.n	80094a2 <_write_r+0x1e>
 800949c:	682b      	ldr	r3, [r5, #0]
 800949e:	b103      	cbz	r3, 80094a2 <_write_r+0x1e>
 80094a0:	6023      	str	r3, [r4, #0]
 80094a2:	bd38      	pop	{r3, r4, r5, pc}
 80094a4:	2000080c 	.word	0x2000080c

080094a8 <__errno>:
 80094a8:	4b01      	ldr	r3, [pc, #4]	@ (80094b0 <__errno+0x8>)
 80094aa:	6818      	ldr	r0, [r3, #0]
 80094ac:	4770      	bx	lr
 80094ae:	bf00      	nop
 80094b0:	20000014 	.word	0x20000014

080094b4 <__libc_init_array>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4d0d      	ldr	r5, [pc, #52]	@ (80094ec <__libc_init_array+0x38>)
 80094b8:	4c0d      	ldr	r4, [pc, #52]	@ (80094f0 <__libc_init_array+0x3c>)
 80094ba:	1b64      	subs	r4, r4, r5
 80094bc:	10a4      	asrs	r4, r4, #2
 80094be:	2600      	movs	r6, #0
 80094c0:	42a6      	cmp	r6, r4
 80094c2:	d109      	bne.n	80094d8 <__libc_init_array+0x24>
 80094c4:	4d0b      	ldr	r5, [pc, #44]	@ (80094f4 <__libc_init_array+0x40>)
 80094c6:	4c0c      	ldr	r4, [pc, #48]	@ (80094f8 <__libc_init_array+0x44>)
 80094c8:	f003 ff72 	bl	800d3b0 <_init>
 80094cc:	1b64      	subs	r4, r4, r5
 80094ce:	10a4      	asrs	r4, r4, #2
 80094d0:	2600      	movs	r6, #0
 80094d2:	42a6      	cmp	r6, r4
 80094d4:	d105      	bne.n	80094e2 <__libc_init_array+0x2e>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094dc:	4798      	blx	r3
 80094de:	3601      	adds	r6, #1
 80094e0:	e7ee      	b.n	80094c0 <__libc_init_array+0xc>
 80094e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e6:	4798      	blx	r3
 80094e8:	3601      	adds	r6, #1
 80094ea:	e7f2      	b.n	80094d2 <__libc_init_array+0x1e>
 80094ec:	0800d93c 	.word	0x0800d93c
 80094f0:	0800d93c 	.word	0x0800d93c
 80094f4:	0800d93c 	.word	0x0800d93c
 80094f8:	0800d940 	.word	0x0800d940

080094fc <__retarget_lock_init_recursive>:
 80094fc:	4770      	bx	lr

080094fe <__retarget_lock_acquire_recursive>:
 80094fe:	4770      	bx	lr

08009500 <__retarget_lock_release_recursive>:
 8009500:	4770      	bx	lr

08009502 <memcpy>:
 8009502:	440a      	add	r2, r1
 8009504:	4291      	cmp	r1, r2
 8009506:	f100 33ff 	add.w	r3, r0, #4294967295
 800950a:	d100      	bne.n	800950e <memcpy+0xc>
 800950c:	4770      	bx	lr
 800950e:	b510      	push	{r4, lr}
 8009510:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009518:	4291      	cmp	r1, r2
 800951a:	d1f9      	bne.n	8009510 <memcpy+0xe>
 800951c:	bd10      	pop	{r4, pc}
	...

08009520 <nanf>:
 8009520:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009528 <nanf+0x8>
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	7fc00000 	.word	0x7fc00000

0800952c <quorem>:
 800952c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009530:	6903      	ldr	r3, [r0, #16]
 8009532:	690c      	ldr	r4, [r1, #16]
 8009534:	42a3      	cmp	r3, r4
 8009536:	4607      	mov	r7, r0
 8009538:	db7e      	blt.n	8009638 <quorem+0x10c>
 800953a:	3c01      	subs	r4, #1
 800953c:	f101 0814 	add.w	r8, r1, #20
 8009540:	00a3      	lsls	r3, r4, #2
 8009542:	f100 0514 	add.w	r5, r0, #20
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800954c:	9301      	str	r3, [sp, #4]
 800954e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009556:	3301      	adds	r3, #1
 8009558:	429a      	cmp	r2, r3
 800955a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800955e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009562:	d32e      	bcc.n	80095c2 <quorem+0x96>
 8009564:	f04f 0a00 	mov.w	sl, #0
 8009568:	46c4      	mov	ip, r8
 800956a:	46ae      	mov	lr, r5
 800956c:	46d3      	mov	fp, sl
 800956e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009572:	b298      	uxth	r0, r3
 8009574:	fb06 a000 	mla	r0, r6, r0, sl
 8009578:	0c02      	lsrs	r2, r0, #16
 800957a:	0c1b      	lsrs	r3, r3, #16
 800957c:	fb06 2303 	mla	r3, r6, r3, r2
 8009580:	f8de 2000 	ldr.w	r2, [lr]
 8009584:	b280      	uxth	r0, r0
 8009586:	b292      	uxth	r2, r2
 8009588:	1a12      	subs	r2, r2, r0
 800958a:	445a      	add	r2, fp
 800958c:	f8de 0000 	ldr.w	r0, [lr]
 8009590:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009594:	b29b      	uxth	r3, r3
 8009596:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800959a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800959e:	b292      	uxth	r2, r2
 80095a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095a4:	45e1      	cmp	r9, ip
 80095a6:	f84e 2b04 	str.w	r2, [lr], #4
 80095aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095ae:	d2de      	bcs.n	800956e <quorem+0x42>
 80095b0:	9b00      	ldr	r3, [sp, #0]
 80095b2:	58eb      	ldr	r3, [r5, r3]
 80095b4:	b92b      	cbnz	r3, 80095c2 <quorem+0x96>
 80095b6:	9b01      	ldr	r3, [sp, #4]
 80095b8:	3b04      	subs	r3, #4
 80095ba:	429d      	cmp	r5, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	d32f      	bcc.n	8009620 <quorem+0xf4>
 80095c0:	613c      	str	r4, [r7, #16]
 80095c2:	4638      	mov	r0, r7
 80095c4:	f001 f9c4 	bl	800a950 <__mcmp>
 80095c8:	2800      	cmp	r0, #0
 80095ca:	db25      	blt.n	8009618 <quorem+0xec>
 80095cc:	4629      	mov	r1, r5
 80095ce:	2000      	movs	r0, #0
 80095d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80095d4:	f8d1 c000 	ldr.w	ip, [r1]
 80095d8:	fa1f fe82 	uxth.w	lr, r2
 80095dc:	fa1f f38c 	uxth.w	r3, ip
 80095e0:	eba3 030e 	sub.w	r3, r3, lr
 80095e4:	4403      	add	r3, r0
 80095e6:	0c12      	lsrs	r2, r2, #16
 80095e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095f6:	45c1      	cmp	r9, r8
 80095f8:	f841 3b04 	str.w	r3, [r1], #4
 80095fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009600:	d2e6      	bcs.n	80095d0 <quorem+0xa4>
 8009602:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009606:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800960a:	b922      	cbnz	r2, 8009616 <quorem+0xea>
 800960c:	3b04      	subs	r3, #4
 800960e:	429d      	cmp	r5, r3
 8009610:	461a      	mov	r2, r3
 8009612:	d30b      	bcc.n	800962c <quorem+0x100>
 8009614:	613c      	str	r4, [r7, #16]
 8009616:	3601      	adds	r6, #1
 8009618:	4630      	mov	r0, r6
 800961a:	b003      	add	sp, #12
 800961c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009620:	6812      	ldr	r2, [r2, #0]
 8009622:	3b04      	subs	r3, #4
 8009624:	2a00      	cmp	r2, #0
 8009626:	d1cb      	bne.n	80095c0 <quorem+0x94>
 8009628:	3c01      	subs	r4, #1
 800962a:	e7c6      	b.n	80095ba <quorem+0x8e>
 800962c:	6812      	ldr	r2, [r2, #0]
 800962e:	3b04      	subs	r3, #4
 8009630:	2a00      	cmp	r2, #0
 8009632:	d1ef      	bne.n	8009614 <quorem+0xe8>
 8009634:	3c01      	subs	r4, #1
 8009636:	e7ea      	b.n	800960e <quorem+0xe2>
 8009638:	2000      	movs	r0, #0
 800963a:	e7ee      	b.n	800961a <quorem+0xee>
 800963c:	0000      	movs	r0, r0
	...

08009640 <_dtoa_r>:
 8009640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009644:	69c7      	ldr	r7, [r0, #28]
 8009646:	b099      	sub	sp, #100	@ 0x64
 8009648:	ed8d 0b02 	vstr	d0, [sp, #8]
 800964c:	ec55 4b10 	vmov	r4, r5, d0
 8009650:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009652:	9109      	str	r1, [sp, #36]	@ 0x24
 8009654:	4683      	mov	fp, r0
 8009656:	920e      	str	r2, [sp, #56]	@ 0x38
 8009658:	9313      	str	r3, [sp, #76]	@ 0x4c
 800965a:	b97f      	cbnz	r7, 800967c <_dtoa_r+0x3c>
 800965c:	2010      	movs	r0, #16
 800965e:	f000 fdfd 	bl	800a25c <malloc>
 8009662:	4602      	mov	r2, r0
 8009664:	f8cb 001c 	str.w	r0, [fp, #28]
 8009668:	b920      	cbnz	r0, 8009674 <_dtoa_r+0x34>
 800966a:	4ba7      	ldr	r3, [pc, #668]	@ (8009908 <_dtoa_r+0x2c8>)
 800966c:	21ef      	movs	r1, #239	@ 0xef
 800966e:	48a7      	ldr	r0, [pc, #668]	@ (800990c <_dtoa_r+0x2cc>)
 8009670:	f002 ffb6 	bl	800c5e0 <__assert_func>
 8009674:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009678:	6007      	str	r7, [r0, #0]
 800967a:	60c7      	str	r7, [r0, #12]
 800967c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009680:	6819      	ldr	r1, [r3, #0]
 8009682:	b159      	cbz	r1, 800969c <_dtoa_r+0x5c>
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	604a      	str	r2, [r1, #4]
 8009688:	2301      	movs	r3, #1
 800968a:	4093      	lsls	r3, r2
 800968c:	608b      	str	r3, [r1, #8]
 800968e:	4658      	mov	r0, fp
 8009690:	f000 feda 	bl	800a448 <_Bfree>
 8009694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]
 800969c:	1e2b      	subs	r3, r5, #0
 800969e:	bfb9      	ittee	lt
 80096a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096a4:	9303      	strlt	r3, [sp, #12]
 80096a6:	2300      	movge	r3, #0
 80096a8:	6033      	strge	r3, [r6, #0]
 80096aa:	9f03      	ldr	r7, [sp, #12]
 80096ac:	4b98      	ldr	r3, [pc, #608]	@ (8009910 <_dtoa_r+0x2d0>)
 80096ae:	bfbc      	itt	lt
 80096b0:	2201      	movlt	r2, #1
 80096b2:	6032      	strlt	r2, [r6, #0]
 80096b4:	43bb      	bics	r3, r7
 80096b6:	d112      	bne.n	80096de <_dtoa_r+0x9e>
 80096b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80096be:	6013      	str	r3, [r2, #0]
 80096c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096c4:	4323      	orrs	r3, r4
 80096c6:	f000 854d 	beq.w	800a164 <_dtoa_r+0xb24>
 80096ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009924 <_dtoa_r+0x2e4>
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 854f 	beq.w	800a174 <_dtoa_r+0xb34>
 80096d6:	f10a 0303 	add.w	r3, sl, #3
 80096da:	f000 bd49 	b.w	800a170 <_dtoa_r+0xb30>
 80096de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096e2:	2200      	movs	r2, #0
 80096e4:	ec51 0b17 	vmov	r0, r1, d7
 80096e8:	2300      	movs	r3, #0
 80096ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80096ee:	f7f7 fa13 	bl	8000b18 <__aeabi_dcmpeq>
 80096f2:	4680      	mov	r8, r0
 80096f4:	b158      	cbz	r0, 800970e <_dtoa_r+0xce>
 80096f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096f8:	2301      	movs	r3, #1
 80096fa:	6013      	str	r3, [r2, #0]
 80096fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096fe:	b113      	cbz	r3, 8009706 <_dtoa_r+0xc6>
 8009700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009702:	4b84      	ldr	r3, [pc, #528]	@ (8009914 <_dtoa_r+0x2d4>)
 8009704:	6013      	str	r3, [r2, #0]
 8009706:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009928 <_dtoa_r+0x2e8>
 800970a:	f000 bd33 	b.w	800a174 <_dtoa_r+0xb34>
 800970e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009712:	aa16      	add	r2, sp, #88	@ 0x58
 8009714:	a917      	add	r1, sp, #92	@ 0x5c
 8009716:	4658      	mov	r0, fp
 8009718:	f001 fa3a 	bl	800ab90 <__d2b>
 800971c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009720:	4681      	mov	r9, r0
 8009722:	2e00      	cmp	r6, #0
 8009724:	d077      	beq.n	8009816 <_dtoa_r+0x1d6>
 8009726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009728:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800972c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009734:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009738:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800973c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009740:	4619      	mov	r1, r3
 8009742:	2200      	movs	r2, #0
 8009744:	4b74      	ldr	r3, [pc, #464]	@ (8009918 <_dtoa_r+0x2d8>)
 8009746:	f7f6 fdc7 	bl	80002d8 <__aeabi_dsub>
 800974a:	a369      	add	r3, pc, #420	@ (adr r3, 80098f0 <_dtoa_r+0x2b0>)
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f7f6 ff7a 	bl	8000648 <__aeabi_dmul>
 8009754:	a368      	add	r3, pc, #416	@ (adr r3, 80098f8 <_dtoa_r+0x2b8>)
 8009756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800975a:	f7f6 fdbf 	bl	80002dc <__adddf3>
 800975e:	4604      	mov	r4, r0
 8009760:	4630      	mov	r0, r6
 8009762:	460d      	mov	r5, r1
 8009764:	f7f6 ff06 	bl	8000574 <__aeabi_i2d>
 8009768:	a365      	add	r3, pc, #404	@ (adr r3, 8009900 <_dtoa_r+0x2c0>)
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	f7f6 ff6b 	bl	8000648 <__aeabi_dmul>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4620      	mov	r0, r4
 8009778:	4629      	mov	r1, r5
 800977a:	f7f6 fdaf 	bl	80002dc <__adddf3>
 800977e:	4604      	mov	r4, r0
 8009780:	460d      	mov	r5, r1
 8009782:	f7f7 fa11 	bl	8000ba8 <__aeabi_d2iz>
 8009786:	2200      	movs	r2, #0
 8009788:	4607      	mov	r7, r0
 800978a:	2300      	movs	r3, #0
 800978c:	4620      	mov	r0, r4
 800978e:	4629      	mov	r1, r5
 8009790:	f7f7 f9cc 	bl	8000b2c <__aeabi_dcmplt>
 8009794:	b140      	cbz	r0, 80097a8 <_dtoa_r+0x168>
 8009796:	4638      	mov	r0, r7
 8009798:	f7f6 feec 	bl	8000574 <__aeabi_i2d>
 800979c:	4622      	mov	r2, r4
 800979e:	462b      	mov	r3, r5
 80097a0:	f7f7 f9ba 	bl	8000b18 <__aeabi_dcmpeq>
 80097a4:	b900      	cbnz	r0, 80097a8 <_dtoa_r+0x168>
 80097a6:	3f01      	subs	r7, #1
 80097a8:	2f16      	cmp	r7, #22
 80097aa:	d851      	bhi.n	8009850 <_dtoa_r+0x210>
 80097ac:	4b5b      	ldr	r3, [pc, #364]	@ (800991c <_dtoa_r+0x2dc>)
 80097ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ba:	f7f7 f9b7 	bl	8000b2c <__aeabi_dcmplt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	d048      	beq.n	8009854 <_dtoa_r+0x214>
 80097c2:	3f01      	subs	r7, #1
 80097c4:	2300      	movs	r3, #0
 80097c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80097c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097ca:	1b9b      	subs	r3, r3, r6
 80097cc:	1e5a      	subs	r2, r3, #1
 80097ce:	bf44      	itt	mi
 80097d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80097d4:	2300      	movmi	r3, #0
 80097d6:	9208      	str	r2, [sp, #32]
 80097d8:	bf54      	ite	pl
 80097da:	f04f 0800 	movpl.w	r8, #0
 80097de:	9308      	strmi	r3, [sp, #32]
 80097e0:	2f00      	cmp	r7, #0
 80097e2:	db39      	blt.n	8009858 <_dtoa_r+0x218>
 80097e4:	9b08      	ldr	r3, [sp, #32]
 80097e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80097e8:	443b      	add	r3, r7
 80097ea:	9308      	str	r3, [sp, #32]
 80097ec:	2300      	movs	r3, #0
 80097ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80097f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097f2:	2b09      	cmp	r3, #9
 80097f4:	d864      	bhi.n	80098c0 <_dtoa_r+0x280>
 80097f6:	2b05      	cmp	r3, #5
 80097f8:	bfc4      	itt	gt
 80097fa:	3b04      	subgt	r3, #4
 80097fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80097fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009800:	f1a3 0302 	sub.w	r3, r3, #2
 8009804:	bfcc      	ite	gt
 8009806:	2400      	movgt	r4, #0
 8009808:	2401      	movle	r4, #1
 800980a:	2b03      	cmp	r3, #3
 800980c:	d863      	bhi.n	80098d6 <_dtoa_r+0x296>
 800980e:	e8df f003 	tbb	[pc, r3]
 8009812:	372a      	.short	0x372a
 8009814:	5535      	.short	0x5535
 8009816:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800981a:	441e      	add	r6, r3
 800981c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009820:	2b20      	cmp	r3, #32
 8009822:	bfc1      	itttt	gt
 8009824:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009828:	409f      	lslgt	r7, r3
 800982a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800982e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009832:	bfd6      	itet	le
 8009834:	f1c3 0320 	rsble	r3, r3, #32
 8009838:	ea47 0003 	orrgt.w	r0, r7, r3
 800983c:	fa04 f003 	lslle.w	r0, r4, r3
 8009840:	f7f6 fe88 	bl	8000554 <__aeabi_ui2d>
 8009844:	2201      	movs	r2, #1
 8009846:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800984a:	3e01      	subs	r6, #1
 800984c:	9214      	str	r2, [sp, #80]	@ 0x50
 800984e:	e777      	b.n	8009740 <_dtoa_r+0x100>
 8009850:	2301      	movs	r3, #1
 8009852:	e7b8      	b.n	80097c6 <_dtoa_r+0x186>
 8009854:	9012      	str	r0, [sp, #72]	@ 0x48
 8009856:	e7b7      	b.n	80097c8 <_dtoa_r+0x188>
 8009858:	427b      	negs	r3, r7
 800985a:	930a      	str	r3, [sp, #40]	@ 0x28
 800985c:	2300      	movs	r3, #0
 800985e:	eba8 0807 	sub.w	r8, r8, r7
 8009862:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009864:	e7c4      	b.n	80097f0 <_dtoa_r+0x1b0>
 8009866:	2300      	movs	r3, #0
 8009868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800986a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800986c:	2b00      	cmp	r3, #0
 800986e:	dc35      	bgt.n	80098dc <_dtoa_r+0x29c>
 8009870:	2301      	movs	r3, #1
 8009872:	9300      	str	r3, [sp, #0]
 8009874:	9307      	str	r3, [sp, #28]
 8009876:	461a      	mov	r2, r3
 8009878:	920e      	str	r2, [sp, #56]	@ 0x38
 800987a:	e00b      	b.n	8009894 <_dtoa_r+0x254>
 800987c:	2301      	movs	r3, #1
 800987e:	e7f3      	b.n	8009868 <_dtoa_r+0x228>
 8009880:	2300      	movs	r3, #0
 8009882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009886:	18fb      	adds	r3, r7, r3
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	3301      	adds	r3, #1
 800988c:	2b01      	cmp	r3, #1
 800988e:	9307      	str	r3, [sp, #28]
 8009890:	bfb8      	it	lt
 8009892:	2301      	movlt	r3, #1
 8009894:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009898:	2100      	movs	r1, #0
 800989a:	2204      	movs	r2, #4
 800989c:	f102 0514 	add.w	r5, r2, #20
 80098a0:	429d      	cmp	r5, r3
 80098a2:	d91f      	bls.n	80098e4 <_dtoa_r+0x2a4>
 80098a4:	6041      	str	r1, [r0, #4]
 80098a6:	4658      	mov	r0, fp
 80098a8:	f000 fd8e 	bl	800a3c8 <_Balloc>
 80098ac:	4682      	mov	sl, r0
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d13c      	bne.n	800992c <_dtoa_r+0x2ec>
 80098b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009920 <_dtoa_r+0x2e0>)
 80098b4:	4602      	mov	r2, r0
 80098b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80098ba:	e6d8      	b.n	800966e <_dtoa_r+0x2e>
 80098bc:	2301      	movs	r3, #1
 80098be:	e7e0      	b.n	8009882 <_dtoa_r+0x242>
 80098c0:	2401      	movs	r4, #1
 80098c2:	2300      	movs	r3, #0
 80098c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80098c8:	f04f 33ff 	mov.w	r3, #4294967295
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	9307      	str	r3, [sp, #28]
 80098d0:	2200      	movs	r2, #0
 80098d2:	2312      	movs	r3, #18
 80098d4:	e7d0      	b.n	8009878 <_dtoa_r+0x238>
 80098d6:	2301      	movs	r3, #1
 80098d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098da:	e7f5      	b.n	80098c8 <_dtoa_r+0x288>
 80098dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	9307      	str	r3, [sp, #28]
 80098e2:	e7d7      	b.n	8009894 <_dtoa_r+0x254>
 80098e4:	3101      	adds	r1, #1
 80098e6:	0052      	lsls	r2, r2, #1
 80098e8:	e7d8      	b.n	800989c <_dtoa_r+0x25c>
 80098ea:	bf00      	nop
 80098ec:	f3af 8000 	nop.w
 80098f0:	636f4361 	.word	0x636f4361
 80098f4:	3fd287a7 	.word	0x3fd287a7
 80098f8:	8b60c8b3 	.word	0x8b60c8b3
 80098fc:	3fc68a28 	.word	0x3fc68a28
 8009900:	509f79fb 	.word	0x509f79fb
 8009904:	3fd34413 	.word	0x3fd34413
 8009908:	0800d530 	.word	0x0800d530
 800990c:	0800d547 	.word	0x0800d547
 8009910:	7ff00000 	.word	0x7ff00000
 8009914:	0800d889 	.word	0x0800d889
 8009918:	3ff80000 	.word	0x3ff80000
 800991c:	0800d640 	.word	0x0800d640
 8009920:	0800d59f 	.word	0x0800d59f
 8009924:	0800d52c 	.word	0x0800d52c
 8009928:	0800d888 	.word	0x0800d888
 800992c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009930:	6018      	str	r0, [r3, #0]
 8009932:	9b07      	ldr	r3, [sp, #28]
 8009934:	2b0e      	cmp	r3, #14
 8009936:	f200 80a4 	bhi.w	8009a82 <_dtoa_r+0x442>
 800993a:	2c00      	cmp	r4, #0
 800993c:	f000 80a1 	beq.w	8009a82 <_dtoa_r+0x442>
 8009940:	2f00      	cmp	r7, #0
 8009942:	dd33      	ble.n	80099ac <_dtoa_r+0x36c>
 8009944:	4bad      	ldr	r3, [pc, #692]	@ (8009bfc <_dtoa_r+0x5bc>)
 8009946:	f007 020f 	and.w	r2, r7, #15
 800994a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800994e:	ed93 7b00 	vldr	d7, [r3]
 8009952:	05f8      	lsls	r0, r7, #23
 8009954:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009958:	ea4f 1427 	mov.w	r4, r7, asr #4
 800995c:	d516      	bpl.n	800998c <_dtoa_r+0x34c>
 800995e:	4ba8      	ldr	r3, [pc, #672]	@ (8009c00 <_dtoa_r+0x5c0>)
 8009960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009964:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009968:	f7f6 ff98 	bl	800089c <__aeabi_ddiv>
 800996c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009970:	f004 040f 	and.w	r4, r4, #15
 8009974:	2603      	movs	r6, #3
 8009976:	4da2      	ldr	r5, [pc, #648]	@ (8009c00 <_dtoa_r+0x5c0>)
 8009978:	b954      	cbnz	r4, 8009990 <_dtoa_r+0x350>
 800997a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800997e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009982:	f7f6 ff8b 	bl	800089c <__aeabi_ddiv>
 8009986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800998a:	e028      	b.n	80099de <_dtoa_r+0x39e>
 800998c:	2602      	movs	r6, #2
 800998e:	e7f2      	b.n	8009976 <_dtoa_r+0x336>
 8009990:	07e1      	lsls	r1, r4, #31
 8009992:	d508      	bpl.n	80099a6 <_dtoa_r+0x366>
 8009994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800999c:	f7f6 fe54 	bl	8000648 <__aeabi_dmul>
 80099a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099a4:	3601      	adds	r6, #1
 80099a6:	1064      	asrs	r4, r4, #1
 80099a8:	3508      	adds	r5, #8
 80099aa:	e7e5      	b.n	8009978 <_dtoa_r+0x338>
 80099ac:	f000 80d2 	beq.w	8009b54 <_dtoa_r+0x514>
 80099b0:	427c      	negs	r4, r7
 80099b2:	4b92      	ldr	r3, [pc, #584]	@ (8009bfc <_dtoa_r+0x5bc>)
 80099b4:	4d92      	ldr	r5, [pc, #584]	@ (8009c00 <_dtoa_r+0x5c0>)
 80099b6:	f004 020f 	and.w	r2, r4, #15
 80099ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099c6:	f7f6 fe3f 	bl	8000648 <__aeabi_dmul>
 80099ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ce:	1124      	asrs	r4, r4, #4
 80099d0:	2300      	movs	r3, #0
 80099d2:	2602      	movs	r6, #2
 80099d4:	2c00      	cmp	r4, #0
 80099d6:	f040 80b2 	bne.w	8009b3e <_dtoa_r+0x4fe>
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1d3      	bne.n	8009986 <_dtoa_r+0x346>
 80099de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	f000 80b7 	beq.w	8009b58 <_dtoa_r+0x518>
 80099ea:	4b86      	ldr	r3, [pc, #536]	@ (8009c04 <_dtoa_r+0x5c4>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f7 f89b 	bl	8000b2c <__aeabi_dcmplt>
 80099f6:	2800      	cmp	r0, #0
 80099f8:	f000 80ae 	beq.w	8009b58 <_dtoa_r+0x518>
 80099fc:	9b07      	ldr	r3, [sp, #28]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f000 80aa 	beq.w	8009b58 <_dtoa_r+0x518>
 8009a04:	9b00      	ldr	r3, [sp, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	dd37      	ble.n	8009a7a <_dtoa_r+0x43a>
 8009a0a:	1e7b      	subs	r3, r7, #1
 8009a0c:	9304      	str	r3, [sp, #16]
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4b7d      	ldr	r3, [pc, #500]	@ (8009c08 <_dtoa_r+0x5c8>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fe17 	bl	8000648 <__aeabi_dmul>
 8009a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a1e:	9c00      	ldr	r4, [sp, #0]
 8009a20:	3601      	adds	r6, #1
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7f6 fda6 	bl	8000574 <__aeabi_i2d>
 8009a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a2c:	f7f6 fe0c 	bl	8000648 <__aeabi_dmul>
 8009a30:	4b76      	ldr	r3, [pc, #472]	@ (8009c0c <_dtoa_r+0x5cc>)
 8009a32:	2200      	movs	r2, #0
 8009a34:	f7f6 fc52 	bl	80002dc <__adddf3>
 8009a38:	4605      	mov	r5, r0
 8009a3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a3e:	2c00      	cmp	r4, #0
 8009a40:	f040 808d 	bne.w	8009b5e <_dtoa_r+0x51e>
 8009a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a48:	4b71      	ldr	r3, [pc, #452]	@ (8009c10 <_dtoa_r+0x5d0>)
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f7f6 fc44 	bl	80002d8 <__aeabi_dsub>
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a58:	462a      	mov	r2, r5
 8009a5a:	4633      	mov	r3, r6
 8009a5c:	f7f7 f884 	bl	8000b68 <__aeabi_dcmpgt>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	f040 828b 	bne.w	8009f7c <_dtoa_r+0x93c>
 8009a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a70:	f7f7 f85c 	bl	8000b2c <__aeabi_dcmplt>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f040 8128 	bne.w	8009cca <_dtoa_r+0x68a>
 8009a7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009a7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	f2c0 815a 	blt.w	8009d3e <_dtoa_r+0x6fe>
 8009a8a:	2f0e      	cmp	r7, #14
 8009a8c:	f300 8157 	bgt.w	8009d3e <_dtoa_r+0x6fe>
 8009a90:	4b5a      	ldr	r3, [pc, #360]	@ (8009bfc <_dtoa_r+0x5bc>)
 8009a92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a96:	ed93 7b00 	vldr	d7, [r3]
 8009a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	ed8d 7b00 	vstr	d7, [sp]
 8009aa2:	da03      	bge.n	8009aac <_dtoa_r+0x46c>
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	f340 8101 	ble.w	8009cae <_dtoa_r+0x66e>
 8009aac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ab0:	4656      	mov	r6, sl
 8009ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	4629      	mov	r1, r5
 8009aba:	f7f6 feef 	bl	800089c <__aeabi_ddiv>
 8009abe:	f7f7 f873 	bl	8000ba8 <__aeabi_d2iz>
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	f7f6 fd56 	bl	8000574 <__aeabi_i2d>
 8009ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009acc:	f7f6 fdbc 	bl	8000648 <__aeabi_dmul>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	4629      	mov	r1, r5
 8009ad8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009adc:	f7f6 fbfc 	bl	80002d8 <__aeabi_dsub>
 8009ae0:	f806 4b01 	strb.w	r4, [r6], #1
 8009ae4:	9d07      	ldr	r5, [sp, #28]
 8009ae6:	eba6 040a 	sub.w	r4, r6, sl
 8009aea:	42a5      	cmp	r5, r4
 8009aec:	4602      	mov	r2, r0
 8009aee:	460b      	mov	r3, r1
 8009af0:	f040 8117 	bne.w	8009d22 <_dtoa_r+0x6e2>
 8009af4:	f7f6 fbf2 	bl	80002dc <__adddf3>
 8009af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009afc:	4604      	mov	r4, r0
 8009afe:	460d      	mov	r5, r1
 8009b00:	f7f7 f832 	bl	8000b68 <__aeabi_dcmpgt>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	f040 80f9 	bne.w	8009cfc <_dtoa_r+0x6bc>
 8009b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b0e:	4620      	mov	r0, r4
 8009b10:	4629      	mov	r1, r5
 8009b12:	f7f7 f801 	bl	8000b18 <__aeabi_dcmpeq>
 8009b16:	b118      	cbz	r0, 8009b20 <_dtoa_r+0x4e0>
 8009b18:	f018 0f01 	tst.w	r8, #1
 8009b1c:	f040 80ee 	bne.w	8009cfc <_dtoa_r+0x6bc>
 8009b20:	4649      	mov	r1, r9
 8009b22:	4658      	mov	r0, fp
 8009b24:	f000 fc90 	bl	800a448 <_Bfree>
 8009b28:	2300      	movs	r3, #0
 8009b2a:	7033      	strb	r3, [r6, #0]
 8009b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b2e:	3701      	adds	r7, #1
 8009b30:	601f      	str	r7, [r3, #0]
 8009b32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	f000 831d 	beq.w	800a174 <_dtoa_r+0xb34>
 8009b3a:	601e      	str	r6, [r3, #0]
 8009b3c:	e31a      	b.n	800a174 <_dtoa_r+0xb34>
 8009b3e:	07e2      	lsls	r2, r4, #31
 8009b40:	d505      	bpl.n	8009b4e <_dtoa_r+0x50e>
 8009b42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b46:	f7f6 fd7f 	bl	8000648 <__aeabi_dmul>
 8009b4a:	3601      	adds	r6, #1
 8009b4c:	2301      	movs	r3, #1
 8009b4e:	1064      	asrs	r4, r4, #1
 8009b50:	3508      	adds	r5, #8
 8009b52:	e73f      	b.n	80099d4 <_dtoa_r+0x394>
 8009b54:	2602      	movs	r6, #2
 8009b56:	e742      	b.n	80099de <_dtoa_r+0x39e>
 8009b58:	9c07      	ldr	r4, [sp, #28]
 8009b5a:	9704      	str	r7, [sp, #16]
 8009b5c:	e761      	b.n	8009a22 <_dtoa_r+0x3e2>
 8009b5e:	4b27      	ldr	r3, [pc, #156]	@ (8009bfc <_dtoa_r+0x5bc>)
 8009b60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b6a:	4454      	add	r4, sl
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d053      	beq.n	8009c18 <_dtoa_r+0x5d8>
 8009b70:	4928      	ldr	r1, [pc, #160]	@ (8009c14 <_dtoa_r+0x5d4>)
 8009b72:	2000      	movs	r0, #0
 8009b74:	f7f6 fe92 	bl	800089c <__aeabi_ddiv>
 8009b78:	4633      	mov	r3, r6
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	f7f6 fbac 	bl	80002d8 <__aeabi_dsub>
 8009b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b84:	4656      	mov	r6, sl
 8009b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b8a:	f7f7 f80d 	bl	8000ba8 <__aeabi_d2iz>
 8009b8e:	4605      	mov	r5, r0
 8009b90:	f7f6 fcf0 	bl	8000574 <__aeabi_i2d>
 8009b94:	4602      	mov	r2, r0
 8009b96:	460b      	mov	r3, r1
 8009b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9c:	f7f6 fb9c 	bl	80002d8 <__aeabi_dsub>
 8009ba0:	3530      	adds	r5, #48	@ 0x30
 8009ba2:	4602      	mov	r2, r0
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009baa:	f806 5b01 	strb.w	r5, [r6], #1
 8009bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bb2:	f7f6 ffbb 	bl	8000b2c <__aeabi_dcmplt>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d171      	bne.n	8009c9e <_dtoa_r+0x65e>
 8009bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bbe:	4911      	ldr	r1, [pc, #68]	@ (8009c04 <_dtoa_r+0x5c4>)
 8009bc0:	2000      	movs	r0, #0
 8009bc2:	f7f6 fb89 	bl	80002d8 <__aeabi_dsub>
 8009bc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bca:	f7f6 ffaf 	bl	8000b2c <__aeabi_dcmplt>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	f040 8095 	bne.w	8009cfe <_dtoa_r+0x6be>
 8009bd4:	42a6      	cmp	r6, r4
 8009bd6:	f43f af50 	beq.w	8009a7a <_dtoa_r+0x43a>
 8009bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bde:	4b0a      	ldr	r3, [pc, #40]	@ (8009c08 <_dtoa_r+0x5c8>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	f7f6 fd31 	bl	8000648 <__aeabi_dmul>
 8009be6:	4b08      	ldr	r3, [pc, #32]	@ (8009c08 <_dtoa_r+0x5c8>)
 8009be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bec:	2200      	movs	r2, #0
 8009bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bf2:	f7f6 fd29 	bl	8000648 <__aeabi_dmul>
 8009bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bfa:	e7c4      	b.n	8009b86 <_dtoa_r+0x546>
 8009bfc:	0800d640 	.word	0x0800d640
 8009c00:	0800d618 	.word	0x0800d618
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	40240000 	.word	0x40240000
 8009c0c:	401c0000 	.word	0x401c0000
 8009c10:	40140000 	.word	0x40140000
 8009c14:	3fe00000 	.word	0x3fe00000
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	f7f6 fd14 	bl	8000648 <__aeabi_dmul>
 8009c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c24:	9415      	str	r4, [sp, #84]	@ 0x54
 8009c26:	4656      	mov	r6, sl
 8009c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c2c:	f7f6 ffbc 	bl	8000ba8 <__aeabi_d2iz>
 8009c30:	4605      	mov	r5, r0
 8009c32:	f7f6 fc9f 	bl	8000574 <__aeabi_i2d>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c3e:	f7f6 fb4b 	bl	80002d8 <__aeabi_dsub>
 8009c42:	3530      	adds	r5, #48	@ 0x30
 8009c44:	f806 5b01 	strb.w	r5, [r6], #1
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	42a6      	cmp	r6, r4
 8009c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c52:	f04f 0200 	mov.w	r2, #0
 8009c56:	d124      	bne.n	8009ca2 <_dtoa_r+0x662>
 8009c58:	4bac      	ldr	r3, [pc, #688]	@ (8009f0c <_dtoa_r+0x8cc>)
 8009c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c5e:	f7f6 fb3d 	bl	80002dc <__adddf3>
 8009c62:	4602      	mov	r2, r0
 8009c64:	460b      	mov	r3, r1
 8009c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c6a:	f7f6 ff7d 	bl	8000b68 <__aeabi_dcmpgt>
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d145      	bne.n	8009cfe <_dtoa_r+0x6be>
 8009c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c76:	49a5      	ldr	r1, [pc, #660]	@ (8009f0c <_dtoa_r+0x8cc>)
 8009c78:	2000      	movs	r0, #0
 8009c7a:	f7f6 fb2d 	bl	80002d8 <__aeabi_dsub>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c86:	f7f6 ff51 	bl	8000b2c <__aeabi_dcmplt>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	f43f aef5 	beq.w	8009a7a <_dtoa_r+0x43a>
 8009c90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009c92:	1e73      	subs	r3, r6, #1
 8009c94:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c9a:	2b30      	cmp	r3, #48	@ 0x30
 8009c9c:	d0f8      	beq.n	8009c90 <_dtoa_r+0x650>
 8009c9e:	9f04      	ldr	r7, [sp, #16]
 8009ca0:	e73e      	b.n	8009b20 <_dtoa_r+0x4e0>
 8009ca2:	4b9b      	ldr	r3, [pc, #620]	@ (8009f10 <_dtoa_r+0x8d0>)
 8009ca4:	f7f6 fcd0 	bl	8000648 <__aeabi_dmul>
 8009ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cac:	e7bc      	b.n	8009c28 <_dtoa_r+0x5e8>
 8009cae:	d10c      	bne.n	8009cca <_dtoa_r+0x68a>
 8009cb0:	4b98      	ldr	r3, [pc, #608]	@ (8009f14 <_dtoa_r+0x8d4>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cb8:	f7f6 fcc6 	bl	8000648 <__aeabi_dmul>
 8009cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cc0:	f7f6 ff48 	bl	8000b54 <__aeabi_dcmpge>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f000 8157 	beq.w	8009f78 <_dtoa_r+0x938>
 8009cca:	2400      	movs	r4, #0
 8009ccc:	4625      	mov	r5, r4
 8009cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009cd0:	43db      	mvns	r3, r3
 8009cd2:	9304      	str	r3, [sp, #16]
 8009cd4:	4656      	mov	r6, sl
 8009cd6:	2700      	movs	r7, #0
 8009cd8:	4621      	mov	r1, r4
 8009cda:	4658      	mov	r0, fp
 8009cdc:	f000 fbb4 	bl	800a448 <_Bfree>
 8009ce0:	2d00      	cmp	r5, #0
 8009ce2:	d0dc      	beq.n	8009c9e <_dtoa_r+0x65e>
 8009ce4:	b12f      	cbz	r7, 8009cf2 <_dtoa_r+0x6b2>
 8009ce6:	42af      	cmp	r7, r5
 8009ce8:	d003      	beq.n	8009cf2 <_dtoa_r+0x6b2>
 8009cea:	4639      	mov	r1, r7
 8009cec:	4658      	mov	r0, fp
 8009cee:	f000 fbab 	bl	800a448 <_Bfree>
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	4658      	mov	r0, fp
 8009cf6:	f000 fba7 	bl	800a448 <_Bfree>
 8009cfa:	e7d0      	b.n	8009c9e <_dtoa_r+0x65e>
 8009cfc:	9704      	str	r7, [sp, #16]
 8009cfe:	4633      	mov	r3, r6
 8009d00:	461e      	mov	r6, r3
 8009d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d06:	2a39      	cmp	r2, #57	@ 0x39
 8009d08:	d107      	bne.n	8009d1a <_dtoa_r+0x6da>
 8009d0a:	459a      	cmp	sl, r3
 8009d0c:	d1f8      	bne.n	8009d00 <_dtoa_r+0x6c0>
 8009d0e:	9a04      	ldr	r2, [sp, #16]
 8009d10:	3201      	adds	r2, #1
 8009d12:	9204      	str	r2, [sp, #16]
 8009d14:	2230      	movs	r2, #48	@ 0x30
 8009d16:	f88a 2000 	strb.w	r2, [sl]
 8009d1a:	781a      	ldrb	r2, [r3, #0]
 8009d1c:	3201      	adds	r2, #1
 8009d1e:	701a      	strb	r2, [r3, #0]
 8009d20:	e7bd      	b.n	8009c9e <_dtoa_r+0x65e>
 8009d22:	4b7b      	ldr	r3, [pc, #492]	@ (8009f10 <_dtoa_r+0x8d0>)
 8009d24:	2200      	movs	r2, #0
 8009d26:	f7f6 fc8f 	bl	8000648 <__aeabi_dmul>
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	460d      	mov	r5, r1
 8009d32:	f7f6 fef1 	bl	8000b18 <__aeabi_dcmpeq>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	f43f aebb 	beq.w	8009ab2 <_dtoa_r+0x472>
 8009d3c:	e6f0      	b.n	8009b20 <_dtoa_r+0x4e0>
 8009d3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d40:	2a00      	cmp	r2, #0
 8009d42:	f000 80db 	beq.w	8009efc <_dtoa_r+0x8bc>
 8009d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d48:	2a01      	cmp	r2, #1
 8009d4a:	f300 80bf 	bgt.w	8009ecc <_dtoa_r+0x88c>
 8009d4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009d50:	2a00      	cmp	r2, #0
 8009d52:	f000 80b7 	beq.w	8009ec4 <_dtoa_r+0x884>
 8009d56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d5c:	4646      	mov	r6, r8
 8009d5e:	9a08      	ldr	r2, [sp, #32]
 8009d60:	2101      	movs	r1, #1
 8009d62:	441a      	add	r2, r3
 8009d64:	4658      	mov	r0, fp
 8009d66:	4498      	add	r8, r3
 8009d68:	9208      	str	r2, [sp, #32]
 8009d6a:	f000 fc6b 	bl	800a644 <__i2b>
 8009d6e:	4605      	mov	r5, r0
 8009d70:	b15e      	cbz	r6, 8009d8a <_dtoa_r+0x74a>
 8009d72:	9b08      	ldr	r3, [sp, #32]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	dd08      	ble.n	8009d8a <_dtoa_r+0x74a>
 8009d78:	42b3      	cmp	r3, r6
 8009d7a:	9a08      	ldr	r2, [sp, #32]
 8009d7c:	bfa8      	it	ge
 8009d7e:	4633      	movge	r3, r6
 8009d80:	eba8 0803 	sub.w	r8, r8, r3
 8009d84:	1af6      	subs	r6, r6, r3
 8009d86:	1ad3      	subs	r3, r2, r3
 8009d88:	9308      	str	r3, [sp, #32]
 8009d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d8c:	b1f3      	cbz	r3, 8009dcc <_dtoa_r+0x78c>
 8009d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f000 80b7 	beq.w	8009f04 <_dtoa_r+0x8c4>
 8009d96:	b18c      	cbz	r4, 8009dbc <_dtoa_r+0x77c>
 8009d98:	4629      	mov	r1, r5
 8009d9a:	4622      	mov	r2, r4
 8009d9c:	4658      	mov	r0, fp
 8009d9e:	f000 fd11 	bl	800a7c4 <__pow5mult>
 8009da2:	464a      	mov	r2, r9
 8009da4:	4601      	mov	r1, r0
 8009da6:	4605      	mov	r5, r0
 8009da8:	4658      	mov	r0, fp
 8009daa:	f000 fc61 	bl	800a670 <__multiply>
 8009dae:	4649      	mov	r1, r9
 8009db0:	9004      	str	r0, [sp, #16]
 8009db2:	4658      	mov	r0, fp
 8009db4:	f000 fb48 	bl	800a448 <_Bfree>
 8009db8:	9b04      	ldr	r3, [sp, #16]
 8009dba:	4699      	mov	r9, r3
 8009dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dbe:	1b1a      	subs	r2, r3, r4
 8009dc0:	d004      	beq.n	8009dcc <_dtoa_r+0x78c>
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4658      	mov	r0, fp
 8009dc6:	f000 fcfd 	bl	800a7c4 <__pow5mult>
 8009dca:	4681      	mov	r9, r0
 8009dcc:	2101      	movs	r1, #1
 8009dce:	4658      	mov	r0, fp
 8009dd0:	f000 fc38 	bl	800a644 <__i2b>
 8009dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 81cf 	beq.w	800a17c <_dtoa_r+0xb3c>
 8009dde:	461a      	mov	r2, r3
 8009de0:	4601      	mov	r1, r0
 8009de2:	4658      	mov	r0, fp
 8009de4:	f000 fcee 	bl	800a7c4 <__pow5mult>
 8009de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	4604      	mov	r4, r0
 8009dee:	f300 8095 	bgt.w	8009f1c <_dtoa_r+0x8dc>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f040 8087 	bne.w	8009f08 <_dtoa_r+0x8c8>
 8009dfa:	9b03      	ldr	r3, [sp, #12]
 8009dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	f040 8089 	bne.w	8009f18 <_dtoa_r+0x8d8>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e0c:	0d1b      	lsrs	r3, r3, #20
 8009e0e:	051b      	lsls	r3, r3, #20
 8009e10:	b12b      	cbz	r3, 8009e1e <_dtoa_r+0x7de>
 8009e12:	9b08      	ldr	r3, [sp, #32]
 8009e14:	3301      	adds	r3, #1
 8009e16:	9308      	str	r3, [sp, #32]
 8009e18:	f108 0801 	add.w	r8, r8, #1
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f000 81b0 	beq.w	800a188 <_dtoa_r+0xb48>
 8009e28:	6923      	ldr	r3, [r4, #16]
 8009e2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e2e:	6918      	ldr	r0, [r3, #16]
 8009e30:	f000 fbbc 	bl	800a5ac <__hi0bits>
 8009e34:	f1c0 0020 	rsb	r0, r0, #32
 8009e38:	9b08      	ldr	r3, [sp, #32]
 8009e3a:	4418      	add	r0, r3
 8009e3c:	f010 001f 	ands.w	r0, r0, #31
 8009e40:	d077      	beq.n	8009f32 <_dtoa_r+0x8f2>
 8009e42:	f1c0 0320 	rsb	r3, r0, #32
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	dd6b      	ble.n	8009f22 <_dtoa_r+0x8e2>
 8009e4a:	9b08      	ldr	r3, [sp, #32]
 8009e4c:	f1c0 001c 	rsb	r0, r0, #28
 8009e50:	4403      	add	r3, r0
 8009e52:	4480      	add	r8, r0
 8009e54:	4406      	add	r6, r0
 8009e56:	9308      	str	r3, [sp, #32]
 8009e58:	f1b8 0f00 	cmp.w	r8, #0
 8009e5c:	dd05      	ble.n	8009e6a <_dtoa_r+0x82a>
 8009e5e:	4649      	mov	r1, r9
 8009e60:	4642      	mov	r2, r8
 8009e62:	4658      	mov	r0, fp
 8009e64:	f000 fd08 	bl	800a878 <__lshift>
 8009e68:	4681      	mov	r9, r0
 8009e6a:	9b08      	ldr	r3, [sp, #32]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	dd05      	ble.n	8009e7c <_dtoa_r+0x83c>
 8009e70:	4621      	mov	r1, r4
 8009e72:	461a      	mov	r2, r3
 8009e74:	4658      	mov	r0, fp
 8009e76:	f000 fcff 	bl	800a878 <__lshift>
 8009e7a:	4604      	mov	r4, r0
 8009e7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d059      	beq.n	8009f36 <_dtoa_r+0x8f6>
 8009e82:	4621      	mov	r1, r4
 8009e84:	4648      	mov	r0, r9
 8009e86:	f000 fd63 	bl	800a950 <__mcmp>
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	da53      	bge.n	8009f36 <_dtoa_r+0x8f6>
 8009e8e:	1e7b      	subs	r3, r7, #1
 8009e90:	9304      	str	r3, [sp, #16]
 8009e92:	4649      	mov	r1, r9
 8009e94:	2300      	movs	r3, #0
 8009e96:	220a      	movs	r2, #10
 8009e98:	4658      	mov	r0, fp
 8009e9a:	f000 faf7 	bl	800a48c <__multadd>
 8009e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ea0:	4681      	mov	r9, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f000 8172 	beq.w	800a18c <_dtoa_r+0xb4c>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4629      	mov	r1, r5
 8009eac:	220a      	movs	r2, #10
 8009eae:	4658      	mov	r0, fp
 8009eb0:	f000 faec 	bl	800a48c <__multadd>
 8009eb4:	9b00      	ldr	r3, [sp, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	4605      	mov	r5, r0
 8009eba:	dc67      	bgt.n	8009f8c <_dtoa_r+0x94c>
 8009ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	dc41      	bgt.n	8009f46 <_dtoa_r+0x906>
 8009ec2:	e063      	b.n	8009f8c <_dtoa_r+0x94c>
 8009ec4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ec6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009eca:	e746      	b.n	8009d5a <_dtoa_r+0x71a>
 8009ecc:	9b07      	ldr	r3, [sp, #28]
 8009ece:	1e5c      	subs	r4, r3, #1
 8009ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ed2:	42a3      	cmp	r3, r4
 8009ed4:	bfbf      	itttt	lt
 8009ed6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ed8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009eda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009edc:	1ae3      	sublt	r3, r4, r3
 8009ede:	bfb4      	ite	lt
 8009ee0:	18d2      	addlt	r2, r2, r3
 8009ee2:	1b1c      	subge	r4, r3, r4
 8009ee4:	9b07      	ldr	r3, [sp, #28]
 8009ee6:	bfbc      	itt	lt
 8009ee8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009eea:	2400      	movlt	r4, #0
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bfb5      	itete	lt
 8009ef0:	eba8 0603 	sublt.w	r6, r8, r3
 8009ef4:	9b07      	ldrge	r3, [sp, #28]
 8009ef6:	2300      	movlt	r3, #0
 8009ef8:	4646      	movge	r6, r8
 8009efa:	e730      	b.n	8009d5e <_dtoa_r+0x71e>
 8009efc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009efe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f00:	4646      	mov	r6, r8
 8009f02:	e735      	b.n	8009d70 <_dtoa_r+0x730>
 8009f04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f06:	e75c      	b.n	8009dc2 <_dtoa_r+0x782>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e788      	b.n	8009e1e <_dtoa_r+0x7de>
 8009f0c:	3fe00000 	.word	0x3fe00000
 8009f10:	40240000 	.word	0x40240000
 8009f14:	40140000 	.word	0x40140000
 8009f18:	9b02      	ldr	r3, [sp, #8]
 8009f1a:	e780      	b.n	8009e1e <_dtoa_r+0x7de>
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f20:	e782      	b.n	8009e28 <_dtoa_r+0x7e8>
 8009f22:	d099      	beq.n	8009e58 <_dtoa_r+0x818>
 8009f24:	9a08      	ldr	r2, [sp, #32]
 8009f26:	331c      	adds	r3, #28
 8009f28:	441a      	add	r2, r3
 8009f2a:	4498      	add	r8, r3
 8009f2c:	441e      	add	r6, r3
 8009f2e:	9208      	str	r2, [sp, #32]
 8009f30:	e792      	b.n	8009e58 <_dtoa_r+0x818>
 8009f32:	4603      	mov	r3, r0
 8009f34:	e7f6      	b.n	8009f24 <_dtoa_r+0x8e4>
 8009f36:	9b07      	ldr	r3, [sp, #28]
 8009f38:	9704      	str	r7, [sp, #16]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	dc20      	bgt.n	8009f80 <_dtoa_r+0x940>
 8009f3e:	9300      	str	r3, [sp, #0]
 8009f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	dd1e      	ble.n	8009f84 <_dtoa_r+0x944>
 8009f46:	9b00      	ldr	r3, [sp, #0]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f47f aec0 	bne.w	8009cce <_dtoa_r+0x68e>
 8009f4e:	4621      	mov	r1, r4
 8009f50:	2205      	movs	r2, #5
 8009f52:	4658      	mov	r0, fp
 8009f54:	f000 fa9a 	bl	800a48c <__multadd>
 8009f58:	4601      	mov	r1, r0
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	4648      	mov	r0, r9
 8009f5e:	f000 fcf7 	bl	800a950 <__mcmp>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	f77f aeb3 	ble.w	8009cce <_dtoa_r+0x68e>
 8009f68:	4656      	mov	r6, sl
 8009f6a:	2331      	movs	r3, #49	@ 0x31
 8009f6c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f70:	9b04      	ldr	r3, [sp, #16]
 8009f72:	3301      	adds	r3, #1
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	e6ae      	b.n	8009cd6 <_dtoa_r+0x696>
 8009f78:	9c07      	ldr	r4, [sp, #28]
 8009f7a:	9704      	str	r7, [sp, #16]
 8009f7c:	4625      	mov	r5, r4
 8009f7e:	e7f3      	b.n	8009f68 <_dtoa_r+0x928>
 8009f80:	9b07      	ldr	r3, [sp, #28]
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 8104 	beq.w	800a194 <_dtoa_r+0xb54>
 8009f8c:	2e00      	cmp	r6, #0
 8009f8e:	dd05      	ble.n	8009f9c <_dtoa_r+0x95c>
 8009f90:	4629      	mov	r1, r5
 8009f92:	4632      	mov	r2, r6
 8009f94:	4658      	mov	r0, fp
 8009f96:	f000 fc6f 	bl	800a878 <__lshift>
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d05a      	beq.n	800a058 <_dtoa_r+0xa18>
 8009fa2:	6869      	ldr	r1, [r5, #4]
 8009fa4:	4658      	mov	r0, fp
 8009fa6:	f000 fa0f 	bl	800a3c8 <_Balloc>
 8009faa:	4606      	mov	r6, r0
 8009fac:	b928      	cbnz	r0, 8009fba <_dtoa_r+0x97a>
 8009fae:	4b84      	ldr	r3, [pc, #528]	@ (800a1c0 <_dtoa_r+0xb80>)
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fb6:	f7ff bb5a 	b.w	800966e <_dtoa_r+0x2e>
 8009fba:	692a      	ldr	r2, [r5, #16]
 8009fbc:	3202      	adds	r2, #2
 8009fbe:	0092      	lsls	r2, r2, #2
 8009fc0:	f105 010c 	add.w	r1, r5, #12
 8009fc4:	300c      	adds	r0, #12
 8009fc6:	f7ff fa9c 	bl	8009502 <memcpy>
 8009fca:	2201      	movs	r2, #1
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4658      	mov	r0, fp
 8009fd0:	f000 fc52 	bl	800a878 <__lshift>
 8009fd4:	f10a 0301 	add.w	r3, sl, #1
 8009fd8:	9307      	str	r3, [sp, #28]
 8009fda:	9b00      	ldr	r3, [sp, #0]
 8009fdc:	4453      	add	r3, sl
 8009fde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fe0:	9b02      	ldr	r3, [sp, #8]
 8009fe2:	f003 0301 	and.w	r3, r3, #1
 8009fe6:	462f      	mov	r7, r5
 8009fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009fea:	4605      	mov	r5, r0
 8009fec:	9b07      	ldr	r3, [sp, #28]
 8009fee:	4621      	mov	r1, r4
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	4648      	mov	r0, r9
 8009ff4:	9300      	str	r3, [sp, #0]
 8009ff6:	f7ff fa99 	bl	800952c <quorem>
 8009ffa:	4639      	mov	r1, r7
 8009ffc:	9002      	str	r0, [sp, #8]
 8009ffe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a002:	4648      	mov	r0, r9
 800a004:	f000 fca4 	bl	800a950 <__mcmp>
 800a008:	462a      	mov	r2, r5
 800a00a:	9008      	str	r0, [sp, #32]
 800a00c:	4621      	mov	r1, r4
 800a00e:	4658      	mov	r0, fp
 800a010:	f000 fcba 	bl	800a988 <__mdiff>
 800a014:	68c2      	ldr	r2, [r0, #12]
 800a016:	4606      	mov	r6, r0
 800a018:	bb02      	cbnz	r2, 800a05c <_dtoa_r+0xa1c>
 800a01a:	4601      	mov	r1, r0
 800a01c:	4648      	mov	r0, r9
 800a01e:	f000 fc97 	bl	800a950 <__mcmp>
 800a022:	4602      	mov	r2, r0
 800a024:	4631      	mov	r1, r6
 800a026:	4658      	mov	r0, fp
 800a028:	920e      	str	r2, [sp, #56]	@ 0x38
 800a02a:	f000 fa0d 	bl	800a448 <_Bfree>
 800a02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a032:	9e07      	ldr	r6, [sp, #28]
 800a034:	ea43 0102 	orr.w	r1, r3, r2
 800a038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a03a:	4319      	orrs	r1, r3
 800a03c:	d110      	bne.n	800a060 <_dtoa_r+0xa20>
 800a03e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a042:	d029      	beq.n	800a098 <_dtoa_r+0xa58>
 800a044:	9b08      	ldr	r3, [sp, #32]
 800a046:	2b00      	cmp	r3, #0
 800a048:	dd02      	ble.n	800a050 <_dtoa_r+0xa10>
 800a04a:	9b02      	ldr	r3, [sp, #8]
 800a04c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a050:	9b00      	ldr	r3, [sp, #0]
 800a052:	f883 8000 	strb.w	r8, [r3]
 800a056:	e63f      	b.n	8009cd8 <_dtoa_r+0x698>
 800a058:	4628      	mov	r0, r5
 800a05a:	e7bb      	b.n	8009fd4 <_dtoa_r+0x994>
 800a05c:	2201      	movs	r2, #1
 800a05e:	e7e1      	b.n	800a024 <_dtoa_r+0x9e4>
 800a060:	9b08      	ldr	r3, [sp, #32]
 800a062:	2b00      	cmp	r3, #0
 800a064:	db04      	blt.n	800a070 <_dtoa_r+0xa30>
 800a066:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a068:	430b      	orrs	r3, r1
 800a06a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a06c:	430b      	orrs	r3, r1
 800a06e:	d120      	bne.n	800a0b2 <_dtoa_r+0xa72>
 800a070:	2a00      	cmp	r2, #0
 800a072:	dded      	ble.n	800a050 <_dtoa_r+0xa10>
 800a074:	4649      	mov	r1, r9
 800a076:	2201      	movs	r2, #1
 800a078:	4658      	mov	r0, fp
 800a07a:	f000 fbfd 	bl	800a878 <__lshift>
 800a07e:	4621      	mov	r1, r4
 800a080:	4681      	mov	r9, r0
 800a082:	f000 fc65 	bl	800a950 <__mcmp>
 800a086:	2800      	cmp	r0, #0
 800a088:	dc03      	bgt.n	800a092 <_dtoa_r+0xa52>
 800a08a:	d1e1      	bne.n	800a050 <_dtoa_r+0xa10>
 800a08c:	f018 0f01 	tst.w	r8, #1
 800a090:	d0de      	beq.n	800a050 <_dtoa_r+0xa10>
 800a092:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a096:	d1d8      	bne.n	800a04a <_dtoa_r+0xa0a>
 800a098:	9a00      	ldr	r2, [sp, #0]
 800a09a:	2339      	movs	r3, #57	@ 0x39
 800a09c:	7013      	strb	r3, [r2, #0]
 800a09e:	4633      	mov	r3, r6
 800a0a0:	461e      	mov	r6, r3
 800a0a2:	3b01      	subs	r3, #1
 800a0a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0a8:	2a39      	cmp	r2, #57	@ 0x39
 800a0aa:	d052      	beq.n	800a152 <_dtoa_r+0xb12>
 800a0ac:	3201      	adds	r2, #1
 800a0ae:	701a      	strb	r2, [r3, #0]
 800a0b0:	e612      	b.n	8009cd8 <_dtoa_r+0x698>
 800a0b2:	2a00      	cmp	r2, #0
 800a0b4:	dd07      	ble.n	800a0c6 <_dtoa_r+0xa86>
 800a0b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0ba:	d0ed      	beq.n	800a098 <_dtoa_r+0xa58>
 800a0bc:	9a00      	ldr	r2, [sp, #0]
 800a0be:	f108 0301 	add.w	r3, r8, #1
 800a0c2:	7013      	strb	r3, [r2, #0]
 800a0c4:	e608      	b.n	8009cd8 <_dtoa_r+0x698>
 800a0c6:	9b07      	ldr	r3, [sp, #28]
 800a0c8:	9a07      	ldr	r2, [sp, #28]
 800a0ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a0ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d028      	beq.n	800a126 <_dtoa_r+0xae6>
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	220a      	movs	r2, #10
 800a0da:	4658      	mov	r0, fp
 800a0dc:	f000 f9d6 	bl	800a48c <__multadd>
 800a0e0:	42af      	cmp	r7, r5
 800a0e2:	4681      	mov	r9, r0
 800a0e4:	f04f 0300 	mov.w	r3, #0
 800a0e8:	f04f 020a 	mov.w	r2, #10
 800a0ec:	4639      	mov	r1, r7
 800a0ee:	4658      	mov	r0, fp
 800a0f0:	d107      	bne.n	800a102 <_dtoa_r+0xac2>
 800a0f2:	f000 f9cb 	bl	800a48c <__multadd>
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	4605      	mov	r5, r0
 800a0fa:	9b07      	ldr	r3, [sp, #28]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	9307      	str	r3, [sp, #28]
 800a100:	e774      	b.n	8009fec <_dtoa_r+0x9ac>
 800a102:	f000 f9c3 	bl	800a48c <__multadd>
 800a106:	4629      	mov	r1, r5
 800a108:	4607      	mov	r7, r0
 800a10a:	2300      	movs	r3, #0
 800a10c:	220a      	movs	r2, #10
 800a10e:	4658      	mov	r0, fp
 800a110:	f000 f9bc 	bl	800a48c <__multadd>
 800a114:	4605      	mov	r5, r0
 800a116:	e7f0      	b.n	800a0fa <_dtoa_r+0xaba>
 800a118:	9b00      	ldr	r3, [sp, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	bfcc      	ite	gt
 800a11e:	461e      	movgt	r6, r3
 800a120:	2601      	movle	r6, #1
 800a122:	4456      	add	r6, sl
 800a124:	2700      	movs	r7, #0
 800a126:	4649      	mov	r1, r9
 800a128:	2201      	movs	r2, #1
 800a12a:	4658      	mov	r0, fp
 800a12c:	f000 fba4 	bl	800a878 <__lshift>
 800a130:	4621      	mov	r1, r4
 800a132:	4681      	mov	r9, r0
 800a134:	f000 fc0c 	bl	800a950 <__mcmp>
 800a138:	2800      	cmp	r0, #0
 800a13a:	dcb0      	bgt.n	800a09e <_dtoa_r+0xa5e>
 800a13c:	d102      	bne.n	800a144 <_dtoa_r+0xb04>
 800a13e:	f018 0f01 	tst.w	r8, #1
 800a142:	d1ac      	bne.n	800a09e <_dtoa_r+0xa5e>
 800a144:	4633      	mov	r3, r6
 800a146:	461e      	mov	r6, r3
 800a148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a14c:	2a30      	cmp	r2, #48	@ 0x30
 800a14e:	d0fa      	beq.n	800a146 <_dtoa_r+0xb06>
 800a150:	e5c2      	b.n	8009cd8 <_dtoa_r+0x698>
 800a152:	459a      	cmp	sl, r3
 800a154:	d1a4      	bne.n	800a0a0 <_dtoa_r+0xa60>
 800a156:	9b04      	ldr	r3, [sp, #16]
 800a158:	3301      	adds	r3, #1
 800a15a:	9304      	str	r3, [sp, #16]
 800a15c:	2331      	movs	r3, #49	@ 0x31
 800a15e:	f88a 3000 	strb.w	r3, [sl]
 800a162:	e5b9      	b.n	8009cd8 <_dtoa_r+0x698>
 800a164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a166:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a1c4 <_dtoa_r+0xb84>
 800a16a:	b11b      	cbz	r3, 800a174 <_dtoa_r+0xb34>
 800a16c:	f10a 0308 	add.w	r3, sl, #8
 800a170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	4650      	mov	r0, sl
 800a176:	b019      	add	sp, #100	@ 0x64
 800a178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a17e:	2b01      	cmp	r3, #1
 800a180:	f77f ae37 	ble.w	8009df2 <_dtoa_r+0x7b2>
 800a184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a186:	930a      	str	r3, [sp, #40]	@ 0x28
 800a188:	2001      	movs	r0, #1
 800a18a:	e655      	b.n	8009e38 <_dtoa_r+0x7f8>
 800a18c:	9b00      	ldr	r3, [sp, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f77f aed6 	ble.w	8009f40 <_dtoa_r+0x900>
 800a194:	4656      	mov	r6, sl
 800a196:	4621      	mov	r1, r4
 800a198:	4648      	mov	r0, r9
 800a19a:	f7ff f9c7 	bl	800952c <quorem>
 800a19e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1a2:	f806 8b01 	strb.w	r8, [r6], #1
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	eba6 020a 	sub.w	r2, r6, sl
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	ddb3      	ble.n	800a118 <_dtoa_r+0xad8>
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	220a      	movs	r2, #10
 800a1b6:	4658      	mov	r0, fp
 800a1b8:	f000 f968 	bl	800a48c <__multadd>
 800a1bc:	4681      	mov	r9, r0
 800a1be:	e7ea      	b.n	800a196 <_dtoa_r+0xb56>
 800a1c0:	0800d59f 	.word	0x0800d59f
 800a1c4:	0800d523 	.word	0x0800d523

0800a1c8 <_free_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	d041      	beq.n	800a254 <_free_r+0x8c>
 800a1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1d4:	1f0c      	subs	r4, r1, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bfb8      	it	lt
 800a1da:	18e4      	addlt	r4, r4, r3
 800a1dc:	f000 f8e8 	bl	800a3b0 <__malloc_lock>
 800a1e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a258 <_free_r+0x90>)
 800a1e2:	6813      	ldr	r3, [r2, #0]
 800a1e4:	b933      	cbnz	r3, 800a1f4 <_free_r+0x2c>
 800a1e6:	6063      	str	r3, [r4, #4]
 800a1e8:	6014      	str	r4, [r2, #0]
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f0:	f000 b8e4 	b.w	800a3bc <__malloc_unlock>
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	d908      	bls.n	800a20a <_free_r+0x42>
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	1821      	adds	r1, r4, r0
 800a1fc:	428b      	cmp	r3, r1
 800a1fe:	bf01      	itttt	eq
 800a200:	6819      	ldreq	r1, [r3, #0]
 800a202:	685b      	ldreq	r3, [r3, #4]
 800a204:	1809      	addeq	r1, r1, r0
 800a206:	6021      	streq	r1, [r4, #0]
 800a208:	e7ed      	b.n	800a1e6 <_free_r+0x1e>
 800a20a:	461a      	mov	r2, r3
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	b10b      	cbz	r3, 800a214 <_free_r+0x4c>
 800a210:	42a3      	cmp	r3, r4
 800a212:	d9fa      	bls.n	800a20a <_free_r+0x42>
 800a214:	6811      	ldr	r1, [r2, #0]
 800a216:	1850      	adds	r0, r2, r1
 800a218:	42a0      	cmp	r0, r4
 800a21a:	d10b      	bne.n	800a234 <_free_r+0x6c>
 800a21c:	6820      	ldr	r0, [r4, #0]
 800a21e:	4401      	add	r1, r0
 800a220:	1850      	adds	r0, r2, r1
 800a222:	4283      	cmp	r3, r0
 800a224:	6011      	str	r1, [r2, #0]
 800a226:	d1e0      	bne.n	800a1ea <_free_r+0x22>
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	6053      	str	r3, [r2, #4]
 800a22e:	4408      	add	r0, r1
 800a230:	6010      	str	r0, [r2, #0]
 800a232:	e7da      	b.n	800a1ea <_free_r+0x22>
 800a234:	d902      	bls.n	800a23c <_free_r+0x74>
 800a236:	230c      	movs	r3, #12
 800a238:	602b      	str	r3, [r5, #0]
 800a23a:	e7d6      	b.n	800a1ea <_free_r+0x22>
 800a23c:	6820      	ldr	r0, [r4, #0]
 800a23e:	1821      	adds	r1, r4, r0
 800a240:	428b      	cmp	r3, r1
 800a242:	bf04      	itt	eq
 800a244:	6819      	ldreq	r1, [r3, #0]
 800a246:	685b      	ldreq	r3, [r3, #4]
 800a248:	6063      	str	r3, [r4, #4]
 800a24a:	bf04      	itt	eq
 800a24c:	1809      	addeq	r1, r1, r0
 800a24e:	6021      	streq	r1, [r4, #0]
 800a250:	6054      	str	r4, [r2, #4]
 800a252:	e7ca      	b.n	800a1ea <_free_r+0x22>
 800a254:	bd38      	pop	{r3, r4, r5, pc}
 800a256:	bf00      	nop
 800a258:	20000818 	.word	0x20000818

0800a25c <malloc>:
 800a25c:	4b02      	ldr	r3, [pc, #8]	@ (800a268 <malloc+0xc>)
 800a25e:	4601      	mov	r1, r0
 800a260:	6818      	ldr	r0, [r3, #0]
 800a262:	f000 b825 	b.w	800a2b0 <_malloc_r>
 800a266:	bf00      	nop
 800a268:	20000014 	.word	0x20000014

0800a26c <sbrk_aligned>:
 800a26c:	b570      	push	{r4, r5, r6, lr}
 800a26e:	4e0f      	ldr	r6, [pc, #60]	@ (800a2ac <sbrk_aligned+0x40>)
 800a270:	460c      	mov	r4, r1
 800a272:	6831      	ldr	r1, [r6, #0]
 800a274:	4605      	mov	r5, r0
 800a276:	b911      	cbnz	r1, 800a27e <sbrk_aligned+0x12>
 800a278:	f002 f99a 	bl	800c5b0 <_sbrk_r>
 800a27c:	6030      	str	r0, [r6, #0]
 800a27e:	4621      	mov	r1, r4
 800a280:	4628      	mov	r0, r5
 800a282:	f002 f995 	bl	800c5b0 <_sbrk_r>
 800a286:	1c43      	adds	r3, r0, #1
 800a288:	d103      	bne.n	800a292 <sbrk_aligned+0x26>
 800a28a:	f04f 34ff 	mov.w	r4, #4294967295
 800a28e:	4620      	mov	r0, r4
 800a290:	bd70      	pop	{r4, r5, r6, pc}
 800a292:	1cc4      	adds	r4, r0, #3
 800a294:	f024 0403 	bic.w	r4, r4, #3
 800a298:	42a0      	cmp	r0, r4
 800a29a:	d0f8      	beq.n	800a28e <sbrk_aligned+0x22>
 800a29c:	1a21      	subs	r1, r4, r0
 800a29e:	4628      	mov	r0, r5
 800a2a0:	f002 f986 	bl	800c5b0 <_sbrk_r>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d1f2      	bne.n	800a28e <sbrk_aligned+0x22>
 800a2a8:	e7ef      	b.n	800a28a <sbrk_aligned+0x1e>
 800a2aa:	bf00      	nop
 800a2ac:	20000814 	.word	0x20000814

0800a2b0 <_malloc_r>:
 800a2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2b4:	1ccd      	adds	r5, r1, #3
 800a2b6:	f025 0503 	bic.w	r5, r5, #3
 800a2ba:	3508      	adds	r5, #8
 800a2bc:	2d0c      	cmp	r5, #12
 800a2be:	bf38      	it	cc
 800a2c0:	250c      	movcc	r5, #12
 800a2c2:	2d00      	cmp	r5, #0
 800a2c4:	4606      	mov	r6, r0
 800a2c6:	db01      	blt.n	800a2cc <_malloc_r+0x1c>
 800a2c8:	42a9      	cmp	r1, r5
 800a2ca:	d904      	bls.n	800a2d6 <_malloc_r+0x26>
 800a2cc:	230c      	movs	r3, #12
 800a2ce:	6033      	str	r3, [r6, #0]
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3ac <_malloc_r+0xfc>
 800a2da:	f000 f869 	bl	800a3b0 <__malloc_lock>
 800a2de:	f8d8 3000 	ldr.w	r3, [r8]
 800a2e2:	461c      	mov	r4, r3
 800a2e4:	bb44      	cbnz	r4, 800a338 <_malloc_r+0x88>
 800a2e6:	4629      	mov	r1, r5
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f7ff ffbf 	bl	800a26c <sbrk_aligned>
 800a2ee:	1c43      	adds	r3, r0, #1
 800a2f0:	4604      	mov	r4, r0
 800a2f2:	d158      	bne.n	800a3a6 <_malloc_r+0xf6>
 800a2f4:	f8d8 4000 	ldr.w	r4, [r8]
 800a2f8:	4627      	mov	r7, r4
 800a2fa:	2f00      	cmp	r7, #0
 800a2fc:	d143      	bne.n	800a386 <_malloc_r+0xd6>
 800a2fe:	2c00      	cmp	r4, #0
 800a300:	d04b      	beq.n	800a39a <_malloc_r+0xea>
 800a302:	6823      	ldr	r3, [r4, #0]
 800a304:	4639      	mov	r1, r7
 800a306:	4630      	mov	r0, r6
 800a308:	eb04 0903 	add.w	r9, r4, r3
 800a30c:	f002 f950 	bl	800c5b0 <_sbrk_r>
 800a310:	4581      	cmp	r9, r0
 800a312:	d142      	bne.n	800a39a <_malloc_r+0xea>
 800a314:	6821      	ldr	r1, [r4, #0]
 800a316:	1a6d      	subs	r5, r5, r1
 800a318:	4629      	mov	r1, r5
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7ff ffa6 	bl	800a26c <sbrk_aligned>
 800a320:	3001      	adds	r0, #1
 800a322:	d03a      	beq.n	800a39a <_malloc_r+0xea>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	442b      	add	r3, r5
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	f8d8 3000 	ldr.w	r3, [r8]
 800a32e:	685a      	ldr	r2, [r3, #4]
 800a330:	bb62      	cbnz	r2, 800a38c <_malloc_r+0xdc>
 800a332:	f8c8 7000 	str.w	r7, [r8]
 800a336:	e00f      	b.n	800a358 <_malloc_r+0xa8>
 800a338:	6822      	ldr	r2, [r4, #0]
 800a33a:	1b52      	subs	r2, r2, r5
 800a33c:	d420      	bmi.n	800a380 <_malloc_r+0xd0>
 800a33e:	2a0b      	cmp	r2, #11
 800a340:	d917      	bls.n	800a372 <_malloc_r+0xc2>
 800a342:	1961      	adds	r1, r4, r5
 800a344:	42a3      	cmp	r3, r4
 800a346:	6025      	str	r5, [r4, #0]
 800a348:	bf18      	it	ne
 800a34a:	6059      	strne	r1, [r3, #4]
 800a34c:	6863      	ldr	r3, [r4, #4]
 800a34e:	bf08      	it	eq
 800a350:	f8c8 1000 	streq.w	r1, [r8]
 800a354:	5162      	str	r2, [r4, r5]
 800a356:	604b      	str	r3, [r1, #4]
 800a358:	4630      	mov	r0, r6
 800a35a:	f000 f82f 	bl	800a3bc <__malloc_unlock>
 800a35e:	f104 000b 	add.w	r0, r4, #11
 800a362:	1d23      	adds	r3, r4, #4
 800a364:	f020 0007 	bic.w	r0, r0, #7
 800a368:	1ac2      	subs	r2, r0, r3
 800a36a:	bf1c      	itt	ne
 800a36c:	1a1b      	subne	r3, r3, r0
 800a36e:	50a3      	strne	r3, [r4, r2]
 800a370:	e7af      	b.n	800a2d2 <_malloc_r+0x22>
 800a372:	6862      	ldr	r2, [r4, #4]
 800a374:	42a3      	cmp	r3, r4
 800a376:	bf0c      	ite	eq
 800a378:	f8c8 2000 	streq.w	r2, [r8]
 800a37c:	605a      	strne	r2, [r3, #4]
 800a37e:	e7eb      	b.n	800a358 <_malloc_r+0xa8>
 800a380:	4623      	mov	r3, r4
 800a382:	6864      	ldr	r4, [r4, #4]
 800a384:	e7ae      	b.n	800a2e4 <_malloc_r+0x34>
 800a386:	463c      	mov	r4, r7
 800a388:	687f      	ldr	r7, [r7, #4]
 800a38a:	e7b6      	b.n	800a2fa <_malloc_r+0x4a>
 800a38c:	461a      	mov	r2, r3
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	42a3      	cmp	r3, r4
 800a392:	d1fb      	bne.n	800a38c <_malloc_r+0xdc>
 800a394:	2300      	movs	r3, #0
 800a396:	6053      	str	r3, [r2, #4]
 800a398:	e7de      	b.n	800a358 <_malloc_r+0xa8>
 800a39a:	230c      	movs	r3, #12
 800a39c:	6033      	str	r3, [r6, #0]
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f000 f80c 	bl	800a3bc <__malloc_unlock>
 800a3a4:	e794      	b.n	800a2d0 <_malloc_r+0x20>
 800a3a6:	6005      	str	r5, [r0, #0]
 800a3a8:	e7d6      	b.n	800a358 <_malloc_r+0xa8>
 800a3aa:	bf00      	nop
 800a3ac:	20000818 	.word	0x20000818

0800a3b0 <__malloc_lock>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	@ (800a3b8 <__malloc_lock+0x8>)
 800a3b2:	f7ff b8a4 	b.w	80094fe <__retarget_lock_acquire_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	20000810 	.word	0x20000810

0800a3bc <__malloc_unlock>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	@ (800a3c4 <__malloc_unlock+0x8>)
 800a3be:	f7ff b89f 	b.w	8009500 <__retarget_lock_release_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	20000810 	.word	0x20000810

0800a3c8 <_Balloc>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	69c6      	ldr	r6, [r0, #28]
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	b976      	cbnz	r6, 800a3f0 <_Balloc+0x28>
 800a3d2:	2010      	movs	r0, #16
 800a3d4:	f7ff ff42 	bl	800a25c <malloc>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	61e0      	str	r0, [r4, #28]
 800a3dc:	b920      	cbnz	r0, 800a3e8 <_Balloc+0x20>
 800a3de:	4b18      	ldr	r3, [pc, #96]	@ (800a440 <_Balloc+0x78>)
 800a3e0:	4818      	ldr	r0, [pc, #96]	@ (800a444 <_Balloc+0x7c>)
 800a3e2:	216b      	movs	r1, #107	@ 0x6b
 800a3e4:	f002 f8fc 	bl	800c5e0 <__assert_func>
 800a3e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3ec:	6006      	str	r6, [r0, #0]
 800a3ee:	60c6      	str	r6, [r0, #12]
 800a3f0:	69e6      	ldr	r6, [r4, #28]
 800a3f2:	68f3      	ldr	r3, [r6, #12]
 800a3f4:	b183      	cbz	r3, 800a418 <_Balloc+0x50>
 800a3f6:	69e3      	ldr	r3, [r4, #28]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3fe:	b9b8      	cbnz	r0, 800a430 <_Balloc+0x68>
 800a400:	2101      	movs	r1, #1
 800a402:	fa01 f605 	lsl.w	r6, r1, r5
 800a406:	1d72      	adds	r2, r6, #5
 800a408:	0092      	lsls	r2, r2, #2
 800a40a:	4620      	mov	r0, r4
 800a40c:	f002 f906 	bl	800c61c <_calloc_r>
 800a410:	b160      	cbz	r0, 800a42c <_Balloc+0x64>
 800a412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a416:	e00e      	b.n	800a436 <_Balloc+0x6e>
 800a418:	2221      	movs	r2, #33	@ 0x21
 800a41a:	2104      	movs	r1, #4
 800a41c:	4620      	mov	r0, r4
 800a41e:	f002 f8fd 	bl	800c61c <_calloc_r>
 800a422:	69e3      	ldr	r3, [r4, #28]
 800a424:	60f0      	str	r0, [r6, #12]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e4      	bne.n	800a3f6 <_Balloc+0x2e>
 800a42c:	2000      	movs	r0, #0
 800a42e:	bd70      	pop	{r4, r5, r6, pc}
 800a430:	6802      	ldr	r2, [r0, #0]
 800a432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a436:	2300      	movs	r3, #0
 800a438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a43c:	e7f7      	b.n	800a42e <_Balloc+0x66>
 800a43e:	bf00      	nop
 800a440:	0800d530 	.word	0x0800d530
 800a444:	0800d5b0 	.word	0x0800d5b0

0800a448 <_Bfree>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	69c6      	ldr	r6, [r0, #28]
 800a44c:	4605      	mov	r5, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	b976      	cbnz	r6, 800a470 <_Bfree+0x28>
 800a452:	2010      	movs	r0, #16
 800a454:	f7ff ff02 	bl	800a25c <malloc>
 800a458:	4602      	mov	r2, r0
 800a45a:	61e8      	str	r0, [r5, #28]
 800a45c:	b920      	cbnz	r0, 800a468 <_Bfree+0x20>
 800a45e:	4b09      	ldr	r3, [pc, #36]	@ (800a484 <_Bfree+0x3c>)
 800a460:	4809      	ldr	r0, [pc, #36]	@ (800a488 <_Bfree+0x40>)
 800a462:	218f      	movs	r1, #143	@ 0x8f
 800a464:	f002 f8bc 	bl	800c5e0 <__assert_func>
 800a468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a46c:	6006      	str	r6, [r0, #0]
 800a46e:	60c6      	str	r6, [r0, #12]
 800a470:	b13c      	cbz	r4, 800a482 <_Bfree+0x3a>
 800a472:	69eb      	ldr	r3, [r5, #28]
 800a474:	6862      	ldr	r2, [r4, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a47c:	6021      	str	r1, [r4, #0]
 800a47e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a482:	bd70      	pop	{r4, r5, r6, pc}
 800a484:	0800d530 	.word	0x0800d530
 800a488:	0800d5b0 	.word	0x0800d5b0

0800a48c <__multadd>:
 800a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	690d      	ldr	r5, [r1, #16]
 800a492:	4607      	mov	r7, r0
 800a494:	460c      	mov	r4, r1
 800a496:	461e      	mov	r6, r3
 800a498:	f101 0c14 	add.w	ip, r1, #20
 800a49c:	2000      	movs	r0, #0
 800a49e:	f8dc 3000 	ldr.w	r3, [ip]
 800a4a2:	b299      	uxth	r1, r3
 800a4a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a4a8:	0c1e      	lsrs	r6, r3, #16
 800a4aa:	0c0b      	lsrs	r3, r1, #16
 800a4ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a4b0:	b289      	uxth	r1, r1
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4b8:	4285      	cmp	r5, r0
 800a4ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a4be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4c2:	dcec      	bgt.n	800a49e <__multadd+0x12>
 800a4c4:	b30e      	cbz	r6, 800a50a <__multadd+0x7e>
 800a4c6:	68a3      	ldr	r3, [r4, #8]
 800a4c8:	42ab      	cmp	r3, r5
 800a4ca:	dc19      	bgt.n	800a500 <__multadd+0x74>
 800a4cc:	6861      	ldr	r1, [r4, #4]
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	3101      	adds	r1, #1
 800a4d2:	f7ff ff79 	bl	800a3c8 <_Balloc>
 800a4d6:	4680      	mov	r8, r0
 800a4d8:	b928      	cbnz	r0, 800a4e6 <__multadd+0x5a>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a510 <__multadd+0x84>)
 800a4de:	480d      	ldr	r0, [pc, #52]	@ (800a514 <__multadd+0x88>)
 800a4e0:	21ba      	movs	r1, #186	@ 0xba
 800a4e2:	f002 f87d 	bl	800c5e0 <__assert_func>
 800a4e6:	6922      	ldr	r2, [r4, #16]
 800a4e8:	3202      	adds	r2, #2
 800a4ea:	f104 010c 	add.w	r1, r4, #12
 800a4ee:	0092      	lsls	r2, r2, #2
 800a4f0:	300c      	adds	r0, #12
 800a4f2:	f7ff f806 	bl	8009502 <memcpy>
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f7ff ffa5 	bl	800a448 <_Bfree>
 800a4fe:	4644      	mov	r4, r8
 800a500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a504:	3501      	adds	r5, #1
 800a506:	615e      	str	r6, [r3, #20]
 800a508:	6125      	str	r5, [r4, #16]
 800a50a:	4620      	mov	r0, r4
 800a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a510:	0800d59f 	.word	0x0800d59f
 800a514:	0800d5b0 	.word	0x0800d5b0

0800a518 <__s2b>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	460c      	mov	r4, r1
 800a51e:	4615      	mov	r5, r2
 800a520:	461f      	mov	r7, r3
 800a522:	2209      	movs	r2, #9
 800a524:	3308      	adds	r3, #8
 800a526:	4606      	mov	r6, r0
 800a528:	fb93 f3f2 	sdiv	r3, r3, r2
 800a52c:	2100      	movs	r1, #0
 800a52e:	2201      	movs	r2, #1
 800a530:	429a      	cmp	r2, r3
 800a532:	db09      	blt.n	800a548 <__s2b+0x30>
 800a534:	4630      	mov	r0, r6
 800a536:	f7ff ff47 	bl	800a3c8 <_Balloc>
 800a53a:	b940      	cbnz	r0, 800a54e <__s2b+0x36>
 800a53c:	4602      	mov	r2, r0
 800a53e:	4b19      	ldr	r3, [pc, #100]	@ (800a5a4 <__s2b+0x8c>)
 800a540:	4819      	ldr	r0, [pc, #100]	@ (800a5a8 <__s2b+0x90>)
 800a542:	21d3      	movs	r1, #211	@ 0xd3
 800a544:	f002 f84c 	bl	800c5e0 <__assert_func>
 800a548:	0052      	lsls	r2, r2, #1
 800a54a:	3101      	adds	r1, #1
 800a54c:	e7f0      	b.n	800a530 <__s2b+0x18>
 800a54e:	9b08      	ldr	r3, [sp, #32]
 800a550:	6143      	str	r3, [r0, #20]
 800a552:	2d09      	cmp	r5, #9
 800a554:	f04f 0301 	mov.w	r3, #1
 800a558:	6103      	str	r3, [r0, #16]
 800a55a:	dd16      	ble.n	800a58a <__s2b+0x72>
 800a55c:	f104 0909 	add.w	r9, r4, #9
 800a560:	46c8      	mov	r8, r9
 800a562:	442c      	add	r4, r5
 800a564:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a568:	4601      	mov	r1, r0
 800a56a:	3b30      	subs	r3, #48	@ 0x30
 800a56c:	220a      	movs	r2, #10
 800a56e:	4630      	mov	r0, r6
 800a570:	f7ff ff8c 	bl	800a48c <__multadd>
 800a574:	45a0      	cmp	r8, r4
 800a576:	d1f5      	bne.n	800a564 <__s2b+0x4c>
 800a578:	f1a5 0408 	sub.w	r4, r5, #8
 800a57c:	444c      	add	r4, r9
 800a57e:	1b2d      	subs	r5, r5, r4
 800a580:	1963      	adds	r3, r4, r5
 800a582:	42bb      	cmp	r3, r7
 800a584:	db04      	blt.n	800a590 <__s2b+0x78>
 800a586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58a:	340a      	adds	r4, #10
 800a58c:	2509      	movs	r5, #9
 800a58e:	e7f6      	b.n	800a57e <__s2b+0x66>
 800a590:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a594:	4601      	mov	r1, r0
 800a596:	3b30      	subs	r3, #48	@ 0x30
 800a598:	220a      	movs	r2, #10
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7ff ff76 	bl	800a48c <__multadd>
 800a5a0:	e7ee      	b.n	800a580 <__s2b+0x68>
 800a5a2:	bf00      	nop
 800a5a4:	0800d59f 	.word	0x0800d59f
 800a5a8:	0800d5b0 	.word	0x0800d5b0

0800a5ac <__hi0bits>:
 800a5ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	bf36      	itet	cc
 800a5b4:	0403      	lslcc	r3, r0, #16
 800a5b6:	2000      	movcs	r0, #0
 800a5b8:	2010      	movcc	r0, #16
 800a5ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5be:	bf3c      	itt	cc
 800a5c0:	021b      	lslcc	r3, r3, #8
 800a5c2:	3008      	addcc	r0, #8
 800a5c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5c8:	bf3c      	itt	cc
 800a5ca:	011b      	lslcc	r3, r3, #4
 800a5cc:	3004      	addcc	r0, #4
 800a5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5d2:	bf3c      	itt	cc
 800a5d4:	009b      	lslcc	r3, r3, #2
 800a5d6:	3002      	addcc	r0, #2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	db05      	blt.n	800a5e8 <__hi0bits+0x3c>
 800a5dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5e0:	f100 0001 	add.w	r0, r0, #1
 800a5e4:	bf08      	it	eq
 800a5e6:	2020      	moveq	r0, #32
 800a5e8:	4770      	bx	lr

0800a5ea <__lo0bits>:
 800a5ea:	6803      	ldr	r3, [r0, #0]
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	f013 0007 	ands.w	r0, r3, #7
 800a5f2:	d00b      	beq.n	800a60c <__lo0bits+0x22>
 800a5f4:	07d9      	lsls	r1, r3, #31
 800a5f6:	d421      	bmi.n	800a63c <__lo0bits+0x52>
 800a5f8:	0798      	lsls	r0, r3, #30
 800a5fa:	bf49      	itett	mi
 800a5fc:	085b      	lsrmi	r3, r3, #1
 800a5fe:	089b      	lsrpl	r3, r3, #2
 800a600:	2001      	movmi	r0, #1
 800a602:	6013      	strmi	r3, [r2, #0]
 800a604:	bf5c      	itt	pl
 800a606:	6013      	strpl	r3, [r2, #0]
 800a608:	2002      	movpl	r0, #2
 800a60a:	4770      	bx	lr
 800a60c:	b299      	uxth	r1, r3
 800a60e:	b909      	cbnz	r1, 800a614 <__lo0bits+0x2a>
 800a610:	0c1b      	lsrs	r3, r3, #16
 800a612:	2010      	movs	r0, #16
 800a614:	b2d9      	uxtb	r1, r3
 800a616:	b909      	cbnz	r1, 800a61c <__lo0bits+0x32>
 800a618:	3008      	adds	r0, #8
 800a61a:	0a1b      	lsrs	r3, r3, #8
 800a61c:	0719      	lsls	r1, r3, #28
 800a61e:	bf04      	itt	eq
 800a620:	091b      	lsreq	r3, r3, #4
 800a622:	3004      	addeq	r0, #4
 800a624:	0799      	lsls	r1, r3, #30
 800a626:	bf04      	itt	eq
 800a628:	089b      	lsreq	r3, r3, #2
 800a62a:	3002      	addeq	r0, #2
 800a62c:	07d9      	lsls	r1, r3, #31
 800a62e:	d403      	bmi.n	800a638 <__lo0bits+0x4e>
 800a630:	085b      	lsrs	r3, r3, #1
 800a632:	f100 0001 	add.w	r0, r0, #1
 800a636:	d003      	beq.n	800a640 <__lo0bits+0x56>
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	4770      	bx	lr
 800a63c:	2000      	movs	r0, #0
 800a63e:	4770      	bx	lr
 800a640:	2020      	movs	r0, #32
 800a642:	4770      	bx	lr

0800a644 <__i2b>:
 800a644:	b510      	push	{r4, lr}
 800a646:	460c      	mov	r4, r1
 800a648:	2101      	movs	r1, #1
 800a64a:	f7ff febd 	bl	800a3c8 <_Balloc>
 800a64e:	4602      	mov	r2, r0
 800a650:	b928      	cbnz	r0, 800a65e <__i2b+0x1a>
 800a652:	4b05      	ldr	r3, [pc, #20]	@ (800a668 <__i2b+0x24>)
 800a654:	4805      	ldr	r0, [pc, #20]	@ (800a66c <__i2b+0x28>)
 800a656:	f240 1145 	movw	r1, #325	@ 0x145
 800a65a:	f001 ffc1 	bl	800c5e0 <__assert_func>
 800a65e:	2301      	movs	r3, #1
 800a660:	6144      	str	r4, [r0, #20]
 800a662:	6103      	str	r3, [r0, #16]
 800a664:	bd10      	pop	{r4, pc}
 800a666:	bf00      	nop
 800a668:	0800d59f 	.word	0x0800d59f
 800a66c:	0800d5b0 	.word	0x0800d5b0

0800a670 <__multiply>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4614      	mov	r4, r2
 800a676:	690a      	ldr	r2, [r1, #16]
 800a678:	6923      	ldr	r3, [r4, #16]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	bfa8      	it	ge
 800a67e:	4623      	movge	r3, r4
 800a680:	460f      	mov	r7, r1
 800a682:	bfa4      	itt	ge
 800a684:	460c      	movge	r4, r1
 800a686:	461f      	movge	r7, r3
 800a688:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a68c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a690:	68a3      	ldr	r3, [r4, #8]
 800a692:	6861      	ldr	r1, [r4, #4]
 800a694:	eb0a 0609 	add.w	r6, sl, r9
 800a698:	42b3      	cmp	r3, r6
 800a69a:	b085      	sub	sp, #20
 800a69c:	bfb8      	it	lt
 800a69e:	3101      	addlt	r1, #1
 800a6a0:	f7ff fe92 	bl	800a3c8 <_Balloc>
 800a6a4:	b930      	cbnz	r0, 800a6b4 <__multiply+0x44>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	4b44      	ldr	r3, [pc, #272]	@ (800a7bc <__multiply+0x14c>)
 800a6aa:	4845      	ldr	r0, [pc, #276]	@ (800a7c0 <__multiply+0x150>)
 800a6ac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6b0:	f001 ff96 	bl	800c5e0 <__assert_func>
 800a6b4:	f100 0514 	add.w	r5, r0, #20
 800a6b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6bc:	462b      	mov	r3, r5
 800a6be:	2200      	movs	r2, #0
 800a6c0:	4543      	cmp	r3, r8
 800a6c2:	d321      	bcc.n	800a708 <__multiply+0x98>
 800a6c4:	f107 0114 	add.w	r1, r7, #20
 800a6c8:	f104 0214 	add.w	r2, r4, #20
 800a6cc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a6d0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a6d4:	9302      	str	r3, [sp, #8]
 800a6d6:	1b13      	subs	r3, r2, r4
 800a6d8:	3b15      	subs	r3, #21
 800a6da:	f023 0303 	bic.w	r3, r3, #3
 800a6de:	3304      	adds	r3, #4
 800a6e0:	f104 0715 	add.w	r7, r4, #21
 800a6e4:	42ba      	cmp	r2, r7
 800a6e6:	bf38      	it	cc
 800a6e8:	2304      	movcc	r3, #4
 800a6ea:	9301      	str	r3, [sp, #4]
 800a6ec:	9b02      	ldr	r3, [sp, #8]
 800a6ee:	9103      	str	r1, [sp, #12]
 800a6f0:	428b      	cmp	r3, r1
 800a6f2:	d80c      	bhi.n	800a70e <__multiply+0x9e>
 800a6f4:	2e00      	cmp	r6, #0
 800a6f6:	dd03      	ble.n	800a700 <__multiply+0x90>
 800a6f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d05b      	beq.n	800a7b8 <__multiply+0x148>
 800a700:	6106      	str	r6, [r0, #16]
 800a702:	b005      	add	sp, #20
 800a704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a708:	f843 2b04 	str.w	r2, [r3], #4
 800a70c:	e7d8      	b.n	800a6c0 <__multiply+0x50>
 800a70e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a712:	f1ba 0f00 	cmp.w	sl, #0
 800a716:	d024      	beq.n	800a762 <__multiply+0xf2>
 800a718:	f104 0e14 	add.w	lr, r4, #20
 800a71c:	46a9      	mov	r9, r5
 800a71e:	f04f 0c00 	mov.w	ip, #0
 800a722:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a726:	f8d9 3000 	ldr.w	r3, [r9]
 800a72a:	fa1f fb87 	uxth.w	fp, r7
 800a72e:	b29b      	uxth	r3, r3
 800a730:	fb0a 330b 	mla	r3, sl, fp, r3
 800a734:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a738:	f8d9 7000 	ldr.w	r7, [r9]
 800a73c:	4463      	add	r3, ip
 800a73e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a742:	fb0a c70b 	mla	r7, sl, fp, ip
 800a746:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a750:	4572      	cmp	r2, lr
 800a752:	f849 3b04 	str.w	r3, [r9], #4
 800a756:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a75a:	d8e2      	bhi.n	800a722 <__multiply+0xb2>
 800a75c:	9b01      	ldr	r3, [sp, #4]
 800a75e:	f845 c003 	str.w	ip, [r5, r3]
 800a762:	9b03      	ldr	r3, [sp, #12]
 800a764:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a768:	3104      	adds	r1, #4
 800a76a:	f1b9 0f00 	cmp.w	r9, #0
 800a76e:	d021      	beq.n	800a7b4 <__multiply+0x144>
 800a770:	682b      	ldr	r3, [r5, #0]
 800a772:	f104 0c14 	add.w	ip, r4, #20
 800a776:	46ae      	mov	lr, r5
 800a778:	f04f 0a00 	mov.w	sl, #0
 800a77c:	f8bc b000 	ldrh.w	fp, [ip]
 800a780:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a784:	fb09 770b 	mla	r7, r9, fp, r7
 800a788:	4457      	add	r7, sl
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a790:	f84e 3b04 	str.w	r3, [lr], #4
 800a794:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a798:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a79c:	f8be 3000 	ldrh.w	r3, [lr]
 800a7a0:	fb09 330a 	mla	r3, r9, sl, r3
 800a7a4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a7a8:	4562      	cmp	r2, ip
 800a7aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7ae:	d8e5      	bhi.n	800a77c <__multiply+0x10c>
 800a7b0:	9f01      	ldr	r7, [sp, #4]
 800a7b2:	51eb      	str	r3, [r5, r7]
 800a7b4:	3504      	adds	r5, #4
 800a7b6:	e799      	b.n	800a6ec <__multiply+0x7c>
 800a7b8:	3e01      	subs	r6, #1
 800a7ba:	e79b      	b.n	800a6f4 <__multiply+0x84>
 800a7bc:	0800d59f 	.word	0x0800d59f
 800a7c0:	0800d5b0 	.word	0x0800d5b0

0800a7c4 <__pow5mult>:
 800a7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c8:	4615      	mov	r5, r2
 800a7ca:	f012 0203 	ands.w	r2, r2, #3
 800a7ce:	4607      	mov	r7, r0
 800a7d0:	460e      	mov	r6, r1
 800a7d2:	d007      	beq.n	800a7e4 <__pow5mult+0x20>
 800a7d4:	4c25      	ldr	r4, [pc, #148]	@ (800a86c <__pow5mult+0xa8>)
 800a7d6:	3a01      	subs	r2, #1
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7de:	f7ff fe55 	bl	800a48c <__multadd>
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	10ad      	asrs	r5, r5, #2
 800a7e6:	d03d      	beq.n	800a864 <__pow5mult+0xa0>
 800a7e8:	69fc      	ldr	r4, [r7, #28]
 800a7ea:	b97c      	cbnz	r4, 800a80c <__pow5mult+0x48>
 800a7ec:	2010      	movs	r0, #16
 800a7ee:	f7ff fd35 	bl	800a25c <malloc>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	61f8      	str	r0, [r7, #28]
 800a7f6:	b928      	cbnz	r0, 800a804 <__pow5mult+0x40>
 800a7f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a870 <__pow5mult+0xac>)
 800a7fa:	481e      	ldr	r0, [pc, #120]	@ (800a874 <__pow5mult+0xb0>)
 800a7fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a800:	f001 feee 	bl	800c5e0 <__assert_func>
 800a804:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a808:	6004      	str	r4, [r0, #0]
 800a80a:	60c4      	str	r4, [r0, #12]
 800a80c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a810:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a814:	b94c      	cbnz	r4, 800a82a <__pow5mult+0x66>
 800a816:	f240 2171 	movw	r1, #625	@ 0x271
 800a81a:	4638      	mov	r0, r7
 800a81c:	f7ff ff12 	bl	800a644 <__i2b>
 800a820:	2300      	movs	r3, #0
 800a822:	f8c8 0008 	str.w	r0, [r8, #8]
 800a826:	4604      	mov	r4, r0
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	f04f 0900 	mov.w	r9, #0
 800a82e:	07eb      	lsls	r3, r5, #31
 800a830:	d50a      	bpl.n	800a848 <__pow5mult+0x84>
 800a832:	4631      	mov	r1, r6
 800a834:	4622      	mov	r2, r4
 800a836:	4638      	mov	r0, r7
 800a838:	f7ff ff1a 	bl	800a670 <__multiply>
 800a83c:	4631      	mov	r1, r6
 800a83e:	4680      	mov	r8, r0
 800a840:	4638      	mov	r0, r7
 800a842:	f7ff fe01 	bl	800a448 <_Bfree>
 800a846:	4646      	mov	r6, r8
 800a848:	106d      	asrs	r5, r5, #1
 800a84a:	d00b      	beq.n	800a864 <__pow5mult+0xa0>
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	b938      	cbnz	r0, 800a860 <__pow5mult+0x9c>
 800a850:	4622      	mov	r2, r4
 800a852:	4621      	mov	r1, r4
 800a854:	4638      	mov	r0, r7
 800a856:	f7ff ff0b 	bl	800a670 <__multiply>
 800a85a:	6020      	str	r0, [r4, #0]
 800a85c:	f8c0 9000 	str.w	r9, [r0]
 800a860:	4604      	mov	r4, r0
 800a862:	e7e4      	b.n	800a82e <__pow5mult+0x6a>
 800a864:	4630      	mov	r0, r6
 800a866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a86a:	bf00      	nop
 800a86c:	0800d60c 	.word	0x0800d60c
 800a870:	0800d530 	.word	0x0800d530
 800a874:	0800d5b0 	.word	0x0800d5b0

0800a878 <__lshift>:
 800a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	460c      	mov	r4, r1
 800a87e:	6849      	ldr	r1, [r1, #4]
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a886:	68a3      	ldr	r3, [r4, #8]
 800a888:	4607      	mov	r7, r0
 800a88a:	4691      	mov	r9, r2
 800a88c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a890:	f108 0601 	add.w	r6, r8, #1
 800a894:	42b3      	cmp	r3, r6
 800a896:	db0b      	blt.n	800a8b0 <__lshift+0x38>
 800a898:	4638      	mov	r0, r7
 800a89a:	f7ff fd95 	bl	800a3c8 <_Balloc>
 800a89e:	4605      	mov	r5, r0
 800a8a0:	b948      	cbnz	r0, 800a8b6 <__lshift+0x3e>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	4b28      	ldr	r3, [pc, #160]	@ (800a948 <__lshift+0xd0>)
 800a8a6:	4829      	ldr	r0, [pc, #164]	@ (800a94c <__lshift+0xd4>)
 800a8a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a8ac:	f001 fe98 	bl	800c5e0 <__assert_func>
 800a8b0:	3101      	adds	r1, #1
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	e7ee      	b.n	800a894 <__lshift+0x1c>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f100 0114 	add.w	r1, r0, #20
 800a8bc:	f100 0210 	add.w	r2, r0, #16
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	4553      	cmp	r3, sl
 800a8c4:	db33      	blt.n	800a92e <__lshift+0xb6>
 800a8c6:	6920      	ldr	r0, [r4, #16]
 800a8c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8cc:	f104 0314 	add.w	r3, r4, #20
 800a8d0:	f019 091f 	ands.w	r9, r9, #31
 800a8d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8dc:	d02b      	beq.n	800a936 <__lshift+0xbe>
 800a8de:	f1c9 0e20 	rsb	lr, r9, #32
 800a8e2:	468a      	mov	sl, r1
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	6818      	ldr	r0, [r3, #0]
 800a8e8:	fa00 f009 	lsl.w	r0, r0, r9
 800a8ec:	4310      	orrs	r0, r2
 800a8ee:	f84a 0b04 	str.w	r0, [sl], #4
 800a8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f6:	459c      	cmp	ip, r3
 800a8f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8fc:	d8f3      	bhi.n	800a8e6 <__lshift+0x6e>
 800a8fe:	ebac 0304 	sub.w	r3, ip, r4
 800a902:	3b15      	subs	r3, #21
 800a904:	f023 0303 	bic.w	r3, r3, #3
 800a908:	3304      	adds	r3, #4
 800a90a:	f104 0015 	add.w	r0, r4, #21
 800a90e:	4584      	cmp	ip, r0
 800a910:	bf38      	it	cc
 800a912:	2304      	movcc	r3, #4
 800a914:	50ca      	str	r2, [r1, r3]
 800a916:	b10a      	cbz	r2, 800a91c <__lshift+0xa4>
 800a918:	f108 0602 	add.w	r6, r8, #2
 800a91c:	3e01      	subs	r6, #1
 800a91e:	4638      	mov	r0, r7
 800a920:	612e      	str	r6, [r5, #16]
 800a922:	4621      	mov	r1, r4
 800a924:	f7ff fd90 	bl	800a448 <_Bfree>
 800a928:	4628      	mov	r0, r5
 800a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a932:	3301      	adds	r3, #1
 800a934:	e7c5      	b.n	800a8c2 <__lshift+0x4a>
 800a936:	3904      	subs	r1, #4
 800a938:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a940:	459c      	cmp	ip, r3
 800a942:	d8f9      	bhi.n	800a938 <__lshift+0xc0>
 800a944:	e7ea      	b.n	800a91c <__lshift+0xa4>
 800a946:	bf00      	nop
 800a948:	0800d59f 	.word	0x0800d59f
 800a94c:	0800d5b0 	.word	0x0800d5b0

0800a950 <__mcmp>:
 800a950:	690a      	ldr	r2, [r1, #16]
 800a952:	4603      	mov	r3, r0
 800a954:	6900      	ldr	r0, [r0, #16]
 800a956:	1a80      	subs	r0, r0, r2
 800a958:	b530      	push	{r4, r5, lr}
 800a95a:	d10e      	bne.n	800a97a <__mcmp+0x2a>
 800a95c:	3314      	adds	r3, #20
 800a95e:	3114      	adds	r1, #20
 800a960:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a964:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a968:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a96c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a970:	4295      	cmp	r5, r2
 800a972:	d003      	beq.n	800a97c <__mcmp+0x2c>
 800a974:	d205      	bcs.n	800a982 <__mcmp+0x32>
 800a976:	f04f 30ff 	mov.w	r0, #4294967295
 800a97a:	bd30      	pop	{r4, r5, pc}
 800a97c:	42a3      	cmp	r3, r4
 800a97e:	d3f3      	bcc.n	800a968 <__mcmp+0x18>
 800a980:	e7fb      	b.n	800a97a <__mcmp+0x2a>
 800a982:	2001      	movs	r0, #1
 800a984:	e7f9      	b.n	800a97a <__mcmp+0x2a>
	...

0800a988 <__mdiff>:
 800a988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	4689      	mov	r9, r1
 800a98e:	4606      	mov	r6, r0
 800a990:	4611      	mov	r1, r2
 800a992:	4648      	mov	r0, r9
 800a994:	4614      	mov	r4, r2
 800a996:	f7ff ffdb 	bl	800a950 <__mcmp>
 800a99a:	1e05      	subs	r5, r0, #0
 800a99c:	d112      	bne.n	800a9c4 <__mdiff+0x3c>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff fd11 	bl	800a3c8 <_Balloc>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	b928      	cbnz	r0, 800a9b6 <__mdiff+0x2e>
 800a9aa:	4b3f      	ldr	r3, [pc, #252]	@ (800aaa8 <__mdiff+0x120>)
 800a9ac:	f240 2137 	movw	r1, #567	@ 0x237
 800a9b0:	483e      	ldr	r0, [pc, #248]	@ (800aaac <__mdiff+0x124>)
 800a9b2:	f001 fe15 	bl	800c5e0 <__assert_func>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9bc:	4610      	mov	r0, r2
 800a9be:	b003      	add	sp, #12
 800a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c4:	bfbc      	itt	lt
 800a9c6:	464b      	movlt	r3, r9
 800a9c8:	46a1      	movlt	r9, r4
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9d0:	bfba      	itte	lt
 800a9d2:	461c      	movlt	r4, r3
 800a9d4:	2501      	movlt	r5, #1
 800a9d6:	2500      	movge	r5, #0
 800a9d8:	f7ff fcf6 	bl	800a3c8 <_Balloc>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	b918      	cbnz	r0, 800a9e8 <__mdiff+0x60>
 800a9e0:	4b31      	ldr	r3, [pc, #196]	@ (800aaa8 <__mdiff+0x120>)
 800a9e2:	f240 2145 	movw	r1, #581	@ 0x245
 800a9e6:	e7e3      	b.n	800a9b0 <__mdiff+0x28>
 800a9e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9ec:	6926      	ldr	r6, [r4, #16]
 800a9ee:	60c5      	str	r5, [r0, #12]
 800a9f0:	f109 0310 	add.w	r3, r9, #16
 800a9f4:	f109 0514 	add.w	r5, r9, #20
 800a9f8:	f104 0e14 	add.w	lr, r4, #20
 800a9fc:	f100 0b14 	add.w	fp, r0, #20
 800aa00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	46d9      	mov	r9, fp
 800aa0c:	f04f 0c00 	mov.w	ip, #0
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa16:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	fa1f f38a 	uxth.w	r3, sl
 800aa20:	4619      	mov	r1, r3
 800aa22:	b283      	uxth	r3, r0
 800aa24:	1acb      	subs	r3, r1, r3
 800aa26:	0c00      	lsrs	r0, r0, #16
 800aa28:	4463      	add	r3, ip
 800aa2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa38:	4576      	cmp	r6, lr
 800aa3a:	f849 3b04 	str.w	r3, [r9], #4
 800aa3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa42:	d8e5      	bhi.n	800aa10 <__mdiff+0x88>
 800aa44:	1b33      	subs	r3, r6, r4
 800aa46:	3b15      	subs	r3, #21
 800aa48:	f023 0303 	bic.w	r3, r3, #3
 800aa4c:	3415      	adds	r4, #21
 800aa4e:	3304      	adds	r3, #4
 800aa50:	42a6      	cmp	r6, r4
 800aa52:	bf38      	it	cc
 800aa54:	2304      	movcc	r3, #4
 800aa56:	441d      	add	r5, r3
 800aa58:	445b      	add	r3, fp
 800aa5a:	461e      	mov	r6, r3
 800aa5c:	462c      	mov	r4, r5
 800aa5e:	4544      	cmp	r4, r8
 800aa60:	d30e      	bcc.n	800aa80 <__mdiff+0xf8>
 800aa62:	f108 0103 	add.w	r1, r8, #3
 800aa66:	1b49      	subs	r1, r1, r5
 800aa68:	f021 0103 	bic.w	r1, r1, #3
 800aa6c:	3d03      	subs	r5, #3
 800aa6e:	45a8      	cmp	r8, r5
 800aa70:	bf38      	it	cc
 800aa72:	2100      	movcc	r1, #0
 800aa74:	440b      	add	r3, r1
 800aa76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa7a:	b191      	cbz	r1, 800aaa2 <__mdiff+0x11a>
 800aa7c:	6117      	str	r7, [r2, #16]
 800aa7e:	e79d      	b.n	800a9bc <__mdiff+0x34>
 800aa80:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa84:	46e6      	mov	lr, ip
 800aa86:	0c08      	lsrs	r0, r1, #16
 800aa88:	fa1c fc81 	uxtah	ip, ip, r1
 800aa8c:	4471      	add	r1, lr
 800aa8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa92:	b289      	uxth	r1, r1
 800aa94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa98:	f846 1b04 	str.w	r1, [r6], #4
 800aa9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aaa0:	e7dd      	b.n	800aa5e <__mdiff+0xd6>
 800aaa2:	3f01      	subs	r7, #1
 800aaa4:	e7e7      	b.n	800aa76 <__mdiff+0xee>
 800aaa6:	bf00      	nop
 800aaa8:	0800d59f 	.word	0x0800d59f
 800aaac:	0800d5b0 	.word	0x0800d5b0

0800aab0 <__ulp>:
 800aab0:	b082      	sub	sp, #8
 800aab2:	ed8d 0b00 	vstr	d0, [sp]
 800aab6:	9a01      	ldr	r2, [sp, #4]
 800aab8:	4b0f      	ldr	r3, [pc, #60]	@ (800aaf8 <__ulp+0x48>)
 800aaba:	4013      	ands	r3, r2
 800aabc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	dc08      	bgt.n	800aad6 <__ulp+0x26>
 800aac4:	425b      	negs	r3, r3
 800aac6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aaca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aace:	da04      	bge.n	800aada <__ulp+0x2a>
 800aad0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aad4:	4113      	asrs	r3, r2
 800aad6:	2200      	movs	r2, #0
 800aad8:	e008      	b.n	800aaec <__ulp+0x3c>
 800aada:	f1a2 0314 	sub.w	r3, r2, #20
 800aade:	2b1e      	cmp	r3, #30
 800aae0:	bfda      	itte	le
 800aae2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aae6:	40da      	lsrle	r2, r3
 800aae8:	2201      	movgt	r2, #1
 800aaea:	2300      	movs	r3, #0
 800aaec:	4619      	mov	r1, r3
 800aaee:	4610      	mov	r0, r2
 800aaf0:	ec41 0b10 	vmov	d0, r0, r1
 800aaf4:	b002      	add	sp, #8
 800aaf6:	4770      	bx	lr
 800aaf8:	7ff00000 	.word	0x7ff00000

0800aafc <__b2d>:
 800aafc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab00:	6906      	ldr	r6, [r0, #16]
 800ab02:	f100 0814 	add.w	r8, r0, #20
 800ab06:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab0a:	1f37      	subs	r7, r6, #4
 800ab0c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab10:	4610      	mov	r0, r2
 800ab12:	f7ff fd4b 	bl	800a5ac <__hi0bits>
 800ab16:	f1c0 0320 	rsb	r3, r0, #32
 800ab1a:	280a      	cmp	r0, #10
 800ab1c:	600b      	str	r3, [r1, #0]
 800ab1e:	491b      	ldr	r1, [pc, #108]	@ (800ab8c <__b2d+0x90>)
 800ab20:	dc15      	bgt.n	800ab4e <__b2d+0x52>
 800ab22:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab26:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab2a:	45b8      	cmp	r8, r7
 800ab2c:	ea43 0501 	orr.w	r5, r3, r1
 800ab30:	bf34      	ite	cc
 800ab32:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab36:	2300      	movcs	r3, #0
 800ab38:	3015      	adds	r0, #21
 800ab3a:	fa02 f000 	lsl.w	r0, r2, r0
 800ab3e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab42:	4303      	orrs	r3, r0
 800ab44:	461c      	mov	r4, r3
 800ab46:	ec45 4b10 	vmov	d0, r4, r5
 800ab4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab4e:	45b8      	cmp	r8, r7
 800ab50:	bf3a      	itte	cc
 800ab52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab56:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab5a:	2300      	movcs	r3, #0
 800ab5c:	380b      	subs	r0, #11
 800ab5e:	d012      	beq.n	800ab86 <__b2d+0x8a>
 800ab60:	f1c0 0120 	rsb	r1, r0, #32
 800ab64:	fa23 f401 	lsr.w	r4, r3, r1
 800ab68:	4082      	lsls	r2, r0
 800ab6a:	4322      	orrs	r2, r4
 800ab6c:	4547      	cmp	r7, r8
 800ab6e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ab72:	bf8c      	ite	hi
 800ab74:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab78:	2200      	movls	r2, #0
 800ab7a:	4083      	lsls	r3, r0
 800ab7c:	40ca      	lsrs	r2, r1
 800ab7e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab82:	4313      	orrs	r3, r2
 800ab84:	e7de      	b.n	800ab44 <__b2d+0x48>
 800ab86:	ea42 0501 	orr.w	r5, r2, r1
 800ab8a:	e7db      	b.n	800ab44 <__b2d+0x48>
 800ab8c:	3ff00000 	.word	0x3ff00000

0800ab90 <__d2b>:
 800ab90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab94:	460f      	mov	r7, r1
 800ab96:	2101      	movs	r1, #1
 800ab98:	ec59 8b10 	vmov	r8, r9, d0
 800ab9c:	4616      	mov	r6, r2
 800ab9e:	f7ff fc13 	bl	800a3c8 <_Balloc>
 800aba2:	4604      	mov	r4, r0
 800aba4:	b930      	cbnz	r0, 800abb4 <__d2b+0x24>
 800aba6:	4602      	mov	r2, r0
 800aba8:	4b23      	ldr	r3, [pc, #140]	@ (800ac38 <__d2b+0xa8>)
 800abaa:	4824      	ldr	r0, [pc, #144]	@ (800ac3c <__d2b+0xac>)
 800abac:	f240 310f 	movw	r1, #783	@ 0x30f
 800abb0:	f001 fd16 	bl	800c5e0 <__assert_func>
 800abb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abbc:	b10d      	cbz	r5, 800abc2 <__d2b+0x32>
 800abbe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abc2:	9301      	str	r3, [sp, #4]
 800abc4:	f1b8 0300 	subs.w	r3, r8, #0
 800abc8:	d023      	beq.n	800ac12 <__d2b+0x82>
 800abca:	4668      	mov	r0, sp
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	f7ff fd0c 	bl	800a5ea <__lo0bits>
 800abd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abd6:	b1d0      	cbz	r0, 800ac0e <__d2b+0x7e>
 800abd8:	f1c0 0320 	rsb	r3, r0, #32
 800abdc:	fa02 f303 	lsl.w	r3, r2, r3
 800abe0:	430b      	orrs	r3, r1
 800abe2:	40c2      	lsrs	r2, r0
 800abe4:	6163      	str	r3, [r4, #20]
 800abe6:	9201      	str	r2, [sp, #4]
 800abe8:	9b01      	ldr	r3, [sp, #4]
 800abea:	61a3      	str	r3, [r4, #24]
 800abec:	2b00      	cmp	r3, #0
 800abee:	bf0c      	ite	eq
 800abf0:	2201      	moveq	r2, #1
 800abf2:	2202      	movne	r2, #2
 800abf4:	6122      	str	r2, [r4, #16]
 800abf6:	b1a5      	cbz	r5, 800ac22 <__d2b+0x92>
 800abf8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abfc:	4405      	add	r5, r0
 800abfe:	603d      	str	r5, [r7, #0]
 800ac00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac04:	6030      	str	r0, [r6, #0]
 800ac06:	4620      	mov	r0, r4
 800ac08:	b003      	add	sp, #12
 800ac0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac0e:	6161      	str	r1, [r4, #20]
 800ac10:	e7ea      	b.n	800abe8 <__d2b+0x58>
 800ac12:	a801      	add	r0, sp, #4
 800ac14:	f7ff fce9 	bl	800a5ea <__lo0bits>
 800ac18:	9b01      	ldr	r3, [sp, #4]
 800ac1a:	6163      	str	r3, [r4, #20]
 800ac1c:	3020      	adds	r0, #32
 800ac1e:	2201      	movs	r2, #1
 800ac20:	e7e8      	b.n	800abf4 <__d2b+0x64>
 800ac22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac2a:	6038      	str	r0, [r7, #0]
 800ac2c:	6918      	ldr	r0, [r3, #16]
 800ac2e:	f7ff fcbd 	bl	800a5ac <__hi0bits>
 800ac32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac36:	e7e5      	b.n	800ac04 <__d2b+0x74>
 800ac38:	0800d59f 	.word	0x0800d59f
 800ac3c:	0800d5b0 	.word	0x0800d5b0

0800ac40 <__ratio>:
 800ac40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac44:	b085      	sub	sp, #20
 800ac46:	e9cd 1000 	strd	r1, r0, [sp]
 800ac4a:	a902      	add	r1, sp, #8
 800ac4c:	f7ff ff56 	bl	800aafc <__b2d>
 800ac50:	9800      	ldr	r0, [sp, #0]
 800ac52:	a903      	add	r1, sp, #12
 800ac54:	ec55 4b10 	vmov	r4, r5, d0
 800ac58:	f7ff ff50 	bl	800aafc <__b2d>
 800ac5c:	9b01      	ldr	r3, [sp, #4]
 800ac5e:	6919      	ldr	r1, [r3, #16]
 800ac60:	9b00      	ldr	r3, [sp, #0]
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	1ac9      	subs	r1, r1, r3
 800ac66:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	ec5b ab10 	vmov	sl, fp, d0
 800ac70:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	bfce      	itee	gt
 800ac78:	462a      	movgt	r2, r5
 800ac7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac7e:	465a      	movle	r2, fp
 800ac80:	462f      	mov	r7, r5
 800ac82:	46d9      	mov	r9, fp
 800ac84:	bfcc      	ite	gt
 800ac86:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac8a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ac8e:	464b      	mov	r3, r9
 800ac90:	4652      	mov	r2, sl
 800ac92:	4620      	mov	r0, r4
 800ac94:	4639      	mov	r1, r7
 800ac96:	f7f5 fe01 	bl	800089c <__aeabi_ddiv>
 800ac9a:	ec41 0b10 	vmov	d0, r0, r1
 800ac9e:	b005      	add	sp, #20
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aca4 <__copybits>:
 800aca4:	3901      	subs	r1, #1
 800aca6:	b570      	push	{r4, r5, r6, lr}
 800aca8:	1149      	asrs	r1, r1, #5
 800acaa:	6914      	ldr	r4, [r2, #16]
 800acac:	3101      	adds	r1, #1
 800acae:	f102 0314 	add.w	r3, r2, #20
 800acb2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acb6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acba:	1f05      	subs	r5, r0, #4
 800acbc:	42a3      	cmp	r3, r4
 800acbe:	d30c      	bcc.n	800acda <__copybits+0x36>
 800acc0:	1aa3      	subs	r3, r4, r2
 800acc2:	3b11      	subs	r3, #17
 800acc4:	f023 0303 	bic.w	r3, r3, #3
 800acc8:	3211      	adds	r2, #17
 800acca:	42a2      	cmp	r2, r4
 800accc:	bf88      	it	hi
 800acce:	2300      	movhi	r3, #0
 800acd0:	4418      	add	r0, r3
 800acd2:	2300      	movs	r3, #0
 800acd4:	4288      	cmp	r0, r1
 800acd6:	d305      	bcc.n	800ace4 <__copybits+0x40>
 800acd8:	bd70      	pop	{r4, r5, r6, pc}
 800acda:	f853 6b04 	ldr.w	r6, [r3], #4
 800acde:	f845 6f04 	str.w	r6, [r5, #4]!
 800ace2:	e7eb      	b.n	800acbc <__copybits+0x18>
 800ace4:	f840 3b04 	str.w	r3, [r0], #4
 800ace8:	e7f4      	b.n	800acd4 <__copybits+0x30>

0800acea <__any_on>:
 800acea:	f100 0214 	add.w	r2, r0, #20
 800acee:	6900      	ldr	r0, [r0, #16]
 800acf0:	114b      	asrs	r3, r1, #5
 800acf2:	4298      	cmp	r0, r3
 800acf4:	b510      	push	{r4, lr}
 800acf6:	db11      	blt.n	800ad1c <__any_on+0x32>
 800acf8:	dd0a      	ble.n	800ad10 <__any_on+0x26>
 800acfa:	f011 011f 	ands.w	r1, r1, #31
 800acfe:	d007      	beq.n	800ad10 <__any_on+0x26>
 800ad00:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad04:	fa24 f001 	lsr.w	r0, r4, r1
 800ad08:	fa00 f101 	lsl.w	r1, r0, r1
 800ad0c:	428c      	cmp	r4, r1
 800ad0e:	d10b      	bne.n	800ad28 <__any_on+0x3e>
 800ad10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad14:	4293      	cmp	r3, r2
 800ad16:	d803      	bhi.n	800ad20 <__any_on+0x36>
 800ad18:	2000      	movs	r0, #0
 800ad1a:	bd10      	pop	{r4, pc}
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	e7f7      	b.n	800ad10 <__any_on+0x26>
 800ad20:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad24:	2900      	cmp	r1, #0
 800ad26:	d0f5      	beq.n	800ad14 <__any_on+0x2a>
 800ad28:	2001      	movs	r0, #1
 800ad2a:	e7f6      	b.n	800ad1a <__any_on+0x30>

0800ad2c <sulp>:
 800ad2c:	b570      	push	{r4, r5, r6, lr}
 800ad2e:	4604      	mov	r4, r0
 800ad30:	460d      	mov	r5, r1
 800ad32:	ec45 4b10 	vmov	d0, r4, r5
 800ad36:	4616      	mov	r6, r2
 800ad38:	f7ff feba 	bl	800aab0 <__ulp>
 800ad3c:	ec51 0b10 	vmov	r0, r1, d0
 800ad40:	b17e      	cbz	r6, 800ad62 <sulp+0x36>
 800ad42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad46:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	dd09      	ble.n	800ad62 <sulp+0x36>
 800ad4e:	051b      	lsls	r3, r3, #20
 800ad50:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ad54:	2400      	movs	r4, #0
 800ad56:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ad5a:	4622      	mov	r2, r4
 800ad5c:	462b      	mov	r3, r5
 800ad5e:	f7f5 fc73 	bl	8000648 <__aeabi_dmul>
 800ad62:	ec41 0b10 	vmov	d0, r0, r1
 800ad66:	bd70      	pop	{r4, r5, r6, pc}

0800ad68 <_strtod_l>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	b09f      	sub	sp, #124	@ 0x7c
 800ad6e:	460c      	mov	r4, r1
 800ad70:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ad72:	2200      	movs	r2, #0
 800ad74:	921a      	str	r2, [sp, #104]	@ 0x68
 800ad76:	9005      	str	r0, [sp, #20]
 800ad78:	f04f 0a00 	mov.w	sl, #0
 800ad7c:	f04f 0b00 	mov.w	fp, #0
 800ad80:	460a      	mov	r2, r1
 800ad82:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad84:	7811      	ldrb	r1, [r2, #0]
 800ad86:	292b      	cmp	r1, #43	@ 0x2b
 800ad88:	d04a      	beq.n	800ae20 <_strtod_l+0xb8>
 800ad8a:	d838      	bhi.n	800adfe <_strtod_l+0x96>
 800ad8c:	290d      	cmp	r1, #13
 800ad8e:	d832      	bhi.n	800adf6 <_strtod_l+0x8e>
 800ad90:	2908      	cmp	r1, #8
 800ad92:	d832      	bhi.n	800adfa <_strtod_l+0x92>
 800ad94:	2900      	cmp	r1, #0
 800ad96:	d03b      	beq.n	800ae10 <_strtod_l+0xa8>
 800ad98:	2200      	movs	r2, #0
 800ad9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ad9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ad9e:	782a      	ldrb	r2, [r5, #0]
 800ada0:	2a30      	cmp	r2, #48	@ 0x30
 800ada2:	f040 80b3 	bne.w	800af0c <_strtod_l+0x1a4>
 800ada6:	786a      	ldrb	r2, [r5, #1]
 800ada8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adac:	2a58      	cmp	r2, #88	@ 0x58
 800adae:	d16e      	bne.n	800ae8e <_strtod_l+0x126>
 800adb0:	9302      	str	r3, [sp, #8]
 800adb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adb4:	9301      	str	r3, [sp, #4]
 800adb6:	ab1a      	add	r3, sp, #104	@ 0x68
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	4a8e      	ldr	r2, [pc, #568]	@ (800aff4 <_strtod_l+0x28c>)
 800adbc:	9805      	ldr	r0, [sp, #20]
 800adbe:	ab1b      	add	r3, sp, #108	@ 0x6c
 800adc0:	a919      	add	r1, sp, #100	@ 0x64
 800adc2:	f001 fca7 	bl	800c714 <__gethex>
 800adc6:	f010 060f 	ands.w	r6, r0, #15
 800adca:	4604      	mov	r4, r0
 800adcc:	d005      	beq.n	800adda <_strtod_l+0x72>
 800adce:	2e06      	cmp	r6, #6
 800add0:	d128      	bne.n	800ae24 <_strtod_l+0xbc>
 800add2:	3501      	adds	r5, #1
 800add4:	2300      	movs	r3, #0
 800add6:	9519      	str	r5, [sp, #100]	@ 0x64
 800add8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800addc:	2b00      	cmp	r3, #0
 800adde:	f040 858e 	bne.w	800b8fe <_strtod_l+0xb96>
 800ade2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ade4:	b1cb      	cbz	r3, 800ae1a <_strtod_l+0xb2>
 800ade6:	4652      	mov	r2, sl
 800ade8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800adec:	ec43 2b10 	vmov	d0, r2, r3
 800adf0:	b01f      	add	sp, #124	@ 0x7c
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adf6:	2920      	cmp	r1, #32
 800adf8:	d1ce      	bne.n	800ad98 <_strtod_l+0x30>
 800adfa:	3201      	adds	r2, #1
 800adfc:	e7c1      	b.n	800ad82 <_strtod_l+0x1a>
 800adfe:	292d      	cmp	r1, #45	@ 0x2d
 800ae00:	d1ca      	bne.n	800ad98 <_strtod_l+0x30>
 800ae02:	2101      	movs	r1, #1
 800ae04:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ae06:	1c51      	adds	r1, r2, #1
 800ae08:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae0a:	7852      	ldrb	r2, [r2, #1]
 800ae0c:	2a00      	cmp	r2, #0
 800ae0e:	d1c5      	bne.n	800ad9c <_strtod_l+0x34>
 800ae10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae12:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	f040 8570 	bne.w	800b8fa <_strtod_l+0xb92>
 800ae1a:	4652      	mov	r2, sl
 800ae1c:	465b      	mov	r3, fp
 800ae1e:	e7e5      	b.n	800adec <_strtod_l+0x84>
 800ae20:	2100      	movs	r1, #0
 800ae22:	e7ef      	b.n	800ae04 <_strtod_l+0x9c>
 800ae24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ae26:	b13a      	cbz	r2, 800ae38 <_strtod_l+0xd0>
 800ae28:	2135      	movs	r1, #53	@ 0x35
 800ae2a:	a81c      	add	r0, sp, #112	@ 0x70
 800ae2c:	f7ff ff3a 	bl	800aca4 <__copybits>
 800ae30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae32:	9805      	ldr	r0, [sp, #20]
 800ae34:	f7ff fb08 	bl	800a448 <_Bfree>
 800ae38:	3e01      	subs	r6, #1
 800ae3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ae3c:	2e04      	cmp	r6, #4
 800ae3e:	d806      	bhi.n	800ae4e <_strtod_l+0xe6>
 800ae40:	e8df f006 	tbb	[pc, r6]
 800ae44:	201d0314 	.word	0x201d0314
 800ae48:	14          	.byte	0x14
 800ae49:	00          	.byte	0x00
 800ae4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ae4e:	05e1      	lsls	r1, r4, #23
 800ae50:	bf48      	it	mi
 800ae52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ae56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae5a:	0d1b      	lsrs	r3, r3, #20
 800ae5c:	051b      	lsls	r3, r3, #20
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1bb      	bne.n	800adda <_strtod_l+0x72>
 800ae62:	f7fe fb21 	bl	80094a8 <__errno>
 800ae66:	2322      	movs	r3, #34	@ 0x22
 800ae68:	6003      	str	r3, [r0, #0]
 800ae6a:	e7b6      	b.n	800adda <_strtod_l+0x72>
 800ae6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ae70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ae78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae7c:	e7e7      	b.n	800ae4e <_strtod_l+0xe6>
 800ae7e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800affc <_strtod_l+0x294>
 800ae82:	e7e4      	b.n	800ae4e <_strtod_l+0xe6>
 800ae84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ae88:	f04f 3aff 	mov.w	sl, #4294967295
 800ae8c:	e7df      	b.n	800ae4e <_strtod_l+0xe6>
 800ae8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ae90:	1c5a      	adds	r2, r3, #1
 800ae92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae94:	785b      	ldrb	r3, [r3, #1]
 800ae96:	2b30      	cmp	r3, #48	@ 0x30
 800ae98:	d0f9      	beq.n	800ae8e <_strtod_l+0x126>
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d09d      	beq.n	800adda <_strtod_l+0x72>
 800ae9e:	2301      	movs	r3, #1
 800aea0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aea2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aea4:	930c      	str	r3, [sp, #48]	@ 0x30
 800aea6:	2300      	movs	r3, #0
 800aea8:	9308      	str	r3, [sp, #32]
 800aeaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800aeac:	461f      	mov	r7, r3
 800aeae:	220a      	movs	r2, #10
 800aeb0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aeb2:	7805      	ldrb	r5, [r0, #0]
 800aeb4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aeb8:	b2d9      	uxtb	r1, r3
 800aeba:	2909      	cmp	r1, #9
 800aebc:	d928      	bls.n	800af10 <_strtod_l+0x1a8>
 800aebe:	494e      	ldr	r1, [pc, #312]	@ (800aff8 <_strtod_l+0x290>)
 800aec0:	2201      	movs	r2, #1
 800aec2:	f001 fb62 	bl	800c58a <strncmp>
 800aec6:	2800      	cmp	r0, #0
 800aec8:	d032      	beq.n	800af30 <_strtod_l+0x1c8>
 800aeca:	2000      	movs	r0, #0
 800aecc:	462a      	mov	r2, r5
 800aece:	4681      	mov	r9, r0
 800aed0:	463d      	mov	r5, r7
 800aed2:	4603      	mov	r3, r0
 800aed4:	2a65      	cmp	r2, #101	@ 0x65
 800aed6:	d001      	beq.n	800aedc <_strtod_l+0x174>
 800aed8:	2a45      	cmp	r2, #69	@ 0x45
 800aeda:	d114      	bne.n	800af06 <_strtod_l+0x19e>
 800aedc:	b91d      	cbnz	r5, 800aee6 <_strtod_l+0x17e>
 800aede:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aee0:	4302      	orrs	r2, r0
 800aee2:	d095      	beq.n	800ae10 <_strtod_l+0xa8>
 800aee4:	2500      	movs	r5, #0
 800aee6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aee8:	1c62      	adds	r2, r4, #1
 800aeea:	9219      	str	r2, [sp, #100]	@ 0x64
 800aeec:	7862      	ldrb	r2, [r4, #1]
 800aeee:	2a2b      	cmp	r2, #43	@ 0x2b
 800aef0:	d077      	beq.n	800afe2 <_strtod_l+0x27a>
 800aef2:	2a2d      	cmp	r2, #45	@ 0x2d
 800aef4:	d07b      	beq.n	800afee <_strtod_l+0x286>
 800aef6:	f04f 0c00 	mov.w	ip, #0
 800aefa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aefe:	2909      	cmp	r1, #9
 800af00:	f240 8082 	bls.w	800b008 <_strtod_l+0x2a0>
 800af04:	9419      	str	r4, [sp, #100]	@ 0x64
 800af06:	f04f 0800 	mov.w	r8, #0
 800af0a:	e0a2      	b.n	800b052 <_strtod_l+0x2ea>
 800af0c:	2300      	movs	r3, #0
 800af0e:	e7c7      	b.n	800aea0 <_strtod_l+0x138>
 800af10:	2f08      	cmp	r7, #8
 800af12:	bfd5      	itete	le
 800af14:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800af16:	9908      	ldrgt	r1, [sp, #32]
 800af18:	fb02 3301 	mlale	r3, r2, r1, r3
 800af1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800af20:	f100 0001 	add.w	r0, r0, #1
 800af24:	bfd4      	ite	le
 800af26:	930a      	strle	r3, [sp, #40]	@ 0x28
 800af28:	9308      	strgt	r3, [sp, #32]
 800af2a:	3701      	adds	r7, #1
 800af2c:	9019      	str	r0, [sp, #100]	@ 0x64
 800af2e:	e7bf      	b.n	800aeb0 <_strtod_l+0x148>
 800af30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af32:	1c5a      	adds	r2, r3, #1
 800af34:	9219      	str	r2, [sp, #100]	@ 0x64
 800af36:	785a      	ldrb	r2, [r3, #1]
 800af38:	b37f      	cbz	r7, 800af9a <_strtod_l+0x232>
 800af3a:	4681      	mov	r9, r0
 800af3c:	463d      	mov	r5, r7
 800af3e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800af42:	2b09      	cmp	r3, #9
 800af44:	d912      	bls.n	800af6c <_strtod_l+0x204>
 800af46:	2301      	movs	r3, #1
 800af48:	e7c4      	b.n	800aed4 <_strtod_l+0x16c>
 800af4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af4c:	1c5a      	adds	r2, r3, #1
 800af4e:	9219      	str	r2, [sp, #100]	@ 0x64
 800af50:	785a      	ldrb	r2, [r3, #1]
 800af52:	3001      	adds	r0, #1
 800af54:	2a30      	cmp	r2, #48	@ 0x30
 800af56:	d0f8      	beq.n	800af4a <_strtod_l+0x1e2>
 800af58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	f200 84d3 	bhi.w	800b908 <_strtod_l+0xba0>
 800af62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af64:	930c      	str	r3, [sp, #48]	@ 0x30
 800af66:	4681      	mov	r9, r0
 800af68:	2000      	movs	r0, #0
 800af6a:	4605      	mov	r5, r0
 800af6c:	3a30      	subs	r2, #48	@ 0x30
 800af6e:	f100 0301 	add.w	r3, r0, #1
 800af72:	d02a      	beq.n	800afca <_strtod_l+0x262>
 800af74:	4499      	add	r9, r3
 800af76:	eb00 0c05 	add.w	ip, r0, r5
 800af7a:	462b      	mov	r3, r5
 800af7c:	210a      	movs	r1, #10
 800af7e:	4563      	cmp	r3, ip
 800af80:	d10d      	bne.n	800af9e <_strtod_l+0x236>
 800af82:	1c69      	adds	r1, r5, #1
 800af84:	4401      	add	r1, r0
 800af86:	4428      	add	r0, r5
 800af88:	2808      	cmp	r0, #8
 800af8a:	dc16      	bgt.n	800afba <_strtod_l+0x252>
 800af8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af8e:	230a      	movs	r3, #10
 800af90:	fb03 2300 	mla	r3, r3, r0, r2
 800af94:	930a      	str	r3, [sp, #40]	@ 0x28
 800af96:	2300      	movs	r3, #0
 800af98:	e018      	b.n	800afcc <_strtod_l+0x264>
 800af9a:	4638      	mov	r0, r7
 800af9c:	e7da      	b.n	800af54 <_strtod_l+0x1ec>
 800af9e:	2b08      	cmp	r3, #8
 800afa0:	f103 0301 	add.w	r3, r3, #1
 800afa4:	dc03      	bgt.n	800afae <_strtod_l+0x246>
 800afa6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800afa8:	434e      	muls	r6, r1
 800afaa:	960a      	str	r6, [sp, #40]	@ 0x28
 800afac:	e7e7      	b.n	800af7e <_strtod_l+0x216>
 800afae:	2b10      	cmp	r3, #16
 800afb0:	bfde      	ittt	le
 800afb2:	9e08      	ldrle	r6, [sp, #32]
 800afb4:	434e      	mulle	r6, r1
 800afb6:	9608      	strle	r6, [sp, #32]
 800afb8:	e7e1      	b.n	800af7e <_strtod_l+0x216>
 800afba:	280f      	cmp	r0, #15
 800afbc:	dceb      	bgt.n	800af96 <_strtod_l+0x22e>
 800afbe:	9808      	ldr	r0, [sp, #32]
 800afc0:	230a      	movs	r3, #10
 800afc2:	fb03 2300 	mla	r3, r3, r0, r2
 800afc6:	9308      	str	r3, [sp, #32]
 800afc8:	e7e5      	b.n	800af96 <_strtod_l+0x22e>
 800afca:	4629      	mov	r1, r5
 800afcc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afce:	1c50      	adds	r0, r2, #1
 800afd0:	9019      	str	r0, [sp, #100]	@ 0x64
 800afd2:	7852      	ldrb	r2, [r2, #1]
 800afd4:	4618      	mov	r0, r3
 800afd6:	460d      	mov	r5, r1
 800afd8:	e7b1      	b.n	800af3e <_strtod_l+0x1d6>
 800afda:	f04f 0900 	mov.w	r9, #0
 800afde:	2301      	movs	r3, #1
 800afe0:	e77d      	b.n	800aede <_strtod_l+0x176>
 800afe2:	f04f 0c00 	mov.w	ip, #0
 800afe6:	1ca2      	adds	r2, r4, #2
 800afe8:	9219      	str	r2, [sp, #100]	@ 0x64
 800afea:	78a2      	ldrb	r2, [r4, #2]
 800afec:	e785      	b.n	800aefa <_strtod_l+0x192>
 800afee:	f04f 0c01 	mov.w	ip, #1
 800aff2:	e7f8      	b.n	800afe6 <_strtod_l+0x27e>
 800aff4:	0800d720 	.word	0x0800d720
 800aff8:	0800d708 	.word	0x0800d708
 800affc:	7ff00000 	.word	0x7ff00000
 800b000:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b002:	1c51      	adds	r1, r2, #1
 800b004:	9119      	str	r1, [sp, #100]	@ 0x64
 800b006:	7852      	ldrb	r2, [r2, #1]
 800b008:	2a30      	cmp	r2, #48	@ 0x30
 800b00a:	d0f9      	beq.n	800b000 <_strtod_l+0x298>
 800b00c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b010:	2908      	cmp	r1, #8
 800b012:	f63f af78 	bhi.w	800af06 <_strtod_l+0x19e>
 800b016:	3a30      	subs	r2, #48	@ 0x30
 800b018:	920e      	str	r2, [sp, #56]	@ 0x38
 800b01a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b01c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b01e:	f04f 080a 	mov.w	r8, #10
 800b022:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b024:	1c56      	adds	r6, r2, #1
 800b026:	9619      	str	r6, [sp, #100]	@ 0x64
 800b028:	7852      	ldrb	r2, [r2, #1]
 800b02a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b02e:	f1be 0f09 	cmp.w	lr, #9
 800b032:	d939      	bls.n	800b0a8 <_strtod_l+0x340>
 800b034:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b036:	1a76      	subs	r6, r6, r1
 800b038:	2e08      	cmp	r6, #8
 800b03a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b03e:	dc03      	bgt.n	800b048 <_strtod_l+0x2e0>
 800b040:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b042:	4588      	cmp	r8, r1
 800b044:	bfa8      	it	ge
 800b046:	4688      	movge	r8, r1
 800b048:	f1bc 0f00 	cmp.w	ip, #0
 800b04c:	d001      	beq.n	800b052 <_strtod_l+0x2ea>
 800b04e:	f1c8 0800 	rsb	r8, r8, #0
 800b052:	2d00      	cmp	r5, #0
 800b054:	d14e      	bne.n	800b0f4 <_strtod_l+0x38c>
 800b056:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b058:	4308      	orrs	r0, r1
 800b05a:	f47f aebe 	bne.w	800adda <_strtod_l+0x72>
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f47f aed6 	bne.w	800ae10 <_strtod_l+0xa8>
 800b064:	2a69      	cmp	r2, #105	@ 0x69
 800b066:	d028      	beq.n	800b0ba <_strtod_l+0x352>
 800b068:	dc25      	bgt.n	800b0b6 <_strtod_l+0x34e>
 800b06a:	2a49      	cmp	r2, #73	@ 0x49
 800b06c:	d025      	beq.n	800b0ba <_strtod_l+0x352>
 800b06e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b070:	f47f aece 	bne.w	800ae10 <_strtod_l+0xa8>
 800b074:	499b      	ldr	r1, [pc, #620]	@ (800b2e4 <_strtod_l+0x57c>)
 800b076:	a819      	add	r0, sp, #100	@ 0x64
 800b078:	f001 fd6e 	bl	800cb58 <__match>
 800b07c:	2800      	cmp	r0, #0
 800b07e:	f43f aec7 	beq.w	800ae10 <_strtod_l+0xa8>
 800b082:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	2b28      	cmp	r3, #40	@ 0x28
 800b088:	d12e      	bne.n	800b0e8 <_strtod_l+0x380>
 800b08a:	4997      	ldr	r1, [pc, #604]	@ (800b2e8 <_strtod_l+0x580>)
 800b08c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b08e:	a819      	add	r0, sp, #100	@ 0x64
 800b090:	f001 fd76 	bl	800cb80 <__hexnan>
 800b094:	2805      	cmp	r0, #5
 800b096:	d127      	bne.n	800b0e8 <_strtod_l+0x380>
 800b098:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b09a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b09e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b0a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b0a6:	e698      	b.n	800adda <_strtod_l+0x72>
 800b0a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b0aa:	fb08 2101 	mla	r1, r8, r1, r2
 800b0ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b0b2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0b4:	e7b5      	b.n	800b022 <_strtod_l+0x2ba>
 800b0b6:	2a6e      	cmp	r2, #110	@ 0x6e
 800b0b8:	e7da      	b.n	800b070 <_strtod_l+0x308>
 800b0ba:	498c      	ldr	r1, [pc, #560]	@ (800b2ec <_strtod_l+0x584>)
 800b0bc:	a819      	add	r0, sp, #100	@ 0x64
 800b0be:	f001 fd4b 	bl	800cb58 <__match>
 800b0c2:	2800      	cmp	r0, #0
 800b0c4:	f43f aea4 	beq.w	800ae10 <_strtod_l+0xa8>
 800b0c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0ca:	4989      	ldr	r1, [pc, #548]	@ (800b2f0 <_strtod_l+0x588>)
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	a819      	add	r0, sp, #100	@ 0x64
 800b0d0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b0d2:	f001 fd41 	bl	800cb58 <__match>
 800b0d6:	b910      	cbnz	r0, 800b0de <_strtod_l+0x376>
 800b0d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0da:	3301      	adds	r3, #1
 800b0dc:	9319      	str	r3, [sp, #100]	@ 0x64
 800b0de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b300 <_strtod_l+0x598>
 800b0e2:	f04f 0a00 	mov.w	sl, #0
 800b0e6:	e678      	b.n	800adda <_strtod_l+0x72>
 800b0e8:	4882      	ldr	r0, [pc, #520]	@ (800b2f4 <_strtod_l+0x58c>)
 800b0ea:	f001 fa71 	bl	800c5d0 <nan>
 800b0ee:	ec5b ab10 	vmov	sl, fp, d0
 800b0f2:	e672      	b.n	800adda <_strtod_l+0x72>
 800b0f4:	eba8 0309 	sub.w	r3, r8, r9
 800b0f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b0fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0fc:	2f00      	cmp	r7, #0
 800b0fe:	bf08      	it	eq
 800b100:	462f      	moveq	r7, r5
 800b102:	2d10      	cmp	r5, #16
 800b104:	462c      	mov	r4, r5
 800b106:	bfa8      	it	ge
 800b108:	2410      	movge	r4, #16
 800b10a:	f7f5 fa23 	bl	8000554 <__aeabi_ui2d>
 800b10e:	2d09      	cmp	r5, #9
 800b110:	4682      	mov	sl, r0
 800b112:	468b      	mov	fp, r1
 800b114:	dc13      	bgt.n	800b13e <_strtod_l+0x3d6>
 800b116:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b118:	2b00      	cmp	r3, #0
 800b11a:	f43f ae5e 	beq.w	800adda <_strtod_l+0x72>
 800b11e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b120:	dd78      	ble.n	800b214 <_strtod_l+0x4ac>
 800b122:	2b16      	cmp	r3, #22
 800b124:	dc5f      	bgt.n	800b1e6 <_strtod_l+0x47e>
 800b126:	4974      	ldr	r1, [pc, #464]	@ (800b2f8 <_strtod_l+0x590>)
 800b128:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b12c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b130:	4652      	mov	r2, sl
 800b132:	465b      	mov	r3, fp
 800b134:	f7f5 fa88 	bl	8000648 <__aeabi_dmul>
 800b138:	4682      	mov	sl, r0
 800b13a:	468b      	mov	fp, r1
 800b13c:	e64d      	b.n	800adda <_strtod_l+0x72>
 800b13e:	4b6e      	ldr	r3, [pc, #440]	@ (800b2f8 <_strtod_l+0x590>)
 800b140:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b144:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b148:	f7f5 fa7e 	bl	8000648 <__aeabi_dmul>
 800b14c:	4682      	mov	sl, r0
 800b14e:	9808      	ldr	r0, [sp, #32]
 800b150:	468b      	mov	fp, r1
 800b152:	f7f5 f9ff 	bl	8000554 <__aeabi_ui2d>
 800b156:	4602      	mov	r2, r0
 800b158:	460b      	mov	r3, r1
 800b15a:	4650      	mov	r0, sl
 800b15c:	4659      	mov	r1, fp
 800b15e:	f7f5 f8bd 	bl	80002dc <__adddf3>
 800b162:	2d0f      	cmp	r5, #15
 800b164:	4682      	mov	sl, r0
 800b166:	468b      	mov	fp, r1
 800b168:	ddd5      	ble.n	800b116 <_strtod_l+0x3ae>
 800b16a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b16c:	1b2c      	subs	r4, r5, r4
 800b16e:	441c      	add	r4, r3
 800b170:	2c00      	cmp	r4, #0
 800b172:	f340 8096 	ble.w	800b2a2 <_strtod_l+0x53a>
 800b176:	f014 030f 	ands.w	r3, r4, #15
 800b17a:	d00a      	beq.n	800b192 <_strtod_l+0x42a>
 800b17c:	495e      	ldr	r1, [pc, #376]	@ (800b2f8 <_strtod_l+0x590>)
 800b17e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b182:	4652      	mov	r2, sl
 800b184:	465b      	mov	r3, fp
 800b186:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b18a:	f7f5 fa5d 	bl	8000648 <__aeabi_dmul>
 800b18e:	4682      	mov	sl, r0
 800b190:	468b      	mov	fp, r1
 800b192:	f034 040f 	bics.w	r4, r4, #15
 800b196:	d073      	beq.n	800b280 <_strtod_l+0x518>
 800b198:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b19c:	dd48      	ble.n	800b230 <_strtod_l+0x4c8>
 800b19e:	2400      	movs	r4, #0
 800b1a0:	46a0      	mov	r8, r4
 800b1a2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b1a4:	46a1      	mov	r9, r4
 800b1a6:	9a05      	ldr	r2, [sp, #20]
 800b1a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b300 <_strtod_l+0x598>
 800b1ac:	2322      	movs	r3, #34	@ 0x22
 800b1ae:	6013      	str	r3, [r2, #0]
 800b1b0:	f04f 0a00 	mov.w	sl, #0
 800b1b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	f43f ae0f 	beq.w	800adda <_strtod_l+0x72>
 800b1bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1be:	9805      	ldr	r0, [sp, #20]
 800b1c0:	f7ff f942 	bl	800a448 <_Bfree>
 800b1c4:	9805      	ldr	r0, [sp, #20]
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	f7ff f93e 	bl	800a448 <_Bfree>
 800b1cc:	9805      	ldr	r0, [sp, #20]
 800b1ce:	4641      	mov	r1, r8
 800b1d0:	f7ff f93a 	bl	800a448 <_Bfree>
 800b1d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1d6:	9805      	ldr	r0, [sp, #20]
 800b1d8:	f7ff f936 	bl	800a448 <_Bfree>
 800b1dc:	9805      	ldr	r0, [sp, #20]
 800b1de:	4621      	mov	r1, r4
 800b1e0:	f7ff f932 	bl	800a448 <_Bfree>
 800b1e4:	e5f9      	b.n	800adda <_strtod_l+0x72>
 800b1e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	dbbc      	blt.n	800b16a <_strtod_l+0x402>
 800b1f0:	4c41      	ldr	r4, [pc, #260]	@ (800b2f8 <_strtod_l+0x590>)
 800b1f2:	f1c5 050f 	rsb	r5, r5, #15
 800b1f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b1fa:	4652      	mov	r2, sl
 800b1fc:	465b      	mov	r3, fp
 800b1fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b202:	f7f5 fa21 	bl	8000648 <__aeabi_dmul>
 800b206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b208:	1b5d      	subs	r5, r3, r5
 800b20a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b20e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b212:	e78f      	b.n	800b134 <_strtod_l+0x3cc>
 800b214:	3316      	adds	r3, #22
 800b216:	dba8      	blt.n	800b16a <_strtod_l+0x402>
 800b218:	4b37      	ldr	r3, [pc, #220]	@ (800b2f8 <_strtod_l+0x590>)
 800b21a:	eba9 0808 	sub.w	r8, r9, r8
 800b21e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b222:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b226:	4650      	mov	r0, sl
 800b228:	4659      	mov	r1, fp
 800b22a:	f7f5 fb37 	bl	800089c <__aeabi_ddiv>
 800b22e:	e783      	b.n	800b138 <_strtod_l+0x3d0>
 800b230:	4b32      	ldr	r3, [pc, #200]	@ (800b2fc <_strtod_l+0x594>)
 800b232:	9308      	str	r3, [sp, #32]
 800b234:	2300      	movs	r3, #0
 800b236:	1124      	asrs	r4, r4, #4
 800b238:	4650      	mov	r0, sl
 800b23a:	4659      	mov	r1, fp
 800b23c:	461e      	mov	r6, r3
 800b23e:	2c01      	cmp	r4, #1
 800b240:	dc21      	bgt.n	800b286 <_strtod_l+0x51e>
 800b242:	b10b      	cbz	r3, 800b248 <_strtod_l+0x4e0>
 800b244:	4682      	mov	sl, r0
 800b246:	468b      	mov	fp, r1
 800b248:	492c      	ldr	r1, [pc, #176]	@ (800b2fc <_strtod_l+0x594>)
 800b24a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b24e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b252:	4652      	mov	r2, sl
 800b254:	465b      	mov	r3, fp
 800b256:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b25a:	f7f5 f9f5 	bl	8000648 <__aeabi_dmul>
 800b25e:	4b28      	ldr	r3, [pc, #160]	@ (800b300 <_strtod_l+0x598>)
 800b260:	460a      	mov	r2, r1
 800b262:	400b      	ands	r3, r1
 800b264:	4927      	ldr	r1, [pc, #156]	@ (800b304 <_strtod_l+0x59c>)
 800b266:	428b      	cmp	r3, r1
 800b268:	4682      	mov	sl, r0
 800b26a:	d898      	bhi.n	800b19e <_strtod_l+0x436>
 800b26c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b270:	428b      	cmp	r3, r1
 800b272:	bf86      	itte	hi
 800b274:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b308 <_strtod_l+0x5a0>
 800b278:	f04f 3aff 	movhi.w	sl, #4294967295
 800b27c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b280:	2300      	movs	r3, #0
 800b282:	9308      	str	r3, [sp, #32]
 800b284:	e07a      	b.n	800b37c <_strtod_l+0x614>
 800b286:	07e2      	lsls	r2, r4, #31
 800b288:	d505      	bpl.n	800b296 <_strtod_l+0x52e>
 800b28a:	9b08      	ldr	r3, [sp, #32]
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f5 f9da 	bl	8000648 <__aeabi_dmul>
 800b294:	2301      	movs	r3, #1
 800b296:	9a08      	ldr	r2, [sp, #32]
 800b298:	3208      	adds	r2, #8
 800b29a:	3601      	adds	r6, #1
 800b29c:	1064      	asrs	r4, r4, #1
 800b29e:	9208      	str	r2, [sp, #32]
 800b2a0:	e7cd      	b.n	800b23e <_strtod_l+0x4d6>
 800b2a2:	d0ed      	beq.n	800b280 <_strtod_l+0x518>
 800b2a4:	4264      	negs	r4, r4
 800b2a6:	f014 020f 	ands.w	r2, r4, #15
 800b2aa:	d00a      	beq.n	800b2c2 <_strtod_l+0x55a>
 800b2ac:	4b12      	ldr	r3, [pc, #72]	@ (800b2f8 <_strtod_l+0x590>)
 800b2ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2b2:	4650      	mov	r0, sl
 800b2b4:	4659      	mov	r1, fp
 800b2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ba:	f7f5 faef 	bl	800089c <__aeabi_ddiv>
 800b2be:	4682      	mov	sl, r0
 800b2c0:	468b      	mov	fp, r1
 800b2c2:	1124      	asrs	r4, r4, #4
 800b2c4:	d0dc      	beq.n	800b280 <_strtod_l+0x518>
 800b2c6:	2c1f      	cmp	r4, #31
 800b2c8:	dd20      	ble.n	800b30c <_strtod_l+0x5a4>
 800b2ca:	2400      	movs	r4, #0
 800b2cc:	46a0      	mov	r8, r4
 800b2ce:	940a      	str	r4, [sp, #40]	@ 0x28
 800b2d0:	46a1      	mov	r9, r4
 800b2d2:	9a05      	ldr	r2, [sp, #20]
 800b2d4:	2322      	movs	r3, #34	@ 0x22
 800b2d6:	f04f 0a00 	mov.w	sl, #0
 800b2da:	f04f 0b00 	mov.w	fp, #0
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	e768      	b.n	800b1b4 <_strtod_l+0x44c>
 800b2e2:	bf00      	nop
 800b2e4:	0800d4f9 	.word	0x0800d4f9
 800b2e8:	0800d70c 	.word	0x0800d70c
 800b2ec:	0800d4f1 	.word	0x0800d4f1
 800b2f0:	0800d526 	.word	0x0800d526
 800b2f4:	0800d8d0 	.word	0x0800d8d0
 800b2f8:	0800d640 	.word	0x0800d640
 800b2fc:	0800d618 	.word	0x0800d618
 800b300:	7ff00000 	.word	0x7ff00000
 800b304:	7ca00000 	.word	0x7ca00000
 800b308:	7fefffff 	.word	0x7fefffff
 800b30c:	f014 0310 	ands.w	r3, r4, #16
 800b310:	bf18      	it	ne
 800b312:	236a      	movne	r3, #106	@ 0x6a
 800b314:	4ea9      	ldr	r6, [pc, #676]	@ (800b5bc <_strtod_l+0x854>)
 800b316:	9308      	str	r3, [sp, #32]
 800b318:	4650      	mov	r0, sl
 800b31a:	4659      	mov	r1, fp
 800b31c:	2300      	movs	r3, #0
 800b31e:	07e2      	lsls	r2, r4, #31
 800b320:	d504      	bpl.n	800b32c <_strtod_l+0x5c4>
 800b322:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b326:	f7f5 f98f 	bl	8000648 <__aeabi_dmul>
 800b32a:	2301      	movs	r3, #1
 800b32c:	1064      	asrs	r4, r4, #1
 800b32e:	f106 0608 	add.w	r6, r6, #8
 800b332:	d1f4      	bne.n	800b31e <_strtod_l+0x5b6>
 800b334:	b10b      	cbz	r3, 800b33a <_strtod_l+0x5d2>
 800b336:	4682      	mov	sl, r0
 800b338:	468b      	mov	fp, r1
 800b33a:	9b08      	ldr	r3, [sp, #32]
 800b33c:	b1b3      	cbz	r3, 800b36c <_strtod_l+0x604>
 800b33e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b342:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b346:	2b00      	cmp	r3, #0
 800b348:	4659      	mov	r1, fp
 800b34a:	dd0f      	ble.n	800b36c <_strtod_l+0x604>
 800b34c:	2b1f      	cmp	r3, #31
 800b34e:	dd55      	ble.n	800b3fc <_strtod_l+0x694>
 800b350:	2b34      	cmp	r3, #52	@ 0x34
 800b352:	bfde      	ittt	le
 800b354:	f04f 33ff 	movle.w	r3, #4294967295
 800b358:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b35c:	4093      	lslle	r3, r2
 800b35e:	f04f 0a00 	mov.w	sl, #0
 800b362:	bfcc      	ite	gt
 800b364:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b368:	ea03 0b01 	andle.w	fp, r3, r1
 800b36c:	2200      	movs	r2, #0
 800b36e:	2300      	movs	r3, #0
 800b370:	4650      	mov	r0, sl
 800b372:	4659      	mov	r1, fp
 800b374:	f7f5 fbd0 	bl	8000b18 <__aeabi_dcmpeq>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d1a6      	bne.n	800b2ca <_strtod_l+0x562>
 800b37c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b382:	9805      	ldr	r0, [sp, #20]
 800b384:	462b      	mov	r3, r5
 800b386:	463a      	mov	r2, r7
 800b388:	f7ff f8c6 	bl	800a518 <__s2b>
 800b38c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b38e:	2800      	cmp	r0, #0
 800b390:	f43f af05 	beq.w	800b19e <_strtod_l+0x436>
 800b394:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b396:	2a00      	cmp	r2, #0
 800b398:	eba9 0308 	sub.w	r3, r9, r8
 800b39c:	bfa8      	it	ge
 800b39e:	2300      	movge	r3, #0
 800b3a0:	9312      	str	r3, [sp, #72]	@ 0x48
 800b3a2:	2400      	movs	r4, #0
 800b3a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b3a8:	9316      	str	r3, [sp, #88]	@ 0x58
 800b3aa:	46a0      	mov	r8, r4
 800b3ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3ae:	9805      	ldr	r0, [sp, #20]
 800b3b0:	6859      	ldr	r1, [r3, #4]
 800b3b2:	f7ff f809 	bl	800a3c8 <_Balloc>
 800b3b6:	4681      	mov	r9, r0
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	f43f aef4 	beq.w	800b1a6 <_strtod_l+0x43e>
 800b3be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3c0:	691a      	ldr	r2, [r3, #16]
 800b3c2:	3202      	adds	r2, #2
 800b3c4:	f103 010c 	add.w	r1, r3, #12
 800b3c8:	0092      	lsls	r2, r2, #2
 800b3ca:	300c      	adds	r0, #12
 800b3cc:	f7fe f899 	bl	8009502 <memcpy>
 800b3d0:	ec4b ab10 	vmov	d0, sl, fp
 800b3d4:	9805      	ldr	r0, [sp, #20]
 800b3d6:	aa1c      	add	r2, sp, #112	@ 0x70
 800b3d8:	a91b      	add	r1, sp, #108	@ 0x6c
 800b3da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b3de:	f7ff fbd7 	bl	800ab90 <__d2b>
 800b3e2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b3e4:	2800      	cmp	r0, #0
 800b3e6:	f43f aede 	beq.w	800b1a6 <_strtod_l+0x43e>
 800b3ea:	9805      	ldr	r0, [sp, #20]
 800b3ec:	2101      	movs	r1, #1
 800b3ee:	f7ff f929 	bl	800a644 <__i2b>
 800b3f2:	4680      	mov	r8, r0
 800b3f4:	b948      	cbnz	r0, 800b40a <_strtod_l+0x6a2>
 800b3f6:	f04f 0800 	mov.w	r8, #0
 800b3fa:	e6d4      	b.n	800b1a6 <_strtod_l+0x43e>
 800b3fc:	f04f 32ff 	mov.w	r2, #4294967295
 800b400:	fa02 f303 	lsl.w	r3, r2, r3
 800b404:	ea03 0a0a 	and.w	sl, r3, sl
 800b408:	e7b0      	b.n	800b36c <_strtod_l+0x604>
 800b40a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b40c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b40e:	2d00      	cmp	r5, #0
 800b410:	bfab      	itete	ge
 800b412:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b414:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b416:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b418:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b41a:	bfac      	ite	ge
 800b41c:	18ef      	addge	r7, r5, r3
 800b41e:	1b5e      	sublt	r6, r3, r5
 800b420:	9b08      	ldr	r3, [sp, #32]
 800b422:	1aed      	subs	r5, r5, r3
 800b424:	4415      	add	r5, r2
 800b426:	4b66      	ldr	r3, [pc, #408]	@ (800b5c0 <_strtod_l+0x858>)
 800b428:	3d01      	subs	r5, #1
 800b42a:	429d      	cmp	r5, r3
 800b42c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b430:	da50      	bge.n	800b4d4 <_strtod_l+0x76c>
 800b432:	1b5b      	subs	r3, r3, r5
 800b434:	2b1f      	cmp	r3, #31
 800b436:	eba2 0203 	sub.w	r2, r2, r3
 800b43a:	f04f 0101 	mov.w	r1, #1
 800b43e:	dc3d      	bgt.n	800b4bc <_strtod_l+0x754>
 800b440:	fa01 f303 	lsl.w	r3, r1, r3
 800b444:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b446:	2300      	movs	r3, #0
 800b448:	9310      	str	r3, [sp, #64]	@ 0x40
 800b44a:	18bd      	adds	r5, r7, r2
 800b44c:	9b08      	ldr	r3, [sp, #32]
 800b44e:	42af      	cmp	r7, r5
 800b450:	4416      	add	r6, r2
 800b452:	441e      	add	r6, r3
 800b454:	463b      	mov	r3, r7
 800b456:	bfa8      	it	ge
 800b458:	462b      	movge	r3, r5
 800b45a:	42b3      	cmp	r3, r6
 800b45c:	bfa8      	it	ge
 800b45e:	4633      	movge	r3, r6
 800b460:	2b00      	cmp	r3, #0
 800b462:	bfc2      	ittt	gt
 800b464:	1aed      	subgt	r5, r5, r3
 800b466:	1af6      	subgt	r6, r6, r3
 800b468:	1aff      	subgt	r7, r7, r3
 800b46a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dd16      	ble.n	800b49e <_strtod_l+0x736>
 800b470:	4641      	mov	r1, r8
 800b472:	9805      	ldr	r0, [sp, #20]
 800b474:	461a      	mov	r2, r3
 800b476:	f7ff f9a5 	bl	800a7c4 <__pow5mult>
 800b47a:	4680      	mov	r8, r0
 800b47c:	2800      	cmp	r0, #0
 800b47e:	d0ba      	beq.n	800b3f6 <_strtod_l+0x68e>
 800b480:	4601      	mov	r1, r0
 800b482:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b484:	9805      	ldr	r0, [sp, #20]
 800b486:	f7ff f8f3 	bl	800a670 <__multiply>
 800b48a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b48c:	2800      	cmp	r0, #0
 800b48e:	f43f ae8a 	beq.w	800b1a6 <_strtod_l+0x43e>
 800b492:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b494:	9805      	ldr	r0, [sp, #20]
 800b496:	f7fe ffd7 	bl	800a448 <_Bfree>
 800b49a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b49c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b49e:	2d00      	cmp	r5, #0
 800b4a0:	dc1d      	bgt.n	800b4de <_strtod_l+0x776>
 800b4a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	dd23      	ble.n	800b4f0 <_strtod_l+0x788>
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b4ac:	9805      	ldr	r0, [sp, #20]
 800b4ae:	f7ff f989 	bl	800a7c4 <__pow5mult>
 800b4b2:	4681      	mov	r9, r0
 800b4b4:	b9e0      	cbnz	r0, 800b4f0 <_strtod_l+0x788>
 800b4b6:	f04f 0900 	mov.w	r9, #0
 800b4ba:	e674      	b.n	800b1a6 <_strtod_l+0x43e>
 800b4bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b4c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b4c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b4c8:	35e2      	adds	r5, #226	@ 0xe2
 800b4ca:	fa01 f305 	lsl.w	r3, r1, r5
 800b4ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b4d2:	e7ba      	b.n	800b44a <_strtod_l+0x6e2>
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4d8:	2301      	movs	r3, #1
 800b4da:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4dc:	e7b5      	b.n	800b44a <_strtod_l+0x6e2>
 800b4de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4e0:	9805      	ldr	r0, [sp, #20]
 800b4e2:	462a      	mov	r2, r5
 800b4e4:	f7ff f9c8 	bl	800a878 <__lshift>
 800b4e8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	d1d9      	bne.n	800b4a2 <_strtod_l+0x73a>
 800b4ee:	e65a      	b.n	800b1a6 <_strtod_l+0x43e>
 800b4f0:	2e00      	cmp	r6, #0
 800b4f2:	dd07      	ble.n	800b504 <_strtod_l+0x79c>
 800b4f4:	4649      	mov	r1, r9
 800b4f6:	9805      	ldr	r0, [sp, #20]
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	f7ff f9bd 	bl	800a878 <__lshift>
 800b4fe:	4681      	mov	r9, r0
 800b500:	2800      	cmp	r0, #0
 800b502:	d0d8      	beq.n	800b4b6 <_strtod_l+0x74e>
 800b504:	2f00      	cmp	r7, #0
 800b506:	dd08      	ble.n	800b51a <_strtod_l+0x7b2>
 800b508:	4641      	mov	r1, r8
 800b50a:	9805      	ldr	r0, [sp, #20]
 800b50c:	463a      	mov	r2, r7
 800b50e:	f7ff f9b3 	bl	800a878 <__lshift>
 800b512:	4680      	mov	r8, r0
 800b514:	2800      	cmp	r0, #0
 800b516:	f43f ae46 	beq.w	800b1a6 <_strtod_l+0x43e>
 800b51a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b51c:	9805      	ldr	r0, [sp, #20]
 800b51e:	464a      	mov	r2, r9
 800b520:	f7ff fa32 	bl	800a988 <__mdiff>
 800b524:	4604      	mov	r4, r0
 800b526:	2800      	cmp	r0, #0
 800b528:	f43f ae3d 	beq.w	800b1a6 <_strtod_l+0x43e>
 800b52c:	68c3      	ldr	r3, [r0, #12]
 800b52e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b530:	2300      	movs	r3, #0
 800b532:	60c3      	str	r3, [r0, #12]
 800b534:	4641      	mov	r1, r8
 800b536:	f7ff fa0b 	bl	800a950 <__mcmp>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	da46      	bge.n	800b5cc <_strtod_l+0x864>
 800b53e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b540:	ea53 030a 	orrs.w	r3, r3, sl
 800b544:	d16c      	bne.n	800b620 <_strtod_l+0x8b8>
 800b546:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d168      	bne.n	800b620 <_strtod_l+0x8b8>
 800b54e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b552:	0d1b      	lsrs	r3, r3, #20
 800b554:	051b      	lsls	r3, r3, #20
 800b556:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b55a:	d961      	bls.n	800b620 <_strtod_l+0x8b8>
 800b55c:	6963      	ldr	r3, [r4, #20]
 800b55e:	b913      	cbnz	r3, 800b566 <_strtod_l+0x7fe>
 800b560:	6923      	ldr	r3, [r4, #16]
 800b562:	2b01      	cmp	r3, #1
 800b564:	dd5c      	ble.n	800b620 <_strtod_l+0x8b8>
 800b566:	4621      	mov	r1, r4
 800b568:	2201      	movs	r2, #1
 800b56a:	9805      	ldr	r0, [sp, #20]
 800b56c:	f7ff f984 	bl	800a878 <__lshift>
 800b570:	4641      	mov	r1, r8
 800b572:	4604      	mov	r4, r0
 800b574:	f7ff f9ec 	bl	800a950 <__mcmp>
 800b578:	2800      	cmp	r0, #0
 800b57a:	dd51      	ble.n	800b620 <_strtod_l+0x8b8>
 800b57c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b580:	9a08      	ldr	r2, [sp, #32]
 800b582:	0d1b      	lsrs	r3, r3, #20
 800b584:	051b      	lsls	r3, r3, #20
 800b586:	2a00      	cmp	r2, #0
 800b588:	d06b      	beq.n	800b662 <_strtod_l+0x8fa>
 800b58a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b58e:	d868      	bhi.n	800b662 <_strtod_l+0x8fa>
 800b590:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b594:	f67f ae9d 	bls.w	800b2d2 <_strtod_l+0x56a>
 800b598:	4b0a      	ldr	r3, [pc, #40]	@ (800b5c4 <_strtod_l+0x85c>)
 800b59a:	4650      	mov	r0, sl
 800b59c:	4659      	mov	r1, fp
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f7f5 f852 	bl	8000648 <__aeabi_dmul>
 800b5a4:	4b08      	ldr	r3, [pc, #32]	@ (800b5c8 <_strtod_l+0x860>)
 800b5a6:	400b      	ands	r3, r1
 800b5a8:	4682      	mov	sl, r0
 800b5aa:	468b      	mov	fp, r1
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	f47f ae05 	bne.w	800b1bc <_strtod_l+0x454>
 800b5b2:	9a05      	ldr	r2, [sp, #20]
 800b5b4:	2322      	movs	r3, #34	@ 0x22
 800b5b6:	6013      	str	r3, [r2, #0]
 800b5b8:	e600      	b.n	800b1bc <_strtod_l+0x454>
 800b5ba:	bf00      	nop
 800b5bc:	0800d738 	.word	0x0800d738
 800b5c0:	fffffc02 	.word	0xfffffc02
 800b5c4:	39500000 	.word	0x39500000
 800b5c8:	7ff00000 	.word	0x7ff00000
 800b5cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b5d0:	d165      	bne.n	800b69e <_strtod_l+0x936>
 800b5d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b5d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5d8:	b35a      	cbz	r2, 800b632 <_strtod_l+0x8ca>
 800b5da:	4a9f      	ldr	r2, [pc, #636]	@ (800b858 <_strtod_l+0xaf0>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d12b      	bne.n	800b638 <_strtod_l+0x8d0>
 800b5e0:	9b08      	ldr	r3, [sp, #32]
 800b5e2:	4651      	mov	r1, sl
 800b5e4:	b303      	cbz	r3, 800b628 <_strtod_l+0x8c0>
 800b5e6:	4b9d      	ldr	r3, [pc, #628]	@ (800b85c <_strtod_l+0xaf4>)
 800b5e8:	465a      	mov	r2, fp
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b5f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b5f4:	d81b      	bhi.n	800b62e <_strtod_l+0x8c6>
 800b5f6:	0d1b      	lsrs	r3, r3, #20
 800b5f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b5fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b600:	4299      	cmp	r1, r3
 800b602:	d119      	bne.n	800b638 <_strtod_l+0x8d0>
 800b604:	4b96      	ldr	r3, [pc, #600]	@ (800b860 <_strtod_l+0xaf8>)
 800b606:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b608:	429a      	cmp	r2, r3
 800b60a:	d102      	bne.n	800b612 <_strtod_l+0x8aa>
 800b60c:	3101      	adds	r1, #1
 800b60e:	f43f adca 	beq.w	800b1a6 <_strtod_l+0x43e>
 800b612:	4b92      	ldr	r3, [pc, #584]	@ (800b85c <_strtod_l+0xaf4>)
 800b614:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b616:	401a      	ands	r2, r3
 800b618:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b61c:	f04f 0a00 	mov.w	sl, #0
 800b620:	9b08      	ldr	r3, [sp, #32]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d1b8      	bne.n	800b598 <_strtod_l+0x830>
 800b626:	e5c9      	b.n	800b1bc <_strtod_l+0x454>
 800b628:	f04f 33ff 	mov.w	r3, #4294967295
 800b62c:	e7e8      	b.n	800b600 <_strtod_l+0x898>
 800b62e:	4613      	mov	r3, r2
 800b630:	e7e6      	b.n	800b600 <_strtod_l+0x898>
 800b632:	ea53 030a 	orrs.w	r3, r3, sl
 800b636:	d0a1      	beq.n	800b57c <_strtod_l+0x814>
 800b638:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b63a:	b1db      	cbz	r3, 800b674 <_strtod_l+0x90c>
 800b63c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b63e:	4213      	tst	r3, r2
 800b640:	d0ee      	beq.n	800b620 <_strtod_l+0x8b8>
 800b642:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b644:	9a08      	ldr	r2, [sp, #32]
 800b646:	4650      	mov	r0, sl
 800b648:	4659      	mov	r1, fp
 800b64a:	b1bb      	cbz	r3, 800b67c <_strtod_l+0x914>
 800b64c:	f7ff fb6e 	bl	800ad2c <sulp>
 800b650:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b654:	ec53 2b10 	vmov	r2, r3, d0
 800b658:	f7f4 fe40 	bl	80002dc <__adddf3>
 800b65c:	4682      	mov	sl, r0
 800b65e:	468b      	mov	fp, r1
 800b660:	e7de      	b.n	800b620 <_strtod_l+0x8b8>
 800b662:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b666:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b66a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b66e:	f04f 3aff 	mov.w	sl, #4294967295
 800b672:	e7d5      	b.n	800b620 <_strtod_l+0x8b8>
 800b674:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b676:	ea13 0f0a 	tst.w	r3, sl
 800b67a:	e7e1      	b.n	800b640 <_strtod_l+0x8d8>
 800b67c:	f7ff fb56 	bl	800ad2c <sulp>
 800b680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b684:	ec53 2b10 	vmov	r2, r3, d0
 800b688:	f7f4 fe26 	bl	80002d8 <__aeabi_dsub>
 800b68c:	2200      	movs	r2, #0
 800b68e:	2300      	movs	r3, #0
 800b690:	4682      	mov	sl, r0
 800b692:	468b      	mov	fp, r1
 800b694:	f7f5 fa40 	bl	8000b18 <__aeabi_dcmpeq>
 800b698:	2800      	cmp	r0, #0
 800b69a:	d0c1      	beq.n	800b620 <_strtod_l+0x8b8>
 800b69c:	e619      	b.n	800b2d2 <_strtod_l+0x56a>
 800b69e:	4641      	mov	r1, r8
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7ff facd 	bl	800ac40 <__ratio>
 800b6a6:	ec57 6b10 	vmov	r6, r7, d0
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b6b0:	4630      	mov	r0, r6
 800b6b2:	4639      	mov	r1, r7
 800b6b4:	f7f5 fa44 	bl	8000b40 <__aeabi_dcmple>
 800b6b8:	2800      	cmp	r0, #0
 800b6ba:	d06f      	beq.n	800b79c <_strtod_l+0xa34>
 800b6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d17a      	bne.n	800b7b8 <_strtod_l+0xa50>
 800b6c2:	f1ba 0f00 	cmp.w	sl, #0
 800b6c6:	d158      	bne.n	800b77a <_strtod_l+0xa12>
 800b6c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d15a      	bne.n	800b788 <_strtod_l+0xa20>
 800b6d2:	4b64      	ldr	r3, [pc, #400]	@ (800b864 <_strtod_l+0xafc>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4630      	mov	r0, r6
 800b6d8:	4639      	mov	r1, r7
 800b6da:	f7f5 fa27 	bl	8000b2c <__aeabi_dcmplt>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d159      	bne.n	800b796 <_strtod_l+0xa2e>
 800b6e2:	4630      	mov	r0, r6
 800b6e4:	4639      	mov	r1, r7
 800b6e6:	4b60      	ldr	r3, [pc, #384]	@ (800b868 <_strtod_l+0xb00>)
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f7f4 ffad 	bl	8000648 <__aeabi_dmul>
 800b6ee:	4606      	mov	r6, r0
 800b6f0:	460f      	mov	r7, r1
 800b6f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b6f6:	9606      	str	r6, [sp, #24]
 800b6f8:	9307      	str	r3, [sp, #28]
 800b6fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6fe:	4d57      	ldr	r5, [pc, #348]	@ (800b85c <_strtod_l+0xaf4>)
 800b700:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b704:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b706:	401d      	ands	r5, r3
 800b708:	4b58      	ldr	r3, [pc, #352]	@ (800b86c <_strtod_l+0xb04>)
 800b70a:	429d      	cmp	r5, r3
 800b70c:	f040 80b2 	bne.w	800b874 <_strtod_l+0xb0c>
 800b710:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b712:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b716:	ec4b ab10 	vmov	d0, sl, fp
 800b71a:	f7ff f9c9 	bl	800aab0 <__ulp>
 800b71e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b722:	ec51 0b10 	vmov	r0, r1, d0
 800b726:	f7f4 ff8f 	bl	8000648 <__aeabi_dmul>
 800b72a:	4652      	mov	r2, sl
 800b72c:	465b      	mov	r3, fp
 800b72e:	f7f4 fdd5 	bl	80002dc <__adddf3>
 800b732:	460b      	mov	r3, r1
 800b734:	4949      	ldr	r1, [pc, #292]	@ (800b85c <_strtod_l+0xaf4>)
 800b736:	4a4e      	ldr	r2, [pc, #312]	@ (800b870 <_strtod_l+0xb08>)
 800b738:	4019      	ands	r1, r3
 800b73a:	4291      	cmp	r1, r2
 800b73c:	4682      	mov	sl, r0
 800b73e:	d942      	bls.n	800b7c6 <_strtod_l+0xa5e>
 800b740:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b742:	4b47      	ldr	r3, [pc, #284]	@ (800b860 <_strtod_l+0xaf8>)
 800b744:	429a      	cmp	r2, r3
 800b746:	d103      	bne.n	800b750 <_strtod_l+0x9e8>
 800b748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b74a:	3301      	adds	r3, #1
 800b74c:	f43f ad2b 	beq.w	800b1a6 <_strtod_l+0x43e>
 800b750:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b860 <_strtod_l+0xaf8>
 800b754:	f04f 3aff 	mov.w	sl, #4294967295
 800b758:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b75a:	9805      	ldr	r0, [sp, #20]
 800b75c:	f7fe fe74 	bl	800a448 <_Bfree>
 800b760:	9805      	ldr	r0, [sp, #20]
 800b762:	4649      	mov	r1, r9
 800b764:	f7fe fe70 	bl	800a448 <_Bfree>
 800b768:	9805      	ldr	r0, [sp, #20]
 800b76a:	4641      	mov	r1, r8
 800b76c:	f7fe fe6c 	bl	800a448 <_Bfree>
 800b770:	9805      	ldr	r0, [sp, #20]
 800b772:	4621      	mov	r1, r4
 800b774:	f7fe fe68 	bl	800a448 <_Bfree>
 800b778:	e618      	b.n	800b3ac <_strtod_l+0x644>
 800b77a:	f1ba 0f01 	cmp.w	sl, #1
 800b77e:	d103      	bne.n	800b788 <_strtod_l+0xa20>
 800b780:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b782:	2b00      	cmp	r3, #0
 800b784:	f43f ada5 	beq.w	800b2d2 <_strtod_l+0x56a>
 800b788:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b838 <_strtod_l+0xad0>
 800b78c:	4f35      	ldr	r7, [pc, #212]	@ (800b864 <_strtod_l+0xafc>)
 800b78e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b792:	2600      	movs	r6, #0
 800b794:	e7b1      	b.n	800b6fa <_strtod_l+0x992>
 800b796:	4f34      	ldr	r7, [pc, #208]	@ (800b868 <_strtod_l+0xb00>)
 800b798:	2600      	movs	r6, #0
 800b79a:	e7aa      	b.n	800b6f2 <_strtod_l+0x98a>
 800b79c:	4b32      	ldr	r3, [pc, #200]	@ (800b868 <_strtod_l+0xb00>)
 800b79e:	4630      	mov	r0, r6
 800b7a0:	4639      	mov	r1, r7
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f7f4 ff50 	bl	8000648 <__aeabi_dmul>
 800b7a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d09f      	beq.n	800b6f2 <_strtod_l+0x98a>
 800b7b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b7b6:	e7a0      	b.n	800b6fa <_strtod_l+0x992>
 800b7b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b840 <_strtod_l+0xad8>
 800b7bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7c0:	ec57 6b17 	vmov	r6, r7, d7
 800b7c4:	e799      	b.n	800b6fa <_strtod_l+0x992>
 800b7c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b7ca:	9b08      	ldr	r3, [sp, #32]
 800b7cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d1c1      	bne.n	800b758 <_strtod_l+0x9f0>
 800b7d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7d8:	0d1b      	lsrs	r3, r3, #20
 800b7da:	051b      	lsls	r3, r3, #20
 800b7dc:	429d      	cmp	r5, r3
 800b7de:	d1bb      	bne.n	800b758 <_strtod_l+0x9f0>
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	f7f5 fa90 	bl	8000d08 <__aeabi_d2lz>
 800b7e8:	f7f4 ff00 	bl	80005ec <__aeabi_l2d>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	4639      	mov	r1, r7
 800b7f4:	f7f4 fd70 	bl	80002d8 <__aeabi_dsub>
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b800:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b804:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b806:	ea46 060a 	orr.w	r6, r6, sl
 800b80a:	431e      	orrs	r6, r3
 800b80c:	d06f      	beq.n	800b8ee <_strtod_l+0xb86>
 800b80e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b848 <_strtod_l+0xae0>)
 800b810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b814:	f7f5 f98a 	bl	8000b2c <__aeabi_dcmplt>
 800b818:	2800      	cmp	r0, #0
 800b81a:	f47f accf 	bne.w	800b1bc <_strtod_l+0x454>
 800b81e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b850 <_strtod_l+0xae8>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b828:	f7f5 f99e 	bl	8000b68 <__aeabi_dcmpgt>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d093      	beq.n	800b758 <_strtod_l+0x9f0>
 800b830:	e4c4      	b.n	800b1bc <_strtod_l+0x454>
 800b832:	bf00      	nop
 800b834:	f3af 8000 	nop.w
 800b838:	00000000 	.word	0x00000000
 800b83c:	bff00000 	.word	0xbff00000
 800b840:	00000000 	.word	0x00000000
 800b844:	3ff00000 	.word	0x3ff00000
 800b848:	94a03595 	.word	0x94a03595
 800b84c:	3fdfffff 	.word	0x3fdfffff
 800b850:	35afe535 	.word	0x35afe535
 800b854:	3fe00000 	.word	0x3fe00000
 800b858:	000fffff 	.word	0x000fffff
 800b85c:	7ff00000 	.word	0x7ff00000
 800b860:	7fefffff 	.word	0x7fefffff
 800b864:	3ff00000 	.word	0x3ff00000
 800b868:	3fe00000 	.word	0x3fe00000
 800b86c:	7fe00000 	.word	0x7fe00000
 800b870:	7c9fffff 	.word	0x7c9fffff
 800b874:	9b08      	ldr	r3, [sp, #32]
 800b876:	b323      	cbz	r3, 800b8c2 <_strtod_l+0xb5a>
 800b878:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b87c:	d821      	bhi.n	800b8c2 <_strtod_l+0xb5a>
 800b87e:	a328      	add	r3, pc, #160	@ (adr r3, 800b920 <_strtod_l+0xbb8>)
 800b880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b884:	4630      	mov	r0, r6
 800b886:	4639      	mov	r1, r7
 800b888:	f7f5 f95a 	bl	8000b40 <__aeabi_dcmple>
 800b88c:	b1a0      	cbz	r0, 800b8b8 <_strtod_l+0xb50>
 800b88e:	4639      	mov	r1, r7
 800b890:	4630      	mov	r0, r6
 800b892:	f7f5 f9b1 	bl	8000bf8 <__aeabi_d2uiz>
 800b896:	2801      	cmp	r0, #1
 800b898:	bf38      	it	cc
 800b89a:	2001      	movcc	r0, #1
 800b89c:	f7f4 fe5a 	bl	8000554 <__aeabi_ui2d>
 800b8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	b9fb      	cbnz	r3, 800b8e8 <_strtod_l+0xb80>
 800b8a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b8ac:	9014      	str	r0, [sp, #80]	@ 0x50
 800b8ae:	9315      	str	r3, [sp, #84]	@ 0x54
 800b8b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b8b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b8b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b8be:	1b5b      	subs	r3, r3, r5
 800b8c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b8c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b8ca:	f7ff f8f1 	bl	800aab0 <__ulp>
 800b8ce:	4650      	mov	r0, sl
 800b8d0:	ec53 2b10 	vmov	r2, r3, d0
 800b8d4:	4659      	mov	r1, fp
 800b8d6:	f7f4 feb7 	bl	8000648 <__aeabi_dmul>
 800b8da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b8de:	f7f4 fcfd 	bl	80002dc <__adddf3>
 800b8e2:	4682      	mov	sl, r0
 800b8e4:	468b      	mov	fp, r1
 800b8e6:	e770      	b.n	800b7ca <_strtod_l+0xa62>
 800b8e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b8ec:	e7e0      	b.n	800b8b0 <_strtod_l+0xb48>
 800b8ee:	a30e      	add	r3, pc, #56	@ (adr r3, 800b928 <_strtod_l+0xbc0>)
 800b8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f4:	f7f5 f91a 	bl	8000b2c <__aeabi_dcmplt>
 800b8f8:	e798      	b.n	800b82c <_strtod_l+0xac4>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b900:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b902:	6013      	str	r3, [r2, #0]
 800b904:	f7ff ba6d 	b.w	800ade2 <_strtod_l+0x7a>
 800b908:	2a65      	cmp	r2, #101	@ 0x65
 800b90a:	f43f ab66 	beq.w	800afda <_strtod_l+0x272>
 800b90e:	2a45      	cmp	r2, #69	@ 0x45
 800b910:	f43f ab63 	beq.w	800afda <_strtod_l+0x272>
 800b914:	2301      	movs	r3, #1
 800b916:	f7ff bb9e 	b.w	800b056 <_strtod_l+0x2ee>
 800b91a:	bf00      	nop
 800b91c:	f3af 8000 	nop.w
 800b920:	ffc00000 	.word	0xffc00000
 800b924:	41dfffff 	.word	0x41dfffff
 800b928:	94a03595 	.word	0x94a03595
 800b92c:	3fcfffff 	.word	0x3fcfffff

0800b930 <_strtod_r>:
 800b930:	4b01      	ldr	r3, [pc, #4]	@ (800b938 <_strtod_r+0x8>)
 800b932:	f7ff ba19 	b.w	800ad68 <_strtod_l>
 800b936:	bf00      	nop
 800b938:	20000064 	.word	0x20000064

0800b93c <_strtol_l.constprop.0>:
 800b93c:	2b24      	cmp	r3, #36	@ 0x24
 800b93e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b942:	4686      	mov	lr, r0
 800b944:	4690      	mov	r8, r2
 800b946:	d801      	bhi.n	800b94c <_strtol_l.constprop.0+0x10>
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d106      	bne.n	800b95a <_strtol_l.constprop.0+0x1e>
 800b94c:	f7fd fdac 	bl	80094a8 <__errno>
 800b950:	2316      	movs	r3, #22
 800b952:	6003      	str	r3, [r0, #0]
 800b954:	2000      	movs	r0, #0
 800b956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b95a:	4834      	ldr	r0, [pc, #208]	@ (800ba2c <_strtol_l.constprop.0+0xf0>)
 800b95c:	460d      	mov	r5, r1
 800b95e:	462a      	mov	r2, r5
 800b960:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b964:	5d06      	ldrb	r6, [r0, r4]
 800b966:	f016 0608 	ands.w	r6, r6, #8
 800b96a:	d1f8      	bne.n	800b95e <_strtol_l.constprop.0+0x22>
 800b96c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b96e:	d12d      	bne.n	800b9cc <_strtol_l.constprop.0+0x90>
 800b970:	782c      	ldrb	r4, [r5, #0]
 800b972:	2601      	movs	r6, #1
 800b974:	1c95      	adds	r5, r2, #2
 800b976:	f033 0210 	bics.w	r2, r3, #16
 800b97a:	d109      	bne.n	800b990 <_strtol_l.constprop.0+0x54>
 800b97c:	2c30      	cmp	r4, #48	@ 0x30
 800b97e:	d12a      	bne.n	800b9d6 <_strtol_l.constprop.0+0x9a>
 800b980:	782a      	ldrb	r2, [r5, #0]
 800b982:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b986:	2a58      	cmp	r2, #88	@ 0x58
 800b988:	d125      	bne.n	800b9d6 <_strtol_l.constprop.0+0x9a>
 800b98a:	786c      	ldrb	r4, [r5, #1]
 800b98c:	2310      	movs	r3, #16
 800b98e:	3502      	adds	r5, #2
 800b990:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b994:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b998:	2200      	movs	r2, #0
 800b99a:	fbbc f9f3 	udiv	r9, ip, r3
 800b99e:	4610      	mov	r0, r2
 800b9a0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b9a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b9a8:	2f09      	cmp	r7, #9
 800b9aa:	d81b      	bhi.n	800b9e4 <_strtol_l.constprop.0+0xa8>
 800b9ac:	463c      	mov	r4, r7
 800b9ae:	42a3      	cmp	r3, r4
 800b9b0:	dd27      	ble.n	800ba02 <_strtol_l.constprop.0+0xc6>
 800b9b2:	1c57      	adds	r7, r2, #1
 800b9b4:	d007      	beq.n	800b9c6 <_strtol_l.constprop.0+0x8a>
 800b9b6:	4581      	cmp	r9, r0
 800b9b8:	d320      	bcc.n	800b9fc <_strtol_l.constprop.0+0xc0>
 800b9ba:	d101      	bne.n	800b9c0 <_strtol_l.constprop.0+0x84>
 800b9bc:	45a2      	cmp	sl, r4
 800b9be:	db1d      	blt.n	800b9fc <_strtol_l.constprop.0+0xc0>
 800b9c0:	fb00 4003 	mla	r0, r0, r3, r4
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9ca:	e7eb      	b.n	800b9a4 <_strtol_l.constprop.0+0x68>
 800b9cc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b9ce:	bf04      	itt	eq
 800b9d0:	782c      	ldrbeq	r4, [r5, #0]
 800b9d2:	1c95      	addeq	r5, r2, #2
 800b9d4:	e7cf      	b.n	800b976 <_strtol_l.constprop.0+0x3a>
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d1da      	bne.n	800b990 <_strtol_l.constprop.0+0x54>
 800b9da:	2c30      	cmp	r4, #48	@ 0x30
 800b9dc:	bf0c      	ite	eq
 800b9de:	2308      	moveq	r3, #8
 800b9e0:	230a      	movne	r3, #10
 800b9e2:	e7d5      	b.n	800b990 <_strtol_l.constprop.0+0x54>
 800b9e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b9e8:	2f19      	cmp	r7, #25
 800b9ea:	d801      	bhi.n	800b9f0 <_strtol_l.constprop.0+0xb4>
 800b9ec:	3c37      	subs	r4, #55	@ 0x37
 800b9ee:	e7de      	b.n	800b9ae <_strtol_l.constprop.0+0x72>
 800b9f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b9f4:	2f19      	cmp	r7, #25
 800b9f6:	d804      	bhi.n	800ba02 <_strtol_l.constprop.0+0xc6>
 800b9f8:	3c57      	subs	r4, #87	@ 0x57
 800b9fa:	e7d8      	b.n	800b9ae <_strtol_l.constprop.0+0x72>
 800b9fc:	f04f 32ff 	mov.w	r2, #4294967295
 800ba00:	e7e1      	b.n	800b9c6 <_strtol_l.constprop.0+0x8a>
 800ba02:	1c53      	adds	r3, r2, #1
 800ba04:	d108      	bne.n	800ba18 <_strtol_l.constprop.0+0xdc>
 800ba06:	2322      	movs	r3, #34	@ 0x22
 800ba08:	f8ce 3000 	str.w	r3, [lr]
 800ba0c:	4660      	mov	r0, ip
 800ba0e:	f1b8 0f00 	cmp.w	r8, #0
 800ba12:	d0a0      	beq.n	800b956 <_strtol_l.constprop.0+0x1a>
 800ba14:	1e69      	subs	r1, r5, #1
 800ba16:	e006      	b.n	800ba26 <_strtol_l.constprop.0+0xea>
 800ba18:	b106      	cbz	r6, 800ba1c <_strtol_l.constprop.0+0xe0>
 800ba1a:	4240      	negs	r0, r0
 800ba1c:	f1b8 0f00 	cmp.w	r8, #0
 800ba20:	d099      	beq.n	800b956 <_strtol_l.constprop.0+0x1a>
 800ba22:	2a00      	cmp	r2, #0
 800ba24:	d1f6      	bne.n	800ba14 <_strtol_l.constprop.0+0xd8>
 800ba26:	f8c8 1000 	str.w	r1, [r8]
 800ba2a:	e794      	b.n	800b956 <_strtol_l.constprop.0+0x1a>
 800ba2c:	0800d761 	.word	0x0800d761

0800ba30 <_strtol_r>:
 800ba30:	f7ff bf84 	b.w	800b93c <_strtol_l.constprop.0>

0800ba34 <__ssputs_r>:
 800ba34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba38:	688e      	ldr	r6, [r1, #8]
 800ba3a:	461f      	mov	r7, r3
 800ba3c:	42be      	cmp	r6, r7
 800ba3e:	680b      	ldr	r3, [r1, #0]
 800ba40:	4682      	mov	sl, r0
 800ba42:	460c      	mov	r4, r1
 800ba44:	4690      	mov	r8, r2
 800ba46:	d82d      	bhi.n	800baa4 <__ssputs_r+0x70>
 800ba48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba50:	d026      	beq.n	800baa0 <__ssputs_r+0x6c>
 800ba52:	6965      	ldr	r5, [r4, #20]
 800ba54:	6909      	ldr	r1, [r1, #16]
 800ba56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba5a:	eba3 0901 	sub.w	r9, r3, r1
 800ba5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba62:	1c7b      	adds	r3, r7, #1
 800ba64:	444b      	add	r3, r9
 800ba66:	106d      	asrs	r5, r5, #1
 800ba68:	429d      	cmp	r5, r3
 800ba6a:	bf38      	it	cc
 800ba6c:	461d      	movcc	r5, r3
 800ba6e:	0553      	lsls	r3, r2, #21
 800ba70:	d527      	bpl.n	800bac2 <__ssputs_r+0x8e>
 800ba72:	4629      	mov	r1, r5
 800ba74:	f7fe fc1c 	bl	800a2b0 <_malloc_r>
 800ba78:	4606      	mov	r6, r0
 800ba7a:	b360      	cbz	r0, 800bad6 <__ssputs_r+0xa2>
 800ba7c:	6921      	ldr	r1, [r4, #16]
 800ba7e:	464a      	mov	r2, r9
 800ba80:	f7fd fd3f 	bl	8009502 <memcpy>
 800ba84:	89a3      	ldrh	r3, [r4, #12]
 800ba86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	6126      	str	r6, [r4, #16]
 800ba92:	6165      	str	r5, [r4, #20]
 800ba94:	444e      	add	r6, r9
 800ba96:	eba5 0509 	sub.w	r5, r5, r9
 800ba9a:	6026      	str	r6, [r4, #0]
 800ba9c:	60a5      	str	r5, [r4, #8]
 800ba9e:	463e      	mov	r6, r7
 800baa0:	42be      	cmp	r6, r7
 800baa2:	d900      	bls.n	800baa6 <__ssputs_r+0x72>
 800baa4:	463e      	mov	r6, r7
 800baa6:	6820      	ldr	r0, [r4, #0]
 800baa8:	4632      	mov	r2, r6
 800baaa:	4641      	mov	r1, r8
 800baac:	f000 fd53 	bl	800c556 <memmove>
 800bab0:	68a3      	ldr	r3, [r4, #8]
 800bab2:	1b9b      	subs	r3, r3, r6
 800bab4:	60a3      	str	r3, [r4, #8]
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	4433      	add	r3, r6
 800baba:	6023      	str	r3, [r4, #0]
 800babc:	2000      	movs	r0, #0
 800babe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bac2:	462a      	mov	r2, r5
 800bac4:	f001 f909 	bl	800ccda <_realloc_r>
 800bac8:	4606      	mov	r6, r0
 800baca:	2800      	cmp	r0, #0
 800bacc:	d1e0      	bne.n	800ba90 <__ssputs_r+0x5c>
 800bace:	6921      	ldr	r1, [r4, #16]
 800bad0:	4650      	mov	r0, sl
 800bad2:	f7fe fb79 	bl	800a1c8 <_free_r>
 800bad6:	230c      	movs	r3, #12
 800bad8:	f8ca 3000 	str.w	r3, [sl]
 800badc:	89a3      	ldrh	r3, [r4, #12]
 800bade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bae2:	81a3      	strh	r3, [r4, #12]
 800bae4:	f04f 30ff 	mov.w	r0, #4294967295
 800bae8:	e7e9      	b.n	800babe <__ssputs_r+0x8a>
	...

0800baec <_svfiprintf_r>:
 800baec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf0:	4698      	mov	r8, r3
 800baf2:	898b      	ldrh	r3, [r1, #12]
 800baf4:	061b      	lsls	r3, r3, #24
 800baf6:	b09d      	sub	sp, #116	@ 0x74
 800baf8:	4607      	mov	r7, r0
 800bafa:	460d      	mov	r5, r1
 800bafc:	4614      	mov	r4, r2
 800bafe:	d510      	bpl.n	800bb22 <_svfiprintf_r+0x36>
 800bb00:	690b      	ldr	r3, [r1, #16]
 800bb02:	b973      	cbnz	r3, 800bb22 <_svfiprintf_r+0x36>
 800bb04:	2140      	movs	r1, #64	@ 0x40
 800bb06:	f7fe fbd3 	bl	800a2b0 <_malloc_r>
 800bb0a:	6028      	str	r0, [r5, #0]
 800bb0c:	6128      	str	r0, [r5, #16]
 800bb0e:	b930      	cbnz	r0, 800bb1e <_svfiprintf_r+0x32>
 800bb10:	230c      	movs	r3, #12
 800bb12:	603b      	str	r3, [r7, #0]
 800bb14:	f04f 30ff 	mov.w	r0, #4294967295
 800bb18:	b01d      	add	sp, #116	@ 0x74
 800bb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb1e:	2340      	movs	r3, #64	@ 0x40
 800bb20:	616b      	str	r3, [r5, #20]
 800bb22:	2300      	movs	r3, #0
 800bb24:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb26:	2320      	movs	r3, #32
 800bb28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb30:	2330      	movs	r3, #48	@ 0x30
 800bb32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bcd0 <_svfiprintf_r+0x1e4>
 800bb36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb3a:	f04f 0901 	mov.w	r9, #1
 800bb3e:	4623      	mov	r3, r4
 800bb40:	469a      	mov	sl, r3
 800bb42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb46:	b10a      	cbz	r2, 800bb4c <_svfiprintf_r+0x60>
 800bb48:	2a25      	cmp	r2, #37	@ 0x25
 800bb4a:	d1f9      	bne.n	800bb40 <_svfiprintf_r+0x54>
 800bb4c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb50:	d00b      	beq.n	800bb6a <_svfiprintf_r+0x7e>
 800bb52:	465b      	mov	r3, fp
 800bb54:	4622      	mov	r2, r4
 800bb56:	4629      	mov	r1, r5
 800bb58:	4638      	mov	r0, r7
 800bb5a:	f7ff ff6b 	bl	800ba34 <__ssputs_r>
 800bb5e:	3001      	adds	r0, #1
 800bb60:	f000 80a7 	beq.w	800bcb2 <_svfiprintf_r+0x1c6>
 800bb64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb66:	445a      	add	r2, fp
 800bb68:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f000 809f 	beq.w	800bcb2 <_svfiprintf_r+0x1c6>
 800bb74:	2300      	movs	r3, #0
 800bb76:	f04f 32ff 	mov.w	r2, #4294967295
 800bb7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb7e:	f10a 0a01 	add.w	sl, sl, #1
 800bb82:	9304      	str	r3, [sp, #16]
 800bb84:	9307      	str	r3, [sp, #28]
 800bb86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb8c:	4654      	mov	r4, sl
 800bb8e:	2205      	movs	r2, #5
 800bb90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb94:	484e      	ldr	r0, [pc, #312]	@ (800bcd0 <_svfiprintf_r+0x1e4>)
 800bb96:	f7f4 fb43 	bl	8000220 <memchr>
 800bb9a:	9a04      	ldr	r2, [sp, #16]
 800bb9c:	b9d8      	cbnz	r0, 800bbd6 <_svfiprintf_r+0xea>
 800bb9e:	06d0      	lsls	r0, r2, #27
 800bba0:	bf44      	itt	mi
 800bba2:	2320      	movmi	r3, #32
 800bba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bba8:	0711      	lsls	r1, r2, #28
 800bbaa:	bf44      	itt	mi
 800bbac:	232b      	movmi	r3, #43	@ 0x2b
 800bbae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbb8:	d015      	beq.n	800bbe6 <_svfiprintf_r+0xfa>
 800bbba:	9a07      	ldr	r2, [sp, #28]
 800bbbc:	4654      	mov	r4, sl
 800bbbe:	2000      	movs	r0, #0
 800bbc0:	f04f 0c0a 	mov.w	ip, #10
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbca:	3b30      	subs	r3, #48	@ 0x30
 800bbcc:	2b09      	cmp	r3, #9
 800bbce:	d94b      	bls.n	800bc68 <_svfiprintf_r+0x17c>
 800bbd0:	b1b0      	cbz	r0, 800bc00 <_svfiprintf_r+0x114>
 800bbd2:	9207      	str	r2, [sp, #28]
 800bbd4:	e014      	b.n	800bc00 <_svfiprintf_r+0x114>
 800bbd6:	eba0 0308 	sub.w	r3, r0, r8
 800bbda:	fa09 f303 	lsl.w	r3, r9, r3
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	9304      	str	r3, [sp, #16]
 800bbe2:	46a2      	mov	sl, r4
 800bbe4:	e7d2      	b.n	800bb8c <_svfiprintf_r+0xa0>
 800bbe6:	9b03      	ldr	r3, [sp, #12]
 800bbe8:	1d19      	adds	r1, r3, #4
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	9103      	str	r1, [sp, #12]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	bfbb      	ittet	lt
 800bbf2:	425b      	neglt	r3, r3
 800bbf4:	f042 0202 	orrlt.w	r2, r2, #2
 800bbf8:	9307      	strge	r3, [sp, #28]
 800bbfa:	9307      	strlt	r3, [sp, #28]
 800bbfc:	bfb8      	it	lt
 800bbfe:	9204      	strlt	r2, [sp, #16]
 800bc00:	7823      	ldrb	r3, [r4, #0]
 800bc02:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc04:	d10a      	bne.n	800bc1c <_svfiprintf_r+0x130>
 800bc06:	7863      	ldrb	r3, [r4, #1]
 800bc08:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc0a:	d132      	bne.n	800bc72 <_svfiprintf_r+0x186>
 800bc0c:	9b03      	ldr	r3, [sp, #12]
 800bc0e:	1d1a      	adds	r2, r3, #4
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	9203      	str	r2, [sp, #12]
 800bc14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc18:	3402      	adds	r4, #2
 800bc1a:	9305      	str	r3, [sp, #20]
 800bc1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bce0 <_svfiprintf_r+0x1f4>
 800bc20:	7821      	ldrb	r1, [r4, #0]
 800bc22:	2203      	movs	r2, #3
 800bc24:	4650      	mov	r0, sl
 800bc26:	f7f4 fafb 	bl	8000220 <memchr>
 800bc2a:	b138      	cbz	r0, 800bc3c <_svfiprintf_r+0x150>
 800bc2c:	9b04      	ldr	r3, [sp, #16]
 800bc2e:	eba0 000a 	sub.w	r0, r0, sl
 800bc32:	2240      	movs	r2, #64	@ 0x40
 800bc34:	4082      	lsls	r2, r0
 800bc36:	4313      	orrs	r3, r2
 800bc38:	3401      	adds	r4, #1
 800bc3a:	9304      	str	r3, [sp, #16]
 800bc3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc40:	4824      	ldr	r0, [pc, #144]	@ (800bcd4 <_svfiprintf_r+0x1e8>)
 800bc42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc46:	2206      	movs	r2, #6
 800bc48:	f7f4 faea 	bl	8000220 <memchr>
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d036      	beq.n	800bcbe <_svfiprintf_r+0x1d2>
 800bc50:	4b21      	ldr	r3, [pc, #132]	@ (800bcd8 <_svfiprintf_r+0x1ec>)
 800bc52:	bb1b      	cbnz	r3, 800bc9c <_svfiprintf_r+0x1b0>
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	3307      	adds	r3, #7
 800bc58:	f023 0307 	bic.w	r3, r3, #7
 800bc5c:	3308      	adds	r3, #8
 800bc5e:	9303      	str	r3, [sp, #12]
 800bc60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc62:	4433      	add	r3, r6
 800bc64:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc66:	e76a      	b.n	800bb3e <_svfiprintf_r+0x52>
 800bc68:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc6c:	460c      	mov	r4, r1
 800bc6e:	2001      	movs	r0, #1
 800bc70:	e7a8      	b.n	800bbc4 <_svfiprintf_r+0xd8>
 800bc72:	2300      	movs	r3, #0
 800bc74:	3401      	adds	r4, #1
 800bc76:	9305      	str	r3, [sp, #20]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	f04f 0c0a 	mov.w	ip, #10
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc84:	3a30      	subs	r2, #48	@ 0x30
 800bc86:	2a09      	cmp	r2, #9
 800bc88:	d903      	bls.n	800bc92 <_svfiprintf_r+0x1a6>
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0c6      	beq.n	800bc1c <_svfiprintf_r+0x130>
 800bc8e:	9105      	str	r1, [sp, #20]
 800bc90:	e7c4      	b.n	800bc1c <_svfiprintf_r+0x130>
 800bc92:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc96:	4604      	mov	r4, r0
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e7f0      	b.n	800bc7e <_svfiprintf_r+0x192>
 800bc9c:	ab03      	add	r3, sp, #12
 800bc9e:	9300      	str	r3, [sp, #0]
 800bca0:	462a      	mov	r2, r5
 800bca2:	4b0e      	ldr	r3, [pc, #56]	@ (800bcdc <_svfiprintf_r+0x1f0>)
 800bca4:	a904      	add	r1, sp, #16
 800bca6:	4638      	mov	r0, r7
 800bca8:	f7fc fc80 	bl	80085ac <_printf_float>
 800bcac:	1c42      	adds	r2, r0, #1
 800bcae:	4606      	mov	r6, r0
 800bcb0:	d1d6      	bne.n	800bc60 <_svfiprintf_r+0x174>
 800bcb2:	89ab      	ldrh	r3, [r5, #12]
 800bcb4:	065b      	lsls	r3, r3, #25
 800bcb6:	f53f af2d 	bmi.w	800bb14 <_svfiprintf_r+0x28>
 800bcba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcbc:	e72c      	b.n	800bb18 <_svfiprintf_r+0x2c>
 800bcbe:	ab03      	add	r3, sp, #12
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	4b05      	ldr	r3, [pc, #20]	@ (800bcdc <_svfiprintf_r+0x1f0>)
 800bcc6:	a904      	add	r1, sp, #16
 800bcc8:	4638      	mov	r0, r7
 800bcca:	f7fc ff07 	bl	8008adc <_printf_i>
 800bcce:	e7ed      	b.n	800bcac <_svfiprintf_r+0x1c0>
 800bcd0:	0800d861 	.word	0x0800d861
 800bcd4:	0800d86b 	.word	0x0800d86b
 800bcd8:	080085ad 	.word	0x080085ad
 800bcdc:	0800ba35 	.word	0x0800ba35
 800bce0:	0800d867 	.word	0x0800d867

0800bce4 <_sungetc_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	1c4b      	adds	r3, r1, #1
 800bce8:	4614      	mov	r4, r2
 800bcea:	d103      	bne.n	800bcf4 <_sungetc_r+0x10>
 800bcec:	f04f 35ff 	mov.w	r5, #4294967295
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	bd38      	pop	{r3, r4, r5, pc}
 800bcf4:	8993      	ldrh	r3, [r2, #12]
 800bcf6:	f023 0320 	bic.w	r3, r3, #32
 800bcfa:	8193      	strh	r3, [r2, #12]
 800bcfc:	6853      	ldr	r3, [r2, #4]
 800bcfe:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bd00:	b2cd      	uxtb	r5, r1
 800bd02:	b18a      	cbz	r2, 800bd28 <_sungetc_r+0x44>
 800bd04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bd06:	429a      	cmp	r2, r3
 800bd08:	dd08      	ble.n	800bd1c <_sungetc_r+0x38>
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	1e5a      	subs	r2, r3, #1
 800bd0e:	6022      	str	r2, [r4, #0]
 800bd10:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bd14:	6863      	ldr	r3, [r4, #4]
 800bd16:	3301      	adds	r3, #1
 800bd18:	6063      	str	r3, [r4, #4]
 800bd1a:	e7e9      	b.n	800bcf0 <_sungetc_r+0xc>
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	f000 fbe0 	bl	800c4e2 <__submore>
 800bd22:	2800      	cmp	r0, #0
 800bd24:	d0f1      	beq.n	800bd0a <_sungetc_r+0x26>
 800bd26:	e7e1      	b.n	800bcec <_sungetc_r+0x8>
 800bd28:	6921      	ldr	r1, [r4, #16]
 800bd2a:	6822      	ldr	r2, [r4, #0]
 800bd2c:	b141      	cbz	r1, 800bd40 <_sungetc_r+0x5c>
 800bd2e:	4291      	cmp	r1, r2
 800bd30:	d206      	bcs.n	800bd40 <_sungetc_r+0x5c>
 800bd32:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800bd36:	42a9      	cmp	r1, r5
 800bd38:	d102      	bne.n	800bd40 <_sungetc_r+0x5c>
 800bd3a:	3a01      	subs	r2, #1
 800bd3c:	6022      	str	r2, [r4, #0]
 800bd3e:	e7ea      	b.n	800bd16 <_sungetc_r+0x32>
 800bd40:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800bd44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd48:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bd4e:	4623      	mov	r3, r4
 800bd50:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bd54:	6023      	str	r3, [r4, #0]
 800bd56:	2301      	movs	r3, #1
 800bd58:	e7de      	b.n	800bd18 <_sungetc_r+0x34>

0800bd5a <__ssrefill_r>:
 800bd5a:	b510      	push	{r4, lr}
 800bd5c:	460c      	mov	r4, r1
 800bd5e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bd60:	b169      	cbz	r1, 800bd7e <__ssrefill_r+0x24>
 800bd62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd66:	4299      	cmp	r1, r3
 800bd68:	d001      	beq.n	800bd6e <__ssrefill_r+0x14>
 800bd6a:	f7fe fa2d 	bl	800a1c8 <_free_r>
 800bd6e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd70:	6063      	str	r3, [r4, #4]
 800bd72:	2000      	movs	r0, #0
 800bd74:	6360      	str	r0, [r4, #52]	@ 0x34
 800bd76:	b113      	cbz	r3, 800bd7e <__ssrefill_r+0x24>
 800bd78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bd7a:	6023      	str	r3, [r4, #0]
 800bd7c:	bd10      	pop	{r4, pc}
 800bd7e:	6923      	ldr	r3, [r4, #16]
 800bd80:	6023      	str	r3, [r4, #0]
 800bd82:	2300      	movs	r3, #0
 800bd84:	6063      	str	r3, [r4, #4]
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	f043 0320 	orr.w	r3, r3, #32
 800bd8c:	81a3      	strh	r3, [r4, #12]
 800bd8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bd92:	e7f3      	b.n	800bd7c <__ssrefill_r+0x22>

0800bd94 <__ssvfiscanf_r>:
 800bd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd98:	460c      	mov	r4, r1
 800bd9a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800bd9e:	2100      	movs	r1, #0
 800bda0:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bda4:	49a5      	ldr	r1, [pc, #660]	@ (800c03c <__ssvfiscanf_r+0x2a8>)
 800bda6:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bda8:	f10d 0804 	add.w	r8, sp, #4
 800bdac:	49a4      	ldr	r1, [pc, #656]	@ (800c040 <__ssvfiscanf_r+0x2ac>)
 800bdae:	4fa5      	ldr	r7, [pc, #660]	@ (800c044 <__ssvfiscanf_r+0x2b0>)
 800bdb0:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bdb4:	4606      	mov	r6, r0
 800bdb6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	7813      	ldrb	r3, [r2, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	f000 8158 	beq.w	800c072 <__ssvfiscanf_r+0x2de>
 800bdc2:	5cf9      	ldrb	r1, [r7, r3]
 800bdc4:	f011 0108 	ands.w	r1, r1, #8
 800bdc8:	f102 0501 	add.w	r5, r2, #1
 800bdcc:	d019      	beq.n	800be02 <__ssvfiscanf_r+0x6e>
 800bdce:	6863      	ldr	r3, [r4, #4]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	dd0f      	ble.n	800bdf4 <__ssvfiscanf_r+0x60>
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	781a      	ldrb	r2, [r3, #0]
 800bdd8:	5cba      	ldrb	r2, [r7, r2]
 800bdda:	0712      	lsls	r2, r2, #28
 800bddc:	d401      	bmi.n	800bde2 <__ssvfiscanf_r+0x4e>
 800bdde:	462a      	mov	r2, r5
 800bde0:	e7eb      	b.n	800bdba <__ssvfiscanf_r+0x26>
 800bde2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bde4:	3201      	adds	r2, #1
 800bde6:	9245      	str	r2, [sp, #276]	@ 0x114
 800bde8:	6862      	ldr	r2, [r4, #4]
 800bdea:	3301      	adds	r3, #1
 800bdec:	3a01      	subs	r2, #1
 800bdee:	6062      	str	r2, [r4, #4]
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	e7ec      	b.n	800bdce <__ssvfiscanf_r+0x3a>
 800bdf4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	4798      	blx	r3
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	d0e9      	beq.n	800bdd4 <__ssvfiscanf_r+0x40>
 800be00:	e7ed      	b.n	800bdde <__ssvfiscanf_r+0x4a>
 800be02:	2b25      	cmp	r3, #37	@ 0x25
 800be04:	d012      	beq.n	800be2c <__ssvfiscanf_r+0x98>
 800be06:	4699      	mov	r9, r3
 800be08:	6863      	ldr	r3, [r4, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	f340 8093 	ble.w	800bf36 <__ssvfiscanf_r+0x1a2>
 800be10:	6822      	ldr	r2, [r4, #0]
 800be12:	7813      	ldrb	r3, [r2, #0]
 800be14:	454b      	cmp	r3, r9
 800be16:	f040 812c 	bne.w	800c072 <__ssvfiscanf_r+0x2de>
 800be1a:	6863      	ldr	r3, [r4, #4]
 800be1c:	3b01      	subs	r3, #1
 800be1e:	6063      	str	r3, [r4, #4]
 800be20:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800be22:	3201      	adds	r2, #1
 800be24:	3301      	adds	r3, #1
 800be26:	6022      	str	r2, [r4, #0]
 800be28:	9345      	str	r3, [sp, #276]	@ 0x114
 800be2a:	e7d8      	b.n	800bdde <__ssvfiscanf_r+0x4a>
 800be2c:	9141      	str	r1, [sp, #260]	@ 0x104
 800be2e:	9143      	str	r1, [sp, #268]	@ 0x10c
 800be30:	7853      	ldrb	r3, [r2, #1]
 800be32:	2b2a      	cmp	r3, #42	@ 0x2a
 800be34:	bf02      	ittt	eq
 800be36:	2310      	moveq	r3, #16
 800be38:	1c95      	addeq	r5, r2, #2
 800be3a:	9341      	streq	r3, [sp, #260]	@ 0x104
 800be3c:	220a      	movs	r2, #10
 800be3e:	46a9      	mov	r9, r5
 800be40:	f819 1b01 	ldrb.w	r1, [r9], #1
 800be44:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800be48:	2b09      	cmp	r3, #9
 800be4a:	d91e      	bls.n	800be8a <__ssvfiscanf_r+0xf6>
 800be4c:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800c048 <__ssvfiscanf_r+0x2b4>
 800be50:	2203      	movs	r2, #3
 800be52:	4650      	mov	r0, sl
 800be54:	f7f4 f9e4 	bl	8000220 <memchr>
 800be58:	b138      	cbz	r0, 800be6a <__ssvfiscanf_r+0xd6>
 800be5a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800be5c:	eba0 000a 	sub.w	r0, r0, sl
 800be60:	2301      	movs	r3, #1
 800be62:	4083      	lsls	r3, r0
 800be64:	4313      	orrs	r3, r2
 800be66:	9341      	str	r3, [sp, #260]	@ 0x104
 800be68:	464d      	mov	r5, r9
 800be6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be6e:	2b78      	cmp	r3, #120	@ 0x78
 800be70:	d806      	bhi.n	800be80 <__ssvfiscanf_r+0xec>
 800be72:	2b57      	cmp	r3, #87	@ 0x57
 800be74:	d810      	bhi.n	800be98 <__ssvfiscanf_r+0x104>
 800be76:	2b25      	cmp	r3, #37	@ 0x25
 800be78:	d0c5      	beq.n	800be06 <__ssvfiscanf_r+0x72>
 800be7a:	d857      	bhi.n	800bf2c <__ssvfiscanf_r+0x198>
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d065      	beq.n	800bf4c <__ssvfiscanf_r+0x1b8>
 800be80:	2303      	movs	r3, #3
 800be82:	9347      	str	r3, [sp, #284]	@ 0x11c
 800be84:	230a      	movs	r3, #10
 800be86:	9342      	str	r3, [sp, #264]	@ 0x108
 800be88:	e078      	b.n	800bf7c <__ssvfiscanf_r+0x1e8>
 800be8a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800be8c:	fb02 1103 	mla	r1, r2, r3, r1
 800be90:	3930      	subs	r1, #48	@ 0x30
 800be92:	9143      	str	r1, [sp, #268]	@ 0x10c
 800be94:	464d      	mov	r5, r9
 800be96:	e7d2      	b.n	800be3e <__ssvfiscanf_r+0xaa>
 800be98:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800be9c:	2a20      	cmp	r2, #32
 800be9e:	d8ef      	bhi.n	800be80 <__ssvfiscanf_r+0xec>
 800bea0:	a101      	add	r1, pc, #4	@ (adr r1, 800bea8 <__ssvfiscanf_r+0x114>)
 800bea2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bea6:	bf00      	nop
 800bea8:	0800bf5b 	.word	0x0800bf5b
 800beac:	0800be81 	.word	0x0800be81
 800beb0:	0800be81 	.word	0x0800be81
 800beb4:	0800bfb5 	.word	0x0800bfb5
 800beb8:	0800be81 	.word	0x0800be81
 800bebc:	0800be81 	.word	0x0800be81
 800bec0:	0800be81 	.word	0x0800be81
 800bec4:	0800be81 	.word	0x0800be81
 800bec8:	0800be81 	.word	0x0800be81
 800becc:	0800be81 	.word	0x0800be81
 800bed0:	0800be81 	.word	0x0800be81
 800bed4:	0800bfcb 	.word	0x0800bfcb
 800bed8:	0800bfb1 	.word	0x0800bfb1
 800bedc:	0800bf33 	.word	0x0800bf33
 800bee0:	0800bf33 	.word	0x0800bf33
 800bee4:	0800bf33 	.word	0x0800bf33
 800bee8:	0800be81 	.word	0x0800be81
 800beec:	0800bf6d 	.word	0x0800bf6d
 800bef0:	0800be81 	.word	0x0800be81
 800bef4:	0800be81 	.word	0x0800be81
 800bef8:	0800be81 	.word	0x0800be81
 800befc:	0800be81 	.word	0x0800be81
 800bf00:	0800bfdb 	.word	0x0800bfdb
 800bf04:	0800bf75 	.word	0x0800bf75
 800bf08:	0800bf53 	.word	0x0800bf53
 800bf0c:	0800be81 	.word	0x0800be81
 800bf10:	0800be81 	.word	0x0800be81
 800bf14:	0800bfd7 	.word	0x0800bfd7
 800bf18:	0800be81 	.word	0x0800be81
 800bf1c:	0800bfb1 	.word	0x0800bfb1
 800bf20:	0800be81 	.word	0x0800be81
 800bf24:	0800be81 	.word	0x0800be81
 800bf28:	0800bf5b 	.word	0x0800bf5b
 800bf2c:	3b45      	subs	r3, #69	@ 0x45
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d8a6      	bhi.n	800be80 <__ssvfiscanf_r+0xec>
 800bf32:	2305      	movs	r3, #5
 800bf34:	e021      	b.n	800bf7a <__ssvfiscanf_r+0x1e6>
 800bf36:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bf38:	4621      	mov	r1, r4
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	4798      	blx	r3
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	f43f af66 	beq.w	800be10 <__ssvfiscanf_r+0x7c>
 800bf44:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f040 808b 	bne.w	800c062 <__ssvfiscanf_r+0x2ce>
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e08b      	b.n	800c06a <__ssvfiscanf_r+0x2d6>
 800bf52:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bf54:	f042 0220 	orr.w	r2, r2, #32
 800bf58:	9241      	str	r2, [sp, #260]	@ 0x104
 800bf5a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800bf5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bf60:	9241      	str	r2, [sp, #260]	@ 0x104
 800bf62:	2210      	movs	r2, #16
 800bf64:	2b6e      	cmp	r3, #110	@ 0x6e
 800bf66:	9242      	str	r2, [sp, #264]	@ 0x108
 800bf68:	d902      	bls.n	800bf70 <__ssvfiscanf_r+0x1dc>
 800bf6a:	e005      	b.n	800bf78 <__ssvfiscanf_r+0x1e4>
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	9342      	str	r3, [sp, #264]	@ 0x108
 800bf70:	2303      	movs	r3, #3
 800bf72:	e002      	b.n	800bf7a <__ssvfiscanf_r+0x1e6>
 800bf74:	2308      	movs	r3, #8
 800bf76:	9342      	str	r3, [sp, #264]	@ 0x108
 800bf78:	2304      	movs	r3, #4
 800bf7a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800bf7c:	6863      	ldr	r3, [r4, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	dd39      	ble.n	800bff6 <__ssvfiscanf_r+0x262>
 800bf82:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bf84:	0659      	lsls	r1, r3, #25
 800bf86:	d404      	bmi.n	800bf92 <__ssvfiscanf_r+0x1fe>
 800bf88:	6823      	ldr	r3, [r4, #0]
 800bf8a:	781a      	ldrb	r2, [r3, #0]
 800bf8c:	5cba      	ldrb	r2, [r7, r2]
 800bf8e:	0712      	lsls	r2, r2, #28
 800bf90:	d438      	bmi.n	800c004 <__ssvfiscanf_r+0x270>
 800bf92:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	dc47      	bgt.n	800c028 <__ssvfiscanf_r+0x294>
 800bf98:	466b      	mov	r3, sp
 800bf9a:	4622      	mov	r2, r4
 800bf9c:	a941      	add	r1, sp, #260	@ 0x104
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	f000 f86c 	bl	800c07c <_scanf_chars>
 800bfa4:	2801      	cmp	r0, #1
 800bfa6:	d064      	beq.n	800c072 <__ssvfiscanf_r+0x2de>
 800bfa8:	2802      	cmp	r0, #2
 800bfaa:	f47f af18 	bne.w	800bdde <__ssvfiscanf_r+0x4a>
 800bfae:	e7c9      	b.n	800bf44 <__ssvfiscanf_r+0x1b0>
 800bfb0:	220a      	movs	r2, #10
 800bfb2:	e7d7      	b.n	800bf64 <__ssvfiscanf_r+0x1d0>
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	f000 fa5a 	bl	800c470 <__sccl>
 800bfbc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bfbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfc2:	9341      	str	r3, [sp, #260]	@ 0x104
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e7d7      	b.n	800bf7a <__ssvfiscanf_r+0x1e6>
 800bfca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800bfcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfd0:	9341      	str	r3, [sp, #260]	@ 0x104
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	e7d1      	b.n	800bf7a <__ssvfiscanf_r+0x1e6>
 800bfd6:	2302      	movs	r3, #2
 800bfd8:	e7cf      	b.n	800bf7a <__ssvfiscanf_r+0x1e6>
 800bfda:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800bfdc:	06c3      	lsls	r3, r0, #27
 800bfde:	f53f aefe 	bmi.w	800bdde <__ssvfiscanf_r+0x4a>
 800bfe2:	9b00      	ldr	r3, [sp, #0]
 800bfe4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bfe6:	1d19      	adds	r1, r3, #4
 800bfe8:	9100      	str	r1, [sp, #0]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	07c0      	lsls	r0, r0, #31
 800bfee:	bf4c      	ite	mi
 800bff0:	801a      	strhmi	r2, [r3, #0]
 800bff2:	601a      	strpl	r2, [r3, #0]
 800bff4:	e6f3      	b.n	800bdde <__ssvfiscanf_r+0x4a>
 800bff6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bff8:	4621      	mov	r1, r4
 800bffa:	4630      	mov	r0, r6
 800bffc:	4798      	blx	r3
 800bffe:	2800      	cmp	r0, #0
 800c000:	d0bf      	beq.n	800bf82 <__ssvfiscanf_r+0x1ee>
 800c002:	e79f      	b.n	800bf44 <__ssvfiscanf_r+0x1b0>
 800c004:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c006:	3201      	adds	r2, #1
 800c008:	9245      	str	r2, [sp, #276]	@ 0x114
 800c00a:	6862      	ldr	r2, [r4, #4]
 800c00c:	3a01      	subs	r2, #1
 800c00e:	2a00      	cmp	r2, #0
 800c010:	6062      	str	r2, [r4, #4]
 800c012:	dd02      	ble.n	800c01a <__ssvfiscanf_r+0x286>
 800c014:	3301      	adds	r3, #1
 800c016:	6023      	str	r3, [r4, #0]
 800c018:	e7b6      	b.n	800bf88 <__ssvfiscanf_r+0x1f4>
 800c01a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c01c:	4621      	mov	r1, r4
 800c01e:	4630      	mov	r0, r6
 800c020:	4798      	blx	r3
 800c022:	2800      	cmp	r0, #0
 800c024:	d0b0      	beq.n	800bf88 <__ssvfiscanf_r+0x1f4>
 800c026:	e78d      	b.n	800bf44 <__ssvfiscanf_r+0x1b0>
 800c028:	2b04      	cmp	r3, #4
 800c02a:	dc0f      	bgt.n	800c04c <__ssvfiscanf_r+0x2b8>
 800c02c:	466b      	mov	r3, sp
 800c02e:	4622      	mov	r2, r4
 800c030:	a941      	add	r1, sp, #260	@ 0x104
 800c032:	4630      	mov	r0, r6
 800c034:	f000 f87c 	bl	800c130 <_scanf_i>
 800c038:	e7b4      	b.n	800bfa4 <__ssvfiscanf_r+0x210>
 800c03a:	bf00      	nop
 800c03c:	0800bce5 	.word	0x0800bce5
 800c040:	0800bd5b 	.word	0x0800bd5b
 800c044:	0800d761 	.word	0x0800d761
 800c048:	0800d867 	.word	0x0800d867
 800c04c:	4b0a      	ldr	r3, [pc, #40]	@ (800c078 <__ssvfiscanf_r+0x2e4>)
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f43f aec5 	beq.w	800bdde <__ssvfiscanf_r+0x4a>
 800c054:	466b      	mov	r3, sp
 800c056:	4622      	mov	r2, r4
 800c058:	a941      	add	r1, sp, #260	@ 0x104
 800c05a:	4630      	mov	r0, r6
 800c05c:	f7fc fe5e 	bl	8008d1c <_scanf_float>
 800c060:	e7a0      	b.n	800bfa4 <__ssvfiscanf_r+0x210>
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	065b      	lsls	r3, r3, #25
 800c066:	f53f af71 	bmi.w	800bf4c <__ssvfiscanf_r+0x1b8>
 800c06a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c072:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c074:	e7f9      	b.n	800c06a <__ssvfiscanf_r+0x2d6>
 800c076:	bf00      	nop
 800c078:	08008d1d 	.word	0x08008d1d

0800c07c <_scanf_chars>:
 800c07c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c080:	4615      	mov	r5, r2
 800c082:	688a      	ldr	r2, [r1, #8]
 800c084:	4680      	mov	r8, r0
 800c086:	460c      	mov	r4, r1
 800c088:	b932      	cbnz	r2, 800c098 <_scanf_chars+0x1c>
 800c08a:	698a      	ldr	r2, [r1, #24]
 800c08c:	2a00      	cmp	r2, #0
 800c08e:	bf14      	ite	ne
 800c090:	f04f 32ff 	movne.w	r2, #4294967295
 800c094:	2201      	moveq	r2, #1
 800c096:	608a      	str	r2, [r1, #8]
 800c098:	6822      	ldr	r2, [r4, #0]
 800c09a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800c12c <_scanf_chars+0xb0>
 800c09e:	06d1      	lsls	r1, r2, #27
 800c0a0:	bf5f      	itttt	pl
 800c0a2:	681a      	ldrpl	r2, [r3, #0]
 800c0a4:	1d11      	addpl	r1, r2, #4
 800c0a6:	6019      	strpl	r1, [r3, #0]
 800c0a8:	6816      	ldrpl	r6, [r2, #0]
 800c0aa:	2700      	movs	r7, #0
 800c0ac:	69a0      	ldr	r0, [r4, #24]
 800c0ae:	b188      	cbz	r0, 800c0d4 <_scanf_chars+0x58>
 800c0b0:	2801      	cmp	r0, #1
 800c0b2:	d107      	bne.n	800c0c4 <_scanf_chars+0x48>
 800c0b4:	682b      	ldr	r3, [r5, #0]
 800c0b6:	781a      	ldrb	r2, [r3, #0]
 800c0b8:	6963      	ldr	r3, [r4, #20]
 800c0ba:	5c9b      	ldrb	r3, [r3, r2]
 800c0bc:	b953      	cbnz	r3, 800c0d4 <_scanf_chars+0x58>
 800c0be:	2f00      	cmp	r7, #0
 800c0c0:	d031      	beq.n	800c126 <_scanf_chars+0xaa>
 800c0c2:	e022      	b.n	800c10a <_scanf_chars+0x8e>
 800c0c4:	2802      	cmp	r0, #2
 800c0c6:	d120      	bne.n	800c10a <_scanf_chars+0x8e>
 800c0c8:	682b      	ldr	r3, [r5, #0]
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c0d0:	071b      	lsls	r3, r3, #28
 800c0d2:	d41a      	bmi.n	800c10a <_scanf_chars+0x8e>
 800c0d4:	6823      	ldr	r3, [r4, #0]
 800c0d6:	06da      	lsls	r2, r3, #27
 800c0d8:	bf5e      	ittt	pl
 800c0da:	682b      	ldrpl	r3, [r5, #0]
 800c0dc:	781b      	ldrbpl	r3, [r3, #0]
 800c0de:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c0e2:	682a      	ldr	r2, [r5, #0]
 800c0e4:	686b      	ldr	r3, [r5, #4]
 800c0e6:	3201      	adds	r2, #1
 800c0e8:	602a      	str	r2, [r5, #0]
 800c0ea:	68a2      	ldr	r2, [r4, #8]
 800c0ec:	3b01      	subs	r3, #1
 800c0ee:	3a01      	subs	r2, #1
 800c0f0:	606b      	str	r3, [r5, #4]
 800c0f2:	3701      	adds	r7, #1
 800c0f4:	60a2      	str	r2, [r4, #8]
 800c0f6:	b142      	cbz	r2, 800c10a <_scanf_chars+0x8e>
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	dcd7      	bgt.n	800c0ac <_scanf_chars+0x30>
 800c0fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c100:	4629      	mov	r1, r5
 800c102:	4640      	mov	r0, r8
 800c104:	4798      	blx	r3
 800c106:	2800      	cmp	r0, #0
 800c108:	d0d0      	beq.n	800c0ac <_scanf_chars+0x30>
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	f013 0310 	ands.w	r3, r3, #16
 800c110:	d105      	bne.n	800c11e <_scanf_chars+0xa2>
 800c112:	68e2      	ldr	r2, [r4, #12]
 800c114:	3201      	adds	r2, #1
 800c116:	60e2      	str	r2, [r4, #12]
 800c118:	69a2      	ldr	r2, [r4, #24]
 800c11a:	b102      	cbz	r2, 800c11e <_scanf_chars+0xa2>
 800c11c:	7033      	strb	r3, [r6, #0]
 800c11e:	6923      	ldr	r3, [r4, #16]
 800c120:	443b      	add	r3, r7
 800c122:	6123      	str	r3, [r4, #16]
 800c124:	2000      	movs	r0, #0
 800c126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c12a:	bf00      	nop
 800c12c:	0800d761 	.word	0x0800d761

0800c130 <_scanf_i>:
 800c130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c134:	4698      	mov	r8, r3
 800c136:	4b74      	ldr	r3, [pc, #464]	@ (800c308 <_scanf_i+0x1d8>)
 800c138:	460c      	mov	r4, r1
 800c13a:	4682      	mov	sl, r0
 800c13c:	4616      	mov	r6, r2
 800c13e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c142:	b087      	sub	sp, #28
 800c144:	ab03      	add	r3, sp, #12
 800c146:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c14a:	4b70      	ldr	r3, [pc, #448]	@ (800c30c <_scanf_i+0x1dc>)
 800c14c:	69a1      	ldr	r1, [r4, #24]
 800c14e:	4a70      	ldr	r2, [pc, #448]	@ (800c310 <_scanf_i+0x1e0>)
 800c150:	2903      	cmp	r1, #3
 800c152:	bf08      	it	eq
 800c154:	461a      	moveq	r2, r3
 800c156:	68a3      	ldr	r3, [r4, #8]
 800c158:	9201      	str	r2, [sp, #4]
 800c15a:	1e5a      	subs	r2, r3, #1
 800c15c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c160:	bf88      	it	hi
 800c162:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c166:	4627      	mov	r7, r4
 800c168:	bf82      	ittt	hi
 800c16a:	eb03 0905 	addhi.w	r9, r3, r5
 800c16e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c172:	60a3      	strhi	r3, [r4, #8]
 800c174:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c178:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c17c:	bf98      	it	ls
 800c17e:	f04f 0900 	movls.w	r9, #0
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	463d      	mov	r5, r7
 800c186:	f04f 0b00 	mov.w	fp, #0
 800c18a:	6831      	ldr	r1, [r6, #0]
 800c18c:	ab03      	add	r3, sp, #12
 800c18e:	7809      	ldrb	r1, [r1, #0]
 800c190:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c194:	2202      	movs	r2, #2
 800c196:	f7f4 f843 	bl	8000220 <memchr>
 800c19a:	b328      	cbz	r0, 800c1e8 <_scanf_i+0xb8>
 800c19c:	f1bb 0f01 	cmp.w	fp, #1
 800c1a0:	d159      	bne.n	800c256 <_scanf_i+0x126>
 800c1a2:	6862      	ldr	r2, [r4, #4]
 800c1a4:	b92a      	cbnz	r2, 800c1b2 <_scanf_i+0x82>
 800c1a6:	6822      	ldr	r2, [r4, #0]
 800c1a8:	2108      	movs	r1, #8
 800c1aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1ae:	6061      	str	r1, [r4, #4]
 800c1b0:	6022      	str	r2, [r4, #0]
 800c1b2:	6822      	ldr	r2, [r4, #0]
 800c1b4:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c1b8:	6022      	str	r2, [r4, #0]
 800c1ba:	68a2      	ldr	r2, [r4, #8]
 800c1bc:	1e51      	subs	r1, r2, #1
 800c1be:	60a1      	str	r1, [r4, #8]
 800c1c0:	b192      	cbz	r2, 800c1e8 <_scanf_i+0xb8>
 800c1c2:	6832      	ldr	r2, [r6, #0]
 800c1c4:	1c51      	adds	r1, r2, #1
 800c1c6:	6031      	str	r1, [r6, #0]
 800c1c8:	7812      	ldrb	r2, [r2, #0]
 800c1ca:	f805 2b01 	strb.w	r2, [r5], #1
 800c1ce:	6872      	ldr	r2, [r6, #4]
 800c1d0:	3a01      	subs	r2, #1
 800c1d2:	2a00      	cmp	r2, #0
 800c1d4:	6072      	str	r2, [r6, #4]
 800c1d6:	dc07      	bgt.n	800c1e8 <_scanf_i+0xb8>
 800c1d8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4650      	mov	r0, sl
 800c1e0:	4790      	blx	r2
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	f040 8085 	bne.w	800c2f2 <_scanf_i+0x1c2>
 800c1e8:	f10b 0b01 	add.w	fp, fp, #1
 800c1ec:	f1bb 0f03 	cmp.w	fp, #3
 800c1f0:	d1cb      	bne.n	800c18a <_scanf_i+0x5a>
 800c1f2:	6863      	ldr	r3, [r4, #4]
 800c1f4:	b90b      	cbnz	r3, 800c1fa <_scanf_i+0xca>
 800c1f6:	230a      	movs	r3, #10
 800c1f8:	6063      	str	r3, [r4, #4]
 800c1fa:	6863      	ldr	r3, [r4, #4]
 800c1fc:	4945      	ldr	r1, [pc, #276]	@ (800c314 <_scanf_i+0x1e4>)
 800c1fe:	6960      	ldr	r0, [r4, #20]
 800c200:	1ac9      	subs	r1, r1, r3
 800c202:	f000 f935 	bl	800c470 <__sccl>
 800c206:	f04f 0b00 	mov.w	fp, #0
 800c20a:	68a3      	ldr	r3, [r4, #8]
 800c20c:	6822      	ldr	r2, [r4, #0]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d03d      	beq.n	800c28e <_scanf_i+0x15e>
 800c212:	6831      	ldr	r1, [r6, #0]
 800c214:	6960      	ldr	r0, [r4, #20]
 800c216:	f891 c000 	ldrb.w	ip, [r1]
 800c21a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c21e:	2800      	cmp	r0, #0
 800c220:	d035      	beq.n	800c28e <_scanf_i+0x15e>
 800c222:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c226:	d124      	bne.n	800c272 <_scanf_i+0x142>
 800c228:	0510      	lsls	r0, r2, #20
 800c22a:	d522      	bpl.n	800c272 <_scanf_i+0x142>
 800c22c:	f10b 0b01 	add.w	fp, fp, #1
 800c230:	f1b9 0f00 	cmp.w	r9, #0
 800c234:	d003      	beq.n	800c23e <_scanf_i+0x10e>
 800c236:	3301      	adds	r3, #1
 800c238:	f109 39ff 	add.w	r9, r9, #4294967295
 800c23c:	60a3      	str	r3, [r4, #8]
 800c23e:	6873      	ldr	r3, [r6, #4]
 800c240:	3b01      	subs	r3, #1
 800c242:	2b00      	cmp	r3, #0
 800c244:	6073      	str	r3, [r6, #4]
 800c246:	dd1b      	ble.n	800c280 <_scanf_i+0x150>
 800c248:	6833      	ldr	r3, [r6, #0]
 800c24a:	3301      	adds	r3, #1
 800c24c:	6033      	str	r3, [r6, #0]
 800c24e:	68a3      	ldr	r3, [r4, #8]
 800c250:	3b01      	subs	r3, #1
 800c252:	60a3      	str	r3, [r4, #8]
 800c254:	e7d9      	b.n	800c20a <_scanf_i+0xda>
 800c256:	f1bb 0f02 	cmp.w	fp, #2
 800c25a:	d1ae      	bne.n	800c1ba <_scanf_i+0x8a>
 800c25c:	6822      	ldr	r2, [r4, #0]
 800c25e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c262:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c266:	d1bf      	bne.n	800c1e8 <_scanf_i+0xb8>
 800c268:	2110      	movs	r1, #16
 800c26a:	6061      	str	r1, [r4, #4]
 800c26c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c270:	e7a2      	b.n	800c1b8 <_scanf_i+0x88>
 800c272:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c276:	6022      	str	r2, [r4, #0]
 800c278:	780b      	ldrb	r3, [r1, #0]
 800c27a:	f805 3b01 	strb.w	r3, [r5], #1
 800c27e:	e7de      	b.n	800c23e <_scanf_i+0x10e>
 800c280:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c284:	4631      	mov	r1, r6
 800c286:	4650      	mov	r0, sl
 800c288:	4798      	blx	r3
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d0df      	beq.n	800c24e <_scanf_i+0x11e>
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	05d9      	lsls	r1, r3, #23
 800c292:	d50d      	bpl.n	800c2b0 <_scanf_i+0x180>
 800c294:	42bd      	cmp	r5, r7
 800c296:	d909      	bls.n	800c2ac <_scanf_i+0x17c>
 800c298:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c29c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c2a0:	4632      	mov	r2, r6
 800c2a2:	4650      	mov	r0, sl
 800c2a4:	4798      	blx	r3
 800c2a6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c2aa:	464d      	mov	r5, r9
 800c2ac:	42bd      	cmp	r5, r7
 800c2ae:	d028      	beq.n	800c302 <_scanf_i+0x1d2>
 800c2b0:	6822      	ldr	r2, [r4, #0]
 800c2b2:	f012 0210 	ands.w	r2, r2, #16
 800c2b6:	d113      	bne.n	800c2e0 <_scanf_i+0x1b0>
 800c2b8:	702a      	strb	r2, [r5, #0]
 800c2ba:	6863      	ldr	r3, [r4, #4]
 800c2bc:	9e01      	ldr	r6, [sp, #4]
 800c2be:	4639      	mov	r1, r7
 800c2c0:	4650      	mov	r0, sl
 800c2c2:	47b0      	blx	r6
 800c2c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c2c8:	6821      	ldr	r1, [r4, #0]
 800c2ca:	1d1a      	adds	r2, r3, #4
 800c2cc:	f8c8 2000 	str.w	r2, [r8]
 800c2d0:	f011 0f20 	tst.w	r1, #32
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	d00f      	beq.n	800c2f8 <_scanf_i+0x1c8>
 800c2d8:	6018      	str	r0, [r3, #0]
 800c2da:	68e3      	ldr	r3, [r4, #12]
 800c2dc:	3301      	adds	r3, #1
 800c2de:	60e3      	str	r3, [r4, #12]
 800c2e0:	6923      	ldr	r3, [r4, #16]
 800c2e2:	1bed      	subs	r5, r5, r7
 800c2e4:	445d      	add	r5, fp
 800c2e6:	442b      	add	r3, r5
 800c2e8:	6123      	str	r3, [r4, #16]
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	b007      	add	sp, #28
 800c2ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2f2:	f04f 0b00 	mov.w	fp, #0
 800c2f6:	e7ca      	b.n	800c28e <_scanf_i+0x15e>
 800c2f8:	07ca      	lsls	r2, r1, #31
 800c2fa:	bf4c      	ite	mi
 800c2fc:	8018      	strhmi	r0, [r3, #0]
 800c2fe:	6018      	strpl	r0, [r3, #0]
 800c300:	e7eb      	b.n	800c2da <_scanf_i+0x1aa>
 800c302:	2001      	movs	r0, #1
 800c304:	e7f2      	b.n	800c2ec <_scanf_i+0x1bc>
 800c306:	bf00      	nop
 800c308:	0800d4a0 	.word	0x0800d4a0
 800c30c:	0800ba31 	.word	0x0800ba31
 800c310:	0800ce15 	.word	0x0800ce15
 800c314:	0800d882 	.word	0x0800d882

0800c318 <__sflush_r>:
 800c318:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c31c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c320:	0716      	lsls	r6, r2, #28
 800c322:	4605      	mov	r5, r0
 800c324:	460c      	mov	r4, r1
 800c326:	d454      	bmi.n	800c3d2 <__sflush_r+0xba>
 800c328:	684b      	ldr	r3, [r1, #4]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	dc02      	bgt.n	800c334 <__sflush_r+0x1c>
 800c32e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c330:	2b00      	cmp	r3, #0
 800c332:	dd48      	ble.n	800c3c6 <__sflush_r+0xae>
 800c334:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c336:	2e00      	cmp	r6, #0
 800c338:	d045      	beq.n	800c3c6 <__sflush_r+0xae>
 800c33a:	2300      	movs	r3, #0
 800c33c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c340:	682f      	ldr	r7, [r5, #0]
 800c342:	6a21      	ldr	r1, [r4, #32]
 800c344:	602b      	str	r3, [r5, #0]
 800c346:	d030      	beq.n	800c3aa <__sflush_r+0x92>
 800c348:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c34a:	89a3      	ldrh	r3, [r4, #12]
 800c34c:	0759      	lsls	r1, r3, #29
 800c34e:	d505      	bpl.n	800c35c <__sflush_r+0x44>
 800c350:	6863      	ldr	r3, [r4, #4]
 800c352:	1ad2      	subs	r2, r2, r3
 800c354:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c356:	b10b      	cbz	r3, 800c35c <__sflush_r+0x44>
 800c358:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c35a:	1ad2      	subs	r2, r2, r3
 800c35c:	2300      	movs	r3, #0
 800c35e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c360:	6a21      	ldr	r1, [r4, #32]
 800c362:	4628      	mov	r0, r5
 800c364:	47b0      	blx	r6
 800c366:	1c43      	adds	r3, r0, #1
 800c368:	89a3      	ldrh	r3, [r4, #12]
 800c36a:	d106      	bne.n	800c37a <__sflush_r+0x62>
 800c36c:	6829      	ldr	r1, [r5, #0]
 800c36e:	291d      	cmp	r1, #29
 800c370:	d82b      	bhi.n	800c3ca <__sflush_r+0xb2>
 800c372:	4a2a      	ldr	r2, [pc, #168]	@ (800c41c <__sflush_r+0x104>)
 800c374:	410a      	asrs	r2, r1
 800c376:	07d6      	lsls	r6, r2, #31
 800c378:	d427      	bmi.n	800c3ca <__sflush_r+0xb2>
 800c37a:	2200      	movs	r2, #0
 800c37c:	6062      	str	r2, [r4, #4]
 800c37e:	04d9      	lsls	r1, r3, #19
 800c380:	6922      	ldr	r2, [r4, #16]
 800c382:	6022      	str	r2, [r4, #0]
 800c384:	d504      	bpl.n	800c390 <__sflush_r+0x78>
 800c386:	1c42      	adds	r2, r0, #1
 800c388:	d101      	bne.n	800c38e <__sflush_r+0x76>
 800c38a:	682b      	ldr	r3, [r5, #0]
 800c38c:	b903      	cbnz	r3, 800c390 <__sflush_r+0x78>
 800c38e:	6560      	str	r0, [r4, #84]	@ 0x54
 800c390:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c392:	602f      	str	r7, [r5, #0]
 800c394:	b1b9      	cbz	r1, 800c3c6 <__sflush_r+0xae>
 800c396:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c39a:	4299      	cmp	r1, r3
 800c39c:	d002      	beq.n	800c3a4 <__sflush_r+0x8c>
 800c39e:	4628      	mov	r0, r5
 800c3a0:	f7fd ff12 	bl	800a1c8 <_free_r>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3a8:	e00d      	b.n	800c3c6 <__sflush_r+0xae>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	47b0      	blx	r6
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	1c50      	adds	r0, r2, #1
 800c3b4:	d1c9      	bne.n	800c34a <__sflush_r+0x32>
 800c3b6:	682b      	ldr	r3, [r5, #0]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d0c6      	beq.n	800c34a <__sflush_r+0x32>
 800c3bc:	2b1d      	cmp	r3, #29
 800c3be:	d001      	beq.n	800c3c4 <__sflush_r+0xac>
 800c3c0:	2b16      	cmp	r3, #22
 800c3c2:	d11e      	bne.n	800c402 <__sflush_r+0xea>
 800c3c4:	602f      	str	r7, [r5, #0]
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	e022      	b.n	800c410 <__sflush_r+0xf8>
 800c3ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3ce:	b21b      	sxth	r3, r3
 800c3d0:	e01b      	b.n	800c40a <__sflush_r+0xf2>
 800c3d2:	690f      	ldr	r7, [r1, #16]
 800c3d4:	2f00      	cmp	r7, #0
 800c3d6:	d0f6      	beq.n	800c3c6 <__sflush_r+0xae>
 800c3d8:	0793      	lsls	r3, r2, #30
 800c3da:	680e      	ldr	r6, [r1, #0]
 800c3dc:	bf08      	it	eq
 800c3de:	694b      	ldreq	r3, [r1, #20]
 800c3e0:	600f      	str	r7, [r1, #0]
 800c3e2:	bf18      	it	ne
 800c3e4:	2300      	movne	r3, #0
 800c3e6:	eba6 0807 	sub.w	r8, r6, r7
 800c3ea:	608b      	str	r3, [r1, #8]
 800c3ec:	f1b8 0f00 	cmp.w	r8, #0
 800c3f0:	dde9      	ble.n	800c3c6 <__sflush_r+0xae>
 800c3f2:	6a21      	ldr	r1, [r4, #32]
 800c3f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3f6:	4643      	mov	r3, r8
 800c3f8:	463a      	mov	r2, r7
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	47b0      	blx	r6
 800c3fe:	2800      	cmp	r0, #0
 800c400:	dc08      	bgt.n	800c414 <__sflush_r+0xfc>
 800c402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c40a:	81a3      	strh	r3, [r4, #12]
 800c40c:	f04f 30ff 	mov.w	r0, #4294967295
 800c410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c414:	4407      	add	r7, r0
 800c416:	eba8 0800 	sub.w	r8, r8, r0
 800c41a:	e7e7      	b.n	800c3ec <__sflush_r+0xd4>
 800c41c:	dfbffffe 	.word	0xdfbffffe

0800c420 <_fflush_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	690b      	ldr	r3, [r1, #16]
 800c424:	4605      	mov	r5, r0
 800c426:	460c      	mov	r4, r1
 800c428:	b913      	cbnz	r3, 800c430 <_fflush_r+0x10>
 800c42a:	2500      	movs	r5, #0
 800c42c:	4628      	mov	r0, r5
 800c42e:	bd38      	pop	{r3, r4, r5, pc}
 800c430:	b118      	cbz	r0, 800c43a <_fflush_r+0x1a>
 800c432:	6a03      	ldr	r3, [r0, #32]
 800c434:	b90b      	cbnz	r3, 800c43a <_fflush_r+0x1a>
 800c436:	f7fc ff11 	bl	800925c <__sinit>
 800c43a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0f3      	beq.n	800c42a <_fflush_r+0xa>
 800c442:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c444:	07d0      	lsls	r0, r2, #31
 800c446:	d404      	bmi.n	800c452 <_fflush_r+0x32>
 800c448:	0599      	lsls	r1, r3, #22
 800c44a:	d402      	bmi.n	800c452 <_fflush_r+0x32>
 800c44c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c44e:	f7fd f856 	bl	80094fe <__retarget_lock_acquire_recursive>
 800c452:	4628      	mov	r0, r5
 800c454:	4621      	mov	r1, r4
 800c456:	f7ff ff5f 	bl	800c318 <__sflush_r>
 800c45a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c45c:	07da      	lsls	r2, r3, #31
 800c45e:	4605      	mov	r5, r0
 800c460:	d4e4      	bmi.n	800c42c <_fflush_r+0xc>
 800c462:	89a3      	ldrh	r3, [r4, #12]
 800c464:	059b      	lsls	r3, r3, #22
 800c466:	d4e1      	bmi.n	800c42c <_fflush_r+0xc>
 800c468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c46a:	f7fd f849 	bl	8009500 <__retarget_lock_release_recursive>
 800c46e:	e7dd      	b.n	800c42c <_fflush_r+0xc>

0800c470 <__sccl>:
 800c470:	b570      	push	{r4, r5, r6, lr}
 800c472:	780b      	ldrb	r3, [r1, #0]
 800c474:	4604      	mov	r4, r0
 800c476:	2b5e      	cmp	r3, #94	@ 0x5e
 800c478:	bf0b      	itete	eq
 800c47a:	784b      	ldrbeq	r3, [r1, #1]
 800c47c:	1c4a      	addne	r2, r1, #1
 800c47e:	1c8a      	addeq	r2, r1, #2
 800c480:	2100      	movne	r1, #0
 800c482:	bf08      	it	eq
 800c484:	2101      	moveq	r1, #1
 800c486:	3801      	subs	r0, #1
 800c488:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c48c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c490:	42a8      	cmp	r0, r5
 800c492:	d1fb      	bne.n	800c48c <__sccl+0x1c>
 800c494:	b90b      	cbnz	r3, 800c49a <__sccl+0x2a>
 800c496:	1e50      	subs	r0, r2, #1
 800c498:	bd70      	pop	{r4, r5, r6, pc}
 800c49a:	f081 0101 	eor.w	r1, r1, #1
 800c49e:	54e1      	strb	r1, [r4, r3]
 800c4a0:	4610      	mov	r0, r2
 800c4a2:	4602      	mov	r2, r0
 800c4a4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c4a8:	2d2d      	cmp	r5, #45	@ 0x2d
 800c4aa:	d005      	beq.n	800c4b8 <__sccl+0x48>
 800c4ac:	2d5d      	cmp	r5, #93	@ 0x5d
 800c4ae:	d016      	beq.n	800c4de <__sccl+0x6e>
 800c4b0:	2d00      	cmp	r5, #0
 800c4b2:	d0f1      	beq.n	800c498 <__sccl+0x28>
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	e7f2      	b.n	800c49e <__sccl+0x2e>
 800c4b8:	7846      	ldrb	r6, [r0, #1]
 800c4ba:	2e5d      	cmp	r6, #93	@ 0x5d
 800c4bc:	d0fa      	beq.n	800c4b4 <__sccl+0x44>
 800c4be:	42b3      	cmp	r3, r6
 800c4c0:	dcf8      	bgt.n	800c4b4 <__sccl+0x44>
 800c4c2:	3002      	adds	r0, #2
 800c4c4:	461a      	mov	r2, r3
 800c4c6:	3201      	adds	r2, #1
 800c4c8:	4296      	cmp	r6, r2
 800c4ca:	54a1      	strb	r1, [r4, r2]
 800c4cc:	dcfb      	bgt.n	800c4c6 <__sccl+0x56>
 800c4ce:	1af2      	subs	r2, r6, r3
 800c4d0:	3a01      	subs	r2, #1
 800c4d2:	1c5d      	adds	r5, r3, #1
 800c4d4:	42b3      	cmp	r3, r6
 800c4d6:	bfa8      	it	ge
 800c4d8:	2200      	movge	r2, #0
 800c4da:	18ab      	adds	r3, r5, r2
 800c4dc:	e7e1      	b.n	800c4a2 <__sccl+0x32>
 800c4de:	4610      	mov	r0, r2
 800c4e0:	e7da      	b.n	800c498 <__sccl+0x28>

0800c4e2 <__submore>:
 800c4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c4e6:	460c      	mov	r4, r1
 800c4e8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c4ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4ee:	4299      	cmp	r1, r3
 800c4f0:	d11d      	bne.n	800c52e <__submore+0x4c>
 800c4f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c4f6:	f7fd fedb 	bl	800a2b0 <_malloc_r>
 800c4fa:	b918      	cbnz	r0, 800c504 <__submore+0x22>
 800c4fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c508:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c50a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c50e:	6360      	str	r0, [r4, #52]	@ 0x34
 800c510:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c514:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c518:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800c51c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c520:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800c524:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c528:	6020      	str	r0, [r4, #0]
 800c52a:	2000      	movs	r0, #0
 800c52c:	e7e8      	b.n	800c500 <__submore+0x1e>
 800c52e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c530:	0077      	lsls	r7, r6, #1
 800c532:	463a      	mov	r2, r7
 800c534:	f000 fbd1 	bl	800ccda <_realloc_r>
 800c538:	4605      	mov	r5, r0
 800c53a:	2800      	cmp	r0, #0
 800c53c:	d0de      	beq.n	800c4fc <__submore+0x1a>
 800c53e:	eb00 0806 	add.w	r8, r0, r6
 800c542:	4601      	mov	r1, r0
 800c544:	4632      	mov	r2, r6
 800c546:	4640      	mov	r0, r8
 800c548:	f7fc ffdb 	bl	8009502 <memcpy>
 800c54c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c550:	f8c4 8000 	str.w	r8, [r4]
 800c554:	e7e9      	b.n	800c52a <__submore+0x48>

0800c556 <memmove>:
 800c556:	4288      	cmp	r0, r1
 800c558:	b510      	push	{r4, lr}
 800c55a:	eb01 0402 	add.w	r4, r1, r2
 800c55e:	d902      	bls.n	800c566 <memmove+0x10>
 800c560:	4284      	cmp	r4, r0
 800c562:	4623      	mov	r3, r4
 800c564:	d807      	bhi.n	800c576 <memmove+0x20>
 800c566:	1e43      	subs	r3, r0, #1
 800c568:	42a1      	cmp	r1, r4
 800c56a:	d008      	beq.n	800c57e <memmove+0x28>
 800c56c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c570:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c574:	e7f8      	b.n	800c568 <memmove+0x12>
 800c576:	4402      	add	r2, r0
 800c578:	4601      	mov	r1, r0
 800c57a:	428a      	cmp	r2, r1
 800c57c:	d100      	bne.n	800c580 <memmove+0x2a>
 800c57e:	bd10      	pop	{r4, pc}
 800c580:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c584:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c588:	e7f7      	b.n	800c57a <memmove+0x24>

0800c58a <strncmp>:
 800c58a:	b510      	push	{r4, lr}
 800c58c:	b16a      	cbz	r2, 800c5aa <strncmp+0x20>
 800c58e:	3901      	subs	r1, #1
 800c590:	1884      	adds	r4, r0, r2
 800c592:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c596:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d103      	bne.n	800c5a6 <strncmp+0x1c>
 800c59e:	42a0      	cmp	r0, r4
 800c5a0:	d001      	beq.n	800c5a6 <strncmp+0x1c>
 800c5a2:	2a00      	cmp	r2, #0
 800c5a4:	d1f5      	bne.n	800c592 <strncmp+0x8>
 800c5a6:	1ad0      	subs	r0, r2, r3
 800c5a8:	bd10      	pop	{r4, pc}
 800c5aa:	4610      	mov	r0, r2
 800c5ac:	e7fc      	b.n	800c5a8 <strncmp+0x1e>
	...

0800c5b0 <_sbrk_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4d06      	ldr	r5, [pc, #24]	@ (800c5cc <_sbrk_r+0x1c>)
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	4608      	mov	r0, r1
 800c5ba:	602b      	str	r3, [r5, #0]
 800c5bc:	f7f6 fa5c 	bl	8002a78 <_sbrk>
 800c5c0:	1c43      	adds	r3, r0, #1
 800c5c2:	d102      	bne.n	800c5ca <_sbrk_r+0x1a>
 800c5c4:	682b      	ldr	r3, [r5, #0]
 800c5c6:	b103      	cbz	r3, 800c5ca <_sbrk_r+0x1a>
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	bd38      	pop	{r3, r4, r5, pc}
 800c5cc:	2000080c 	.word	0x2000080c

0800c5d0 <nan>:
 800c5d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c5d8 <nan+0x8>
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	00000000 	.word	0x00000000
 800c5dc:	7ff80000 	.word	0x7ff80000

0800c5e0 <__assert_func>:
 800c5e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5e2:	4614      	mov	r4, r2
 800c5e4:	461a      	mov	r2, r3
 800c5e6:	4b09      	ldr	r3, [pc, #36]	@ (800c60c <__assert_func+0x2c>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4605      	mov	r5, r0
 800c5ec:	68d8      	ldr	r0, [r3, #12]
 800c5ee:	b954      	cbnz	r4, 800c606 <__assert_func+0x26>
 800c5f0:	4b07      	ldr	r3, [pc, #28]	@ (800c610 <__assert_func+0x30>)
 800c5f2:	461c      	mov	r4, r3
 800c5f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5f8:	9100      	str	r1, [sp, #0]
 800c5fa:	462b      	mov	r3, r5
 800c5fc:	4905      	ldr	r1, [pc, #20]	@ (800c614 <__assert_func+0x34>)
 800c5fe:	f000 fc19 	bl	800ce34 <fiprintf>
 800c602:	f000 fc29 	bl	800ce58 <abort>
 800c606:	4b04      	ldr	r3, [pc, #16]	@ (800c618 <__assert_func+0x38>)
 800c608:	e7f4      	b.n	800c5f4 <__assert_func+0x14>
 800c60a:	bf00      	nop
 800c60c:	20000014 	.word	0x20000014
 800c610:	0800d8d0 	.word	0x0800d8d0
 800c614:	0800d8a2 	.word	0x0800d8a2
 800c618:	0800d895 	.word	0x0800d895

0800c61c <_calloc_r>:
 800c61c:	b570      	push	{r4, r5, r6, lr}
 800c61e:	fba1 5402 	umull	r5, r4, r1, r2
 800c622:	b93c      	cbnz	r4, 800c634 <_calloc_r+0x18>
 800c624:	4629      	mov	r1, r5
 800c626:	f7fd fe43 	bl	800a2b0 <_malloc_r>
 800c62a:	4606      	mov	r6, r0
 800c62c:	b928      	cbnz	r0, 800c63a <_calloc_r+0x1e>
 800c62e:	2600      	movs	r6, #0
 800c630:	4630      	mov	r0, r6
 800c632:	bd70      	pop	{r4, r5, r6, pc}
 800c634:	220c      	movs	r2, #12
 800c636:	6002      	str	r2, [r0, #0]
 800c638:	e7f9      	b.n	800c62e <_calloc_r+0x12>
 800c63a:	462a      	mov	r2, r5
 800c63c:	4621      	mov	r1, r4
 800c63e:	f7fc fed2 	bl	80093e6 <memset>
 800c642:	e7f5      	b.n	800c630 <_calloc_r+0x14>

0800c644 <rshift>:
 800c644:	6903      	ldr	r3, [r0, #16]
 800c646:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c64a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c64e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c652:	f100 0414 	add.w	r4, r0, #20
 800c656:	dd45      	ble.n	800c6e4 <rshift+0xa0>
 800c658:	f011 011f 	ands.w	r1, r1, #31
 800c65c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c660:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c664:	d10c      	bne.n	800c680 <rshift+0x3c>
 800c666:	f100 0710 	add.w	r7, r0, #16
 800c66a:	4629      	mov	r1, r5
 800c66c:	42b1      	cmp	r1, r6
 800c66e:	d334      	bcc.n	800c6da <rshift+0x96>
 800c670:	1a9b      	subs	r3, r3, r2
 800c672:	009b      	lsls	r3, r3, #2
 800c674:	1eea      	subs	r2, r5, #3
 800c676:	4296      	cmp	r6, r2
 800c678:	bf38      	it	cc
 800c67a:	2300      	movcc	r3, #0
 800c67c:	4423      	add	r3, r4
 800c67e:	e015      	b.n	800c6ac <rshift+0x68>
 800c680:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c684:	f1c1 0820 	rsb	r8, r1, #32
 800c688:	40cf      	lsrs	r7, r1
 800c68a:	f105 0e04 	add.w	lr, r5, #4
 800c68e:	46a1      	mov	r9, r4
 800c690:	4576      	cmp	r6, lr
 800c692:	46f4      	mov	ip, lr
 800c694:	d815      	bhi.n	800c6c2 <rshift+0x7e>
 800c696:	1a9a      	subs	r2, r3, r2
 800c698:	0092      	lsls	r2, r2, #2
 800c69a:	3a04      	subs	r2, #4
 800c69c:	3501      	adds	r5, #1
 800c69e:	42ae      	cmp	r6, r5
 800c6a0:	bf38      	it	cc
 800c6a2:	2200      	movcc	r2, #0
 800c6a4:	18a3      	adds	r3, r4, r2
 800c6a6:	50a7      	str	r7, [r4, r2]
 800c6a8:	b107      	cbz	r7, 800c6ac <rshift+0x68>
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	1b1a      	subs	r2, r3, r4
 800c6ae:	42a3      	cmp	r3, r4
 800c6b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c6b4:	bf08      	it	eq
 800c6b6:	2300      	moveq	r3, #0
 800c6b8:	6102      	str	r2, [r0, #16]
 800c6ba:	bf08      	it	eq
 800c6bc:	6143      	streq	r3, [r0, #20]
 800c6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6c2:	f8dc c000 	ldr.w	ip, [ip]
 800c6c6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c6ca:	ea4c 0707 	orr.w	r7, ip, r7
 800c6ce:	f849 7b04 	str.w	r7, [r9], #4
 800c6d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c6d6:	40cf      	lsrs	r7, r1
 800c6d8:	e7da      	b.n	800c690 <rshift+0x4c>
 800c6da:	f851 cb04 	ldr.w	ip, [r1], #4
 800c6de:	f847 cf04 	str.w	ip, [r7, #4]!
 800c6e2:	e7c3      	b.n	800c66c <rshift+0x28>
 800c6e4:	4623      	mov	r3, r4
 800c6e6:	e7e1      	b.n	800c6ac <rshift+0x68>

0800c6e8 <__hexdig_fun>:
 800c6e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c6ec:	2b09      	cmp	r3, #9
 800c6ee:	d802      	bhi.n	800c6f6 <__hexdig_fun+0xe>
 800c6f0:	3820      	subs	r0, #32
 800c6f2:	b2c0      	uxtb	r0, r0
 800c6f4:	4770      	bx	lr
 800c6f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c6fa:	2b05      	cmp	r3, #5
 800c6fc:	d801      	bhi.n	800c702 <__hexdig_fun+0x1a>
 800c6fe:	3847      	subs	r0, #71	@ 0x47
 800c700:	e7f7      	b.n	800c6f2 <__hexdig_fun+0xa>
 800c702:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c706:	2b05      	cmp	r3, #5
 800c708:	d801      	bhi.n	800c70e <__hexdig_fun+0x26>
 800c70a:	3827      	subs	r0, #39	@ 0x27
 800c70c:	e7f1      	b.n	800c6f2 <__hexdig_fun+0xa>
 800c70e:	2000      	movs	r0, #0
 800c710:	4770      	bx	lr
	...

0800c714 <__gethex>:
 800c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	b085      	sub	sp, #20
 800c71a:	468a      	mov	sl, r1
 800c71c:	9302      	str	r3, [sp, #8]
 800c71e:	680b      	ldr	r3, [r1, #0]
 800c720:	9001      	str	r0, [sp, #4]
 800c722:	4690      	mov	r8, r2
 800c724:	1c9c      	adds	r4, r3, #2
 800c726:	46a1      	mov	r9, r4
 800c728:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c72c:	2830      	cmp	r0, #48	@ 0x30
 800c72e:	d0fa      	beq.n	800c726 <__gethex+0x12>
 800c730:	eba9 0303 	sub.w	r3, r9, r3
 800c734:	f1a3 0b02 	sub.w	fp, r3, #2
 800c738:	f7ff ffd6 	bl	800c6e8 <__hexdig_fun>
 800c73c:	4605      	mov	r5, r0
 800c73e:	2800      	cmp	r0, #0
 800c740:	d168      	bne.n	800c814 <__gethex+0x100>
 800c742:	49a0      	ldr	r1, [pc, #640]	@ (800c9c4 <__gethex+0x2b0>)
 800c744:	2201      	movs	r2, #1
 800c746:	4648      	mov	r0, r9
 800c748:	f7ff ff1f 	bl	800c58a <strncmp>
 800c74c:	4607      	mov	r7, r0
 800c74e:	2800      	cmp	r0, #0
 800c750:	d167      	bne.n	800c822 <__gethex+0x10e>
 800c752:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c756:	4626      	mov	r6, r4
 800c758:	f7ff ffc6 	bl	800c6e8 <__hexdig_fun>
 800c75c:	2800      	cmp	r0, #0
 800c75e:	d062      	beq.n	800c826 <__gethex+0x112>
 800c760:	4623      	mov	r3, r4
 800c762:	7818      	ldrb	r0, [r3, #0]
 800c764:	2830      	cmp	r0, #48	@ 0x30
 800c766:	4699      	mov	r9, r3
 800c768:	f103 0301 	add.w	r3, r3, #1
 800c76c:	d0f9      	beq.n	800c762 <__gethex+0x4e>
 800c76e:	f7ff ffbb 	bl	800c6e8 <__hexdig_fun>
 800c772:	fab0 f580 	clz	r5, r0
 800c776:	096d      	lsrs	r5, r5, #5
 800c778:	f04f 0b01 	mov.w	fp, #1
 800c77c:	464a      	mov	r2, r9
 800c77e:	4616      	mov	r6, r2
 800c780:	3201      	adds	r2, #1
 800c782:	7830      	ldrb	r0, [r6, #0]
 800c784:	f7ff ffb0 	bl	800c6e8 <__hexdig_fun>
 800c788:	2800      	cmp	r0, #0
 800c78a:	d1f8      	bne.n	800c77e <__gethex+0x6a>
 800c78c:	498d      	ldr	r1, [pc, #564]	@ (800c9c4 <__gethex+0x2b0>)
 800c78e:	2201      	movs	r2, #1
 800c790:	4630      	mov	r0, r6
 800c792:	f7ff fefa 	bl	800c58a <strncmp>
 800c796:	2800      	cmp	r0, #0
 800c798:	d13f      	bne.n	800c81a <__gethex+0x106>
 800c79a:	b944      	cbnz	r4, 800c7ae <__gethex+0x9a>
 800c79c:	1c74      	adds	r4, r6, #1
 800c79e:	4622      	mov	r2, r4
 800c7a0:	4616      	mov	r6, r2
 800c7a2:	3201      	adds	r2, #1
 800c7a4:	7830      	ldrb	r0, [r6, #0]
 800c7a6:	f7ff ff9f 	bl	800c6e8 <__hexdig_fun>
 800c7aa:	2800      	cmp	r0, #0
 800c7ac:	d1f8      	bne.n	800c7a0 <__gethex+0x8c>
 800c7ae:	1ba4      	subs	r4, r4, r6
 800c7b0:	00a7      	lsls	r7, r4, #2
 800c7b2:	7833      	ldrb	r3, [r6, #0]
 800c7b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c7b8:	2b50      	cmp	r3, #80	@ 0x50
 800c7ba:	d13e      	bne.n	800c83a <__gethex+0x126>
 800c7bc:	7873      	ldrb	r3, [r6, #1]
 800c7be:	2b2b      	cmp	r3, #43	@ 0x2b
 800c7c0:	d033      	beq.n	800c82a <__gethex+0x116>
 800c7c2:	2b2d      	cmp	r3, #45	@ 0x2d
 800c7c4:	d034      	beq.n	800c830 <__gethex+0x11c>
 800c7c6:	1c71      	adds	r1, r6, #1
 800c7c8:	2400      	movs	r4, #0
 800c7ca:	7808      	ldrb	r0, [r1, #0]
 800c7cc:	f7ff ff8c 	bl	800c6e8 <__hexdig_fun>
 800c7d0:	1e43      	subs	r3, r0, #1
 800c7d2:	b2db      	uxtb	r3, r3
 800c7d4:	2b18      	cmp	r3, #24
 800c7d6:	d830      	bhi.n	800c83a <__gethex+0x126>
 800c7d8:	f1a0 0210 	sub.w	r2, r0, #16
 800c7dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c7e0:	f7ff ff82 	bl	800c6e8 <__hexdig_fun>
 800c7e4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c7e8:	fa5f fc8c 	uxtb.w	ip, ip
 800c7ec:	f1bc 0f18 	cmp.w	ip, #24
 800c7f0:	f04f 030a 	mov.w	r3, #10
 800c7f4:	d91e      	bls.n	800c834 <__gethex+0x120>
 800c7f6:	b104      	cbz	r4, 800c7fa <__gethex+0xe6>
 800c7f8:	4252      	negs	r2, r2
 800c7fa:	4417      	add	r7, r2
 800c7fc:	f8ca 1000 	str.w	r1, [sl]
 800c800:	b1ed      	cbz	r5, 800c83e <__gethex+0x12a>
 800c802:	f1bb 0f00 	cmp.w	fp, #0
 800c806:	bf0c      	ite	eq
 800c808:	2506      	moveq	r5, #6
 800c80a:	2500      	movne	r5, #0
 800c80c:	4628      	mov	r0, r5
 800c80e:	b005      	add	sp, #20
 800c810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c814:	2500      	movs	r5, #0
 800c816:	462c      	mov	r4, r5
 800c818:	e7b0      	b.n	800c77c <__gethex+0x68>
 800c81a:	2c00      	cmp	r4, #0
 800c81c:	d1c7      	bne.n	800c7ae <__gethex+0x9a>
 800c81e:	4627      	mov	r7, r4
 800c820:	e7c7      	b.n	800c7b2 <__gethex+0x9e>
 800c822:	464e      	mov	r6, r9
 800c824:	462f      	mov	r7, r5
 800c826:	2501      	movs	r5, #1
 800c828:	e7c3      	b.n	800c7b2 <__gethex+0x9e>
 800c82a:	2400      	movs	r4, #0
 800c82c:	1cb1      	adds	r1, r6, #2
 800c82e:	e7cc      	b.n	800c7ca <__gethex+0xb6>
 800c830:	2401      	movs	r4, #1
 800c832:	e7fb      	b.n	800c82c <__gethex+0x118>
 800c834:	fb03 0002 	mla	r0, r3, r2, r0
 800c838:	e7ce      	b.n	800c7d8 <__gethex+0xc4>
 800c83a:	4631      	mov	r1, r6
 800c83c:	e7de      	b.n	800c7fc <__gethex+0xe8>
 800c83e:	eba6 0309 	sub.w	r3, r6, r9
 800c842:	3b01      	subs	r3, #1
 800c844:	4629      	mov	r1, r5
 800c846:	2b07      	cmp	r3, #7
 800c848:	dc0a      	bgt.n	800c860 <__gethex+0x14c>
 800c84a:	9801      	ldr	r0, [sp, #4]
 800c84c:	f7fd fdbc 	bl	800a3c8 <_Balloc>
 800c850:	4604      	mov	r4, r0
 800c852:	b940      	cbnz	r0, 800c866 <__gethex+0x152>
 800c854:	4b5c      	ldr	r3, [pc, #368]	@ (800c9c8 <__gethex+0x2b4>)
 800c856:	4602      	mov	r2, r0
 800c858:	21e4      	movs	r1, #228	@ 0xe4
 800c85a:	485c      	ldr	r0, [pc, #368]	@ (800c9cc <__gethex+0x2b8>)
 800c85c:	f7ff fec0 	bl	800c5e0 <__assert_func>
 800c860:	3101      	adds	r1, #1
 800c862:	105b      	asrs	r3, r3, #1
 800c864:	e7ef      	b.n	800c846 <__gethex+0x132>
 800c866:	f100 0a14 	add.w	sl, r0, #20
 800c86a:	2300      	movs	r3, #0
 800c86c:	4655      	mov	r5, sl
 800c86e:	469b      	mov	fp, r3
 800c870:	45b1      	cmp	r9, r6
 800c872:	d337      	bcc.n	800c8e4 <__gethex+0x1d0>
 800c874:	f845 bb04 	str.w	fp, [r5], #4
 800c878:	eba5 050a 	sub.w	r5, r5, sl
 800c87c:	10ad      	asrs	r5, r5, #2
 800c87e:	6125      	str	r5, [r4, #16]
 800c880:	4658      	mov	r0, fp
 800c882:	f7fd fe93 	bl	800a5ac <__hi0bits>
 800c886:	016d      	lsls	r5, r5, #5
 800c888:	f8d8 6000 	ldr.w	r6, [r8]
 800c88c:	1a2d      	subs	r5, r5, r0
 800c88e:	42b5      	cmp	r5, r6
 800c890:	dd54      	ble.n	800c93c <__gethex+0x228>
 800c892:	1bad      	subs	r5, r5, r6
 800c894:	4629      	mov	r1, r5
 800c896:	4620      	mov	r0, r4
 800c898:	f7fe fa27 	bl	800acea <__any_on>
 800c89c:	4681      	mov	r9, r0
 800c89e:	b178      	cbz	r0, 800c8c0 <__gethex+0x1ac>
 800c8a0:	1e6b      	subs	r3, r5, #1
 800c8a2:	1159      	asrs	r1, r3, #5
 800c8a4:	f003 021f 	and.w	r2, r3, #31
 800c8a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c8ac:	f04f 0901 	mov.w	r9, #1
 800c8b0:	fa09 f202 	lsl.w	r2, r9, r2
 800c8b4:	420a      	tst	r2, r1
 800c8b6:	d003      	beq.n	800c8c0 <__gethex+0x1ac>
 800c8b8:	454b      	cmp	r3, r9
 800c8ba:	dc36      	bgt.n	800c92a <__gethex+0x216>
 800c8bc:	f04f 0902 	mov.w	r9, #2
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	4620      	mov	r0, r4
 800c8c4:	f7ff febe 	bl	800c644 <rshift>
 800c8c8:	442f      	add	r7, r5
 800c8ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c8ce:	42bb      	cmp	r3, r7
 800c8d0:	da42      	bge.n	800c958 <__gethex+0x244>
 800c8d2:	9801      	ldr	r0, [sp, #4]
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	f7fd fdb7 	bl	800a448 <_Bfree>
 800c8da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c8dc:	2300      	movs	r3, #0
 800c8de:	6013      	str	r3, [r2, #0]
 800c8e0:	25a3      	movs	r5, #163	@ 0xa3
 800c8e2:	e793      	b.n	800c80c <__gethex+0xf8>
 800c8e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c8e8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c8ea:	d012      	beq.n	800c912 <__gethex+0x1fe>
 800c8ec:	2b20      	cmp	r3, #32
 800c8ee:	d104      	bne.n	800c8fa <__gethex+0x1e6>
 800c8f0:	f845 bb04 	str.w	fp, [r5], #4
 800c8f4:	f04f 0b00 	mov.w	fp, #0
 800c8f8:	465b      	mov	r3, fp
 800c8fa:	7830      	ldrb	r0, [r6, #0]
 800c8fc:	9303      	str	r3, [sp, #12]
 800c8fe:	f7ff fef3 	bl	800c6e8 <__hexdig_fun>
 800c902:	9b03      	ldr	r3, [sp, #12]
 800c904:	f000 000f 	and.w	r0, r0, #15
 800c908:	4098      	lsls	r0, r3
 800c90a:	ea4b 0b00 	orr.w	fp, fp, r0
 800c90e:	3304      	adds	r3, #4
 800c910:	e7ae      	b.n	800c870 <__gethex+0x15c>
 800c912:	45b1      	cmp	r9, r6
 800c914:	d8ea      	bhi.n	800c8ec <__gethex+0x1d8>
 800c916:	492b      	ldr	r1, [pc, #172]	@ (800c9c4 <__gethex+0x2b0>)
 800c918:	9303      	str	r3, [sp, #12]
 800c91a:	2201      	movs	r2, #1
 800c91c:	4630      	mov	r0, r6
 800c91e:	f7ff fe34 	bl	800c58a <strncmp>
 800c922:	9b03      	ldr	r3, [sp, #12]
 800c924:	2800      	cmp	r0, #0
 800c926:	d1e1      	bne.n	800c8ec <__gethex+0x1d8>
 800c928:	e7a2      	b.n	800c870 <__gethex+0x15c>
 800c92a:	1ea9      	subs	r1, r5, #2
 800c92c:	4620      	mov	r0, r4
 800c92e:	f7fe f9dc 	bl	800acea <__any_on>
 800c932:	2800      	cmp	r0, #0
 800c934:	d0c2      	beq.n	800c8bc <__gethex+0x1a8>
 800c936:	f04f 0903 	mov.w	r9, #3
 800c93a:	e7c1      	b.n	800c8c0 <__gethex+0x1ac>
 800c93c:	da09      	bge.n	800c952 <__gethex+0x23e>
 800c93e:	1b75      	subs	r5, r6, r5
 800c940:	4621      	mov	r1, r4
 800c942:	9801      	ldr	r0, [sp, #4]
 800c944:	462a      	mov	r2, r5
 800c946:	f7fd ff97 	bl	800a878 <__lshift>
 800c94a:	1b7f      	subs	r7, r7, r5
 800c94c:	4604      	mov	r4, r0
 800c94e:	f100 0a14 	add.w	sl, r0, #20
 800c952:	f04f 0900 	mov.w	r9, #0
 800c956:	e7b8      	b.n	800c8ca <__gethex+0x1b6>
 800c958:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c95c:	42bd      	cmp	r5, r7
 800c95e:	dd6f      	ble.n	800ca40 <__gethex+0x32c>
 800c960:	1bed      	subs	r5, r5, r7
 800c962:	42ae      	cmp	r6, r5
 800c964:	dc34      	bgt.n	800c9d0 <__gethex+0x2bc>
 800c966:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d022      	beq.n	800c9b4 <__gethex+0x2a0>
 800c96e:	2b03      	cmp	r3, #3
 800c970:	d024      	beq.n	800c9bc <__gethex+0x2a8>
 800c972:	2b01      	cmp	r3, #1
 800c974:	d115      	bne.n	800c9a2 <__gethex+0x28e>
 800c976:	42ae      	cmp	r6, r5
 800c978:	d113      	bne.n	800c9a2 <__gethex+0x28e>
 800c97a:	2e01      	cmp	r6, #1
 800c97c:	d10b      	bne.n	800c996 <__gethex+0x282>
 800c97e:	9a02      	ldr	r2, [sp, #8]
 800c980:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	2301      	movs	r3, #1
 800c988:	6123      	str	r3, [r4, #16]
 800c98a:	f8ca 3000 	str.w	r3, [sl]
 800c98e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c990:	2562      	movs	r5, #98	@ 0x62
 800c992:	601c      	str	r4, [r3, #0]
 800c994:	e73a      	b.n	800c80c <__gethex+0xf8>
 800c996:	1e71      	subs	r1, r6, #1
 800c998:	4620      	mov	r0, r4
 800c99a:	f7fe f9a6 	bl	800acea <__any_on>
 800c99e:	2800      	cmp	r0, #0
 800c9a0:	d1ed      	bne.n	800c97e <__gethex+0x26a>
 800c9a2:	9801      	ldr	r0, [sp, #4]
 800c9a4:	4621      	mov	r1, r4
 800c9a6:	f7fd fd4f 	bl	800a448 <_Bfree>
 800c9aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	2550      	movs	r5, #80	@ 0x50
 800c9b2:	e72b      	b.n	800c80c <__gethex+0xf8>
 800c9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d1f3      	bne.n	800c9a2 <__gethex+0x28e>
 800c9ba:	e7e0      	b.n	800c97e <__gethex+0x26a>
 800c9bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1dd      	bne.n	800c97e <__gethex+0x26a>
 800c9c2:	e7ee      	b.n	800c9a2 <__gethex+0x28e>
 800c9c4:	0800d708 	.word	0x0800d708
 800c9c8:	0800d59f 	.word	0x0800d59f
 800c9cc:	0800d8d1 	.word	0x0800d8d1
 800c9d0:	1e6f      	subs	r7, r5, #1
 800c9d2:	f1b9 0f00 	cmp.w	r9, #0
 800c9d6:	d130      	bne.n	800ca3a <__gethex+0x326>
 800c9d8:	b127      	cbz	r7, 800c9e4 <__gethex+0x2d0>
 800c9da:	4639      	mov	r1, r7
 800c9dc:	4620      	mov	r0, r4
 800c9de:	f7fe f984 	bl	800acea <__any_on>
 800c9e2:	4681      	mov	r9, r0
 800c9e4:	117a      	asrs	r2, r7, #5
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c9ec:	f007 071f 	and.w	r7, r7, #31
 800c9f0:	40bb      	lsls	r3, r7
 800c9f2:	4213      	tst	r3, r2
 800c9f4:	4629      	mov	r1, r5
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	bf18      	it	ne
 800c9fa:	f049 0902 	orrne.w	r9, r9, #2
 800c9fe:	f7ff fe21 	bl	800c644 <rshift>
 800ca02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ca06:	1b76      	subs	r6, r6, r5
 800ca08:	2502      	movs	r5, #2
 800ca0a:	f1b9 0f00 	cmp.w	r9, #0
 800ca0e:	d047      	beq.n	800caa0 <__gethex+0x38c>
 800ca10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	d015      	beq.n	800ca44 <__gethex+0x330>
 800ca18:	2b03      	cmp	r3, #3
 800ca1a:	d017      	beq.n	800ca4c <__gethex+0x338>
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d109      	bne.n	800ca34 <__gethex+0x320>
 800ca20:	f019 0f02 	tst.w	r9, #2
 800ca24:	d006      	beq.n	800ca34 <__gethex+0x320>
 800ca26:	f8da 3000 	ldr.w	r3, [sl]
 800ca2a:	ea49 0903 	orr.w	r9, r9, r3
 800ca2e:	f019 0f01 	tst.w	r9, #1
 800ca32:	d10e      	bne.n	800ca52 <__gethex+0x33e>
 800ca34:	f045 0510 	orr.w	r5, r5, #16
 800ca38:	e032      	b.n	800caa0 <__gethex+0x38c>
 800ca3a:	f04f 0901 	mov.w	r9, #1
 800ca3e:	e7d1      	b.n	800c9e4 <__gethex+0x2d0>
 800ca40:	2501      	movs	r5, #1
 800ca42:	e7e2      	b.n	800ca0a <__gethex+0x2f6>
 800ca44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca46:	f1c3 0301 	rsb	r3, r3, #1
 800ca4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ca4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0f0      	beq.n	800ca34 <__gethex+0x320>
 800ca52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ca56:	f104 0314 	add.w	r3, r4, #20
 800ca5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ca5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ca62:	f04f 0c00 	mov.w	ip, #0
 800ca66:	4618      	mov	r0, r3
 800ca68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ca70:	d01b      	beq.n	800caaa <__gethex+0x396>
 800ca72:	3201      	adds	r2, #1
 800ca74:	6002      	str	r2, [r0, #0]
 800ca76:	2d02      	cmp	r5, #2
 800ca78:	f104 0314 	add.w	r3, r4, #20
 800ca7c:	d13c      	bne.n	800caf8 <__gethex+0x3e4>
 800ca7e:	f8d8 2000 	ldr.w	r2, [r8]
 800ca82:	3a01      	subs	r2, #1
 800ca84:	42b2      	cmp	r2, r6
 800ca86:	d109      	bne.n	800ca9c <__gethex+0x388>
 800ca88:	1171      	asrs	r1, r6, #5
 800ca8a:	2201      	movs	r2, #1
 800ca8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca90:	f006 061f 	and.w	r6, r6, #31
 800ca94:	fa02 f606 	lsl.w	r6, r2, r6
 800ca98:	421e      	tst	r6, r3
 800ca9a:	d13a      	bne.n	800cb12 <__gethex+0x3fe>
 800ca9c:	f045 0520 	orr.w	r5, r5, #32
 800caa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800caa2:	601c      	str	r4, [r3, #0]
 800caa4:	9b02      	ldr	r3, [sp, #8]
 800caa6:	601f      	str	r7, [r3, #0]
 800caa8:	e6b0      	b.n	800c80c <__gethex+0xf8>
 800caaa:	4299      	cmp	r1, r3
 800caac:	f843 cc04 	str.w	ip, [r3, #-4]
 800cab0:	d8d9      	bhi.n	800ca66 <__gethex+0x352>
 800cab2:	68a3      	ldr	r3, [r4, #8]
 800cab4:	459b      	cmp	fp, r3
 800cab6:	db17      	blt.n	800cae8 <__gethex+0x3d4>
 800cab8:	6861      	ldr	r1, [r4, #4]
 800caba:	9801      	ldr	r0, [sp, #4]
 800cabc:	3101      	adds	r1, #1
 800cabe:	f7fd fc83 	bl	800a3c8 <_Balloc>
 800cac2:	4681      	mov	r9, r0
 800cac4:	b918      	cbnz	r0, 800cace <__gethex+0x3ba>
 800cac6:	4b1a      	ldr	r3, [pc, #104]	@ (800cb30 <__gethex+0x41c>)
 800cac8:	4602      	mov	r2, r0
 800caca:	2184      	movs	r1, #132	@ 0x84
 800cacc:	e6c5      	b.n	800c85a <__gethex+0x146>
 800cace:	6922      	ldr	r2, [r4, #16]
 800cad0:	3202      	adds	r2, #2
 800cad2:	f104 010c 	add.w	r1, r4, #12
 800cad6:	0092      	lsls	r2, r2, #2
 800cad8:	300c      	adds	r0, #12
 800cada:	f7fc fd12 	bl	8009502 <memcpy>
 800cade:	4621      	mov	r1, r4
 800cae0:	9801      	ldr	r0, [sp, #4]
 800cae2:	f7fd fcb1 	bl	800a448 <_Bfree>
 800cae6:	464c      	mov	r4, r9
 800cae8:	6923      	ldr	r3, [r4, #16]
 800caea:	1c5a      	adds	r2, r3, #1
 800caec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800caf0:	6122      	str	r2, [r4, #16]
 800caf2:	2201      	movs	r2, #1
 800caf4:	615a      	str	r2, [r3, #20]
 800caf6:	e7be      	b.n	800ca76 <__gethex+0x362>
 800caf8:	6922      	ldr	r2, [r4, #16]
 800cafa:	455a      	cmp	r2, fp
 800cafc:	dd0b      	ble.n	800cb16 <__gethex+0x402>
 800cafe:	2101      	movs	r1, #1
 800cb00:	4620      	mov	r0, r4
 800cb02:	f7ff fd9f 	bl	800c644 <rshift>
 800cb06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb0a:	3701      	adds	r7, #1
 800cb0c:	42bb      	cmp	r3, r7
 800cb0e:	f6ff aee0 	blt.w	800c8d2 <__gethex+0x1be>
 800cb12:	2501      	movs	r5, #1
 800cb14:	e7c2      	b.n	800ca9c <__gethex+0x388>
 800cb16:	f016 061f 	ands.w	r6, r6, #31
 800cb1a:	d0fa      	beq.n	800cb12 <__gethex+0x3fe>
 800cb1c:	4453      	add	r3, sl
 800cb1e:	f1c6 0620 	rsb	r6, r6, #32
 800cb22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cb26:	f7fd fd41 	bl	800a5ac <__hi0bits>
 800cb2a:	42b0      	cmp	r0, r6
 800cb2c:	dbe7      	blt.n	800cafe <__gethex+0x3ea>
 800cb2e:	e7f0      	b.n	800cb12 <__gethex+0x3fe>
 800cb30:	0800d59f 	.word	0x0800d59f

0800cb34 <L_shift>:
 800cb34:	f1c2 0208 	rsb	r2, r2, #8
 800cb38:	0092      	lsls	r2, r2, #2
 800cb3a:	b570      	push	{r4, r5, r6, lr}
 800cb3c:	f1c2 0620 	rsb	r6, r2, #32
 800cb40:	6843      	ldr	r3, [r0, #4]
 800cb42:	6804      	ldr	r4, [r0, #0]
 800cb44:	fa03 f506 	lsl.w	r5, r3, r6
 800cb48:	432c      	orrs	r4, r5
 800cb4a:	40d3      	lsrs	r3, r2
 800cb4c:	6004      	str	r4, [r0, #0]
 800cb4e:	f840 3f04 	str.w	r3, [r0, #4]!
 800cb52:	4288      	cmp	r0, r1
 800cb54:	d3f4      	bcc.n	800cb40 <L_shift+0xc>
 800cb56:	bd70      	pop	{r4, r5, r6, pc}

0800cb58 <__match>:
 800cb58:	b530      	push	{r4, r5, lr}
 800cb5a:	6803      	ldr	r3, [r0, #0]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb62:	b914      	cbnz	r4, 800cb6a <__match+0x12>
 800cb64:	6003      	str	r3, [r0, #0]
 800cb66:	2001      	movs	r0, #1
 800cb68:	bd30      	pop	{r4, r5, pc}
 800cb6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800cb72:	2d19      	cmp	r5, #25
 800cb74:	bf98      	it	ls
 800cb76:	3220      	addls	r2, #32
 800cb78:	42a2      	cmp	r2, r4
 800cb7a:	d0f0      	beq.n	800cb5e <__match+0x6>
 800cb7c:	2000      	movs	r0, #0
 800cb7e:	e7f3      	b.n	800cb68 <__match+0x10>

0800cb80 <__hexnan>:
 800cb80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb84:	680b      	ldr	r3, [r1, #0]
 800cb86:	6801      	ldr	r1, [r0, #0]
 800cb88:	115e      	asrs	r6, r3, #5
 800cb8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cb8e:	f013 031f 	ands.w	r3, r3, #31
 800cb92:	b087      	sub	sp, #28
 800cb94:	bf18      	it	ne
 800cb96:	3604      	addne	r6, #4
 800cb98:	2500      	movs	r5, #0
 800cb9a:	1f37      	subs	r7, r6, #4
 800cb9c:	4682      	mov	sl, r0
 800cb9e:	4690      	mov	r8, r2
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	f846 5c04 	str.w	r5, [r6, #-4]
 800cba6:	46b9      	mov	r9, r7
 800cba8:	463c      	mov	r4, r7
 800cbaa:	9502      	str	r5, [sp, #8]
 800cbac:	46ab      	mov	fp, r5
 800cbae:	784a      	ldrb	r2, [r1, #1]
 800cbb0:	1c4b      	adds	r3, r1, #1
 800cbb2:	9303      	str	r3, [sp, #12]
 800cbb4:	b342      	cbz	r2, 800cc08 <__hexnan+0x88>
 800cbb6:	4610      	mov	r0, r2
 800cbb8:	9105      	str	r1, [sp, #20]
 800cbba:	9204      	str	r2, [sp, #16]
 800cbbc:	f7ff fd94 	bl	800c6e8 <__hexdig_fun>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d151      	bne.n	800cc68 <__hexnan+0xe8>
 800cbc4:	9a04      	ldr	r2, [sp, #16]
 800cbc6:	9905      	ldr	r1, [sp, #20]
 800cbc8:	2a20      	cmp	r2, #32
 800cbca:	d818      	bhi.n	800cbfe <__hexnan+0x7e>
 800cbcc:	9b02      	ldr	r3, [sp, #8]
 800cbce:	459b      	cmp	fp, r3
 800cbd0:	dd13      	ble.n	800cbfa <__hexnan+0x7a>
 800cbd2:	454c      	cmp	r4, r9
 800cbd4:	d206      	bcs.n	800cbe4 <__hexnan+0x64>
 800cbd6:	2d07      	cmp	r5, #7
 800cbd8:	dc04      	bgt.n	800cbe4 <__hexnan+0x64>
 800cbda:	462a      	mov	r2, r5
 800cbdc:	4649      	mov	r1, r9
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f7ff ffa8 	bl	800cb34 <L_shift>
 800cbe4:	4544      	cmp	r4, r8
 800cbe6:	d952      	bls.n	800cc8e <__hexnan+0x10e>
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f1a4 0904 	sub.w	r9, r4, #4
 800cbee:	f844 3c04 	str.w	r3, [r4, #-4]
 800cbf2:	f8cd b008 	str.w	fp, [sp, #8]
 800cbf6:	464c      	mov	r4, r9
 800cbf8:	461d      	mov	r5, r3
 800cbfa:	9903      	ldr	r1, [sp, #12]
 800cbfc:	e7d7      	b.n	800cbae <__hexnan+0x2e>
 800cbfe:	2a29      	cmp	r2, #41	@ 0x29
 800cc00:	d157      	bne.n	800ccb2 <__hexnan+0x132>
 800cc02:	3102      	adds	r1, #2
 800cc04:	f8ca 1000 	str.w	r1, [sl]
 800cc08:	f1bb 0f00 	cmp.w	fp, #0
 800cc0c:	d051      	beq.n	800ccb2 <__hexnan+0x132>
 800cc0e:	454c      	cmp	r4, r9
 800cc10:	d206      	bcs.n	800cc20 <__hexnan+0xa0>
 800cc12:	2d07      	cmp	r5, #7
 800cc14:	dc04      	bgt.n	800cc20 <__hexnan+0xa0>
 800cc16:	462a      	mov	r2, r5
 800cc18:	4649      	mov	r1, r9
 800cc1a:	4620      	mov	r0, r4
 800cc1c:	f7ff ff8a 	bl	800cb34 <L_shift>
 800cc20:	4544      	cmp	r4, r8
 800cc22:	d936      	bls.n	800cc92 <__hexnan+0x112>
 800cc24:	f1a8 0204 	sub.w	r2, r8, #4
 800cc28:	4623      	mov	r3, r4
 800cc2a:	f853 1b04 	ldr.w	r1, [r3], #4
 800cc2e:	f842 1f04 	str.w	r1, [r2, #4]!
 800cc32:	429f      	cmp	r7, r3
 800cc34:	d2f9      	bcs.n	800cc2a <__hexnan+0xaa>
 800cc36:	1b3b      	subs	r3, r7, r4
 800cc38:	f023 0303 	bic.w	r3, r3, #3
 800cc3c:	3304      	adds	r3, #4
 800cc3e:	3401      	adds	r4, #1
 800cc40:	3e03      	subs	r6, #3
 800cc42:	42b4      	cmp	r4, r6
 800cc44:	bf88      	it	hi
 800cc46:	2304      	movhi	r3, #4
 800cc48:	4443      	add	r3, r8
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	f843 2b04 	str.w	r2, [r3], #4
 800cc50:	429f      	cmp	r7, r3
 800cc52:	d2fb      	bcs.n	800cc4c <__hexnan+0xcc>
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	b91b      	cbnz	r3, 800cc60 <__hexnan+0xe0>
 800cc58:	4547      	cmp	r7, r8
 800cc5a:	d128      	bne.n	800ccae <__hexnan+0x12e>
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	603b      	str	r3, [r7, #0]
 800cc60:	2005      	movs	r0, #5
 800cc62:	b007      	add	sp, #28
 800cc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc68:	3501      	adds	r5, #1
 800cc6a:	2d08      	cmp	r5, #8
 800cc6c:	f10b 0b01 	add.w	fp, fp, #1
 800cc70:	dd06      	ble.n	800cc80 <__hexnan+0x100>
 800cc72:	4544      	cmp	r4, r8
 800cc74:	d9c1      	bls.n	800cbfa <__hexnan+0x7a>
 800cc76:	2300      	movs	r3, #0
 800cc78:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc7c:	2501      	movs	r5, #1
 800cc7e:	3c04      	subs	r4, #4
 800cc80:	6822      	ldr	r2, [r4, #0]
 800cc82:	f000 000f 	and.w	r0, r0, #15
 800cc86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cc8a:	6020      	str	r0, [r4, #0]
 800cc8c:	e7b5      	b.n	800cbfa <__hexnan+0x7a>
 800cc8e:	2508      	movs	r5, #8
 800cc90:	e7b3      	b.n	800cbfa <__hexnan+0x7a>
 800cc92:	9b01      	ldr	r3, [sp, #4]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d0dd      	beq.n	800cc54 <__hexnan+0xd4>
 800cc98:	f1c3 0320 	rsb	r3, r3, #32
 800cc9c:	f04f 32ff 	mov.w	r2, #4294967295
 800cca0:	40da      	lsrs	r2, r3
 800cca2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cca6:	4013      	ands	r3, r2
 800cca8:	f846 3c04 	str.w	r3, [r6, #-4]
 800ccac:	e7d2      	b.n	800cc54 <__hexnan+0xd4>
 800ccae:	3f04      	subs	r7, #4
 800ccb0:	e7d0      	b.n	800cc54 <__hexnan+0xd4>
 800ccb2:	2004      	movs	r0, #4
 800ccb4:	e7d5      	b.n	800cc62 <__hexnan+0xe2>

0800ccb6 <__ascii_mbtowc>:
 800ccb6:	b082      	sub	sp, #8
 800ccb8:	b901      	cbnz	r1, 800ccbc <__ascii_mbtowc+0x6>
 800ccba:	a901      	add	r1, sp, #4
 800ccbc:	b142      	cbz	r2, 800ccd0 <__ascii_mbtowc+0x1a>
 800ccbe:	b14b      	cbz	r3, 800ccd4 <__ascii_mbtowc+0x1e>
 800ccc0:	7813      	ldrb	r3, [r2, #0]
 800ccc2:	600b      	str	r3, [r1, #0]
 800ccc4:	7812      	ldrb	r2, [r2, #0]
 800ccc6:	1e10      	subs	r0, r2, #0
 800ccc8:	bf18      	it	ne
 800ccca:	2001      	movne	r0, #1
 800cccc:	b002      	add	sp, #8
 800ccce:	4770      	bx	lr
 800ccd0:	4610      	mov	r0, r2
 800ccd2:	e7fb      	b.n	800cccc <__ascii_mbtowc+0x16>
 800ccd4:	f06f 0001 	mvn.w	r0, #1
 800ccd8:	e7f8      	b.n	800cccc <__ascii_mbtowc+0x16>

0800ccda <_realloc_r>:
 800ccda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccde:	4680      	mov	r8, r0
 800cce0:	4615      	mov	r5, r2
 800cce2:	460c      	mov	r4, r1
 800cce4:	b921      	cbnz	r1, 800ccf0 <_realloc_r+0x16>
 800cce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccea:	4611      	mov	r1, r2
 800ccec:	f7fd bae0 	b.w	800a2b0 <_malloc_r>
 800ccf0:	b92a      	cbnz	r2, 800ccfe <_realloc_r+0x24>
 800ccf2:	f7fd fa69 	bl	800a1c8 <_free_r>
 800ccf6:	2400      	movs	r4, #0
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccfe:	f000 f8b2 	bl	800ce66 <_malloc_usable_size_r>
 800cd02:	4285      	cmp	r5, r0
 800cd04:	4606      	mov	r6, r0
 800cd06:	d802      	bhi.n	800cd0e <_realloc_r+0x34>
 800cd08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cd0c:	d8f4      	bhi.n	800ccf8 <_realloc_r+0x1e>
 800cd0e:	4629      	mov	r1, r5
 800cd10:	4640      	mov	r0, r8
 800cd12:	f7fd facd 	bl	800a2b0 <_malloc_r>
 800cd16:	4607      	mov	r7, r0
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d0ec      	beq.n	800ccf6 <_realloc_r+0x1c>
 800cd1c:	42b5      	cmp	r5, r6
 800cd1e:	462a      	mov	r2, r5
 800cd20:	4621      	mov	r1, r4
 800cd22:	bf28      	it	cs
 800cd24:	4632      	movcs	r2, r6
 800cd26:	f7fc fbec 	bl	8009502 <memcpy>
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	4640      	mov	r0, r8
 800cd2e:	f7fd fa4b 	bl	800a1c8 <_free_r>
 800cd32:	463c      	mov	r4, r7
 800cd34:	e7e0      	b.n	800ccf8 <_realloc_r+0x1e>
	...

0800cd38 <_strtoul_l.constprop.0>:
 800cd38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cd3c:	4e34      	ldr	r6, [pc, #208]	@ (800ce10 <_strtoul_l.constprop.0+0xd8>)
 800cd3e:	4686      	mov	lr, r0
 800cd40:	460d      	mov	r5, r1
 800cd42:	4628      	mov	r0, r5
 800cd44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cd48:	5d37      	ldrb	r7, [r6, r4]
 800cd4a:	f017 0708 	ands.w	r7, r7, #8
 800cd4e:	d1f8      	bne.n	800cd42 <_strtoul_l.constprop.0+0xa>
 800cd50:	2c2d      	cmp	r4, #45	@ 0x2d
 800cd52:	d12f      	bne.n	800cdb4 <_strtoul_l.constprop.0+0x7c>
 800cd54:	782c      	ldrb	r4, [r5, #0]
 800cd56:	2701      	movs	r7, #1
 800cd58:	1c85      	adds	r5, r0, #2
 800cd5a:	f033 0010 	bics.w	r0, r3, #16
 800cd5e:	d109      	bne.n	800cd74 <_strtoul_l.constprop.0+0x3c>
 800cd60:	2c30      	cmp	r4, #48	@ 0x30
 800cd62:	d12c      	bne.n	800cdbe <_strtoul_l.constprop.0+0x86>
 800cd64:	7828      	ldrb	r0, [r5, #0]
 800cd66:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cd6a:	2858      	cmp	r0, #88	@ 0x58
 800cd6c:	d127      	bne.n	800cdbe <_strtoul_l.constprop.0+0x86>
 800cd6e:	786c      	ldrb	r4, [r5, #1]
 800cd70:	2310      	movs	r3, #16
 800cd72:	3502      	adds	r5, #2
 800cd74:	f04f 38ff 	mov.w	r8, #4294967295
 800cd78:	2600      	movs	r6, #0
 800cd7a:	fbb8 f8f3 	udiv	r8, r8, r3
 800cd7e:	fb03 f908 	mul.w	r9, r3, r8
 800cd82:	ea6f 0909 	mvn.w	r9, r9
 800cd86:	4630      	mov	r0, r6
 800cd88:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cd8c:	f1bc 0f09 	cmp.w	ip, #9
 800cd90:	d81c      	bhi.n	800cdcc <_strtoul_l.constprop.0+0x94>
 800cd92:	4664      	mov	r4, ip
 800cd94:	42a3      	cmp	r3, r4
 800cd96:	dd2a      	ble.n	800cdee <_strtoul_l.constprop.0+0xb6>
 800cd98:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cd9c:	d007      	beq.n	800cdae <_strtoul_l.constprop.0+0x76>
 800cd9e:	4580      	cmp	r8, r0
 800cda0:	d322      	bcc.n	800cde8 <_strtoul_l.constprop.0+0xb0>
 800cda2:	d101      	bne.n	800cda8 <_strtoul_l.constprop.0+0x70>
 800cda4:	45a1      	cmp	r9, r4
 800cda6:	db1f      	blt.n	800cde8 <_strtoul_l.constprop.0+0xb0>
 800cda8:	fb00 4003 	mla	r0, r0, r3, r4
 800cdac:	2601      	movs	r6, #1
 800cdae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cdb2:	e7e9      	b.n	800cd88 <_strtoul_l.constprop.0+0x50>
 800cdb4:	2c2b      	cmp	r4, #43	@ 0x2b
 800cdb6:	bf04      	itt	eq
 800cdb8:	782c      	ldrbeq	r4, [r5, #0]
 800cdba:	1c85      	addeq	r5, r0, #2
 800cdbc:	e7cd      	b.n	800cd5a <_strtoul_l.constprop.0+0x22>
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1d8      	bne.n	800cd74 <_strtoul_l.constprop.0+0x3c>
 800cdc2:	2c30      	cmp	r4, #48	@ 0x30
 800cdc4:	bf0c      	ite	eq
 800cdc6:	2308      	moveq	r3, #8
 800cdc8:	230a      	movne	r3, #10
 800cdca:	e7d3      	b.n	800cd74 <_strtoul_l.constprop.0+0x3c>
 800cdcc:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cdd0:	f1bc 0f19 	cmp.w	ip, #25
 800cdd4:	d801      	bhi.n	800cdda <_strtoul_l.constprop.0+0xa2>
 800cdd6:	3c37      	subs	r4, #55	@ 0x37
 800cdd8:	e7dc      	b.n	800cd94 <_strtoul_l.constprop.0+0x5c>
 800cdda:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cdde:	f1bc 0f19 	cmp.w	ip, #25
 800cde2:	d804      	bhi.n	800cdee <_strtoul_l.constprop.0+0xb6>
 800cde4:	3c57      	subs	r4, #87	@ 0x57
 800cde6:	e7d5      	b.n	800cd94 <_strtoul_l.constprop.0+0x5c>
 800cde8:	f04f 36ff 	mov.w	r6, #4294967295
 800cdec:	e7df      	b.n	800cdae <_strtoul_l.constprop.0+0x76>
 800cdee:	1c73      	adds	r3, r6, #1
 800cdf0:	d106      	bne.n	800ce00 <_strtoul_l.constprop.0+0xc8>
 800cdf2:	2322      	movs	r3, #34	@ 0x22
 800cdf4:	f8ce 3000 	str.w	r3, [lr]
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	b932      	cbnz	r2, 800ce0a <_strtoul_l.constprop.0+0xd2>
 800cdfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ce00:	b107      	cbz	r7, 800ce04 <_strtoul_l.constprop.0+0xcc>
 800ce02:	4240      	negs	r0, r0
 800ce04:	2a00      	cmp	r2, #0
 800ce06:	d0f9      	beq.n	800cdfc <_strtoul_l.constprop.0+0xc4>
 800ce08:	b106      	cbz	r6, 800ce0c <_strtoul_l.constprop.0+0xd4>
 800ce0a:	1e69      	subs	r1, r5, #1
 800ce0c:	6011      	str	r1, [r2, #0]
 800ce0e:	e7f5      	b.n	800cdfc <_strtoul_l.constprop.0+0xc4>
 800ce10:	0800d761 	.word	0x0800d761

0800ce14 <_strtoul_r>:
 800ce14:	f7ff bf90 	b.w	800cd38 <_strtoul_l.constprop.0>

0800ce18 <__ascii_wctomb>:
 800ce18:	4603      	mov	r3, r0
 800ce1a:	4608      	mov	r0, r1
 800ce1c:	b141      	cbz	r1, 800ce30 <__ascii_wctomb+0x18>
 800ce1e:	2aff      	cmp	r2, #255	@ 0xff
 800ce20:	d904      	bls.n	800ce2c <__ascii_wctomb+0x14>
 800ce22:	228a      	movs	r2, #138	@ 0x8a
 800ce24:	601a      	str	r2, [r3, #0]
 800ce26:	f04f 30ff 	mov.w	r0, #4294967295
 800ce2a:	4770      	bx	lr
 800ce2c:	700a      	strb	r2, [r1, #0]
 800ce2e:	2001      	movs	r0, #1
 800ce30:	4770      	bx	lr
	...

0800ce34 <fiprintf>:
 800ce34:	b40e      	push	{r1, r2, r3}
 800ce36:	b503      	push	{r0, r1, lr}
 800ce38:	4601      	mov	r1, r0
 800ce3a:	ab03      	add	r3, sp, #12
 800ce3c:	4805      	ldr	r0, [pc, #20]	@ (800ce54 <fiprintf+0x20>)
 800ce3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce42:	6800      	ldr	r0, [r0, #0]
 800ce44:	9301      	str	r3, [sp, #4]
 800ce46:	f000 f83f 	bl	800cec8 <_vfiprintf_r>
 800ce4a:	b002      	add	sp, #8
 800ce4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce50:	b003      	add	sp, #12
 800ce52:	4770      	bx	lr
 800ce54:	20000014 	.word	0x20000014

0800ce58 <abort>:
 800ce58:	b508      	push	{r3, lr}
 800ce5a:	2006      	movs	r0, #6
 800ce5c:	f000 fa08 	bl	800d270 <raise>
 800ce60:	2001      	movs	r0, #1
 800ce62:	f7f5 fd91 	bl	8002988 <_exit>

0800ce66 <_malloc_usable_size_r>:
 800ce66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce6a:	1f18      	subs	r0, r3, #4
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	bfbc      	itt	lt
 800ce70:	580b      	ldrlt	r3, [r1, r0]
 800ce72:	18c0      	addlt	r0, r0, r3
 800ce74:	4770      	bx	lr

0800ce76 <__sfputc_r>:
 800ce76:	6893      	ldr	r3, [r2, #8]
 800ce78:	3b01      	subs	r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	b410      	push	{r4}
 800ce7e:	6093      	str	r3, [r2, #8]
 800ce80:	da08      	bge.n	800ce94 <__sfputc_r+0x1e>
 800ce82:	6994      	ldr	r4, [r2, #24]
 800ce84:	42a3      	cmp	r3, r4
 800ce86:	db01      	blt.n	800ce8c <__sfputc_r+0x16>
 800ce88:	290a      	cmp	r1, #10
 800ce8a:	d103      	bne.n	800ce94 <__sfputc_r+0x1e>
 800ce8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce90:	f000 b932 	b.w	800d0f8 <__swbuf_r>
 800ce94:	6813      	ldr	r3, [r2, #0]
 800ce96:	1c58      	adds	r0, r3, #1
 800ce98:	6010      	str	r0, [r2, #0]
 800ce9a:	7019      	strb	r1, [r3, #0]
 800ce9c:	4608      	mov	r0, r1
 800ce9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cea2:	4770      	bx	lr

0800cea4 <__sfputs_r>:
 800cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea6:	4606      	mov	r6, r0
 800cea8:	460f      	mov	r7, r1
 800ceaa:	4614      	mov	r4, r2
 800ceac:	18d5      	adds	r5, r2, r3
 800ceae:	42ac      	cmp	r4, r5
 800ceb0:	d101      	bne.n	800ceb6 <__sfputs_r+0x12>
 800ceb2:	2000      	movs	r0, #0
 800ceb4:	e007      	b.n	800cec6 <__sfputs_r+0x22>
 800ceb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceba:	463a      	mov	r2, r7
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7ff ffda 	bl	800ce76 <__sfputc_r>
 800cec2:	1c43      	adds	r3, r0, #1
 800cec4:	d1f3      	bne.n	800ceae <__sfputs_r+0xa>
 800cec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cec8 <_vfiprintf_r>:
 800cec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cecc:	460d      	mov	r5, r1
 800cece:	b09d      	sub	sp, #116	@ 0x74
 800ced0:	4614      	mov	r4, r2
 800ced2:	4698      	mov	r8, r3
 800ced4:	4606      	mov	r6, r0
 800ced6:	b118      	cbz	r0, 800cee0 <_vfiprintf_r+0x18>
 800ced8:	6a03      	ldr	r3, [r0, #32]
 800ceda:	b90b      	cbnz	r3, 800cee0 <_vfiprintf_r+0x18>
 800cedc:	f7fc f9be 	bl	800925c <__sinit>
 800cee0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cee2:	07d9      	lsls	r1, r3, #31
 800cee4:	d405      	bmi.n	800cef2 <_vfiprintf_r+0x2a>
 800cee6:	89ab      	ldrh	r3, [r5, #12]
 800cee8:	059a      	lsls	r2, r3, #22
 800ceea:	d402      	bmi.n	800cef2 <_vfiprintf_r+0x2a>
 800ceec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ceee:	f7fc fb06 	bl	80094fe <__retarget_lock_acquire_recursive>
 800cef2:	89ab      	ldrh	r3, [r5, #12]
 800cef4:	071b      	lsls	r3, r3, #28
 800cef6:	d501      	bpl.n	800cefc <_vfiprintf_r+0x34>
 800cef8:	692b      	ldr	r3, [r5, #16]
 800cefa:	b99b      	cbnz	r3, 800cf24 <_vfiprintf_r+0x5c>
 800cefc:	4629      	mov	r1, r5
 800cefe:	4630      	mov	r0, r6
 800cf00:	f000 f938 	bl	800d174 <__swsetup_r>
 800cf04:	b170      	cbz	r0, 800cf24 <_vfiprintf_r+0x5c>
 800cf06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf08:	07dc      	lsls	r4, r3, #31
 800cf0a:	d504      	bpl.n	800cf16 <_vfiprintf_r+0x4e>
 800cf0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf10:	b01d      	add	sp, #116	@ 0x74
 800cf12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf16:	89ab      	ldrh	r3, [r5, #12]
 800cf18:	0598      	lsls	r0, r3, #22
 800cf1a:	d4f7      	bmi.n	800cf0c <_vfiprintf_r+0x44>
 800cf1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf1e:	f7fc faef 	bl	8009500 <__retarget_lock_release_recursive>
 800cf22:	e7f3      	b.n	800cf0c <_vfiprintf_r+0x44>
 800cf24:	2300      	movs	r3, #0
 800cf26:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf28:	2320      	movs	r3, #32
 800cf2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf32:	2330      	movs	r3, #48	@ 0x30
 800cf34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d0e4 <_vfiprintf_r+0x21c>
 800cf38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf3c:	f04f 0901 	mov.w	r9, #1
 800cf40:	4623      	mov	r3, r4
 800cf42:	469a      	mov	sl, r3
 800cf44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf48:	b10a      	cbz	r2, 800cf4e <_vfiprintf_r+0x86>
 800cf4a:	2a25      	cmp	r2, #37	@ 0x25
 800cf4c:	d1f9      	bne.n	800cf42 <_vfiprintf_r+0x7a>
 800cf4e:	ebba 0b04 	subs.w	fp, sl, r4
 800cf52:	d00b      	beq.n	800cf6c <_vfiprintf_r+0xa4>
 800cf54:	465b      	mov	r3, fp
 800cf56:	4622      	mov	r2, r4
 800cf58:	4629      	mov	r1, r5
 800cf5a:	4630      	mov	r0, r6
 800cf5c:	f7ff ffa2 	bl	800cea4 <__sfputs_r>
 800cf60:	3001      	adds	r0, #1
 800cf62:	f000 80a7 	beq.w	800d0b4 <_vfiprintf_r+0x1ec>
 800cf66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf68:	445a      	add	r2, fp
 800cf6a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf6c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f000 809f 	beq.w	800d0b4 <_vfiprintf_r+0x1ec>
 800cf76:	2300      	movs	r3, #0
 800cf78:	f04f 32ff 	mov.w	r2, #4294967295
 800cf7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf80:	f10a 0a01 	add.w	sl, sl, #1
 800cf84:	9304      	str	r3, [sp, #16]
 800cf86:	9307      	str	r3, [sp, #28]
 800cf88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf8c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf8e:	4654      	mov	r4, sl
 800cf90:	2205      	movs	r2, #5
 800cf92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf96:	4853      	ldr	r0, [pc, #332]	@ (800d0e4 <_vfiprintf_r+0x21c>)
 800cf98:	f7f3 f942 	bl	8000220 <memchr>
 800cf9c:	9a04      	ldr	r2, [sp, #16]
 800cf9e:	b9d8      	cbnz	r0, 800cfd8 <_vfiprintf_r+0x110>
 800cfa0:	06d1      	lsls	r1, r2, #27
 800cfa2:	bf44      	itt	mi
 800cfa4:	2320      	movmi	r3, #32
 800cfa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfaa:	0713      	lsls	r3, r2, #28
 800cfac:	bf44      	itt	mi
 800cfae:	232b      	movmi	r3, #43	@ 0x2b
 800cfb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfb4:	f89a 3000 	ldrb.w	r3, [sl]
 800cfb8:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfba:	d015      	beq.n	800cfe8 <_vfiprintf_r+0x120>
 800cfbc:	9a07      	ldr	r2, [sp, #28]
 800cfbe:	4654      	mov	r4, sl
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	f04f 0c0a 	mov.w	ip, #10
 800cfc6:	4621      	mov	r1, r4
 800cfc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfcc:	3b30      	subs	r3, #48	@ 0x30
 800cfce:	2b09      	cmp	r3, #9
 800cfd0:	d94b      	bls.n	800d06a <_vfiprintf_r+0x1a2>
 800cfd2:	b1b0      	cbz	r0, 800d002 <_vfiprintf_r+0x13a>
 800cfd4:	9207      	str	r2, [sp, #28]
 800cfd6:	e014      	b.n	800d002 <_vfiprintf_r+0x13a>
 800cfd8:	eba0 0308 	sub.w	r3, r0, r8
 800cfdc:	fa09 f303 	lsl.w	r3, r9, r3
 800cfe0:	4313      	orrs	r3, r2
 800cfe2:	9304      	str	r3, [sp, #16]
 800cfe4:	46a2      	mov	sl, r4
 800cfe6:	e7d2      	b.n	800cf8e <_vfiprintf_r+0xc6>
 800cfe8:	9b03      	ldr	r3, [sp, #12]
 800cfea:	1d19      	adds	r1, r3, #4
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	9103      	str	r1, [sp, #12]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	bfbb      	ittet	lt
 800cff4:	425b      	neglt	r3, r3
 800cff6:	f042 0202 	orrlt.w	r2, r2, #2
 800cffa:	9307      	strge	r3, [sp, #28]
 800cffc:	9307      	strlt	r3, [sp, #28]
 800cffe:	bfb8      	it	lt
 800d000:	9204      	strlt	r2, [sp, #16]
 800d002:	7823      	ldrb	r3, [r4, #0]
 800d004:	2b2e      	cmp	r3, #46	@ 0x2e
 800d006:	d10a      	bne.n	800d01e <_vfiprintf_r+0x156>
 800d008:	7863      	ldrb	r3, [r4, #1]
 800d00a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d00c:	d132      	bne.n	800d074 <_vfiprintf_r+0x1ac>
 800d00e:	9b03      	ldr	r3, [sp, #12]
 800d010:	1d1a      	adds	r2, r3, #4
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	9203      	str	r2, [sp, #12]
 800d016:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d01a:	3402      	adds	r4, #2
 800d01c:	9305      	str	r3, [sp, #20]
 800d01e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d0f4 <_vfiprintf_r+0x22c>
 800d022:	7821      	ldrb	r1, [r4, #0]
 800d024:	2203      	movs	r2, #3
 800d026:	4650      	mov	r0, sl
 800d028:	f7f3 f8fa 	bl	8000220 <memchr>
 800d02c:	b138      	cbz	r0, 800d03e <_vfiprintf_r+0x176>
 800d02e:	9b04      	ldr	r3, [sp, #16]
 800d030:	eba0 000a 	sub.w	r0, r0, sl
 800d034:	2240      	movs	r2, #64	@ 0x40
 800d036:	4082      	lsls	r2, r0
 800d038:	4313      	orrs	r3, r2
 800d03a:	3401      	adds	r4, #1
 800d03c:	9304      	str	r3, [sp, #16]
 800d03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d042:	4829      	ldr	r0, [pc, #164]	@ (800d0e8 <_vfiprintf_r+0x220>)
 800d044:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d048:	2206      	movs	r2, #6
 800d04a:	f7f3 f8e9 	bl	8000220 <memchr>
 800d04e:	2800      	cmp	r0, #0
 800d050:	d03f      	beq.n	800d0d2 <_vfiprintf_r+0x20a>
 800d052:	4b26      	ldr	r3, [pc, #152]	@ (800d0ec <_vfiprintf_r+0x224>)
 800d054:	bb1b      	cbnz	r3, 800d09e <_vfiprintf_r+0x1d6>
 800d056:	9b03      	ldr	r3, [sp, #12]
 800d058:	3307      	adds	r3, #7
 800d05a:	f023 0307 	bic.w	r3, r3, #7
 800d05e:	3308      	adds	r3, #8
 800d060:	9303      	str	r3, [sp, #12]
 800d062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d064:	443b      	add	r3, r7
 800d066:	9309      	str	r3, [sp, #36]	@ 0x24
 800d068:	e76a      	b.n	800cf40 <_vfiprintf_r+0x78>
 800d06a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d06e:	460c      	mov	r4, r1
 800d070:	2001      	movs	r0, #1
 800d072:	e7a8      	b.n	800cfc6 <_vfiprintf_r+0xfe>
 800d074:	2300      	movs	r3, #0
 800d076:	3401      	adds	r4, #1
 800d078:	9305      	str	r3, [sp, #20]
 800d07a:	4619      	mov	r1, r3
 800d07c:	f04f 0c0a 	mov.w	ip, #10
 800d080:	4620      	mov	r0, r4
 800d082:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d086:	3a30      	subs	r2, #48	@ 0x30
 800d088:	2a09      	cmp	r2, #9
 800d08a:	d903      	bls.n	800d094 <_vfiprintf_r+0x1cc>
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d0c6      	beq.n	800d01e <_vfiprintf_r+0x156>
 800d090:	9105      	str	r1, [sp, #20]
 800d092:	e7c4      	b.n	800d01e <_vfiprintf_r+0x156>
 800d094:	fb0c 2101 	mla	r1, ip, r1, r2
 800d098:	4604      	mov	r4, r0
 800d09a:	2301      	movs	r3, #1
 800d09c:	e7f0      	b.n	800d080 <_vfiprintf_r+0x1b8>
 800d09e:	ab03      	add	r3, sp, #12
 800d0a0:	9300      	str	r3, [sp, #0]
 800d0a2:	462a      	mov	r2, r5
 800d0a4:	4b12      	ldr	r3, [pc, #72]	@ (800d0f0 <_vfiprintf_r+0x228>)
 800d0a6:	a904      	add	r1, sp, #16
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f7fb fa7f 	bl	80085ac <_printf_float>
 800d0ae:	4607      	mov	r7, r0
 800d0b0:	1c78      	adds	r0, r7, #1
 800d0b2:	d1d6      	bne.n	800d062 <_vfiprintf_r+0x19a>
 800d0b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d0b6:	07d9      	lsls	r1, r3, #31
 800d0b8:	d405      	bmi.n	800d0c6 <_vfiprintf_r+0x1fe>
 800d0ba:	89ab      	ldrh	r3, [r5, #12]
 800d0bc:	059a      	lsls	r2, r3, #22
 800d0be:	d402      	bmi.n	800d0c6 <_vfiprintf_r+0x1fe>
 800d0c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0c2:	f7fc fa1d 	bl	8009500 <__retarget_lock_release_recursive>
 800d0c6:	89ab      	ldrh	r3, [r5, #12]
 800d0c8:	065b      	lsls	r3, r3, #25
 800d0ca:	f53f af1f 	bmi.w	800cf0c <_vfiprintf_r+0x44>
 800d0ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0d0:	e71e      	b.n	800cf10 <_vfiprintf_r+0x48>
 800d0d2:	ab03      	add	r3, sp, #12
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	462a      	mov	r2, r5
 800d0d8:	4b05      	ldr	r3, [pc, #20]	@ (800d0f0 <_vfiprintf_r+0x228>)
 800d0da:	a904      	add	r1, sp, #16
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7fb fcfd 	bl	8008adc <_printf_i>
 800d0e2:	e7e4      	b.n	800d0ae <_vfiprintf_r+0x1e6>
 800d0e4:	0800d861 	.word	0x0800d861
 800d0e8:	0800d86b 	.word	0x0800d86b
 800d0ec:	080085ad 	.word	0x080085ad
 800d0f0:	0800cea5 	.word	0x0800cea5
 800d0f4:	0800d867 	.word	0x0800d867

0800d0f8 <__swbuf_r>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	460e      	mov	r6, r1
 800d0fc:	4614      	mov	r4, r2
 800d0fe:	4605      	mov	r5, r0
 800d100:	b118      	cbz	r0, 800d10a <__swbuf_r+0x12>
 800d102:	6a03      	ldr	r3, [r0, #32]
 800d104:	b90b      	cbnz	r3, 800d10a <__swbuf_r+0x12>
 800d106:	f7fc f8a9 	bl	800925c <__sinit>
 800d10a:	69a3      	ldr	r3, [r4, #24]
 800d10c:	60a3      	str	r3, [r4, #8]
 800d10e:	89a3      	ldrh	r3, [r4, #12]
 800d110:	071a      	lsls	r2, r3, #28
 800d112:	d501      	bpl.n	800d118 <__swbuf_r+0x20>
 800d114:	6923      	ldr	r3, [r4, #16]
 800d116:	b943      	cbnz	r3, 800d12a <__swbuf_r+0x32>
 800d118:	4621      	mov	r1, r4
 800d11a:	4628      	mov	r0, r5
 800d11c:	f000 f82a 	bl	800d174 <__swsetup_r>
 800d120:	b118      	cbz	r0, 800d12a <__swbuf_r+0x32>
 800d122:	f04f 37ff 	mov.w	r7, #4294967295
 800d126:	4638      	mov	r0, r7
 800d128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d12a:	6823      	ldr	r3, [r4, #0]
 800d12c:	6922      	ldr	r2, [r4, #16]
 800d12e:	1a98      	subs	r0, r3, r2
 800d130:	6963      	ldr	r3, [r4, #20]
 800d132:	b2f6      	uxtb	r6, r6
 800d134:	4283      	cmp	r3, r0
 800d136:	4637      	mov	r7, r6
 800d138:	dc05      	bgt.n	800d146 <__swbuf_r+0x4e>
 800d13a:	4621      	mov	r1, r4
 800d13c:	4628      	mov	r0, r5
 800d13e:	f7ff f96f 	bl	800c420 <_fflush_r>
 800d142:	2800      	cmp	r0, #0
 800d144:	d1ed      	bne.n	800d122 <__swbuf_r+0x2a>
 800d146:	68a3      	ldr	r3, [r4, #8]
 800d148:	3b01      	subs	r3, #1
 800d14a:	60a3      	str	r3, [r4, #8]
 800d14c:	6823      	ldr	r3, [r4, #0]
 800d14e:	1c5a      	adds	r2, r3, #1
 800d150:	6022      	str	r2, [r4, #0]
 800d152:	701e      	strb	r6, [r3, #0]
 800d154:	6962      	ldr	r2, [r4, #20]
 800d156:	1c43      	adds	r3, r0, #1
 800d158:	429a      	cmp	r2, r3
 800d15a:	d004      	beq.n	800d166 <__swbuf_r+0x6e>
 800d15c:	89a3      	ldrh	r3, [r4, #12]
 800d15e:	07db      	lsls	r3, r3, #31
 800d160:	d5e1      	bpl.n	800d126 <__swbuf_r+0x2e>
 800d162:	2e0a      	cmp	r6, #10
 800d164:	d1df      	bne.n	800d126 <__swbuf_r+0x2e>
 800d166:	4621      	mov	r1, r4
 800d168:	4628      	mov	r0, r5
 800d16a:	f7ff f959 	bl	800c420 <_fflush_r>
 800d16e:	2800      	cmp	r0, #0
 800d170:	d0d9      	beq.n	800d126 <__swbuf_r+0x2e>
 800d172:	e7d6      	b.n	800d122 <__swbuf_r+0x2a>

0800d174 <__swsetup_r>:
 800d174:	b538      	push	{r3, r4, r5, lr}
 800d176:	4b29      	ldr	r3, [pc, #164]	@ (800d21c <__swsetup_r+0xa8>)
 800d178:	4605      	mov	r5, r0
 800d17a:	6818      	ldr	r0, [r3, #0]
 800d17c:	460c      	mov	r4, r1
 800d17e:	b118      	cbz	r0, 800d188 <__swsetup_r+0x14>
 800d180:	6a03      	ldr	r3, [r0, #32]
 800d182:	b90b      	cbnz	r3, 800d188 <__swsetup_r+0x14>
 800d184:	f7fc f86a 	bl	800925c <__sinit>
 800d188:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d18c:	0719      	lsls	r1, r3, #28
 800d18e:	d422      	bmi.n	800d1d6 <__swsetup_r+0x62>
 800d190:	06da      	lsls	r2, r3, #27
 800d192:	d407      	bmi.n	800d1a4 <__swsetup_r+0x30>
 800d194:	2209      	movs	r2, #9
 800d196:	602a      	str	r2, [r5, #0]
 800d198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d19c:	81a3      	strh	r3, [r4, #12]
 800d19e:	f04f 30ff 	mov.w	r0, #4294967295
 800d1a2:	e033      	b.n	800d20c <__swsetup_r+0x98>
 800d1a4:	0758      	lsls	r0, r3, #29
 800d1a6:	d512      	bpl.n	800d1ce <__swsetup_r+0x5a>
 800d1a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1aa:	b141      	cbz	r1, 800d1be <__swsetup_r+0x4a>
 800d1ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d1b0:	4299      	cmp	r1, r3
 800d1b2:	d002      	beq.n	800d1ba <__swsetup_r+0x46>
 800d1b4:	4628      	mov	r0, r5
 800d1b6:	f7fd f807 	bl	800a1c8 <_free_r>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d1be:	89a3      	ldrh	r3, [r4, #12]
 800d1c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d1c4:	81a3      	strh	r3, [r4, #12]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	6063      	str	r3, [r4, #4]
 800d1ca:	6923      	ldr	r3, [r4, #16]
 800d1cc:	6023      	str	r3, [r4, #0]
 800d1ce:	89a3      	ldrh	r3, [r4, #12]
 800d1d0:	f043 0308 	orr.w	r3, r3, #8
 800d1d4:	81a3      	strh	r3, [r4, #12]
 800d1d6:	6923      	ldr	r3, [r4, #16]
 800d1d8:	b94b      	cbnz	r3, 800d1ee <__swsetup_r+0x7a>
 800d1da:	89a3      	ldrh	r3, [r4, #12]
 800d1dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d1e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d1e4:	d003      	beq.n	800d1ee <__swsetup_r+0x7a>
 800d1e6:	4621      	mov	r1, r4
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	f000 f883 	bl	800d2f4 <__smakebuf_r>
 800d1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1f2:	f013 0201 	ands.w	r2, r3, #1
 800d1f6:	d00a      	beq.n	800d20e <__swsetup_r+0x9a>
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	60a2      	str	r2, [r4, #8]
 800d1fc:	6962      	ldr	r2, [r4, #20]
 800d1fe:	4252      	negs	r2, r2
 800d200:	61a2      	str	r2, [r4, #24]
 800d202:	6922      	ldr	r2, [r4, #16]
 800d204:	b942      	cbnz	r2, 800d218 <__swsetup_r+0xa4>
 800d206:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d20a:	d1c5      	bne.n	800d198 <__swsetup_r+0x24>
 800d20c:	bd38      	pop	{r3, r4, r5, pc}
 800d20e:	0799      	lsls	r1, r3, #30
 800d210:	bf58      	it	pl
 800d212:	6962      	ldrpl	r2, [r4, #20]
 800d214:	60a2      	str	r2, [r4, #8]
 800d216:	e7f4      	b.n	800d202 <__swsetup_r+0x8e>
 800d218:	2000      	movs	r0, #0
 800d21a:	e7f7      	b.n	800d20c <__swsetup_r+0x98>
 800d21c:	20000014 	.word	0x20000014

0800d220 <_raise_r>:
 800d220:	291f      	cmp	r1, #31
 800d222:	b538      	push	{r3, r4, r5, lr}
 800d224:	4605      	mov	r5, r0
 800d226:	460c      	mov	r4, r1
 800d228:	d904      	bls.n	800d234 <_raise_r+0x14>
 800d22a:	2316      	movs	r3, #22
 800d22c:	6003      	str	r3, [r0, #0]
 800d22e:	f04f 30ff 	mov.w	r0, #4294967295
 800d232:	bd38      	pop	{r3, r4, r5, pc}
 800d234:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d236:	b112      	cbz	r2, 800d23e <_raise_r+0x1e>
 800d238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d23c:	b94b      	cbnz	r3, 800d252 <_raise_r+0x32>
 800d23e:	4628      	mov	r0, r5
 800d240:	f000 f830 	bl	800d2a4 <_getpid_r>
 800d244:	4622      	mov	r2, r4
 800d246:	4601      	mov	r1, r0
 800d248:	4628      	mov	r0, r5
 800d24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d24e:	f000 b817 	b.w	800d280 <_kill_r>
 800d252:	2b01      	cmp	r3, #1
 800d254:	d00a      	beq.n	800d26c <_raise_r+0x4c>
 800d256:	1c59      	adds	r1, r3, #1
 800d258:	d103      	bne.n	800d262 <_raise_r+0x42>
 800d25a:	2316      	movs	r3, #22
 800d25c:	6003      	str	r3, [r0, #0]
 800d25e:	2001      	movs	r0, #1
 800d260:	e7e7      	b.n	800d232 <_raise_r+0x12>
 800d262:	2100      	movs	r1, #0
 800d264:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d268:	4620      	mov	r0, r4
 800d26a:	4798      	blx	r3
 800d26c:	2000      	movs	r0, #0
 800d26e:	e7e0      	b.n	800d232 <_raise_r+0x12>

0800d270 <raise>:
 800d270:	4b02      	ldr	r3, [pc, #8]	@ (800d27c <raise+0xc>)
 800d272:	4601      	mov	r1, r0
 800d274:	6818      	ldr	r0, [r3, #0]
 800d276:	f7ff bfd3 	b.w	800d220 <_raise_r>
 800d27a:	bf00      	nop
 800d27c:	20000014 	.word	0x20000014

0800d280 <_kill_r>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	4d07      	ldr	r5, [pc, #28]	@ (800d2a0 <_kill_r+0x20>)
 800d284:	2300      	movs	r3, #0
 800d286:	4604      	mov	r4, r0
 800d288:	4608      	mov	r0, r1
 800d28a:	4611      	mov	r1, r2
 800d28c:	602b      	str	r3, [r5, #0]
 800d28e:	f7f5 fb6b 	bl	8002968 <_kill>
 800d292:	1c43      	adds	r3, r0, #1
 800d294:	d102      	bne.n	800d29c <_kill_r+0x1c>
 800d296:	682b      	ldr	r3, [r5, #0]
 800d298:	b103      	cbz	r3, 800d29c <_kill_r+0x1c>
 800d29a:	6023      	str	r3, [r4, #0]
 800d29c:	bd38      	pop	{r3, r4, r5, pc}
 800d29e:	bf00      	nop
 800d2a0:	2000080c 	.word	0x2000080c

0800d2a4 <_getpid_r>:
 800d2a4:	f7f5 bb58 	b.w	8002958 <_getpid>

0800d2a8 <__swhatbuf_r>:
 800d2a8:	b570      	push	{r4, r5, r6, lr}
 800d2aa:	460c      	mov	r4, r1
 800d2ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d2b0:	2900      	cmp	r1, #0
 800d2b2:	b096      	sub	sp, #88	@ 0x58
 800d2b4:	4615      	mov	r5, r2
 800d2b6:	461e      	mov	r6, r3
 800d2b8:	da0d      	bge.n	800d2d6 <__swhatbuf_r+0x2e>
 800d2ba:	89a3      	ldrh	r3, [r4, #12]
 800d2bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d2c0:	f04f 0100 	mov.w	r1, #0
 800d2c4:	bf14      	ite	ne
 800d2c6:	2340      	movne	r3, #64	@ 0x40
 800d2c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d2cc:	2000      	movs	r0, #0
 800d2ce:	6031      	str	r1, [r6, #0]
 800d2d0:	602b      	str	r3, [r5, #0]
 800d2d2:	b016      	add	sp, #88	@ 0x58
 800d2d4:	bd70      	pop	{r4, r5, r6, pc}
 800d2d6:	466a      	mov	r2, sp
 800d2d8:	f000 f848 	bl	800d36c <_fstat_r>
 800d2dc:	2800      	cmp	r0, #0
 800d2de:	dbec      	blt.n	800d2ba <__swhatbuf_r+0x12>
 800d2e0:	9901      	ldr	r1, [sp, #4]
 800d2e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2ea:	4259      	negs	r1, r3
 800d2ec:	4159      	adcs	r1, r3
 800d2ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2f2:	e7eb      	b.n	800d2cc <__swhatbuf_r+0x24>

0800d2f4 <__smakebuf_r>:
 800d2f4:	898b      	ldrh	r3, [r1, #12]
 800d2f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2f8:	079d      	lsls	r5, r3, #30
 800d2fa:	4606      	mov	r6, r0
 800d2fc:	460c      	mov	r4, r1
 800d2fe:	d507      	bpl.n	800d310 <__smakebuf_r+0x1c>
 800d300:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d304:	6023      	str	r3, [r4, #0]
 800d306:	6123      	str	r3, [r4, #16]
 800d308:	2301      	movs	r3, #1
 800d30a:	6163      	str	r3, [r4, #20]
 800d30c:	b003      	add	sp, #12
 800d30e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d310:	ab01      	add	r3, sp, #4
 800d312:	466a      	mov	r2, sp
 800d314:	f7ff ffc8 	bl	800d2a8 <__swhatbuf_r>
 800d318:	9f00      	ldr	r7, [sp, #0]
 800d31a:	4605      	mov	r5, r0
 800d31c:	4639      	mov	r1, r7
 800d31e:	4630      	mov	r0, r6
 800d320:	f7fc ffc6 	bl	800a2b0 <_malloc_r>
 800d324:	b948      	cbnz	r0, 800d33a <__smakebuf_r+0x46>
 800d326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d32a:	059a      	lsls	r2, r3, #22
 800d32c:	d4ee      	bmi.n	800d30c <__smakebuf_r+0x18>
 800d32e:	f023 0303 	bic.w	r3, r3, #3
 800d332:	f043 0302 	orr.w	r3, r3, #2
 800d336:	81a3      	strh	r3, [r4, #12]
 800d338:	e7e2      	b.n	800d300 <__smakebuf_r+0xc>
 800d33a:	89a3      	ldrh	r3, [r4, #12]
 800d33c:	6020      	str	r0, [r4, #0]
 800d33e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d342:	81a3      	strh	r3, [r4, #12]
 800d344:	9b01      	ldr	r3, [sp, #4]
 800d346:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d34a:	b15b      	cbz	r3, 800d364 <__smakebuf_r+0x70>
 800d34c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d350:	4630      	mov	r0, r6
 800d352:	f000 f81d 	bl	800d390 <_isatty_r>
 800d356:	b128      	cbz	r0, 800d364 <__smakebuf_r+0x70>
 800d358:	89a3      	ldrh	r3, [r4, #12]
 800d35a:	f023 0303 	bic.w	r3, r3, #3
 800d35e:	f043 0301 	orr.w	r3, r3, #1
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	89a3      	ldrh	r3, [r4, #12]
 800d366:	431d      	orrs	r5, r3
 800d368:	81a5      	strh	r5, [r4, #12]
 800d36a:	e7cf      	b.n	800d30c <__smakebuf_r+0x18>

0800d36c <_fstat_r>:
 800d36c:	b538      	push	{r3, r4, r5, lr}
 800d36e:	4d07      	ldr	r5, [pc, #28]	@ (800d38c <_fstat_r+0x20>)
 800d370:	2300      	movs	r3, #0
 800d372:	4604      	mov	r4, r0
 800d374:	4608      	mov	r0, r1
 800d376:	4611      	mov	r1, r2
 800d378:	602b      	str	r3, [r5, #0]
 800d37a:	f7f5 fb55 	bl	8002a28 <_fstat>
 800d37e:	1c43      	adds	r3, r0, #1
 800d380:	d102      	bne.n	800d388 <_fstat_r+0x1c>
 800d382:	682b      	ldr	r3, [r5, #0]
 800d384:	b103      	cbz	r3, 800d388 <_fstat_r+0x1c>
 800d386:	6023      	str	r3, [r4, #0]
 800d388:	bd38      	pop	{r3, r4, r5, pc}
 800d38a:	bf00      	nop
 800d38c:	2000080c 	.word	0x2000080c

0800d390 <_isatty_r>:
 800d390:	b538      	push	{r3, r4, r5, lr}
 800d392:	4d06      	ldr	r5, [pc, #24]	@ (800d3ac <_isatty_r+0x1c>)
 800d394:	2300      	movs	r3, #0
 800d396:	4604      	mov	r4, r0
 800d398:	4608      	mov	r0, r1
 800d39a:	602b      	str	r3, [r5, #0]
 800d39c:	f7f5 fb54 	bl	8002a48 <_isatty>
 800d3a0:	1c43      	adds	r3, r0, #1
 800d3a2:	d102      	bne.n	800d3aa <_isatty_r+0x1a>
 800d3a4:	682b      	ldr	r3, [r5, #0]
 800d3a6:	b103      	cbz	r3, 800d3aa <_isatty_r+0x1a>
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	bd38      	pop	{r3, r4, r5, pc}
 800d3ac:	2000080c 	.word	0x2000080c

0800d3b0 <_init>:
 800d3b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b2:	bf00      	nop
 800d3b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3b6:	bc08      	pop	{r3}
 800d3b8:	469e      	mov	lr, r3
 800d3ba:	4770      	bx	lr

0800d3bc <_fini>:
 800d3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3be:	bf00      	nop
 800d3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3c2:	bc08      	pop	{r3}
 800d3c4:	469e      	mov	lr, r3
 800d3c6:	4770      	bx	lr
