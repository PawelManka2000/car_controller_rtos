
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d388  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800d568  0800d568  0001d568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dad4  0800dad4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dad4  0800dad4  0001dad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dadc  0800dadc  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dadc  0800dadc  0001dadc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dae0  0800dae0  0001dae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800dae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200001d0  0800dcb4  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800dcb4  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d06e  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004230  00000000  00000000  0003d2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  000414e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ea  00000000  00000000  00042ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296e4  00000000  00000000  00043bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e175  00000000  00000000  0006d2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105f6f  00000000  00000000  0008b41b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000709c  00000000  00000000  0019138c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00198428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d550 	.word	0x0800d550

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800d550 	.word	0x0800d550

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2238      	movs	r2, #56	; 0x38
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f008 fa2d 	bl	80094ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001062:	2000      	movs	r0, #0
 8001064:	f002 f934 	bl	80032d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001076:	2302      	movs	r3, #2
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107a:	2302      	movs	r3, #2
 800107c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800107e:	2304      	movs	r3, #4
 8001080:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001082:	2355      	movs	r3, #85	; 0x55
 8001084:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	4618      	mov	r0, r3
 8001098:	f002 f9ce 	bl	8003438 <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010a2:	f001 f9e3 	bl	800246c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	230f      	movs	r3, #15
 80010a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	2303      	movs	r3, #3
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2104      	movs	r1, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fccc 	bl	8003a5c <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010ca:	f001 f9cf 	bl	800246c <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3750      	adds	r7, #80	; 0x50
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <MX_GPIO_Init+0xd4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <MX_GPIO_Init+0xd4>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_GPIO_Init+0xd4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a28      	ldr	r2, [pc, #160]	; (80011ac <MX_GPIO_Init+0xd4>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a22      	ldr	r2, [pc, #136]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <MX_GPIO_Init+0xd4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <MX_GPIO_Init+0xd4>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2123      	movs	r1, #35	; 0x23
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f002 f8a3 	bl	80032a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800115a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001160:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	480f      	ldr	r0, [pc, #60]	; (80011b0 <MX_GPIO_Init+0xd8>)
 8001172:	f001 ff13 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8001176:	2323      	movs	r3, #35	; 0x23
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f001 ff04 	bl	8002f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2028      	movs	r0, #40	; 0x28
 800119a:	f001 fe17 	bl	8002dcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800119e:	2028      	movs	r0, #40	; 0x28
 80011a0:	f001 fe2e 	bl	8002e00 <HAL_NVIC_EnableIRQ>

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000800 	.word	0x48000800

080011b4 <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09c      	sub	sp, #112	; 0x70
 80011b8:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2234      	movs	r2, #52	; 0x34
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 f95d 	bl	80094ae <memset>

  htim1.Instance = TIM1;
 80011f4:	4b57      	ldr	r3, [pc, #348]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80011f6:	4a58      	ldr	r2, [pc, #352]	; (8001358 <MX_TIM1_Init+0x1a4>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 80011fa:	4b56      	ldr	r3, [pc, #344]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80011fc:	4a57      	ldr	r2, [pc, #348]	; (800135c <MX_TIM1_Init+0x1a8>)
 80011fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b54      	ldr	r3, [pc, #336]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001206:	4b53      	ldr	r3, [pc, #332]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001208:	2263      	movs	r2, #99	; 0x63
 800120a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b51      	ldr	r3, [pc, #324]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001212:	4b50      	ldr	r3, [pc, #320]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b4e      	ldr	r3, [pc, #312]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800121e:	484d      	ldr	r0, [pc, #308]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001220:	f003 f8b8 	bl	8004394 <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800122a:	f001 f91f 	bl	800246c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001238:	4619      	mov	r1, r3
 800123a:	4846      	ldr	r0, [pc, #280]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800123c:	f003 fef6 	bl	800502c <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001246:	f001 f911 	bl	800246c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800124a:	4842      	ldr	r0, [pc, #264]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800124c:	f003 f9e2 	bl	8004614 <HAL_TIM_PWM_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001256:	f001 f909 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001266:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800126a:	4619      	mov	r1, r3
 800126c:	4839      	ldr	r0, [pc, #228]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800126e:	f004 fcbb 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001278:	f001 f8f8 	bl	800246c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127c:	2360      	movs	r3, #96	; 0x60
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001298:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	482c      	ldr	r0, [pc, #176]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80012a2:	f003 fdaf 	bl	8004e04 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012ac:	f001 f8de 	bl	800246c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b4:	2204      	movs	r2, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4826      	ldr	r0, [pc, #152]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80012ba:	f003 fda3 	bl	8004e04 <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012c4:	f001 f8d2 	bl	800246c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012cc:	2208      	movs	r2, #8
 80012ce:	4619      	mov	r1, r3
 80012d0:	4820      	ldr	r0, [pc, #128]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80012d2:	f003 fd97 	bl	8004e04 <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012dc:	f001 f8c6 	bl	800246c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e4:	220c      	movs	r2, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	481a      	ldr	r0, [pc, #104]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80012ea:	f003 fd8b 	bl	8004e04 <HAL_TIM_PWM_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80012f4:	f001 f8ba 	bl	800246c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800130c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001310:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800131e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001328:	2300      	movs	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001336:	f004 fced 	bl	8005d14 <HAL_TIMEx_ConfigBreakDeadTime>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001340:	f001 f894 	bl	800246c <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001346:	f001 fa8b 	bl	8002860 <HAL_TIM_MspPostInit>

}
 800134a:	bf00      	nop
 800134c:	3770      	adds	r7, #112	; 0x70
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001ec 	.word	0x200001ec
 8001358:	40012c00 	.word	0x40012c00
 800135c:	0002980f 	.word	0x0002980f

08001360 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f008 f89d 	bl	80094ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_TIM3_Init+0xa4>)
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <MX_TIM3_Init+0xa8>)
 8001382:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_TIM3_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_TIM3_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM3_Init+0xa4>)
 8001392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001396:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM3_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_TIM3_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a4:	2303      	movs	r3, #3
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_TIM3_Init+0xa4>)
 80013d0:	f003 fa94 	bl	80048fc <HAL_TIM_Encoder_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013da:	f001 f847 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_TIM3_Init+0xa4>)
 80013ec:	f004 fbfc 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013f6:	f001 f839 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000238 	.word	0x20000238
 8001408:	40000400 	.word	0x40000400

0800140c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f008 f847 	bl	80094ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_TIM4_Init+0xa4>)
 800142c:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <MX_TIM4_Init+0xa8>)
 800142e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_TIM4_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_TIM4_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM4_Init+0xa4>)
 800143e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001442:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM4_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM4_Init+0xa4>)
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001450:	2303      	movs	r3, #3
 8001452:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001460:	230a      	movs	r3, #10
 8001462:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_TIM4_Init+0xa4>)
 800147c:	f003 fa3e 	bl	80048fc <HAL_TIM_Encoder_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001486:	f000 fff1 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_TIM4_Init+0xa4>)
 8001498:	f004 fba6 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014a2:	f000 ffe3 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	; 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000284 	.word	0x20000284
 80014b4:	40000800 	.word	0x40000800

080014b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2224      	movs	r2, #36	; 0x24
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f007 fff1 	bl	80094ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_TIM5_Init+0xa4>)
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <MX_TIM5_Init+0xa8>)
 80014da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_TIM5_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_TIM5_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_TIM5_Init+0xa4>)
 80014ea:	f04f 32ff 	mov.w	r2, #4294967295
 80014ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM5_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_TIM5_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014fc:	2303      	movs	r3, #3
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001514:	2301      	movs	r3, #1
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_TIM5_Init+0xa4>)
 8001528:	f003 f9e8 	bl	80048fc <HAL_TIM_Encoder_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001532:	f000 ff9b 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_TIM5_Init+0xa4>)
 8001544:	f004 fb50 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800154e:	f000 ff8d 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3730      	adds	r7, #48	; 0x30
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200002d0 	.word	0x200002d0
 8001560:	40000c00 	.word	0x40000c00

08001564 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <MX_TIM7_Init+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_TIM7_Init+0x64>)
 800157c:	22a9      	movs	r2, #169	; 0xa9
 800157e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001588:	f24c 3250 	movw	r2, #50000	; 0xc350
 800158c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001596:	f002 fefd 	bl	8004394 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015a0:	f000 ff64 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM7_Init+0x64>)
 80015b2:	f004 fb19 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015bc:	f000 ff56 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000031c 	.word	0x2000031c
 80015cc:	40001400 	.word	0x40001400

080015d0 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2224      	movs	r2, #36	; 0x24
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f007 ff65 	bl	80094ae <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <MX_TIM8_Init+0xac>)
 80015f0:	4a23      	ldr	r2, [pc, #140]	; (8001680 <MX_TIM8_Init+0xb0>)
 80015f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_TIM8_Init+0xac>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <MX_TIM8_Init+0xac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <MX_TIM8_Init+0xac>)
 8001602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001606:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_TIM8_Init+0xac>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_TIM8_Init+0xac>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_TIM8_Init+0xac>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800161a:	2303      	movs	r3, #3
 800161c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001622:	2301      	movs	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001632:	2301      	movs	r3, #1
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_TIM8_Init+0xac>)
 8001646:	f003 f959 	bl	80048fc <HAL_TIM_Encoder_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001650:	f000 ff0c 	bl	800246c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_TIM8_Init+0xac>)
 8001666:	f004 fabf 	bl	8005be8 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001670:	f000 fefc 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3730      	adds	r7, #48	; 0x30
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000368 	.word	0x20000368
 8001680:	40013400 	.word	0x40013400

08001684 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <MX_LPUART1_UART_Init+0x90>)
 800168c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016c8:	f004 fbfe 	bl	8005ec8 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016d2:	f000 fecb 	bl	800246c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016da:	f006 fc56 	bl	8007f8a <HAL_UARTEx_SetTxFifoThreshold>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016e4:	f000 fec2 	bl	800246c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	4809      	ldr	r0, [pc, #36]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016ec:	f006 fc8b 	bl	8008006 <HAL_UARTEx_SetRxFifoThreshold>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016f6:	f000 feb9 	bl	800246c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016fc:	f006 fc0c 	bl	8007f18 <HAL_UARTEx_DisableFifoMode>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001706:	f000 feb1 	bl	800246c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000448 	.word	0x20000448
 8001714:	40008000 	.word	0x40008000

08001718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <MX_USART1_UART_Init+0x94>)
 8001720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001762:	f004 fbb1 	bl	8005ec8 <HAL_UART_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800176c:	f000 fe7e 	bl	800246c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001770:	2100      	movs	r1, #0
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001774:	f006 fc09 	bl	8007f8a <HAL_UARTEx_SetTxFifoThreshold>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800177e:	f000 fe75 	bl	800246c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001782:	2100      	movs	r1, #0
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001786:	f006 fc3e 	bl	8008006 <HAL_UARTEx_SetRxFifoThreshold>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001790:	f000 fe6c 	bl	800246c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001796:	f006 fbbf 	bl	8007f18 <HAL_UARTEx_DisableFifoMode>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017a0:	f000 fe64 	bl	800246c <Error_Handler>
  }

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200003b4 	.word	0x200003b4
 80017ac:	40013800 	.word	0x40013800

080017b0 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
	L298N_driver->current_PWM = 0;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8b3a      	ldrh	r2, [r7, #24]
 80017da:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8c3a      	ldrh	r2, [r7, #32]
 80017e6:	831a      	strh	r2, [r3, #24]

}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <L298N_update_pwm>:


void L298N_update_pwm(L298N_driver* L298_driver, uint8_t new_pwm_count)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
	L298_driver->current_PWM = new_pwm_count;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <L298N_update_pwm+0x28>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7a1a      	ldrb	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	635a      	str	r2, [r3, #52]	; 0x34

}
 800181a:	e036      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b04      	cmp	r3, #4
 8001822:	d107      	bne.n	8001834 <L298N_update_pwm+0x40>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7a19      	ldrb	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	460b      	mov	r3, r1
 8001830:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001832:	e02a      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b08      	cmp	r3, #8
 800183a:	d107      	bne.n	800184c <L298N_update_pwm+0x58>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7a19      	ldrb	r1, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	460b      	mov	r3, r1
 8001848:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800184a:	e01e      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b0c      	cmp	r3, #12
 8001852:	d107      	bne.n	8001864 <L298N_update_pwm+0x70>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7a19      	ldrb	r1, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	460b      	mov	r3, r1
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001862:	e012      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b10      	cmp	r3, #16
 800186a:	d107      	bne.n	800187c <L298N_update_pwm+0x88>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7a19      	ldrb	r1, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	460b      	mov	r3, r1
 8001878:	6493      	str	r3, [r2, #72]	; 0x48
}
 800187a:	e006      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7a19      	ldrb	r1, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	460b      	mov	r3, r1
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, E_L298N_MODE l298n_mode)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == BACKWARD)
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d110      	bne.n	80018ca <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68d8      	ldr	r0, [r3, #12]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8a1b      	ldrh	r3, [r3, #16]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4619      	mov	r1, r3
 80018b4:	f001 fcf4 	bl	80032a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6958      	ldr	r0, [r3, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	8b1b      	ldrh	r3, [r3, #24]
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	f001 fcec 	bl	80032a0 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 80018c8:	e026      	b.n	8001918 <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == FORWARD)
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d110      	bne.n	80018f2 <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68d8      	ldr	r0, [r3, #12]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	8a1b      	ldrh	r3, [r3, #16]
 80018d8:	2200      	movs	r2, #0
 80018da:	4619      	mov	r1, r3
 80018dc:	f001 fce0 	bl	80032a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6958      	ldr	r0, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	8b1b      	ldrh	r3, [r3, #24]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4619      	mov	r1, r3
 80018ec:	f001 fcd8 	bl	80032a0 <HAL_GPIO_WritePin>
}
 80018f0:	e012      	b.n	8001918 <L298N_set_input_configuration+0x82>
	else if(l298n_mode == STOP)
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10f      	bne.n	8001918 <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68d8      	ldr	r0, [r3, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	8a1b      	ldrh	r3, [r3, #16]
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	f001 fccc 	bl	80032a0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6958      	ldr	r0, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8b1b      	ldrh	r3, [r3, #24]
 8001910:	2200      	movs	r2, #0
 8001912:	4619      	mov	r1, r3
 8001914:	f001 fcc4 	bl	80032a0 <HAL_GPIO_WritePin>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <init_driving_system>:
static char states_buffer[80];
static void add_state_to_states_buffer(MotorState* motor_state);


void init_driving_system(DrivingSystem* driving_system, MotorStruct* lb_motor, MotorStruct* lf_motor, MotorStruct* rb_motor, MotorStruct* rf_motor)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]

	driving_system->left_motors_lst[0] = lb_motor;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	601a      	str	r2, [r3, #0]
	driving_system->left_motors_lst[1] = lf_motor;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	605a      	str	r2, [r3, #4]
	driving_system->right_motors_lst[0] = rb_motor;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	609a      	str	r2, [r3, #8]
	driving_system->right_motors_lst[1] = rf_motor;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	60da      	str	r2, [r3, #12]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <default_init_driving_system_if>:

void default_init_driving_system_if(DrivingSystemIface* drv_system_if){
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

	drv_system_if->exe_cmd = execute_cmd;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <default_init_driving_system_if+0x20>)
 8001960:	601a      	str	r2, [r3, #0]
	drv_system_if->send_state = send_state;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <default_init_driving_system_if+0x24>)
 8001966:	605a      	str	r2, [r3, #4]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	0800197d 	.word	0x0800197d
 8001978:	08001b25 	.word	0x08001b25

0800197c <execute_cmd>:

void execute_cmd(DrivingSystem* driving_system, uint8_t* cmd){
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b08e      	sub	sp, #56	; 0x38
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]


	uint8_t cmd_code[] = "00";
 8001986:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <execute_cmd+0xc8>)
 8001988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	4611      	mov	r1, r2
 8001990:	8019      	strh	r1, [r3, #0]
 8001992:	3302      	adds	r3, #2
 8001994:	0c12      	lsrs	r2, r2, #16
 8001996:	701a      	strb	r2, [r3, #0]
	uint8_t payload[] = "0000000";
 8001998:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <execute_cmd+0xcc>)
 800199a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a2:	e883 0003 	stmia.w	r3, {r0, r1}

	parse_cmd_code(cmd, cmd_code);
 80019a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019aa:	4619      	mov	r1, r3
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f000 fb5b 	bl	8002068 <parse_cmd_code>
	parse_payload(cmd, payload);
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f000 fb8b 	bl	80020d4 <parse_payload>

//	uint8_t* send_state_literall = (uint8_t*)STATE_CMD_LIT;
//	uint8_t* forward_state_literall = (uint8_t*)FORWARD_CMD_LIT;


	if(cmd_code[0] == 1)
 80019be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d103      	bne.n	80019ce <execute_cmd+0x52>
	{
		send_state(driving_system);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f8ac 	bl	8001b24 <send_state>
	}
	else{
		uint8_t msg[] = "Undefined First Cmd Literall";
		send_drv_err(msg);
	}
}
 80019cc:	e035      	b.n	8001a3a <execute_cmd+0xbe>
	}else if(cmd_code[0] == 2)
 80019ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d11a      	bne.n	8001a0c <execute_cmd+0x90>
	    float vel = 0;
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
	    sscanf(payload, "%f", &vel);
 80019dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4919      	ldr	r1, [pc, #100]	; (8001a4c <execute_cmd+0xd0>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f007 fcf0 	bl	80093cc <siscanf>
		if(cmd_code[1] == 1)
 80019ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d103      	bne.n	80019fc <execute_cmd+0x80>
			send_state(driving_system);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f895 	bl	8001b24 <send_state>
}
 80019fa:	e01e      	b.n	8001a3a <execute_cmd+0xbe>
		}else if(cmd_code[1] == 2)
 80019fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d11a      	bne.n	8001a3a <execute_cmd+0xbe>
			send_drv_err("Backward not implemented");
 8001a04:	4812      	ldr	r0, [pc, #72]	; (8001a50 <execute_cmd+0xd4>)
 8001a06:	f000 f829 	bl	8001a5c <send_drv_err>
}
 8001a0a:	e016      	b.n	8001a3a <execute_cmd+0xbe>
	}else if(cmd_code[0] == 3){
 8001a0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d103      	bne.n	8001a1c <execute_cmd+0xa0>
		send_drv_err("PWM Mode unimplemented");
 8001a14:	480f      	ldr	r0, [pc, #60]	; (8001a54 <execute_cmd+0xd8>)
 8001a16:	f000 f821 	bl	8001a5c <send_drv_err>
}
 8001a1a:	e00e      	b.n	8001a3a <execute_cmd+0xbe>
		uint8_t msg[] = "Undefined First Cmd Literall";
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <execute_cmd+0xdc>)
 8001a1e:	f107 0408 	add.w	r4, r7, #8
 8001a22:	461d      	mov	r5, r3
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a2c:	c407      	stmia	r4!, {r0, r1, r2}
 8001a2e:	7023      	strb	r3, [r4, #0]
		send_drv_err(msg);
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f811 	bl	8001a5c <send_drv_err>
}
 8001a3a:	bf00      	nop
 8001a3c:	3738      	adds	r7, #56	; 0x38
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800d5a0 	.word	0x0800d5a0
 8001a48:	0800d5a4 	.word	0x0800d5a4
 8001a4c:	0800d568 	.word	0x0800d568
 8001a50:	0800d56c 	.word	0x0800d56c
 8001a54:	0800d588 	.word	0x0800d588
 8001a58:	0800d5ac 	.word	0x0800d5ac

08001a5c <send_drv_err>:



void send_drv_err(char* msg){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b09c      	sub	sp, #112	; 0x70
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2264      	movs	r2, #100	; 0x64
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 fd1e 	bl	80094ae <memset>
	strcat(err_buffer, DRIVING_ERR);
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fc22 	bl	80002c0 <strlen>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4413      	add	r3, r2
 8001a86:	4917      	ldr	r1, [pc, #92]	; (8001ae4 <send_drv_err+0x88>)
 8001a88:	461a      	mov	r2, r3
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	cb03      	ldmia	r3!, {r0, r1}
 8001a8e:	6010      	str	r0, [r2, #0]
 8001a90:	6051      	str	r1, [r2, #4]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	7213      	strb	r3, [r2, #8]
	strcat(err_buffer, msg);
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f007 fd0e 	bl	80094be <strcat>
	strcat(err_buffer, "\n\r");
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fc0a 	bl	80002c0 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <send_drv_err+0x8c>)
 8001ab8:	8811      	ldrh	r1, [r2, #0]
 8001aba:	7892      	ldrb	r2, [r2, #2]
 8001abc:	8019      	strh	r1, [r3, #0]
 8001abe:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer),STATE_SENDING_TIMEOUT);
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fbfb 	bl	80002c0 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f107 010c 	add.w	r1, r7, #12
 8001ad2:	2364      	movs	r3, #100	; 0x64
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <send_drv_err+0x90>)
 8001ad6:	f004 fa47 	bl	8005f68 <HAL_UART_Transmit>

}
 8001ada:	bf00      	nop
 8001adc:	3770      	adds	r7, #112	; 0x70
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	0800d5cc 	.word	0x0800d5cc
 8001ae8:	0800d5d8 	.word	0x0800d5d8
 8001aec:	20000448 	.word	0x20000448

08001af0 <add_state_to_states_buffer>:


static void add_state_to_states_buffer(MotorState* motor_state){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

	memset(state_str, '\0', sizeof(state_str));
 8001af8:	2214      	movs	r2, #20
 8001afa:	2100      	movs	r1, #0
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <add_state_to_states_buffer+0x2c>)
 8001afe:	f007 fcd6 	bl	80094ae <memset>
	str_motor_state(motor_state, state_str);
 8001b02:	4906      	ldr	r1, [pc, #24]	; (8001b1c <add_state_to_states_buffer+0x2c>)
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f867 	bl	8001bd8 <str_motor_state>
	strcat(states_buffer, state_str);
 8001b0a:	4904      	ldr	r1, [pc, #16]	; (8001b1c <add_state_to_states_buffer+0x2c>)
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <add_state_to_states_buffer+0x30>)
 8001b0e:	f007 fcd6 	bl	80094be <strcat>

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200004dc 	.word	0x200004dc
 8001b20:	200004f0 	.word	0x200004f0

08001b24 <send_state>:
	}

}


void send_state(DrivingSystem* driving_system){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]


	memset(states_buffer, '\0', sizeof(states_buffer));
 8001b2c:	2250      	movs	r2, #80	; 0x50
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4815      	ldr	r0, [pc, #84]	; (8001b88 <send_state+0x64>)
 8001b32:	f007 fcbc 	bl	80094ae <memset>

	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e013      	b.n	8001b64 <send_state+0x40>

		add_state_to_states_buffer(driving_system->left_motors_lst[i]->motor_state);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ffd2 	bl	8001af0 <add_state_to_states_buffer>
		add_state_to_states_buffer(driving_system->right_motors_lst[i]->motor_state);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	3202      	adds	r2, #2
 8001b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ffc9 	bl	8001af0 <add_state_to_states_buffer>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3301      	adds	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	dde8      	ble.n	8001b3c <send_state+0x18>
	}

	HAL_UART_Transmit(&hlpuart1,(uint8_t*) states_buffer, strlen(states_buffer),STATE_SENDING_TIMEOUT);
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <send_state+0x64>)
 8001b6c:	f7fe fba8 	bl	80002c0 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2364      	movs	r3, #100	; 0x64
 8001b76:	4904      	ldr	r1, [pc, #16]	; (8001b88 <send_state+0x64>)
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <send_state+0x68>)
 8001b7a:	f004 f9f5 	bl	8005f68 <HAL_UART_Transmit>

}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200004f0 	.word	0x200004f0
 8001b8c:	20000448 	.word	0x20000448

08001b90 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	601a      	str	r2, [r3, #0]

}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	889a      	ldrh	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	809a      	strh	r2, [r3, #4]

}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <str_motor_state>:
#include <motor_features.h>
#include "motor_driver.h"
#include "timers_configuration.h"


void str_motor_state(MotorState* motor_state, char* state_buffer){
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af04      	add	r7, sp, #16
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]

	sprintf(state_buffer, "%d,%.2f,%.2f\n\r", motor_state->motor_id, motor_state->set_velocity, motor_state->measured_velocity);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7c1b      	ldrb	r3, [r3, #16]
 8001be6:	461e      	mov	r6, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcd3 	bl	8000598 <__aeabi_f2d>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	460d      	mov	r5, r1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fccc 	bl	8000598 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c08:	e9cd 4500 	strd	r4, r5, [sp]
 8001c0c:	4632      	mov	r2, r6
 8001c0e:	4904      	ldr	r1, [pc, #16]	; (8001c20 <str_motor_state+0x48>)
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f007 fbbb 	bl	800938c <siprintf>
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	0800d5dc 	.word	0x0800d5dc

08001c24 <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	60da      	str	r2, [r3, #12]
	motor_struct->updater_timer_periods = CountPeriodS(updater_tim_);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fac4 	bl	80021cc <CountPeriodS>
 8001c44:	eef0 7a40 	vmov.f32	s15, s0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_struct->encoder_info = enc_inf_param_;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	615a      	str	r2, [r3, #20]
	motor_struct->pid_controller = pid_controller_;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	605a      	str	r2, [r3, #4]

}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	eef0 0a47 	vmov.f32	s1, s14
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f000 f8e4 	bl	8001e5c <pid_calculate>
 8001c94:	4603      	mov	r3, r0
 8001c96:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001c98:	897b      	ldrh	r3, [r7, #10]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f9cc 	bl	8002038 <saturate_pwm>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	727b      	strb	r3, [r7, #9]
	L298N_update_pwm(motor_struct->L298N_driver, saturated_pwm_value);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	7a7a      	ldrb	r2, [r7, #9]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fda1 	bl	80017f4 <L298N_update_pwm>

}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 8001ccc:	6838      	ldr	r0, [r7, #0]
 8001cce:	f7ff ff6d 	bl	8001bac <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	889a      	ldrh	r2, [r3, #4]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	88db      	ldrh	r3, [r3, #6]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 8001ce4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dd1f      	ble.n	8001d2c <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	d114      	bne.n	8001d26 <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	889b      	ldrh	r3, [r3, #4]
 8001d00:	461a      	mov	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bfb8      	it	lt
 8001d10:	425b      	neglt	r3, r3
 8001d12:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	88da      	ldrh	r2, [r3, #6]
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	425b      	negs	r3, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	82fb      	strh	r3, [r7, #22]
 8001d24:	e023      	b.n	8001d6e <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001d26:	8abb      	ldrh	r3, [r7, #20]
 8001d28:	82fb      	strh	r3, [r7, #22]
 8001d2a:	e020      	b.n	8001d6e <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 8001d2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da1c      	bge.n	8001d6e <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d012      	beq.n	8001d6a <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	889b      	ldrh	r3, [r3, #4]
 8001d48:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	88db      	ldrh	r3, [r3, #6]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 8001d5e:	8a7a      	ldrh	r2, [r7, #18]
 8001d60:	8a3b      	ldrh	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	82fb      	strh	r3, [r7, #22]
 8001d68:	e001      	b.n	8001d6e <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001d6a:	8abb      	ldrh	r3, [r7, #20]
 8001d6c:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 8001d6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f92c 	bl	8001fd0 <convert_to_radians>
 8001d78:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001d90:	bf00      	nop
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <set_velocity>:

void set_velocity(MotorState *motor_state, float velocity)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	ed87 0a00 	vstr	s0, [r7]
	motor_state->set_velocity = velocity;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	605a      	str	r2, [r3, #4]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <update_measured_velocity>:

void update_measured_velocity(MotorStruct* motor_struct)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
	MotorState *curr_motor_state = motor_struct->motor_state;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]
	float rotary_displacement_ = rotary_displacement(curr_motor_state);
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f810 	bl	8001dea <rotary_displacement>
 8001dca:	ed87 0a02 	vstr	s0, [r7, #8]
	curr_motor_state->measured_velocity = (float)rotary_displacement_ / motor_struct->updater_timer_periods;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dd4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	edc3 7a00 	vstr	s15, [r3]

}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]

	return motor_state->position - motor_state->last_position;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001e02:	eeb0 0a67 	vmov.f32	s0, s15
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <pid_init>:
#include "pid_controller.h"
#include "motor_features.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6178      	str	r0, [r7, #20]
 8001e18:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e1c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e20:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e24:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	615a      	str	r2, [r3, #20]
}
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <pid_calculate>:
float d_term;
float pid_output;


uint8_t pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e68:	edc7 0a01 	vstr	s1, [r7, #4]

	error = setpoint - process_variable;
 8001e6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <pid_calculate+0x15c>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
	pid_data->total_error += error;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <pid_calculate+0x15c>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	edc3 7a01 	vstr	s15, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <pid_calculate+0x15c>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea4:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <pid_calculate+0x160>)
 8001ea6:	edc3 7a00 	vstr	s15, [r3]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	ed93 7a03 	vldr	s14, [r3, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <pid_calculate+0x164>)
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <pid_calculate+0x15c>)
 8001ec8:	edd3 6a00 	vldr	s13, [r3]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <pid_calculate+0x168>)
 8001edc:	edc3 7a00 	vstr	s15, [r3]

	pid_output = p_term + i_term + d_term;
 8001ee0:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <pid_calculate+0x160>)
 8001ee2:	ed93 7a00 	vldr	s14, [r3]
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <pid_calculate+0x164>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef0:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <pid_calculate+0x168>)
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efa:	4b33      	ldr	r3, [pc, #204]	; (8001fc8 <pid_calculate+0x16c>)
 8001efc:	edc3 7a00 	vstr	s15, [r3]

    // Anti-windup
    if (pid_output < -pid_data->anti_windup_limit)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	425b      	negs	r3, r3
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <pid_calculate+0x16c>)
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	dd15      	ble.n	8001f4a <pid_calculate+0xee>
    {
        pid_output = -pid_data->anti_windup_limit;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	425b      	negs	r3, r3
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <pid_calculate+0x16c>)
 8001f2e:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <pid_calculate+0x15c>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	edc3 7a01 	vstr	s15, [r3, #4]
 8001f48:	e021      	b.n	8001f8e <pid_calculate+0x132>

    } else if (pid_output > pid_data->anti_windup_limit)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <pid_calculate+0x16c>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d513      	bpl.n	8001f8e <pid_calculate+0x132>
    {
        pid_output = pid_data->anti_windup_limit;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <pid_calculate+0x16c>)
 8001f74:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <pid_calculate+0x15c>)
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edc3 7a01 	vstr	s15, [r3, #4]
    }


	pid_data->previous_error = error;
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <pid_calculate+0x15c>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	601a      	str	r2, [r3, #0]
	uint8_t saturated_pwm_value = saturate_pwm(pid_output);
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <pid_calculate+0x16c>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa0:	ee17 0a90 	vmov	r0, s15
 8001fa4:	f000 f848 	bl	8002038 <saturate_pwm>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	75fb      	strb	r3, [r7, #23]
	return saturated_pwm_value;
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000540 	.word	0x20000540
 8001fbc:	20000544 	.word	0x20000544
 8001fc0:	20000548 	.word	0x20000548
 8001fc4:	2000054c 	.word	0x2000054c
 8001fc8:	20000550 	.word	0x20000550
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <convert_to_radians>:

#include "motor_features.h"



float convert_to_radians(int32_t enc_position){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe2:	ee17 0a90 	vmov	r0, s15
 8001fe6:	f7fe fad7 	bl	8000598 <__aeabi_f2d>
 8001fea:	a30f      	add	r3, pc, #60	; (adr r3, 8002028 <convert_to_radians+0x58>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe fb2a 	bl	8000648 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	a30c      	add	r3, pc, #48	; (adr r3, 8002030 <convert_to_radians+0x60>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fc4b 	bl	800089c <__aeabi_ddiv>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fe13 	bl	8000c38 <__aeabi_d2f>
 8002012:	4603      	mov	r3, r0
 8002014:	ee07 3a90 	vmov	s15, r3

}
 8002018:	eeb0 0a67 	vmov.f32	s0, s15
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	54442d18 	.word	0x54442d18
 800202c:	401921fb 	.word	0x401921fb
 8002030:	00000000 	.word	0x00000000
 8002034:	40ae6400 	.word	0x40ae6400

08002038 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]


	if (pwm_value < PWM_MIN_VALUE){
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da02      	bge.n	800204c <saturate_pwm+0x14>
		pwm_value = (uint8_t)PWM_MIN_VALUE;
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	e004      	b.n	8002056 <saturate_pwm+0x1e>
	}else if(pwm_value > PWM_MAX_VALUE){
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b62      	cmp	r3, #98	; 0x62
 8002050:	dd01      	ble.n	8002056 <saturate_pwm+0x1e>
		pwm_value = (uint8_t)PWM_MAX_VALUE;
 8002052:	2362      	movs	r3, #98	; 0x62
 8002054:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	b2db      	uxtb	r3, r3

}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <parse_cmd_code>:

#include "parser_features.h"



void parse_cmd_code(uint8_t* cmd, uint8_t* cmd_code){
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]

	if (cmd[0] >= '0' && cmd[0] <= '9') {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b2f      	cmp	r3, #47	; 0x2f
 8002078:	d90a      	bls.n	8002090 <parse_cmd_code+0x28>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b39      	cmp	r3, #57	; 0x39
 8002080:	d806      	bhi.n	8002090 <parse_cmd_code+0x28>
		cmd_code[0] = cmd[0] - '0';
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3b30      	subs	r3, #48	; 0x30
 8002088:	b2da      	uxtb	r2, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e002      	b.n	8002096 <parse_cmd_code+0x2e>

	}else{
		send_parsing_err("cmd[0] wrong format");
 8002090:	480e      	ldr	r0, [pc, #56]	; (80020cc <parse_cmd_code+0x64>)
 8002092:	f000 f84f 	bl	8002134 <send_parsing_err>
	}

	if (cmd[1] >= '0' && cmd[1] <= '9') {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3301      	adds	r3, #1
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b2f      	cmp	r3, #47	; 0x2f
 800209e:	d90d      	bls.n	80020bc <parse_cmd_code+0x54>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3301      	adds	r3, #1
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b39      	cmp	r3, #57	; 0x39
 80020a8:	d808      	bhi.n	80020bc <parse_cmd_code+0x54>
		cmd_code[1] = cmd[1] - '0';
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3301      	adds	r3, #1
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	3a30      	subs	r2, #48	; 0x30
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e003      	b.n	80020c4 <parse_cmd_code+0x5c>
	}else{
		send_parsing_err("cmd[1] wrong format");
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <parse_cmd_code+0x68>)
 80020be:	f000 f839 	bl	8002134 <send_parsing_err>
	}

}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	0800d5ec 	.word	0x0800d5ec
 80020d0:	0800d600 	.word	0x0800d600

080020d4 <parse_payload>:

void parse_payload(char* cmd, uint8_t* payload) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]

    uint8_t cmd_index = 2;
 80020de:	2302      	movs	r3, #2
 80020e0:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]

    while (cmd[cmd_index] != CMD_END_CHAR) {
 80020e6:	e014      	b.n	8002112 <parse_payload+0x3e>

    	if(i == PAYLOAD_LENGHT-1){
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b07      	cmp	r3, #7
 80020ec:	d103      	bne.n	80020f6 <parse_payload+0x22>
    		send_parsing_err(" cmd end char not received");
 80020ee:	4810      	ldr	r0, [pc, #64]	; (8002130 <parse_payload+0x5c>)
 80020f0:	f000 f820 	bl	8002134 <send_parsing_err>
    		break;
 80020f4:	e013      	b.n	800211e <parse_payload+0x4a>
    	}
        payload[i] = cmd[cmd_index];
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	441a      	add	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	440b      	add	r3, r1
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	701a      	strb	r2, [r3, #0]
        i++;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3301      	adds	r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
        cmd_index++;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	3301      	adds	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
    while (cmd[cmd_index] != CMD_END_CHAR) {
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b66      	cmp	r3, #102	; 0x66
 800211c:	d1e4      	bne.n	80020e8 <parse_payload+0x14>
    }

    payload[i] = '\0';
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0800d614 	.word	0x0800d614

08002134 <send_parsing_err>:

void send_parsing_err(char* msg){
 8002134:	b580      	push	{r7, lr}
 8002136:	b09c      	sub	sp, #112	; 0x70
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	2264      	movs	r2, #100	; 0x64
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f007 f9b2 	bl	80094ae <memset>
	strcat(err_buffer, PARSING_ERR);
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f8b6 	bl	80002c0 <strlen>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4413      	add	r3, r2
 800215e:	4918      	ldr	r1, [pc, #96]	; (80021c0 <send_parsing_err+0x8c>)
 8002160:	461a      	mov	r2, r3
 8002162:	460b      	mov	r3, r1
 8002164:	cb03      	ldmia	r3!, {r0, r1}
 8002166:	6010      	str	r0, [r2, #0]
 8002168:	6051      	str	r1, [r2, #4]
 800216a:	8819      	ldrh	r1, [r3, #0]
 800216c:	789b      	ldrb	r3, [r3, #2]
 800216e:	8111      	strh	r1, [r2, #8]
 8002170:	7293      	strb	r3, [r2, #10]
	strcat(err_buffer, msg);
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4618      	mov	r0, r3
 800217a:	f007 f9a0 	bl	80094be <strcat>
	strcat(err_buffer, "\n\r");
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f89c 	bl	80002c0 <strlen>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4413      	add	r3, r2
 8002192:	4a0c      	ldr	r2, [pc, #48]	; (80021c4 <send_parsing_err+0x90>)
 8002194:	8811      	ldrh	r1, [r2, #0]
 8002196:	7892      	ldrb	r2, [r2, #2]
 8002198:	8019      	strh	r1, [r3, #0]
 800219a:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer),100);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f88d 	bl	80002c0 <strlen>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	f107 010c 	add.w	r1, r7, #12
 80021ae:	2364      	movs	r3, #100	; 0x64
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <send_parsing_err+0x94>)
 80021b2:	f003 fed9 	bl	8005f68 <HAL_UART_Transmit>

}
 80021b6:	bf00      	nop
 80021b8:	3770      	adds	r7, #112	; 0x70
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	0800d630 	.word	0x0800d630
 80021c4:	0800d63c 	.word	0x0800d63c
 80021c8:	20000448 	.word	0x20000448

080021cc <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 80021e0:	f001 fdda 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 80021e4:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002204:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	ee07 3a90 	vmov	s15, r3
}
 800220e:	eeb0 0a67 	vmov.f32	s0, s15
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <main>:
void generate_stair_signal(void);
void generate_random_signal_velo(void);


int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af04      	add	r7, sp, #16

  HAL_Init();
 800221e:	f000 fcf8 	bl	8002c12 <HAL_Init>
  SystemClock_Config();
 8002222:	f7fe ff0d 	bl	8001040 <SystemClock_Config>
  MX_GPIO_Init();
 8002226:	f7fe ff57 	bl	80010d8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800222a:	f7ff fa2b 	bl	8001684 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800222e:	f7ff fa73 	bl	8001718 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002232:	f7fe ffbf 	bl	80011b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002236:	f7ff f893 	bl	8001360 <MX_TIM3_Init>
  MX_TIM4_Init();
 800223a:	f7ff f8e7 	bl	800140c <MX_TIM4_Init>
  MX_TIM5_Init();
 800223e:	f7ff f93b 	bl	80014b8 <MX_TIM5_Init>
  MX_TIM7_Init();
 8002242:	f7ff f98f 	bl	8001564 <MX_TIM7_Init>
  MX_TIM8_Init();
 8002246:	f7ff f9c3 	bl	80015d0 <MX_TIM8_Init>

  init_encoder_info(&encoder_info, &htim4);
 800224a:	4937      	ldr	r1, [pc, #220]	; (8002328 <main+0x110>)
 800224c:	4837      	ldr	r0, [pc, #220]	; (800232c <main+0x114>)
 800224e:	f7ff fc9f 	bl	8001b90 <init_encoder_info>
  L298N_init(&L298N_lb, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 8002252:	2302      	movs	r3, #2
 8002254:	9302      	str	r3, [sp, #8]
 8002256:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2301      	movs	r3, #1
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002264:	4a32      	ldr	r2, [pc, #200]	; (8002330 <main+0x118>)
 8002266:	2100      	movs	r1, #0
 8002268:	4832      	ldr	r0, [pc, #200]	; (8002334 <main+0x11c>)
 800226a:	f7ff faa1 	bl	80017b0 <L298N_init>
  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 800226e:	215f      	movs	r1, #95	; 0x5f
 8002270:	ed9f 1a31 	vldr	s2, [pc, #196]	; 8002338 <main+0x120>
 8002274:	eddf 0a31 	vldr	s1, [pc, #196]	; 800233c <main+0x124>
 8002278:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8002340 <main+0x128>
 800227c:	4831      	ldr	r0, [pc, #196]	; (8002344 <main+0x12c>)
 800227e:	f7ff fdc7 	bl	8001e10 <pid_init>
  init_motor(&lb_motor, &lb_motor_state, &htim7, &encoder_info, &pid_controller, &L298N_lb);
 8002282:	4b2c      	ldr	r3, [pc, #176]	; (8002334 <main+0x11c>)
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	4b2f      	ldr	r3, [pc, #188]	; (8002344 <main+0x12c>)
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	4b28      	ldr	r3, [pc, #160]	; (800232c <main+0x114>)
 800228c:	4a2e      	ldr	r2, [pc, #184]	; (8002348 <main+0x130>)
 800228e:	492f      	ldr	r1, [pc, #188]	; (800234c <main+0x134>)
 8002290:	482f      	ldr	r0, [pc, #188]	; (8002350 <main+0x138>)
 8002292:	f7ff fcc7 	bl	8001c24 <init_motor>

  pwm_output = 0;
 8002296:	4b2f      	ldr	r3, [pc, #188]	; (8002354 <main+0x13c>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
  tick = 0;
 800229c:	492e      	ldr	r1, [pc, #184]	; (8002358 <main+0x140>)
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9c1 2300 	strd	r2, r3, [r1]
  velo = 0;
 80022aa:	4b2c      	ldr	r3, [pc, #176]	; (800235c <main+0x144>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80022b0:	4825      	ldr	r0, [pc, #148]	; (8002348 <main+0x130>)
 80022b2:	f002 f937 	bl	8004524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 80022b6:	482a      	ldr	r0, [pc, #168]	; (8002360 <main+0x148>)
 80022b8:	f002 f8c4 	bl	8004444 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022bc:	2100      	movs	r1, #0
 80022be:	481c      	ldr	r0, [pc, #112]	; (8002330 <main+0x118>)
 80022c0:	f002 fa0a 	bl	80046d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80022c4:	2104      	movs	r1, #4
 80022c6:	481a      	ldr	r0, [pc, #104]	; (8002330 <main+0x118>)
 80022c8:	f002 fa06 	bl	80046d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80022cc:	2108      	movs	r1, #8
 80022ce:	4818      	ldr	r0, [pc, #96]	; (8002330 <main+0x118>)
 80022d0:	f002 fa02 	bl	80046d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80022d4:	210c      	movs	r1, #12
 80022d6:	4816      	ldr	r0, [pc, #88]	; (8002330 <main+0x118>)
 80022d8:	f002 f9fe 	bl	80046d8 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80022dc:	213c      	movs	r1, #60	; 0x3c
 80022de:	4812      	ldr	r0, [pc, #72]	; (8002328 <main+0x110>)
 80022e0:	f002 fbb2 	bl	8004a48 <HAL_TIM_Encoder_Start>


  updater_timer_periods = CountPeriodS(lb_motor.motor_updater_tim);
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <main+0x138>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ff6f 	bl	80021cc <CountPeriodS>
 80022ee:	eef0 7a40 	vmov.f32	s15, s0
 80022f2:	4b1c      	ldr	r3, [pc, #112]	; (8002364 <main+0x14c>)
 80022f4:	edc3 7a00 	vstr	s15, [r3]
  L298N_set_input_configuration(&L298N_lb, FORWARD);
 80022f8:	2101      	movs	r1, #1
 80022fa:	480e      	ldr	r0, [pc, #56]	; (8002334 <main+0x11c>)
 80022fc:	f7ff facb 	bl	8001896 <L298N_set_input_configuration>
  init_driving_system(&driving_system ,&lb_motor, &lb_motor, &lb_motor, &lb_motor);
 8002300:	4b13      	ldr	r3, [pc, #76]	; (8002350 <main+0x138>)
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <main+0x138>)
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <main+0x138>)
 8002308:	4911      	ldr	r1, [pc, #68]	; (8002350 <main+0x138>)
 800230a:	4817      	ldr	r0, [pc, #92]	; (8002368 <main+0x150>)
 800230c:	f7ff fb08 	bl	8001920 <init_driving_system>
  default_init_driving_system_if(&drv_system_if);
 8002310:	4816      	ldr	r0, [pc, #88]	; (800236c <main+0x154>)
 8002312:	f7ff fb1f 	bl	8001954 <default_init_driving_system_if>

  /* USER CODE END 2 */

  HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 8002316:	2209      	movs	r2, #9
 8002318:	4915      	ldr	r1, [pc, #84]	; (8002370 <main+0x158>)
 800231a:	4816      	ldr	r0, [pc, #88]	; (8002374 <main+0x15c>)
 800231c:	f003 feb2 	bl	8006084 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN WHILE */
    while (1)
  {
//    	generate_stair_signal_pwm();
//    	generate_stair_signal();
    	generate_random_signal_velo();
 8002320:	f000 f844 	bl	80023ac <generate_random_signal_velo>
 8002324:	e7fc      	b.n	8002320 <main+0x108>
 8002326:	bf00      	nop
 8002328:	20000284 	.word	0x20000284
 800232c:	20000554 	.word	0x20000554
 8002330:	200001ec 	.word	0x200001ec
 8002334:	2000058c 	.word	0x2000058c
 8002338:	00000000 	.word	0x00000000
 800233c:	3e4ccccd 	.word	0x3e4ccccd
 8002340:	3c23d70a 	.word	0x3c23d70a
 8002344:	20000574 	.word	0x20000574
 8002348:	2000031c 	.word	0x2000031c
 800234c:	200005a8 	.word	0x200005a8
 8002350:	2000055c 	.word	0x2000055c
 8002354:	200005e2 	.word	0x200005e2
 8002358:	200005e8 	.word	0x200005e8
 800235c:	200005e3 	.word	0x200005e3
 8002360:	20000368 	.word	0x20000368
 8002364:	200005d4 	.word	0x200005d4
 8002368:	200005bc 	.word	0x200005bc
 800236c:	200005cc 	.word	0x200005cc
 8002370:	200005d8 	.word	0x200005d8
 8002374:	20000448 	.word	0x20000448

08002378 <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]


	drv_system_if.exe_cmd(&driving_system, cmd_data);
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <HAL_UART_RxCpltCallback+0x24>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4906      	ldr	r1, [pc, #24]	; (80023a0 <HAL_UART_RxCpltCallback+0x28>)
 8002386:	4807      	ldr	r0, [pc, #28]	; (80023a4 <HAL_UART_RxCpltCallback+0x2c>)
 8002388:	4798      	blx	r3
	HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 800238a:	2209      	movs	r2, #9
 800238c:	4904      	ldr	r1, [pc, #16]	; (80023a0 <HAL_UART_RxCpltCallback+0x28>)
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <HAL_UART_RxCpltCallback+0x30>)
 8002390:	f003 fe78 	bl	8006084 <HAL_UART_Receive_IT>

}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200005cc 	.word	0x200005cc
 80023a0:	200005d8 	.word	0x200005d8
 80023a4:	200005bc 	.word	0x200005bc
 80023a8:	20000448 	.word	0x20000448

080023ac <generate_random_signal_velo>:
			pwm_output = 0;
		}
	}
}

void generate_random_signal_velo(void){
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0

	if(tick == 100){
 80023b0:	4b0f      	ldr	r3, [pc, #60]	; (80023f0 <generate_random_signal_velo+0x44>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f1a2 0164 	sub.w	r1, r2, #100	; 0x64
 80023ba:	430b      	orrs	r3, r1
 80023bc:	d113      	bne.n	80023e6 <generate_random_signal_velo+0x3a>

		velo +=  2;
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <generate_random_signal_velo+0x48>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	3302      	adds	r3, #2
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <generate_random_signal_velo+0x48>)
 80023c8:	701a      	strb	r2, [r3, #0]
		tick = 0;
 80023ca:	4909      	ldr	r1, [pc, #36]	; (80023f0 <generate_random_signal_velo+0x44>)
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9c1 2300 	strd	r2, r3, [r1]
		if (velo >= 10){
 80023d8:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <generate_random_signal_velo+0x48>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b09      	cmp	r3, #9
 80023de:	d902      	bls.n	80023e6 <generate_random_signal_velo+0x3a>
			velo = 3;
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <generate_random_signal_velo+0x48>)
 80023e2:	2203      	movs	r2, #3
 80023e4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	200005e8 	.word	0x200005e8
 80023f4:	200005e3 	.word	0x200005e3

080023f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)lb_motor.motor_updater_tim->Instance) {
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b15      	ldr	r3, [pc, #84]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d121      	bne.n	8002452 <HAL_TIM_PeriodElapsedCallback+0x5a>

    	update_motor_position(lb_motor.motor_state, lb_motor.encoder_info);
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a12      	ldr	r2, [pc, #72]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002414:	6892      	ldr	r2, [r2, #8]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fc4e 	bl	8001cba <update_motor_position>
    	update_measured_velocity(&lb_motor);
 800241e:	480f      	ldr	r0, [pc, #60]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002420:	f7ff fcc9 	bl	8001db6 <update_measured_velocity>
    	set_velocity(&lb_motor_state, velo);
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002430:	eeb0 0a67 	vmov.f32	s0, s15
 8002434:	480b      	ldr	r0, [pc, #44]	; (8002464 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002436:	f7ff fcaf 	bl	8001d98 <set_velocity>

    	regulate_velocity(&lb_motor);
 800243a:	4808      	ldr	r0, [pc, #32]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x64>)
 800243c:	f7ff fc14 	bl	8001c68 <regulate_velocity>
    	tick += 1;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	1c54      	adds	r4, r2, #1
 8002448:	f143 0500 	adc.w	r5, r3, #0
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800244e:	e9c3 4500 	strd	r4, r5, [r3]
    }



//  /* USER CODE END Callback 1 */
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bdb0      	pop	{r4, r5, r7, pc}
 800245a:	bf00      	nop
 800245c:	2000055c 	.word	0x2000055c
 8002460:	200005e3 	.word	0x200005e3
 8002464:	200005a8 	.word	0x200005a8
 8002468:	200005e8 	.word	0x200005e8

0800246c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002470:	b672      	cpsid	i
}
 8002472:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002474:	e7fe      	b.n	8002474 <Error_Handler+0x8>
	...

08002478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_MspInit+0x44>)
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_MspInit+0x44>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6613      	str	r3, [r2, #96]	; 0x60
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_MspInit+0x44>)
 800248c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_MspInit+0x44>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_MspInit+0x44>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a0:	6593      	str	r3, [r2, #88]	; 0x58
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_MspInit+0x44>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024ae:	f000 ffb3 	bl	8003418 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000

080024c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b0a0      	sub	sp, #128	; 0x80
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d8:	f107 0318 	add.w	r3, r7, #24
 80024dc:	2254      	movs	r2, #84	; 0x54
 80024de:	2100      	movs	r1, #0
 80024e0:	4618      	mov	r0, r3
 80024e2:	f006 ffe4 	bl	80094ae <memset>
  if(huart->Instance==LPUART1)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a41      	ldr	r2, [pc, #260]	; (80025f0 <HAL_UART_MspInit+0x130>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d13f      	bne.n	8002570 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024f0:	2320      	movs	r3, #32
 80024f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80024f4:	2300      	movs	r3, #0
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024f8:	f107 0318 	add.w	r3, r7, #24
 80024fc:	4618      	mov	r0, r3
 80024fe:	f001 fcfb 	bl	8003ef8 <HAL_RCCEx_PeriphCLKConfig>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002508:	f7ff ffb0 	bl	800246c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800250c:	4b39      	ldr	r3, [pc, #228]	; (80025f4 <HAL_UART_MspInit+0x134>)
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	4a38      	ldr	r2, [pc, #224]	; (80025f4 <HAL_UART_MspInit+0x134>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002518:	4b36      	ldr	r3, [pc, #216]	; (80025f4 <HAL_UART_MspInit+0x134>)
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002524:	4b33      	ldr	r3, [pc, #204]	; (80025f4 <HAL_UART_MspInit+0x134>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002528:	4a32      	ldr	r2, [pc, #200]	; (80025f4 <HAL_UART_MspInit+0x134>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002530:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <HAL_UART_MspInit+0x134>)
 8002532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800253c:	230c      	movs	r3, #12
 800253e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002540:	2302      	movs	r3, #2
 8002542:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800254c:	230c      	movs	r3, #12
 800254e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002550:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002554:	4619      	mov	r1, r3
 8002556:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255a:	f000 fd1f 	bl	8002f9c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	205b      	movs	r0, #91	; 0x5b
 8002564:	f000 fc32 	bl	8002dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002568:	205b      	movs	r0, #91	; 0x5b
 800256a:	f000 fc49 	bl	8002e00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800256e:	e03a      	b.n	80025e6 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a20      	ldr	r2, [pc, #128]	; (80025f8 <HAL_UART_MspInit+0x138>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d135      	bne.n	80025e6 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800257a:	2301      	movs	r3, #1
 800257c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800257e:	2300      	movs	r3, #0
 8002580:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002582:	f107 0318 	add.w	r3, r7, #24
 8002586:	4618      	mov	r0, r3
 8002588:	f001 fcb6 	bl	8003ef8 <HAL_RCCEx_PeriphCLKConfig>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002592:	f7ff ff6b 	bl	800246c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <HAL_UART_MspInit+0x134>)
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_UART_MspInit+0x134>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	6613      	str	r3, [r2, #96]	; 0x60
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_UART_MspInit+0x134>)
 80025a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ae:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <HAL_UART_MspInit+0x134>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	4a10      	ldr	r2, [pc, #64]	; (80025f4 <HAL_UART_MspInit+0x134>)
 80025b4:	f043 0304 	orr.w	r3, r3, #4
 80025b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <HAL_UART_MspInit+0x134>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025c6:	2330      	movs	r3, #48	; 0x30
 80025c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025d6:	2307      	movs	r3, #7
 80025d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025de:	4619      	mov	r1, r3
 80025e0:	4806      	ldr	r0, [pc, #24]	; (80025fc <HAL_UART_MspInit+0x13c>)
 80025e2:	f000 fcdb 	bl	8002f9c <HAL_GPIO_Init>
}
 80025e6:	bf00      	nop
 80025e8:	3780      	adds	r7, #128	; 0x80
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40008000 	.word	0x40008000
 80025f4:	40021000 	.word	0x40021000
 80025f8:	40013800 	.word	0x40013800
 80025fc:	48000800 	.word	0x48000800

08002600 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a16      	ldr	r2, [pc, #88]	; (8002668 <HAL_TIM_Base_MspInit+0x68>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d10c      	bne.n	800262c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_TIM_Base_MspInit+0x6c>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	4a15      	ldr	r2, [pc, #84]	; (800266c <HAL_TIM_Base_MspInit+0x6c>)
 8002618:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800261c:	6613      	str	r3, [r2, #96]	; 0x60
 800261e:	4b13      	ldr	r3, [pc, #76]	; (800266c <HAL_TIM_Base_MspInit+0x6c>)
 8002620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800262a:	e018      	b.n	800265e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a0f      	ldr	r2, [pc, #60]	; (8002670 <HAL_TIM_Base_MspInit+0x70>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d113      	bne.n	800265e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <HAL_TIM_Base_MspInit+0x6c>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	4a0c      	ldr	r2, [pc, #48]	; (800266c <HAL_TIM_Base_MspInit+0x6c>)
 800263c:	f043 0320 	orr.w	r3, r3, #32
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_TIM_Base_MspInit+0x6c>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	2037      	movs	r0, #55	; 0x37
 8002654:	f000 fbba 	bl	8002dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8002658:	2037      	movs	r0, #55	; 0x37
 800265a:	f000 fbd1 	bl	8002e00 <HAL_NVIC_EnableIRQ>
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40012c00 	.word	0x40012c00
 800266c:	40021000 	.word	0x40021000
 8002670:	40001400 	.word	0x40001400

08002674 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b090      	sub	sp, #64	; 0x40
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]
 8002686:	609a      	str	r2, [r3, #8]
 8002688:	60da      	str	r2, [r3, #12]
 800268a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6c      	ldr	r2, [pc, #432]	; (8002844 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d129      	bne.n	80026ea <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002696:	4b6c      	ldr	r3, [pc, #432]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	4a6b      	ldr	r2, [pc, #428]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	6593      	str	r3, [r2, #88]	; 0x58
 80026a2:	4b69      	ldr	r3, [pc, #420]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ae:	4b66      	ldr	r3, [pc, #408]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	4a65      	ldr	r2, [pc, #404]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ba:	4b63      	ldr	r3, [pc, #396]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80026c6:	2350      	movs	r3, #80	; 0x50
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ca:	2302      	movs	r3, #2
 80026cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ce:	2300      	movs	r3, #0
 80026d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026d6:	2302      	movs	r3, #2
 80026d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026de:	4619      	mov	r1, r3
 80026e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e4:	f000 fc5a 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026e8:	e0a7      	b.n	800283a <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a57      	ldr	r2, [pc, #348]	; (800284c <HAL_TIM_Encoder_MspInit+0x1d8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d12a      	bne.n	800274a <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026f4:	4b54      	ldr	r3, [pc, #336]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	4a53      	ldr	r2, [pc, #332]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026fa:	f043 0304 	orr.w	r3, r3, #4
 80026fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002700:	4b51      	ldr	r3, [pc, #324]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	623b      	str	r3, [r7, #32]
 800270a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270c:	4b4e      	ldr	r3, [pc, #312]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	4a4d      	ldr	r2, [pc, #308]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002712:	f043 0301 	orr.w	r3, r3, #1
 8002716:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002718:	4b4b      	ldr	r3, [pc, #300]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800271a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	61fb      	str	r3, [r7, #28]
 8002722:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002724:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002736:	230a      	movs	r3, #10
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800273e:	4619      	mov	r1, r3
 8002740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002744:	f000 fc2a 	bl	8002f9c <HAL_GPIO_Init>
}
 8002748:	e077      	b.n	800283a <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a40      	ldr	r2, [pc, #256]	; (8002850 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d145      	bne.n	80027e0 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002754:	4b3c      	ldr	r3, [pc, #240]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	4a3b      	ldr	r2, [pc, #236]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800275a:	f043 0308 	orr.w	r3, r3, #8
 800275e:	6593      	str	r3, [r2, #88]	; 0x58
 8002760:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	61bb      	str	r3, [r7, #24]
 800276a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276c:	4b36      	ldr	r3, [pc, #216]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	4a35      	ldr	r2, [pc, #212]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002772:	f043 0302 	orr.w	r3, r3, #2
 8002776:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002778:	4b33      	ldr	r3, [pc, #204]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	617b      	str	r3, [r7, #20]
 8002782:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002784:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002788:	4a2f      	ldr	r2, [pc, #188]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002790:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800279c:	2304      	movs	r3, #4
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a0:	2302      	movs	r3, #2
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027ac:	2302      	movs	r3, #2
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b4:	4619      	mov	r1, r3
 80027b6:	4827      	ldr	r0, [pc, #156]	; (8002854 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80027b8:	f000 fbf0 	bl	8002f9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c2:	2302      	movs	r3, #2
 80027c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ca:	2300      	movs	r3, #0
 80027cc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80027ce:	2301      	movs	r3, #1
 80027d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d6:	4619      	mov	r1, r3
 80027d8:	481f      	ldr	r0, [pc, #124]	; (8002858 <HAL_TIM_Encoder_MspInit+0x1e4>)
 80027da:	f000 fbdf 	bl	8002f9c <HAL_GPIO_Init>
}
 80027de:	e02c      	b.n	800283a <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1d      	ldr	r2, [pc, #116]	; (800285c <HAL_TIM_Encoder_MspInit+0x1e8>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d127      	bne.n	800283a <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	4a16      	ldr	r2, [pc, #88]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027f4:	6613      	str	r3, [r2, #96]	; 0x60
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	4a10      	ldr	r2, [pc, #64]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	60bb      	str	r3, [r7, #8]
 8002818:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800281a:	23c0      	movs	r3, #192	; 0xc0
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800282a:	2304      	movs	r3, #4
 800282c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002832:	4619      	mov	r1, r3
 8002834:	4808      	ldr	r0, [pc, #32]	; (8002858 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002836:	f000 fbb1 	bl	8002f9c <HAL_GPIO_Init>
}
 800283a:	bf00      	nop
 800283c:	3740      	adds	r7, #64	; 0x40
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40000400 	.word	0x40000400
 8002848:	40021000 	.word	0x40021000
 800284c:	40000800 	.word	0x40000800
 8002850:	40000c00 	.word	0x40000c00
 8002854:	48000400 	.word	0x48000400
 8002858:	48000800 	.word	0x48000800
 800285c:	40013400 	.word	0x40013400

08002860 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	605a      	str	r2, [r3, #4]
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	60da      	str	r2, [r3, #12]
 8002876:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <HAL_TIM_MspPostInit+0x64>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d11b      	bne.n	80028ba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_TIM_MspPostInit+0x68>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	4a10      	ldr	r2, [pc, #64]	; (80028c8 <HAL_TIM_MspPostInit+0x68>)
 8002888:	f043 0304 	orr.w	r3, r3, #4
 800288c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <HAL_TIM_MspPostInit+0x68>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f003 0304 	and.w	r3, r3, #4
 8002896:	60bb      	str	r3, [r7, #8]
 8002898:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800289a:	230f      	movs	r3, #15
 800289c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289e:	2302      	movs	r3, #2
 80028a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a6:	2300      	movs	r3, #0
 80028a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ae:	f107 030c 	add.w	r3, r7, #12
 80028b2:	4619      	mov	r1, r3
 80028b4:	4805      	ldr	r0, [pc, #20]	; (80028cc <HAL_TIM_MspPostInit+0x6c>)
 80028b6:	f000 fb71 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028ba:	bf00      	nop
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40012c00 	.word	0x40012c00
 80028c8:	40021000 	.word	0x40021000
 80028cc:	48000800 	.word	0x48000800

080028d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08c      	sub	sp, #48	; 0x30
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028d8:	2300      	movs	r3, #0
 80028da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028e0:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <HAL_InitTick+0xc4>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	4a2b      	ldr	r2, [pc, #172]	; (8002994 <HAL_InitTick+0xc4>)
 80028e6:	f043 0310 	orr.w	r3, r3, #16
 80028ea:	6593      	str	r3, [r2, #88]	; 0x58
 80028ec:	4b29      	ldr	r3, [pc, #164]	; (8002994 <HAL_InitTick+0xc4>)
 80028ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f0:	f003 0310 	and.w	r3, r3, #16
 80028f4:	60bb      	str	r3, [r7, #8]
 80028f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028f8:	f107 020c 	add.w	r2, r7, #12
 80028fc:	f107 0310 	add.w	r3, r7, #16
 8002900:	4611      	mov	r1, r2
 8002902:	4618      	mov	r0, r3
 8002904:	f001 fa80 	bl	8003e08 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002908:	f001 fa52 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 800290c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800290e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002910:	4a21      	ldr	r2, [pc, #132]	; (8002998 <HAL_InitTick+0xc8>)
 8002912:	fba2 2303 	umull	r2, r3, r2, r3
 8002916:	0c9b      	lsrs	r3, r3, #18
 8002918:	3b01      	subs	r3, #1
 800291a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800291c:	4b1f      	ldr	r3, [pc, #124]	; (800299c <HAL_InitTick+0xcc>)
 800291e:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_InitTick+0xd0>)
 8002920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002922:	4b1e      	ldr	r3, [pc, #120]	; (800299c <HAL_InitTick+0xcc>)
 8002924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002928:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800292a:	4a1c      	ldr	r2, [pc, #112]	; (800299c <HAL_InitTick+0xcc>)
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002930:	4b1a      	ldr	r3, [pc, #104]	; (800299c <HAL_InitTick+0xcc>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002936:	4b19      	ldr	r3, [pc, #100]	; (800299c <HAL_InitTick+0xcc>)
 8002938:	2200      	movs	r2, #0
 800293a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 800293c:	4817      	ldr	r0, [pc, #92]	; (800299c <HAL_InitTick+0xcc>)
 800293e:	f001 fd29 	bl	8004394 <HAL_TIM_Base_Init>
 8002942:	4603      	mov	r3, r0
 8002944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800294c:	2b00      	cmp	r3, #0
 800294e:	d11b      	bne.n	8002988 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002950:	4812      	ldr	r0, [pc, #72]	; (800299c <HAL_InitTick+0xcc>)
 8002952:	f001 fde7 	bl	8004524 <HAL_TIM_Base_Start_IT>
 8002956:	4603      	mov	r3, r0
 8002958:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800295c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002960:	2b00      	cmp	r3, #0
 8002962:	d111      	bne.n	8002988 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002964:	2036      	movs	r0, #54	; 0x36
 8002966:	f000 fa4b 	bl	8002e00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b0f      	cmp	r3, #15
 800296e:	d808      	bhi.n	8002982 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002970:	2200      	movs	r2, #0
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	2036      	movs	r0, #54	; 0x36
 8002976:	f000 fa29 	bl	8002dcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800297a:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_InitTick+0xd4>)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	e002      	b.n	8002988 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800298c:	4618      	mov	r0, r3
 800298e:	3730      	adds	r7, #48	; 0x30
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	431bde83 	.word	0x431bde83
 800299c:	200005f0 	.word	0x200005f0
 80029a0:	40001000 	.word	0x40001000
 80029a4:	20000004 	.word	0x20000004

080029a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <NMI_Handler+0x4>

080029ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <HardFault_Handler+0x4>

080029b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <MemManage_Handler+0x4>

080029ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029be:	e7fe      	b.n	80029be <BusFault_Handler+0x4>

080029c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <UsageFault_Handler+0x4>

080029c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029d8:	4802      	ldr	r0, [pc, #8]	; (80029e4 <TIM6_DAC_IRQHandler+0x10>)
 80029da:	f002 f8c3 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	200005f0 	.word	0x200005f0

080029e8 <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80029ec:	4802      	ldr	r0, [pc, #8]	; (80029f8 <TIM7_DAC_IRQHandler+0x10>)
 80029ee:	f002 f8b9 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	2000031c 	.word	0x2000031c

080029fc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002a00:	4802      	ldr	r0, [pc, #8]	; (8002a0c <LPUART1_IRQHandler+0x10>)
 8002a02:	f003 fb8b 	bl	800611c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000448 	.word	0x20000448

08002a10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
	return 1;
 8002a14:	2301      	movs	r3, #1
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <_kill>:

int _kill(int pid, int sig)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a2a:	f006 fda1 	bl	8009570 <__errno>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2216      	movs	r2, #22
 8002a32:	601a      	str	r2, [r3, #0]
	return -1;
 8002a34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_exit>:

void _exit (int status)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ffe7 	bl	8002a20 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a52:	e7fe      	b.n	8002a52 <_exit+0x12>

08002a54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a60:	2300      	movs	r3, #0
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e00a      	b.n	8002a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a66:	f3af 8000 	nop.w
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	60ba      	str	r2, [r7, #8]
 8002a72:	b2ca      	uxtb	r2, r1
 8002a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	dbf0      	blt.n	8002a66 <_read+0x12>
	}

return len;
 8002a84:	687b      	ldr	r3, [r7, #4]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
 8002a9e:	e009      	b.n	8002ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	60ba      	str	r2, [r7, #8]
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	dbf1      	blt.n	8002aa0 <_write+0x12>
	}
	return len;
 8002abc:	687b      	ldr	r3, [r7, #4]
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <_close>:

int _close(int file)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
	return -1;
 8002ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aee:	605a      	str	r2, [r3, #4]
	return 0;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <_isatty>:

int _isatty(int file)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
	return 1;
 8002b06:	2301      	movs	r3, #1
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3714      	adds	r7, #20
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b38:	4a14      	ldr	r2, [pc, #80]	; (8002b8c <_sbrk+0x5c>)
 8002b3a:	4b15      	ldr	r3, [pc, #84]	; (8002b90 <_sbrk+0x60>)
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b44:	4b13      	ldr	r3, [pc, #76]	; (8002b94 <_sbrk+0x64>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d102      	bne.n	8002b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b4c:	4b11      	ldr	r3, [pc, #68]	; (8002b94 <_sbrk+0x64>)
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <_sbrk+0x68>)
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b52:	4b10      	ldr	r3, [pc, #64]	; (8002b94 <_sbrk+0x64>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d207      	bcs.n	8002b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b60:	f006 fd06 	bl	8009570 <__errno>
 8002b64:	4603      	mov	r3, r0
 8002b66:	220c      	movs	r2, #12
 8002b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6e:	e009      	b.n	8002b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <_sbrk+0x64>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b76:	4b07      	ldr	r3, [pc, #28]	; (8002b94 <_sbrk+0x64>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <_sbrk+0x64>)
 8002b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20020000 	.word	0x20020000
 8002b90:	00000400 	.word	0x00000400
 8002b94:	2000063c 	.word	0x2000063c
 8002b98:	20000820 	.word	0x20000820

08002b9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <SystemInit+0x20>)
 8002ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <SystemInit+0x20>)
 8002ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bc0:	480d      	ldr	r0, [pc, #52]	; (8002bf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bc4:	f7ff ffea 	bl	8002b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bc8:	480c      	ldr	r0, [pc, #48]	; (8002bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8002bca:	490d      	ldr	r1, [pc, #52]	; (8002c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bcc:	4a0d      	ldr	r2, [pc, #52]	; (8002c04 <LoopForever+0xe>)
  movs r3, #0
 8002bce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bd0:	e002      	b.n	8002bd8 <LoopCopyDataInit>

08002bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bd6:	3304      	adds	r3, #4

08002bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bdc:	d3f9      	bcc.n	8002bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bde:	4a0a      	ldr	r2, [pc, #40]	; (8002c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002be0:	4c0a      	ldr	r4, [pc, #40]	; (8002c0c <LoopForever+0x16>)
  movs r3, #0
 8002be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002be4:	e001      	b.n	8002bea <LoopFillZerobss>

08002be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002be8:	3204      	adds	r2, #4

08002bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bec:	d3fb      	bcc.n	8002be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bee:	f006 fcc5 	bl	800957c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bf2:	f7ff fb11 	bl	8002218 <main>

08002bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8002bf6:	e7fe      	b.n	8002bf6 <LoopForever>
  ldr   r0, =_estack
 8002bf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c00:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002c04:	0800dae4 	.word	0x0800dae4
  ldr r2, =_sbss
 8002c08:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002c0c:	2000081c 	.word	0x2000081c

08002c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c10:	e7fe      	b.n	8002c10 <ADC1_2_IRQHandler>

08002c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c1c:	2003      	movs	r0, #3
 8002c1e:	f000 f8ca 	bl	8002db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c22:	200f      	movs	r0, #15
 8002c24:	f7ff fe54 	bl	80028d0 <HAL_InitTick>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	71fb      	strb	r3, [r7, #7]
 8002c32:	e001      	b.n	8002c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c34:	f7ff fc20 	bl	8002478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c38:	79fb      	ldrb	r3, [r7, #7]

}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  return uwTick;
 8002c48:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <HAL_GetTick+0x14>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 }
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	20000640 	.word	0x20000640

08002c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c8e:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	60d3      	str	r3, [r2, #12]
}
 8002c94:	bf00      	nop
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca8:	4b04      	ldr	r3, [pc, #16]	; (8002cbc <__NVIC_GetPriorityGrouping+0x18>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	0a1b      	lsrs	r3, r3, #8
 8002cae:	f003 0307 	and.w	r3, r3, #7
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	db0b      	blt.n	8002cea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd2:	79fb      	ldrb	r3, [r7, #7]
 8002cd4:	f003 021f 	and.w	r2, r3, #31
 8002cd8:	4907      	ldr	r1, [pc, #28]	; (8002cf8 <__NVIC_EnableIRQ+0x38>)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	e000e100 	.word	0xe000e100

08002cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	4603      	mov	r3, r0
 8002d04:	6039      	str	r1, [r7, #0]
 8002d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db0a      	blt.n	8002d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	490c      	ldr	r1, [pc, #48]	; (8002d48 <__NVIC_SetPriority+0x4c>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d24:	e00a      	b.n	8002d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <__NVIC_SetPriority+0x50>)
 8002d2c:	79fb      	ldrb	r3, [r7, #7]
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3b04      	subs	r3, #4
 8002d34:	0112      	lsls	r2, r2, #4
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	761a      	strb	r2, [r3, #24]
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100
 8002d4c:	e000ed00 	.word	0xe000ed00

08002d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b089      	sub	sp, #36	; 0x24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f1c3 0307 	rsb	r3, r3, #7
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	bf28      	it	cs
 8002d6e:	2304      	movcs	r3, #4
 8002d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3304      	adds	r3, #4
 8002d76:	2b06      	cmp	r3, #6
 8002d78:	d902      	bls.n	8002d80 <NVIC_EncodePriority+0x30>
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	3b03      	subs	r3, #3
 8002d7e:	e000      	b.n	8002d82 <NVIC_EncodePriority+0x32>
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	401a      	ands	r2, r3
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d98:	f04f 31ff 	mov.w	r1, #4294967295
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002da2:	43d9      	mvns	r1, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da8:	4313      	orrs	r3, r2
         );
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3724      	adds	r7, #36	; 0x24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr

08002db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ff4c 	bl	8002c5c <__NVIC_SetPriorityGrouping>
}
 8002dc4:	bf00      	nop
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dda:	f7ff ff63 	bl	8002ca4 <__NVIC_GetPriorityGrouping>
 8002dde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	68b9      	ldr	r1, [r7, #8]
 8002de4:	6978      	ldr	r0, [r7, #20]
 8002de6:	f7ff ffb3 	bl	8002d50 <NVIC_EncodePriority>
 8002dea:	4602      	mov	r2, r0
 8002dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df0:	4611      	mov	r1, r2
 8002df2:	4618      	mov	r0, r3
 8002df4:	f7ff ff82 	bl	8002cfc <__NVIC_SetPriority>
}
 8002df8:	bf00      	nop
 8002dfa:	3718      	adds	r7, #24
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff56 	bl	8002cc0 <__NVIC_EnableIRQ>
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d005      	beq.n	8002e40 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2204      	movs	r2, #4
 8002e38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	73fb      	strb	r3, [r7, #15]
 8002e3e:	e037      	b.n	8002eb0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 020e 	bic.w	r2, r2, #14
 8002e4e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0201 	bic.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	f003 021f 	and.w	r2, r3, #31
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e82:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e8c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00c      	beq.n	8002eb0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ea4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002eae:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b084      	sub	sp, #16
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d00d      	beq.n	8002f02 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2204      	movs	r2, #4
 8002eea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
 8002f00:	e047      	b.n	8002f92 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 020e 	bic.w	r2, r2, #14
 8002f10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0201 	bic.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f003 021f 	and.w	r2, r3, #31
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2101      	movs	r1, #1
 8002f40:	fa01 f202 	lsl.w	r2, r1, r2
 8002f44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00c      	beq.n	8002f72 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4798      	blx	r3
    }
  }
  return status;
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002faa:	e15a      	b.n	8003262 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 814c 	beq.w	800325c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d005      	beq.n	8002fdc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d130      	bne.n	800303e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003012:	2201      	movs	r2, #1
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	fa02 f303 	lsl.w	r3, r2, r3
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	f003 0201 	and.w	r2, r3, #1
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	693a      	ldr	r2, [r7, #16]
 800303c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	2b03      	cmp	r3, #3
 8003048:	d017      	beq.n	800307a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	2203      	movs	r2, #3
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43db      	mvns	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d123      	bne.n	80030ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	220f      	movs	r2, #15
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	08da      	lsrs	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3208      	adds	r2, #8
 80030c8:	6939      	ldr	r1, [r7, #16]
 80030ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	2203      	movs	r2, #3
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	43db      	mvns	r3, r3
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4013      	ands	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0203 	and.w	r2, r3, #3
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 80a6 	beq.w	800325c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003110:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_GPIO_Init+0x2e4>)
 8003112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003114:	4a5a      	ldr	r2, [pc, #360]	; (8003280 <HAL_GPIO_Init+0x2e4>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6613      	str	r3, [r2, #96]	; 0x60
 800311c:	4b58      	ldr	r3, [pc, #352]	; (8003280 <HAL_GPIO_Init+0x2e4>)
 800311e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	60bb      	str	r3, [r7, #8]
 8003126:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003128:	4a56      	ldr	r2, [pc, #344]	; (8003284 <HAL_GPIO_Init+0x2e8>)
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	089b      	lsrs	r3, r3, #2
 800312e:	3302      	adds	r3, #2
 8003130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003134:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	220f      	movs	r2, #15
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	4013      	ands	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003152:	d01f      	beq.n	8003194 <HAL_GPIO_Init+0x1f8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a4c      	ldr	r2, [pc, #304]	; (8003288 <HAL_GPIO_Init+0x2ec>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d019      	beq.n	8003190 <HAL_GPIO_Init+0x1f4>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a4b      	ldr	r2, [pc, #300]	; (800328c <HAL_GPIO_Init+0x2f0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <HAL_GPIO_Init+0x1f0>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a4a      	ldr	r2, [pc, #296]	; (8003290 <HAL_GPIO_Init+0x2f4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00d      	beq.n	8003188 <HAL_GPIO_Init+0x1ec>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a49      	ldr	r2, [pc, #292]	; (8003294 <HAL_GPIO_Init+0x2f8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d007      	beq.n	8003184 <HAL_GPIO_Init+0x1e8>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a48      	ldr	r2, [pc, #288]	; (8003298 <HAL_GPIO_Init+0x2fc>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d101      	bne.n	8003180 <HAL_GPIO_Init+0x1e4>
 800317c:	2305      	movs	r3, #5
 800317e:	e00a      	b.n	8003196 <HAL_GPIO_Init+0x1fa>
 8003180:	2306      	movs	r3, #6
 8003182:	e008      	b.n	8003196 <HAL_GPIO_Init+0x1fa>
 8003184:	2304      	movs	r3, #4
 8003186:	e006      	b.n	8003196 <HAL_GPIO_Init+0x1fa>
 8003188:	2303      	movs	r3, #3
 800318a:	e004      	b.n	8003196 <HAL_GPIO_Init+0x1fa>
 800318c:	2302      	movs	r3, #2
 800318e:	e002      	b.n	8003196 <HAL_GPIO_Init+0x1fa>
 8003190:	2301      	movs	r3, #1
 8003192:	e000      	b.n	8003196 <HAL_GPIO_Init+0x1fa>
 8003194:	2300      	movs	r3, #0
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	f002 0203 	and.w	r2, r2, #3
 800319c:	0092      	lsls	r2, r2, #2
 800319e:	4093      	lsls	r3, r2
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a6:	4937      	ldr	r1, [pc, #220]	; (8003284 <HAL_GPIO_Init+0x2e8>)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	3302      	adds	r3, #2
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031b4:	4b39      	ldr	r3, [pc, #228]	; (800329c <HAL_GPIO_Init+0x300>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	43db      	mvns	r3, r3
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d003      	beq.n	80031d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031d8:	4a30      	ldr	r2, [pc, #192]	; (800329c <HAL_GPIO_Init+0x300>)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031de:	4b2f      	ldr	r3, [pc, #188]	; (800329c <HAL_GPIO_Init+0x300>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	43db      	mvns	r3, r3
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4013      	ands	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003202:	4a26      	ldr	r2, [pc, #152]	; (800329c <HAL_GPIO_Init+0x300>)
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003208:	4b24      	ldr	r3, [pc, #144]	; (800329c <HAL_GPIO_Init+0x300>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	43db      	mvns	r3, r3
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4013      	ands	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800322c:	4a1b      	ldr	r2, [pc, #108]	; (800329c <HAL_GPIO_Init+0x300>)
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003232:	4b1a      	ldr	r3, [pc, #104]	; (800329c <HAL_GPIO_Init+0x300>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003256:	4a11      	ldr	r2, [pc, #68]	; (800329c <HAL_GPIO_Init+0x300>)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3301      	adds	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
 800326c:	2b00      	cmp	r3, #0
 800326e:	f47f ae9d 	bne.w	8002fac <HAL_GPIO_Init+0x10>
  }
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	371c      	adds	r7, #28
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000
 8003288:	48000400 	.word	0x48000400
 800328c:	48000800 	.word	0x48000800
 8003290:	48000c00 	.word	0x48000c00
 8003294:	48001000 	.word	0x48001000
 8003298:	48001400 	.word	0x48001400
 800329c:	40010400 	.word	0x40010400

080032a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	460b      	mov	r3, r1
 80032aa:	807b      	strh	r3, [r7, #2]
 80032ac:	4613      	mov	r3, r2
 80032ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b0:	787b      	ldrb	r3, [r7, #1]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032b6:	887a      	ldrh	r2, [r7, #2]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032bc:	e002      	b.n	80032c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032be:	887a      	ldrh	r2, [r7, #2]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d141      	bne.n	8003362 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032de:	4b4b      	ldr	r3, [pc, #300]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ea:	d131      	bne.n	8003350 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ec:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f2:	4a46      	ldr	r2, [pc, #280]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032fc:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003304:	4a41      	ldr	r2, [pc, #260]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003306:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800330a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800330c:	4b40      	ldr	r3, [pc, #256]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2232      	movs	r2, #50	; 0x32
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	4a3f      	ldr	r2, [pc, #252]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003318:	fba2 2303 	umull	r2, r3, r2, r3
 800331c:	0c9b      	lsrs	r3, r3, #18
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003322:	e002      	b.n	800332a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	3b01      	subs	r3, #1
 8003328:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800332a:	4b38      	ldr	r3, [pc, #224]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003336:	d102      	bne.n	800333e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f2      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800333e:	4b33      	ldr	r3, [pc, #204]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003346:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800334a:	d158      	bne.n	80033fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e057      	b.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003350:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003356:	4a2d      	ldr	r2, [pc, #180]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800335c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003360:	e04d      	b.n	80033fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003368:	d141      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800336a:	4b28      	ldr	r3, [pc, #160]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003376:	d131      	bne.n	80033dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337e:	4a23      	ldr	r2, [pc, #140]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003384:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003388:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003390:	4a1e      	ldr	r2, [pc, #120]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003392:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003396:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003398:	4b1d      	ldr	r3, [pc, #116]	; (8003410 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2232      	movs	r2, #50	; 0x32
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	4a1c      	ldr	r2, [pc, #112]	; (8003414 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033a4:	fba2 2303 	umull	r2, r3, r2, r3
 80033a8:	0c9b      	lsrs	r3, r3, #18
 80033aa:	3301      	adds	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033ae:	e002      	b.n	80033b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033c2:	d102      	bne.n	80033ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f2      	bne.n	80033b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033d6:	d112      	bne.n	80033fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e011      	b.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e2:	4a0a      	ldr	r2, [pc, #40]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033ec:	e007      	b.n	80033fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033ee:	4b07      	ldr	r3, [pc, #28]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033f6:	4a05      	ldr	r2, [pc, #20]	; (800340c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	40007000 	.word	0x40007000
 8003410:	20000000 	.word	0x20000000
 8003414:	431bde83 	.word	0x431bde83

08003418 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	4a04      	ldr	r2, [pc, #16]	; (8003434 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003422:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003426:	6093      	str	r3, [r2, #8]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40007000 	.word	0x40007000

08003438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e2fe      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d075      	beq.n	8003542 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003456:	4b97      	ldr	r3, [pc, #604]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003460:	4b94      	ldr	r3, [pc, #592]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	f003 0303 	and.w	r3, r3, #3
 8003468:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b0c      	cmp	r3, #12
 800346e:	d102      	bne.n	8003476 <HAL_RCC_OscConfig+0x3e>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d002      	beq.n	800347c <HAL_RCC_OscConfig+0x44>
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d10b      	bne.n	8003494 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	4b8d      	ldr	r3, [pc, #564]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d05b      	beq.n	8003540 <HAL_RCC_OscConfig+0x108>
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d157      	bne.n	8003540 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e2d9      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349c:	d106      	bne.n	80034ac <HAL_RCC_OscConfig+0x74>
 800349e:	4b85      	ldr	r3, [pc, #532]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a84      	ldr	r2, [pc, #528]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034a8:	6013      	str	r3, [r2, #0]
 80034aa:	e01d      	b.n	80034e8 <HAL_RCC_OscConfig+0xb0>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x98>
 80034b6:	4b7f      	ldr	r3, [pc, #508]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7e      	ldr	r2, [pc, #504]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b7c      	ldr	r3, [pc, #496]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a7b      	ldr	r2, [pc, #492]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0xb0>
 80034d0:	4b78      	ldr	r3, [pc, #480]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a77      	ldr	r2, [pc, #476]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b75      	ldr	r3, [pc, #468]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a74      	ldr	r2, [pc, #464]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80034e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d013      	beq.n	8003518 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f0:	f7ff fba8 	bl	8002c44 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034f6:	e008      	b.n	800350a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f8:	f7ff fba4 	bl	8002c44 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	; 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e29e      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350a:	4b6a      	ldr	r3, [pc, #424]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCC_OscConfig+0xc0>
 8003516:	e014      	b.n	8003542 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003518:	f7ff fb94 	bl	8002c44 <HAL_GetTick>
 800351c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003520:	f7ff fb90 	bl	8002c44 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b64      	cmp	r3, #100	; 0x64
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e28a      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003532:	4b60      	ldr	r3, [pc, #384]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0xe8>
 800353e:	e000      	b.n	8003542 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d075      	beq.n	800363a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800354e:	4b59      	ldr	r3, [pc, #356]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003558:	4b56      	ldr	r3, [pc, #344]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b0c      	cmp	r3, #12
 8003566:	d102      	bne.n	800356e <HAL_RCC_OscConfig+0x136>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d002      	beq.n	8003574 <HAL_RCC_OscConfig+0x13c>
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d11f      	bne.n	80035b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	4b4f      	ldr	r3, [pc, #316]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_OscConfig+0x154>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e25d      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358c:	4b49      	ldr	r3, [pc, #292]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	4946      	ldr	r1, [pc, #280]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80035a0:	4b45      	ldr	r3, [pc, #276]	; (80036b8 <HAL_RCC_OscConfig+0x280>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff f993 	bl	80028d0 <HAL_InitTick>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d043      	beq.n	8003638 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e249      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d023      	beq.n	8003604 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035bc:	4b3d      	ldr	r3, [pc, #244]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a3c      	ldr	r2, [pc, #240]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7ff fb3c 	bl	8002c44 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d0:	f7ff fb38 	bl	8002c44 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e232      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e2:	4b34      	ldr	r3, [pc, #208]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ee:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	061b      	lsls	r3, r3, #24
 80035fc:	492d      	ldr	r1, [pc, #180]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
 8003602:	e01a      	b.n	800363a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003604:	4b2b      	ldr	r3, [pc, #172]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a2a      	ldr	r2, [pc, #168]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800360a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800360e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7ff fb18 	bl	8002c44 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003618:	f7ff fb14 	bl	8002c44 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e20e      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800362a:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x1e0>
 8003636:	e000      	b.n	800363a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003638:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d041      	beq.n	80036ca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d01c      	beq.n	8003688 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003654:	4a17      	ldr	r2, [pc, #92]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003656:	f043 0301 	orr.w	r3, r3, #1
 800365a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7ff faf1 	bl	8002c44 <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003666:	f7ff faed 	bl	8002c44 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e1e7      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003678:	4b0e      	ldr	r3, [pc, #56]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800367a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0ef      	beq.n	8003666 <HAL_RCC_OscConfig+0x22e>
 8003686:	e020      	b.n	80036ca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 800368a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368e:	4a09      	ldr	r2, [pc, #36]	; (80036b4 <HAL_RCC_OscConfig+0x27c>)
 8003690:	f023 0301 	bic.w	r3, r3, #1
 8003694:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003698:	f7ff fad4 	bl	8002c44 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800369e:	e00d      	b.n	80036bc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a0:	f7ff fad0 	bl	8002c44 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d906      	bls.n	80036bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e1ca      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036bc:	4b8c      	ldr	r3, [pc, #560]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80036be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1ea      	bne.n	80036a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 80a6 	beq.w	8003824 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036dc:	4b84      	ldr	r3, [pc, #528]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80036de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_RCC_OscConfig+0x2b4>
 80036e8:	2301      	movs	r3, #1
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x2b6>
 80036ec:	2300      	movs	r3, #0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00d      	beq.n	800370e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f2:	4b7f      	ldr	r3, [pc, #508]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	4a7e      	ldr	r2, [pc, #504]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80036f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036fc:	6593      	str	r3, [r2, #88]	; 0x58
 80036fe:	4b7c      	ldr	r3, [pc, #496]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003706:	60fb      	str	r3, [r7, #12]
 8003708:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800370a:	2301      	movs	r3, #1
 800370c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800370e:	4b79      	ldr	r3, [pc, #484]	; (80038f4 <HAL_RCC_OscConfig+0x4bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d118      	bne.n	800374c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800371a:	4b76      	ldr	r3, [pc, #472]	; (80038f4 <HAL_RCC_OscConfig+0x4bc>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a75      	ldr	r2, [pc, #468]	; (80038f4 <HAL_RCC_OscConfig+0x4bc>)
 8003720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003724:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003726:	f7ff fa8d 	bl	8002c44 <HAL_GetTick>
 800372a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800372c:	e008      	b.n	8003740 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800372e:	f7ff fa89 	bl	8002c44 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	2b02      	cmp	r3, #2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e183      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003740:	4b6c      	ldr	r3, [pc, #432]	; (80038f4 <HAL_RCC_OscConfig+0x4bc>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0f0      	beq.n	800372e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d108      	bne.n	8003766 <HAL_RCC_OscConfig+0x32e>
 8003754:	4b66      	ldr	r3, [pc, #408]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a65      	ldr	r2, [pc, #404]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003764:	e024      	b.n	80037b0 <HAL_RCC_OscConfig+0x378>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b05      	cmp	r3, #5
 800376c:	d110      	bne.n	8003790 <HAL_RCC_OscConfig+0x358>
 800376e:	4b60      	ldr	r3, [pc, #384]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	4a5e      	ldr	r2, [pc, #376]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800377e:	4b5c      	ldr	r3, [pc, #368]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003784:	4a5a      	ldr	r2, [pc, #360]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378e:	e00f      	b.n	80037b0 <HAL_RCC_OscConfig+0x378>
 8003790:	4b57      	ldr	r3, [pc, #348]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	4a56      	ldr	r2, [pc, #344]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80037a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a6:	4a52      	ldr	r2, [pc, #328]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f023 0304 	bic.w	r3, r3, #4
 80037ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d016      	beq.n	80037e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7ff fa44 	bl	8002c44 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037be:	e00a      	b.n	80037d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c0:	f7ff fa40 	bl	8002c44 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e138      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037d6:	4b46      	ldr	r3, [pc, #280]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80037d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0ed      	beq.n	80037c0 <HAL_RCC_OscConfig+0x388>
 80037e4:	e015      	b.n	8003812 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e6:	f7ff fa2d 	bl	8002c44 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037ec:	e00a      	b.n	8003804 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	f7ff fa29 	bl	8002c44 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e121      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003804:	4b3a      	ldr	r3, [pc, #232]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1ed      	bne.n	80037ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003812:	7ffb      	ldrb	r3, [r7, #31]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003818:	4b35      	ldr	r3, [pc, #212]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 800381a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381c:	4a34      	ldr	r2, [pc, #208]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 800381e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003822:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d03c      	beq.n	80038aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d01c      	beq.n	8003872 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003838:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 800383a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800383e:	4a2c      	ldr	r2, [pc, #176]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003840:	f043 0301 	orr.w	r3, r3, #1
 8003844:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003848:	f7ff f9fc 	bl	8002c44 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003850:	f7ff f9f8 	bl	8002c44 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0f2      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003862:	4b23      	ldr	r3, [pc, #140]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ef      	beq.n	8003850 <HAL_RCC_OscConfig+0x418>
 8003870:	e01b      	b.n	80038aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003872:	4b1f      	ldr	r3, [pc, #124]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 8003874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003878:	4a1d      	ldr	r2, [pc, #116]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003882:	f7ff f9df 	bl	8002c44 <HAL_GetTick>
 8003886:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003888:	e008      	b.n	800389c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800388a:	f7ff f9db 	bl	8002c44 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d901      	bls.n	800389c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e0d5      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800389c:	4b14      	ldr	r3, [pc, #80]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 800389e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1ef      	bne.n	800388a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80c9 	beq.w	8003a46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038b4:	4b0e      	ldr	r3, [pc, #56]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f003 030c 	and.w	r3, r3, #12
 80038bc:	2b0c      	cmp	r3, #12
 80038be:	f000 8083 	beq.w	80039c8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d15e      	bne.n	8003988 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <HAL_RCC_OscConfig+0x4b8>)
 80038d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7ff f9b5 	bl	8002c44 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038dc:	e00c      	b.n	80038f8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038de:	f7ff f9b1 	bl	8002c44 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d905      	bls.n	80038f8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e0ab      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f8:	4b55      	ldr	r3, [pc, #340]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1ec      	bne.n	80038de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003904:	4b52      	ldr	r3, [pc, #328]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	4b52      	ldr	r3, [pc, #328]	; (8003a54 <HAL_RCC_OscConfig+0x61c>)
 800390a:	4013      	ands	r3, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6a11      	ldr	r1, [r2, #32]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003914:	3a01      	subs	r2, #1
 8003916:	0112      	lsls	r2, r2, #4
 8003918:	4311      	orrs	r1, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800391e:	0212      	lsls	r2, r2, #8
 8003920:	4311      	orrs	r1, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003926:	0852      	lsrs	r2, r2, #1
 8003928:	3a01      	subs	r2, #1
 800392a:	0552      	lsls	r2, r2, #21
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	3a01      	subs	r2, #1
 8003936:	0652      	lsls	r2, r2, #25
 8003938:	4311      	orrs	r1, r2
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800393e:	06d2      	lsls	r2, r2, #27
 8003940:	430a      	orrs	r2, r1
 8003942:	4943      	ldr	r1, [pc, #268]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 8003944:	4313      	orrs	r3, r2
 8003946:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003948:	4b41      	ldr	r3, [pc, #260]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a40      	ldr	r2, [pc, #256]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003952:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003954:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a3d      	ldr	r2, [pc, #244]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 800395a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800395e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7ff f970 	bl	8002c44 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7ff f96c 	bl	8002c44 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e066      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397a:	4b35      	ldr	r3, [pc, #212]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d0f0      	beq.n	8003968 <HAL_RCC_OscConfig+0x530>
 8003986:	e05e      	b.n	8003a46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003988:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a30      	ldr	r2, [pc, #192]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 800398e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003994:	f7ff f956 	bl	8002c44 <HAL_GetTick>
 8003998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800399a:	e008      	b.n	80039ae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800399c:	f7ff f952 	bl	8002c44 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d901      	bls.n	80039ae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e04c      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ae:	4b28      	ldr	r3, [pc, #160]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1f0      	bne.n	800399c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039ba:	4b25      	ldr	r3, [pc, #148]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	4924      	ldr	r1, [pc, #144]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 80039c0:	4b25      	ldr	r3, [pc, #148]	; (8003a58 <HAL_RCC_OscConfig+0x620>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	60cb      	str	r3, [r1, #12]
 80039c6:	e03e      	b.n	8003a46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e039      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <HAL_RCC_OscConfig+0x618>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f003 0203 	and.w	r2, r3, #3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a1b      	ldr	r3, [r3, #32]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d12c      	bne.n	8003a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	3b01      	subs	r3, #1
 80039f4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d123      	bne.n	8003a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d11b      	bne.n	8003a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d113      	bne.n	8003a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	3b01      	subs	r3, #1
 8003a28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d109      	bne.n	8003a42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	019f800c 	.word	0x019f800c
 8003a58:	feeefffc 	.word	0xfeeefffc

08003a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d101      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e11e      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a74:	4b91      	ldr	r3, [pc, #580]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 030f 	and.w	r3, r3, #15
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d910      	bls.n	8003aa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a82:	4b8e      	ldr	r3, [pc, #568]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f023 020f 	bic.w	r2, r3, #15
 8003a8a:	498c      	ldr	r1, [pc, #560]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a92:	4b8a      	ldr	r3, [pc, #552]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e106      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d073      	beq.n	8003b98 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d129      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ab8:	4b81      	ldr	r3, [pc, #516]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0f4      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ac8:	f000 f9d0 	bl	8003e6c <RCC_GetSysClockFreqFromPLLSource>
 8003acc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	4a7c      	ldr	r2, [pc, #496]	; (8003cc4 <HAL_RCC_ClockConfig+0x268>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d93f      	bls.n	8003b56 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ad6:	4b7a      	ldr	r3, [pc, #488]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d009      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d033      	beq.n	8003b56 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d12f      	bne.n	8003b56 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003af6:	4b72      	ldr	r3, [pc, #456]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003afe:	4a70      	ldr	r2, [pc, #448]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b04:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b06:	2380      	movs	r3, #128	; 0x80
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e024      	b.n	8003b56 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d107      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b14:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d109      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0c6      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b24:	4b66      	ldr	r3, [pc, #408]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d101      	bne.n	8003b34 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e0be      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b34:	f000 f8ce 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4a61      	ldr	r2, [pc, #388]	; (8003cc4 <HAL_RCC_ClockConfig+0x268>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d909      	bls.n	8003b56 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b42:	4b5f      	ldr	r3, [pc, #380]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b4a:	4a5d      	ldr	r2, [pc, #372]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003b4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b50:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b56:	4b5a      	ldr	r3, [pc, #360]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f023 0203 	bic.w	r2, r3, #3
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4957      	ldr	r1, [pc, #348]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b68:	f7ff f86c 	bl	8002c44 <HAL_GetTick>
 8003b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6e:	e00a      	b.n	8003b86 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b70:	f7ff f868 	bl	8002c44 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e095      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	4b4e      	ldr	r3, [pc, #312]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 020c 	and.w	r2, r3, #12
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d1eb      	bne.n	8003b70 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d023      	beq.n	8003bec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d005      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bb0:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	4a42      	ldr	r2, [pc, #264]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0308 	and.w	r3, r3, #8
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bc8:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bd0:	4a3b      	ldr	r2, [pc, #236]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bd6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd8:	4b39      	ldr	r3, [pc, #228]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4936      	ldr	r1, [pc, #216]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
 8003bea:	e008      	b.n	8003bfe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b80      	cmp	r3, #128	; 0x80
 8003bf0:	d105      	bne.n	8003bfe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bf2:	4b33      	ldr	r3, [pc, #204]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	4a32      	ldr	r2, [pc, #200]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d21d      	bcs.n	8003c48 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0c:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f023 020f 	bic.w	r2, r3, #15
 8003c14:	4929      	ldr	r1, [pc, #164]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c1c:	f7ff f812 	bl	8002c44 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	f7ff f80e 	bl	8002c44 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e03b      	b.n	8003cb2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c3a:	4b20      	ldr	r3, [pc, #128]	; (8003cbc <HAL_RCC_ClockConfig+0x260>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d1ed      	bne.n	8003c24 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	4917      	ldr	r1, [pc, #92]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d009      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c72:	4b13      	ldr	r3, [pc, #76]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	490f      	ldr	r1, [pc, #60]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c86:	f000 f825 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <HAL_RCC_ClockConfig+0x264>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	091b      	lsrs	r3, r3, #4
 8003c92:	f003 030f 	and.w	r3, r3, #15
 8003c96:	490c      	ldr	r1, [pc, #48]	; (8003cc8 <HAL_RCC_ClockConfig+0x26c>)
 8003c98:	5ccb      	ldrb	r3, [r1, r3]
 8003c9a:	f003 031f 	and.w	r3, r3, #31
 8003c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca2:	4a0a      	ldr	r2, [pc, #40]	; (8003ccc <HAL_RCC_ClockConfig+0x270>)
 8003ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <HAL_RCC_ClockConfig+0x274>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fe10 	bl	80028d0 <HAL_InitTick>
 8003cb0:	4603      	mov	r3, r0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3718      	adds	r7, #24
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40022000 	.word	0x40022000
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	04c4b400 	.word	0x04c4b400
 8003cc8:	0800d64c 	.word	0x0800d64c
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	20000004 	.word	0x20000004

08003cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b087      	sub	sp, #28
 8003cd8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cda:	4b2c      	ldr	r3, [pc, #176]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d102      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003ce6:	4b2a      	ldr	r3, [pc, #168]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	e047      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003cec:	4b27      	ldr	r3, [pc, #156]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d102      	bne.n	8003cfe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cf8:	4b26      	ldr	r3, [pc, #152]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cfa:	613b      	str	r3, [r7, #16]
 8003cfc:	e03e      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cfe:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d136      	bne.n	8003d78 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d14:	4b1d      	ldr	r3, [pc, #116]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	3301      	adds	r3, #1
 8003d20:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d10c      	bne.n	8003d42 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d28:	4a1a      	ldr	r2, [pc, #104]	; (8003d94 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d30:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d32:	68d2      	ldr	r2, [r2, #12]
 8003d34:	0a12      	lsrs	r2, r2, #8
 8003d36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	617b      	str	r3, [r7, #20]
      break;
 8003d40:	e00c      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d42:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4a:	4a10      	ldr	r2, [pc, #64]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d4c:	68d2      	ldr	r2, [r2, #12]
 8003d4e:	0a12      	lsrs	r2, r2, #8
 8003d50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d54:	fb02 f303 	mul.w	r3, r2, r3
 8003d58:	617b      	str	r3, [r7, #20]
      break;
 8003d5a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	0e5b      	lsrs	r3, r3, #25
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	3301      	adds	r3, #1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	e001      	b.n	8003d7c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d7c:	693b      	ldr	r3, [r7, #16]
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	371c      	adds	r7, #28
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	00f42400 	.word	0x00f42400
 8003d94:	016e3600 	.word	0x016e3600

08003d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000000 	.word	0x20000000

08003db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003db4:	f7ff fff0 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	0a1b      	lsrs	r3, r3, #8
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4904      	ldr	r1, [pc, #16]	; (8003dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	f003 031f 	and.w	r3, r3, #31
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	0800d65c 	.word	0x0800d65c

08003ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003de0:	f7ff ffda 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003de4:	4602      	mov	r2, r0
 8003de6:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	0adb      	lsrs	r3, r3, #11
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	4904      	ldr	r1, [pc, #16]	; (8003e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003df2:	5ccb      	ldrb	r3, [r1, r3]
 8003df4:	f003 031f 	and.w	r3, r3, #31
 8003df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40021000 	.word	0x40021000
 8003e04:	0800d65c 	.word	0x0800d65c

08003e08 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	220f      	movs	r2, #15
 8003e16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0203 	and.w	r2, r3, #3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e3c:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	08db      	lsrs	r3, r3, #3
 8003e42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <HAL_RCC_GetClockConfig+0x60>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 020f 	and.w	r2, r3, #15
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	601a      	str	r2, [r3, #0]
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40021000 	.word	0x40021000
 8003e68:	40022000 	.word	0x40022000

08003e6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e72:	4b1e      	ldr	r3, [pc, #120]	; (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	f003 0303 	and.w	r3, r3, #3
 8003e7a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	091b      	lsrs	r3, r3, #4
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	3301      	adds	r3, #1
 8003e88:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	2b03      	cmp	r3, #3
 8003e8e:	d10c      	bne.n	8003eaa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e90:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e98:	4a14      	ldr	r2, [pc, #80]	; (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e9a:	68d2      	ldr	r2, [r2, #12]
 8003e9c:	0a12      	lsrs	r2, r2, #8
 8003e9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	617b      	str	r3, [r7, #20]
    break;
 8003ea8:	e00c      	b.n	8003ec4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003eaa:	4a12      	ldr	r2, [pc, #72]	; (8003ef4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	4a0e      	ldr	r2, [pc, #56]	; (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eb4:	68d2      	ldr	r2, [r2, #12]
 8003eb6:	0a12      	lsrs	r2, r2, #8
 8003eb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
    break;
 8003ec2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ec4:	4b09      	ldr	r3, [pc, #36]	; (8003eec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	0e5b      	lsrs	r3, r3, #25
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	3301      	adds	r3, #1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003edc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ede:	687b      	ldr	r3, [r7, #4]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	371c      	adds	r7, #28
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	016e3600 	.word	0x016e3600
 8003ef4:	00f42400 	.word	0x00f42400

08003ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f00:	2300      	movs	r3, #0
 8003f02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f04:	2300      	movs	r3, #0
 8003f06:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8098 	beq.w	8004046 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1a:	4b43      	ldr	r3, [pc, #268]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10d      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f26:	4b40      	ldr	r3, [pc, #256]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4a3f      	ldr	r2, [pc, #252]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6593      	str	r3, [r2, #88]	; 0x58
 8003f32:	4b3d      	ldr	r3, [pc, #244]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	60bb      	str	r3, [r7, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f42:	4b3a      	ldr	r3, [pc, #232]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a39      	ldr	r2, [pc, #228]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f4e:	f7fe fe79 	bl	8002c44 <HAL_GetTick>
 8003f52:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f54:	e009      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f56:	f7fe fe75 	bl	8002c44 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d902      	bls.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	74fb      	strb	r3, [r7, #19]
        break;
 8003f68:	e005      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f6a:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0ef      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d159      	bne.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f7c:	4b2a      	ldr	r3, [pc, #168]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f86:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d01e      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d019      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f98:	4b23      	ldr	r3, [pc, #140]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003faa:	4a1f      	ldr	r2, [pc, #124]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	4a1b      	ldr	r2, [pc, #108]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fc4:	4a18      	ldr	r2, [pc, #96]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d016      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fe35 	bl	8002c44 <HAL_GetTick>
 8003fda:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fdc:	e00b      	b.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe fe31 	bl	8002c44 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d902      	bls.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	74fb      	strb	r3, [r7, #19]
            break;
 8003ff4:	e006      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d0ec      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004010:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004018:	4903      	ldr	r1, [pc, #12]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004020:	e008      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	74bb      	strb	r3, [r7, #18]
 8004026:	e005      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004028:	40021000 	.word	0x40021000
 800402c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004034:	7c7b      	ldrb	r3, [r7, #17]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d105      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800403a:	4ba7      	ldr	r3, [pc, #668]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403e:	4aa6      	ldr	r2, [pc, #664]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004044:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0301 	and.w	r3, r3, #1
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004052:	4ba1      	ldr	r3, [pc, #644]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f023 0203 	bic.w	r2, r3, #3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	499d      	ldr	r1, [pc, #628]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004074:	4b98      	ldr	r3, [pc, #608]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f023 020c 	bic.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	4995      	ldr	r1, [pc, #596]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0304 	and.w	r3, r3, #4
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004096:	4b90      	ldr	r3, [pc, #576]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	498c      	ldr	r1, [pc, #560]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040b8:	4b87      	ldr	r3, [pc, #540]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	4984      	ldr	r1, [pc, #528]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040da:	4b7f      	ldr	r3, [pc, #508]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	497b      	ldr	r1, [pc, #492]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040fc:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	4973      	ldr	r1, [pc, #460]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411e:	4b6e      	ldr	r3, [pc, #440]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	69db      	ldr	r3, [r3, #28]
 800412c:	496a      	ldr	r1, [pc, #424]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004140:	4b65      	ldr	r3, [pc, #404]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4962      	ldr	r1, [pc, #392]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004162:	4b5d      	ldr	r3, [pc, #372]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	4959      	ldr	r1, [pc, #356]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004184:	4b54      	ldr	r3, [pc, #336]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004186:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800418a:	f023 0203 	bic.w	r2, r3, #3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	4951      	ldr	r1, [pc, #324]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041a6:	4b4c      	ldr	r3, [pc, #304]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	4948      	ldr	r1, [pc, #288]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d015      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	4940      	ldr	r1, [pc, #256]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041e6:	d105      	bne.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e8:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a3a      	ldr	r2, [pc, #232]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d015      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004200:	4b35      	ldr	r3, [pc, #212]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	4932      	ldr	r1, [pc, #200]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800421e:	d105      	bne.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004220:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800422a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004234:	2b00      	cmp	r3, #0
 8004236:	d015      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	4924      	ldr	r1, [pc, #144]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004256:	d105      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004258:	4b1f      	ldr	r3, [pc, #124]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	4a1e      	ldr	r2, [pc, #120]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004262:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d015      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004270:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004276:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	4916      	ldr	r1, [pc, #88]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004280:	4313      	orrs	r3, r2
 8004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004290:	4b11      	ldr	r3, [pc, #68]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800429a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d019      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4908      	ldr	r1, [pc, #32]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042c6:	d109      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4a02      	ldr	r2, [pc, #8]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d2:	60d3      	str	r3, [r2, #12]
 80042d4:	e002      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042e8:	4b29      	ldr	r3, [pc, #164]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	4926      	ldr	r1, [pc, #152]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004306:	d105      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004308:	4b21      	ldr	r3, [pc, #132]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	4a20      	ldr	r2, [pc, #128]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800430e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004312:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d015      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004320:	4b1b      	ldr	r3, [pc, #108]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	4918      	ldr	r1, [pc, #96]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d105      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004340:	4b13      	ldr	r3, [pc, #76]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a12      	ldr	r2, [pc, #72]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800434a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d015      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004358:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800435a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800435e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004366:	490a      	ldr	r1, [pc, #40]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004372:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004376:	d105      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	4a04      	ldr	r2, [pc, #16]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800437e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004382:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004384:	7cbb      	ldrb	r3, [r7, #18]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3718      	adds	r7, #24
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	40021000 	.word	0x40021000

08004394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e049      	b.n	800443a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d106      	bne.n	80043c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7fe f920 	bl	8002600 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2202      	movs	r2, #2
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3304      	adds	r3, #4
 80043d0:	4619      	mov	r1, r3
 80043d2:	4610      	mov	r0, r2
 80043d4:	f000 ff68 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b01      	cmp	r3, #1
 8004456:	d001      	beq.n	800445c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e04c      	b.n	80044f6 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a26      	ldr	r2, [pc, #152]	; (8004504 <HAL_TIM_Base_Start+0xc0>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d022      	beq.n	80044b4 <HAL_TIM_Base_Start+0x70>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004476:	d01d      	beq.n	80044b4 <HAL_TIM_Base_Start+0x70>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a22      	ldr	r2, [pc, #136]	; (8004508 <HAL_TIM_Base_Start+0xc4>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d018      	beq.n	80044b4 <HAL_TIM_Base_Start+0x70>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a21      	ldr	r2, [pc, #132]	; (800450c <HAL_TIM_Base_Start+0xc8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d013      	beq.n	80044b4 <HAL_TIM_Base_Start+0x70>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <HAL_TIM_Base_Start+0xcc>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00e      	beq.n	80044b4 <HAL_TIM_Base_Start+0x70>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <HAL_TIM_Base_Start+0xd0>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d009      	beq.n	80044b4 <HAL_TIM_Base_Start+0x70>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a1c      	ldr	r2, [pc, #112]	; (8004518 <HAL_TIM_Base_Start+0xd4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d004      	beq.n	80044b4 <HAL_TIM_Base_Start+0x70>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1b      	ldr	r2, [pc, #108]	; (800451c <HAL_TIM_Base_Start+0xd8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d115      	bne.n	80044e0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	689a      	ldr	r2, [r3, #8]
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <HAL_TIM_Base_Start+0xdc>)
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b06      	cmp	r3, #6
 80044c4:	d015      	beq.n	80044f2 <HAL_TIM_Base_Start+0xae>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044cc:	d011      	beq.n	80044f2 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f042 0201 	orr.w	r2, r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044de:	e008      	b.n	80044f2 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
 80044f0:	e000      	b.n	80044f4 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40012c00 	.word	0x40012c00
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800
 8004510:	40000c00 	.word	0x40000c00
 8004514:	40013400 	.word	0x40013400
 8004518:	40014000 	.word	0x40014000
 800451c:	40015000 	.word	0x40015000
 8004520:	00010007 	.word	0x00010007

08004524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004532:	b2db      	uxtb	r3, r3
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e054      	b.n	80045e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a26      	ldr	r2, [pc, #152]	; (80045f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d022      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004566:	d01d      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a22      	ldr	r2, [pc, #136]	; (80045f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d018      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a21      	ldr	r2, [pc, #132]	; (80045fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d013      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1f      	ldr	r2, [pc, #124]	; (8004600 <HAL_TIM_Base_Start_IT+0xdc>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d00e      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <HAL_TIM_Base_Start_IT+0xe0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d009      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1c      	ldr	r2, [pc, #112]	; (8004608 <HAL_TIM_Base_Start_IT+0xe4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <HAL_TIM_Base_Start_IT+0x80>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1b      	ldr	r2, [pc, #108]	; (800460c <HAL_TIM_Base_Start_IT+0xe8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d115      	bne.n	80045d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	4b19      	ldr	r3, [pc, #100]	; (8004610 <HAL_TIM_Base_Start_IT+0xec>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d015      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0xbe>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045bc:	d011      	beq.n	80045e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f042 0201 	orr.w	r2, r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ce:	e008      	b.n	80045e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f042 0201 	orr.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	e000      	b.n	80045e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40000800 	.word	0x40000800
 8004600:	40000c00 	.word	0x40000c00
 8004604:	40013400 	.word	0x40013400
 8004608:	40014000 	.word	0x40014000
 800460c:	40015000 	.word	0x40015000
 8004610:	00010007 	.word	0x00010007

08004614 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e049      	b.n	80046ba <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800462c:	b2db      	uxtb	r3, r3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d106      	bne.n	8004640 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f841 	bl	80046c2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3304      	adds	r3, #4
 8004650:	4619      	mov	r1, r3
 8004652:	4610      	mov	r0, r2
 8004654:	f000 fe28 	bl	80052a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b083      	sub	sp, #12
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
	...

080046d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d109      	bne.n	80046fc <HAL_TIM_PWM_Start+0x24>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e03c      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d109      	bne.n	8004716 <HAL_TIM_PWM_Start+0x3e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	bf14      	ite	ne
 800470e:	2301      	movne	r3, #1
 8004710:	2300      	moveq	r3, #0
 8004712:	b2db      	uxtb	r3, r3
 8004714:	e02f      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d109      	bne.n	8004730 <HAL_TIM_PWM_Start+0x58>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	bf14      	ite	ne
 8004728:	2301      	movne	r3, #1
 800472a:	2300      	moveq	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e022      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d109      	bne.n	800474a <HAL_TIM_PWM_Start+0x72>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b01      	cmp	r3, #1
 8004740:	bf14      	ite	ne
 8004742:	2301      	movne	r3, #1
 8004744:	2300      	moveq	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e015      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	2b10      	cmp	r3, #16
 800474e:	d109      	bne.n	8004764 <HAL_TIM_PWM_Start+0x8c>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	bf14      	ite	ne
 800475c:	2301      	movne	r3, #1
 800475e:	2300      	moveq	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	e008      	b.n	8004776 <HAL_TIM_PWM_Start+0x9e>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e0a6      	b.n	80048cc <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Start+0xb6>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800478c:	e023      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b04      	cmp	r3, #4
 8004792:	d104      	bne.n	800479e <HAL_TIM_PWM_Start+0xc6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800479c:	e01b      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d104      	bne.n	80047ae <HAL_TIM_PWM_Start+0xd6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047ac:	e013      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b0c      	cmp	r3, #12
 80047b2:	d104      	bne.n	80047be <HAL_TIM_PWM_Start+0xe6>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2202      	movs	r2, #2
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047bc:	e00b      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d104      	bne.n	80047ce <HAL_TIM_PWM_Start+0xf6>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2202      	movs	r2, #2
 80047c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047cc:	e003      	b.n	80047d6 <HAL_TIM_PWM_Start+0xfe>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2202      	movs	r2, #2
 80047d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2201      	movs	r2, #1
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 f9dc 	bl	8005b9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3a      	ldr	r2, [pc, #232]	; (80048d4 <HAL_TIM_PWM_Start+0x1fc>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d018      	beq.n	8004820 <HAL_TIM_PWM_Start+0x148>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a39      	ldr	r2, [pc, #228]	; (80048d8 <HAL_TIM_PWM_Start+0x200>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d013      	beq.n	8004820 <HAL_TIM_PWM_Start+0x148>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a37      	ldr	r2, [pc, #220]	; (80048dc <HAL_TIM_PWM_Start+0x204>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_TIM_PWM_Start+0x148>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a36      	ldr	r2, [pc, #216]	; (80048e0 <HAL_TIM_PWM_Start+0x208>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d009      	beq.n	8004820 <HAL_TIM_PWM_Start+0x148>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a34      	ldr	r2, [pc, #208]	; (80048e4 <HAL_TIM_PWM_Start+0x20c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_PWM_Start+0x148>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a33      	ldr	r2, [pc, #204]	; (80048e8 <HAL_TIM_PWM_Start+0x210>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d101      	bne.n	8004824 <HAL_TIM_PWM_Start+0x14c>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <HAL_TIM_PWM_Start+0x14e>
 8004824:	2300      	movs	r3, #0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004838:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a25      	ldr	r2, [pc, #148]	; (80048d4 <HAL_TIM_PWM_Start+0x1fc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d022      	beq.n	800488a <HAL_TIM_PWM_Start+0x1b2>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484c:	d01d      	beq.n	800488a <HAL_TIM_PWM_Start+0x1b2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a26      	ldr	r2, [pc, #152]	; (80048ec <HAL_TIM_PWM_Start+0x214>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d018      	beq.n	800488a <HAL_TIM_PWM_Start+0x1b2>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <HAL_TIM_PWM_Start+0x218>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d013      	beq.n	800488a <HAL_TIM_PWM_Start+0x1b2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <HAL_TIM_PWM_Start+0x21c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00e      	beq.n	800488a <HAL_TIM_PWM_Start+0x1b2>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a19      	ldr	r2, [pc, #100]	; (80048d8 <HAL_TIM_PWM_Start+0x200>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d009      	beq.n	800488a <HAL_TIM_PWM_Start+0x1b2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a18      	ldr	r2, [pc, #96]	; (80048dc <HAL_TIM_PWM_Start+0x204>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d004      	beq.n	800488a <HAL_TIM_PWM_Start+0x1b2>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a18      	ldr	r2, [pc, #96]	; (80048e8 <HAL_TIM_PWM_Start+0x210>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d115      	bne.n	80048b6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	4b19      	ldr	r3, [pc, #100]	; (80048f8 <HAL_TIM_PWM_Start+0x220>)
 8004892:	4013      	ands	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b06      	cmp	r3, #6
 800489a:	d015      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x1f0>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a2:	d011      	beq.n	80048c8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048b4:	e008      	b.n	80048c8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0201 	orr.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	e000      	b.n	80048ca <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40013400 	.word	0x40013400
 80048dc:	40014000 	.word	0x40014000
 80048e0:	40014400 	.word	0x40014400
 80048e4:	40014800 	.word	0x40014800
 80048e8:	40015000 	.word	0x40015000
 80048ec:	40000400 	.word	0x40000400
 80048f0:	40000800 	.word	0x40000800
 80048f4:	40000c00 	.word	0x40000c00
 80048f8:	00010007 	.word	0x00010007

080048fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e097      	b.n	8004a40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d106      	bne.n	800492a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f7fd fea5 	bl	8002674 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2202      	movs	r2, #2
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004940:	f023 0307 	bic.w	r3, r3, #7
 8004944:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	3304      	adds	r3, #4
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f000 fca9 	bl	80052a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497e:	f023 0303 	bic.w	r3, r3, #3
 8004982:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	4313      	orrs	r3, r2
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800499c:	f023 030c 	bic.w	r3, r3, #12
 80049a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	021b      	lsls	r3, r3, #8
 80049b8:	4313      	orrs	r3, r2
 80049ba:	693a      	ldr	r2, [r7, #16]
 80049bc:	4313      	orrs	r3, r2
 80049be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	011a      	lsls	r2, r3, #4
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	031b      	lsls	r3, r3, #12
 80049cc:	4313      	orrs	r3, r2
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	4313      	orrs	r3, r2
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2201      	movs	r2, #1
 8004a12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d110      	bne.n	8004a9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d102      	bne.n	8004a84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a7e:	7b7b      	ldrb	r3, [r7, #13]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d001      	beq.n	8004a88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e069      	b.n	8004b5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a98:	e031      	b.n	8004afe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d110      	bne.n	8004ac2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004aa0:	7bbb      	ldrb	r3, [r7, #14]
 8004aa2:	2b01      	cmp	r3, #1
 8004aa4:	d102      	bne.n	8004aac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004aa6:	7b3b      	ldrb	r3, [r7, #12]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d001      	beq.n	8004ab0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e055      	b.n	8004b5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ac0:	e01d      	b.n	8004afe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d108      	bne.n	8004ada <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac8:	7bbb      	ldrb	r3, [r7, #14]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d105      	bne.n	8004ada <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ace:	7b7b      	ldrb	r3, [r7, #13]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d102      	bne.n	8004ada <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ad4:	7b3b      	ldrb	r3, [r7, #12]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d001      	beq.n	8004ade <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e03e      	b.n	8004b5c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2202      	movs	r2, #2
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2202      	movs	r2, #2
 8004aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2202      	movs	r2, #2
 8004af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_TIM_Encoder_Start+0xc4>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b04      	cmp	r3, #4
 8004b08:	d008      	beq.n	8004b1c <HAL_TIM_Encoder_Start+0xd4>
 8004b0a:	e00f      	b.n	8004b2c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f841 	bl	8005b9c <TIM_CCxChannelCmd>
      break;
 8004b1a:	e016      	b.n	8004b4a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2201      	movs	r2, #1
 8004b22:	2104      	movs	r1, #4
 8004b24:	4618      	mov	r0, r3
 8004b26:	f001 f839 	bl	8005b9c <TIM_CCxChannelCmd>
      break;
 8004b2a:	e00e      	b.n	8004b4a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2201      	movs	r2, #1
 8004b32:	2100      	movs	r1, #0
 8004b34:	4618      	mov	r0, r3
 8004b36:	f001 f831 	bl	8005b9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	2104      	movs	r1, #4
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 f82a 	bl	8005b9c <TIM_CCxChannelCmd>
      break;
 8004b48:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d020      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d01b      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0202 	mvn.w	r2, #2
 8004b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fb5c 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fb4e 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fb5f 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0304 	and.w	r3, r3, #4
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d020      	beq.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01b      	beq.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0204 	mvn.w	r2, #4
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fb36 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fb28 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fb39 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0308 	and.w	r3, r3, #8
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d020      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d01b      	beq.n	8004c60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0208 	mvn.w	r2, #8
 8004c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2204      	movs	r2, #4
 8004c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	69db      	ldr	r3, [r3, #28]
 8004c3e:	f003 0303 	and.w	r3, r3, #3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d003      	beq.n	8004c4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fb10 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8004c4c:	e005      	b.n	8004c5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fb02 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f000 fb13 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	f003 0310 	and.w	r3, r3, #16
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d020      	beq.n	8004cac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f003 0310 	and.w	r3, r3, #16
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d01b      	beq.n	8004cac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0210 	mvn.w	r2, #16
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2208      	movs	r2, #8
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 faea 	bl	800526c <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fadc 	bl	8005258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 faed 	bl	8005280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0201 	mvn.w	r2, #1
 8004cc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fd fb94 	bl	80023f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d104      	bne.n	8004ce4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f001 f8a9 	bl	8005e50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00c      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f001 f8a1 	bl	8005e64 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00c      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 faa7 	bl	8005294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00c      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f06f 0220 	mvn.w	r2, #32
 8004d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f001 f869 	bl	8005e3c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00c      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004d86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f001 f875 	bl	8005e78 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00c      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004daa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 f86d 	bl	8005e8c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00c      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f001 f865 	bl	8005ea0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00c      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f001 f85d 	bl	8005eb4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dfa:	bf00      	nop
 8004dfc:	3710      	adds	r7, #16
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
	...

08004e04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e0ff      	b.n	8005022 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b14      	cmp	r3, #20
 8004e2e:	f200 80f0 	bhi.w	8005012 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e32:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08005013 	.word	0x08005013
 8004e40:	08005013 	.word	0x08005013
 8004e44:	08005013 	.word	0x08005013
 8004e48:	08004ecd 	.word	0x08004ecd
 8004e4c:	08005013 	.word	0x08005013
 8004e50:	08005013 	.word	0x08005013
 8004e54:	08005013 	.word	0x08005013
 8004e58:	08004f0f 	.word	0x08004f0f
 8004e5c:	08005013 	.word	0x08005013
 8004e60:	08005013 	.word	0x08005013
 8004e64:	08005013 	.word	0x08005013
 8004e68:	08004f4f 	.word	0x08004f4f
 8004e6c:	08005013 	.word	0x08005013
 8004e70:	08005013 	.word	0x08005013
 8004e74:	08005013 	.word	0x08005013
 8004e78:	08004f91 	.word	0x08004f91
 8004e7c:	08005013 	.word	0x08005013
 8004e80:	08005013 	.word	0x08005013
 8004e84:	08005013 	.word	0x08005013
 8004e88:	08004fd1 	.word	0x08004fd1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fabc 	bl	8005410 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	699a      	ldr	r2, [r3, #24]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0208 	orr.w	r2, r2, #8
 8004ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0204 	bic.w	r2, r2, #4
 8004eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6999      	ldr	r1, [r3, #24]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	619a      	str	r2, [r3, #24]
      break;
 8004eca:	e0a5      	b.n	8005018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fb36 	bl	8005544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	699a      	ldr	r2, [r3, #24]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6999      	ldr	r1, [r3, #24]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	021a      	lsls	r2, r3, #8
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	619a      	str	r2, [r3, #24]
      break;
 8004f0c:	e084      	b.n	8005018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68b9      	ldr	r1, [r7, #8]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f000 fba9 	bl	800566c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	69da      	ldr	r2, [r3, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0208 	orr.w	r2, r2, #8
 8004f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f022 0204 	bic.w	r2, r2, #4
 8004f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69d9      	ldr	r1, [r3, #28]
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	61da      	str	r2, [r3, #28]
      break;
 8004f4c:	e064      	b.n	8005018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68b9      	ldr	r1, [r7, #8]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fc1b 	bl	8005790 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69da      	ldr	r2, [r3, #28]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69d9      	ldr	r1, [r3, #28]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	021a      	lsls	r2, r3, #8
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	61da      	str	r2, [r3, #28]
      break;
 8004f8e:	e043      	b.n	8005018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f000 fc8e 	bl	80058b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f042 0208 	orr.w	r2, r2, #8
 8004faa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0204 	bic.w	r2, r2, #4
 8004fba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	691a      	ldr	r2, [r3, #16]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004fce:	e023      	b.n	8005018 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68b9      	ldr	r1, [r7, #8]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fcd8 	bl	800598c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ffa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	021a      	lsls	r2, r3, #8
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005010:	e002      	b.n	8005018 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	75fb      	strb	r3, [r7, #23]
      break;
 8005016:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005020:	7dfb      	ldrb	r3, [r7, #23]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop

0800502c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_TIM_ConfigClockSource+0x1c>
 8005044:	2302      	movs	r3, #2
 8005046:	e0f6      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x20a>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005066:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800506a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005072:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a6f      	ldr	r2, [pc, #444]	; (8005240 <HAL_TIM_ConfigClockSource+0x214>)
 8005082:	4293      	cmp	r3, r2
 8005084:	f000 80c1 	beq.w	800520a <HAL_TIM_ConfigClockSource+0x1de>
 8005088:	4a6d      	ldr	r2, [pc, #436]	; (8005240 <HAL_TIM_ConfigClockSource+0x214>)
 800508a:	4293      	cmp	r3, r2
 800508c:	f200 80c6 	bhi.w	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 8005090:	4a6c      	ldr	r2, [pc, #432]	; (8005244 <HAL_TIM_ConfigClockSource+0x218>)
 8005092:	4293      	cmp	r3, r2
 8005094:	f000 80b9 	beq.w	800520a <HAL_TIM_ConfigClockSource+0x1de>
 8005098:	4a6a      	ldr	r2, [pc, #424]	; (8005244 <HAL_TIM_ConfigClockSource+0x218>)
 800509a:	4293      	cmp	r3, r2
 800509c:	f200 80be 	bhi.w	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 80050a0:	4a69      	ldr	r2, [pc, #420]	; (8005248 <HAL_TIM_ConfigClockSource+0x21c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	f000 80b1 	beq.w	800520a <HAL_TIM_ConfigClockSource+0x1de>
 80050a8:	4a67      	ldr	r2, [pc, #412]	; (8005248 <HAL_TIM_ConfigClockSource+0x21c>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	f200 80b6 	bhi.w	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 80050b0:	4a66      	ldr	r2, [pc, #408]	; (800524c <HAL_TIM_ConfigClockSource+0x220>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	f000 80a9 	beq.w	800520a <HAL_TIM_ConfigClockSource+0x1de>
 80050b8:	4a64      	ldr	r2, [pc, #400]	; (800524c <HAL_TIM_ConfigClockSource+0x220>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	f200 80ae 	bhi.w	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 80050c0:	4a63      	ldr	r2, [pc, #396]	; (8005250 <HAL_TIM_ConfigClockSource+0x224>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	f000 80a1 	beq.w	800520a <HAL_TIM_ConfigClockSource+0x1de>
 80050c8:	4a61      	ldr	r2, [pc, #388]	; (8005250 <HAL_TIM_ConfigClockSource+0x224>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	f200 80a6 	bhi.w	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 80050d0:	4a60      	ldr	r2, [pc, #384]	; (8005254 <HAL_TIM_ConfigClockSource+0x228>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	f000 8099 	beq.w	800520a <HAL_TIM_ConfigClockSource+0x1de>
 80050d8:	4a5e      	ldr	r2, [pc, #376]	; (8005254 <HAL_TIM_ConfigClockSource+0x228>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	f200 809e 	bhi.w	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 80050e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80050e4:	f000 8091 	beq.w	800520a <HAL_TIM_ConfigClockSource+0x1de>
 80050e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80050ec:	f200 8096 	bhi.w	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 80050f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f4:	f000 8089 	beq.w	800520a <HAL_TIM_ConfigClockSource+0x1de>
 80050f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050fc:	f200 808e 	bhi.w	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 8005100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005104:	d03e      	beq.n	8005184 <HAL_TIM_ConfigClockSource+0x158>
 8005106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510a:	f200 8087 	bhi.w	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 800510e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005112:	f000 8086 	beq.w	8005222 <HAL_TIM_ConfigClockSource+0x1f6>
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511a:	d87f      	bhi.n	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 800511c:	2b70      	cmp	r3, #112	; 0x70
 800511e:	d01a      	beq.n	8005156 <HAL_TIM_ConfigClockSource+0x12a>
 8005120:	2b70      	cmp	r3, #112	; 0x70
 8005122:	d87b      	bhi.n	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 8005124:	2b60      	cmp	r3, #96	; 0x60
 8005126:	d050      	beq.n	80051ca <HAL_TIM_ConfigClockSource+0x19e>
 8005128:	2b60      	cmp	r3, #96	; 0x60
 800512a:	d877      	bhi.n	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 800512c:	2b50      	cmp	r3, #80	; 0x50
 800512e:	d03c      	beq.n	80051aa <HAL_TIM_ConfigClockSource+0x17e>
 8005130:	2b50      	cmp	r3, #80	; 0x50
 8005132:	d873      	bhi.n	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 8005134:	2b40      	cmp	r3, #64	; 0x40
 8005136:	d058      	beq.n	80051ea <HAL_TIM_ConfigClockSource+0x1be>
 8005138:	2b40      	cmp	r3, #64	; 0x40
 800513a:	d86f      	bhi.n	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 800513c:	2b30      	cmp	r3, #48	; 0x30
 800513e:	d064      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x1de>
 8005140:	2b30      	cmp	r3, #48	; 0x30
 8005142:	d86b      	bhi.n	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 8005144:	2b20      	cmp	r3, #32
 8005146:	d060      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x1de>
 8005148:	2b20      	cmp	r3, #32
 800514a:	d867      	bhi.n	800521c <HAL_TIM_ConfigClockSource+0x1f0>
 800514c:	2b00      	cmp	r3, #0
 800514e:	d05c      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x1de>
 8005150:	2b10      	cmp	r3, #16
 8005152:	d05a      	beq.n	800520a <HAL_TIM_ConfigClockSource+0x1de>
 8005154:	e062      	b.n	800521c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005166:	f000 fcf9 	bl	8005b5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005178:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	609a      	str	r2, [r3, #8]
      break;
 8005182:	e04f      	b.n	8005224 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005194:	f000 fce2 	bl	8005b5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689a      	ldr	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051a6:	609a      	str	r2, [r3, #8]
      break;
 80051a8:	e03c      	b.n	8005224 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b6:	461a      	mov	r2, r3
 80051b8:	f000 fc54 	bl	8005a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2150      	movs	r1, #80	; 0x50
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fcad 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 80051c8:	e02c      	b.n	8005224 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051d6:	461a      	mov	r2, r3
 80051d8:	f000 fc73 	bl	8005ac2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2160      	movs	r1, #96	; 0x60
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 fc9d 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 80051e8:	e01c      	b.n	8005224 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f6:	461a      	mov	r2, r3
 80051f8:	f000 fc34 	bl	8005a64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2140      	movs	r1, #64	; 0x40
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fc8d 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 8005208:	e00c      	b.n	8005224 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f000 fc84 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 800521a:	e003      	b.n	8005224 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	73fb      	strb	r3, [r7, #15]
      break;
 8005220:	e000      	b.n	8005224 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005222:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005234:	7bfb      	ldrb	r3, [r7, #15]
}
 8005236:	4618      	mov	r0, r3
 8005238:	3710      	adds	r7, #16
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	bf00      	nop
 8005240:	00100070 	.word	0x00100070
 8005244:	00100060 	.word	0x00100060
 8005248:	00100050 	.word	0x00100050
 800524c:	00100040 	.word	0x00100040
 8005250:	00100030 	.word	0x00100030
 8005254:	00100020 	.word	0x00100020

08005258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr

08005294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a4c      	ldr	r2, [pc, #304]	; (80053ec <TIM_Base_SetConfig+0x144>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d017      	beq.n	80052f0 <TIM_Base_SetConfig+0x48>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c6:	d013      	beq.n	80052f0 <TIM_Base_SetConfig+0x48>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a49      	ldr	r2, [pc, #292]	; (80053f0 <TIM_Base_SetConfig+0x148>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00f      	beq.n	80052f0 <TIM_Base_SetConfig+0x48>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a48      	ldr	r2, [pc, #288]	; (80053f4 <TIM_Base_SetConfig+0x14c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00b      	beq.n	80052f0 <TIM_Base_SetConfig+0x48>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a47      	ldr	r2, [pc, #284]	; (80053f8 <TIM_Base_SetConfig+0x150>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d007      	beq.n	80052f0 <TIM_Base_SetConfig+0x48>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a46      	ldr	r2, [pc, #280]	; (80053fc <TIM_Base_SetConfig+0x154>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_Base_SetConfig+0x48>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a45      	ldr	r2, [pc, #276]	; (8005400 <TIM_Base_SetConfig+0x158>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d108      	bne.n	8005302 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a39      	ldr	r2, [pc, #228]	; (80053ec <TIM_Base_SetConfig+0x144>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d023      	beq.n	8005352 <TIM_Base_SetConfig+0xaa>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005310:	d01f      	beq.n	8005352 <TIM_Base_SetConfig+0xaa>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a36      	ldr	r2, [pc, #216]	; (80053f0 <TIM_Base_SetConfig+0x148>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d01b      	beq.n	8005352 <TIM_Base_SetConfig+0xaa>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a35      	ldr	r2, [pc, #212]	; (80053f4 <TIM_Base_SetConfig+0x14c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d017      	beq.n	8005352 <TIM_Base_SetConfig+0xaa>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a34      	ldr	r2, [pc, #208]	; (80053f8 <TIM_Base_SetConfig+0x150>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d013      	beq.n	8005352 <TIM_Base_SetConfig+0xaa>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a33      	ldr	r2, [pc, #204]	; (80053fc <TIM_Base_SetConfig+0x154>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00f      	beq.n	8005352 <TIM_Base_SetConfig+0xaa>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a33      	ldr	r2, [pc, #204]	; (8005404 <TIM_Base_SetConfig+0x15c>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d00b      	beq.n	8005352 <TIM_Base_SetConfig+0xaa>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a32      	ldr	r2, [pc, #200]	; (8005408 <TIM_Base_SetConfig+0x160>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d007      	beq.n	8005352 <TIM_Base_SetConfig+0xaa>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a31      	ldr	r2, [pc, #196]	; (800540c <TIM_Base_SetConfig+0x164>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d003      	beq.n	8005352 <TIM_Base_SetConfig+0xaa>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2c      	ldr	r2, [pc, #176]	; (8005400 <TIM_Base_SetConfig+0x158>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d108      	bne.n	8005364 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a18      	ldr	r2, [pc, #96]	; (80053ec <TIM_Base_SetConfig+0x144>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d013      	beq.n	80053b8 <TIM_Base_SetConfig+0x110>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a1a      	ldr	r2, [pc, #104]	; (80053fc <TIM_Base_SetConfig+0x154>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00f      	beq.n	80053b8 <TIM_Base_SetConfig+0x110>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a1a      	ldr	r2, [pc, #104]	; (8005404 <TIM_Base_SetConfig+0x15c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00b      	beq.n	80053b8 <TIM_Base_SetConfig+0x110>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a19      	ldr	r2, [pc, #100]	; (8005408 <TIM_Base_SetConfig+0x160>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d007      	beq.n	80053b8 <TIM_Base_SetConfig+0x110>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a18      	ldr	r2, [pc, #96]	; (800540c <TIM_Base_SetConfig+0x164>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d003      	beq.n	80053b8 <TIM_Base_SetConfig+0x110>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a13      	ldr	r2, [pc, #76]	; (8005400 <TIM_Base_SetConfig+0x158>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d103      	bne.n	80053c0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d105      	bne.n	80053de <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f023 0201 	bic.w	r2, r3, #1
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	611a      	str	r2, [r3, #16]
  }
}
 80053de:	bf00      	nop
 80053e0:	3714      	adds	r7, #20
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800
 80053f8:	40000c00 	.word	0x40000c00
 80053fc:	40013400 	.word	0x40013400
 8005400:	40015000 	.word	0x40015000
 8005404:	40014000 	.word	0x40014000
 8005408:	40014400 	.word	0x40014400
 800540c:	40014800 	.word	0x40014800

08005410 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f023 0201 	bic.w	r2, r3, #1
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699b      	ldr	r3, [r3, #24]
 8005436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800543e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0303 	bic.w	r3, r3, #3
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 0302 	bic.w	r3, r3, #2
 800545c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	4313      	orrs	r3, r2
 8005466:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a30      	ldr	r2, [pc, #192]	; (800552c <TIM_OC1_SetConfig+0x11c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <TIM_OC1_SetConfig+0x88>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <TIM_OC1_SetConfig+0x120>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00f      	beq.n	8005498 <TIM_OC1_SetConfig+0x88>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a2e      	ldr	r2, [pc, #184]	; (8005534 <TIM_OC1_SetConfig+0x124>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00b      	beq.n	8005498 <TIM_OC1_SetConfig+0x88>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a2d      	ldr	r2, [pc, #180]	; (8005538 <TIM_OC1_SetConfig+0x128>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <TIM_OC1_SetConfig+0x88>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a2c      	ldr	r2, [pc, #176]	; (800553c <TIM_OC1_SetConfig+0x12c>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d003      	beq.n	8005498 <TIM_OC1_SetConfig+0x88>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <TIM_OC1_SetConfig+0x130>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d10c      	bne.n	80054b2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 0308 	bic.w	r3, r3, #8
 800549e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f023 0304 	bic.w	r3, r3, #4
 80054b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a1d      	ldr	r2, [pc, #116]	; (800552c <TIM_OC1_SetConfig+0x11c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <TIM_OC1_SetConfig+0xd2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a1c      	ldr	r2, [pc, #112]	; (8005530 <TIM_OC1_SetConfig+0x120>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00f      	beq.n	80054e2 <TIM_OC1_SetConfig+0xd2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a1b      	ldr	r2, [pc, #108]	; (8005534 <TIM_OC1_SetConfig+0x124>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00b      	beq.n	80054e2 <TIM_OC1_SetConfig+0xd2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a1a      	ldr	r2, [pc, #104]	; (8005538 <TIM_OC1_SetConfig+0x128>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d007      	beq.n	80054e2 <TIM_OC1_SetConfig+0xd2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a19      	ldr	r2, [pc, #100]	; (800553c <TIM_OC1_SetConfig+0x12c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <TIM_OC1_SetConfig+0xd2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a18      	ldr	r2, [pc, #96]	; (8005540 <TIM_OC1_SetConfig+0x130>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d111      	bne.n	8005506 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	4313      	orrs	r3, r2
 8005504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	693a      	ldr	r2, [r7, #16]
 800550a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	621a      	str	r2, [r3, #32]
}
 8005520:	bf00      	nop
 8005522:	371c      	adds	r7, #28
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	40012c00 	.word	0x40012c00
 8005530:	40013400 	.word	0x40013400
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800
 8005540:	40015000 	.word	0x40015000

08005544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	f023 0210 	bic.w	r2, r3, #16
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005572:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0320 	bic.w	r3, r3, #32
 8005592:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	4313      	orrs	r3, r2
 800559e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a2c      	ldr	r2, [pc, #176]	; (8005654 <TIM_OC2_SetConfig+0x110>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d007      	beq.n	80055b8 <TIM_OC2_SetConfig+0x74>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a2b      	ldr	r2, [pc, #172]	; (8005658 <TIM_OC2_SetConfig+0x114>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d003      	beq.n	80055b8 <TIM_OC2_SetConfig+0x74>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a2a      	ldr	r2, [pc, #168]	; (800565c <TIM_OC2_SetConfig+0x118>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d10d      	bne.n	80055d4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a1f      	ldr	r2, [pc, #124]	; (8005654 <TIM_OC2_SetConfig+0x110>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <TIM_OC2_SetConfig+0xc0>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a1e      	ldr	r2, [pc, #120]	; (8005658 <TIM_OC2_SetConfig+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d00f      	beq.n	8005604 <TIM_OC2_SetConfig+0xc0>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a1e      	ldr	r2, [pc, #120]	; (8005660 <TIM_OC2_SetConfig+0x11c>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_OC2_SetConfig+0xc0>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <TIM_OC2_SetConfig+0x120>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_OC2_SetConfig+0xc0>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a1c      	ldr	r2, [pc, #112]	; (8005668 <TIM_OC2_SetConfig+0x124>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_OC2_SetConfig+0xc0>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a17      	ldr	r2, [pc, #92]	; (800565c <TIM_OC2_SetConfig+0x118>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d113      	bne.n	800562c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800560a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005612:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	4313      	orrs	r3, r2
 800562a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	697a      	ldr	r2, [r7, #20]
 8005644:	621a      	str	r2, [r3, #32]
}
 8005646:	bf00      	nop
 8005648:	371c      	adds	r7, #28
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	40012c00 	.word	0x40012c00
 8005658:	40013400 	.word	0x40013400
 800565c:	40015000 	.word	0x40015000
 8005660:	40014000 	.word	0x40014000
 8005664:	40014400 	.word	0x40014400
 8005668:	40014800 	.word	0x40014800

0800566c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	69db      	ldr	r3, [r3, #28]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0303 	bic.w	r3, r3, #3
 80056a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68fa      	ldr	r2, [r7, #12]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	021b      	lsls	r3, r3, #8
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2b      	ldr	r2, [pc, #172]	; (8005778 <TIM_OC3_SetConfig+0x10c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d007      	beq.n	80056de <TIM_OC3_SetConfig+0x72>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2a      	ldr	r2, [pc, #168]	; (800577c <TIM_OC3_SetConfig+0x110>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d003      	beq.n	80056de <TIM_OC3_SetConfig+0x72>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a29      	ldr	r2, [pc, #164]	; (8005780 <TIM_OC3_SetConfig+0x114>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d10d      	bne.n	80056fa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	021b      	lsls	r3, r3, #8
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1e      	ldr	r2, [pc, #120]	; (8005778 <TIM_OC3_SetConfig+0x10c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d013      	beq.n	800572a <TIM_OC3_SetConfig+0xbe>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1d      	ldr	r2, [pc, #116]	; (800577c <TIM_OC3_SetConfig+0x110>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d00f      	beq.n	800572a <TIM_OC3_SetConfig+0xbe>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <TIM_OC3_SetConfig+0x118>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00b      	beq.n	800572a <TIM_OC3_SetConfig+0xbe>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <TIM_OC3_SetConfig+0x11c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d007      	beq.n	800572a <TIM_OC3_SetConfig+0xbe>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1b      	ldr	r2, [pc, #108]	; (800578c <TIM_OC3_SetConfig+0x120>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d003      	beq.n	800572a <TIM_OC3_SetConfig+0xbe>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a16      	ldr	r2, [pc, #88]	; (8005780 <TIM_OC3_SetConfig+0x114>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d113      	bne.n	8005752 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005730:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	011b      	lsls	r3, r3, #4
 800574c:	693a      	ldr	r2, [r7, #16]
 800574e:	4313      	orrs	r3, r2
 8005750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	693a      	ldr	r2, [r7, #16]
 8005756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	621a      	str	r2, [r3, #32]
}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr
 8005778:	40012c00 	.word	0x40012c00
 800577c:	40013400 	.word	0x40013400
 8005780:	40015000 	.word	0x40015000
 8005784:	40014000 	.word	0x40014000
 8005788:	40014400 	.word	0x40014400
 800578c:	40014800 	.word	0x40014800

08005790 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005790:	b480      	push	{r7}
 8005792:	b087      	sub	sp, #28
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
 800579e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	021b      	lsls	r3, r3, #8
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	031b      	lsls	r3, r3, #12
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a2c      	ldr	r2, [pc, #176]	; (80058a0 <TIM_OC4_SetConfig+0x110>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d007      	beq.n	8005804 <TIM_OC4_SetConfig+0x74>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a2b      	ldr	r2, [pc, #172]	; (80058a4 <TIM_OC4_SetConfig+0x114>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d003      	beq.n	8005804 <TIM_OC4_SetConfig+0x74>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a2a      	ldr	r2, [pc, #168]	; (80058a8 <TIM_OC4_SetConfig+0x118>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d10d      	bne.n	8005820 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800580a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	031b      	lsls	r3, r3, #12
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800581e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a1f      	ldr	r2, [pc, #124]	; (80058a0 <TIM_OC4_SetConfig+0x110>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <TIM_OC4_SetConfig+0xc0>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1e      	ldr	r2, [pc, #120]	; (80058a4 <TIM_OC4_SetConfig+0x114>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00f      	beq.n	8005850 <TIM_OC4_SetConfig+0xc0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a1e      	ldr	r2, [pc, #120]	; (80058ac <TIM_OC4_SetConfig+0x11c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_OC4_SetConfig+0xc0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a1d      	ldr	r2, [pc, #116]	; (80058b0 <TIM_OC4_SetConfig+0x120>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_OC4_SetConfig+0xc0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <TIM_OC4_SetConfig+0x124>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC4_SetConfig+0xc0>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a17      	ldr	r2, [pc, #92]	; (80058a8 <TIM_OC4_SetConfig+0x118>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d113      	bne.n	8005878 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005856:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800585e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	019b      	lsls	r3, r3, #6
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	019b      	lsls	r3, r3, #6
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	4313      	orrs	r3, r2
 8005876:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	621a      	str	r2, [r3, #32]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	40012c00 	.word	0x40012c00
 80058a4:	40013400 	.word	0x40013400
 80058a8:	40015000 	.word	0x40015000
 80058ac:	40014000 	.word	0x40014000
 80058b0:	40014400 	.word	0x40014400
 80058b4:	40014800 	.word	0x40014800

080058b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	041b      	lsls	r3, r3, #16
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a19      	ldr	r2, [pc, #100]	; (8005974 <TIM_OC5_SetConfig+0xbc>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <TIM_OC5_SetConfig+0x82>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a18      	ldr	r2, [pc, #96]	; (8005978 <TIM_OC5_SetConfig+0xc0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d00f      	beq.n	800593a <TIM_OC5_SetConfig+0x82>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a17      	ldr	r2, [pc, #92]	; (800597c <TIM_OC5_SetConfig+0xc4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00b      	beq.n	800593a <TIM_OC5_SetConfig+0x82>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a16      	ldr	r2, [pc, #88]	; (8005980 <TIM_OC5_SetConfig+0xc8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d007      	beq.n	800593a <TIM_OC5_SetConfig+0x82>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a15      	ldr	r2, [pc, #84]	; (8005984 <TIM_OC5_SetConfig+0xcc>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d003      	beq.n	800593a <TIM_OC5_SetConfig+0x82>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a14      	ldr	r2, [pc, #80]	; (8005988 <TIM_OC5_SetConfig+0xd0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d109      	bne.n	800594e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005940:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	695b      	ldr	r3, [r3, #20]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	685a      	ldr	r2, [r3, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	621a      	str	r2, [r3, #32]
}
 8005968:	bf00      	nop
 800596a:	371c      	adds	r7, #28
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40013400 	.word	0x40013400
 800597c:	40014000 	.word	0x40014000
 8005980:	40014400 	.word	0x40014400
 8005984:	40014800 	.word	0x40014800
 8005988:	40015000 	.word	0x40015000

0800598c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a1b      	ldr	r3, [r3, #32]
 80059a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	68fa      	ldr	r2, [r7, #12]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	051b      	lsls	r3, r3, #20
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	4313      	orrs	r3, r2
 80059de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <TIM_OC6_SetConfig+0xc0>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <TIM_OC6_SetConfig+0x84>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <TIM_OC6_SetConfig+0xc4>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00f      	beq.n	8005a10 <TIM_OC6_SetConfig+0x84>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a18      	ldr	r2, [pc, #96]	; (8005a54 <TIM_OC6_SetConfig+0xc8>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00b      	beq.n	8005a10 <TIM_OC6_SetConfig+0x84>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a17      	ldr	r2, [pc, #92]	; (8005a58 <TIM_OC6_SetConfig+0xcc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <TIM_OC6_SetConfig+0x84>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <TIM_OC6_SetConfig+0xd0>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_OC6_SetConfig+0x84>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <TIM_OC6_SetConfig+0xd4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d109      	bne.n	8005a24 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	029b      	lsls	r3, r3, #10
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	621a      	str	r2, [r3, #32]
}
 8005a3e:	bf00      	nop
 8005a40:	371c      	adds	r7, #28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop
 8005a4c:	40012c00 	.word	0x40012c00
 8005a50:	40013400 	.word	0x40013400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	40015000 	.word	0x40015000

08005a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 030a 	bic.w	r3, r3, #10
 8005aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b087      	sub	sp, #28
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a1b      	ldr	r3, [r3, #32]
 8005ad8:	f023 0210 	bic.w	r2, r3, #16
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005afe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	697a      	ldr	r2, [r7, #20]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f043 0307 	orr.w	r3, r3, #7
 8005b48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	609a      	str	r2, [r3, #8]
}
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b087      	sub	sp, #28
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
 8005b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	021a      	lsls	r2, r3, #8
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	431a      	orrs	r2, r3
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	609a      	str	r2, [r3, #8]
}
 8005b90:	bf00      	nop
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2201      	movs	r2, #1
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1a      	ldr	r2, [r3, #32]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	6879      	ldr	r1, [r7, #4]
 8005bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	621a      	str	r2, [r3, #32]
}
 8005bda:	bf00      	nop
 8005bdc:	371c      	adds	r7, #28
 8005bde:	46bd      	mov	sp, r7
 8005be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be4:	4770      	bx	lr
	...

08005be8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d101      	bne.n	8005c00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bfc:	2302      	movs	r3, #2
 8005bfe:	e074      	b.n	8005cea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a34      	ldr	r2, [pc, #208]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d009      	beq.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a33      	ldr	r2, [pc, #204]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d004      	beq.n	8005c3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a31      	ldr	r2, [pc, #196]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d108      	bne.n	8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d022      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c80:	d01d      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d018      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1d      	ldr	r2, [pc, #116]	; (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d013      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d00e      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a15      	ldr	r2, [pc, #84]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d009      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a18      	ldr	r2, [pc, #96]	; (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d004      	beq.n	8005cbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a11      	ldr	r2, [pc, #68]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d10c      	bne.n	8005cd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40012c00 	.word	0x40012c00
 8005cfc:	40013400 	.word	0x40013400
 8005d00:	40015000 	.word	0x40015000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40014000 	.word	0x40014000

08005d14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d101      	bne.n	8005d30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e078      	b.n	8005e22 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	4313      	orrs	r3, r2
 8005d52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	041b      	lsls	r3, r3, #16
 8005da6:	4313      	orrs	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a1c      	ldr	r2, [pc, #112]	; (8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1b      	ldr	r2, [pc, #108]	; (8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a19      	ldr	r2, [pc, #100]	; (8005e38 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d11c      	bne.n	8005e10 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	051b      	lsls	r3, r3, #20
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	40012c00 	.word	0x40012c00
 8005e34:	40013400 	.word	0x40013400
 8005e38:	40015000 	.word	0x40015000

08005e3c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e80:	bf00      	nop
 8005e82:	370c      	adds	r7, #12
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr

08005e8c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e94:	bf00      	nop
 8005e96:	370c      	adds	r7, #12
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr

08005eb4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ebc:	bf00      	nop
 8005ebe:	370c      	adds	r7, #12
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e042      	b.n	8005f60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7fc fae7 	bl	80024c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2224      	movs	r2, #36	; 0x24
 8005ef6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 ff42 	bl	8006d9c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fc43 	bl	80067a4 <UART_SetConfig>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d101      	bne.n	8005f28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e01b      	b.n	8005f60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685a      	ldr	r2, [r3, #4]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 ffc1 	bl	8006ee0 <UART_CheckIdleState>
 8005f5e:	4603      	mov	r3, r0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08a      	sub	sp, #40	; 0x28
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	4613      	mov	r3, r2
 8005f76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d17b      	bne.n	800607a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <HAL_UART_Transmit+0x26>
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e074      	b.n	800607c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2221      	movs	r2, #33	; 0x21
 8005f9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fa2:	f7fc fe4f 	bl	8002c44 <HAL_GetTick>
 8005fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	88fa      	ldrh	r2, [r7, #6]
 8005fac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fc0:	d108      	bne.n	8005fd4 <HAL_UART_Transmit+0x6c>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d104      	bne.n	8005fd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	61bb      	str	r3, [r7, #24]
 8005fd2:	e003      	b.n	8005fdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fdc:	e030      	b.n	8006040 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	2180      	movs	r1, #128	; 0x80
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f001 f823 	bl	8007034 <UART_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e03d      	b.n	800607c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d10b      	bne.n	800601e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	881b      	ldrh	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006014:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	3302      	adds	r3, #2
 800601a:	61bb      	str	r3, [r7, #24]
 800601c:	e007      	b.n	800602e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	781a      	ldrb	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	3301      	adds	r3, #1
 800602c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006034:	b29b      	uxth	r3, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1c8      	bne.n	8005fde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	9300      	str	r3, [sp, #0]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	2200      	movs	r2, #0
 8006054:	2140      	movs	r1, #64	; 0x40
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	f000 ffec 	bl	8007034 <UART_WaitOnFlagUntilTimeout>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d005      	beq.n	800606e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e006      	b.n	800607c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2220      	movs	r2, #32
 8006072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	e000      	b.n	800607c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800607a:	2302      	movs	r3, #2
  }
}
 800607c:	4618      	mov	r0, r3
 800607e:	3720      	adds	r7, #32
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08a      	sub	sp, #40	; 0x28
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006098:	2b20      	cmp	r3, #32
 800609a:	d137      	bne.n	800610c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <HAL_UART_Receive_IT+0x24>
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e030      	b.n	800610e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_UART_Receive_IT+0x94>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d01f      	beq.n	80060fc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d018      	beq.n	80060fc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	613b      	str	r3, [r7, #16]
   return(result);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	69f9      	ldr	r1, [r7, #28]
 80060ee:	6a3a      	ldr	r2, [r7, #32]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e6      	bne.n	80060ca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060fc:	88fb      	ldrh	r3, [r7, #6]
 80060fe:	461a      	mov	r2, r3
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f001 f804 	bl	8007110 <UART_Start_Receive_IT>
 8006108:	4603      	mov	r3, r0
 800610a:	e000      	b.n	800610e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3728      	adds	r7, #40	; 0x28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40008000 	.word	0x40008000

0800611c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b0ba      	sub	sp, #232	; 0xe8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006146:	f640 030f 	movw	r3, #2063	; 0x80f
 800614a:	4013      	ands	r3, r2
 800614c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d11b      	bne.n	8006190 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d015      	beq.n	8006190 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b00      	cmp	r3, #0
 800616e:	d105      	bne.n	800617c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d009      	beq.n	8006190 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 82e3 	beq.w	800674c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	4798      	blx	r3
      }
      return;
 800618e:	e2dd      	b.n	800674c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006194:	2b00      	cmp	r3, #0
 8006196:	f000 8123 	beq.w	80063e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800619a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800619e:	4b8d      	ldr	r3, [pc, #564]	; (80063d4 <HAL_UART_IRQHandler+0x2b8>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d106      	bne.n	80061b4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80061a6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061aa:	4b8b      	ldr	r3, [pc, #556]	; (80063d8 <HAL_UART_IRQHandler+0x2bc>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8116 	beq.w	80063e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d011      	beq.n	80061e4 <HAL_UART_IRQHandler+0xc8>
 80061c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2201      	movs	r2, #1
 80061d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061da:	f043 0201 	orr.w	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e8:	f003 0302 	and.w	r3, r3, #2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d011      	beq.n	8006214 <HAL_UART_IRQHandler+0xf8>
 80061f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2202      	movs	r2, #2
 8006202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620a:	f043 0204 	orr.w	r2, r3, #4
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d011      	beq.n	8006244 <HAL_UART_IRQHandler+0x128>
 8006220:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00b      	beq.n	8006244 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	2204      	movs	r2, #4
 8006232:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623a:	f043 0202 	orr.w	r2, r3, #2
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d017      	beq.n	8006280 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006254:	f003 0320 	and.w	r3, r3, #32
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800625c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006260:	4b5c      	ldr	r3, [pc, #368]	; (80063d4 <HAL_UART_IRQHandler+0x2b8>)
 8006262:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00b      	beq.n	8006280 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2208      	movs	r2, #8
 800626e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006276:	f043 0208 	orr.w	r2, r3, #8
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006288:	2b00      	cmp	r3, #0
 800628a:	d012      	beq.n	80062b2 <HAL_UART_IRQHandler+0x196>
 800628c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d00c      	beq.n	80062b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80062a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a8:	f043 0220 	orr.w	r2, r3, #32
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 8249 	beq.w	8006750 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d013      	beq.n	80062f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d105      	bne.n	80062e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d003      	beq.n	80062f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006306:	2b40      	cmp	r3, #64	; 0x40
 8006308:	d005      	beq.n	8006316 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800630a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800630e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006312:	2b00      	cmp	r3, #0
 8006314:	d054      	beq.n	80063c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 f81c 	bl	8007354 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006326:	2b40      	cmp	r3, #64	; 0x40
 8006328:	d146      	bne.n	80063b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	3308      	adds	r3, #8
 8006330:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006340:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006348:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3308      	adds	r3, #8
 8006352:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006356:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800635a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006362:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800636e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1d9      	bne.n	800632a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637c:	2b00      	cmp	r3, #0
 800637e:	d017      	beq.n	80063b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006386:	4a15      	ldr	r2, [pc, #84]	; (80063dc <HAL_UART_IRQHandler+0x2c0>)
 8006388:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006390:	4618      	mov	r0, r3
 8006392:	f7fc fd9c 	bl	8002ece <HAL_DMA_Abort_IT>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d019      	beq.n	80063d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80063aa:	4610      	mov	r0, r2
 80063ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ae:	e00f      	b.n	80063d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f9e1 	bl	8006778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b6:	e00b      	b.n	80063d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f9dd 	bl	8006778 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063be:	e007      	b.n	80063d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f9d9 	bl	8006778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80063ce:	e1bf      	b.n	8006750 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063d0:	bf00      	nop
    return;
 80063d2:	e1bd      	b.n	8006750 <HAL_UART_IRQHandler+0x634>
 80063d4:	10000001 	.word	0x10000001
 80063d8:	04000120 	.word	0x04000120
 80063dc:	08007421 	.word	0x08007421

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	f040 8153 	bne.w	8006690 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ee:	f003 0310 	and.w	r3, r3, #16
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	f000 814c 	beq.w	8006690 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063fc:	f003 0310 	and.w	r3, r3, #16
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 8145 	beq.w	8006690 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2210      	movs	r2, #16
 800640c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006418:	2b40      	cmp	r3, #64	; 0x40
 800641a:	f040 80bb 	bne.w	8006594 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800642c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006430:	2b00      	cmp	r3, #0
 8006432:	f000 818f 	beq.w	8006754 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800643c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006440:	429a      	cmp	r2, r3
 8006442:	f080 8187 	bcs.w	8006754 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800644c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	f040 8087 	bne.w	8006572 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006478:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800647c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006480:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800648e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006492:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800649a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800649e:	e841 2300 	strex	r3, r2, [r1]
 80064a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80064a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1da      	bne.n	8006464 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064c0:	f023 0301 	bic.w	r3, r3, #1
 80064c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064de:	e841 2300 	strex	r3, r2, [r1]
 80064e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d1e1      	bne.n	80064ae <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3308      	adds	r3, #8
 80064f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064f4:	e853 3f00 	ldrex	r3, [r3]
 80064f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	3308      	adds	r3, #8
 800650a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800650e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006510:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006514:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800651c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e3      	bne.n	80064ea <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800653e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006540:	f023 0310 	bic.w	r3, r3, #16
 8006544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006552:	65bb      	str	r3, [r7, #88]	; 0x58
 8006554:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006556:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006558:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800655a:	e841 2300 	strex	r3, r2, [r1]
 800655e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e4      	bne.n	8006530 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800656c:	4618      	mov	r0, r3
 800656e:	f7fc fc55 	bl	8002e1c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2202      	movs	r2, #2
 8006576:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006584:	b29b      	uxth	r3, r3
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	b29b      	uxth	r3, r3
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f8fd 	bl	800678c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006592:	e0df      	b.n	8006754 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 80d1 	beq.w	8006758 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80065b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 80cc 	beq.w	8006758 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c8:	e853 3f00 	ldrex	r3, [r3]
 80065cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	461a      	mov	r2, r3
 80065de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065e2:	647b      	str	r3, [r7, #68]	; 0x44
 80065e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e4      	bne.n	80065c0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3308      	adds	r3, #8
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	623b      	str	r3, [r7, #32]
   return(result);
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800660c:	f023 0301 	bic.w	r3, r3, #1
 8006610:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800661e:	633a      	str	r2, [r7, #48]	; 0x30
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006622:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	e841 2300 	strex	r3, r2, [r1]
 800662a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1e1      	bne.n	80065f6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2220      	movs	r2, #32
 8006636:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2200      	movs	r2, #0
 800663e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	e853 3f00 	ldrex	r3, [r3]
 8006652:	60fb      	str	r3, [r7, #12]
   return(result);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 0310 	bic.w	r3, r3, #16
 800665a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	461a      	mov	r2, r3
 8006664:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666c:	69b9      	ldr	r1, [r7, #24]
 800666e:	69fa      	ldr	r2, [r7, #28]
 8006670:	e841 2300 	strex	r3, r2, [r1]
 8006674:	617b      	str	r3, [r7, #20]
   return(result);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d1e4      	bne.n	8006646 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2202      	movs	r2, #2
 8006680:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f87f 	bl	800678c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800668e:	e063      	b.n	8006758 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006694:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00e      	beq.n	80066ba <HAL_UART_IRQHandler+0x59e>
 800669c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d008      	beq.n	80066ba <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fc12 	bl	8007edc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066b8:	e051      	b.n	800675e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d014      	beq.n	80066f0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d105      	bne.n	80066de <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d008      	beq.n	80066f0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d03a      	beq.n	800675c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
    }
    return;
 80066ee:	e035      	b.n	800675c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <HAL_UART_IRQHandler+0x5f4>
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006708:	6878      	ldr	r0, [r7, #4]
 800670a:	f000 fe9f 	bl	800744c <UART_EndTransmit_IT>
    return;
 800670e:	e026      	b.n	800675e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d009      	beq.n	8006730 <HAL_UART_IRQHandler+0x614>
 800671c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006720:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d003      	beq.n	8006730 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f001 fbeb 	bl	8007f04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800672e:	e016      	b.n	800675e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d010      	beq.n	800675e <HAL_UART_IRQHandler+0x642>
 800673c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006740:	2b00      	cmp	r3, #0
 8006742:	da0c      	bge.n	800675e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f001 fbd3 	bl	8007ef0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800674a:	e008      	b.n	800675e <HAL_UART_IRQHandler+0x642>
      return;
 800674c:	bf00      	nop
 800674e:	e006      	b.n	800675e <HAL_UART_IRQHandler+0x642>
    return;
 8006750:	bf00      	nop
 8006752:	e004      	b.n	800675e <HAL_UART_IRQHandler+0x642>
      return;
 8006754:	bf00      	nop
 8006756:	e002      	b.n	800675e <HAL_UART_IRQHandler+0x642>
      return;
 8006758:	bf00      	nop
 800675a:	e000      	b.n	800675e <HAL_UART_IRQHandler+0x642>
    return;
 800675c:	bf00      	nop
  }
}
 800675e:	37e8      	adds	r7, #232	; 0xe8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006780:	bf00      	nop
 8006782:	370c      	adds	r7, #12
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr

0800678c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006798:	bf00      	nop
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a8:	b08c      	sub	sp, #48	; 0x30
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	689a      	ldr	r2, [r3, #8]
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	691b      	ldr	r3, [r3, #16]
 80067bc:	431a      	orrs	r2, r3
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	431a      	orrs	r2, r3
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	69db      	ldr	r3, [r3, #28]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	4baa      	ldr	r3, [pc, #680]	; (8006a7c <UART_SetConfig+0x2d8>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	6812      	ldr	r2, [r2, #0]
 80067da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067dc:	430b      	orrs	r3, r1
 80067de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a9f      	ldr	r2, [pc, #636]	; (8006a80 <UART_SetConfig+0x2dc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d004      	beq.n	8006810 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	6a1b      	ldr	r3, [r3, #32]
 800680a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800680c:	4313      	orrs	r3, r2
 800680e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800681a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006824:	430b      	orrs	r3, r1
 8006826:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800682e:	f023 010f 	bic.w	r1, r3, #15
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a90      	ldr	r2, [pc, #576]	; (8006a84 <UART_SetConfig+0x2e0>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d125      	bne.n	8006894 <UART_SetConfig+0xf0>
 8006848:	4b8f      	ldr	r3, [pc, #572]	; (8006a88 <UART_SetConfig+0x2e4>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b03      	cmp	r3, #3
 8006854:	d81a      	bhi.n	800688c <UART_SetConfig+0xe8>
 8006856:	a201      	add	r2, pc, #4	; (adr r2, 800685c <UART_SetConfig+0xb8>)
 8006858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685c:	0800686d 	.word	0x0800686d
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006875 	.word	0x08006875
 8006868:	08006885 	.word	0x08006885
 800686c:	2301      	movs	r3, #1
 800686e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006872:	e116      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006874:	2302      	movs	r3, #2
 8006876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687a:	e112      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006882:	e10e      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800688a:	e10a      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006892:	e106      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a7c      	ldr	r2, [pc, #496]	; (8006a8c <UART_SetConfig+0x2e8>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d138      	bne.n	8006910 <UART_SetConfig+0x16c>
 800689e:	4b7a      	ldr	r3, [pc, #488]	; (8006a88 <UART_SetConfig+0x2e4>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a4:	f003 030c 	and.w	r3, r3, #12
 80068a8:	2b0c      	cmp	r3, #12
 80068aa:	d82d      	bhi.n	8006908 <UART_SetConfig+0x164>
 80068ac:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <UART_SetConfig+0x110>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068e9 	.word	0x080068e9
 80068b8:	08006909 	.word	0x08006909
 80068bc:	08006909 	.word	0x08006909
 80068c0:	08006909 	.word	0x08006909
 80068c4:	080068f9 	.word	0x080068f9
 80068c8:	08006909 	.word	0x08006909
 80068cc:	08006909 	.word	0x08006909
 80068d0:	08006909 	.word	0x08006909
 80068d4:	080068f1 	.word	0x080068f1
 80068d8:	08006909 	.word	0x08006909
 80068dc:	08006909 	.word	0x08006909
 80068e0:	08006909 	.word	0x08006909
 80068e4:	08006901 	.word	0x08006901
 80068e8:	2300      	movs	r3, #0
 80068ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ee:	e0d8      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80068f0:	2302      	movs	r3, #2
 80068f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f6:	e0d4      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80068f8:	2304      	movs	r3, #4
 80068fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fe:	e0d0      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006900:	2308      	movs	r3, #8
 8006902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006906:	e0cc      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006908:	2310      	movs	r3, #16
 800690a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800690e:	e0c8      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a5e      	ldr	r2, [pc, #376]	; (8006a90 <UART_SetConfig+0x2ec>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d125      	bne.n	8006966 <UART_SetConfig+0x1c2>
 800691a:	4b5b      	ldr	r3, [pc, #364]	; (8006a88 <UART_SetConfig+0x2e4>)
 800691c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006920:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006924:	2b30      	cmp	r3, #48	; 0x30
 8006926:	d016      	beq.n	8006956 <UART_SetConfig+0x1b2>
 8006928:	2b30      	cmp	r3, #48	; 0x30
 800692a:	d818      	bhi.n	800695e <UART_SetConfig+0x1ba>
 800692c:	2b20      	cmp	r3, #32
 800692e:	d00a      	beq.n	8006946 <UART_SetConfig+0x1a2>
 8006930:	2b20      	cmp	r3, #32
 8006932:	d814      	bhi.n	800695e <UART_SetConfig+0x1ba>
 8006934:	2b00      	cmp	r3, #0
 8006936:	d002      	beq.n	800693e <UART_SetConfig+0x19a>
 8006938:	2b10      	cmp	r3, #16
 800693a:	d008      	beq.n	800694e <UART_SetConfig+0x1aa>
 800693c:	e00f      	b.n	800695e <UART_SetConfig+0x1ba>
 800693e:	2300      	movs	r3, #0
 8006940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006944:	e0ad      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006946:	2302      	movs	r3, #2
 8006948:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800694c:	e0a9      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800694e:	2304      	movs	r3, #4
 8006950:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006954:	e0a5      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006956:	2308      	movs	r3, #8
 8006958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800695c:	e0a1      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800695e:	2310      	movs	r3, #16
 8006960:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006964:	e09d      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a4a      	ldr	r2, [pc, #296]	; (8006a94 <UART_SetConfig+0x2f0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d125      	bne.n	80069bc <UART_SetConfig+0x218>
 8006970:	4b45      	ldr	r3, [pc, #276]	; (8006a88 <UART_SetConfig+0x2e4>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006976:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800697a:	2bc0      	cmp	r3, #192	; 0xc0
 800697c:	d016      	beq.n	80069ac <UART_SetConfig+0x208>
 800697e:	2bc0      	cmp	r3, #192	; 0xc0
 8006980:	d818      	bhi.n	80069b4 <UART_SetConfig+0x210>
 8006982:	2b80      	cmp	r3, #128	; 0x80
 8006984:	d00a      	beq.n	800699c <UART_SetConfig+0x1f8>
 8006986:	2b80      	cmp	r3, #128	; 0x80
 8006988:	d814      	bhi.n	80069b4 <UART_SetConfig+0x210>
 800698a:	2b00      	cmp	r3, #0
 800698c:	d002      	beq.n	8006994 <UART_SetConfig+0x1f0>
 800698e:	2b40      	cmp	r3, #64	; 0x40
 8006990:	d008      	beq.n	80069a4 <UART_SetConfig+0x200>
 8006992:	e00f      	b.n	80069b4 <UART_SetConfig+0x210>
 8006994:	2300      	movs	r3, #0
 8006996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699a:	e082      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 800699c:	2302      	movs	r3, #2
 800699e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a2:	e07e      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069a4:	2304      	movs	r3, #4
 80069a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069aa:	e07a      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069ac:	2308      	movs	r3, #8
 80069ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069b2:	e076      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069b4:	2310      	movs	r3, #16
 80069b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ba:	e072      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a35      	ldr	r2, [pc, #212]	; (8006a98 <UART_SetConfig+0x2f4>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d12a      	bne.n	8006a1c <UART_SetConfig+0x278>
 80069c6:	4b30      	ldr	r3, [pc, #192]	; (8006a88 <UART_SetConfig+0x2e4>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069d4:	d01a      	beq.n	8006a0c <UART_SetConfig+0x268>
 80069d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069da:	d81b      	bhi.n	8006a14 <UART_SetConfig+0x270>
 80069dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e0:	d00c      	beq.n	80069fc <UART_SetConfig+0x258>
 80069e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069e6:	d815      	bhi.n	8006a14 <UART_SetConfig+0x270>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <UART_SetConfig+0x250>
 80069ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069f0:	d008      	beq.n	8006a04 <UART_SetConfig+0x260>
 80069f2:	e00f      	b.n	8006a14 <UART_SetConfig+0x270>
 80069f4:	2300      	movs	r3, #0
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fa:	e052      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 80069fc:	2302      	movs	r3, #2
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a02:	e04e      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a04:	2304      	movs	r3, #4
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a0a:	e04a      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a12:	e046      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a14:	2310      	movs	r3, #16
 8006a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a1a:	e042      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	4a17      	ldr	r2, [pc, #92]	; (8006a80 <UART_SetConfig+0x2dc>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d13a      	bne.n	8006a9c <UART_SetConfig+0x2f8>
 8006a26:	4b18      	ldr	r3, [pc, #96]	; (8006a88 <UART_SetConfig+0x2e4>)
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a34:	d01a      	beq.n	8006a6c <UART_SetConfig+0x2c8>
 8006a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a3a:	d81b      	bhi.n	8006a74 <UART_SetConfig+0x2d0>
 8006a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a40:	d00c      	beq.n	8006a5c <UART_SetConfig+0x2b8>
 8006a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a46:	d815      	bhi.n	8006a74 <UART_SetConfig+0x2d0>
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <UART_SetConfig+0x2b0>
 8006a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a50:	d008      	beq.n	8006a64 <UART_SetConfig+0x2c0>
 8006a52:	e00f      	b.n	8006a74 <UART_SetConfig+0x2d0>
 8006a54:	2300      	movs	r3, #0
 8006a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5a:	e022      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a5c:	2302      	movs	r3, #2
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a62:	e01e      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a64:	2304      	movs	r3, #4
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a6a:	e01a      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a6c:	2308      	movs	r3, #8
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a72:	e016      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a74:	2310      	movs	r3, #16
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a7a:	e012      	b.n	8006aa2 <UART_SetConfig+0x2fe>
 8006a7c:	cfff69f3 	.word	0xcfff69f3
 8006a80:	40008000 	.word	0x40008000
 8006a84:	40013800 	.word	0x40013800
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	40004400 	.word	0x40004400
 8006a90:	40004800 	.word	0x40004800
 8006a94:	40004c00 	.word	0x40004c00
 8006a98:	40005000 	.word	0x40005000
 8006a9c:	2310      	movs	r3, #16
 8006a9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4aae      	ldr	r2, [pc, #696]	; (8006d60 <UART_SetConfig+0x5bc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	f040 8097 	bne.w	8006bdc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d823      	bhi.n	8006afe <UART_SetConfig+0x35a>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <UART_SetConfig+0x318>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ae1 	.word	0x08006ae1
 8006ac0:	08006aff 	.word	0x08006aff
 8006ac4:	08006ae9 	.word	0x08006ae9
 8006ac8:	08006aff 	.word	0x08006aff
 8006acc:	08006aef 	.word	0x08006aef
 8006ad0:	08006aff 	.word	0x08006aff
 8006ad4:	08006aff 	.word	0x08006aff
 8006ad8:	08006aff 	.word	0x08006aff
 8006adc:	08006af7 	.word	0x08006af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae0:	f7fd f966 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 8006ae4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ae6:	e010      	b.n	8006b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae8:	4b9e      	ldr	r3, [pc, #632]	; (8006d64 <UART_SetConfig+0x5c0>)
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006aec:	e00d      	b.n	8006b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aee:	f7fd f8f1 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8006af2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006af4:	e009      	b.n	8006b0a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006afc:	e005      	b.n	8006b0a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006b08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8130 	beq.w	8006d72 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b16:	4a94      	ldr	r2, [pc, #592]	; (8006d68 <UART_SetConfig+0x5c4>)
 8006b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	685a      	ldr	r2, [r3, #4]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	005b      	lsls	r3, r3, #1
 8006b2e:	4413      	add	r3, r2
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d305      	bcc.n	8006b42 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d903      	bls.n	8006b4a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b48:	e113      	b.n	8006d72 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	60bb      	str	r3, [r7, #8]
 8006b50:	60fa      	str	r2, [r7, #12]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b56:	4a84      	ldr	r2, [pc, #528]	; (8006d68 <UART_SetConfig+0x5c4>)
 8006b58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	2200      	movs	r2, #0
 8006b60:	603b      	str	r3, [r7, #0]
 8006b62:	607a      	str	r2, [r7, #4]
 8006b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b6c:	f7fa f8b4 	bl	8000cd8 <__aeabi_uldivmod>
 8006b70:	4602      	mov	r2, r0
 8006b72:	460b      	mov	r3, r1
 8006b74:	4610      	mov	r0, r2
 8006b76:	4619      	mov	r1, r3
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	f04f 0300 	mov.w	r3, #0
 8006b80:	020b      	lsls	r3, r1, #8
 8006b82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b86:	0202      	lsls	r2, r0, #8
 8006b88:	6979      	ldr	r1, [r7, #20]
 8006b8a:	6849      	ldr	r1, [r1, #4]
 8006b8c:	0849      	lsrs	r1, r1, #1
 8006b8e:	2000      	movs	r0, #0
 8006b90:	460c      	mov	r4, r1
 8006b92:	4605      	mov	r5, r0
 8006b94:	eb12 0804 	adds.w	r8, r2, r4
 8006b98:	eb43 0905 	adc.w	r9, r3, r5
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	469a      	mov	sl, r3
 8006ba4:	4693      	mov	fp, r2
 8006ba6:	4652      	mov	r2, sl
 8006ba8:	465b      	mov	r3, fp
 8006baa:	4640      	mov	r0, r8
 8006bac:	4649      	mov	r1, r9
 8006bae:	f7fa f893 	bl	8000cd8 <__aeabi_uldivmod>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bba:	6a3b      	ldr	r3, [r7, #32]
 8006bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bc0:	d308      	bcc.n	8006bd4 <UART_SetConfig+0x430>
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bc8:	d204      	bcs.n	8006bd4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6a3a      	ldr	r2, [r7, #32]
 8006bd0:	60da      	str	r2, [r3, #12]
 8006bd2:	e0ce      	b.n	8006d72 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006bda:	e0ca      	b.n	8006d72 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006be4:	d166      	bne.n	8006cb4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006be6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bea:	2b08      	cmp	r3, #8
 8006bec:	d827      	bhi.n	8006c3e <UART_SetConfig+0x49a>
 8006bee:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <UART_SetConfig+0x450>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c19 	.word	0x08006c19
 8006bf8:	08006c21 	.word	0x08006c21
 8006bfc:	08006c29 	.word	0x08006c29
 8006c00:	08006c3f 	.word	0x08006c3f
 8006c04:	08006c2f 	.word	0x08006c2f
 8006c08:	08006c3f 	.word	0x08006c3f
 8006c0c:	08006c3f 	.word	0x08006c3f
 8006c10:	08006c3f 	.word	0x08006c3f
 8006c14:	08006c37 	.word	0x08006c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c18:	f7fd f8ca 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 8006c1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c1e:	e014      	b.n	8006c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c20:	f7fd f8dc 	bl	8003ddc <HAL_RCC_GetPCLK2Freq>
 8006c24:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c26:	e010      	b.n	8006c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c28:	4b4e      	ldr	r3, [pc, #312]	; (8006d64 <UART_SetConfig+0x5c0>)
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c2c:	e00d      	b.n	8006c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c2e:	f7fd f851 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c34:	e009      	b.n	8006c4a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c3c:	e005      	b.n	8006c4a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f000 8090 	beq.w	8006d72 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	4a44      	ldr	r2, [pc, #272]	; (8006d68 <UART_SetConfig+0x5c4>)
 8006c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c64:	005a      	lsls	r2, r3, #1
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	441a      	add	r2, r3
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c78:	6a3b      	ldr	r3, [r7, #32]
 8006c7a:	2b0f      	cmp	r3, #15
 8006c7c:	d916      	bls.n	8006cac <UART_SetConfig+0x508>
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d212      	bcs.n	8006cac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f023 030f 	bic.w	r3, r3, #15
 8006c8e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	085b      	lsrs	r3, r3, #1
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	8bfb      	ldrh	r3, [r7, #30]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	8bfa      	ldrh	r2, [r7, #30]
 8006ca8:	60da      	str	r2, [r3, #12]
 8006caa:	e062      	b.n	8006d72 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006cb2:	e05e      	b.n	8006d72 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cb4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cb8:	2b08      	cmp	r3, #8
 8006cba:	d828      	bhi.n	8006d0e <UART_SetConfig+0x56a>
 8006cbc:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0x520>)
 8006cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc2:	bf00      	nop
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006cf1 	.word	0x08006cf1
 8006ccc:	08006cf9 	.word	0x08006cf9
 8006cd0:	08006d0f 	.word	0x08006d0f
 8006cd4:	08006cff 	.word	0x08006cff
 8006cd8:	08006d0f 	.word	0x08006d0f
 8006cdc:	08006d0f 	.word	0x08006d0f
 8006ce0:	08006d0f 	.word	0x08006d0f
 8006ce4:	08006d07 	.word	0x08006d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce8:	f7fd f862 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 8006cec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cee:	e014      	b.n	8006d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf0:	f7fd f874 	bl	8003ddc <HAL_RCC_GetPCLK2Freq>
 8006cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cf6:	e010      	b.n	8006d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf8:	4b1a      	ldr	r3, [pc, #104]	; (8006d64 <UART_SetConfig+0x5c0>)
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cfc:	e00d      	b.n	8006d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cfe:	f7fc ffe9 	bl	8003cd4 <HAL_RCC_GetSysClockFreq>
 8006d02:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d04:	e009      	b.n	8006d1a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d0c:	e005      	b.n	8006d1a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d18:	bf00      	nop
    }

    if (pclk != 0U)
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d028      	beq.n	8006d72 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d24:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <UART_SetConfig+0x5c4>)
 8006d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	085b      	lsrs	r3, r3, #1
 8006d38:	441a      	add	r2, r3
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d42:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d44:	6a3b      	ldr	r3, [r7, #32]
 8006d46:	2b0f      	cmp	r3, #15
 8006d48:	d910      	bls.n	8006d6c <UART_SetConfig+0x5c8>
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d50:	d20c      	bcs.n	8006d6c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d52:	6a3b      	ldr	r3, [r7, #32]
 8006d54:	b29a      	uxth	r2, r3
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	e009      	b.n	8006d72 <UART_SetConfig+0x5ce>
 8006d5e:	bf00      	nop
 8006d60:	40008000 	.word	0x40008000
 8006d64:	00f42400 	.word	0x00f42400
 8006d68:	0800d664 	.word	0x0800d664
      }
      else
      {
        ret = HAL_ERROR;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2201      	movs	r2, #1
 8006d76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006d8e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3730      	adds	r7, #48	; 0x30
 8006d96:	46bd      	mov	sp, r7
 8006d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	f003 0308 	and.w	r3, r3, #8
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00a      	beq.n	8006dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	430a      	orrs	r2, r1
 8006de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	f003 0302 	and.w	r3, r3, #2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d00a      	beq.n	8006e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	430a      	orrs	r2, r1
 8006e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00a      	beq.n	8006e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	430a      	orrs	r2, r1
 8006e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e52:	f003 0320 	and.w	r3, r3, #32
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00a      	beq.n	8006e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d01a      	beq.n	8006eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e9a:	d10a      	bne.n	8006eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	430a      	orrs	r2, r1
 8006eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00a      	beq.n	8006ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	605a      	str	r2, [r3, #4]
  }
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b098      	sub	sp, #96	; 0x60
 8006ee4:	af02      	add	r7, sp, #8
 8006ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ef0:	f7fb fea8 	bl	8002c44 <HAL_GetTick>
 8006ef4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d12f      	bne.n	8006f64 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f88e 	bl	8007034 <UART_WaitOnFlagUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d022      	beq.n	8006f64 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f26:	e853 3f00 	ldrex	r3, [r3]
 8006f2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f32:	653b      	str	r3, [r7, #80]	; 0x50
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f3e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f44:	e841 2300 	strex	r3, r2, [r1]
 8006f48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e6      	bne.n	8006f1e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2220      	movs	r2, #32
 8006f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e063      	b.n	800702c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d149      	bne.n	8007006 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f76:	9300      	str	r3, [sp, #0]
 8006f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f857 	bl	8007034 <UART_WaitOnFlagUntilTimeout>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d03c      	beq.n	8007006 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	e853 3f00 	ldrex	r3, [r3]
 8006f98:	623b      	str	r3, [r7, #32]
   return(result);
 8006f9a:	6a3b      	ldr	r3, [r7, #32]
 8006f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006faa:	633b      	str	r3, [r7, #48]	; 0x30
 8006fac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e6      	bne.n	8006f8c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	3308      	adds	r3, #8
 8006fc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	e853 3f00 	ldrex	r3, [r3]
 8006fcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f023 0301 	bic.w	r3, r3, #1
 8006fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3308      	adds	r3, #8
 8006fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fde:	61fa      	str	r2, [r7, #28]
 8006fe0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe2:	69b9      	ldr	r1, [r7, #24]
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	617b      	str	r3, [r7, #20]
   return(result);
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1e5      	bne.n	8006fbe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2220      	movs	r2, #32
 8006ff6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e012      	b.n	800702c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2220      	movs	r2, #32
 800700a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2220      	movs	r2, #32
 8007012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3758      	adds	r7, #88	; 0x58
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	4613      	mov	r3, r2
 8007042:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007044:	e04f      	b.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704c:	d04b      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704e:	f7fb fdf9 	bl	8002c44 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	429a      	cmp	r2, r3
 800705c:	d302      	bcc.n	8007064 <UART_WaitOnFlagUntilTimeout+0x30>
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007064:	2303      	movs	r3, #3
 8007066:	e04e      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	d037      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	2b80      	cmp	r3, #128	; 0x80
 800707a:	d034      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	2b40      	cmp	r3, #64	; 0x40
 8007080:	d031      	beq.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b08      	cmp	r3, #8
 800708e:	d110      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2208      	movs	r2, #8
 8007096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f95b 	bl	8007354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2208      	movs	r2, #8
 80070a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e029      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69db      	ldr	r3, [r3, #28]
 80070b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c0:	d111      	bne.n	80070e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 f941 	bl	8007354 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e00f      	b.n	8007106 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	4013      	ands	r3, r2
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	bf0c      	ite	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	2300      	movne	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	461a      	mov	r2, r3
 80070fe:	79fb      	ldrb	r3, [r7, #7]
 8007100:	429a      	cmp	r2, r3
 8007102:	d0a0      	beq.n	8007046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
	...

08007110 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007110:	b480      	push	{r7}
 8007112:	b0a3      	sub	sp, #140	; 0x8c
 8007114:	af00      	add	r7, sp, #0
 8007116:	60f8      	str	r0, [r7, #12]
 8007118:	60b9      	str	r1, [r7, #8]
 800711a:	4613      	mov	r3, r2
 800711c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	88fa      	ldrh	r2, [r7, #6]
 8007128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	88fa      	ldrh	r2, [r7, #6]
 8007130:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	689b      	ldr	r3, [r3, #8]
 800713e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007142:	d10e      	bne.n	8007162 <UART_Start_Receive_IT+0x52>
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <UART_Start_Receive_IT+0x48>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007152:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007156:	e02d      	b.n	80071b4 <UART_Start_Receive_IT+0xa4>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	22ff      	movs	r2, #255	; 0xff
 800715c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007160:	e028      	b.n	80071b4 <UART_Start_Receive_IT+0xa4>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d10d      	bne.n	8007186 <UART_Start_Receive_IT+0x76>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <UART_Start_Receive_IT+0x6c>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	22ff      	movs	r2, #255	; 0xff
 8007176:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800717a:	e01b      	b.n	80071b4 <UART_Start_Receive_IT+0xa4>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	227f      	movs	r2, #127	; 0x7f
 8007180:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007184:	e016      	b.n	80071b4 <UART_Start_Receive_IT+0xa4>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800718e:	d10d      	bne.n	80071ac <UART_Start_Receive_IT+0x9c>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d104      	bne.n	80071a2 <UART_Start_Receive_IT+0x92>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	227f      	movs	r2, #127	; 0x7f
 800719c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071a0:	e008      	b.n	80071b4 <UART_Start_Receive_IT+0xa4>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	223f      	movs	r2, #63	; 0x3f
 80071a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80071aa:	e003      	b.n	80071b4 <UART_Start_Receive_IT+0xa4>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2222      	movs	r2, #34	; 0x22
 80071c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3308      	adds	r3, #8
 80071ca:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80071d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3308      	adds	r3, #8
 80071e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80071e8:	673a      	str	r2, [r7, #112]	; 0x70
 80071ea:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80071ee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80071f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e3      	bne.n	80071c4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007204:	d14f      	bne.n	80072a6 <UART_Start_Receive_IT+0x196>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800720c:	88fa      	ldrh	r2, [r7, #6]
 800720e:	429a      	cmp	r2, r3
 8007210:	d349      	bcc.n	80072a6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721a:	d107      	bne.n	800722c <UART_Start_Receive_IT+0x11c>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	691b      	ldr	r3, [r3, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d103      	bne.n	800722c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4a47      	ldr	r2, [pc, #284]	; (8007344 <UART_Start_Receive_IT+0x234>)
 8007228:	675a      	str	r2, [r3, #116]	; 0x74
 800722a:	e002      	b.n	8007232 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	4a46      	ldr	r2, [pc, #280]	; (8007348 <UART_Start_Receive_IT+0x238>)
 8007230:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01a      	beq.n	8007270 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007242:	e853 3f00 	ldrex	r3, [r3]
 8007246:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800724a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800725c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800725e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007260:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007262:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007264:	e841 2300 	strex	r3, r2, [r1]
 8007268:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800726a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800726c:	2b00      	cmp	r3, #0
 800726e:	d1e4      	bne.n	800723a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3308      	adds	r3, #8
 8007276:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007278:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800727a:	e853 3f00 	ldrex	r3, [r3]
 800727e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007286:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3308      	adds	r3, #8
 800728e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007290:	64ba      	str	r2, [r7, #72]	; 0x48
 8007292:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800729e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e5      	bne.n	8007270 <UART_Start_Receive_IT+0x160>
 80072a4:	e046      	b.n	8007334 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ae:	d107      	bne.n	80072c0 <UART_Start_Receive_IT+0x1b0>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d103      	bne.n	80072c0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	4a24      	ldr	r2, [pc, #144]	; (800734c <UART_Start_Receive_IT+0x23c>)
 80072bc:	675a      	str	r2, [r3, #116]	; 0x74
 80072be:	e002      	b.n	80072c6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	4a23      	ldr	r2, [pc, #140]	; (8007350 <UART_Start_Receive_IT+0x240>)
 80072c4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d019      	beq.n	8007302 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072de:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80072e2:	677b      	str	r3, [r7, #116]	; 0x74
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072ec:	637b      	str	r3, [r7, #52]	; 0x34
 80072ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072f4:	e841 2300 	strex	r3, r2, [r1]
 80072f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1e6      	bne.n	80072ce <UART_Start_Receive_IT+0x1be>
 8007300:	e018      	b.n	8007334 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	e853 3f00 	ldrex	r3, [r3]
 800730e:	613b      	str	r3, [r7, #16]
   return(result);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f043 0320 	orr.w	r3, r3, #32
 8007316:	67bb      	str	r3, [r7, #120]	; 0x78
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	461a      	mov	r2, r3
 800731e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007320:	623b      	str	r3, [r7, #32]
 8007322:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007324:	69f9      	ldr	r1, [r7, #28]
 8007326:	6a3a      	ldr	r2, [r7, #32]
 8007328:	e841 2300 	strex	r3, r2, [r1]
 800732c:	61bb      	str	r3, [r7, #24]
   return(result);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e6      	bne.n	8007302 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	378c      	adds	r7, #140	; 0x8c
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
 8007342:	bf00      	nop
 8007344:	08007b75 	.word	0x08007b75
 8007348:	08007815 	.word	0x08007815
 800734c:	0800765d 	.word	0x0800765d
 8007350:	080074a5 	.word	0x080074a5

08007354 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b095      	sub	sp, #84	; 0x54
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800736a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007370:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800737a:	643b      	str	r3, [r7, #64]	; 0x40
 800737c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007380:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e6      	bne.n	800735c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3308      	adds	r3, #8
 8007394:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	e853 3f00 	ldrex	r3, [r3]
 800739c:	61fb      	str	r3, [r7, #28]
   return(result);
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073a4:	f023 0301 	bic.w	r3, r3, #1
 80073a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e3      	bne.n	800738e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d118      	bne.n	8007400 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	e853 3f00 	ldrex	r3, [r3]
 80073da:	60bb      	str	r3, [r7, #8]
   return(result);
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	f023 0310 	bic.w	r3, r3, #16
 80073e2:	647b      	str	r3, [r7, #68]	; 0x44
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f0:	6979      	ldr	r1, [r7, #20]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	e841 2300 	strex	r3, r2, [r1]
 80073f8:	613b      	str	r3, [r7, #16]
   return(result);
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d1e6      	bne.n	80073ce <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2220      	movs	r2, #32
 8007404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007414:	bf00      	nop
 8007416:	3754      	adds	r7, #84	; 0x54
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f7ff f99a 	bl	8006778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007444:	bf00      	nop
 8007446:	3710      	adds	r7, #16
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	e853 3f00 	ldrex	r3, [r3]
 8007460:	60bb      	str	r3, [r7, #8]
   return(result);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007468:	61fb      	str	r3, [r7, #28]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	61bb      	str	r3, [r7, #24]
 8007474:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007476:	6979      	ldr	r1, [r7, #20]
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	e841 2300 	strex	r3, r2, [r1]
 800747e:	613b      	str	r3, [r7, #16]
   return(result);
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1e6      	bne.n	8007454 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2220      	movs	r2, #32
 800748a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff f965 	bl	8006764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800749a:	bf00      	nop
 800749c:	3720      	adds	r7, #32
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b09c      	sub	sp, #112	; 0x70
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074bc:	2b22      	cmp	r3, #34	; 0x22
 80074be:	f040 80be 	bne.w	800763e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80074d0:	b2d9      	uxtb	r1, r3
 80074d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80074d6:	b2da      	uxtb	r2, r3
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074dc:	400a      	ands	r2, r1
 80074de:	b2d2      	uxtb	r2, r2
 80074e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007504:	b29b      	uxth	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	f040 80a1 	bne.w	800764e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800751a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800751c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007520:	66bb      	str	r3, [r7, #104]	; 0x68
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800752a:	65bb      	str	r3, [r7, #88]	; 0x58
 800752c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007530:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007532:	e841 2300 	strex	r3, r2, [r1]
 8007536:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1e6      	bne.n	800750c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	e853 3f00 	ldrex	r3, [r3]
 800754c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800754e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007550:	f023 0301 	bic.w	r3, r3, #1
 8007554:	667b      	str	r3, [r7, #100]	; 0x64
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3308      	adds	r3, #8
 800755c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800755e:	647a      	str	r2, [r7, #68]	; 0x44
 8007560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800756c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e5      	bne.n	800753e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2220      	movs	r2, #32
 8007576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a33      	ldr	r2, [pc, #204]	; (8007658 <UART_RxISR_8BIT+0x1b4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d01f      	beq.n	80075d0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d018      	beq.n	80075d0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	e853 3f00 	ldrex	r3, [r3]
 80075aa:	623b      	str	r3, [r7, #32]
   return(result);
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075b2:	663b      	str	r3, [r7, #96]	; 0x60
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075bc:	633b      	str	r3, [r7, #48]	; 0x30
 80075be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075c4:	e841 2300 	strex	r3, r2, [r1]
 80075c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e6      	bne.n	800759e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d12e      	bne.n	8007636 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f023 0310 	bic.w	r3, r3, #16
 80075f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	461a      	mov	r2, r3
 80075fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	69b9      	ldr	r1, [r7, #24]
 8007602:	69fa      	ldr	r2, [r7, #28]
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	617b      	str	r3, [r7, #20]
   return(result);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e6      	bne.n	80075de <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b10      	cmp	r3, #16
 800761c:	d103      	bne.n	8007626 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2210      	movs	r2, #16
 8007624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7ff f8ac 	bl	800678c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007634:	e00b      	b.n	800764e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fa fe9e 	bl	8002378 <HAL_UART_RxCpltCallback>
}
 800763c:	e007      	b.n	800764e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	699a      	ldr	r2, [r3, #24]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f042 0208 	orr.w	r2, r2, #8
 800764c:	619a      	str	r2, [r3, #24]
}
 800764e:	bf00      	nop
 8007650:	3770      	adds	r7, #112	; 0x70
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	40008000 	.word	0x40008000

0800765c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b09c      	sub	sp, #112	; 0x70
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800766a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007674:	2b22      	cmp	r3, #34	; 0x22
 8007676:	f040 80be 	bne.w	80077f6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007680:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007688:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800768a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800768e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007692:	4013      	ands	r3, r2
 8007694:	b29a      	uxth	r2, r3
 8007696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007698:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800769e:	1c9a      	adds	r2, r3, #2
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	f040 80a1 	bne.w	8007806 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80076d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076d8:	667b      	str	r3, [r7, #100]	; 0x64
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076e2:	657b      	str	r3, [r7, #84]	; 0x54
 80076e4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e6      	bne.n	80076c4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3308      	adds	r3, #8
 80076fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	f023 0301 	bic.w	r3, r3, #1
 800770c:	663b      	str	r3, [r7, #96]	; 0x60
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3308      	adds	r3, #8
 8007714:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007716:	643a      	str	r2, [r7, #64]	; 0x40
 8007718:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800771c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e5      	bne.n	80076f6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a33      	ldr	r2, [pc, #204]	; (8007810 <UART_RxISR_16BIT+0x1b4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d01f      	beq.n	8007788 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d018      	beq.n	8007788 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	e853 3f00 	ldrex	r3, [r3]
 8007762:	61fb      	str	r3, [r7, #28]
   return(result);
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800776a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	461a      	mov	r2, r3
 8007772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007776:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800777a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777c:	e841 2300 	strex	r3, r2, [r1]
 8007780:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	d1e6      	bne.n	8007756 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800778c:	2b01      	cmp	r3, #1
 800778e:	d12e      	bne.n	80077ee <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	e853 3f00 	ldrex	r3, [r3]
 80077a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	f023 0310 	bic.w	r3, r3, #16
 80077aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6979      	ldr	r1, [r7, #20]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	e841 2300 	strex	r3, r2, [r1]
 80077c0:	613b      	str	r3, [r7, #16]
   return(result);
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d1e6      	bne.n	8007796 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	f003 0310 	and.w	r3, r3, #16
 80077d2:	2b10      	cmp	r3, #16
 80077d4:	d103      	bne.n	80077de <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	2210      	movs	r2, #16
 80077dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fe ffd0 	bl	800678c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077ec:	e00b      	b.n	8007806 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7fa fdc2 	bl	8002378 <HAL_UART_RxCpltCallback>
}
 80077f4:	e007      	b.n	8007806 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	699a      	ldr	r2, [r3, #24]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0208 	orr.w	r2, r2, #8
 8007804:	619a      	str	r2, [r3, #24]
}
 8007806:	bf00      	nop
 8007808:	3770      	adds	r7, #112	; 0x70
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	40008000 	.word	0x40008000

08007814 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b0ac      	sub	sp, #176	; 0xb0
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007822:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800784a:	2b22      	cmp	r3, #34	; 0x22
 800784c:	f040 8182 	bne.w	8007b54 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007856:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800785a:	e125      	b.n	8007aa8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007862:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007866:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800786a:	b2d9      	uxtb	r1, r3
 800786c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007870:	b2da      	uxtb	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007876:	400a      	ands	r2, r1
 8007878:	b2d2      	uxtb	r2, r2
 800787a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800788c:	b29b      	uxth	r3, r3
 800788e:	3b01      	subs	r3, #1
 8007890:	b29a      	uxth	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	69db      	ldr	r3, [r3, #28]
 800789e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80078a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d053      	beq.n	8007956 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078b2:	f003 0301 	and.w	r3, r3, #1
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d011      	beq.n	80078de <UART_RxISR_8BIT_FIFOEN+0xca>
 80078ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2201      	movs	r2, #1
 80078cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078d4:	f043 0201 	orr.w	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078e2:	f003 0302 	and.w	r3, r3, #2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d011      	beq.n	800790e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80078ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2202      	movs	r2, #2
 80078fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007904:	f043 0204 	orr.w	r2, r3, #4
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800790e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007912:	f003 0304 	and.w	r3, r3, #4
 8007916:	2b00      	cmp	r3, #0
 8007918:	d011      	beq.n	800793e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800791a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2204      	movs	r2, #4
 800792c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007934:	f043 0202 	orr.w	r2, r3, #2
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007944:	2b00      	cmp	r3, #0
 8007946:	d006      	beq.n	8007956 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7fe ff15 	bl	8006778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	f040 80a2 	bne.w	8007aa8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800796c:	e853 3f00 	ldrex	r3, [r3]
 8007970:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007978:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007986:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007988:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800798c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800798e:	e841 2300 	strex	r3, r2, [r1]
 8007992:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1e4      	bne.n	8007964 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	3308      	adds	r3, #8
 80079a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079a4:	e853 3f00 	ldrex	r3, [r3]
 80079a8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80079aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079b0:	f023 0301 	bic.w	r3, r3, #1
 80079b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	3308      	adds	r3, #8
 80079be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079c2:	66ba      	str	r2, [r7, #104]	; 0x68
 80079c4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80079c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80079d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e1      	bne.n	800799a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a5f      	ldr	r2, [pc, #380]	; (8007b6c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d021      	beq.n	8007a38 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d01a      	beq.n	8007a38 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a24:	657b      	str	r3, [r7, #84]	; 0x54
 8007a26:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a2a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a2c:	e841 2300 	strex	r3, r2, [r1]
 8007a30:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d1e4      	bne.n	8007a02 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d130      	bne.n	8007aa2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4e:	e853 3f00 	ldrex	r3, [r3]
 8007a52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a56:	f023 0310 	bic.w	r3, r3, #16
 8007a5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	461a      	mov	r2, r3
 8007a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a68:	643b      	str	r3, [r7, #64]	; 0x40
 8007a6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a70:	e841 2300 	strex	r3, r2, [r1]
 8007a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1e4      	bne.n	8007a46 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	f003 0310 	and.w	r3, r3, #16
 8007a86:	2b10      	cmp	r3, #16
 8007a88:	d103      	bne.n	8007a92 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2210      	movs	r2, #16
 8007a90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a98:	4619      	mov	r1, r3
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fe fe76 	bl	800678c <HAL_UARTEx_RxEventCallback>
 8007aa0:	e002      	b.n	8007aa8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fa fc68 	bl	8002378 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007aa8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d006      	beq.n	8007abe <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007ab0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ab4:	f003 0320 	and.w	r3, r3, #32
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	f47f aecf 	bne.w	800785c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ac4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ac8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d049      	beq.n	8007b64 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ad6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d242      	bcs.n	8007b64 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3308      	adds	r3, #8
 8007afe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e3      	bne.n	8007ade <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	4a15      	ldr	r2, [pc, #84]	; (8007b70 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007b1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f043 0320 	orr.w	r3, r3, #32
 8007b30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	461a      	mov	r2, r3
 8007b3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b3e:	61bb      	str	r3, [r7, #24]
 8007b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6979      	ldr	r1, [r7, #20]
 8007b44:	69ba      	ldr	r2, [r7, #24]
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e4      	bne.n	8007b1c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b52:	e007      	b.n	8007b64 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f042 0208 	orr.w	r2, r2, #8
 8007b62:	619a      	str	r2, [r3, #24]
}
 8007b64:	bf00      	nop
 8007b66:	37b0      	adds	r7, #176	; 0xb0
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	40008000 	.word	0x40008000
 8007b70:	080074a5 	.word	0x080074a5

08007b74 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b0ae      	sub	sp, #184	; 0xb8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b82:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007baa:	2b22      	cmp	r3, #34	; 0x22
 8007bac:	f040 8186 	bne.w	8007ebc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bb6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bba:	e129      	b.n	8007e10 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc2:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007bce:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007bd2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bde:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be4:	1c9a      	adds	r2, r3, #2
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d053      	beq.n	8007cba <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d011      	beq.n	8007c42 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007c1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00b      	beq.n	8007c42 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c38:	f043 0201 	orr.w	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d011      	beq.n	8007c72 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00b      	beq.n	8007c72 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c68:	f043 0204 	orr.w	r2, r3, #4
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d011      	beq.n	8007ca2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007c7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00b      	beq.n	8007ca2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2204      	movs	r2, #4
 8007c90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c98:	f043 0202 	orr.w	r2, r3, #2
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d006      	beq.n	8007cba <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7fe fd63 	bl	8006778 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f040 80a4 	bne.w	8007e10 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cd0:	e853 3f00 	ldrex	r3, [r3]
 8007cd4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cee:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e2      	bne.n	8007cc8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3308      	adds	r3, #8
 8007d08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d18:	f023 0301 	bic.w	r3, r3, #1
 8007d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	3308      	adds	r3, #8
 8007d26:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007d2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e1      	bne.n	8007d02 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a5f      	ldr	r2, [pc, #380]	; (8007ed4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d021      	beq.n	8007da0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01a      	beq.n	8007da0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e4      	bne.n	8007d6a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d130      	bne.n	8007e0a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	e853 3f00 	ldrex	r3, [r3]
 8007dba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dbe:	f023 0310 	bic.w	r3, r3, #16
 8007dc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dd8:	e841 2300 	strex	r3, r2, [r1]
 8007ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1e4      	bne.n	8007dae <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	69db      	ldr	r3, [r3, #28]
 8007dea:	f003 0310 	and.w	r3, r3, #16
 8007dee:	2b10      	cmp	r3, #16
 8007df0:	d103      	bne.n	8007dfa <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2210      	movs	r2, #16
 8007df8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f7fe fcc2 	bl	800678c <HAL_UARTEx_RxEventCallback>
 8007e08:	e002      	b.n	8007e10 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7fa fab4 	bl	8002378 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e10:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d006      	beq.n	8007e26 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007e18:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e1c:	f003 0320 	and.w	r3, r3, #32
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f47f aecb 	bne.w	8007bbc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e2c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e30:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d049      	beq.n	8007ecc <UART_RxISR_16BIT_FIFOEN+0x358>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e3e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d242      	bcs.n	8007ecc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	e853 3f00 	ldrex	r3, [r3]
 8007e54:	623b      	str	r3, [r7, #32]
   return(result);
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3308      	adds	r3, #8
 8007e66:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007e6a:	633a      	str	r2, [r7, #48]	; 0x30
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e72:	e841 2300 	strex	r3, r2, [r1]
 8007e76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1e3      	bne.n	8007e46 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a15      	ldr	r2, [pc, #84]	; (8007ed8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007e82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f043 0320 	orr.w	r3, r3, #32
 8007e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ea6:	61fb      	str	r3, [r7, #28]
 8007ea8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eaa:	69b9      	ldr	r1, [r7, #24]
 8007eac:	69fa      	ldr	r2, [r7, #28]
 8007eae:	e841 2300 	strex	r3, r2, [r1]
 8007eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d1e4      	bne.n	8007e84 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007eba:	e007      	b.n	8007ecc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	699a      	ldr	r2, [r3, #24]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f042 0208 	orr.w	r2, r2, #8
 8007eca:	619a      	str	r2, [r3, #24]
}
 8007ecc:	bf00      	nop
 8007ece:	37b8      	adds	r7, #184	; 0xb8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40008000 	.word	0x40008000
 8007ed8:	0800765d 	.word	0x0800765d

08007edc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ef8:	bf00      	nop
 8007efa:	370c      	adds	r7, #12
 8007efc:	46bd      	mov	sp, r7
 8007efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f02:	4770      	bx	lr

08007f04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b083      	sub	sp, #12
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr

08007f18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d101      	bne.n	8007f2e <HAL_UARTEx_DisableFifoMode+0x16>
 8007f2a:	2302      	movs	r3, #2
 8007f2c:	e027      	b.n	8007f7e <HAL_UARTEx_DisableFifoMode+0x66>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2224      	movs	r2, #36	; 0x24
 8007f3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681a      	ldr	r2, [r3, #0]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f022 0201 	bic.w	r2, r2, #1
 8007f54:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2220      	movs	r2, #32
 8007f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b084      	sub	sp, #16
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e02d      	b.n	8007ffe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2224      	movs	r2, #36	; 0x24
 8007fae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	683a      	ldr	r2, [r7, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f850 	bl	8008084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}

08008006 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008006:	b580      	push	{r7, lr}
 8008008:	b084      	sub	sp, #16
 800800a:	af00      	add	r7, sp, #0
 800800c:	6078      	str	r0, [r7, #4]
 800800e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008016:	2b01      	cmp	r3, #1
 8008018:	d101      	bne.n	800801e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800801a:	2302      	movs	r3, #2
 800801c:	e02d      	b.n	800807a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2201      	movs	r2, #1
 8008022:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2224      	movs	r2, #36	; 0x24
 800802a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0201 	bic.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	683a      	ldr	r2, [r7, #0]
 8008056:	430a      	orrs	r2, r1
 8008058:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f812 	bl	8008084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2220      	movs	r2, #32
 800806c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
	...

08008084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008090:	2b00      	cmp	r3, #0
 8008092:	d108      	bne.n	80080a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080a4:	e031      	b.n	800810a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080a6:	2308      	movs	r3, #8
 80080a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080aa:	2308      	movs	r3, #8
 80080ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	0e5b      	lsrs	r3, r3, #25
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	f003 0307 	and.w	r3, r3, #7
 80080bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	0f5b      	lsrs	r3, r3, #29
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	f003 0307 	and.w	r3, r3, #7
 80080cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
 80080d0:	7b3a      	ldrb	r2, [r7, #12]
 80080d2:	4911      	ldr	r1, [pc, #68]	; (8008118 <UARTEx_SetNbDataToProcess+0x94>)
 80080d4:	5c8a      	ldrb	r2, [r1, r2]
 80080d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080da:	7b3a      	ldrb	r2, [r7, #12]
 80080dc:	490f      	ldr	r1, [pc, #60]	; (800811c <UARTEx_SetNbDataToProcess+0x98>)
 80080de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80080e4:	b29a      	uxth	r2, r3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	7b7a      	ldrb	r2, [r7, #13]
 80080f0:	4909      	ldr	r1, [pc, #36]	; (8008118 <UARTEx_SetNbDataToProcess+0x94>)
 80080f2:	5c8a      	ldrb	r2, [r1, r2]
 80080f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080f8:	7b7a      	ldrb	r2, [r7, #13]
 80080fa:	4908      	ldr	r1, [pc, #32]	; (800811c <UARTEx_SetNbDataToProcess+0x98>)
 80080fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008102:	b29a      	uxth	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800810a:	bf00      	nop
 800810c:	3714      	adds	r7, #20
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr
 8008116:	bf00      	nop
 8008118:	0800d67c 	.word	0x0800d67c
 800811c:	0800d684 	.word	0x0800d684

08008120 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b08a      	sub	sp, #40	; 0x28
 8008124:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008126:	2300      	movs	r3, #0
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800812a:	4b7d      	ldr	r3, [pc, #500]	; (8008320 <xTaskIncrementTick+0x200>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f040 80ec 	bne.w	800830c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008134:	4b7b      	ldr	r3, [pc, #492]	; (8008324 <xTaskIncrementTick+0x204>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	3301      	adds	r3, #1
 800813a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800813c:	4a79      	ldr	r2, [pc, #484]	; (8008324 <xTaskIncrementTick+0x204>)
 800813e:	6a3b      	ldr	r3, [r7, #32]
 8008140:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008142:	6a3b      	ldr	r3, [r7, #32]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d120      	bne.n	800818a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8008148:	4b77      	ldr	r3, [pc, #476]	; (8008328 <xTaskIncrementTick+0x208>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00a      	beq.n	8008168 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008164:	bf00      	nop
 8008166:	e7fe      	b.n	8008166 <xTaskIncrementTick+0x46>
 8008168:	4b6f      	ldr	r3, [pc, #444]	; (8008328 <xTaskIncrementTick+0x208>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	61fb      	str	r3, [r7, #28]
 800816e:	4b6f      	ldr	r3, [pc, #444]	; (800832c <xTaskIncrementTick+0x20c>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a6d      	ldr	r2, [pc, #436]	; (8008328 <xTaskIncrementTick+0x208>)
 8008174:	6013      	str	r3, [r2, #0]
 8008176:	4a6d      	ldr	r2, [pc, #436]	; (800832c <xTaskIncrementTick+0x20c>)
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	4b6c      	ldr	r3, [pc, #432]	; (8008330 <xTaskIncrementTick+0x210>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	3301      	adds	r3, #1
 8008182:	4a6b      	ldr	r2, [pc, #428]	; (8008330 <xTaskIncrementTick+0x210>)
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	f000 f93d 	bl	8008404 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800818a:	4b6a      	ldr	r3, [pc, #424]	; (8008334 <xTaskIncrementTick+0x214>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	6a3a      	ldr	r2, [r7, #32]
 8008190:	429a      	cmp	r2, r3
 8008192:	f0c0 80a6 	bcc.w	80082e2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008196:	4b64      	ldr	r3, [pc, #400]	; (8008328 <xTaskIncrementTick+0x208>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d104      	bne.n	80081aa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081a0:	4b64      	ldr	r3, [pc, #400]	; (8008334 <xTaskIncrementTick+0x214>)
 80081a2:	f04f 32ff 	mov.w	r2, #4294967295
 80081a6:	601a      	str	r2, [r3, #0]
                    break;
 80081a8:	e09b      	b.n	80082e2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081aa:	4b5f      	ldr	r3, [pc, #380]	; (8008328 <xTaskIncrementTick+0x208>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80081ba:	6a3a      	ldr	r2, [r7, #32]
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d203      	bcs.n	80081ca <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80081c2:	4a5c      	ldr	r2, [pc, #368]	; (8008334 <xTaskIncrementTick+0x214>)
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80081c8:	e08b      	b.n	80082e2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	695b      	ldr	r3, [r3, #20]
 80081ce:	613b      	str	r3, [r7, #16]
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	68d2      	ldr	r2, [r2, #12]
 80081d8:	609a      	str	r2, [r3, #8]
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	69ba      	ldr	r2, [r7, #24]
 80081e0:	6892      	ldr	r2, [r2, #8]
 80081e2:	605a      	str	r2, [r3, #4]
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	69bb      	ldr	r3, [r7, #24]
 80081ea:	3304      	adds	r3, #4
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d103      	bne.n	80081f8 <xTaskIncrementTick+0xd8>
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	68da      	ldr	r2, [r3, #12]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	605a      	str	r2, [r3, #4]
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	2200      	movs	r2, #0
 80081fc:	615a      	str	r2, [r3, #20]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	1e5a      	subs	r2, r3, #1
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800820c:	2b00      	cmp	r3, #0
 800820e:	d01e      	beq.n	800824e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008214:	60fb      	str	r3, [r7, #12]
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	69db      	ldr	r3, [r3, #28]
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	6a12      	ldr	r2, [r2, #32]
 800821e:	609a      	str	r2, [r3, #8]
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	6a1b      	ldr	r3, [r3, #32]
 8008224:	69ba      	ldr	r2, [r7, #24]
 8008226:	69d2      	ldr	r2, [r2, #28]
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	69bb      	ldr	r3, [r7, #24]
 8008230:	3318      	adds	r3, #24
 8008232:	429a      	cmp	r2, r3
 8008234:	d103      	bne.n	800823e <xTaskIncrementTick+0x11e>
 8008236:	69bb      	ldr	r3, [r7, #24]
 8008238:	6a1a      	ldr	r2, [r3, #32]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	605a      	str	r2, [r3, #4]
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	2200      	movs	r2, #0
 8008242:	629a      	str	r2, [r3, #40]	; 0x28
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	1e5a      	subs	r2, r3, #1
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008252:	2201      	movs	r2, #1
 8008254:	409a      	lsls	r2, r3
 8008256:	4b38      	ldr	r3, [pc, #224]	; (8008338 <xTaskIncrementTick+0x218>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4313      	orrs	r3, r2
 800825c:	4a36      	ldr	r2, [pc, #216]	; (8008338 <xTaskIncrementTick+0x218>)
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008264:	4935      	ldr	r1, [pc, #212]	; (800833c <xTaskIncrementTick+0x21c>)
 8008266:	4613      	mov	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	4413      	add	r3, r2
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	440b      	add	r3, r1
 8008270:	3304      	adds	r3, #4
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60bb      	str	r3, [r7, #8]
 8008276:	69bb      	ldr	r3, [r7, #24]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	609a      	str	r2, [r3, #8]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	689a      	ldr	r2, [r3, #8]
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	60da      	str	r2, [r3, #12]
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	69ba      	ldr	r2, [r7, #24]
 800828a:	3204      	adds	r2, #4
 800828c:	605a      	str	r2, [r3, #4]
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	1d1a      	adds	r2, r3, #4
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	609a      	str	r2, [r3, #8]
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	4a26      	ldr	r2, [pc, #152]	; (800833c <xTaskIncrementTick+0x21c>)
 80082a4:	441a      	add	r2, r3
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	615a      	str	r2, [r3, #20]
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ae:	4923      	ldr	r1, [pc, #140]	; (800833c <xTaskIncrementTick+0x21c>)
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	440b      	add	r3, r1
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	1c59      	adds	r1, r3, #1
 80082be:	481f      	ldr	r0, [pc, #124]	; (800833c <xTaskIncrementTick+0x21c>)
 80082c0:	4613      	mov	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	4413      	add	r3, r2
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4403      	add	r3, r0
 80082ca:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d0:	4b1b      	ldr	r3, [pc, #108]	; (8008340 <xTaskIncrementTick+0x220>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	429a      	cmp	r2, r3
 80082d8:	f67f af5d 	bls.w	8008196 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80082dc:	2301      	movs	r3, #1
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082e0:	e759      	b.n	8008196 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082e2:	4b17      	ldr	r3, [pc, #92]	; (8008340 <xTaskIncrementTick+0x220>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e8:	4914      	ldr	r1, [pc, #80]	; (800833c <xTaskIncrementTick+0x21c>)
 80082ea:	4613      	mov	r3, r2
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d901      	bls.n	80082fe <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80082fa:	2301      	movs	r3, #1
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80082fe:	4b11      	ldr	r3, [pc, #68]	; (8008344 <xTaskIncrementTick+0x224>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d007      	beq.n	8008316 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8008306:	2301      	movs	r3, #1
 8008308:	627b      	str	r3, [r7, #36]	; 0x24
 800830a:	e004      	b.n	8008316 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800830c:	4b0e      	ldr	r3, [pc, #56]	; (8008348 <xTaskIncrementTick+0x228>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	3301      	adds	r3, #1
 8008312:	4a0d      	ldr	r2, [pc, #52]	; (8008348 <xTaskIncrementTick+0x228>)
 8008314:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008318:	4618      	mov	r0, r3
 800831a:	3728      	adds	r7, #40	; 0x28
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	200006cc 	.word	0x200006cc
 8008324:	200006b4 	.word	0x200006b4
 8008328:	200006ac 	.word	0x200006ac
 800832c:	200006b0 	.word	0x200006b0
 8008330:	200006c4 	.word	0x200006c4
 8008334:	200006c8 	.word	0x200006c8
 8008338:	200006b8 	.word	0x200006b8
 800833c:	20000648 	.word	0x20000648
 8008340:	20000644 	.word	0x20000644
 8008344:	200006c0 	.word	0x200006c0
 8008348:	200006bc 	.word	0x200006bc

0800834c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008352:	4b27      	ldr	r3, [pc, #156]	; (80083f0 <vTaskSwitchContext+0xa4>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800835a:	4b26      	ldr	r3, [pc, #152]	; (80083f4 <vTaskSwitchContext+0xa8>)
 800835c:	2201      	movs	r2, #1
 800835e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008360:	e03f      	b.n	80083e2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8008362:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <vTaskSwitchContext+0xa8>)
 8008364:	2200      	movs	r2, #0
 8008366:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008368:	4b23      	ldr	r3, [pc, #140]	; (80083f8 <vTaskSwitchContext+0xac>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	fab3 f383 	clz	r3, r3
 8008374:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008376:	7afb      	ldrb	r3, [r7, #11]
 8008378:	f1c3 031f 	rsb	r3, r3, #31
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	491f      	ldr	r1, [pc, #124]	; (80083fc <vTaskSwitchContext+0xb0>)
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4613      	mov	r3, r2
 8008384:	009b      	lsls	r3, r3, #2
 8008386:	4413      	add	r3, r2
 8008388:	009b      	lsls	r3, r3, #2
 800838a:	440b      	add	r3, r1
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10a      	bne.n	80083a8 <vTaskSwitchContext+0x5c>
        __asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	607b      	str	r3, [r7, #4]
    }
 80083a4:	bf00      	nop
 80083a6:	e7fe      	b.n	80083a6 <vTaskSwitchContext+0x5a>
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	4613      	mov	r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4413      	add	r3, r2
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	4a12      	ldr	r2, [pc, #72]	; (80083fc <vTaskSwitchContext+0xb0>)
 80083b4:	4413      	add	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	605a      	str	r2, [r3, #4]
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	685a      	ldr	r2, [r3, #4]
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	3308      	adds	r3, #8
 80083ca:	429a      	cmp	r2, r3
 80083cc:	d104      	bne.n	80083d8 <vTaskSwitchContext+0x8c>
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	605a      	str	r2, [r3, #4]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	4a08      	ldr	r2, [pc, #32]	; (8008400 <vTaskSwitchContext+0xb4>)
 80083e0:	6013      	str	r3, [r2, #0]
}
 80083e2:	bf00      	nop
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	200006cc 	.word	0x200006cc
 80083f4:	200006c0 	.word	0x200006c0
 80083f8:	200006b8 	.word	0x200006b8
 80083fc:	20000648 	.word	0x20000648
 8008400:	20000644 	.word	0x20000644

08008404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <prvResetNextTaskUnblockTime+0x30>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008412:	4b09      	ldr	r3, [pc, #36]	; (8008438 <prvResetNextTaskUnblockTime+0x34>)
 8008414:	f04f 32ff 	mov.w	r2, #4294967295
 8008418:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800841a:	e005      	b.n	8008428 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800841c:	4b05      	ldr	r3, [pc, #20]	; (8008434 <prvResetNextTaskUnblockTime+0x30>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a04      	ldr	r2, [pc, #16]	; (8008438 <prvResetNextTaskUnblockTime+0x34>)
 8008426:	6013      	str	r3, [r2, #0]
}
 8008428:	bf00      	nop
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	200006ac 	.word	0x200006ac
 8008438:	200006c8 	.word	0x200006c8
 800843c:	00000000 	.word	0x00000000

08008440 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <pxCurrentTCBConst2>)
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	6808      	ldr	r0, [r1, #0]
 8008446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844a:	f380 8809 	msr	PSP, r0
 800844e:	f3bf 8f6f 	isb	sy
 8008452:	f04f 0000 	mov.w	r0, #0
 8008456:	f380 8811 	msr	BASEPRI, r0
 800845a:	4770      	bx	lr
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst2>:
 8008460:	20000644 	.word	0x20000644
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop
	...

08008470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008470:	f3ef 8009 	mrs	r0, PSP
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	4b15      	ldr	r3, [pc, #84]	; (80084d0 <pxCurrentTCBConst>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	f01e 0f10 	tst.w	lr, #16
 8008480:	bf08      	it	eq
 8008482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848a:	6010      	str	r0, [r2, #0]
 800848c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008490:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008494:	f380 8811 	msr	BASEPRI, r0
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f7ff ff54 	bl	800834c <vTaskSwitchContext>
 80084a4:	f04f 0000 	mov.w	r0, #0
 80084a8:	f380 8811 	msr	BASEPRI, r0
 80084ac:	bc09      	pop	{r0, r3}
 80084ae:	6819      	ldr	r1, [r3, #0]
 80084b0:	6808      	ldr	r0, [r1, #0]
 80084b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b6:	f01e 0f10 	tst.w	lr, #16
 80084ba:	bf08      	it	eq
 80084bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084c0:	f380 8809 	msr	PSP, r0
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	f3af 8000 	nop.w

080084d0 <pxCurrentTCBConst>:
 80084d0:	20000644 	.word	0x20000644
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
        __asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e2:	f383 8811 	msr	BASEPRI, r3
 80084e6:	f3bf 8f6f 	isb	sy
 80084ea:	f3bf 8f4f 	dsb	sy
 80084ee:	607b      	str	r3, [r7, #4]
    }
 80084f0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80084f2:	f7ff fe15 	bl	8008120 <xTaskIncrementTick>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d003      	beq.n	8008504 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084fc:	4b06      	ldr	r3, [pc, #24]	; (8008518 <SysTick_Handler+0x40>)
 80084fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008502:	601a      	str	r2, [r3, #0]
 8008504:	2300      	movs	r3, #0
 8008506:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800850e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008510:	bf00      	nop
 8008512:	3708      	adds	r7, #8
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	e000ed04 	.word	0xe000ed04

0800851c <__cvt>:
 800851c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008520:	ec55 4b10 	vmov	r4, r5, d0
 8008524:	2d00      	cmp	r5, #0
 8008526:	460e      	mov	r6, r1
 8008528:	4619      	mov	r1, r3
 800852a:	462b      	mov	r3, r5
 800852c:	bfbb      	ittet	lt
 800852e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008532:	461d      	movlt	r5, r3
 8008534:	2300      	movge	r3, #0
 8008536:	232d      	movlt	r3, #45	; 0x2d
 8008538:	700b      	strb	r3, [r1, #0]
 800853a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800853c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008540:	4691      	mov	r9, r2
 8008542:	f023 0820 	bic.w	r8, r3, #32
 8008546:	bfbc      	itt	lt
 8008548:	4622      	movlt	r2, r4
 800854a:	4614      	movlt	r4, r2
 800854c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008550:	d005      	beq.n	800855e <__cvt+0x42>
 8008552:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008556:	d100      	bne.n	800855a <__cvt+0x3e>
 8008558:	3601      	adds	r6, #1
 800855a:	2102      	movs	r1, #2
 800855c:	e000      	b.n	8008560 <__cvt+0x44>
 800855e:	2103      	movs	r1, #3
 8008560:	ab03      	add	r3, sp, #12
 8008562:	9301      	str	r3, [sp, #4]
 8008564:	ab02      	add	r3, sp, #8
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	ec45 4b10 	vmov	d0, r4, r5
 800856c:	4653      	mov	r3, sl
 800856e:	4632      	mov	r2, r6
 8008570:	f001 f8ca 	bl	8009708 <_dtoa_r>
 8008574:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008578:	4607      	mov	r7, r0
 800857a:	d102      	bne.n	8008582 <__cvt+0x66>
 800857c:	f019 0f01 	tst.w	r9, #1
 8008580:	d022      	beq.n	80085c8 <__cvt+0xac>
 8008582:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008586:	eb07 0906 	add.w	r9, r7, r6
 800858a:	d110      	bne.n	80085ae <__cvt+0x92>
 800858c:	783b      	ldrb	r3, [r7, #0]
 800858e:	2b30      	cmp	r3, #48	; 0x30
 8008590:	d10a      	bne.n	80085a8 <__cvt+0x8c>
 8008592:	2200      	movs	r2, #0
 8008594:	2300      	movs	r3, #0
 8008596:	4620      	mov	r0, r4
 8008598:	4629      	mov	r1, r5
 800859a:	f7f8 fabd 	bl	8000b18 <__aeabi_dcmpeq>
 800859e:	b918      	cbnz	r0, 80085a8 <__cvt+0x8c>
 80085a0:	f1c6 0601 	rsb	r6, r6, #1
 80085a4:	f8ca 6000 	str.w	r6, [sl]
 80085a8:	f8da 3000 	ldr.w	r3, [sl]
 80085ac:	4499      	add	r9, r3
 80085ae:	2200      	movs	r2, #0
 80085b0:	2300      	movs	r3, #0
 80085b2:	4620      	mov	r0, r4
 80085b4:	4629      	mov	r1, r5
 80085b6:	f7f8 faaf 	bl	8000b18 <__aeabi_dcmpeq>
 80085ba:	b108      	cbz	r0, 80085c0 <__cvt+0xa4>
 80085bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80085c0:	2230      	movs	r2, #48	; 0x30
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	454b      	cmp	r3, r9
 80085c6:	d307      	bcc.n	80085d8 <__cvt+0xbc>
 80085c8:	9b03      	ldr	r3, [sp, #12]
 80085ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085cc:	1bdb      	subs	r3, r3, r7
 80085ce:	4638      	mov	r0, r7
 80085d0:	6013      	str	r3, [r2, #0]
 80085d2:	b004      	add	sp, #16
 80085d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d8:	1c59      	adds	r1, r3, #1
 80085da:	9103      	str	r1, [sp, #12]
 80085dc:	701a      	strb	r2, [r3, #0]
 80085de:	e7f0      	b.n	80085c2 <__cvt+0xa6>

080085e0 <__exponent>:
 80085e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085e2:	4603      	mov	r3, r0
 80085e4:	2900      	cmp	r1, #0
 80085e6:	bfb8      	it	lt
 80085e8:	4249      	neglt	r1, r1
 80085ea:	f803 2b02 	strb.w	r2, [r3], #2
 80085ee:	bfb4      	ite	lt
 80085f0:	222d      	movlt	r2, #45	; 0x2d
 80085f2:	222b      	movge	r2, #43	; 0x2b
 80085f4:	2909      	cmp	r1, #9
 80085f6:	7042      	strb	r2, [r0, #1]
 80085f8:	dd2a      	ble.n	8008650 <__exponent+0x70>
 80085fa:	f10d 0207 	add.w	r2, sp, #7
 80085fe:	4617      	mov	r7, r2
 8008600:	260a      	movs	r6, #10
 8008602:	4694      	mov	ip, r2
 8008604:	fb91 f5f6 	sdiv	r5, r1, r6
 8008608:	fb06 1415 	mls	r4, r6, r5, r1
 800860c:	3430      	adds	r4, #48	; 0x30
 800860e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008612:	460c      	mov	r4, r1
 8008614:	2c63      	cmp	r4, #99	; 0x63
 8008616:	f102 32ff 	add.w	r2, r2, #4294967295
 800861a:	4629      	mov	r1, r5
 800861c:	dcf1      	bgt.n	8008602 <__exponent+0x22>
 800861e:	3130      	adds	r1, #48	; 0x30
 8008620:	f1ac 0402 	sub.w	r4, ip, #2
 8008624:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008628:	1c41      	adds	r1, r0, #1
 800862a:	4622      	mov	r2, r4
 800862c:	42ba      	cmp	r2, r7
 800862e:	d30a      	bcc.n	8008646 <__exponent+0x66>
 8008630:	f10d 0209 	add.w	r2, sp, #9
 8008634:	eba2 020c 	sub.w	r2, r2, ip
 8008638:	42bc      	cmp	r4, r7
 800863a:	bf88      	it	hi
 800863c:	2200      	movhi	r2, #0
 800863e:	4413      	add	r3, r2
 8008640:	1a18      	subs	r0, r3, r0
 8008642:	b003      	add	sp, #12
 8008644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008646:	f812 5b01 	ldrb.w	r5, [r2], #1
 800864a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800864e:	e7ed      	b.n	800862c <__exponent+0x4c>
 8008650:	2330      	movs	r3, #48	; 0x30
 8008652:	3130      	adds	r1, #48	; 0x30
 8008654:	7083      	strb	r3, [r0, #2]
 8008656:	70c1      	strb	r1, [r0, #3]
 8008658:	1d03      	adds	r3, r0, #4
 800865a:	e7f1      	b.n	8008640 <__exponent+0x60>

0800865c <_printf_float>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	ed2d 8b02 	vpush	{d8}
 8008664:	b08d      	sub	sp, #52	; 0x34
 8008666:	460c      	mov	r4, r1
 8008668:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800866c:	4616      	mov	r6, r2
 800866e:	461f      	mov	r7, r3
 8008670:	4605      	mov	r5, r0
 8008672:	f000 ff33 	bl	80094dc <_localeconv_r>
 8008676:	f8d0 a000 	ldr.w	sl, [r0]
 800867a:	4650      	mov	r0, sl
 800867c:	f7f7 fe20 	bl	80002c0 <strlen>
 8008680:	2300      	movs	r3, #0
 8008682:	930a      	str	r3, [sp, #40]	; 0x28
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	9305      	str	r3, [sp, #20]
 8008688:	f8d8 3000 	ldr.w	r3, [r8]
 800868c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008690:	3307      	adds	r3, #7
 8008692:	f023 0307 	bic.w	r3, r3, #7
 8008696:	f103 0208 	add.w	r2, r3, #8
 800869a:	f8c8 2000 	str.w	r2, [r8]
 800869e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80086a6:	9307      	str	r3, [sp, #28]
 80086a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80086ac:	ee08 0a10 	vmov	s16, r0
 80086b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80086b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086b8:	4b9e      	ldr	r3, [pc, #632]	; (8008934 <_printf_float+0x2d8>)
 80086ba:	f04f 32ff 	mov.w	r2, #4294967295
 80086be:	f7f8 fa5d 	bl	8000b7c <__aeabi_dcmpun>
 80086c2:	bb88      	cbnz	r0, 8008728 <_printf_float+0xcc>
 80086c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086c8:	4b9a      	ldr	r3, [pc, #616]	; (8008934 <_printf_float+0x2d8>)
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295
 80086ce:	f7f8 fa37 	bl	8000b40 <__aeabi_dcmple>
 80086d2:	bb48      	cbnz	r0, 8008728 <_printf_float+0xcc>
 80086d4:	2200      	movs	r2, #0
 80086d6:	2300      	movs	r3, #0
 80086d8:	4640      	mov	r0, r8
 80086da:	4649      	mov	r1, r9
 80086dc:	f7f8 fa26 	bl	8000b2c <__aeabi_dcmplt>
 80086e0:	b110      	cbz	r0, 80086e8 <_printf_float+0x8c>
 80086e2:	232d      	movs	r3, #45	; 0x2d
 80086e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086e8:	4a93      	ldr	r2, [pc, #588]	; (8008938 <_printf_float+0x2dc>)
 80086ea:	4b94      	ldr	r3, [pc, #592]	; (800893c <_printf_float+0x2e0>)
 80086ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086f0:	bf94      	ite	ls
 80086f2:	4690      	movls	r8, r2
 80086f4:	4698      	movhi	r8, r3
 80086f6:	2303      	movs	r3, #3
 80086f8:	6123      	str	r3, [r4, #16]
 80086fa:	9b05      	ldr	r3, [sp, #20]
 80086fc:	f023 0304 	bic.w	r3, r3, #4
 8008700:	6023      	str	r3, [r4, #0]
 8008702:	f04f 0900 	mov.w	r9, #0
 8008706:	9700      	str	r7, [sp, #0]
 8008708:	4633      	mov	r3, r6
 800870a:	aa0b      	add	r2, sp, #44	; 0x2c
 800870c:	4621      	mov	r1, r4
 800870e:	4628      	mov	r0, r5
 8008710:	f000 f9da 	bl	8008ac8 <_printf_common>
 8008714:	3001      	adds	r0, #1
 8008716:	f040 8090 	bne.w	800883a <_printf_float+0x1de>
 800871a:	f04f 30ff 	mov.w	r0, #4294967295
 800871e:	b00d      	add	sp, #52	; 0x34
 8008720:	ecbd 8b02 	vpop	{d8}
 8008724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	4642      	mov	r2, r8
 800872a:	464b      	mov	r3, r9
 800872c:	4640      	mov	r0, r8
 800872e:	4649      	mov	r1, r9
 8008730:	f7f8 fa24 	bl	8000b7c <__aeabi_dcmpun>
 8008734:	b140      	cbz	r0, 8008748 <_printf_float+0xec>
 8008736:	464b      	mov	r3, r9
 8008738:	2b00      	cmp	r3, #0
 800873a:	bfbc      	itt	lt
 800873c:	232d      	movlt	r3, #45	; 0x2d
 800873e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008742:	4a7f      	ldr	r2, [pc, #508]	; (8008940 <_printf_float+0x2e4>)
 8008744:	4b7f      	ldr	r3, [pc, #508]	; (8008944 <_printf_float+0x2e8>)
 8008746:	e7d1      	b.n	80086ec <_printf_float+0x90>
 8008748:	6863      	ldr	r3, [r4, #4]
 800874a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800874e:	9206      	str	r2, [sp, #24]
 8008750:	1c5a      	adds	r2, r3, #1
 8008752:	d13f      	bne.n	80087d4 <_printf_float+0x178>
 8008754:	2306      	movs	r3, #6
 8008756:	6063      	str	r3, [r4, #4]
 8008758:	9b05      	ldr	r3, [sp, #20]
 800875a:	6861      	ldr	r1, [r4, #4]
 800875c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008760:	2300      	movs	r3, #0
 8008762:	9303      	str	r3, [sp, #12]
 8008764:	ab0a      	add	r3, sp, #40	; 0x28
 8008766:	e9cd b301 	strd	fp, r3, [sp, #4]
 800876a:	ab09      	add	r3, sp, #36	; 0x24
 800876c:	ec49 8b10 	vmov	d0, r8, r9
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	6022      	str	r2, [r4, #0]
 8008774:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008778:	4628      	mov	r0, r5
 800877a:	f7ff fecf 	bl	800851c <__cvt>
 800877e:	9b06      	ldr	r3, [sp, #24]
 8008780:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008782:	2b47      	cmp	r3, #71	; 0x47
 8008784:	4680      	mov	r8, r0
 8008786:	d108      	bne.n	800879a <_printf_float+0x13e>
 8008788:	1cc8      	adds	r0, r1, #3
 800878a:	db02      	blt.n	8008792 <_printf_float+0x136>
 800878c:	6863      	ldr	r3, [r4, #4]
 800878e:	4299      	cmp	r1, r3
 8008790:	dd41      	ble.n	8008816 <_printf_float+0x1ba>
 8008792:	f1ab 0302 	sub.w	r3, fp, #2
 8008796:	fa5f fb83 	uxtb.w	fp, r3
 800879a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800879e:	d820      	bhi.n	80087e2 <_printf_float+0x186>
 80087a0:	3901      	subs	r1, #1
 80087a2:	465a      	mov	r2, fp
 80087a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80087a8:	9109      	str	r1, [sp, #36]	; 0x24
 80087aa:	f7ff ff19 	bl	80085e0 <__exponent>
 80087ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087b0:	1813      	adds	r3, r2, r0
 80087b2:	2a01      	cmp	r2, #1
 80087b4:	4681      	mov	r9, r0
 80087b6:	6123      	str	r3, [r4, #16]
 80087b8:	dc02      	bgt.n	80087c0 <_printf_float+0x164>
 80087ba:	6822      	ldr	r2, [r4, #0]
 80087bc:	07d2      	lsls	r2, r2, #31
 80087be:	d501      	bpl.n	80087c4 <_printf_float+0x168>
 80087c0:	3301      	adds	r3, #1
 80087c2:	6123      	str	r3, [r4, #16]
 80087c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d09c      	beq.n	8008706 <_printf_float+0xaa>
 80087cc:	232d      	movs	r3, #45	; 0x2d
 80087ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087d2:	e798      	b.n	8008706 <_printf_float+0xaa>
 80087d4:	9a06      	ldr	r2, [sp, #24]
 80087d6:	2a47      	cmp	r2, #71	; 0x47
 80087d8:	d1be      	bne.n	8008758 <_printf_float+0xfc>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1bc      	bne.n	8008758 <_printf_float+0xfc>
 80087de:	2301      	movs	r3, #1
 80087e0:	e7b9      	b.n	8008756 <_printf_float+0xfa>
 80087e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087e6:	d118      	bne.n	800881a <_printf_float+0x1be>
 80087e8:	2900      	cmp	r1, #0
 80087ea:	6863      	ldr	r3, [r4, #4]
 80087ec:	dd0b      	ble.n	8008806 <_printf_float+0x1aa>
 80087ee:	6121      	str	r1, [r4, #16]
 80087f0:	b913      	cbnz	r3, 80087f8 <_printf_float+0x19c>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	07d0      	lsls	r0, r2, #31
 80087f6:	d502      	bpl.n	80087fe <_printf_float+0x1a2>
 80087f8:	3301      	adds	r3, #1
 80087fa:	440b      	add	r3, r1
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8008800:	f04f 0900 	mov.w	r9, #0
 8008804:	e7de      	b.n	80087c4 <_printf_float+0x168>
 8008806:	b913      	cbnz	r3, 800880e <_printf_float+0x1b2>
 8008808:	6822      	ldr	r2, [r4, #0]
 800880a:	07d2      	lsls	r2, r2, #31
 800880c:	d501      	bpl.n	8008812 <_printf_float+0x1b6>
 800880e:	3302      	adds	r3, #2
 8008810:	e7f4      	b.n	80087fc <_printf_float+0x1a0>
 8008812:	2301      	movs	r3, #1
 8008814:	e7f2      	b.n	80087fc <_printf_float+0x1a0>
 8008816:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800881a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881c:	4299      	cmp	r1, r3
 800881e:	db05      	blt.n	800882c <_printf_float+0x1d0>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	6121      	str	r1, [r4, #16]
 8008824:	07d8      	lsls	r0, r3, #31
 8008826:	d5ea      	bpl.n	80087fe <_printf_float+0x1a2>
 8008828:	1c4b      	adds	r3, r1, #1
 800882a:	e7e7      	b.n	80087fc <_printf_float+0x1a0>
 800882c:	2900      	cmp	r1, #0
 800882e:	bfd4      	ite	le
 8008830:	f1c1 0202 	rsble	r2, r1, #2
 8008834:	2201      	movgt	r2, #1
 8008836:	4413      	add	r3, r2
 8008838:	e7e0      	b.n	80087fc <_printf_float+0x1a0>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	055a      	lsls	r2, r3, #21
 800883e:	d407      	bmi.n	8008850 <_printf_float+0x1f4>
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	4642      	mov	r2, r8
 8008844:	4631      	mov	r1, r6
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	d12c      	bne.n	80088a8 <_printf_float+0x24c>
 800884e:	e764      	b.n	800871a <_printf_float+0xbe>
 8008850:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008854:	f240 80e0 	bls.w	8008a18 <_printf_float+0x3bc>
 8008858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800885c:	2200      	movs	r2, #0
 800885e:	2300      	movs	r3, #0
 8008860:	f7f8 f95a 	bl	8000b18 <__aeabi_dcmpeq>
 8008864:	2800      	cmp	r0, #0
 8008866:	d034      	beq.n	80088d2 <_printf_float+0x276>
 8008868:	4a37      	ldr	r2, [pc, #220]	; (8008948 <_printf_float+0x2ec>)
 800886a:	2301      	movs	r3, #1
 800886c:	4631      	mov	r1, r6
 800886e:	4628      	mov	r0, r5
 8008870:	47b8      	blx	r7
 8008872:	3001      	adds	r0, #1
 8008874:	f43f af51 	beq.w	800871a <_printf_float+0xbe>
 8008878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800887c:	429a      	cmp	r2, r3
 800887e:	db02      	blt.n	8008886 <_printf_float+0x22a>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	07d8      	lsls	r0, r3, #31
 8008884:	d510      	bpl.n	80088a8 <_printf_float+0x24c>
 8008886:	ee18 3a10 	vmov	r3, s16
 800888a:	4652      	mov	r2, sl
 800888c:	4631      	mov	r1, r6
 800888e:	4628      	mov	r0, r5
 8008890:	47b8      	blx	r7
 8008892:	3001      	adds	r0, #1
 8008894:	f43f af41 	beq.w	800871a <_printf_float+0xbe>
 8008898:	f04f 0800 	mov.w	r8, #0
 800889c:	f104 091a 	add.w	r9, r4, #26
 80088a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a2:	3b01      	subs	r3, #1
 80088a4:	4543      	cmp	r3, r8
 80088a6:	dc09      	bgt.n	80088bc <_printf_float+0x260>
 80088a8:	6823      	ldr	r3, [r4, #0]
 80088aa:	079b      	lsls	r3, r3, #30
 80088ac:	f100 8107 	bmi.w	8008abe <_printf_float+0x462>
 80088b0:	68e0      	ldr	r0, [r4, #12]
 80088b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088b4:	4298      	cmp	r0, r3
 80088b6:	bfb8      	it	lt
 80088b8:	4618      	movlt	r0, r3
 80088ba:	e730      	b.n	800871e <_printf_float+0xc2>
 80088bc:	2301      	movs	r3, #1
 80088be:	464a      	mov	r2, r9
 80088c0:	4631      	mov	r1, r6
 80088c2:	4628      	mov	r0, r5
 80088c4:	47b8      	blx	r7
 80088c6:	3001      	adds	r0, #1
 80088c8:	f43f af27 	beq.w	800871a <_printf_float+0xbe>
 80088cc:	f108 0801 	add.w	r8, r8, #1
 80088d0:	e7e6      	b.n	80088a0 <_printf_float+0x244>
 80088d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dc39      	bgt.n	800894c <_printf_float+0x2f0>
 80088d8:	4a1b      	ldr	r2, [pc, #108]	; (8008948 <_printf_float+0x2ec>)
 80088da:	2301      	movs	r3, #1
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f af19 	beq.w	800871a <_printf_float+0xbe>
 80088e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80088ec:	4313      	orrs	r3, r2
 80088ee:	d102      	bne.n	80088f6 <_printf_float+0x29a>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	07d9      	lsls	r1, r3, #31
 80088f4:	d5d8      	bpl.n	80088a8 <_printf_float+0x24c>
 80088f6:	ee18 3a10 	vmov	r3, s16
 80088fa:	4652      	mov	r2, sl
 80088fc:	4631      	mov	r1, r6
 80088fe:	4628      	mov	r0, r5
 8008900:	47b8      	blx	r7
 8008902:	3001      	adds	r0, #1
 8008904:	f43f af09 	beq.w	800871a <_printf_float+0xbe>
 8008908:	f04f 0900 	mov.w	r9, #0
 800890c:	f104 0a1a 	add.w	sl, r4, #26
 8008910:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008912:	425b      	negs	r3, r3
 8008914:	454b      	cmp	r3, r9
 8008916:	dc01      	bgt.n	800891c <_printf_float+0x2c0>
 8008918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800891a:	e792      	b.n	8008842 <_printf_float+0x1e6>
 800891c:	2301      	movs	r3, #1
 800891e:	4652      	mov	r2, sl
 8008920:	4631      	mov	r1, r6
 8008922:	4628      	mov	r0, r5
 8008924:	47b8      	blx	r7
 8008926:	3001      	adds	r0, #1
 8008928:	f43f aef7 	beq.w	800871a <_printf_float+0xbe>
 800892c:	f109 0901 	add.w	r9, r9, #1
 8008930:	e7ee      	b.n	8008910 <_printf_float+0x2b4>
 8008932:	bf00      	nop
 8008934:	7fefffff 	.word	0x7fefffff
 8008938:	0800d68c 	.word	0x0800d68c
 800893c:	0800d690 	.word	0x0800d690
 8008940:	0800d694 	.word	0x0800d694
 8008944:	0800d698 	.word	0x0800d698
 8008948:	0800da28 	.word	0x0800da28
 800894c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800894e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008950:	429a      	cmp	r2, r3
 8008952:	bfa8      	it	ge
 8008954:	461a      	movge	r2, r3
 8008956:	2a00      	cmp	r2, #0
 8008958:	4691      	mov	r9, r2
 800895a:	dc37      	bgt.n	80089cc <_printf_float+0x370>
 800895c:	f04f 0b00 	mov.w	fp, #0
 8008960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008964:	f104 021a 	add.w	r2, r4, #26
 8008968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	eba3 0309 	sub.w	r3, r3, r9
 8008970:	455b      	cmp	r3, fp
 8008972:	dc33      	bgt.n	80089dc <_printf_float+0x380>
 8008974:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008978:	429a      	cmp	r2, r3
 800897a:	db3b      	blt.n	80089f4 <_printf_float+0x398>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07da      	lsls	r2, r3, #31
 8008980:	d438      	bmi.n	80089f4 <_printf_float+0x398>
 8008982:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008986:	eba2 0903 	sub.w	r9, r2, r3
 800898a:	9b05      	ldr	r3, [sp, #20]
 800898c:	1ad2      	subs	r2, r2, r3
 800898e:	4591      	cmp	r9, r2
 8008990:	bfa8      	it	ge
 8008992:	4691      	movge	r9, r2
 8008994:	f1b9 0f00 	cmp.w	r9, #0
 8008998:	dc35      	bgt.n	8008a06 <_printf_float+0x3aa>
 800899a:	f04f 0800 	mov.w	r8, #0
 800899e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089a2:	f104 0a1a 	add.w	sl, r4, #26
 80089a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80089aa:	1a9b      	subs	r3, r3, r2
 80089ac:	eba3 0309 	sub.w	r3, r3, r9
 80089b0:	4543      	cmp	r3, r8
 80089b2:	f77f af79 	ble.w	80088a8 <_printf_float+0x24c>
 80089b6:	2301      	movs	r3, #1
 80089b8:	4652      	mov	r2, sl
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	f43f aeaa 	beq.w	800871a <_printf_float+0xbe>
 80089c6:	f108 0801 	add.w	r8, r8, #1
 80089ca:	e7ec      	b.n	80089a6 <_printf_float+0x34a>
 80089cc:	4613      	mov	r3, r2
 80089ce:	4631      	mov	r1, r6
 80089d0:	4642      	mov	r2, r8
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	d1c0      	bne.n	800895c <_printf_float+0x300>
 80089da:	e69e      	b.n	800871a <_printf_float+0xbe>
 80089dc:	2301      	movs	r3, #1
 80089de:	4631      	mov	r1, r6
 80089e0:	4628      	mov	r0, r5
 80089e2:	9205      	str	r2, [sp, #20]
 80089e4:	47b8      	blx	r7
 80089e6:	3001      	adds	r0, #1
 80089e8:	f43f ae97 	beq.w	800871a <_printf_float+0xbe>
 80089ec:	9a05      	ldr	r2, [sp, #20]
 80089ee:	f10b 0b01 	add.w	fp, fp, #1
 80089f2:	e7b9      	b.n	8008968 <_printf_float+0x30c>
 80089f4:	ee18 3a10 	vmov	r3, s16
 80089f8:	4652      	mov	r2, sl
 80089fa:	4631      	mov	r1, r6
 80089fc:	4628      	mov	r0, r5
 80089fe:	47b8      	blx	r7
 8008a00:	3001      	adds	r0, #1
 8008a02:	d1be      	bne.n	8008982 <_printf_float+0x326>
 8008a04:	e689      	b.n	800871a <_printf_float+0xbe>
 8008a06:	9a05      	ldr	r2, [sp, #20]
 8008a08:	464b      	mov	r3, r9
 8008a0a:	4442      	add	r2, r8
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4628      	mov	r0, r5
 8008a10:	47b8      	blx	r7
 8008a12:	3001      	adds	r0, #1
 8008a14:	d1c1      	bne.n	800899a <_printf_float+0x33e>
 8008a16:	e680      	b.n	800871a <_printf_float+0xbe>
 8008a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a1a:	2a01      	cmp	r2, #1
 8008a1c:	dc01      	bgt.n	8008a22 <_printf_float+0x3c6>
 8008a1e:	07db      	lsls	r3, r3, #31
 8008a20:	d53a      	bpl.n	8008a98 <_printf_float+0x43c>
 8008a22:	2301      	movs	r3, #1
 8008a24:	4642      	mov	r2, r8
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f ae74 	beq.w	800871a <_printf_float+0xbe>
 8008a32:	ee18 3a10 	vmov	r3, s16
 8008a36:	4652      	mov	r2, sl
 8008a38:	4631      	mov	r1, r6
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b8      	blx	r7
 8008a3e:	3001      	adds	r0, #1
 8008a40:	f43f ae6b 	beq.w	800871a <_printf_float+0xbe>
 8008a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008a50:	f7f8 f862 	bl	8000b18 <__aeabi_dcmpeq>
 8008a54:	b9d8      	cbnz	r0, 8008a8e <_printf_float+0x432>
 8008a56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008a5a:	f108 0201 	add.w	r2, r8, #1
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	d10e      	bne.n	8008a86 <_printf_float+0x42a>
 8008a68:	e657      	b.n	800871a <_printf_float+0xbe>
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	4652      	mov	r2, sl
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b8      	blx	r7
 8008a74:	3001      	adds	r0, #1
 8008a76:	f43f ae50 	beq.w	800871a <_printf_float+0xbe>
 8008a7a:	f108 0801 	add.w	r8, r8, #1
 8008a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a80:	3b01      	subs	r3, #1
 8008a82:	4543      	cmp	r3, r8
 8008a84:	dcf1      	bgt.n	8008a6a <_printf_float+0x40e>
 8008a86:	464b      	mov	r3, r9
 8008a88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a8c:	e6da      	b.n	8008844 <_printf_float+0x1e8>
 8008a8e:	f04f 0800 	mov.w	r8, #0
 8008a92:	f104 0a1a 	add.w	sl, r4, #26
 8008a96:	e7f2      	b.n	8008a7e <_printf_float+0x422>
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4642      	mov	r2, r8
 8008a9c:	e7df      	b.n	8008a5e <_printf_float+0x402>
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	464a      	mov	r2, r9
 8008aa2:	4631      	mov	r1, r6
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	47b8      	blx	r7
 8008aa8:	3001      	adds	r0, #1
 8008aaa:	f43f ae36 	beq.w	800871a <_printf_float+0xbe>
 8008aae:	f108 0801 	add.w	r8, r8, #1
 8008ab2:	68e3      	ldr	r3, [r4, #12]
 8008ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008ab6:	1a5b      	subs	r3, r3, r1
 8008ab8:	4543      	cmp	r3, r8
 8008aba:	dcf0      	bgt.n	8008a9e <_printf_float+0x442>
 8008abc:	e6f8      	b.n	80088b0 <_printf_float+0x254>
 8008abe:	f04f 0800 	mov.w	r8, #0
 8008ac2:	f104 0919 	add.w	r9, r4, #25
 8008ac6:	e7f4      	b.n	8008ab2 <_printf_float+0x456>

08008ac8 <_printf_common>:
 8008ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008acc:	4616      	mov	r6, r2
 8008ace:	4699      	mov	r9, r3
 8008ad0:	688a      	ldr	r2, [r1, #8]
 8008ad2:	690b      	ldr	r3, [r1, #16]
 8008ad4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	bfb8      	it	lt
 8008adc:	4613      	movlt	r3, r2
 8008ade:	6033      	str	r3, [r6, #0]
 8008ae0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ae4:	4607      	mov	r7, r0
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	b10a      	cbz	r2, 8008aee <_printf_common+0x26>
 8008aea:	3301      	adds	r3, #1
 8008aec:	6033      	str	r3, [r6, #0]
 8008aee:	6823      	ldr	r3, [r4, #0]
 8008af0:	0699      	lsls	r1, r3, #26
 8008af2:	bf42      	ittt	mi
 8008af4:	6833      	ldrmi	r3, [r6, #0]
 8008af6:	3302      	addmi	r3, #2
 8008af8:	6033      	strmi	r3, [r6, #0]
 8008afa:	6825      	ldr	r5, [r4, #0]
 8008afc:	f015 0506 	ands.w	r5, r5, #6
 8008b00:	d106      	bne.n	8008b10 <_printf_common+0x48>
 8008b02:	f104 0a19 	add.w	sl, r4, #25
 8008b06:	68e3      	ldr	r3, [r4, #12]
 8008b08:	6832      	ldr	r2, [r6, #0]
 8008b0a:	1a9b      	subs	r3, r3, r2
 8008b0c:	42ab      	cmp	r3, r5
 8008b0e:	dc26      	bgt.n	8008b5e <_printf_common+0x96>
 8008b10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b14:	1e13      	subs	r3, r2, #0
 8008b16:	6822      	ldr	r2, [r4, #0]
 8008b18:	bf18      	it	ne
 8008b1a:	2301      	movne	r3, #1
 8008b1c:	0692      	lsls	r2, r2, #26
 8008b1e:	d42b      	bmi.n	8008b78 <_printf_common+0xb0>
 8008b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b24:	4649      	mov	r1, r9
 8008b26:	4638      	mov	r0, r7
 8008b28:	47c0      	blx	r8
 8008b2a:	3001      	adds	r0, #1
 8008b2c:	d01e      	beq.n	8008b6c <_printf_common+0xa4>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	6922      	ldr	r2, [r4, #16]
 8008b32:	f003 0306 	and.w	r3, r3, #6
 8008b36:	2b04      	cmp	r3, #4
 8008b38:	bf02      	ittt	eq
 8008b3a:	68e5      	ldreq	r5, [r4, #12]
 8008b3c:	6833      	ldreq	r3, [r6, #0]
 8008b3e:	1aed      	subeq	r5, r5, r3
 8008b40:	68a3      	ldr	r3, [r4, #8]
 8008b42:	bf0c      	ite	eq
 8008b44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b48:	2500      	movne	r5, #0
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	bfc4      	itt	gt
 8008b4e:	1a9b      	subgt	r3, r3, r2
 8008b50:	18ed      	addgt	r5, r5, r3
 8008b52:	2600      	movs	r6, #0
 8008b54:	341a      	adds	r4, #26
 8008b56:	42b5      	cmp	r5, r6
 8008b58:	d11a      	bne.n	8008b90 <_printf_common+0xc8>
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	e008      	b.n	8008b70 <_printf_common+0xa8>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4652      	mov	r2, sl
 8008b62:	4649      	mov	r1, r9
 8008b64:	4638      	mov	r0, r7
 8008b66:	47c0      	blx	r8
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d103      	bne.n	8008b74 <_printf_common+0xac>
 8008b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b74:	3501      	adds	r5, #1
 8008b76:	e7c6      	b.n	8008b06 <_printf_common+0x3e>
 8008b78:	18e1      	adds	r1, r4, r3
 8008b7a:	1c5a      	adds	r2, r3, #1
 8008b7c:	2030      	movs	r0, #48	; 0x30
 8008b7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b82:	4422      	add	r2, r4
 8008b84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b8c:	3302      	adds	r3, #2
 8008b8e:	e7c7      	b.n	8008b20 <_printf_common+0x58>
 8008b90:	2301      	movs	r3, #1
 8008b92:	4622      	mov	r2, r4
 8008b94:	4649      	mov	r1, r9
 8008b96:	4638      	mov	r0, r7
 8008b98:	47c0      	blx	r8
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d0e6      	beq.n	8008b6c <_printf_common+0xa4>
 8008b9e:	3601      	adds	r6, #1
 8008ba0:	e7d9      	b.n	8008b56 <_printf_common+0x8e>
	...

08008ba4 <_printf_i>:
 8008ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba8:	7e0f      	ldrb	r7, [r1, #24]
 8008baa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008bac:	2f78      	cmp	r7, #120	; 0x78
 8008bae:	4691      	mov	r9, r2
 8008bb0:	4680      	mov	r8, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	469a      	mov	sl, r3
 8008bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008bba:	d807      	bhi.n	8008bcc <_printf_i+0x28>
 8008bbc:	2f62      	cmp	r7, #98	; 0x62
 8008bbe:	d80a      	bhi.n	8008bd6 <_printf_i+0x32>
 8008bc0:	2f00      	cmp	r7, #0
 8008bc2:	f000 80d4 	beq.w	8008d6e <_printf_i+0x1ca>
 8008bc6:	2f58      	cmp	r7, #88	; 0x58
 8008bc8:	f000 80c0 	beq.w	8008d4c <_printf_i+0x1a8>
 8008bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bd4:	e03a      	b.n	8008c4c <_printf_i+0xa8>
 8008bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bda:	2b15      	cmp	r3, #21
 8008bdc:	d8f6      	bhi.n	8008bcc <_printf_i+0x28>
 8008bde:	a101      	add	r1, pc, #4	; (adr r1, 8008be4 <_printf_i+0x40>)
 8008be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008be4:	08008c3d 	.word	0x08008c3d
 8008be8:	08008c51 	.word	0x08008c51
 8008bec:	08008bcd 	.word	0x08008bcd
 8008bf0:	08008bcd 	.word	0x08008bcd
 8008bf4:	08008bcd 	.word	0x08008bcd
 8008bf8:	08008bcd 	.word	0x08008bcd
 8008bfc:	08008c51 	.word	0x08008c51
 8008c00:	08008bcd 	.word	0x08008bcd
 8008c04:	08008bcd 	.word	0x08008bcd
 8008c08:	08008bcd 	.word	0x08008bcd
 8008c0c:	08008bcd 	.word	0x08008bcd
 8008c10:	08008d55 	.word	0x08008d55
 8008c14:	08008c7d 	.word	0x08008c7d
 8008c18:	08008d0f 	.word	0x08008d0f
 8008c1c:	08008bcd 	.word	0x08008bcd
 8008c20:	08008bcd 	.word	0x08008bcd
 8008c24:	08008d77 	.word	0x08008d77
 8008c28:	08008bcd 	.word	0x08008bcd
 8008c2c:	08008c7d 	.word	0x08008c7d
 8008c30:	08008bcd 	.word	0x08008bcd
 8008c34:	08008bcd 	.word	0x08008bcd
 8008c38:	08008d17 	.word	0x08008d17
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	1d1a      	adds	r2, r3, #4
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	602a      	str	r2, [r5, #0]
 8008c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e09f      	b.n	8008d90 <_printf_i+0x1ec>
 8008c50:	6820      	ldr	r0, [r4, #0]
 8008c52:	682b      	ldr	r3, [r5, #0]
 8008c54:	0607      	lsls	r7, r0, #24
 8008c56:	f103 0104 	add.w	r1, r3, #4
 8008c5a:	6029      	str	r1, [r5, #0]
 8008c5c:	d501      	bpl.n	8008c62 <_printf_i+0xbe>
 8008c5e:	681e      	ldr	r6, [r3, #0]
 8008c60:	e003      	b.n	8008c6a <_printf_i+0xc6>
 8008c62:	0646      	lsls	r6, r0, #25
 8008c64:	d5fb      	bpl.n	8008c5e <_printf_i+0xba>
 8008c66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c6a:	2e00      	cmp	r6, #0
 8008c6c:	da03      	bge.n	8008c76 <_printf_i+0xd2>
 8008c6e:	232d      	movs	r3, #45	; 0x2d
 8008c70:	4276      	negs	r6, r6
 8008c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c76:	485a      	ldr	r0, [pc, #360]	; (8008de0 <_printf_i+0x23c>)
 8008c78:	230a      	movs	r3, #10
 8008c7a:	e012      	b.n	8008ca2 <_printf_i+0xfe>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	6820      	ldr	r0, [r4, #0]
 8008c80:	1d19      	adds	r1, r3, #4
 8008c82:	6029      	str	r1, [r5, #0]
 8008c84:	0605      	lsls	r5, r0, #24
 8008c86:	d501      	bpl.n	8008c8c <_printf_i+0xe8>
 8008c88:	681e      	ldr	r6, [r3, #0]
 8008c8a:	e002      	b.n	8008c92 <_printf_i+0xee>
 8008c8c:	0641      	lsls	r1, r0, #25
 8008c8e:	d5fb      	bpl.n	8008c88 <_printf_i+0xe4>
 8008c90:	881e      	ldrh	r6, [r3, #0]
 8008c92:	4853      	ldr	r0, [pc, #332]	; (8008de0 <_printf_i+0x23c>)
 8008c94:	2f6f      	cmp	r7, #111	; 0x6f
 8008c96:	bf0c      	ite	eq
 8008c98:	2308      	moveq	r3, #8
 8008c9a:	230a      	movne	r3, #10
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ca2:	6865      	ldr	r5, [r4, #4]
 8008ca4:	60a5      	str	r5, [r4, #8]
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	bfa2      	ittt	ge
 8008caa:	6821      	ldrge	r1, [r4, #0]
 8008cac:	f021 0104 	bicge.w	r1, r1, #4
 8008cb0:	6021      	strge	r1, [r4, #0]
 8008cb2:	b90e      	cbnz	r6, 8008cb8 <_printf_i+0x114>
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	d04b      	beq.n	8008d50 <_printf_i+0x1ac>
 8008cb8:	4615      	mov	r5, r2
 8008cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8008cc2:	5dc7      	ldrb	r7, [r0, r7]
 8008cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cc8:	4637      	mov	r7, r6
 8008cca:	42bb      	cmp	r3, r7
 8008ccc:	460e      	mov	r6, r1
 8008cce:	d9f4      	bls.n	8008cba <_printf_i+0x116>
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d10b      	bne.n	8008cec <_printf_i+0x148>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	07de      	lsls	r6, r3, #31
 8008cd8:	d508      	bpl.n	8008cec <_printf_i+0x148>
 8008cda:	6923      	ldr	r3, [r4, #16]
 8008cdc:	6861      	ldr	r1, [r4, #4]
 8008cde:	4299      	cmp	r1, r3
 8008ce0:	bfde      	ittt	le
 8008ce2:	2330      	movle	r3, #48	; 0x30
 8008ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cec:	1b52      	subs	r2, r2, r5
 8008cee:	6122      	str	r2, [r4, #16]
 8008cf0:	f8cd a000 	str.w	sl, [sp]
 8008cf4:	464b      	mov	r3, r9
 8008cf6:	aa03      	add	r2, sp, #12
 8008cf8:	4621      	mov	r1, r4
 8008cfa:	4640      	mov	r0, r8
 8008cfc:	f7ff fee4 	bl	8008ac8 <_printf_common>
 8008d00:	3001      	adds	r0, #1
 8008d02:	d14a      	bne.n	8008d9a <_printf_i+0x1f6>
 8008d04:	f04f 30ff 	mov.w	r0, #4294967295
 8008d08:	b004      	add	sp, #16
 8008d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	f043 0320 	orr.w	r3, r3, #32
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	4833      	ldr	r0, [pc, #204]	; (8008de4 <_printf_i+0x240>)
 8008d18:	2778      	movs	r7, #120	; 0x78
 8008d1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d1e:	6823      	ldr	r3, [r4, #0]
 8008d20:	6829      	ldr	r1, [r5, #0]
 8008d22:	061f      	lsls	r7, r3, #24
 8008d24:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d28:	d402      	bmi.n	8008d30 <_printf_i+0x18c>
 8008d2a:	065f      	lsls	r7, r3, #25
 8008d2c:	bf48      	it	mi
 8008d2e:	b2b6      	uxthmi	r6, r6
 8008d30:	07df      	lsls	r7, r3, #31
 8008d32:	bf48      	it	mi
 8008d34:	f043 0320 	orrmi.w	r3, r3, #32
 8008d38:	6029      	str	r1, [r5, #0]
 8008d3a:	bf48      	it	mi
 8008d3c:	6023      	strmi	r3, [r4, #0]
 8008d3e:	b91e      	cbnz	r6, 8008d48 <_printf_i+0x1a4>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	f023 0320 	bic.w	r3, r3, #32
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	2310      	movs	r3, #16
 8008d4a:	e7a7      	b.n	8008c9c <_printf_i+0xf8>
 8008d4c:	4824      	ldr	r0, [pc, #144]	; (8008de0 <_printf_i+0x23c>)
 8008d4e:	e7e4      	b.n	8008d1a <_printf_i+0x176>
 8008d50:	4615      	mov	r5, r2
 8008d52:	e7bd      	b.n	8008cd0 <_printf_i+0x12c>
 8008d54:	682b      	ldr	r3, [r5, #0]
 8008d56:	6826      	ldr	r6, [r4, #0]
 8008d58:	6961      	ldr	r1, [r4, #20]
 8008d5a:	1d18      	adds	r0, r3, #4
 8008d5c:	6028      	str	r0, [r5, #0]
 8008d5e:	0635      	lsls	r5, r6, #24
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	d501      	bpl.n	8008d68 <_printf_i+0x1c4>
 8008d64:	6019      	str	r1, [r3, #0]
 8008d66:	e002      	b.n	8008d6e <_printf_i+0x1ca>
 8008d68:	0670      	lsls	r0, r6, #25
 8008d6a:	d5fb      	bpl.n	8008d64 <_printf_i+0x1c0>
 8008d6c:	8019      	strh	r1, [r3, #0]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	6123      	str	r3, [r4, #16]
 8008d72:	4615      	mov	r5, r2
 8008d74:	e7bc      	b.n	8008cf0 <_printf_i+0x14c>
 8008d76:	682b      	ldr	r3, [r5, #0]
 8008d78:	1d1a      	adds	r2, r3, #4
 8008d7a:	602a      	str	r2, [r5, #0]
 8008d7c:	681d      	ldr	r5, [r3, #0]
 8008d7e:	6862      	ldr	r2, [r4, #4]
 8008d80:	2100      	movs	r1, #0
 8008d82:	4628      	mov	r0, r5
 8008d84:	f7f7 fa4c 	bl	8000220 <memchr>
 8008d88:	b108      	cbz	r0, 8008d8e <_printf_i+0x1ea>
 8008d8a:	1b40      	subs	r0, r0, r5
 8008d8c:	6060      	str	r0, [r4, #4]
 8008d8e:	6863      	ldr	r3, [r4, #4]
 8008d90:	6123      	str	r3, [r4, #16]
 8008d92:	2300      	movs	r3, #0
 8008d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d98:	e7aa      	b.n	8008cf0 <_printf_i+0x14c>
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	462a      	mov	r2, r5
 8008d9e:	4649      	mov	r1, r9
 8008da0:	4640      	mov	r0, r8
 8008da2:	47d0      	blx	sl
 8008da4:	3001      	adds	r0, #1
 8008da6:	d0ad      	beq.n	8008d04 <_printf_i+0x160>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	079b      	lsls	r3, r3, #30
 8008dac:	d413      	bmi.n	8008dd6 <_printf_i+0x232>
 8008dae:	68e0      	ldr	r0, [r4, #12]
 8008db0:	9b03      	ldr	r3, [sp, #12]
 8008db2:	4298      	cmp	r0, r3
 8008db4:	bfb8      	it	lt
 8008db6:	4618      	movlt	r0, r3
 8008db8:	e7a6      	b.n	8008d08 <_printf_i+0x164>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	4632      	mov	r2, r6
 8008dbe:	4649      	mov	r1, r9
 8008dc0:	4640      	mov	r0, r8
 8008dc2:	47d0      	blx	sl
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	d09d      	beq.n	8008d04 <_printf_i+0x160>
 8008dc8:	3501      	adds	r5, #1
 8008dca:	68e3      	ldr	r3, [r4, #12]
 8008dcc:	9903      	ldr	r1, [sp, #12]
 8008dce:	1a5b      	subs	r3, r3, r1
 8008dd0:	42ab      	cmp	r3, r5
 8008dd2:	dcf2      	bgt.n	8008dba <_printf_i+0x216>
 8008dd4:	e7eb      	b.n	8008dae <_printf_i+0x20a>
 8008dd6:	2500      	movs	r5, #0
 8008dd8:	f104 0619 	add.w	r6, r4, #25
 8008ddc:	e7f5      	b.n	8008dca <_printf_i+0x226>
 8008dde:	bf00      	nop
 8008de0:	0800d69c 	.word	0x0800d69c
 8008de4:	0800d6ad 	.word	0x0800d6ad

08008de8 <_scanf_float>:
 8008de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dec:	b087      	sub	sp, #28
 8008dee:	4617      	mov	r7, r2
 8008df0:	9303      	str	r3, [sp, #12]
 8008df2:	688b      	ldr	r3, [r1, #8]
 8008df4:	1e5a      	subs	r2, r3, #1
 8008df6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008dfa:	bf83      	ittte	hi
 8008dfc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008e00:	195b      	addhi	r3, r3, r5
 8008e02:	9302      	strhi	r3, [sp, #8]
 8008e04:	2300      	movls	r3, #0
 8008e06:	bf86      	itte	hi
 8008e08:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008e0c:	608b      	strhi	r3, [r1, #8]
 8008e0e:	9302      	strls	r3, [sp, #8]
 8008e10:	680b      	ldr	r3, [r1, #0]
 8008e12:	468b      	mov	fp, r1
 8008e14:	2500      	movs	r5, #0
 8008e16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e1a:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e22:	4680      	mov	r8, r0
 8008e24:	460c      	mov	r4, r1
 8008e26:	465e      	mov	r6, fp
 8008e28:	46aa      	mov	sl, r5
 8008e2a:	46a9      	mov	r9, r5
 8008e2c:	9501      	str	r5, [sp, #4]
 8008e2e:	68a2      	ldr	r2, [r4, #8]
 8008e30:	b152      	cbz	r2, 8008e48 <_scanf_float+0x60>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	2b4e      	cmp	r3, #78	; 0x4e
 8008e38:	d864      	bhi.n	8008f04 <_scanf_float+0x11c>
 8008e3a:	2b40      	cmp	r3, #64	; 0x40
 8008e3c:	d83c      	bhi.n	8008eb8 <_scanf_float+0xd0>
 8008e3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e42:	b2c8      	uxtb	r0, r1
 8008e44:	280e      	cmp	r0, #14
 8008e46:	d93a      	bls.n	8008ebe <_scanf_float+0xd6>
 8008e48:	f1b9 0f00 	cmp.w	r9, #0
 8008e4c:	d003      	beq.n	8008e56 <_scanf_float+0x6e>
 8008e4e:	6823      	ldr	r3, [r4, #0]
 8008e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e54:	6023      	str	r3, [r4, #0]
 8008e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e5a:	f1ba 0f01 	cmp.w	sl, #1
 8008e5e:	f200 8113 	bhi.w	8009088 <_scanf_float+0x2a0>
 8008e62:	455e      	cmp	r6, fp
 8008e64:	f200 8105 	bhi.w	8009072 <_scanf_float+0x28a>
 8008e68:	2501      	movs	r5, #1
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	b007      	add	sp, #28
 8008e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e76:	2a0d      	cmp	r2, #13
 8008e78:	d8e6      	bhi.n	8008e48 <_scanf_float+0x60>
 8008e7a:	a101      	add	r1, pc, #4	; (adr r1, 8008e80 <_scanf_float+0x98>)
 8008e7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e80:	08008fbf 	.word	0x08008fbf
 8008e84:	08008e49 	.word	0x08008e49
 8008e88:	08008e49 	.word	0x08008e49
 8008e8c:	08008e49 	.word	0x08008e49
 8008e90:	0800901f 	.word	0x0800901f
 8008e94:	08008ff7 	.word	0x08008ff7
 8008e98:	08008e49 	.word	0x08008e49
 8008e9c:	08008e49 	.word	0x08008e49
 8008ea0:	08008fcd 	.word	0x08008fcd
 8008ea4:	08008e49 	.word	0x08008e49
 8008ea8:	08008e49 	.word	0x08008e49
 8008eac:	08008e49 	.word	0x08008e49
 8008eb0:	08008e49 	.word	0x08008e49
 8008eb4:	08008f85 	.word	0x08008f85
 8008eb8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ebc:	e7db      	b.n	8008e76 <_scanf_float+0x8e>
 8008ebe:	290e      	cmp	r1, #14
 8008ec0:	d8c2      	bhi.n	8008e48 <_scanf_float+0x60>
 8008ec2:	a001      	add	r0, pc, #4	; (adr r0, 8008ec8 <_scanf_float+0xe0>)
 8008ec4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ec8:	08008f77 	.word	0x08008f77
 8008ecc:	08008e49 	.word	0x08008e49
 8008ed0:	08008f77 	.word	0x08008f77
 8008ed4:	0800900b 	.word	0x0800900b
 8008ed8:	08008e49 	.word	0x08008e49
 8008edc:	08008f25 	.word	0x08008f25
 8008ee0:	08008f61 	.word	0x08008f61
 8008ee4:	08008f61 	.word	0x08008f61
 8008ee8:	08008f61 	.word	0x08008f61
 8008eec:	08008f61 	.word	0x08008f61
 8008ef0:	08008f61 	.word	0x08008f61
 8008ef4:	08008f61 	.word	0x08008f61
 8008ef8:	08008f61 	.word	0x08008f61
 8008efc:	08008f61 	.word	0x08008f61
 8008f00:	08008f61 	.word	0x08008f61
 8008f04:	2b6e      	cmp	r3, #110	; 0x6e
 8008f06:	d809      	bhi.n	8008f1c <_scanf_float+0x134>
 8008f08:	2b60      	cmp	r3, #96	; 0x60
 8008f0a:	d8b2      	bhi.n	8008e72 <_scanf_float+0x8a>
 8008f0c:	2b54      	cmp	r3, #84	; 0x54
 8008f0e:	d077      	beq.n	8009000 <_scanf_float+0x218>
 8008f10:	2b59      	cmp	r3, #89	; 0x59
 8008f12:	d199      	bne.n	8008e48 <_scanf_float+0x60>
 8008f14:	2d07      	cmp	r5, #7
 8008f16:	d197      	bne.n	8008e48 <_scanf_float+0x60>
 8008f18:	2508      	movs	r5, #8
 8008f1a:	e029      	b.n	8008f70 <_scanf_float+0x188>
 8008f1c:	2b74      	cmp	r3, #116	; 0x74
 8008f1e:	d06f      	beq.n	8009000 <_scanf_float+0x218>
 8008f20:	2b79      	cmp	r3, #121	; 0x79
 8008f22:	e7f6      	b.n	8008f12 <_scanf_float+0x12a>
 8008f24:	6821      	ldr	r1, [r4, #0]
 8008f26:	05c8      	lsls	r0, r1, #23
 8008f28:	d51a      	bpl.n	8008f60 <_scanf_float+0x178>
 8008f2a:	9b02      	ldr	r3, [sp, #8]
 8008f2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f30:	6021      	str	r1, [r4, #0]
 8008f32:	f109 0901 	add.w	r9, r9, #1
 8008f36:	b11b      	cbz	r3, 8008f40 <_scanf_float+0x158>
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	3201      	adds	r2, #1
 8008f3c:	9302      	str	r3, [sp, #8]
 8008f3e:	60a2      	str	r2, [r4, #8]
 8008f40:	68a3      	ldr	r3, [r4, #8]
 8008f42:	3b01      	subs	r3, #1
 8008f44:	60a3      	str	r3, [r4, #8]
 8008f46:	6923      	ldr	r3, [r4, #16]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	607b      	str	r3, [r7, #4]
 8008f54:	f340 8084 	ble.w	8009060 <_scanf_float+0x278>
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	603b      	str	r3, [r7, #0]
 8008f5e:	e766      	b.n	8008e2e <_scanf_float+0x46>
 8008f60:	eb1a 0f05 	cmn.w	sl, r5
 8008f64:	f47f af70 	bne.w	8008e48 <_scanf_float+0x60>
 8008f68:	6822      	ldr	r2, [r4, #0]
 8008f6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f6e:	6022      	str	r2, [r4, #0]
 8008f70:	f806 3b01 	strb.w	r3, [r6], #1
 8008f74:	e7e4      	b.n	8008f40 <_scanf_float+0x158>
 8008f76:	6822      	ldr	r2, [r4, #0]
 8008f78:	0610      	lsls	r0, r2, #24
 8008f7a:	f57f af65 	bpl.w	8008e48 <_scanf_float+0x60>
 8008f7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f82:	e7f4      	b.n	8008f6e <_scanf_float+0x186>
 8008f84:	f1ba 0f00 	cmp.w	sl, #0
 8008f88:	d10e      	bne.n	8008fa8 <_scanf_float+0x1c0>
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	d10e      	bne.n	8008fae <_scanf_float+0x1c6>
 8008f90:	6822      	ldr	r2, [r4, #0]
 8008f92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f9a:	d108      	bne.n	8008fae <_scanf_float+0x1c6>
 8008f9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fa0:	6022      	str	r2, [r4, #0]
 8008fa2:	f04f 0a01 	mov.w	sl, #1
 8008fa6:	e7e3      	b.n	8008f70 <_scanf_float+0x188>
 8008fa8:	f1ba 0f02 	cmp.w	sl, #2
 8008fac:	d055      	beq.n	800905a <_scanf_float+0x272>
 8008fae:	2d01      	cmp	r5, #1
 8008fb0:	d002      	beq.n	8008fb8 <_scanf_float+0x1d0>
 8008fb2:	2d04      	cmp	r5, #4
 8008fb4:	f47f af48 	bne.w	8008e48 <_scanf_float+0x60>
 8008fb8:	3501      	adds	r5, #1
 8008fba:	b2ed      	uxtb	r5, r5
 8008fbc:	e7d8      	b.n	8008f70 <_scanf_float+0x188>
 8008fbe:	f1ba 0f01 	cmp.w	sl, #1
 8008fc2:	f47f af41 	bne.w	8008e48 <_scanf_float+0x60>
 8008fc6:	f04f 0a02 	mov.w	sl, #2
 8008fca:	e7d1      	b.n	8008f70 <_scanf_float+0x188>
 8008fcc:	b97d      	cbnz	r5, 8008fee <_scanf_float+0x206>
 8008fce:	f1b9 0f00 	cmp.w	r9, #0
 8008fd2:	f47f af3c 	bne.w	8008e4e <_scanf_float+0x66>
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fdc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fe0:	f47f af39 	bne.w	8008e56 <_scanf_float+0x6e>
 8008fe4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fe8:	6022      	str	r2, [r4, #0]
 8008fea:	2501      	movs	r5, #1
 8008fec:	e7c0      	b.n	8008f70 <_scanf_float+0x188>
 8008fee:	2d03      	cmp	r5, #3
 8008ff0:	d0e2      	beq.n	8008fb8 <_scanf_float+0x1d0>
 8008ff2:	2d05      	cmp	r5, #5
 8008ff4:	e7de      	b.n	8008fb4 <_scanf_float+0x1cc>
 8008ff6:	2d02      	cmp	r5, #2
 8008ff8:	f47f af26 	bne.w	8008e48 <_scanf_float+0x60>
 8008ffc:	2503      	movs	r5, #3
 8008ffe:	e7b7      	b.n	8008f70 <_scanf_float+0x188>
 8009000:	2d06      	cmp	r5, #6
 8009002:	f47f af21 	bne.w	8008e48 <_scanf_float+0x60>
 8009006:	2507      	movs	r5, #7
 8009008:	e7b2      	b.n	8008f70 <_scanf_float+0x188>
 800900a:	6822      	ldr	r2, [r4, #0]
 800900c:	0591      	lsls	r1, r2, #22
 800900e:	f57f af1b 	bpl.w	8008e48 <_scanf_float+0x60>
 8009012:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009016:	6022      	str	r2, [r4, #0]
 8009018:	f8cd 9004 	str.w	r9, [sp, #4]
 800901c:	e7a8      	b.n	8008f70 <_scanf_float+0x188>
 800901e:	6822      	ldr	r2, [r4, #0]
 8009020:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009024:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009028:	d006      	beq.n	8009038 <_scanf_float+0x250>
 800902a:	0550      	lsls	r0, r2, #21
 800902c:	f57f af0c 	bpl.w	8008e48 <_scanf_float+0x60>
 8009030:	f1b9 0f00 	cmp.w	r9, #0
 8009034:	f43f af0f 	beq.w	8008e56 <_scanf_float+0x6e>
 8009038:	0591      	lsls	r1, r2, #22
 800903a:	bf58      	it	pl
 800903c:	9901      	ldrpl	r1, [sp, #4]
 800903e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009042:	bf58      	it	pl
 8009044:	eba9 0101 	subpl.w	r1, r9, r1
 8009048:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800904c:	bf58      	it	pl
 800904e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009052:	6022      	str	r2, [r4, #0]
 8009054:	f04f 0900 	mov.w	r9, #0
 8009058:	e78a      	b.n	8008f70 <_scanf_float+0x188>
 800905a:	f04f 0a03 	mov.w	sl, #3
 800905e:	e787      	b.n	8008f70 <_scanf_float+0x188>
 8009060:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009064:	4639      	mov	r1, r7
 8009066:	4640      	mov	r0, r8
 8009068:	4798      	blx	r3
 800906a:	2800      	cmp	r0, #0
 800906c:	f43f aedf 	beq.w	8008e2e <_scanf_float+0x46>
 8009070:	e6ea      	b.n	8008e48 <_scanf_float+0x60>
 8009072:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009076:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800907a:	463a      	mov	r2, r7
 800907c:	4640      	mov	r0, r8
 800907e:	4798      	blx	r3
 8009080:	6923      	ldr	r3, [r4, #16]
 8009082:	3b01      	subs	r3, #1
 8009084:	6123      	str	r3, [r4, #16]
 8009086:	e6ec      	b.n	8008e62 <_scanf_float+0x7a>
 8009088:	1e6b      	subs	r3, r5, #1
 800908a:	2b06      	cmp	r3, #6
 800908c:	d825      	bhi.n	80090da <_scanf_float+0x2f2>
 800908e:	2d02      	cmp	r5, #2
 8009090:	d836      	bhi.n	8009100 <_scanf_float+0x318>
 8009092:	455e      	cmp	r6, fp
 8009094:	f67f aee8 	bls.w	8008e68 <_scanf_float+0x80>
 8009098:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800909c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090a0:	463a      	mov	r2, r7
 80090a2:	4640      	mov	r0, r8
 80090a4:	4798      	blx	r3
 80090a6:	6923      	ldr	r3, [r4, #16]
 80090a8:	3b01      	subs	r3, #1
 80090aa:	6123      	str	r3, [r4, #16]
 80090ac:	e7f1      	b.n	8009092 <_scanf_float+0x2aa>
 80090ae:	9802      	ldr	r0, [sp, #8]
 80090b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090b4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80090b8:	9002      	str	r0, [sp, #8]
 80090ba:	463a      	mov	r2, r7
 80090bc:	4640      	mov	r0, r8
 80090be:	4798      	blx	r3
 80090c0:	6923      	ldr	r3, [r4, #16]
 80090c2:	3b01      	subs	r3, #1
 80090c4:	6123      	str	r3, [r4, #16]
 80090c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ca:	fa5f fa8a 	uxtb.w	sl, sl
 80090ce:	f1ba 0f02 	cmp.w	sl, #2
 80090d2:	d1ec      	bne.n	80090ae <_scanf_float+0x2c6>
 80090d4:	3d03      	subs	r5, #3
 80090d6:	b2ed      	uxtb	r5, r5
 80090d8:	1b76      	subs	r6, r6, r5
 80090da:	6823      	ldr	r3, [r4, #0]
 80090dc:	05da      	lsls	r2, r3, #23
 80090de:	d52f      	bpl.n	8009140 <_scanf_float+0x358>
 80090e0:	055b      	lsls	r3, r3, #21
 80090e2:	d510      	bpl.n	8009106 <_scanf_float+0x31e>
 80090e4:	455e      	cmp	r6, fp
 80090e6:	f67f aebf 	bls.w	8008e68 <_scanf_float+0x80>
 80090ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090f2:	463a      	mov	r2, r7
 80090f4:	4640      	mov	r0, r8
 80090f6:	4798      	blx	r3
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	3b01      	subs	r3, #1
 80090fc:	6123      	str	r3, [r4, #16]
 80090fe:	e7f1      	b.n	80090e4 <_scanf_float+0x2fc>
 8009100:	46aa      	mov	sl, r5
 8009102:	9602      	str	r6, [sp, #8]
 8009104:	e7df      	b.n	80090c6 <_scanf_float+0x2de>
 8009106:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	2965      	cmp	r1, #101	; 0x65
 800910e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009112:	f106 35ff 	add.w	r5, r6, #4294967295
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	d00c      	beq.n	8009134 <_scanf_float+0x34c>
 800911a:	2945      	cmp	r1, #69	; 0x45
 800911c:	d00a      	beq.n	8009134 <_scanf_float+0x34c>
 800911e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009122:	463a      	mov	r2, r7
 8009124:	4640      	mov	r0, r8
 8009126:	4798      	blx	r3
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800912e:	3b01      	subs	r3, #1
 8009130:	1eb5      	subs	r5, r6, #2
 8009132:	6123      	str	r3, [r4, #16]
 8009134:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009138:	463a      	mov	r2, r7
 800913a:	4640      	mov	r0, r8
 800913c:	4798      	blx	r3
 800913e:	462e      	mov	r6, r5
 8009140:	6825      	ldr	r5, [r4, #0]
 8009142:	f015 0510 	ands.w	r5, r5, #16
 8009146:	d158      	bne.n	80091fa <_scanf_float+0x412>
 8009148:	7035      	strb	r5, [r6, #0]
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009154:	d11c      	bne.n	8009190 <_scanf_float+0x3a8>
 8009156:	9b01      	ldr	r3, [sp, #4]
 8009158:	454b      	cmp	r3, r9
 800915a:	eba3 0209 	sub.w	r2, r3, r9
 800915e:	d124      	bne.n	80091aa <_scanf_float+0x3c2>
 8009160:	2200      	movs	r2, #0
 8009162:	4659      	mov	r1, fp
 8009164:	4640      	mov	r0, r8
 8009166:	f002 fc7b 	bl	800ba60 <_strtod_r>
 800916a:	9b03      	ldr	r3, [sp, #12]
 800916c:	6821      	ldr	r1, [r4, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f011 0f02 	tst.w	r1, #2
 8009174:	ec57 6b10 	vmov	r6, r7, d0
 8009178:	f103 0204 	add.w	r2, r3, #4
 800917c:	d020      	beq.n	80091c0 <_scanf_float+0x3d8>
 800917e:	9903      	ldr	r1, [sp, #12]
 8009180:	600a      	str	r2, [r1, #0]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	e9c3 6700 	strd	r6, r7, [r3]
 8009188:	68e3      	ldr	r3, [r4, #12]
 800918a:	3301      	adds	r3, #1
 800918c:	60e3      	str	r3, [r4, #12]
 800918e:	e66c      	b.n	8008e6a <_scanf_float+0x82>
 8009190:	9b04      	ldr	r3, [sp, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d0e4      	beq.n	8009160 <_scanf_float+0x378>
 8009196:	9905      	ldr	r1, [sp, #20]
 8009198:	230a      	movs	r3, #10
 800919a:	462a      	mov	r2, r5
 800919c:	3101      	adds	r1, #1
 800919e:	4640      	mov	r0, r8
 80091a0:	f002 fce6 	bl	800bb70 <_strtol_r>
 80091a4:	9b04      	ldr	r3, [sp, #16]
 80091a6:	9e05      	ldr	r6, [sp, #20]
 80091a8:	1ac2      	subs	r2, r0, r3
 80091aa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091ae:	429e      	cmp	r6, r3
 80091b0:	bf28      	it	cs
 80091b2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80091b6:	4912      	ldr	r1, [pc, #72]	; (8009200 <_scanf_float+0x418>)
 80091b8:	4630      	mov	r0, r6
 80091ba:	f000 f8e7 	bl	800938c <siprintf>
 80091be:	e7cf      	b.n	8009160 <_scanf_float+0x378>
 80091c0:	f011 0f04 	tst.w	r1, #4
 80091c4:	9903      	ldr	r1, [sp, #12]
 80091c6:	600a      	str	r2, [r1, #0]
 80091c8:	d1db      	bne.n	8009182 <_scanf_float+0x39a>
 80091ca:	f8d3 8000 	ldr.w	r8, [r3]
 80091ce:	ee10 2a10 	vmov	r2, s0
 80091d2:	ee10 0a10 	vmov	r0, s0
 80091d6:	463b      	mov	r3, r7
 80091d8:	4639      	mov	r1, r7
 80091da:	f7f7 fccf 	bl	8000b7c <__aeabi_dcmpun>
 80091de:	b128      	cbz	r0, 80091ec <_scanf_float+0x404>
 80091e0:	4808      	ldr	r0, [pc, #32]	; (8009204 <_scanf_float+0x41c>)
 80091e2:	f000 fa01 	bl	80095e8 <nanf>
 80091e6:	ed88 0a00 	vstr	s0, [r8]
 80091ea:	e7cd      	b.n	8009188 <_scanf_float+0x3a0>
 80091ec:	4630      	mov	r0, r6
 80091ee:	4639      	mov	r1, r7
 80091f0:	f7f7 fd22 	bl	8000c38 <__aeabi_d2f>
 80091f4:	f8c8 0000 	str.w	r0, [r8]
 80091f8:	e7c6      	b.n	8009188 <_scanf_float+0x3a0>
 80091fa:	2500      	movs	r5, #0
 80091fc:	e635      	b.n	8008e6a <_scanf_float+0x82>
 80091fe:	bf00      	nop
 8009200:	0800d6be 	.word	0x0800d6be
 8009204:	0800da70 	.word	0x0800da70

08009208 <std>:
 8009208:	2300      	movs	r3, #0
 800920a:	b510      	push	{r4, lr}
 800920c:	4604      	mov	r4, r0
 800920e:	e9c0 3300 	strd	r3, r3, [r0]
 8009212:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009216:	6083      	str	r3, [r0, #8]
 8009218:	8181      	strh	r1, [r0, #12]
 800921a:	6643      	str	r3, [r0, #100]	; 0x64
 800921c:	81c2      	strh	r2, [r0, #14]
 800921e:	6183      	str	r3, [r0, #24]
 8009220:	4619      	mov	r1, r3
 8009222:	2208      	movs	r2, #8
 8009224:	305c      	adds	r0, #92	; 0x5c
 8009226:	f000 f942 	bl	80094ae <memset>
 800922a:	4b0d      	ldr	r3, [pc, #52]	; (8009260 <std+0x58>)
 800922c:	6263      	str	r3, [r4, #36]	; 0x24
 800922e:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <std+0x5c>)
 8009230:	62a3      	str	r3, [r4, #40]	; 0x28
 8009232:	4b0d      	ldr	r3, [pc, #52]	; (8009268 <std+0x60>)
 8009234:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009236:	4b0d      	ldr	r3, [pc, #52]	; (800926c <std+0x64>)
 8009238:	6323      	str	r3, [r4, #48]	; 0x30
 800923a:	4b0d      	ldr	r3, [pc, #52]	; (8009270 <std+0x68>)
 800923c:	6224      	str	r4, [r4, #32]
 800923e:	429c      	cmp	r4, r3
 8009240:	d006      	beq.n	8009250 <std+0x48>
 8009242:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009246:	4294      	cmp	r4, r2
 8009248:	d002      	beq.n	8009250 <std+0x48>
 800924a:	33d0      	adds	r3, #208	; 0xd0
 800924c:	429c      	cmp	r4, r3
 800924e:	d105      	bne.n	800925c <std+0x54>
 8009250:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009258:	f000 b9b4 	b.w	80095c4 <__retarget_lock_init_recursive>
 800925c:	bd10      	pop	{r4, pc}
 800925e:	bf00      	nop
 8009260:	08009425 	.word	0x08009425
 8009264:	0800944b 	.word	0x0800944b
 8009268:	08009483 	.word	0x08009483
 800926c:	080094a7 	.word	0x080094a7
 8009270:	200006d0 	.word	0x200006d0

08009274 <stdio_exit_handler>:
 8009274:	4a02      	ldr	r2, [pc, #8]	; (8009280 <stdio_exit_handler+0xc>)
 8009276:	4903      	ldr	r1, [pc, #12]	; (8009284 <stdio_exit_handler+0x10>)
 8009278:	4803      	ldr	r0, [pc, #12]	; (8009288 <stdio_exit_handler+0x14>)
 800927a:	f000 b869 	b.w	8009350 <_fwalk_sglue>
 800927e:	bf00      	nop
 8009280:	20000008 	.word	0x20000008
 8009284:	0800c571 	.word	0x0800c571
 8009288:	20000014 	.word	0x20000014

0800928c <cleanup_stdio>:
 800928c:	6841      	ldr	r1, [r0, #4]
 800928e:	4b0c      	ldr	r3, [pc, #48]	; (80092c0 <cleanup_stdio+0x34>)
 8009290:	4299      	cmp	r1, r3
 8009292:	b510      	push	{r4, lr}
 8009294:	4604      	mov	r4, r0
 8009296:	d001      	beq.n	800929c <cleanup_stdio+0x10>
 8009298:	f003 f96a 	bl	800c570 <_fflush_r>
 800929c:	68a1      	ldr	r1, [r4, #8]
 800929e:	4b09      	ldr	r3, [pc, #36]	; (80092c4 <cleanup_stdio+0x38>)
 80092a0:	4299      	cmp	r1, r3
 80092a2:	d002      	beq.n	80092aa <cleanup_stdio+0x1e>
 80092a4:	4620      	mov	r0, r4
 80092a6:	f003 f963 	bl	800c570 <_fflush_r>
 80092aa:	68e1      	ldr	r1, [r4, #12]
 80092ac:	4b06      	ldr	r3, [pc, #24]	; (80092c8 <cleanup_stdio+0x3c>)
 80092ae:	4299      	cmp	r1, r3
 80092b0:	d004      	beq.n	80092bc <cleanup_stdio+0x30>
 80092b2:	4620      	mov	r0, r4
 80092b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092b8:	f003 b95a 	b.w	800c570 <_fflush_r>
 80092bc:	bd10      	pop	{r4, pc}
 80092be:	bf00      	nop
 80092c0:	200006d0 	.word	0x200006d0
 80092c4:	20000738 	.word	0x20000738
 80092c8:	200007a0 	.word	0x200007a0

080092cc <global_stdio_init.part.0>:
 80092cc:	b510      	push	{r4, lr}
 80092ce:	4b0b      	ldr	r3, [pc, #44]	; (80092fc <global_stdio_init.part.0+0x30>)
 80092d0:	4c0b      	ldr	r4, [pc, #44]	; (8009300 <global_stdio_init.part.0+0x34>)
 80092d2:	4a0c      	ldr	r2, [pc, #48]	; (8009304 <global_stdio_init.part.0+0x38>)
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	4620      	mov	r0, r4
 80092d8:	2200      	movs	r2, #0
 80092da:	2104      	movs	r1, #4
 80092dc:	f7ff ff94 	bl	8009208 <std>
 80092e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80092e4:	2201      	movs	r2, #1
 80092e6:	2109      	movs	r1, #9
 80092e8:	f7ff ff8e 	bl	8009208 <std>
 80092ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80092f0:	2202      	movs	r2, #2
 80092f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092f6:	2112      	movs	r1, #18
 80092f8:	f7ff bf86 	b.w	8009208 <std>
 80092fc:	20000808 	.word	0x20000808
 8009300:	200006d0 	.word	0x200006d0
 8009304:	08009275 	.word	0x08009275

08009308 <__sfp_lock_acquire>:
 8009308:	4801      	ldr	r0, [pc, #4]	; (8009310 <__sfp_lock_acquire+0x8>)
 800930a:	f000 b95c 	b.w	80095c6 <__retarget_lock_acquire_recursive>
 800930e:	bf00      	nop
 8009310:	20000811 	.word	0x20000811

08009314 <__sfp_lock_release>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__sfp_lock_release+0x8>)
 8009316:	f000 b957 	b.w	80095c8 <__retarget_lock_release_recursive>
 800931a:	bf00      	nop
 800931c:	20000811 	.word	0x20000811

08009320 <__sinit>:
 8009320:	b510      	push	{r4, lr}
 8009322:	4604      	mov	r4, r0
 8009324:	f7ff fff0 	bl	8009308 <__sfp_lock_acquire>
 8009328:	6a23      	ldr	r3, [r4, #32]
 800932a:	b11b      	cbz	r3, 8009334 <__sinit+0x14>
 800932c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009330:	f7ff bff0 	b.w	8009314 <__sfp_lock_release>
 8009334:	4b04      	ldr	r3, [pc, #16]	; (8009348 <__sinit+0x28>)
 8009336:	6223      	str	r3, [r4, #32]
 8009338:	4b04      	ldr	r3, [pc, #16]	; (800934c <__sinit+0x2c>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1f5      	bne.n	800932c <__sinit+0xc>
 8009340:	f7ff ffc4 	bl	80092cc <global_stdio_init.part.0>
 8009344:	e7f2      	b.n	800932c <__sinit+0xc>
 8009346:	bf00      	nop
 8009348:	0800928d 	.word	0x0800928d
 800934c:	20000808 	.word	0x20000808

08009350 <_fwalk_sglue>:
 8009350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009354:	4607      	mov	r7, r0
 8009356:	4688      	mov	r8, r1
 8009358:	4614      	mov	r4, r2
 800935a:	2600      	movs	r6, #0
 800935c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009360:	f1b9 0901 	subs.w	r9, r9, #1
 8009364:	d505      	bpl.n	8009372 <_fwalk_sglue+0x22>
 8009366:	6824      	ldr	r4, [r4, #0]
 8009368:	2c00      	cmp	r4, #0
 800936a:	d1f7      	bne.n	800935c <_fwalk_sglue+0xc>
 800936c:	4630      	mov	r0, r6
 800936e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009372:	89ab      	ldrh	r3, [r5, #12]
 8009374:	2b01      	cmp	r3, #1
 8009376:	d907      	bls.n	8009388 <_fwalk_sglue+0x38>
 8009378:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800937c:	3301      	adds	r3, #1
 800937e:	d003      	beq.n	8009388 <_fwalk_sglue+0x38>
 8009380:	4629      	mov	r1, r5
 8009382:	4638      	mov	r0, r7
 8009384:	47c0      	blx	r8
 8009386:	4306      	orrs	r6, r0
 8009388:	3568      	adds	r5, #104	; 0x68
 800938a:	e7e9      	b.n	8009360 <_fwalk_sglue+0x10>

0800938c <siprintf>:
 800938c:	b40e      	push	{r1, r2, r3}
 800938e:	b500      	push	{lr}
 8009390:	b09c      	sub	sp, #112	; 0x70
 8009392:	ab1d      	add	r3, sp, #116	; 0x74
 8009394:	9002      	str	r0, [sp, #8]
 8009396:	9006      	str	r0, [sp, #24]
 8009398:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800939c:	4809      	ldr	r0, [pc, #36]	; (80093c4 <siprintf+0x38>)
 800939e:	9107      	str	r1, [sp, #28]
 80093a0:	9104      	str	r1, [sp, #16]
 80093a2:	4909      	ldr	r1, [pc, #36]	; (80093c8 <siprintf+0x3c>)
 80093a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a8:	9105      	str	r1, [sp, #20]
 80093aa:	6800      	ldr	r0, [r0, #0]
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	a902      	add	r1, sp, #8
 80093b0:	f002 fc3a 	bl	800bc28 <_svfiprintf_r>
 80093b4:	9b02      	ldr	r3, [sp, #8]
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
 80093ba:	b01c      	add	sp, #112	; 0x70
 80093bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80093c0:	b003      	add	sp, #12
 80093c2:	4770      	bx	lr
 80093c4:	20000060 	.word	0x20000060
 80093c8:	ffff0208 	.word	0xffff0208

080093cc <siscanf>:
 80093cc:	b40e      	push	{r1, r2, r3}
 80093ce:	b510      	push	{r4, lr}
 80093d0:	b09f      	sub	sp, #124	; 0x7c
 80093d2:	ac21      	add	r4, sp, #132	; 0x84
 80093d4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80093d8:	f854 2b04 	ldr.w	r2, [r4], #4
 80093dc:	9201      	str	r2, [sp, #4]
 80093de:	f8ad 101c 	strh.w	r1, [sp, #28]
 80093e2:	9004      	str	r0, [sp, #16]
 80093e4:	9008      	str	r0, [sp, #32]
 80093e6:	f7f6 ff6b 	bl	80002c0 <strlen>
 80093ea:	4b0c      	ldr	r3, [pc, #48]	; (800941c <siscanf+0x50>)
 80093ec:	9005      	str	r0, [sp, #20]
 80093ee:	9009      	str	r0, [sp, #36]	; 0x24
 80093f0:	930d      	str	r3, [sp, #52]	; 0x34
 80093f2:	480b      	ldr	r0, [pc, #44]	; (8009420 <siscanf+0x54>)
 80093f4:	9a01      	ldr	r2, [sp, #4]
 80093f6:	6800      	ldr	r0, [r0, #0]
 80093f8:	9403      	str	r4, [sp, #12]
 80093fa:	2300      	movs	r3, #0
 80093fc:	9311      	str	r3, [sp, #68]	; 0x44
 80093fe:	9316      	str	r3, [sp, #88]	; 0x58
 8009400:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009404:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009408:	a904      	add	r1, sp, #16
 800940a:	4623      	mov	r3, r4
 800940c:	f002 fd64 	bl	800bed8 <__ssvfiscanf_r>
 8009410:	b01f      	add	sp, #124	; 0x7c
 8009412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009416:	b003      	add	sp, #12
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	08009447 	.word	0x08009447
 8009420:	20000060 	.word	0x20000060

08009424 <__sread>:
 8009424:	b510      	push	{r4, lr}
 8009426:	460c      	mov	r4, r1
 8009428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942c:	f000 f87c 	bl	8009528 <_read_r>
 8009430:	2800      	cmp	r0, #0
 8009432:	bfab      	itete	ge
 8009434:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009436:	89a3      	ldrhlt	r3, [r4, #12]
 8009438:	181b      	addge	r3, r3, r0
 800943a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800943e:	bfac      	ite	ge
 8009440:	6563      	strge	r3, [r4, #84]	; 0x54
 8009442:	81a3      	strhlt	r3, [r4, #12]
 8009444:	bd10      	pop	{r4, pc}

08009446 <__seofread>:
 8009446:	2000      	movs	r0, #0
 8009448:	4770      	bx	lr

0800944a <__swrite>:
 800944a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944e:	461f      	mov	r7, r3
 8009450:	898b      	ldrh	r3, [r1, #12]
 8009452:	05db      	lsls	r3, r3, #23
 8009454:	4605      	mov	r5, r0
 8009456:	460c      	mov	r4, r1
 8009458:	4616      	mov	r6, r2
 800945a:	d505      	bpl.n	8009468 <__swrite+0x1e>
 800945c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009460:	2302      	movs	r3, #2
 8009462:	2200      	movs	r2, #0
 8009464:	f000 f84e 	bl	8009504 <_lseek_r>
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800946e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009472:	81a3      	strh	r3, [r4, #12]
 8009474:	4632      	mov	r2, r6
 8009476:	463b      	mov	r3, r7
 8009478:	4628      	mov	r0, r5
 800947a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947e:	f000 b865 	b.w	800954c <_write_r>

08009482 <__sseek>:
 8009482:	b510      	push	{r4, lr}
 8009484:	460c      	mov	r4, r1
 8009486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800948a:	f000 f83b 	bl	8009504 <_lseek_r>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	bf15      	itete	ne
 8009494:	6560      	strne	r0, [r4, #84]	; 0x54
 8009496:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800949a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800949e:	81a3      	strheq	r3, [r4, #12]
 80094a0:	bf18      	it	ne
 80094a2:	81a3      	strhne	r3, [r4, #12]
 80094a4:	bd10      	pop	{r4, pc}

080094a6 <__sclose>:
 80094a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094aa:	f000 b81b 	b.w	80094e4 <_close_r>

080094ae <memset>:
 80094ae:	4402      	add	r2, r0
 80094b0:	4603      	mov	r3, r0
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d100      	bne.n	80094b8 <memset+0xa>
 80094b6:	4770      	bx	lr
 80094b8:	f803 1b01 	strb.w	r1, [r3], #1
 80094bc:	e7f9      	b.n	80094b2 <memset+0x4>

080094be <strcat>:
 80094be:	b510      	push	{r4, lr}
 80094c0:	4602      	mov	r2, r0
 80094c2:	7814      	ldrb	r4, [r2, #0]
 80094c4:	4613      	mov	r3, r2
 80094c6:	3201      	adds	r2, #1
 80094c8:	2c00      	cmp	r4, #0
 80094ca:	d1fa      	bne.n	80094c2 <strcat+0x4>
 80094cc:	3b01      	subs	r3, #1
 80094ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094d6:	2a00      	cmp	r2, #0
 80094d8:	d1f9      	bne.n	80094ce <strcat+0x10>
 80094da:	bd10      	pop	{r4, pc}

080094dc <_localeconv_r>:
 80094dc:	4800      	ldr	r0, [pc, #0]	; (80094e0 <_localeconv_r+0x4>)
 80094de:	4770      	bx	lr
 80094e0:	20000154 	.word	0x20000154

080094e4 <_close_r>:
 80094e4:	b538      	push	{r3, r4, r5, lr}
 80094e6:	4d06      	ldr	r5, [pc, #24]	; (8009500 <_close_r+0x1c>)
 80094e8:	2300      	movs	r3, #0
 80094ea:	4604      	mov	r4, r0
 80094ec:	4608      	mov	r0, r1
 80094ee:	602b      	str	r3, [r5, #0]
 80094f0:	f7f9 fae9 	bl	8002ac6 <_close>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d102      	bne.n	80094fe <_close_r+0x1a>
 80094f8:	682b      	ldr	r3, [r5, #0]
 80094fa:	b103      	cbz	r3, 80094fe <_close_r+0x1a>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	bd38      	pop	{r3, r4, r5, pc}
 8009500:	2000080c 	.word	0x2000080c

08009504 <_lseek_r>:
 8009504:	b538      	push	{r3, r4, r5, lr}
 8009506:	4d07      	ldr	r5, [pc, #28]	; (8009524 <_lseek_r+0x20>)
 8009508:	4604      	mov	r4, r0
 800950a:	4608      	mov	r0, r1
 800950c:	4611      	mov	r1, r2
 800950e:	2200      	movs	r2, #0
 8009510:	602a      	str	r2, [r5, #0]
 8009512:	461a      	mov	r2, r3
 8009514:	f7f9 fafe 	bl	8002b14 <_lseek>
 8009518:	1c43      	adds	r3, r0, #1
 800951a:	d102      	bne.n	8009522 <_lseek_r+0x1e>
 800951c:	682b      	ldr	r3, [r5, #0]
 800951e:	b103      	cbz	r3, 8009522 <_lseek_r+0x1e>
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	bd38      	pop	{r3, r4, r5, pc}
 8009524:	2000080c 	.word	0x2000080c

08009528 <_read_r>:
 8009528:	b538      	push	{r3, r4, r5, lr}
 800952a:	4d07      	ldr	r5, [pc, #28]	; (8009548 <_read_r+0x20>)
 800952c:	4604      	mov	r4, r0
 800952e:	4608      	mov	r0, r1
 8009530:	4611      	mov	r1, r2
 8009532:	2200      	movs	r2, #0
 8009534:	602a      	str	r2, [r5, #0]
 8009536:	461a      	mov	r2, r3
 8009538:	f7f9 fa8c 	bl	8002a54 <_read>
 800953c:	1c43      	adds	r3, r0, #1
 800953e:	d102      	bne.n	8009546 <_read_r+0x1e>
 8009540:	682b      	ldr	r3, [r5, #0]
 8009542:	b103      	cbz	r3, 8009546 <_read_r+0x1e>
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	bd38      	pop	{r3, r4, r5, pc}
 8009548:	2000080c 	.word	0x2000080c

0800954c <_write_r>:
 800954c:	b538      	push	{r3, r4, r5, lr}
 800954e:	4d07      	ldr	r5, [pc, #28]	; (800956c <_write_r+0x20>)
 8009550:	4604      	mov	r4, r0
 8009552:	4608      	mov	r0, r1
 8009554:	4611      	mov	r1, r2
 8009556:	2200      	movs	r2, #0
 8009558:	602a      	str	r2, [r5, #0]
 800955a:	461a      	mov	r2, r3
 800955c:	f7f9 fa97 	bl	8002a8e <_write>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_write_r+0x1e>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_write_r+0x1e>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	2000080c 	.word	0x2000080c

08009570 <__errno>:
 8009570:	4b01      	ldr	r3, [pc, #4]	; (8009578 <__errno+0x8>)
 8009572:	6818      	ldr	r0, [r3, #0]
 8009574:	4770      	bx	lr
 8009576:	bf00      	nop
 8009578:	20000060 	.word	0x20000060

0800957c <__libc_init_array>:
 800957c:	b570      	push	{r4, r5, r6, lr}
 800957e:	4d0d      	ldr	r5, [pc, #52]	; (80095b4 <__libc_init_array+0x38>)
 8009580:	4c0d      	ldr	r4, [pc, #52]	; (80095b8 <__libc_init_array+0x3c>)
 8009582:	1b64      	subs	r4, r4, r5
 8009584:	10a4      	asrs	r4, r4, #2
 8009586:	2600      	movs	r6, #0
 8009588:	42a6      	cmp	r6, r4
 800958a:	d109      	bne.n	80095a0 <__libc_init_array+0x24>
 800958c:	4d0b      	ldr	r5, [pc, #44]	; (80095bc <__libc_init_array+0x40>)
 800958e:	4c0c      	ldr	r4, [pc, #48]	; (80095c0 <__libc_init_array+0x44>)
 8009590:	f003 ffde 	bl	800d550 <_init>
 8009594:	1b64      	subs	r4, r4, r5
 8009596:	10a4      	asrs	r4, r4, #2
 8009598:	2600      	movs	r6, #0
 800959a:	42a6      	cmp	r6, r4
 800959c:	d105      	bne.n	80095aa <__libc_init_array+0x2e>
 800959e:	bd70      	pop	{r4, r5, r6, pc}
 80095a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095a4:	4798      	blx	r3
 80095a6:	3601      	adds	r6, #1
 80095a8:	e7ee      	b.n	8009588 <__libc_init_array+0xc>
 80095aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80095ae:	4798      	blx	r3
 80095b0:	3601      	adds	r6, #1
 80095b2:	e7f2      	b.n	800959a <__libc_init_array+0x1e>
 80095b4:	0800dadc 	.word	0x0800dadc
 80095b8:	0800dadc 	.word	0x0800dadc
 80095bc:	0800dadc 	.word	0x0800dadc
 80095c0:	0800dae0 	.word	0x0800dae0

080095c4 <__retarget_lock_init_recursive>:
 80095c4:	4770      	bx	lr

080095c6 <__retarget_lock_acquire_recursive>:
 80095c6:	4770      	bx	lr

080095c8 <__retarget_lock_release_recursive>:
 80095c8:	4770      	bx	lr

080095ca <memcpy>:
 80095ca:	440a      	add	r2, r1
 80095cc:	4291      	cmp	r1, r2
 80095ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80095d2:	d100      	bne.n	80095d6 <memcpy+0xc>
 80095d4:	4770      	bx	lr
 80095d6:	b510      	push	{r4, lr}
 80095d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095e0:	4291      	cmp	r1, r2
 80095e2:	d1f9      	bne.n	80095d8 <memcpy+0xe>
 80095e4:	bd10      	pop	{r4, pc}
	...

080095e8 <nanf>:
 80095e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80095f0 <nanf+0x8>
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	7fc00000 	.word	0x7fc00000

080095f4 <quorem>:
 80095f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095f8:	6903      	ldr	r3, [r0, #16]
 80095fa:	690c      	ldr	r4, [r1, #16]
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	4607      	mov	r7, r0
 8009600:	db7e      	blt.n	8009700 <quorem+0x10c>
 8009602:	3c01      	subs	r4, #1
 8009604:	f101 0814 	add.w	r8, r1, #20
 8009608:	f100 0514 	add.w	r5, r0, #20
 800960c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009610:	9301      	str	r3, [sp, #4]
 8009612:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009616:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800961a:	3301      	adds	r3, #1
 800961c:	429a      	cmp	r2, r3
 800961e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009622:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009626:	fbb2 f6f3 	udiv	r6, r2, r3
 800962a:	d331      	bcc.n	8009690 <quorem+0x9c>
 800962c:	f04f 0e00 	mov.w	lr, #0
 8009630:	4640      	mov	r0, r8
 8009632:	46ac      	mov	ip, r5
 8009634:	46f2      	mov	sl, lr
 8009636:	f850 2b04 	ldr.w	r2, [r0], #4
 800963a:	b293      	uxth	r3, r2
 800963c:	fb06 e303 	mla	r3, r6, r3, lr
 8009640:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009644:	0c1a      	lsrs	r2, r3, #16
 8009646:	b29b      	uxth	r3, r3
 8009648:	ebaa 0303 	sub.w	r3, sl, r3
 800964c:	f8dc a000 	ldr.w	sl, [ip]
 8009650:	fa13 f38a 	uxtah	r3, r3, sl
 8009654:	fb06 220e 	mla	r2, r6, lr, r2
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	9b00      	ldr	r3, [sp, #0]
 800965c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009660:	b292      	uxth	r2, r2
 8009662:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009666:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800966a:	f8bd 3000 	ldrh.w	r3, [sp]
 800966e:	4581      	cmp	r9, r0
 8009670:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009674:	f84c 3b04 	str.w	r3, [ip], #4
 8009678:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800967c:	d2db      	bcs.n	8009636 <quorem+0x42>
 800967e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009682:	b92b      	cbnz	r3, 8009690 <quorem+0x9c>
 8009684:	9b01      	ldr	r3, [sp, #4]
 8009686:	3b04      	subs	r3, #4
 8009688:	429d      	cmp	r5, r3
 800968a:	461a      	mov	r2, r3
 800968c:	d32c      	bcc.n	80096e8 <quorem+0xf4>
 800968e:	613c      	str	r4, [r7, #16]
 8009690:	4638      	mov	r0, r7
 8009692:	f001 f9f1 	bl	800aa78 <__mcmp>
 8009696:	2800      	cmp	r0, #0
 8009698:	db22      	blt.n	80096e0 <quorem+0xec>
 800969a:	3601      	adds	r6, #1
 800969c:	4629      	mov	r1, r5
 800969e:	2000      	movs	r0, #0
 80096a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80096a4:	f8d1 c000 	ldr.w	ip, [r1]
 80096a8:	b293      	uxth	r3, r2
 80096aa:	1ac3      	subs	r3, r0, r3
 80096ac:	0c12      	lsrs	r2, r2, #16
 80096ae:	fa13 f38c 	uxtah	r3, r3, ip
 80096b2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80096b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096c0:	45c1      	cmp	r9, r8
 80096c2:	f841 3b04 	str.w	r3, [r1], #4
 80096c6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096ca:	d2e9      	bcs.n	80096a0 <quorem+0xac>
 80096cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096d4:	b922      	cbnz	r2, 80096e0 <quorem+0xec>
 80096d6:	3b04      	subs	r3, #4
 80096d8:	429d      	cmp	r5, r3
 80096da:	461a      	mov	r2, r3
 80096dc:	d30a      	bcc.n	80096f4 <quorem+0x100>
 80096de:	613c      	str	r4, [r7, #16]
 80096e0:	4630      	mov	r0, r6
 80096e2:	b003      	add	sp, #12
 80096e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e8:	6812      	ldr	r2, [r2, #0]
 80096ea:	3b04      	subs	r3, #4
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	d1ce      	bne.n	800968e <quorem+0x9a>
 80096f0:	3c01      	subs	r4, #1
 80096f2:	e7c9      	b.n	8009688 <quorem+0x94>
 80096f4:	6812      	ldr	r2, [r2, #0]
 80096f6:	3b04      	subs	r3, #4
 80096f8:	2a00      	cmp	r2, #0
 80096fa:	d1f0      	bne.n	80096de <quorem+0xea>
 80096fc:	3c01      	subs	r4, #1
 80096fe:	e7eb      	b.n	80096d8 <quorem+0xe4>
 8009700:	2000      	movs	r0, #0
 8009702:	e7ee      	b.n	80096e2 <quorem+0xee>
 8009704:	0000      	movs	r0, r0
	...

08009708 <_dtoa_r>:
 8009708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970c:	ed2d 8b04 	vpush	{d8-d9}
 8009710:	69c5      	ldr	r5, [r0, #28]
 8009712:	b093      	sub	sp, #76	; 0x4c
 8009714:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009718:	ec57 6b10 	vmov	r6, r7, d0
 800971c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009720:	9107      	str	r1, [sp, #28]
 8009722:	4604      	mov	r4, r0
 8009724:	920a      	str	r2, [sp, #40]	; 0x28
 8009726:	930d      	str	r3, [sp, #52]	; 0x34
 8009728:	b975      	cbnz	r5, 8009748 <_dtoa_r+0x40>
 800972a:	2010      	movs	r0, #16
 800972c:	f000 fe2a 	bl	800a384 <malloc>
 8009730:	4602      	mov	r2, r0
 8009732:	61e0      	str	r0, [r4, #28]
 8009734:	b920      	cbnz	r0, 8009740 <_dtoa_r+0x38>
 8009736:	4bae      	ldr	r3, [pc, #696]	; (80099f0 <_dtoa_r+0x2e8>)
 8009738:	21ef      	movs	r1, #239	; 0xef
 800973a:	48ae      	ldr	r0, [pc, #696]	; (80099f4 <_dtoa_r+0x2ec>)
 800973c:	f002 fff8 	bl	800c730 <__assert_func>
 8009740:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009744:	6005      	str	r5, [r0, #0]
 8009746:	60c5      	str	r5, [r0, #12]
 8009748:	69e3      	ldr	r3, [r4, #28]
 800974a:	6819      	ldr	r1, [r3, #0]
 800974c:	b151      	cbz	r1, 8009764 <_dtoa_r+0x5c>
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	604a      	str	r2, [r1, #4]
 8009752:	2301      	movs	r3, #1
 8009754:	4093      	lsls	r3, r2
 8009756:	608b      	str	r3, [r1, #8]
 8009758:	4620      	mov	r0, r4
 800975a:	f000 ff07 	bl	800a56c <_Bfree>
 800975e:	69e3      	ldr	r3, [r4, #28]
 8009760:	2200      	movs	r2, #0
 8009762:	601a      	str	r2, [r3, #0]
 8009764:	1e3b      	subs	r3, r7, #0
 8009766:	bfbb      	ittet	lt
 8009768:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800976c:	9303      	strlt	r3, [sp, #12]
 800976e:	2300      	movge	r3, #0
 8009770:	2201      	movlt	r2, #1
 8009772:	bfac      	ite	ge
 8009774:	f8c8 3000 	strge.w	r3, [r8]
 8009778:	f8c8 2000 	strlt.w	r2, [r8]
 800977c:	4b9e      	ldr	r3, [pc, #632]	; (80099f8 <_dtoa_r+0x2f0>)
 800977e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009782:	ea33 0308 	bics.w	r3, r3, r8
 8009786:	d11b      	bne.n	80097c0 <_dtoa_r+0xb8>
 8009788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800978a:	f242 730f 	movw	r3, #9999	; 0x270f
 800978e:	6013      	str	r3, [r2, #0]
 8009790:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009794:	4333      	orrs	r3, r6
 8009796:	f000 8593 	beq.w	800a2c0 <_dtoa_r+0xbb8>
 800979a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800979c:	b963      	cbnz	r3, 80097b8 <_dtoa_r+0xb0>
 800979e:	4b97      	ldr	r3, [pc, #604]	; (80099fc <_dtoa_r+0x2f4>)
 80097a0:	e027      	b.n	80097f2 <_dtoa_r+0xea>
 80097a2:	4b97      	ldr	r3, [pc, #604]	; (8009a00 <_dtoa_r+0x2f8>)
 80097a4:	9300      	str	r3, [sp, #0]
 80097a6:	3308      	adds	r3, #8
 80097a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	9800      	ldr	r0, [sp, #0]
 80097ae:	b013      	add	sp, #76	; 0x4c
 80097b0:	ecbd 8b04 	vpop	{d8-d9}
 80097b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b8:	4b90      	ldr	r3, [pc, #576]	; (80099fc <_dtoa_r+0x2f4>)
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	3303      	adds	r3, #3
 80097be:	e7f3      	b.n	80097a8 <_dtoa_r+0xa0>
 80097c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097c4:	2200      	movs	r2, #0
 80097c6:	ec51 0b17 	vmov	r0, r1, d7
 80097ca:	eeb0 8a47 	vmov.f32	s16, s14
 80097ce:	eef0 8a67 	vmov.f32	s17, s15
 80097d2:	2300      	movs	r3, #0
 80097d4:	f7f7 f9a0 	bl	8000b18 <__aeabi_dcmpeq>
 80097d8:	4681      	mov	r9, r0
 80097da:	b160      	cbz	r0, 80097f6 <_dtoa_r+0xee>
 80097dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097de:	2301      	movs	r3, #1
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	f000 8568 	beq.w	800a2ba <_dtoa_r+0xbb2>
 80097ea:	4b86      	ldr	r3, [pc, #536]	; (8009a04 <_dtoa_r+0x2fc>)
 80097ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097ee:	6013      	str	r3, [r2, #0]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	e7da      	b.n	80097ac <_dtoa_r+0xa4>
 80097f6:	aa10      	add	r2, sp, #64	; 0x40
 80097f8:	a911      	add	r1, sp, #68	; 0x44
 80097fa:	4620      	mov	r0, r4
 80097fc:	eeb0 0a48 	vmov.f32	s0, s16
 8009800:	eef0 0a68 	vmov.f32	s1, s17
 8009804:	f001 fa4e 	bl	800aca4 <__d2b>
 8009808:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800980c:	4682      	mov	sl, r0
 800980e:	2d00      	cmp	r5, #0
 8009810:	d07f      	beq.n	8009912 <_dtoa_r+0x20a>
 8009812:	ee18 3a90 	vmov	r3, s17
 8009816:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800981a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800981e:	ec51 0b18 	vmov	r0, r1, d8
 8009822:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009826:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800982a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800982e:	4619      	mov	r1, r3
 8009830:	2200      	movs	r2, #0
 8009832:	4b75      	ldr	r3, [pc, #468]	; (8009a08 <_dtoa_r+0x300>)
 8009834:	f7f6 fd50 	bl	80002d8 <__aeabi_dsub>
 8009838:	a367      	add	r3, pc, #412	; (adr r3, 80099d8 <_dtoa_r+0x2d0>)
 800983a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800983e:	f7f6 ff03 	bl	8000648 <__aeabi_dmul>
 8009842:	a367      	add	r3, pc, #412	; (adr r3, 80099e0 <_dtoa_r+0x2d8>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fd48 	bl	80002dc <__adddf3>
 800984c:	4606      	mov	r6, r0
 800984e:	4628      	mov	r0, r5
 8009850:	460f      	mov	r7, r1
 8009852:	f7f6 fe8f 	bl	8000574 <__aeabi_i2d>
 8009856:	a364      	add	r3, pc, #400	; (adr r3, 80099e8 <_dtoa_r+0x2e0>)
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	f7f6 fef4 	bl	8000648 <__aeabi_dmul>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4630      	mov	r0, r6
 8009866:	4639      	mov	r1, r7
 8009868:	f7f6 fd38 	bl	80002dc <__adddf3>
 800986c:	4606      	mov	r6, r0
 800986e:	460f      	mov	r7, r1
 8009870:	f7f7 f99a 	bl	8000ba8 <__aeabi_d2iz>
 8009874:	2200      	movs	r2, #0
 8009876:	4683      	mov	fp, r0
 8009878:	2300      	movs	r3, #0
 800987a:	4630      	mov	r0, r6
 800987c:	4639      	mov	r1, r7
 800987e:	f7f7 f955 	bl	8000b2c <__aeabi_dcmplt>
 8009882:	b148      	cbz	r0, 8009898 <_dtoa_r+0x190>
 8009884:	4658      	mov	r0, fp
 8009886:	f7f6 fe75 	bl	8000574 <__aeabi_i2d>
 800988a:	4632      	mov	r2, r6
 800988c:	463b      	mov	r3, r7
 800988e:	f7f7 f943 	bl	8000b18 <__aeabi_dcmpeq>
 8009892:	b908      	cbnz	r0, 8009898 <_dtoa_r+0x190>
 8009894:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009898:	f1bb 0f16 	cmp.w	fp, #22
 800989c:	d857      	bhi.n	800994e <_dtoa_r+0x246>
 800989e:	4b5b      	ldr	r3, [pc, #364]	; (8009a0c <_dtoa_r+0x304>)
 80098a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80098a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a8:	ec51 0b18 	vmov	r0, r1, d8
 80098ac:	f7f7 f93e 	bl	8000b2c <__aeabi_dcmplt>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	d04e      	beq.n	8009952 <_dtoa_r+0x24a>
 80098b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098b8:	2300      	movs	r3, #0
 80098ba:	930c      	str	r3, [sp, #48]	; 0x30
 80098bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098be:	1b5b      	subs	r3, r3, r5
 80098c0:	1e5a      	subs	r2, r3, #1
 80098c2:	bf45      	ittet	mi
 80098c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80098c8:	9305      	strmi	r3, [sp, #20]
 80098ca:	2300      	movpl	r3, #0
 80098cc:	2300      	movmi	r3, #0
 80098ce:	9206      	str	r2, [sp, #24]
 80098d0:	bf54      	ite	pl
 80098d2:	9305      	strpl	r3, [sp, #20]
 80098d4:	9306      	strmi	r3, [sp, #24]
 80098d6:	f1bb 0f00 	cmp.w	fp, #0
 80098da:	db3c      	blt.n	8009956 <_dtoa_r+0x24e>
 80098dc:	9b06      	ldr	r3, [sp, #24]
 80098de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80098e2:	445b      	add	r3, fp
 80098e4:	9306      	str	r3, [sp, #24]
 80098e6:	2300      	movs	r3, #0
 80098e8:	9308      	str	r3, [sp, #32]
 80098ea:	9b07      	ldr	r3, [sp, #28]
 80098ec:	2b09      	cmp	r3, #9
 80098ee:	d868      	bhi.n	80099c2 <_dtoa_r+0x2ba>
 80098f0:	2b05      	cmp	r3, #5
 80098f2:	bfc4      	itt	gt
 80098f4:	3b04      	subgt	r3, #4
 80098f6:	9307      	strgt	r3, [sp, #28]
 80098f8:	9b07      	ldr	r3, [sp, #28]
 80098fa:	f1a3 0302 	sub.w	r3, r3, #2
 80098fe:	bfcc      	ite	gt
 8009900:	2500      	movgt	r5, #0
 8009902:	2501      	movle	r5, #1
 8009904:	2b03      	cmp	r3, #3
 8009906:	f200 8085 	bhi.w	8009a14 <_dtoa_r+0x30c>
 800990a:	e8df f003 	tbb	[pc, r3]
 800990e:	3b2e      	.short	0x3b2e
 8009910:	5839      	.short	0x5839
 8009912:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009916:	441d      	add	r5, r3
 8009918:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800991c:	2b20      	cmp	r3, #32
 800991e:	bfc1      	itttt	gt
 8009920:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009924:	fa08 f803 	lslgt.w	r8, r8, r3
 8009928:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800992c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009930:	bfd6      	itet	le
 8009932:	f1c3 0320 	rsble	r3, r3, #32
 8009936:	ea48 0003 	orrgt.w	r0, r8, r3
 800993a:	fa06 f003 	lslle.w	r0, r6, r3
 800993e:	f7f6 fe09 	bl	8000554 <__aeabi_ui2d>
 8009942:	2201      	movs	r2, #1
 8009944:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009948:	3d01      	subs	r5, #1
 800994a:	920e      	str	r2, [sp, #56]	; 0x38
 800994c:	e76f      	b.n	800982e <_dtoa_r+0x126>
 800994e:	2301      	movs	r3, #1
 8009950:	e7b3      	b.n	80098ba <_dtoa_r+0x1b2>
 8009952:	900c      	str	r0, [sp, #48]	; 0x30
 8009954:	e7b2      	b.n	80098bc <_dtoa_r+0x1b4>
 8009956:	9b05      	ldr	r3, [sp, #20]
 8009958:	eba3 030b 	sub.w	r3, r3, fp
 800995c:	9305      	str	r3, [sp, #20]
 800995e:	f1cb 0300 	rsb	r3, fp, #0
 8009962:	9308      	str	r3, [sp, #32]
 8009964:	2300      	movs	r3, #0
 8009966:	930b      	str	r3, [sp, #44]	; 0x2c
 8009968:	e7bf      	b.n	80098ea <_dtoa_r+0x1e2>
 800996a:	2300      	movs	r3, #0
 800996c:	9309      	str	r3, [sp, #36]	; 0x24
 800996e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009970:	2b00      	cmp	r3, #0
 8009972:	dc52      	bgt.n	8009a1a <_dtoa_r+0x312>
 8009974:	2301      	movs	r3, #1
 8009976:	9301      	str	r3, [sp, #4]
 8009978:	9304      	str	r3, [sp, #16]
 800997a:	461a      	mov	r2, r3
 800997c:	920a      	str	r2, [sp, #40]	; 0x28
 800997e:	e00b      	b.n	8009998 <_dtoa_r+0x290>
 8009980:	2301      	movs	r3, #1
 8009982:	e7f3      	b.n	800996c <_dtoa_r+0x264>
 8009984:	2300      	movs	r3, #0
 8009986:	9309      	str	r3, [sp, #36]	; 0x24
 8009988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800998a:	445b      	add	r3, fp
 800998c:	9301      	str	r3, [sp, #4]
 800998e:	3301      	adds	r3, #1
 8009990:	2b01      	cmp	r3, #1
 8009992:	9304      	str	r3, [sp, #16]
 8009994:	bfb8      	it	lt
 8009996:	2301      	movlt	r3, #1
 8009998:	69e0      	ldr	r0, [r4, #28]
 800999a:	2100      	movs	r1, #0
 800999c:	2204      	movs	r2, #4
 800999e:	f102 0614 	add.w	r6, r2, #20
 80099a2:	429e      	cmp	r6, r3
 80099a4:	d93d      	bls.n	8009a22 <_dtoa_r+0x31a>
 80099a6:	6041      	str	r1, [r0, #4]
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 fd9f 	bl	800a4ec <_Balloc>
 80099ae:	9000      	str	r0, [sp, #0]
 80099b0:	2800      	cmp	r0, #0
 80099b2:	d139      	bne.n	8009a28 <_dtoa_r+0x320>
 80099b4:	4b16      	ldr	r3, [pc, #88]	; (8009a10 <_dtoa_r+0x308>)
 80099b6:	4602      	mov	r2, r0
 80099b8:	f240 11af 	movw	r1, #431	; 0x1af
 80099bc:	e6bd      	b.n	800973a <_dtoa_r+0x32>
 80099be:	2301      	movs	r3, #1
 80099c0:	e7e1      	b.n	8009986 <_dtoa_r+0x27e>
 80099c2:	2501      	movs	r5, #1
 80099c4:	2300      	movs	r3, #0
 80099c6:	9307      	str	r3, [sp, #28]
 80099c8:	9509      	str	r5, [sp, #36]	; 0x24
 80099ca:	f04f 33ff 	mov.w	r3, #4294967295
 80099ce:	9301      	str	r3, [sp, #4]
 80099d0:	9304      	str	r3, [sp, #16]
 80099d2:	2200      	movs	r2, #0
 80099d4:	2312      	movs	r3, #18
 80099d6:	e7d1      	b.n	800997c <_dtoa_r+0x274>
 80099d8:	636f4361 	.word	0x636f4361
 80099dc:	3fd287a7 	.word	0x3fd287a7
 80099e0:	8b60c8b3 	.word	0x8b60c8b3
 80099e4:	3fc68a28 	.word	0x3fc68a28
 80099e8:	509f79fb 	.word	0x509f79fb
 80099ec:	3fd34413 	.word	0x3fd34413
 80099f0:	0800d6d0 	.word	0x0800d6d0
 80099f4:	0800d6e7 	.word	0x0800d6e7
 80099f8:	7ff00000 	.word	0x7ff00000
 80099fc:	0800d6cc 	.word	0x0800d6cc
 8009a00:	0800d6c3 	.word	0x0800d6c3
 8009a04:	0800da29 	.word	0x0800da29
 8009a08:	3ff80000 	.word	0x3ff80000
 8009a0c:	0800d7d8 	.word	0x0800d7d8
 8009a10:	0800d73f 	.word	0x0800d73f
 8009a14:	2301      	movs	r3, #1
 8009a16:	9309      	str	r3, [sp, #36]	; 0x24
 8009a18:	e7d7      	b.n	80099ca <_dtoa_r+0x2c2>
 8009a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a1c:	9301      	str	r3, [sp, #4]
 8009a1e:	9304      	str	r3, [sp, #16]
 8009a20:	e7ba      	b.n	8009998 <_dtoa_r+0x290>
 8009a22:	3101      	adds	r1, #1
 8009a24:	0052      	lsls	r2, r2, #1
 8009a26:	e7ba      	b.n	800999e <_dtoa_r+0x296>
 8009a28:	69e3      	ldr	r3, [r4, #28]
 8009a2a:	9a00      	ldr	r2, [sp, #0]
 8009a2c:	601a      	str	r2, [r3, #0]
 8009a2e:	9b04      	ldr	r3, [sp, #16]
 8009a30:	2b0e      	cmp	r3, #14
 8009a32:	f200 80a8 	bhi.w	8009b86 <_dtoa_r+0x47e>
 8009a36:	2d00      	cmp	r5, #0
 8009a38:	f000 80a5 	beq.w	8009b86 <_dtoa_r+0x47e>
 8009a3c:	f1bb 0f00 	cmp.w	fp, #0
 8009a40:	dd38      	ble.n	8009ab4 <_dtoa_r+0x3ac>
 8009a42:	4bc0      	ldr	r3, [pc, #768]	; (8009d44 <_dtoa_r+0x63c>)
 8009a44:	f00b 020f 	and.w	r2, fp, #15
 8009a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a4c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a50:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009a54:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009a58:	d019      	beq.n	8009a8e <_dtoa_r+0x386>
 8009a5a:	4bbb      	ldr	r3, [pc, #748]	; (8009d48 <_dtoa_r+0x640>)
 8009a5c:	ec51 0b18 	vmov	r0, r1, d8
 8009a60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a64:	f7f6 ff1a 	bl	800089c <__aeabi_ddiv>
 8009a68:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a6c:	f008 080f 	and.w	r8, r8, #15
 8009a70:	2503      	movs	r5, #3
 8009a72:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009d48 <_dtoa_r+0x640>
 8009a76:	f1b8 0f00 	cmp.w	r8, #0
 8009a7a:	d10a      	bne.n	8009a92 <_dtoa_r+0x38a>
 8009a7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a80:	4632      	mov	r2, r6
 8009a82:	463b      	mov	r3, r7
 8009a84:	f7f6 ff0a 	bl	800089c <__aeabi_ddiv>
 8009a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a8c:	e02b      	b.n	8009ae6 <_dtoa_r+0x3de>
 8009a8e:	2502      	movs	r5, #2
 8009a90:	e7ef      	b.n	8009a72 <_dtoa_r+0x36a>
 8009a92:	f018 0f01 	tst.w	r8, #1
 8009a96:	d008      	beq.n	8009aaa <_dtoa_r+0x3a2>
 8009a98:	4630      	mov	r0, r6
 8009a9a:	4639      	mov	r1, r7
 8009a9c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009aa0:	f7f6 fdd2 	bl	8000648 <__aeabi_dmul>
 8009aa4:	3501      	adds	r5, #1
 8009aa6:	4606      	mov	r6, r0
 8009aa8:	460f      	mov	r7, r1
 8009aaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009aae:	f109 0908 	add.w	r9, r9, #8
 8009ab2:	e7e0      	b.n	8009a76 <_dtoa_r+0x36e>
 8009ab4:	f000 809f 	beq.w	8009bf6 <_dtoa_r+0x4ee>
 8009ab8:	f1cb 0600 	rsb	r6, fp, #0
 8009abc:	4ba1      	ldr	r3, [pc, #644]	; (8009d44 <_dtoa_r+0x63c>)
 8009abe:	4fa2      	ldr	r7, [pc, #648]	; (8009d48 <_dtoa_r+0x640>)
 8009ac0:	f006 020f 	and.w	r2, r6, #15
 8009ac4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009acc:	ec51 0b18 	vmov	r0, r1, d8
 8009ad0:	f7f6 fdba 	bl	8000648 <__aeabi_dmul>
 8009ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ad8:	1136      	asrs	r6, r6, #4
 8009ada:	2300      	movs	r3, #0
 8009adc:	2502      	movs	r5, #2
 8009ade:	2e00      	cmp	r6, #0
 8009ae0:	d17e      	bne.n	8009be0 <_dtoa_r+0x4d8>
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1d0      	bne.n	8009a88 <_dtoa_r+0x380>
 8009ae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ae8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 8084 	beq.w	8009bfa <_dtoa_r+0x4f2>
 8009af2:	4b96      	ldr	r3, [pc, #600]	; (8009d4c <_dtoa_r+0x644>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	4640      	mov	r0, r8
 8009af8:	4649      	mov	r1, r9
 8009afa:	f7f7 f817 	bl	8000b2c <__aeabi_dcmplt>
 8009afe:	2800      	cmp	r0, #0
 8009b00:	d07b      	beq.n	8009bfa <_dtoa_r+0x4f2>
 8009b02:	9b04      	ldr	r3, [sp, #16]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d078      	beq.n	8009bfa <_dtoa_r+0x4f2>
 8009b08:	9b01      	ldr	r3, [sp, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	dd39      	ble.n	8009b82 <_dtoa_r+0x47a>
 8009b0e:	4b90      	ldr	r3, [pc, #576]	; (8009d50 <_dtoa_r+0x648>)
 8009b10:	2200      	movs	r2, #0
 8009b12:	4640      	mov	r0, r8
 8009b14:	4649      	mov	r1, r9
 8009b16:	f7f6 fd97 	bl	8000648 <__aeabi_dmul>
 8009b1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b1e:	9e01      	ldr	r6, [sp, #4]
 8009b20:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009b24:	3501      	adds	r5, #1
 8009b26:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f7f6 fd22 	bl	8000574 <__aeabi_i2d>
 8009b30:	4642      	mov	r2, r8
 8009b32:	464b      	mov	r3, r9
 8009b34:	f7f6 fd88 	bl	8000648 <__aeabi_dmul>
 8009b38:	4b86      	ldr	r3, [pc, #536]	; (8009d54 <_dtoa_r+0x64c>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f7f6 fbce 	bl	80002dc <__adddf3>
 8009b40:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b48:	9303      	str	r3, [sp, #12]
 8009b4a:	2e00      	cmp	r6, #0
 8009b4c:	d158      	bne.n	8009c00 <_dtoa_r+0x4f8>
 8009b4e:	4b82      	ldr	r3, [pc, #520]	; (8009d58 <_dtoa_r+0x650>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	4640      	mov	r0, r8
 8009b54:	4649      	mov	r1, r9
 8009b56:	f7f6 fbbf 	bl	80002d8 <__aeabi_dsub>
 8009b5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b5e:	4680      	mov	r8, r0
 8009b60:	4689      	mov	r9, r1
 8009b62:	f7f7 f801 	bl	8000b68 <__aeabi_dcmpgt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	f040 8296 	bne.w	800a098 <_dtoa_r+0x990>
 8009b6c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009b70:	4640      	mov	r0, r8
 8009b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b76:	4649      	mov	r1, r9
 8009b78:	f7f6 ffd8 	bl	8000b2c <__aeabi_dcmplt>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	f040 8289 	bne.w	800a094 <_dtoa_r+0x98c>
 8009b82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009b86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f2c0 814e 	blt.w	8009e2a <_dtoa_r+0x722>
 8009b8e:	f1bb 0f0e 	cmp.w	fp, #14
 8009b92:	f300 814a 	bgt.w	8009e2a <_dtoa_r+0x722>
 8009b96:	4b6b      	ldr	r3, [pc, #428]	; (8009d44 <_dtoa_r+0x63c>)
 8009b98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b9c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	f280 80dc 	bge.w	8009d60 <_dtoa_r+0x658>
 8009ba8:	9b04      	ldr	r3, [sp, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	f300 80d8 	bgt.w	8009d60 <_dtoa_r+0x658>
 8009bb0:	f040 826f 	bne.w	800a092 <_dtoa_r+0x98a>
 8009bb4:	4b68      	ldr	r3, [pc, #416]	; (8009d58 <_dtoa_r+0x650>)
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	4640      	mov	r0, r8
 8009bba:	4649      	mov	r1, r9
 8009bbc:	f7f6 fd44 	bl	8000648 <__aeabi_dmul>
 8009bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bc4:	f7f6 ffc6 	bl	8000b54 <__aeabi_dcmpge>
 8009bc8:	9e04      	ldr	r6, [sp, #16]
 8009bca:	4637      	mov	r7, r6
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	f040 8245 	bne.w	800a05c <_dtoa_r+0x954>
 8009bd2:	9d00      	ldr	r5, [sp, #0]
 8009bd4:	2331      	movs	r3, #49	; 0x31
 8009bd6:	f805 3b01 	strb.w	r3, [r5], #1
 8009bda:	f10b 0b01 	add.w	fp, fp, #1
 8009bde:	e241      	b.n	800a064 <_dtoa_r+0x95c>
 8009be0:	07f2      	lsls	r2, r6, #31
 8009be2:	d505      	bpl.n	8009bf0 <_dtoa_r+0x4e8>
 8009be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009be8:	f7f6 fd2e 	bl	8000648 <__aeabi_dmul>
 8009bec:	3501      	adds	r5, #1
 8009bee:	2301      	movs	r3, #1
 8009bf0:	1076      	asrs	r6, r6, #1
 8009bf2:	3708      	adds	r7, #8
 8009bf4:	e773      	b.n	8009ade <_dtoa_r+0x3d6>
 8009bf6:	2502      	movs	r5, #2
 8009bf8:	e775      	b.n	8009ae6 <_dtoa_r+0x3de>
 8009bfa:	9e04      	ldr	r6, [sp, #16]
 8009bfc:	465f      	mov	r7, fp
 8009bfe:	e792      	b.n	8009b26 <_dtoa_r+0x41e>
 8009c00:	9900      	ldr	r1, [sp, #0]
 8009c02:	4b50      	ldr	r3, [pc, #320]	; (8009d44 <_dtoa_r+0x63c>)
 8009c04:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c08:	4431      	add	r1, r6
 8009c0a:	9102      	str	r1, [sp, #8]
 8009c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c0e:	eeb0 9a47 	vmov.f32	s18, s14
 8009c12:	eef0 9a67 	vmov.f32	s19, s15
 8009c16:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c1a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c1e:	2900      	cmp	r1, #0
 8009c20:	d044      	beq.n	8009cac <_dtoa_r+0x5a4>
 8009c22:	494e      	ldr	r1, [pc, #312]	; (8009d5c <_dtoa_r+0x654>)
 8009c24:	2000      	movs	r0, #0
 8009c26:	f7f6 fe39 	bl	800089c <__aeabi_ddiv>
 8009c2a:	ec53 2b19 	vmov	r2, r3, d9
 8009c2e:	f7f6 fb53 	bl	80002d8 <__aeabi_dsub>
 8009c32:	9d00      	ldr	r5, [sp, #0]
 8009c34:	ec41 0b19 	vmov	d9, r0, r1
 8009c38:	4649      	mov	r1, r9
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	f7f6 ffb4 	bl	8000ba8 <__aeabi_d2iz>
 8009c40:	4606      	mov	r6, r0
 8009c42:	f7f6 fc97 	bl	8000574 <__aeabi_i2d>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fb43 	bl	80002d8 <__aeabi_dsub>
 8009c52:	3630      	adds	r6, #48	; 0x30
 8009c54:	f805 6b01 	strb.w	r6, [r5], #1
 8009c58:	ec53 2b19 	vmov	r2, r3, d9
 8009c5c:	4680      	mov	r8, r0
 8009c5e:	4689      	mov	r9, r1
 8009c60:	f7f6 ff64 	bl	8000b2c <__aeabi_dcmplt>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	d164      	bne.n	8009d32 <_dtoa_r+0x62a>
 8009c68:	4642      	mov	r2, r8
 8009c6a:	464b      	mov	r3, r9
 8009c6c:	4937      	ldr	r1, [pc, #220]	; (8009d4c <_dtoa_r+0x644>)
 8009c6e:	2000      	movs	r0, #0
 8009c70:	f7f6 fb32 	bl	80002d8 <__aeabi_dsub>
 8009c74:	ec53 2b19 	vmov	r2, r3, d9
 8009c78:	f7f6 ff58 	bl	8000b2c <__aeabi_dcmplt>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	f040 80b6 	bne.w	8009dee <_dtoa_r+0x6e6>
 8009c82:	9b02      	ldr	r3, [sp, #8]
 8009c84:	429d      	cmp	r5, r3
 8009c86:	f43f af7c 	beq.w	8009b82 <_dtoa_r+0x47a>
 8009c8a:	4b31      	ldr	r3, [pc, #196]	; (8009d50 <_dtoa_r+0x648>)
 8009c8c:	ec51 0b19 	vmov	r0, r1, d9
 8009c90:	2200      	movs	r2, #0
 8009c92:	f7f6 fcd9 	bl	8000648 <__aeabi_dmul>
 8009c96:	4b2e      	ldr	r3, [pc, #184]	; (8009d50 <_dtoa_r+0x648>)
 8009c98:	ec41 0b19 	vmov	d9, r0, r1
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	f7f6 fcd1 	bl	8000648 <__aeabi_dmul>
 8009ca6:	4680      	mov	r8, r0
 8009ca8:	4689      	mov	r9, r1
 8009caa:	e7c5      	b.n	8009c38 <_dtoa_r+0x530>
 8009cac:	ec51 0b17 	vmov	r0, r1, d7
 8009cb0:	f7f6 fcca 	bl	8000648 <__aeabi_dmul>
 8009cb4:	9b02      	ldr	r3, [sp, #8]
 8009cb6:	9d00      	ldr	r5, [sp, #0]
 8009cb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cba:	ec41 0b19 	vmov	d9, r0, r1
 8009cbe:	4649      	mov	r1, r9
 8009cc0:	4640      	mov	r0, r8
 8009cc2:	f7f6 ff71 	bl	8000ba8 <__aeabi_d2iz>
 8009cc6:	4606      	mov	r6, r0
 8009cc8:	f7f6 fc54 	bl	8000574 <__aeabi_i2d>
 8009ccc:	3630      	adds	r6, #48	; 0x30
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	4640      	mov	r0, r8
 8009cd4:	4649      	mov	r1, r9
 8009cd6:	f7f6 faff 	bl	80002d8 <__aeabi_dsub>
 8009cda:	f805 6b01 	strb.w	r6, [r5], #1
 8009cde:	9b02      	ldr	r3, [sp, #8]
 8009ce0:	429d      	cmp	r5, r3
 8009ce2:	4680      	mov	r8, r0
 8009ce4:	4689      	mov	r9, r1
 8009ce6:	f04f 0200 	mov.w	r2, #0
 8009cea:	d124      	bne.n	8009d36 <_dtoa_r+0x62e>
 8009cec:	4b1b      	ldr	r3, [pc, #108]	; (8009d5c <_dtoa_r+0x654>)
 8009cee:	ec51 0b19 	vmov	r0, r1, d9
 8009cf2:	f7f6 faf3 	bl	80002dc <__adddf3>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	460b      	mov	r3, r1
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	f7f6 ff33 	bl	8000b68 <__aeabi_dcmpgt>
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d173      	bne.n	8009dee <_dtoa_r+0x6e6>
 8009d06:	ec53 2b19 	vmov	r2, r3, d9
 8009d0a:	4914      	ldr	r1, [pc, #80]	; (8009d5c <_dtoa_r+0x654>)
 8009d0c:	2000      	movs	r0, #0
 8009d0e:	f7f6 fae3 	bl	80002d8 <__aeabi_dsub>
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4640      	mov	r0, r8
 8009d18:	4649      	mov	r1, r9
 8009d1a:	f7f6 ff07 	bl	8000b2c <__aeabi_dcmplt>
 8009d1e:	2800      	cmp	r0, #0
 8009d20:	f43f af2f 	beq.w	8009b82 <_dtoa_r+0x47a>
 8009d24:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d26:	1e6b      	subs	r3, r5, #1
 8009d28:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d2a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d2e:	2b30      	cmp	r3, #48	; 0x30
 8009d30:	d0f8      	beq.n	8009d24 <_dtoa_r+0x61c>
 8009d32:	46bb      	mov	fp, r7
 8009d34:	e04a      	b.n	8009dcc <_dtoa_r+0x6c4>
 8009d36:	4b06      	ldr	r3, [pc, #24]	; (8009d50 <_dtoa_r+0x648>)
 8009d38:	f7f6 fc86 	bl	8000648 <__aeabi_dmul>
 8009d3c:	4680      	mov	r8, r0
 8009d3e:	4689      	mov	r9, r1
 8009d40:	e7bd      	b.n	8009cbe <_dtoa_r+0x5b6>
 8009d42:	bf00      	nop
 8009d44:	0800d7d8 	.word	0x0800d7d8
 8009d48:	0800d7b0 	.word	0x0800d7b0
 8009d4c:	3ff00000 	.word	0x3ff00000
 8009d50:	40240000 	.word	0x40240000
 8009d54:	401c0000 	.word	0x401c0000
 8009d58:	40140000 	.word	0x40140000
 8009d5c:	3fe00000 	.word	0x3fe00000
 8009d60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d64:	9d00      	ldr	r5, [sp, #0]
 8009d66:	4642      	mov	r2, r8
 8009d68:	464b      	mov	r3, r9
 8009d6a:	4630      	mov	r0, r6
 8009d6c:	4639      	mov	r1, r7
 8009d6e:	f7f6 fd95 	bl	800089c <__aeabi_ddiv>
 8009d72:	f7f6 ff19 	bl	8000ba8 <__aeabi_d2iz>
 8009d76:	9001      	str	r0, [sp, #4]
 8009d78:	f7f6 fbfc 	bl	8000574 <__aeabi_i2d>
 8009d7c:	4642      	mov	r2, r8
 8009d7e:	464b      	mov	r3, r9
 8009d80:	f7f6 fc62 	bl	8000648 <__aeabi_dmul>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	f7f6 faa4 	bl	80002d8 <__aeabi_dsub>
 8009d90:	9e01      	ldr	r6, [sp, #4]
 8009d92:	9f04      	ldr	r7, [sp, #16]
 8009d94:	3630      	adds	r6, #48	; 0x30
 8009d96:	f805 6b01 	strb.w	r6, [r5], #1
 8009d9a:	9e00      	ldr	r6, [sp, #0]
 8009d9c:	1bae      	subs	r6, r5, r6
 8009d9e:	42b7      	cmp	r7, r6
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	d134      	bne.n	8009e10 <_dtoa_r+0x708>
 8009da6:	f7f6 fa99 	bl	80002dc <__adddf3>
 8009daa:	4642      	mov	r2, r8
 8009dac:	464b      	mov	r3, r9
 8009dae:	4606      	mov	r6, r0
 8009db0:	460f      	mov	r7, r1
 8009db2:	f7f6 fed9 	bl	8000b68 <__aeabi_dcmpgt>
 8009db6:	b9c8      	cbnz	r0, 8009dec <_dtoa_r+0x6e4>
 8009db8:	4642      	mov	r2, r8
 8009dba:	464b      	mov	r3, r9
 8009dbc:	4630      	mov	r0, r6
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	f7f6 feaa 	bl	8000b18 <__aeabi_dcmpeq>
 8009dc4:	b110      	cbz	r0, 8009dcc <_dtoa_r+0x6c4>
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	07db      	lsls	r3, r3, #31
 8009dca:	d40f      	bmi.n	8009dec <_dtoa_r+0x6e4>
 8009dcc:	4651      	mov	r1, sl
 8009dce:	4620      	mov	r0, r4
 8009dd0:	f000 fbcc 	bl	800a56c <_Bfree>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dd8:	702b      	strb	r3, [r5, #0]
 8009dda:	f10b 0301 	add.w	r3, fp, #1
 8009dde:	6013      	str	r3, [r2, #0]
 8009de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	f43f ace2 	beq.w	80097ac <_dtoa_r+0xa4>
 8009de8:	601d      	str	r5, [r3, #0]
 8009dea:	e4df      	b.n	80097ac <_dtoa_r+0xa4>
 8009dec:	465f      	mov	r7, fp
 8009dee:	462b      	mov	r3, r5
 8009df0:	461d      	mov	r5, r3
 8009df2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009df6:	2a39      	cmp	r2, #57	; 0x39
 8009df8:	d106      	bne.n	8009e08 <_dtoa_r+0x700>
 8009dfa:	9a00      	ldr	r2, [sp, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d1f7      	bne.n	8009df0 <_dtoa_r+0x6e8>
 8009e00:	9900      	ldr	r1, [sp, #0]
 8009e02:	2230      	movs	r2, #48	; 0x30
 8009e04:	3701      	adds	r7, #1
 8009e06:	700a      	strb	r2, [r1, #0]
 8009e08:	781a      	ldrb	r2, [r3, #0]
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	701a      	strb	r2, [r3, #0]
 8009e0e:	e790      	b.n	8009d32 <_dtoa_r+0x62a>
 8009e10:	4ba3      	ldr	r3, [pc, #652]	; (800a0a0 <_dtoa_r+0x998>)
 8009e12:	2200      	movs	r2, #0
 8009e14:	f7f6 fc18 	bl	8000648 <__aeabi_dmul>
 8009e18:	2200      	movs	r2, #0
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	460f      	mov	r7, r1
 8009e20:	f7f6 fe7a 	bl	8000b18 <__aeabi_dcmpeq>
 8009e24:	2800      	cmp	r0, #0
 8009e26:	d09e      	beq.n	8009d66 <_dtoa_r+0x65e>
 8009e28:	e7d0      	b.n	8009dcc <_dtoa_r+0x6c4>
 8009e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e2c:	2a00      	cmp	r2, #0
 8009e2e:	f000 80ca 	beq.w	8009fc6 <_dtoa_r+0x8be>
 8009e32:	9a07      	ldr	r2, [sp, #28]
 8009e34:	2a01      	cmp	r2, #1
 8009e36:	f300 80ad 	bgt.w	8009f94 <_dtoa_r+0x88c>
 8009e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e3c:	2a00      	cmp	r2, #0
 8009e3e:	f000 80a5 	beq.w	8009f8c <_dtoa_r+0x884>
 8009e42:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e46:	9e08      	ldr	r6, [sp, #32]
 8009e48:	9d05      	ldr	r5, [sp, #20]
 8009e4a:	9a05      	ldr	r2, [sp, #20]
 8009e4c:	441a      	add	r2, r3
 8009e4e:	9205      	str	r2, [sp, #20]
 8009e50:	9a06      	ldr	r2, [sp, #24]
 8009e52:	2101      	movs	r1, #1
 8009e54:	441a      	add	r2, r3
 8009e56:	4620      	mov	r0, r4
 8009e58:	9206      	str	r2, [sp, #24]
 8009e5a:	f000 fc87 	bl	800a76c <__i2b>
 8009e5e:	4607      	mov	r7, r0
 8009e60:	b165      	cbz	r5, 8009e7c <_dtoa_r+0x774>
 8009e62:	9b06      	ldr	r3, [sp, #24]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dd09      	ble.n	8009e7c <_dtoa_r+0x774>
 8009e68:	42ab      	cmp	r3, r5
 8009e6a:	9a05      	ldr	r2, [sp, #20]
 8009e6c:	bfa8      	it	ge
 8009e6e:	462b      	movge	r3, r5
 8009e70:	1ad2      	subs	r2, r2, r3
 8009e72:	9205      	str	r2, [sp, #20]
 8009e74:	9a06      	ldr	r2, [sp, #24]
 8009e76:	1aed      	subs	r5, r5, r3
 8009e78:	1ad3      	subs	r3, r2, r3
 8009e7a:	9306      	str	r3, [sp, #24]
 8009e7c:	9b08      	ldr	r3, [sp, #32]
 8009e7e:	b1f3      	cbz	r3, 8009ebe <_dtoa_r+0x7b6>
 8009e80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f000 80a3 	beq.w	8009fce <_dtoa_r+0x8c6>
 8009e88:	2e00      	cmp	r6, #0
 8009e8a:	dd10      	ble.n	8009eae <_dtoa_r+0x7a6>
 8009e8c:	4639      	mov	r1, r7
 8009e8e:	4632      	mov	r2, r6
 8009e90:	4620      	mov	r0, r4
 8009e92:	f000 fd2b 	bl	800a8ec <__pow5mult>
 8009e96:	4652      	mov	r2, sl
 8009e98:	4601      	mov	r1, r0
 8009e9a:	4607      	mov	r7, r0
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f000 fc7b 	bl	800a798 <__multiply>
 8009ea2:	4651      	mov	r1, sl
 8009ea4:	4680      	mov	r8, r0
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 fb60 	bl	800a56c <_Bfree>
 8009eac:	46c2      	mov	sl, r8
 8009eae:	9b08      	ldr	r3, [sp, #32]
 8009eb0:	1b9a      	subs	r2, r3, r6
 8009eb2:	d004      	beq.n	8009ebe <_dtoa_r+0x7b6>
 8009eb4:	4651      	mov	r1, sl
 8009eb6:	4620      	mov	r0, r4
 8009eb8:	f000 fd18 	bl	800a8ec <__pow5mult>
 8009ebc:	4682      	mov	sl, r0
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 fc53 	bl	800a76c <__i2b>
 8009ec6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	4606      	mov	r6, r0
 8009ecc:	f340 8081 	ble.w	8009fd2 <_dtoa_r+0x8ca>
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 fd09 	bl	800a8ec <__pow5mult>
 8009eda:	9b07      	ldr	r3, [sp, #28]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	4606      	mov	r6, r0
 8009ee0:	dd7a      	ble.n	8009fd8 <_dtoa_r+0x8d0>
 8009ee2:	f04f 0800 	mov.w	r8, #0
 8009ee6:	6933      	ldr	r3, [r6, #16]
 8009ee8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009eec:	6918      	ldr	r0, [r3, #16]
 8009eee:	f000 fbef 	bl	800a6d0 <__hi0bits>
 8009ef2:	f1c0 0020 	rsb	r0, r0, #32
 8009ef6:	9b06      	ldr	r3, [sp, #24]
 8009ef8:	4418      	add	r0, r3
 8009efa:	f010 001f 	ands.w	r0, r0, #31
 8009efe:	f000 8094 	beq.w	800a02a <_dtoa_r+0x922>
 8009f02:	f1c0 0320 	rsb	r3, r0, #32
 8009f06:	2b04      	cmp	r3, #4
 8009f08:	f340 8085 	ble.w	800a016 <_dtoa_r+0x90e>
 8009f0c:	9b05      	ldr	r3, [sp, #20]
 8009f0e:	f1c0 001c 	rsb	r0, r0, #28
 8009f12:	4403      	add	r3, r0
 8009f14:	9305      	str	r3, [sp, #20]
 8009f16:	9b06      	ldr	r3, [sp, #24]
 8009f18:	4403      	add	r3, r0
 8009f1a:	4405      	add	r5, r0
 8009f1c:	9306      	str	r3, [sp, #24]
 8009f1e:	9b05      	ldr	r3, [sp, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	dd05      	ble.n	8009f30 <_dtoa_r+0x828>
 8009f24:	4651      	mov	r1, sl
 8009f26:	461a      	mov	r2, r3
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f000 fd39 	bl	800a9a0 <__lshift>
 8009f2e:	4682      	mov	sl, r0
 8009f30:	9b06      	ldr	r3, [sp, #24]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	dd05      	ble.n	8009f42 <_dtoa_r+0x83a>
 8009f36:	4631      	mov	r1, r6
 8009f38:	461a      	mov	r2, r3
 8009f3a:	4620      	mov	r0, r4
 8009f3c:	f000 fd30 	bl	800a9a0 <__lshift>
 8009f40:	4606      	mov	r6, r0
 8009f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d072      	beq.n	800a02e <_dtoa_r+0x926>
 8009f48:	4631      	mov	r1, r6
 8009f4a:	4650      	mov	r0, sl
 8009f4c:	f000 fd94 	bl	800aa78 <__mcmp>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	da6c      	bge.n	800a02e <_dtoa_r+0x926>
 8009f54:	2300      	movs	r3, #0
 8009f56:	4651      	mov	r1, sl
 8009f58:	220a      	movs	r2, #10
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 fb28 	bl	800a5b0 <__multadd>
 8009f60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f62:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f66:	4682      	mov	sl, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	f000 81b0 	beq.w	800a2ce <_dtoa_r+0xbc6>
 8009f6e:	2300      	movs	r3, #0
 8009f70:	4639      	mov	r1, r7
 8009f72:	220a      	movs	r2, #10
 8009f74:	4620      	mov	r0, r4
 8009f76:	f000 fb1b 	bl	800a5b0 <__multadd>
 8009f7a:	9b01      	ldr	r3, [sp, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	4607      	mov	r7, r0
 8009f80:	f300 8096 	bgt.w	800a0b0 <_dtoa_r+0x9a8>
 8009f84:	9b07      	ldr	r3, [sp, #28]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	dc59      	bgt.n	800a03e <_dtoa_r+0x936>
 8009f8a:	e091      	b.n	800a0b0 <_dtoa_r+0x9a8>
 8009f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f92:	e758      	b.n	8009e46 <_dtoa_r+0x73e>
 8009f94:	9b04      	ldr	r3, [sp, #16]
 8009f96:	1e5e      	subs	r6, r3, #1
 8009f98:	9b08      	ldr	r3, [sp, #32]
 8009f9a:	42b3      	cmp	r3, r6
 8009f9c:	bfbf      	itttt	lt
 8009f9e:	9b08      	ldrlt	r3, [sp, #32]
 8009fa0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009fa2:	9608      	strlt	r6, [sp, #32]
 8009fa4:	1af3      	sublt	r3, r6, r3
 8009fa6:	bfb4      	ite	lt
 8009fa8:	18d2      	addlt	r2, r2, r3
 8009faa:	1b9e      	subge	r6, r3, r6
 8009fac:	9b04      	ldr	r3, [sp, #16]
 8009fae:	bfbc      	itt	lt
 8009fb0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009fb2:	2600      	movlt	r6, #0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	bfb7      	itett	lt
 8009fb8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009fbc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009fc0:	1a9d      	sublt	r5, r3, r2
 8009fc2:	2300      	movlt	r3, #0
 8009fc4:	e741      	b.n	8009e4a <_dtoa_r+0x742>
 8009fc6:	9e08      	ldr	r6, [sp, #32]
 8009fc8:	9d05      	ldr	r5, [sp, #20]
 8009fca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009fcc:	e748      	b.n	8009e60 <_dtoa_r+0x758>
 8009fce:	9a08      	ldr	r2, [sp, #32]
 8009fd0:	e770      	b.n	8009eb4 <_dtoa_r+0x7ac>
 8009fd2:	9b07      	ldr	r3, [sp, #28]
 8009fd4:	2b01      	cmp	r3, #1
 8009fd6:	dc19      	bgt.n	800a00c <_dtoa_r+0x904>
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	b9bb      	cbnz	r3, 800a00c <_dtoa_r+0x904>
 8009fdc:	9b03      	ldr	r3, [sp, #12]
 8009fde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fe2:	b99b      	cbnz	r3, 800a00c <_dtoa_r+0x904>
 8009fe4:	9b03      	ldr	r3, [sp, #12]
 8009fe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fea:	0d1b      	lsrs	r3, r3, #20
 8009fec:	051b      	lsls	r3, r3, #20
 8009fee:	b183      	cbz	r3, 800a012 <_dtoa_r+0x90a>
 8009ff0:	9b05      	ldr	r3, [sp, #20]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	9305      	str	r3, [sp, #20]
 8009ff6:	9b06      	ldr	r3, [sp, #24]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	9306      	str	r3, [sp, #24]
 8009ffc:	f04f 0801 	mov.w	r8, #1
 800a000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a002:	2b00      	cmp	r3, #0
 800a004:	f47f af6f 	bne.w	8009ee6 <_dtoa_r+0x7de>
 800a008:	2001      	movs	r0, #1
 800a00a:	e774      	b.n	8009ef6 <_dtoa_r+0x7ee>
 800a00c:	f04f 0800 	mov.w	r8, #0
 800a010:	e7f6      	b.n	800a000 <_dtoa_r+0x8f8>
 800a012:	4698      	mov	r8, r3
 800a014:	e7f4      	b.n	800a000 <_dtoa_r+0x8f8>
 800a016:	d082      	beq.n	8009f1e <_dtoa_r+0x816>
 800a018:	9a05      	ldr	r2, [sp, #20]
 800a01a:	331c      	adds	r3, #28
 800a01c:	441a      	add	r2, r3
 800a01e:	9205      	str	r2, [sp, #20]
 800a020:	9a06      	ldr	r2, [sp, #24]
 800a022:	441a      	add	r2, r3
 800a024:	441d      	add	r5, r3
 800a026:	9206      	str	r2, [sp, #24]
 800a028:	e779      	b.n	8009f1e <_dtoa_r+0x816>
 800a02a:	4603      	mov	r3, r0
 800a02c:	e7f4      	b.n	800a018 <_dtoa_r+0x910>
 800a02e:	9b04      	ldr	r3, [sp, #16]
 800a030:	2b00      	cmp	r3, #0
 800a032:	dc37      	bgt.n	800a0a4 <_dtoa_r+0x99c>
 800a034:	9b07      	ldr	r3, [sp, #28]
 800a036:	2b02      	cmp	r3, #2
 800a038:	dd34      	ble.n	800a0a4 <_dtoa_r+0x99c>
 800a03a:	9b04      	ldr	r3, [sp, #16]
 800a03c:	9301      	str	r3, [sp, #4]
 800a03e:	9b01      	ldr	r3, [sp, #4]
 800a040:	b963      	cbnz	r3, 800a05c <_dtoa_r+0x954>
 800a042:	4631      	mov	r1, r6
 800a044:	2205      	movs	r2, #5
 800a046:	4620      	mov	r0, r4
 800a048:	f000 fab2 	bl	800a5b0 <__multadd>
 800a04c:	4601      	mov	r1, r0
 800a04e:	4606      	mov	r6, r0
 800a050:	4650      	mov	r0, sl
 800a052:	f000 fd11 	bl	800aa78 <__mcmp>
 800a056:	2800      	cmp	r0, #0
 800a058:	f73f adbb 	bgt.w	8009bd2 <_dtoa_r+0x4ca>
 800a05c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a05e:	9d00      	ldr	r5, [sp, #0]
 800a060:	ea6f 0b03 	mvn.w	fp, r3
 800a064:	f04f 0800 	mov.w	r8, #0
 800a068:	4631      	mov	r1, r6
 800a06a:	4620      	mov	r0, r4
 800a06c:	f000 fa7e 	bl	800a56c <_Bfree>
 800a070:	2f00      	cmp	r7, #0
 800a072:	f43f aeab 	beq.w	8009dcc <_dtoa_r+0x6c4>
 800a076:	f1b8 0f00 	cmp.w	r8, #0
 800a07a:	d005      	beq.n	800a088 <_dtoa_r+0x980>
 800a07c:	45b8      	cmp	r8, r7
 800a07e:	d003      	beq.n	800a088 <_dtoa_r+0x980>
 800a080:	4641      	mov	r1, r8
 800a082:	4620      	mov	r0, r4
 800a084:	f000 fa72 	bl	800a56c <_Bfree>
 800a088:	4639      	mov	r1, r7
 800a08a:	4620      	mov	r0, r4
 800a08c:	f000 fa6e 	bl	800a56c <_Bfree>
 800a090:	e69c      	b.n	8009dcc <_dtoa_r+0x6c4>
 800a092:	2600      	movs	r6, #0
 800a094:	4637      	mov	r7, r6
 800a096:	e7e1      	b.n	800a05c <_dtoa_r+0x954>
 800a098:	46bb      	mov	fp, r7
 800a09a:	4637      	mov	r7, r6
 800a09c:	e599      	b.n	8009bd2 <_dtoa_r+0x4ca>
 800a09e:	bf00      	nop
 800a0a0:	40240000 	.word	0x40240000
 800a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f000 80c8 	beq.w	800a23c <_dtoa_r+0xb34>
 800a0ac:	9b04      	ldr	r3, [sp, #16]
 800a0ae:	9301      	str	r3, [sp, #4]
 800a0b0:	2d00      	cmp	r5, #0
 800a0b2:	dd05      	ble.n	800a0c0 <_dtoa_r+0x9b8>
 800a0b4:	4639      	mov	r1, r7
 800a0b6:	462a      	mov	r2, r5
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f000 fc71 	bl	800a9a0 <__lshift>
 800a0be:	4607      	mov	r7, r0
 800a0c0:	f1b8 0f00 	cmp.w	r8, #0
 800a0c4:	d05b      	beq.n	800a17e <_dtoa_r+0xa76>
 800a0c6:	6879      	ldr	r1, [r7, #4]
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f000 fa0f 	bl	800a4ec <_Balloc>
 800a0ce:	4605      	mov	r5, r0
 800a0d0:	b928      	cbnz	r0, 800a0de <_dtoa_r+0x9d6>
 800a0d2:	4b83      	ldr	r3, [pc, #524]	; (800a2e0 <_dtoa_r+0xbd8>)
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a0da:	f7ff bb2e 	b.w	800973a <_dtoa_r+0x32>
 800a0de:	693a      	ldr	r2, [r7, #16]
 800a0e0:	3202      	adds	r2, #2
 800a0e2:	0092      	lsls	r2, r2, #2
 800a0e4:	f107 010c 	add.w	r1, r7, #12
 800a0e8:	300c      	adds	r0, #12
 800a0ea:	f7ff fa6e 	bl	80095ca <memcpy>
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f000 fc54 	bl	800a9a0 <__lshift>
 800a0f8:	9b00      	ldr	r3, [sp, #0]
 800a0fa:	3301      	adds	r3, #1
 800a0fc:	9304      	str	r3, [sp, #16]
 800a0fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a102:	4413      	add	r3, r2
 800a104:	9308      	str	r3, [sp, #32]
 800a106:	9b02      	ldr	r3, [sp, #8]
 800a108:	f003 0301 	and.w	r3, r3, #1
 800a10c:	46b8      	mov	r8, r7
 800a10e:	9306      	str	r3, [sp, #24]
 800a110:	4607      	mov	r7, r0
 800a112:	9b04      	ldr	r3, [sp, #16]
 800a114:	4631      	mov	r1, r6
 800a116:	3b01      	subs	r3, #1
 800a118:	4650      	mov	r0, sl
 800a11a:	9301      	str	r3, [sp, #4]
 800a11c:	f7ff fa6a 	bl	80095f4 <quorem>
 800a120:	4641      	mov	r1, r8
 800a122:	9002      	str	r0, [sp, #8]
 800a124:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a128:	4650      	mov	r0, sl
 800a12a:	f000 fca5 	bl	800aa78 <__mcmp>
 800a12e:	463a      	mov	r2, r7
 800a130:	9005      	str	r0, [sp, #20]
 800a132:	4631      	mov	r1, r6
 800a134:	4620      	mov	r0, r4
 800a136:	f000 fcbb 	bl	800aab0 <__mdiff>
 800a13a:	68c2      	ldr	r2, [r0, #12]
 800a13c:	4605      	mov	r5, r0
 800a13e:	bb02      	cbnz	r2, 800a182 <_dtoa_r+0xa7a>
 800a140:	4601      	mov	r1, r0
 800a142:	4650      	mov	r0, sl
 800a144:	f000 fc98 	bl	800aa78 <__mcmp>
 800a148:	4602      	mov	r2, r0
 800a14a:	4629      	mov	r1, r5
 800a14c:	4620      	mov	r0, r4
 800a14e:	9209      	str	r2, [sp, #36]	; 0x24
 800a150:	f000 fa0c 	bl	800a56c <_Bfree>
 800a154:	9b07      	ldr	r3, [sp, #28]
 800a156:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a158:	9d04      	ldr	r5, [sp, #16]
 800a15a:	ea43 0102 	orr.w	r1, r3, r2
 800a15e:	9b06      	ldr	r3, [sp, #24]
 800a160:	4319      	orrs	r1, r3
 800a162:	d110      	bne.n	800a186 <_dtoa_r+0xa7e>
 800a164:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a168:	d029      	beq.n	800a1be <_dtoa_r+0xab6>
 800a16a:	9b05      	ldr	r3, [sp, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	dd02      	ble.n	800a176 <_dtoa_r+0xa6e>
 800a170:	9b02      	ldr	r3, [sp, #8]
 800a172:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a176:	9b01      	ldr	r3, [sp, #4]
 800a178:	f883 9000 	strb.w	r9, [r3]
 800a17c:	e774      	b.n	800a068 <_dtoa_r+0x960>
 800a17e:	4638      	mov	r0, r7
 800a180:	e7ba      	b.n	800a0f8 <_dtoa_r+0x9f0>
 800a182:	2201      	movs	r2, #1
 800a184:	e7e1      	b.n	800a14a <_dtoa_r+0xa42>
 800a186:	9b05      	ldr	r3, [sp, #20]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	db04      	blt.n	800a196 <_dtoa_r+0xa8e>
 800a18c:	9907      	ldr	r1, [sp, #28]
 800a18e:	430b      	orrs	r3, r1
 800a190:	9906      	ldr	r1, [sp, #24]
 800a192:	430b      	orrs	r3, r1
 800a194:	d120      	bne.n	800a1d8 <_dtoa_r+0xad0>
 800a196:	2a00      	cmp	r2, #0
 800a198:	dded      	ble.n	800a176 <_dtoa_r+0xa6e>
 800a19a:	4651      	mov	r1, sl
 800a19c:	2201      	movs	r2, #1
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 fbfe 	bl	800a9a0 <__lshift>
 800a1a4:	4631      	mov	r1, r6
 800a1a6:	4682      	mov	sl, r0
 800a1a8:	f000 fc66 	bl	800aa78 <__mcmp>
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	dc03      	bgt.n	800a1b8 <_dtoa_r+0xab0>
 800a1b0:	d1e1      	bne.n	800a176 <_dtoa_r+0xa6e>
 800a1b2:	f019 0f01 	tst.w	r9, #1
 800a1b6:	d0de      	beq.n	800a176 <_dtoa_r+0xa6e>
 800a1b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a1bc:	d1d8      	bne.n	800a170 <_dtoa_r+0xa68>
 800a1be:	9a01      	ldr	r2, [sp, #4]
 800a1c0:	2339      	movs	r3, #57	; 0x39
 800a1c2:	7013      	strb	r3, [r2, #0]
 800a1c4:	462b      	mov	r3, r5
 800a1c6:	461d      	mov	r5, r3
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1ce:	2a39      	cmp	r2, #57	; 0x39
 800a1d0:	d06c      	beq.n	800a2ac <_dtoa_r+0xba4>
 800a1d2:	3201      	adds	r2, #1
 800a1d4:	701a      	strb	r2, [r3, #0]
 800a1d6:	e747      	b.n	800a068 <_dtoa_r+0x960>
 800a1d8:	2a00      	cmp	r2, #0
 800a1da:	dd07      	ble.n	800a1ec <_dtoa_r+0xae4>
 800a1dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a1e0:	d0ed      	beq.n	800a1be <_dtoa_r+0xab6>
 800a1e2:	9a01      	ldr	r2, [sp, #4]
 800a1e4:	f109 0301 	add.w	r3, r9, #1
 800a1e8:	7013      	strb	r3, [r2, #0]
 800a1ea:	e73d      	b.n	800a068 <_dtoa_r+0x960>
 800a1ec:	9b04      	ldr	r3, [sp, #16]
 800a1ee:	9a08      	ldr	r2, [sp, #32]
 800a1f0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d043      	beq.n	800a280 <_dtoa_r+0xb78>
 800a1f8:	4651      	mov	r1, sl
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	220a      	movs	r2, #10
 800a1fe:	4620      	mov	r0, r4
 800a200:	f000 f9d6 	bl	800a5b0 <__multadd>
 800a204:	45b8      	cmp	r8, r7
 800a206:	4682      	mov	sl, r0
 800a208:	f04f 0300 	mov.w	r3, #0
 800a20c:	f04f 020a 	mov.w	r2, #10
 800a210:	4641      	mov	r1, r8
 800a212:	4620      	mov	r0, r4
 800a214:	d107      	bne.n	800a226 <_dtoa_r+0xb1e>
 800a216:	f000 f9cb 	bl	800a5b0 <__multadd>
 800a21a:	4680      	mov	r8, r0
 800a21c:	4607      	mov	r7, r0
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	3301      	adds	r3, #1
 800a222:	9304      	str	r3, [sp, #16]
 800a224:	e775      	b.n	800a112 <_dtoa_r+0xa0a>
 800a226:	f000 f9c3 	bl	800a5b0 <__multadd>
 800a22a:	4639      	mov	r1, r7
 800a22c:	4680      	mov	r8, r0
 800a22e:	2300      	movs	r3, #0
 800a230:	220a      	movs	r2, #10
 800a232:	4620      	mov	r0, r4
 800a234:	f000 f9bc 	bl	800a5b0 <__multadd>
 800a238:	4607      	mov	r7, r0
 800a23a:	e7f0      	b.n	800a21e <_dtoa_r+0xb16>
 800a23c:	9b04      	ldr	r3, [sp, #16]
 800a23e:	9301      	str	r3, [sp, #4]
 800a240:	9d00      	ldr	r5, [sp, #0]
 800a242:	4631      	mov	r1, r6
 800a244:	4650      	mov	r0, sl
 800a246:	f7ff f9d5 	bl	80095f4 <quorem>
 800a24a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a24e:	9b00      	ldr	r3, [sp, #0]
 800a250:	f805 9b01 	strb.w	r9, [r5], #1
 800a254:	1aea      	subs	r2, r5, r3
 800a256:	9b01      	ldr	r3, [sp, #4]
 800a258:	4293      	cmp	r3, r2
 800a25a:	dd07      	ble.n	800a26c <_dtoa_r+0xb64>
 800a25c:	4651      	mov	r1, sl
 800a25e:	2300      	movs	r3, #0
 800a260:	220a      	movs	r2, #10
 800a262:	4620      	mov	r0, r4
 800a264:	f000 f9a4 	bl	800a5b0 <__multadd>
 800a268:	4682      	mov	sl, r0
 800a26a:	e7ea      	b.n	800a242 <_dtoa_r+0xb3a>
 800a26c:	9b01      	ldr	r3, [sp, #4]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bfc8      	it	gt
 800a272:	461d      	movgt	r5, r3
 800a274:	9b00      	ldr	r3, [sp, #0]
 800a276:	bfd8      	it	le
 800a278:	2501      	movle	r5, #1
 800a27a:	441d      	add	r5, r3
 800a27c:	f04f 0800 	mov.w	r8, #0
 800a280:	4651      	mov	r1, sl
 800a282:	2201      	movs	r2, #1
 800a284:	4620      	mov	r0, r4
 800a286:	f000 fb8b 	bl	800a9a0 <__lshift>
 800a28a:	4631      	mov	r1, r6
 800a28c:	4682      	mov	sl, r0
 800a28e:	f000 fbf3 	bl	800aa78 <__mcmp>
 800a292:	2800      	cmp	r0, #0
 800a294:	dc96      	bgt.n	800a1c4 <_dtoa_r+0xabc>
 800a296:	d102      	bne.n	800a29e <_dtoa_r+0xb96>
 800a298:	f019 0f01 	tst.w	r9, #1
 800a29c:	d192      	bne.n	800a1c4 <_dtoa_r+0xabc>
 800a29e:	462b      	mov	r3, r5
 800a2a0:	461d      	mov	r5, r3
 800a2a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2a6:	2a30      	cmp	r2, #48	; 0x30
 800a2a8:	d0fa      	beq.n	800a2a0 <_dtoa_r+0xb98>
 800a2aa:	e6dd      	b.n	800a068 <_dtoa_r+0x960>
 800a2ac:	9a00      	ldr	r2, [sp, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d189      	bne.n	800a1c6 <_dtoa_r+0xabe>
 800a2b2:	f10b 0b01 	add.w	fp, fp, #1
 800a2b6:	2331      	movs	r3, #49	; 0x31
 800a2b8:	e796      	b.n	800a1e8 <_dtoa_r+0xae0>
 800a2ba:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <_dtoa_r+0xbdc>)
 800a2bc:	f7ff ba99 	b.w	80097f2 <_dtoa_r+0xea>
 800a2c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	f47f aa6d 	bne.w	80097a2 <_dtoa_r+0x9a>
 800a2c8:	4b07      	ldr	r3, [pc, #28]	; (800a2e8 <_dtoa_r+0xbe0>)
 800a2ca:	f7ff ba92 	b.w	80097f2 <_dtoa_r+0xea>
 800a2ce:	9b01      	ldr	r3, [sp, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	dcb5      	bgt.n	800a240 <_dtoa_r+0xb38>
 800a2d4:	9b07      	ldr	r3, [sp, #28]
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	f73f aeb1 	bgt.w	800a03e <_dtoa_r+0x936>
 800a2dc:	e7b0      	b.n	800a240 <_dtoa_r+0xb38>
 800a2de:	bf00      	nop
 800a2e0:	0800d73f 	.word	0x0800d73f
 800a2e4:	0800da28 	.word	0x0800da28
 800a2e8:	0800d6c3 	.word	0x0800d6c3

0800a2ec <_free_r>:
 800a2ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2ee:	2900      	cmp	r1, #0
 800a2f0:	d044      	beq.n	800a37c <_free_r+0x90>
 800a2f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2f6:	9001      	str	r0, [sp, #4]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a2fe:	bfb8      	it	lt
 800a300:	18e4      	addlt	r4, r4, r3
 800a302:	f000 f8e7 	bl	800a4d4 <__malloc_lock>
 800a306:	4a1e      	ldr	r2, [pc, #120]	; (800a380 <_free_r+0x94>)
 800a308:	9801      	ldr	r0, [sp, #4]
 800a30a:	6813      	ldr	r3, [r2, #0]
 800a30c:	b933      	cbnz	r3, 800a31c <_free_r+0x30>
 800a30e:	6063      	str	r3, [r4, #4]
 800a310:	6014      	str	r4, [r2, #0]
 800a312:	b003      	add	sp, #12
 800a314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a318:	f000 b8e2 	b.w	800a4e0 <__malloc_unlock>
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	d908      	bls.n	800a332 <_free_r+0x46>
 800a320:	6825      	ldr	r5, [r4, #0]
 800a322:	1961      	adds	r1, r4, r5
 800a324:	428b      	cmp	r3, r1
 800a326:	bf01      	itttt	eq
 800a328:	6819      	ldreq	r1, [r3, #0]
 800a32a:	685b      	ldreq	r3, [r3, #4]
 800a32c:	1949      	addeq	r1, r1, r5
 800a32e:	6021      	streq	r1, [r4, #0]
 800a330:	e7ed      	b.n	800a30e <_free_r+0x22>
 800a332:	461a      	mov	r2, r3
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	b10b      	cbz	r3, 800a33c <_free_r+0x50>
 800a338:	42a3      	cmp	r3, r4
 800a33a:	d9fa      	bls.n	800a332 <_free_r+0x46>
 800a33c:	6811      	ldr	r1, [r2, #0]
 800a33e:	1855      	adds	r5, r2, r1
 800a340:	42a5      	cmp	r5, r4
 800a342:	d10b      	bne.n	800a35c <_free_r+0x70>
 800a344:	6824      	ldr	r4, [r4, #0]
 800a346:	4421      	add	r1, r4
 800a348:	1854      	adds	r4, r2, r1
 800a34a:	42a3      	cmp	r3, r4
 800a34c:	6011      	str	r1, [r2, #0]
 800a34e:	d1e0      	bne.n	800a312 <_free_r+0x26>
 800a350:	681c      	ldr	r4, [r3, #0]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	6053      	str	r3, [r2, #4]
 800a356:	440c      	add	r4, r1
 800a358:	6014      	str	r4, [r2, #0]
 800a35a:	e7da      	b.n	800a312 <_free_r+0x26>
 800a35c:	d902      	bls.n	800a364 <_free_r+0x78>
 800a35e:	230c      	movs	r3, #12
 800a360:	6003      	str	r3, [r0, #0]
 800a362:	e7d6      	b.n	800a312 <_free_r+0x26>
 800a364:	6825      	ldr	r5, [r4, #0]
 800a366:	1961      	adds	r1, r4, r5
 800a368:	428b      	cmp	r3, r1
 800a36a:	bf04      	itt	eq
 800a36c:	6819      	ldreq	r1, [r3, #0]
 800a36e:	685b      	ldreq	r3, [r3, #4]
 800a370:	6063      	str	r3, [r4, #4]
 800a372:	bf04      	itt	eq
 800a374:	1949      	addeq	r1, r1, r5
 800a376:	6021      	streq	r1, [r4, #0]
 800a378:	6054      	str	r4, [r2, #4]
 800a37a:	e7ca      	b.n	800a312 <_free_r+0x26>
 800a37c:	b003      	add	sp, #12
 800a37e:	bd30      	pop	{r4, r5, pc}
 800a380:	20000814 	.word	0x20000814

0800a384 <malloc>:
 800a384:	4b02      	ldr	r3, [pc, #8]	; (800a390 <malloc+0xc>)
 800a386:	4601      	mov	r1, r0
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	f000 b823 	b.w	800a3d4 <_malloc_r>
 800a38e:	bf00      	nop
 800a390:	20000060 	.word	0x20000060

0800a394 <sbrk_aligned>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	4e0e      	ldr	r6, [pc, #56]	; (800a3d0 <sbrk_aligned+0x3c>)
 800a398:	460c      	mov	r4, r1
 800a39a:	6831      	ldr	r1, [r6, #0]
 800a39c:	4605      	mov	r5, r0
 800a39e:	b911      	cbnz	r1, 800a3a6 <sbrk_aligned+0x12>
 800a3a0:	f002 f9ae 	bl	800c700 <_sbrk_r>
 800a3a4:	6030      	str	r0, [r6, #0]
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f002 f9a9 	bl	800c700 <_sbrk_r>
 800a3ae:	1c43      	adds	r3, r0, #1
 800a3b0:	d00a      	beq.n	800a3c8 <sbrk_aligned+0x34>
 800a3b2:	1cc4      	adds	r4, r0, #3
 800a3b4:	f024 0403 	bic.w	r4, r4, #3
 800a3b8:	42a0      	cmp	r0, r4
 800a3ba:	d007      	beq.n	800a3cc <sbrk_aligned+0x38>
 800a3bc:	1a21      	subs	r1, r4, r0
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f002 f99e 	bl	800c700 <_sbrk_r>
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	d101      	bne.n	800a3cc <sbrk_aligned+0x38>
 800a3c8:	f04f 34ff 	mov.w	r4, #4294967295
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	bd70      	pop	{r4, r5, r6, pc}
 800a3d0:	20000818 	.word	0x20000818

0800a3d4 <_malloc_r>:
 800a3d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3d8:	1ccd      	adds	r5, r1, #3
 800a3da:	f025 0503 	bic.w	r5, r5, #3
 800a3de:	3508      	adds	r5, #8
 800a3e0:	2d0c      	cmp	r5, #12
 800a3e2:	bf38      	it	cc
 800a3e4:	250c      	movcc	r5, #12
 800a3e6:	2d00      	cmp	r5, #0
 800a3e8:	4607      	mov	r7, r0
 800a3ea:	db01      	blt.n	800a3f0 <_malloc_r+0x1c>
 800a3ec:	42a9      	cmp	r1, r5
 800a3ee:	d905      	bls.n	800a3fc <_malloc_r+0x28>
 800a3f0:	230c      	movs	r3, #12
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	2600      	movs	r6, #0
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a4d0 <_malloc_r+0xfc>
 800a400:	f000 f868 	bl	800a4d4 <__malloc_lock>
 800a404:	f8d8 3000 	ldr.w	r3, [r8]
 800a408:	461c      	mov	r4, r3
 800a40a:	bb5c      	cbnz	r4, 800a464 <_malloc_r+0x90>
 800a40c:	4629      	mov	r1, r5
 800a40e:	4638      	mov	r0, r7
 800a410:	f7ff ffc0 	bl	800a394 <sbrk_aligned>
 800a414:	1c43      	adds	r3, r0, #1
 800a416:	4604      	mov	r4, r0
 800a418:	d155      	bne.n	800a4c6 <_malloc_r+0xf2>
 800a41a:	f8d8 4000 	ldr.w	r4, [r8]
 800a41e:	4626      	mov	r6, r4
 800a420:	2e00      	cmp	r6, #0
 800a422:	d145      	bne.n	800a4b0 <_malloc_r+0xdc>
 800a424:	2c00      	cmp	r4, #0
 800a426:	d048      	beq.n	800a4ba <_malloc_r+0xe6>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	4631      	mov	r1, r6
 800a42c:	4638      	mov	r0, r7
 800a42e:	eb04 0903 	add.w	r9, r4, r3
 800a432:	f002 f965 	bl	800c700 <_sbrk_r>
 800a436:	4581      	cmp	r9, r0
 800a438:	d13f      	bne.n	800a4ba <_malloc_r+0xe6>
 800a43a:	6821      	ldr	r1, [r4, #0]
 800a43c:	1a6d      	subs	r5, r5, r1
 800a43e:	4629      	mov	r1, r5
 800a440:	4638      	mov	r0, r7
 800a442:	f7ff ffa7 	bl	800a394 <sbrk_aligned>
 800a446:	3001      	adds	r0, #1
 800a448:	d037      	beq.n	800a4ba <_malloc_r+0xe6>
 800a44a:	6823      	ldr	r3, [r4, #0]
 800a44c:	442b      	add	r3, r5
 800a44e:	6023      	str	r3, [r4, #0]
 800a450:	f8d8 3000 	ldr.w	r3, [r8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d038      	beq.n	800a4ca <_malloc_r+0xf6>
 800a458:	685a      	ldr	r2, [r3, #4]
 800a45a:	42a2      	cmp	r2, r4
 800a45c:	d12b      	bne.n	800a4b6 <_malloc_r+0xe2>
 800a45e:	2200      	movs	r2, #0
 800a460:	605a      	str	r2, [r3, #4]
 800a462:	e00f      	b.n	800a484 <_malloc_r+0xb0>
 800a464:	6822      	ldr	r2, [r4, #0]
 800a466:	1b52      	subs	r2, r2, r5
 800a468:	d41f      	bmi.n	800a4aa <_malloc_r+0xd6>
 800a46a:	2a0b      	cmp	r2, #11
 800a46c:	d917      	bls.n	800a49e <_malloc_r+0xca>
 800a46e:	1961      	adds	r1, r4, r5
 800a470:	42a3      	cmp	r3, r4
 800a472:	6025      	str	r5, [r4, #0]
 800a474:	bf18      	it	ne
 800a476:	6059      	strne	r1, [r3, #4]
 800a478:	6863      	ldr	r3, [r4, #4]
 800a47a:	bf08      	it	eq
 800a47c:	f8c8 1000 	streq.w	r1, [r8]
 800a480:	5162      	str	r2, [r4, r5]
 800a482:	604b      	str	r3, [r1, #4]
 800a484:	4638      	mov	r0, r7
 800a486:	f104 060b 	add.w	r6, r4, #11
 800a48a:	f000 f829 	bl	800a4e0 <__malloc_unlock>
 800a48e:	f026 0607 	bic.w	r6, r6, #7
 800a492:	1d23      	adds	r3, r4, #4
 800a494:	1af2      	subs	r2, r6, r3
 800a496:	d0ae      	beq.n	800a3f6 <_malloc_r+0x22>
 800a498:	1b9b      	subs	r3, r3, r6
 800a49a:	50a3      	str	r3, [r4, r2]
 800a49c:	e7ab      	b.n	800a3f6 <_malloc_r+0x22>
 800a49e:	42a3      	cmp	r3, r4
 800a4a0:	6862      	ldr	r2, [r4, #4]
 800a4a2:	d1dd      	bne.n	800a460 <_malloc_r+0x8c>
 800a4a4:	f8c8 2000 	str.w	r2, [r8]
 800a4a8:	e7ec      	b.n	800a484 <_malloc_r+0xb0>
 800a4aa:	4623      	mov	r3, r4
 800a4ac:	6864      	ldr	r4, [r4, #4]
 800a4ae:	e7ac      	b.n	800a40a <_malloc_r+0x36>
 800a4b0:	4634      	mov	r4, r6
 800a4b2:	6876      	ldr	r6, [r6, #4]
 800a4b4:	e7b4      	b.n	800a420 <_malloc_r+0x4c>
 800a4b6:	4613      	mov	r3, r2
 800a4b8:	e7cc      	b.n	800a454 <_malloc_r+0x80>
 800a4ba:	230c      	movs	r3, #12
 800a4bc:	603b      	str	r3, [r7, #0]
 800a4be:	4638      	mov	r0, r7
 800a4c0:	f000 f80e 	bl	800a4e0 <__malloc_unlock>
 800a4c4:	e797      	b.n	800a3f6 <_malloc_r+0x22>
 800a4c6:	6025      	str	r5, [r4, #0]
 800a4c8:	e7dc      	b.n	800a484 <_malloc_r+0xb0>
 800a4ca:	605b      	str	r3, [r3, #4]
 800a4cc:	deff      	udf	#255	; 0xff
 800a4ce:	bf00      	nop
 800a4d0:	20000814 	.word	0x20000814

0800a4d4 <__malloc_lock>:
 800a4d4:	4801      	ldr	r0, [pc, #4]	; (800a4dc <__malloc_lock+0x8>)
 800a4d6:	f7ff b876 	b.w	80095c6 <__retarget_lock_acquire_recursive>
 800a4da:	bf00      	nop
 800a4dc:	20000810 	.word	0x20000810

0800a4e0 <__malloc_unlock>:
 800a4e0:	4801      	ldr	r0, [pc, #4]	; (800a4e8 <__malloc_unlock+0x8>)
 800a4e2:	f7ff b871 	b.w	80095c8 <__retarget_lock_release_recursive>
 800a4e6:	bf00      	nop
 800a4e8:	20000810 	.word	0x20000810

0800a4ec <_Balloc>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	69c6      	ldr	r6, [r0, #28]
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	b976      	cbnz	r6, 800a514 <_Balloc+0x28>
 800a4f6:	2010      	movs	r0, #16
 800a4f8:	f7ff ff44 	bl	800a384 <malloc>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	61e0      	str	r0, [r4, #28]
 800a500:	b920      	cbnz	r0, 800a50c <_Balloc+0x20>
 800a502:	4b18      	ldr	r3, [pc, #96]	; (800a564 <_Balloc+0x78>)
 800a504:	4818      	ldr	r0, [pc, #96]	; (800a568 <_Balloc+0x7c>)
 800a506:	216b      	movs	r1, #107	; 0x6b
 800a508:	f002 f912 	bl	800c730 <__assert_func>
 800a50c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a510:	6006      	str	r6, [r0, #0]
 800a512:	60c6      	str	r6, [r0, #12]
 800a514:	69e6      	ldr	r6, [r4, #28]
 800a516:	68f3      	ldr	r3, [r6, #12]
 800a518:	b183      	cbz	r3, 800a53c <_Balloc+0x50>
 800a51a:	69e3      	ldr	r3, [r4, #28]
 800a51c:	68db      	ldr	r3, [r3, #12]
 800a51e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a522:	b9b8      	cbnz	r0, 800a554 <_Balloc+0x68>
 800a524:	2101      	movs	r1, #1
 800a526:	fa01 f605 	lsl.w	r6, r1, r5
 800a52a:	1d72      	adds	r2, r6, #5
 800a52c:	0092      	lsls	r2, r2, #2
 800a52e:	4620      	mov	r0, r4
 800a530:	f002 f91c 	bl	800c76c <_calloc_r>
 800a534:	b160      	cbz	r0, 800a550 <_Balloc+0x64>
 800a536:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a53a:	e00e      	b.n	800a55a <_Balloc+0x6e>
 800a53c:	2221      	movs	r2, #33	; 0x21
 800a53e:	2104      	movs	r1, #4
 800a540:	4620      	mov	r0, r4
 800a542:	f002 f913 	bl	800c76c <_calloc_r>
 800a546:	69e3      	ldr	r3, [r4, #28]
 800a548:	60f0      	str	r0, [r6, #12]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1e4      	bne.n	800a51a <_Balloc+0x2e>
 800a550:	2000      	movs	r0, #0
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	6802      	ldr	r2, [r0, #0]
 800a556:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a55a:	2300      	movs	r3, #0
 800a55c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a560:	e7f7      	b.n	800a552 <_Balloc+0x66>
 800a562:	bf00      	nop
 800a564:	0800d6d0 	.word	0x0800d6d0
 800a568:	0800d750 	.word	0x0800d750

0800a56c <_Bfree>:
 800a56c:	b570      	push	{r4, r5, r6, lr}
 800a56e:	69c6      	ldr	r6, [r0, #28]
 800a570:	4605      	mov	r5, r0
 800a572:	460c      	mov	r4, r1
 800a574:	b976      	cbnz	r6, 800a594 <_Bfree+0x28>
 800a576:	2010      	movs	r0, #16
 800a578:	f7ff ff04 	bl	800a384 <malloc>
 800a57c:	4602      	mov	r2, r0
 800a57e:	61e8      	str	r0, [r5, #28]
 800a580:	b920      	cbnz	r0, 800a58c <_Bfree+0x20>
 800a582:	4b09      	ldr	r3, [pc, #36]	; (800a5a8 <_Bfree+0x3c>)
 800a584:	4809      	ldr	r0, [pc, #36]	; (800a5ac <_Bfree+0x40>)
 800a586:	218f      	movs	r1, #143	; 0x8f
 800a588:	f002 f8d2 	bl	800c730 <__assert_func>
 800a58c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a590:	6006      	str	r6, [r0, #0]
 800a592:	60c6      	str	r6, [r0, #12]
 800a594:	b13c      	cbz	r4, 800a5a6 <_Bfree+0x3a>
 800a596:	69eb      	ldr	r3, [r5, #28]
 800a598:	6862      	ldr	r2, [r4, #4]
 800a59a:	68db      	ldr	r3, [r3, #12]
 800a59c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5a0:	6021      	str	r1, [r4, #0]
 800a5a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5a6:	bd70      	pop	{r4, r5, r6, pc}
 800a5a8:	0800d6d0 	.word	0x0800d6d0
 800a5ac:	0800d750 	.word	0x0800d750

0800a5b0 <__multadd>:
 800a5b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b4:	690d      	ldr	r5, [r1, #16]
 800a5b6:	4607      	mov	r7, r0
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	461e      	mov	r6, r3
 800a5bc:	f101 0c14 	add.w	ip, r1, #20
 800a5c0:	2000      	movs	r0, #0
 800a5c2:	f8dc 3000 	ldr.w	r3, [ip]
 800a5c6:	b299      	uxth	r1, r3
 800a5c8:	fb02 6101 	mla	r1, r2, r1, r6
 800a5cc:	0c1e      	lsrs	r6, r3, #16
 800a5ce:	0c0b      	lsrs	r3, r1, #16
 800a5d0:	fb02 3306 	mla	r3, r2, r6, r3
 800a5d4:	b289      	uxth	r1, r1
 800a5d6:	3001      	adds	r0, #1
 800a5d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5dc:	4285      	cmp	r5, r0
 800a5de:	f84c 1b04 	str.w	r1, [ip], #4
 800a5e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5e6:	dcec      	bgt.n	800a5c2 <__multadd+0x12>
 800a5e8:	b30e      	cbz	r6, 800a62e <__multadd+0x7e>
 800a5ea:	68a3      	ldr	r3, [r4, #8]
 800a5ec:	42ab      	cmp	r3, r5
 800a5ee:	dc19      	bgt.n	800a624 <__multadd+0x74>
 800a5f0:	6861      	ldr	r1, [r4, #4]
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	3101      	adds	r1, #1
 800a5f6:	f7ff ff79 	bl	800a4ec <_Balloc>
 800a5fa:	4680      	mov	r8, r0
 800a5fc:	b928      	cbnz	r0, 800a60a <__multadd+0x5a>
 800a5fe:	4602      	mov	r2, r0
 800a600:	4b0c      	ldr	r3, [pc, #48]	; (800a634 <__multadd+0x84>)
 800a602:	480d      	ldr	r0, [pc, #52]	; (800a638 <__multadd+0x88>)
 800a604:	21ba      	movs	r1, #186	; 0xba
 800a606:	f002 f893 	bl	800c730 <__assert_func>
 800a60a:	6922      	ldr	r2, [r4, #16]
 800a60c:	3202      	adds	r2, #2
 800a60e:	f104 010c 	add.w	r1, r4, #12
 800a612:	0092      	lsls	r2, r2, #2
 800a614:	300c      	adds	r0, #12
 800a616:	f7fe ffd8 	bl	80095ca <memcpy>
 800a61a:	4621      	mov	r1, r4
 800a61c:	4638      	mov	r0, r7
 800a61e:	f7ff ffa5 	bl	800a56c <_Bfree>
 800a622:	4644      	mov	r4, r8
 800a624:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a628:	3501      	adds	r5, #1
 800a62a:	615e      	str	r6, [r3, #20]
 800a62c:	6125      	str	r5, [r4, #16]
 800a62e:	4620      	mov	r0, r4
 800a630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a634:	0800d73f 	.word	0x0800d73f
 800a638:	0800d750 	.word	0x0800d750

0800a63c <__s2b>:
 800a63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a640:	460c      	mov	r4, r1
 800a642:	4615      	mov	r5, r2
 800a644:	461f      	mov	r7, r3
 800a646:	2209      	movs	r2, #9
 800a648:	3308      	adds	r3, #8
 800a64a:	4606      	mov	r6, r0
 800a64c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a650:	2100      	movs	r1, #0
 800a652:	2201      	movs	r2, #1
 800a654:	429a      	cmp	r2, r3
 800a656:	db09      	blt.n	800a66c <__s2b+0x30>
 800a658:	4630      	mov	r0, r6
 800a65a:	f7ff ff47 	bl	800a4ec <_Balloc>
 800a65e:	b940      	cbnz	r0, 800a672 <__s2b+0x36>
 800a660:	4602      	mov	r2, r0
 800a662:	4b19      	ldr	r3, [pc, #100]	; (800a6c8 <__s2b+0x8c>)
 800a664:	4819      	ldr	r0, [pc, #100]	; (800a6cc <__s2b+0x90>)
 800a666:	21d3      	movs	r1, #211	; 0xd3
 800a668:	f002 f862 	bl	800c730 <__assert_func>
 800a66c:	0052      	lsls	r2, r2, #1
 800a66e:	3101      	adds	r1, #1
 800a670:	e7f0      	b.n	800a654 <__s2b+0x18>
 800a672:	9b08      	ldr	r3, [sp, #32]
 800a674:	6143      	str	r3, [r0, #20]
 800a676:	2d09      	cmp	r5, #9
 800a678:	f04f 0301 	mov.w	r3, #1
 800a67c:	6103      	str	r3, [r0, #16]
 800a67e:	dd16      	ble.n	800a6ae <__s2b+0x72>
 800a680:	f104 0909 	add.w	r9, r4, #9
 800a684:	46c8      	mov	r8, r9
 800a686:	442c      	add	r4, r5
 800a688:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a68c:	4601      	mov	r1, r0
 800a68e:	3b30      	subs	r3, #48	; 0x30
 800a690:	220a      	movs	r2, #10
 800a692:	4630      	mov	r0, r6
 800a694:	f7ff ff8c 	bl	800a5b0 <__multadd>
 800a698:	45a0      	cmp	r8, r4
 800a69a:	d1f5      	bne.n	800a688 <__s2b+0x4c>
 800a69c:	f1a5 0408 	sub.w	r4, r5, #8
 800a6a0:	444c      	add	r4, r9
 800a6a2:	1b2d      	subs	r5, r5, r4
 800a6a4:	1963      	adds	r3, r4, r5
 800a6a6:	42bb      	cmp	r3, r7
 800a6a8:	db04      	blt.n	800a6b4 <__s2b+0x78>
 800a6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ae:	340a      	adds	r4, #10
 800a6b0:	2509      	movs	r5, #9
 800a6b2:	e7f6      	b.n	800a6a2 <__s2b+0x66>
 800a6b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6b8:	4601      	mov	r1, r0
 800a6ba:	3b30      	subs	r3, #48	; 0x30
 800a6bc:	220a      	movs	r2, #10
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7ff ff76 	bl	800a5b0 <__multadd>
 800a6c4:	e7ee      	b.n	800a6a4 <__s2b+0x68>
 800a6c6:	bf00      	nop
 800a6c8:	0800d73f 	.word	0x0800d73f
 800a6cc:	0800d750 	.word	0x0800d750

0800a6d0 <__hi0bits>:
 800a6d0:	0c03      	lsrs	r3, r0, #16
 800a6d2:	041b      	lsls	r3, r3, #16
 800a6d4:	b9d3      	cbnz	r3, 800a70c <__hi0bits+0x3c>
 800a6d6:	0400      	lsls	r0, r0, #16
 800a6d8:	2310      	movs	r3, #16
 800a6da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a6de:	bf04      	itt	eq
 800a6e0:	0200      	lsleq	r0, r0, #8
 800a6e2:	3308      	addeq	r3, #8
 800a6e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a6e8:	bf04      	itt	eq
 800a6ea:	0100      	lsleq	r0, r0, #4
 800a6ec:	3304      	addeq	r3, #4
 800a6ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a6f2:	bf04      	itt	eq
 800a6f4:	0080      	lsleq	r0, r0, #2
 800a6f6:	3302      	addeq	r3, #2
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	db05      	blt.n	800a708 <__hi0bits+0x38>
 800a6fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a700:	f103 0301 	add.w	r3, r3, #1
 800a704:	bf08      	it	eq
 800a706:	2320      	moveq	r3, #32
 800a708:	4618      	mov	r0, r3
 800a70a:	4770      	bx	lr
 800a70c:	2300      	movs	r3, #0
 800a70e:	e7e4      	b.n	800a6da <__hi0bits+0xa>

0800a710 <__lo0bits>:
 800a710:	6803      	ldr	r3, [r0, #0]
 800a712:	f013 0207 	ands.w	r2, r3, #7
 800a716:	d00c      	beq.n	800a732 <__lo0bits+0x22>
 800a718:	07d9      	lsls	r1, r3, #31
 800a71a:	d422      	bmi.n	800a762 <__lo0bits+0x52>
 800a71c:	079a      	lsls	r2, r3, #30
 800a71e:	bf49      	itett	mi
 800a720:	085b      	lsrmi	r3, r3, #1
 800a722:	089b      	lsrpl	r3, r3, #2
 800a724:	6003      	strmi	r3, [r0, #0]
 800a726:	2201      	movmi	r2, #1
 800a728:	bf5c      	itt	pl
 800a72a:	6003      	strpl	r3, [r0, #0]
 800a72c:	2202      	movpl	r2, #2
 800a72e:	4610      	mov	r0, r2
 800a730:	4770      	bx	lr
 800a732:	b299      	uxth	r1, r3
 800a734:	b909      	cbnz	r1, 800a73a <__lo0bits+0x2a>
 800a736:	0c1b      	lsrs	r3, r3, #16
 800a738:	2210      	movs	r2, #16
 800a73a:	b2d9      	uxtb	r1, r3
 800a73c:	b909      	cbnz	r1, 800a742 <__lo0bits+0x32>
 800a73e:	3208      	adds	r2, #8
 800a740:	0a1b      	lsrs	r3, r3, #8
 800a742:	0719      	lsls	r1, r3, #28
 800a744:	bf04      	itt	eq
 800a746:	091b      	lsreq	r3, r3, #4
 800a748:	3204      	addeq	r2, #4
 800a74a:	0799      	lsls	r1, r3, #30
 800a74c:	bf04      	itt	eq
 800a74e:	089b      	lsreq	r3, r3, #2
 800a750:	3202      	addeq	r2, #2
 800a752:	07d9      	lsls	r1, r3, #31
 800a754:	d403      	bmi.n	800a75e <__lo0bits+0x4e>
 800a756:	085b      	lsrs	r3, r3, #1
 800a758:	f102 0201 	add.w	r2, r2, #1
 800a75c:	d003      	beq.n	800a766 <__lo0bits+0x56>
 800a75e:	6003      	str	r3, [r0, #0]
 800a760:	e7e5      	b.n	800a72e <__lo0bits+0x1e>
 800a762:	2200      	movs	r2, #0
 800a764:	e7e3      	b.n	800a72e <__lo0bits+0x1e>
 800a766:	2220      	movs	r2, #32
 800a768:	e7e1      	b.n	800a72e <__lo0bits+0x1e>
	...

0800a76c <__i2b>:
 800a76c:	b510      	push	{r4, lr}
 800a76e:	460c      	mov	r4, r1
 800a770:	2101      	movs	r1, #1
 800a772:	f7ff febb 	bl	800a4ec <_Balloc>
 800a776:	4602      	mov	r2, r0
 800a778:	b928      	cbnz	r0, 800a786 <__i2b+0x1a>
 800a77a:	4b05      	ldr	r3, [pc, #20]	; (800a790 <__i2b+0x24>)
 800a77c:	4805      	ldr	r0, [pc, #20]	; (800a794 <__i2b+0x28>)
 800a77e:	f240 1145 	movw	r1, #325	; 0x145
 800a782:	f001 ffd5 	bl	800c730 <__assert_func>
 800a786:	2301      	movs	r3, #1
 800a788:	6144      	str	r4, [r0, #20]
 800a78a:	6103      	str	r3, [r0, #16]
 800a78c:	bd10      	pop	{r4, pc}
 800a78e:	bf00      	nop
 800a790:	0800d73f 	.word	0x0800d73f
 800a794:	0800d750 	.word	0x0800d750

0800a798 <__multiply>:
 800a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79c:	4691      	mov	r9, r2
 800a79e:	690a      	ldr	r2, [r1, #16]
 800a7a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	bfb8      	it	lt
 800a7a8:	460b      	movlt	r3, r1
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	bfbc      	itt	lt
 800a7ae:	464c      	movlt	r4, r9
 800a7b0:	4699      	movlt	r9, r3
 800a7b2:	6927      	ldr	r7, [r4, #16]
 800a7b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7b8:	68a3      	ldr	r3, [r4, #8]
 800a7ba:	6861      	ldr	r1, [r4, #4]
 800a7bc:	eb07 060a 	add.w	r6, r7, sl
 800a7c0:	42b3      	cmp	r3, r6
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	bfb8      	it	lt
 800a7c6:	3101      	addlt	r1, #1
 800a7c8:	f7ff fe90 	bl	800a4ec <_Balloc>
 800a7cc:	b930      	cbnz	r0, 800a7dc <__multiply+0x44>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	4b44      	ldr	r3, [pc, #272]	; (800a8e4 <__multiply+0x14c>)
 800a7d2:	4845      	ldr	r0, [pc, #276]	; (800a8e8 <__multiply+0x150>)
 800a7d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a7d8:	f001 ffaa 	bl	800c730 <__assert_func>
 800a7dc:	f100 0514 	add.w	r5, r0, #20
 800a7e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7e4:	462b      	mov	r3, r5
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	4543      	cmp	r3, r8
 800a7ea:	d321      	bcc.n	800a830 <__multiply+0x98>
 800a7ec:	f104 0314 	add.w	r3, r4, #20
 800a7f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a7f4:	f109 0314 	add.w	r3, r9, #20
 800a7f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a7fc:	9202      	str	r2, [sp, #8]
 800a7fe:	1b3a      	subs	r2, r7, r4
 800a800:	3a15      	subs	r2, #21
 800a802:	f022 0203 	bic.w	r2, r2, #3
 800a806:	3204      	adds	r2, #4
 800a808:	f104 0115 	add.w	r1, r4, #21
 800a80c:	428f      	cmp	r7, r1
 800a80e:	bf38      	it	cc
 800a810:	2204      	movcc	r2, #4
 800a812:	9201      	str	r2, [sp, #4]
 800a814:	9a02      	ldr	r2, [sp, #8]
 800a816:	9303      	str	r3, [sp, #12]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d80c      	bhi.n	800a836 <__multiply+0x9e>
 800a81c:	2e00      	cmp	r6, #0
 800a81e:	dd03      	ble.n	800a828 <__multiply+0x90>
 800a820:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a824:	2b00      	cmp	r3, #0
 800a826:	d05b      	beq.n	800a8e0 <__multiply+0x148>
 800a828:	6106      	str	r6, [r0, #16]
 800a82a:	b005      	add	sp, #20
 800a82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a830:	f843 2b04 	str.w	r2, [r3], #4
 800a834:	e7d8      	b.n	800a7e8 <__multiply+0x50>
 800a836:	f8b3 a000 	ldrh.w	sl, [r3]
 800a83a:	f1ba 0f00 	cmp.w	sl, #0
 800a83e:	d024      	beq.n	800a88a <__multiply+0xf2>
 800a840:	f104 0e14 	add.w	lr, r4, #20
 800a844:	46a9      	mov	r9, r5
 800a846:	f04f 0c00 	mov.w	ip, #0
 800a84a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a84e:	f8d9 1000 	ldr.w	r1, [r9]
 800a852:	fa1f fb82 	uxth.w	fp, r2
 800a856:	b289      	uxth	r1, r1
 800a858:	fb0a 110b 	mla	r1, sl, fp, r1
 800a85c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a860:	f8d9 2000 	ldr.w	r2, [r9]
 800a864:	4461      	add	r1, ip
 800a866:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a86a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a86e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a872:	b289      	uxth	r1, r1
 800a874:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a878:	4577      	cmp	r7, lr
 800a87a:	f849 1b04 	str.w	r1, [r9], #4
 800a87e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a882:	d8e2      	bhi.n	800a84a <__multiply+0xb2>
 800a884:	9a01      	ldr	r2, [sp, #4]
 800a886:	f845 c002 	str.w	ip, [r5, r2]
 800a88a:	9a03      	ldr	r2, [sp, #12]
 800a88c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a890:	3304      	adds	r3, #4
 800a892:	f1b9 0f00 	cmp.w	r9, #0
 800a896:	d021      	beq.n	800a8dc <__multiply+0x144>
 800a898:	6829      	ldr	r1, [r5, #0]
 800a89a:	f104 0c14 	add.w	ip, r4, #20
 800a89e:	46ae      	mov	lr, r5
 800a8a0:	f04f 0a00 	mov.w	sl, #0
 800a8a4:	f8bc b000 	ldrh.w	fp, [ip]
 800a8a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a8ac:	fb09 220b 	mla	r2, r9, fp, r2
 800a8b0:	4452      	add	r2, sl
 800a8b2:	b289      	uxth	r1, r1
 800a8b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8b8:	f84e 1b04 	str.w	r1, [lr], #4
 800a8bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a8c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8c4:	f8be 1000 	ldrh.w	r1, [lr]
 800a8c8:	fb09 110a 	mla	r1, r9, sl, r1
 800a8cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a8d0:	4567      	cmp	r7, ip
 800a8d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8d6:	d8e5      	bhi.n	800a8a4 <__multiply+0x10c>
 800a8d8:	9a01      	ldr	r2, [sp, #4]
 800a8da:	50a9      	str	r1, [r5, r2]
 800a8dc:	3504      	adds	r5, #4
 800a8de:	e799      	b.n	800a814 <__multiply+0x7c>
 800a8e0:	3e01      	subs	r6, #1
 800a8e2:	e79b      	b.n	800a81c <__multiply+0x84>
 800a8e4:	0800d73f 	.word	0x0800d73f
 800a8e8:	0800d750 	.word	0x0800d750

0800a8ec <__pow5mult>:
 800a8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f0:	4615      	mov	r5, r2
 800a8f2:	f012 0203 	ands.w	r2, r2, #3
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	d007      	beq.n	800a90c <__pow5mult+0x20>
 800a8fc:	4c25      	ldr	r4, [pc, #148]	; (800a994 <__pow5mult+0xa8>)
 800a8fe:	3a01      	subs	r2, #1
 800a900:	2300      	movs	r3, #0
 800a902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a906:	f7ff fe53 	bl	800a5b0 <__multadd>
 800a90a:	4607      	mov	r7, r0
 800a90c:	10ad      	asrs	r5, r5, #2
 800a90e:	d03d      	beq.n	800a98c <__pow5mult+0xa0>
 800a910:	69f4      	ldr	r4, [r6, #28]
 800a912:	b97c      	cbnz	r4, 800a934 <__pow5mult+0x48>
 800a914:	2010      	movs	r0, #16
 800a916:	f7ff fd35 	bl	800a384 <malloc>
 800a91a:	4602      	mov	r2, r0
 800a91c:	61f0      	str	r0, [r6, #28]
 800a91e:	b928      	cbnz	r0, 800a92c <__pow5mult+0x40>
 800a920:	4b1d      	ldr	r3, [pc, #116]	; (800a998 <__pow5mult+0xac>)
 800a922:	481e      	ldr	r0, [pc, #120]	; (800a99c <__pow5mult+0xb0>)
 800a924:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a928:	f001 ff02 	bl	800c730 <__assert_func>
 800a92c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a930:	6004      	str	r4, [r0, #0]
 800a932:	60c4      	str	r4, [r0, #12]
 800a934:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a93c:	b94c      	cbnz	r4, 800a952 <__pow5mult+0x66>
 800a93e:	f240 2171 	movw	r1, #625	; 0x271
 800a942:	4630      	mov	r0, r6
 800a944:	f7ff ff12 	bl	800a76c <__i2b>
 800a948:	2300      	movs	r3, #0
 800a94a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a94e:	4604      	mov	r4, r0
 800a950:	6003      	str	r3, [r0, #0]
 800a952:	f04f 0900 	mov.w	r9, #0
 800a956:	07eb      	lsls	r3, r5, #31
 800a958:	d50a      	bpl.n	800a970 <__pow5mult+0x84>
 800a95a:	4639      	mov	r1, r7
 800a95c:	4622      	mov	r2, r4
 800a95e:	4630      	mov	r0, r6
 800a960:	f7ff ff1a 	bl	800a798 <__multiply>
 800a964:	4639      	mov	r1, r7
 800a966:	4680      	mov	r8, r0
 800a968:	4630      	mov	r0, r6
 800a96a:	f7ff fdff 	bl	800a56c <_Bfree>
 800a96e:	4647      	mov	r7, r8
 800a970:	106d      	asrs	r5, r5, #1
 800a972:	d00b      	beq.n	800a98c <__pow5mult+0xa0>
 800a974:	6820      	ldr	r0, [r4, #0]
 800a976:	b938      	cbnz	r0, 800a988 <__pow5mult+0x9c>
 800a978:	4622      	mov	r2, r4
 800a97a:	4621      	mov	r1, r4
 800a97c:	4630      	mov	r0, r6
 800a97e:	f7ff ff0b 	bl	800a798 <__multiply>
 800a982:	6020      	str	r0, [r4, #0]
 800a984:	f8c0 9000 	str.w	r9, [r0]
 800a988:	4604      	mov	r4, r0
 800a98a:	e7e4      	b.n	800a956 <__pow5mult+0x6a>
 800a98c:	4638      	mov	r0, r7
 800a98e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a992:	bf00      	nop
 800a994:	0800d8a0 	.word	0x0800d8a0
 800a998:	0800d6d0 	.word	0x0800d6d0
 800a99c:	0800d750 	.word	0x0800d750

0800a9a0 <__lshift>:
 800a9a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	6849      	ldr	r1, [r1, #4]
 800a9a8:	6923      	ldr	r3, [r4, #16]
 800a9aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9ae:	68a3      	ldr	r3, [r4, #8]
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	4691      	mov	r9, r2
 800a9b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9b8:	f108 0601 	add.w	r6, r8, #1
 800a9bc:	42b3      	cmp	r3, r6
 800a9be:	db0b      	blt.n	800a9d8 <__lshift+0x38>
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	f7ff fd93 	bl	800a4ec <_Balloc>
 800a9c6:	4605      	mov	r5, r0
 800a9c8:	b948      	cbnz	r0, 800a9de <__lshift+0x3e>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	4b28      	ldr	r3, [pc, #160]	; (800aa70 <__lshift+0xd0>)
 800a9ce:	4829      	ldr	r0, [pc, #164]	; (800aa74 <__lshift+0xd4>)
 800a9d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a9d4:	f001 feac 	bl	800c730 <__assert_func>
 800a9d8:	3101      	adds	r1, #1
 800a9da:	005b      	lsls	r3, r3, #1
 800a9dc:	e7ee      	b.n	800a9bc <__lshift+0x1c>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	f100 0114 	add.w	r1, r0, #20
 800a9e4:	f100 0210 	add.w	r2, r0, #16
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	4553      	cmp	r3, sl
 800a9ec:	db33      	blt.n	800aa56 <__lshift+0xb6>
 800a9ee:	6920      	ldr	r0, [r4, #16]
 800a9f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9f4:	f104 0314 	add.w	r3, r4, #20
 800a9f8:	f019 091f 	ands.w	r9, r9, #31
 800a9fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa04:	d02b      	beq.n	800aa5e <__lshift+0xbe>
 800aa06:	f1c9 0e20 	rsb	lr, r9, #32
 800aa0a:	468a      	mov	sl, r1
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	6818      	ldr	r0, [r3, #0]
 800aa10:	fa00 f009 	lsl.w	r0, r0, r9
 800aa14:	4310      	orrs	r0, r2
 800aa16:	f84a 0b04 	str.w	r0, [sl], #4
 800aa1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa1e:	459c      	cmp	ip, r3
 800aa20:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa24:	d8f3      	bhi.n	800aa0e <__lshift+0x6e>
 800aa26:	ebac 0304 	sub.w	r3, ip, r4
 800aa2a:	3b15      	subs	r3, #21
 800aa2c:	f023 0303 	bic.w	r3, r3, #3
 800aa30:	3304      	adds	r3, #4
 800aa32:	f104 0015 	add.w	r0, r4, #21
 800aa36:	4584      	cmp	ip, r0
 800aa38:	bf38      	it	cc
 800aa3a:	2304      	movcc	r3, #4
 800aa3c:	50ca      	str	r2, [r1, r3]
 800aa3e:	b10a      	cbz	r2, 800aa44 <__lshift+0xa4>
 800aa40:	f108 0602 	add.w	r6, r8, #2
 800aa44:	3e01      	subs	r6, #1
 800aa46:	4638      	mov	r0, r7
 800aa48:	612e      	str	r6, [r5, #16]
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	f7ff fd8e 	bl	800a56c <_Bfree>
 800aa50:	4628      	mov	r0, r5
 800aa52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa56:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	e7c5      	b.n	800a9ea <__lshift+0x4a>
 800aa5e:	3904      	subs	r1, #4
 800aa60:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa64:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa68:	459c      	cmp	ip, r3
 800aa6a:	d8f9      	bhi.n	800aa60 <__lshift+0xc0>
 800aa6c:	e7ea      	b.n	800aa44 <__lshift+0xa4>
 800aa6e:	bf00      	nop
 800aa70:	0800d73f 	.word	0x0800d73f
 800aa74:	0800d750 	.word	0x0800d750

0800aa78 <__mcmp>:
 800aa78:	b530      	push	{r4, r5, lr}
 800aa7a:	6902      	ldr	r2, [r0, #16]
 800aa7c:	690c      	ldr	r4, [r1, #16]
 800aa7e:	1b12      	subs	r2, r2, r4
 800aa80:	d10e      	bne.n	800aaa0 <__mcmp+0x28>
 800aa82:	f100 0314 	add.w	r3, r0, #20
 800aa86:	3114      	adds	r1, #20
 800aa88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa98:	42a5      	cmp	r5, r4
 800aa9a:	d003      	beq.n	800aaa4 <__mcmp+0x2c>
 800aa9c:	d305      	bcc.n	800aaaa <__mcmp+0x32>
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	4610      	mov	r0, r2
 800aaa2:	bd30      	pop	{r4, r5, pc}
 800aaa4:	4283      	cmp	r3, r0
 800aaa6:	d3f3      	bcc.n	800aa90 <__mcmp+0x18>
 800aaa8:	e7fa      	b.n	800aaa0 <__mcmp+0x28>
 800aaaa:	f04f 32ff 	mov.w	r2, #4294967295
 800aaae:	e7f7      	b.n	800aaa0 <__mcmp+0x28>

0800aab0 <__mdiff>:
 800aab0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab4:	460c      	mov	r4, r1
 800aab6:	4606      	mov	r6, r0
 800aab8:	4611      	mov	r1, r2
 800aaba:	4620      	mov	r0, r4
 800aabc:	4690      	mov	r8, r2
 800aabe:	f7ff ffdb 	bl	800aa78 <__mcmp>
 800aac2:	1e05      	subs	r5, r0, #0
 800aac4:	d110      	bne.n	800aae8 <__mdiff+0x38>
 800aac6:	4629      	mov	r1, r5
 800aac8:	4630      	mov	r0, r6
 800aaca:	f7ff fd0f 	bl	800a4ec <_Balloc>
 800aace:	b930      	cbnz	r0, 800aade <__mdiff+0x2e>
 800aad0:	4b3a      	ldr	r3, [pc, #232]	; (800abbc <__mdiff+0x10c>)
 800aad2:	4602      	mov	r2, r0
 800aad4:	f240 2137 	movw	r1, #567	; 0x237
 800aad8:	4839      	ldr	r0, [pc, #228]	; (800abc0 <__mdiff+0x110>)
 800aada:	f001 fe29 	bl	800c730 <__assert_func>
 800aade:	2301      	movs	r3, #1
 800aae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aae8:	bfa4      	itt	ge
 800aaea:	4643      	movge	r3, r8
 800aaec:	46a0      	movge	r8, r4
 800aaee:	4630      	mov	r0, r6
 800aaf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aaf4:	bfa6      	itte	ge
 800aaf6:	461c      	movge	r4, r3
 800aaf8:	2500      	movge	r5, #0
 800aafa:	2501      	movlt	r5, #1
 800aafc:	f7ff fcf6 	bl	800a4ec <_Balloc>
 800ab00:	b920      	cbnz	r0, 800ab0c <__mdiff+0x5c>
 800ab02:	4b2e      	ldr	r3, [pc, #184]	; (800abbc <__mdiff+0x10c>)
 800ab04:	4602      	mov	r2, r0
 800ab06:	f240 2145 	movw	r1, #581	; 0x245
 800ab0a:	e7e5      	b.n	800aad8 <__mdiff+0x28>
 800ab0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab10:	6926      	ldr	r6, [r4, #16]
 800ab12:	60c5      	str	r5, [r0, #12]
 800ab14:	f104 0914 	add.w	r9, r4, #20
 800ab18:	f108 0514 	add.w	r5, r8, #20
 800ab1c:	f100 0e14 	add.w	lr, r0, #20
 800ab20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab28:	f108 0210 	add.w	r2, r8, #16
 800ab2c:	46f2      	mov	sl, lr
 800ab2e:	2100      	movs	r1, #0
 800ab30:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab38:	fa11 f88b 	uxtah	r8, r1, fp
 800ab3c:	b299      	uxth	r1, r3
 800ab3e:	0c1b      	lsrs	r3, r3, #16
 800ab40:	eba8 0801 	sub.w	r8, r8, r1
 800ab44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab48:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab4c:	fa1f f888 	uxth.w	r8, r8
 800ab50:	1419      	asrs	r1, r3, #16
 800ab52:	454e      	cmp	r6, r9
 800ab54:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab58:	f84a 3b04 	str.w	r3, [sl], #4
 800ab5c:	d8e8      	bhi.n	800ab30 <__mdiff+0x80>
 800ab5e:	1b33      	subs	r3, r6, r4
 800ab60:	3b15      	subs	r3, #21
 800ab62:	f023 0303 	bic.w	r3, r3, #3
 800ab66:	3304      	adds	r3, #4
 800ab68:	3415      	adds	r4, #21
 800ab6a:	42a6      	cmp	r6, r4
 800ab6c:	bf38      	it	cc
 800ab6e:	2304      	movcc	r3, #4
 800ab70:	441d      	add	r5, r3
 800ab72:	4473      	add	r3, lr
 800ab74:	469e      	mov	lr, r3
 800ab76:	462e      	mov	r6, r5
 800ab78:	4566      	cmp	r6, ip
 800ab7a:	d30e      	bcc.n	800ab9a <__mdiff+0xea>
 800ab7c:	f10c 0203 	add.w	r2, ip, #3
 800ab80:	1b52      	subs	r2, r2, r5
 800ab82:	f022 0203 	bic.w	r2, r2, #3
 800ab86:	3d03      	subs	r5, #3
 800ab88:	45ac      	cmp	ip, r5
 800ab8a:	bf38      	it	cc
 800ab8c:	2200      	movcc	r2, #0
 800ab8e:	4413      	add	r3, r2
 800ab90:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab94:	b17a      	cbz	r2, 800abb6 <__mdiff+0x106>
 800ab96:	6107      	str	r7, [r0, #16]
 800ab98:	e7a4      	b.n	800aae4 <__mdiff+0x34>
 800ab9a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab9e:	fa11 f288 	uxtah	r2, r1, r8
 800aba2:	1414      	asrs	r4, r2, #16
 800aba4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aba8:	b292      	uxth	r2, r2
 800abaa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800abae:	f84e 2b04 	str.w	r2, [lr], #4
 800abb2:	1421      	asrs	r1, r4, #16
 800abb4:	e7e0      	b.n	800ab78 <__mdiff+0xc8>
 800abb6:	3f01      	subs	r7, #1
 800abb8:	e7ea      	b.n	800ab90 <__mdiff+0xe0>
 800abba:	bf00      	nop
 800abbc:	0800d73f 	.word	0x0800d73f
 800abc0:	0800d750 	.word	0x0800d750

0800abc4 <__ulp>:
 800abc4:	b082      	sub	sp, #8
 800abc6:	ed8d 0b00 	vstr	d0, [sp]
 800abca:	9a01      	ldr	r2, [sp, #4]
 800abcc:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <__ulp+0x48>)
 800abce:	4013      	ands	r3, r2
 800abd0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	dc08      	bgt.n	800abea <__ulp+0x26>
 800abd8:	425b      	negs	r3, r3
 800abda:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800abde:	ea4f 5223 	mov.w	r2, r3, asr #20
 800abe2:	da04      	bge.n	800abee <__ulp+0x2a>
 800abe4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800abe8:	4113      	asrs	r3, r2
 800abea:	2200      	movs	r2, #0
 800abec:	e008      	b.n	800ac00 <__ulp+0x3c>
 800abee:	f1a2 0314 	sub.w	r3, r2, #20
 800abf2:	2b1e      	cmp	r3, #30
 800abf4:	bfda      	itte	le
 800abf6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800abfa:	40da      	lsrle	r2, r3
 800abfc:	2201      	movgt	r2, #1
 800abfe:	2300      	movs	r3, #0
 800ac00:	4619      	mov	r1, r3
 800ac02:	4610      	mov	r0, r2
 800ac04:	ec41 0b10 	vmov	d0, r0, r1
 800ac08:	b002      	add	sp, #8
 800ac0a:	4770      	bx	lr
 800ac0c:	7ff00000 	.word	0x7ff00000

0800ac10 <__b2d>:
 800ac10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac14:	6906      	ldr	r6, [r0, #16]
 800ac16:	f100 0814 	add.w	r8, r0, #20
 800ac1a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ac1e:	1f37      	subs	r7, r6, #4
 800ac20:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac24:	4610      	mov	r0, r2
 800ac26:	f7ff fd53 	bl	800a6d0 <__hi0bits>
 800ac2a:	f1c0 0320 	rsb	r3, r0, #32
 800ac2e:	280a      	cmp	r0, #10
 800ac30:	600b      	str	r3, [r1, #0]
 800ac32:	491b      	ldr	r1, [pc, #108]	; (800aca0 <__b2d+0x90>)
 800ac34:	dc15      	bgt.n	800ac62 <__b2d+0x52>
 800ac36:	f1c0 0c0b 	rsb	ip, r0, #11
 800ac3a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ac3e:	45b8      	cmp	r8, r7
 800ac40:	ea43 0501 	orr.w	r5, r3, r1
 800ac44:	bf34      	ite	cc
 800ac46:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac4a:	2300      	movcs	r3, #0
 800ac4c:	3015      	adds	r0, #21
 800ac4e:	fa02 f000 	lsl.w	r0, r2, r0
 800ac52:	fa23 f30c 	lsr.w	r3, r3, ip
 800ac56:	4303      	orrs	r3, r0
 800ac58:	461c      	mov	r4, r3
 800ac5a:	ec45 4b10 	vmov	d0, r4, r5
 800ac5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac62:	45b8      	cmp	r8, r7
 800ac64:	bf3a      	itte	cc
 800ac66:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac6a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac6e:	2300      	movcs	r3, #0
 800ac70:	380b      	subs	r0, #11
 800ac72:	d012      	beq.n	800ac9a <__b2d+0x8a>
 800ac74:	f1c0 0120 	rsb	r1, r0, #32
 800ac78:	fa23 f401 	lsr.w	r4, r3, r1
 800ac7c:	4082      	lsls	r2, r0
 800ac7e:	4322      	orrs	r2, r4
 800ac80:	4547      	cmp	r7, r8
 800ac82:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ac86:	bf8c      	ite	hi
 800ac88:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac8c:	2200      	movls	r2, #0
 800ac8e:	4083      	lsls	r3, r0
 800ac90:	40ca      	lsrs	r2, r1
 800ac92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac96:	4313      	orrs	r3, r2
 800ac98:	e7de      	b.n	800ac58 <__b2d+0x48>
 800ac9a:	ea42 0501 	orr.w	r5, r2, r1
 800ac9e:	e7db      	b.n	800ac58 <__b2d+0x48>
 800aca0:	3ff00000 	.word	0x3ff00000

0800aca4 <__d2b>:
 800aca4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aca8:	460f      	mov	r7, r1
 800acaa:	2101      	movs	r1, #1
 800acac:	ec59 8b10 	vmov	r8, r9, d0
 800acb0:	4616      	mov	r6, r2
 800acb2:	f7ff fc1b 	bl	800a4ec <_Balloc>
 800acb6:	4604      	mov	r4, r0
 800acb8:	b930      	cbnz	r0, 800acc8 <__d2b+0x24>
 800acba:	4602      	mov	r2, r0
 800acbc:	4b24      	ldr	r3, [pc, #144]	; (800ad50 <__d2b+0xac>)
 800acbe:	4825      	ldr	r0, [pc, #148]	; (800ad54 <__d2b+0xb0>)
 800acc0:	f240 310f 	movw	r1, #783	; 0x30f
 800acc4:	f001 fd34 	bl	800c730 <__assert_func>
 800acc8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800accc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acd0:	bb2d      	cbnz	r5, 800ad1e <__d2b+0x7a>
 800acd2:	9301      	str	r3, [sp, #4]
 800acd4:	f1b8 0300 	subs.w	r3, r8, #0
 800acd8:	d026      	beq.n	800ad28 <__d2b+0x84>
 800acda:	4668      	mov	r0, sp
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	f7ff fd17 	bl	800a710 <__lo0bits>
 800ace2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ace6:	b1e8      	cbz	r0, 800ad24 <__d2b+0x80>
 800ace8:	f1c0 0320 	rsb	r3, r0, #32
 800acec:	fa02 f303 	lsl.w	r3, r2, r3
 800acf0:	430b      	orrs	r3, r1
 800acf2:	40c2      	lsrs	r2, r0
 800acf4:	6163      	str	r3, [r4, #20]
 800acf6:	9201      	str	r2, [sp, #4]
 800acf8:	9b01      	ldr	r3, [sp, #4]
 800acfa:	61a3      	str	r3, [r4, #24]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	bf14      	ite	ne
 800ad00:	2202      	movne	r2, #2
 800ad02:	2201      	moveq	r2, #1
 800ad04:	6122      	str	r2, [r4, #16]
 800ad06:	b1bd      	cbz	r5, 800ad38 <__d2b+0x94>
 800ad08:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad0c:	4405      	add	r5, r0
 800ad0e:	603d      	str	r5, [r7, #0]
 800ad10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad14:	6030      	str	r0, [r6, #0]
 800ad16:	4620      	mov	r0, r4
 800ad18:	b003      	add	sp, #12
 800ad1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad22:	e7d6      	b.n	800acd2 <__d2b+0x2e>
 800ad24:	6161      	str	r1, [r4, #20]
 800ad26:	e7e7      	b.n	800acf8 <__d2b+0x54>
 800ad28:	a801      	add	r0, sp, #4
 800ad2a:	f7ff fcf1 	bl	800a710 <__lo0bits>
 800ad2e:	9b01      	ldr	r3, [sp, #4]
 800ad30:	6163      	str	r3, [r4, #20]
 800ad32:	3020      	adds	r0, #32
 800ad34:	2201      	movs	r2, #1
 800ad36:	e7e5      	b.n	800ad04 <__d2b+0x60>
 800ad38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad40:	6038      	str	r0, [r7, #0]
 800ad42:	6918      	ldr	r0, [r3, #16]
 800ad44:	f7ff fcc4 	bl	800a6d0 <__hi0bits>
 800ad48:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad4c:	e7e2      	b.n	800ad14 <__d2b+0x70>
 800ad4e:	bf00      	nop
 800ad50:	0800d73f 	.word	0x0800d73f
 800ad54:	0800d750 	.word	0x0800d750

0800ad58 <__ratio>:
 800ad58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	4688      	mov	r8, r1
 800ad5e:	4669      	mov	r1, sp
 800ad60:	4681      	mov	r9, r0
 800ad62:	f7ff ff55 	bl	800ac10 <__b2d>
 800ad66:	a901      	add	r1, sp, #4
 800ad68:	4640      	mov	r0, r8
 800ad6a:	ec55 4b10 	vmov	r4, r5, d0
 800ad6e:	f7ff ff4f 	bl	800ac10 <__b2d>
 800ad72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad76:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad7a:	eba3 0c02 	sub.w	ip, r3, r2
 800ad7e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad82:	1a9b      	subs	r3, r3, r2
 800ad84:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ad88:	ec51 0b10 	vmov	r0, r1, d0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	bfd6      	itet	le
 800ad90:	460a      	movle	r2, r1
 800ad92:	462a      	movgt	r2, r5
 800ad94:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad98:	468b      	mov	fp, r1
 800ad9a:	462f      	mov	r7, r5
 800ad9c:	bfd4      	ite	le
 800ad9e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ada2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ada6:	4620      	mov	r0, r4
 800ada8:	ee10 2a10 	vmov	r2, s0
 800adac:	465b      	mov	r3, fp
 800adae:	4639      	mov	r1, r7
 800adb0:	f7f5 fd74 	bl	800089c <__aeabi_ddiv>
 800adb4:	ec41 0b10 	vmov	d0, r0, r1
 800adb8:	b003      	add	sp, #12
 800adba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800adbe <__copybits>:
 800adbe:	3901      	subs	r1, #1
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	1149      	asrs	r1, r1, #5
 800adc4:	6914      	ldr	r4, [r2, #16]
 800adc6:	3101      	adds	r1, #1
 800adc8:	f102 0314 	add.w	r3, r2, #20
 800adcc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800add0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800add4:	1f05      	subs	r5, r0, #4
 800add6:	42a3      	cmp	r3, r4
 800add8:	d30c      	bcc.n	800adf4 <__copybits+0x36>
 800adda:	1aa3      	subs	r3, r4, r2
 800addc:	3b11      	subs	r3, #17
 800adde:	f023 0303 	bic.w	r3, r3, #3
 800ade2:	3211      	adds	r2, #17
 800ade4:	42a2      	cmp	r2, r4
 800ade6:	bf88      	it	hi
 800ade8:	2300      	movhi	r3, #0
 800adea:	4418      	add	r0, r3
 800adec:	2300      	movs	r3, #0
 800adee:	4288      	cmp	r0, r1
 800adf0:	d305      	bcc.n	800adfe <__copybits+0x40>
 800adf2:	bd70      	pop	{r4, r5, r6, pc}
 800adf4:	f853 6b04 	ldr.w	r6, [r3], #4
 800adf8:	f845 6f04 	str.w	r6, [r5, #4]!
 800adfc:	e7eb      	b.n	800add6 <__copybits+0x18>
 800adfe:	f840 3b04 	str.w	r3, [r0], #4
 800ae02:	e7f4      	b.n	800adee <__copybits+0x30>

0800ae04 <__any_on>:
 800ae04:	f100 0214 	add.w	r2, r0, #20
 800ae08:	6900      	ldr	r0, [r0, #16]
 800ae0a:	114b      	asrs	r3, r1, #5
 800ae0c:	4298      	cmp	r0, r3
 800ae0e:	b510      	push	{r4, lr}
 800ae10:	db11      	blt.n	800ae36 <__any_on+0x32>
 800ae12:	dd0a      	ble.n	800ae2a <__any_on+0x26>
 800ae14:	f011 011f 	ands.w	r1, r1, #31
 800ae18:	d007      	beq.n	800ae2a <__any_on+0x26>
 800ae1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae1e:	fa24 f001 	lsr.w	r0, r4, r1
 800ae22:	fa00 f101 	lsl.w	r1, r0, r1
 800ae26:	428c      	cmp	r4, r1
 800ae28:	d10b      	bne.n	800ae42 <__any_on+0x3e>
 800ae2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d803      	bhi.n	800ae3a <__any_on+0x36>
 800ae32:	2000      	movs	r0, #0
 800ae34:	bd10      	pop	{r4, pc}
 800ae36:	4603      	mov	r3, r0
 800ae38:	e7f7      	b.n	800ae2a <__any_on+0x26>
 800ae3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae3e:	2900      	cmp	r1, #0
 800ae40:	d0f5      	beq.n	800ae2e <__any_on+0x2a>
 800ae42:	2001      	movs	r0, #1
 800ae44:	e7f6      	b.n	800ae34 <__any_on+0x30>

0800ae46 <sulp>:
 800ae46:	b570      	push	{r4, r5, r6, lr}
 800ae48:	4604      	mov	r4, r0
 800ae4a:	460d      	mov	r5, r1
 800ae4c:	ec45 4b10 	vmov	d0, r4, r5
 800ae50:	4616      	mov	r6, r2
 800ae52:	f7ff feb7 	bl	800abc4 <__ulp>
 800ae56:	ec51 0b10 	vmov	r0, r1, d0
 800ae5a:	b17e      	cbz	r6, 800ae7c <sulp+0x36>
 800ae5c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae60:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	dd09      	ble.n	800ae7c <sulp+0x36>
 800ae68:	051b      	lsls	r3, r3, #20
 800ae6a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae6e:	2400      	movs	r4, #0
 800ae70:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae74:	4622      	mov	r2, r4
 800ae76:	462b      	mov	r3, r5
 800ae78:	f7f5 fbe6 	bl	8000648 <__aeabi_dmul>
 800ae7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae80 <_strtod_l>:
 800ae80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae84:	ed2d 8b02 	vpush	{d8}
 800ae88:	b09b      	sub	sp, #108	; 0x6c
 800ae8a:	4604      	mov	r4, r0
 800ae8c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ae8e:	2200      	movs	r2, #0
 800ae90:	9216      	str	r2, [sp, #88]	; 0x58
 800ae92:	460d      	mov	r5, r1
 800ae94:	f04f 0800 	mov.w	r8, #0
 800ae98:	f04f 0900 	mov.w	r9, #0
 800ae9c:	460a      	mov	r2, r1
 800ae9e:	9215      	str	r2, [sp, #84]	; 0x54
 800aea0:	7811      	ldrb	r1, [r2, #0]
 800aea2:	292b      	cmp	r1, #43	; 0x2b
 800aea4:	d04c      	beq.n	800af40 <_strtod_l+0xc0>
 800aea6:	d83a      	bhi.n	800af1e <_strtod_l+0x9e>
 800aea8:	290d      	cmp	r1, #13
 800aeaa:	d834      	bhi.n	800af16 <_strtod_l+0x96>
 800aeac:	2908      	cmp	r1, #8
 800aeae:	d834      	bhi.n	800af1a <_strtod_l+0x9a>
 800aeb0:	2900      	cmp	r1, #0
 800aeb2:	d03d      	beq.n	800af30 <_strtod_l+0xb0>
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	920a      	str	r2, [sp, #40]	; 0x28
 800aeb8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800aeba:	7832      	ldrb	r2, [r6, #0]
 800aebc:	2a30      	cmp	r2, #48	; 0x30
 800aebe:	f040 80b4 	bne.w	800b02a <_strtod_l+0x1aa>
 800aec2:	7872      	ldrb	r2, [r6, #1]
 800aec4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aec8:	2a58      	cmp	r2, #88	; 0x58
 800aeca:	d170      	bne.n	800afae <_strtod_l+0x12e>
 800aecc:	9302      	str	r3, [sp, #8]
 800aece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aed0:	9301      	str	r3, [sp, #4]
 800aed2:	ab16      	add	r3, sp, #88	; 0x58
 800aed4:	9300      	str	r3, [sp, #0]
 800aed6:	4a8e      	ldr	r2, [pc, #568]	; (800b110 <_strtod_l+0x290>)
 800aed8:	ab17      	add	r3, sp, #92	; 0x5c
 800aeda:	a915      	add	r1, sp, #84	; 0x54
 800aedc:	4620      	mov	r0, r4
 800aede:	f001 fcc3 	bl	800c868 <__gethex>
 800aee2:	f010 070f 	ands.w	r7, r0, #15
 800aee6:	4605      	mov	r5, r0
 800aee8:	d005      	beq.n	800aef6 <_strtod_l+0x76>
 800aeea:	2f06      	cmp	r7, #6
 800aeec:	d12a      	bne.n	800af44 <_strtod_l+0xc4>
 800aeee:	3601      	adds	r6, #1
 800aef0:	2300      	movs	r3, #0
 800aef2:	9615      	str	r6, [sp, #84]	; 0x54
 800aef4:	930a      	str	r3, [sp, #40]	; 0x28
 800aef6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f040 857f 	bne.w	800b9fc <_strtod_l+0xb7c>
 800aefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af00:	b1db      	cbz	r3, 800af3a <_strtod_l+0xba>
 800af02:	4642      	mov	r2, r8
 800af04:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af08:	ec43 2b10 	vmov	d0, r2, r3
 800af0c:	b01b      	add	sp, #108	; 0x6c
 800af0e:	ecbd 8b02 	vpop	{d8}
 800af12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af16:	2920      	cmp	r1, #32
 800af18:	d1cc      	bne.n	800aeb4 <_strtod_l+0x34>
 800af1a:	3201      	adds	r2, #1
 800af1c:	e7bf      	b.n	800ae9e <_strtod_l+0x1e>
 800af1e:	292d      	cmp	r1, #45	; 0x2d
 800af20:	d1c8      	bne.n	800aeb4 <_strtod_l+0x34>
 800af22:	2101      	movs	r1, #1
 800af24:	910a      	str	r1, [sp, #40]	; 0x28
 800af26:	1c51      	adds	r1, r2, #1
 800af28:	9115      	str	r1, [sp, #84]	; 0x54
 800af2a:	7852      	ldrb	r2, [r2, #1]
 800af2c:	2a00      	cmp	r2, #0
 800af2e:	d1c3      	bne.n	800aeb8 <_strtod_l+0x38>
 800af30:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af32:	9515      	str	r5, [sp, #84]	; 0x54
 800af34:	2b00      	cmp	r3, #0
 800af36:	f040 855f 	bne.w	800b9f8 <_strtod_l+0xb78>
 800af3a:	4642      	mov	r2, r8
 800af3c:	464b      	mov	r3, r9
 800af3e:	e7e3      	b.n	800af08 <_strtod_l+0x88>
 800af40:	2100      	movs	r1, #0
 800af42:	e7ef      	b.n	800af24 <_strtod_l+0xa4>
 800af44:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af46:	b13a      	cbz	r2, 800af58 <_strtod_l+0xd8>
 800af48:	2135      	movs	r1, #53	; 0x35
 800af4a:	a818      	add	r0, sp, #96	; 0x60
 800af4c:	f7ff ff37 	bl	800adbe <__copybits>
 800af50:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af52:	4620      	mov	r0, r4
 800af54:	f7ff fb0a 	bl	800a56c <_Bfree>
 800af58:	3f01      	subs	r7, #1
 800af5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af5c:	2f04      	cmp	r7, #4
 800af5e:	d806      	bhi.n	800af6e <_strtod_l+0xee>
 800af60:	e8df f007 	tbb	[pc, r7]
 800af64:	201d0314 	.word	0x201d0314
 800af68:	14          	.byte	0x14
 800af69:	00          	.byte	0x00
 800af6a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800af6e:	05e9      	lsls	r1, r5, #23
 800af70:	bf48      	it	mi
 800af72:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800af76:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af7a:	0d1b      	lsrs	r3, r3, #20
 800af7c:	051b      	lsls	r3, r3, #20
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1b9      	bne.n	800aef6 <_strtod_l+0x76>
 800af82:	f7fe faf5 	bl	8009570 <__errno>
 800af86:	2322      	movs	r3, #34	; 0x22
 800af88:	6003      	str	r3, [r0, #0]
 800af8a:	e7b4      	b.n	800aef6 <_strtod_l+0x76>
 800af8c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800af90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af94:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af98:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800af9c:	e7e7      	b.n	800af6e <_strtod_l+0xee>
 800af9e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b118 <_strtod_l+0x298>
 800afa2:	e7e4      	b.n	800af6e <_strtod_l+0xee>
 800afa4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800afa8:	f04f 38ff 	mov.w	r8, #4294967295
 800afac:	e7df      	b.n	800af6e <_strtod_l+0xee>
 800afae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afb0:	1c5a      	adds	r2, r3, #1
 800afb2:	9215      	str	r2, [sp, #84]	; 0x54
 800afb4:	785b      	ldrb	r3, [r3, #1]
 800afb6:	2b30      	cmp	r3, #48	; 0x30
 800afb8:	d0f9      	beq.n	800afae <_strtod_l+0x12e>
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d09b      	beq.n	800aef6 <_strtod_l+0x76>
 800afbe:	2301      	movs	r3, #1
 800afc0:	f04f 0a00 	mov.w	sl, #0
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800afca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800afce:	46d3      	mov	fp, sl
 800afd0:	220a      	movs	r2, #10
 800afd2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800afd4:	7806      	ldrb	r6, [r0, #0]
 800afd6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800afda:	b2d9      	uxtb	r1, r3
 800afdc:	2909      	cmp	r1, #9
 800afde:	d926      	bls.n	800b02e <_strtod_l+0x1ae>
 800afe0:	494c      	ldr	r1, [pc, #304]	; (800b114 <_strtod_l+0x294>)
 800afe2:	2201      	movs	r2, #1
 800afe4:	f001 fb79 	bl	800c6da <strncmp>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d030      	beq.n	800b04e <_strtod_l+0x1ce>
 800afec:	2000      	movs	r0, #0
 800afee:	4632      	mov	r2, r6
 800aff0:	9005      	str	r0, [sp, #20]
 800aff2:	465e      	mov	r6, fp
 800aff4:	4603      	mov	r3, r0
 800aff6:	2a65      	cmp	r2, #101	; 0x65
 800aff8:	d001      	beq.n	800affe <_strtod_l+0x17e>
 800affa:	2a45      	cmp	r2, #69	; 0x45
 800affc:	d113      	bne.n	800b026 <_strtod_l+0x1a6>
 800affe:	b91e      	cbnz	r6, 800b008 <_strtod_l+0x188>
 800b000:	9a04      	ldr	r2, [sp, #16]
 800b002:	4302      	orrs	r2, r0
 800b004:	d094      	beq.n	800af30 <_strtod_l+0xb0>
 800b006:	2600      	movs	r6, #0
 800b008:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b00a:	1c6a      	adds	r2, r5, #1
 800b00c:	9215      	str	r2, [sp, #84]	; 0x54
 800b00e:	786a      	ldrb	r2, [r5, #1]
 800b010:	2a2b      	cmp	r2, #43	; 0x2b
 800b012:	d074      	beq.n	800b0fe <_strtod_l+0x27e>
 800b014:	2a2d      	cmp	r2, #45	; 0x2d
 800b016:	d078      	beq.n	800b10a <_strtod_l+0x28a>
 800b018:	f04f 0c00 	mov.w	ip, #0
 800b01c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b020:	2909      	cmp	r1, #9
 800b022:	d97f      	bls.n	800b124 <_strtod_l+0x2a4>
 800b024:	9515      	str	r5, [sp, #84]	; 0x54
 800b026:	2700      	movs	r7, #0
 800b028:	e09e      	b.n	800b168 <_strtod_l+0x2e8>
 800b02a:	2300      	movs	r3, #0
 800b02c:	e7c8      	b.n	800afc0 <_strtod_l+0x140>
 800b02e:	f1bb 0f08 	cmp.w	fp, #8
 800b032:	bfd8      	it	le
 800b034:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b036:	f100 0001 	add.w	r0, r0, #1
 800b03a:	bfda      	itte	le
 800b03c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b040:	9309      	strle	r3, [sp, #36]	; 0x24
 800b042:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b046:	f10b 0b01 	add.w	fp, fp, #1
 800b04a:	9015      	str	r0, [sp, #84]	; 0x54
 800b04c:	e7c1      	b.n	800afd2 <_strtod_l+0x152>
 800b04e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b050:	1c5a      	adds	r2, r3, #1
 800b052:	9215      	str	r2, [sp, #84]	; 0x54
 800b054:	785a      	ldrb	r2, [r3, #1]
 800b056:	f1bb 0f00 	cmp.w	fp, #0
 800b05a:	d037      	beq.n	800b0cc <_strtod_l+0x24c>
 800b05c:	9005      	str	r0, [sp, #20]
 800b05e:	465e      	mov	r6, fp
 800b060:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b064:	2b09      	cmp	r3, #9
 800b066:	d912      	bls.n	800b08e <_strtod_l+0x20e>
 800b068:	2301      	movs	r3, #1
 800b06a:	e7c4      	b.n	800aff6 <_strtod_l+0x176>
 800b06c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	9215      	str	r2, [sp, #84]	; 0x54
 800b072:	785a      	ldrb	r2, [r3, #1]
 800b074:	3001      	adds	r0, #1
 800b076:	2a30      	cmp	r2, #48	; 0x30
 800b078:	d0f8      	beq.n	800b06c <_strtod_l+0x1ec>
 800b07a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b07e:	2b08      	cmp	r3, #8
 800b080:	f200 84c1 	bhi.w	800ba06 <_strtod_l+0xb86>
 800b084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b086:	9005      	str	r0, [sp, #20]
 800b088:	2000      	movs	r0, #0
 800b08a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b08c:	4606      	mov	r6, r0
 800b08e:	3a30      	subs	r2, #48	; 0x30
 800b090:	f100 0301 	add.w	r3, r0, #1
 800b094:	d014      	beq.n	800b0c0 <_strtod_l+0x240>
 800b096:	9905      	ldr	r1, [sp, #20]
 800b098:	4419      	add	r1, r3
 800b09a:	9105      	str	r1, [sp, #20]
 800b09c:	4633      	mov	r3, r6
 800b09e:	eb00 0c06 	add.w	ip, r0, r6
 800b0a2:	210a      	movs	r1, #10
 800b0a4:	4563      	cmp	r3, ip
 800b0a6:	d113      	bne.n	800b0d0 <_strtod_l+0x250>
 800b0a8:	1833      	adds	r3, r6, r0
 800b0aa:	2b08      	cmp	r3, #8
 800b0ac:	f106 0601 	add.w	r6, r6, #1
 800b0b0:	4406      	add	r6, r0
 800b0b2:	dc1a      	bgt.n	800b0ea <_strtod_l+0x26a>
 800b0b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0b6:	230a      	movs	r3, #10
 800b0b8:	fb03 2301 	mla	r3, r3, r1, r2
 800b0bc:	9309      	str	r3, [sp, #36]	; 0x24
 800b0be:	2300      	movs	r3, #0
 800b0c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0c2:	1c51      	adds	r1, r2, #1
 800b0c4:	9115      	str	r1, [sp, #84]	; 0x54
 800b0c6:	7852      	ldrb	r2, [r2, #1]
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	e7c9      	b.n	800b060 <_strtod_l+0x1e0>
 800b0cc:	4658      	mov	r0, fp
 800b0ce:	e7d2      	b.n	800b076 <_strtod_l+0x1f6>
 800b0d0:	2b08      	cmp	r3, #8
 800b0d2:	f103 0301 	add.w	r3, r3, #1
 800b0d6:	dc03      	bgt.n	800b0e0 <_strtod_l+0x260>
 800b0d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b0da:	434f      	muls	r7, r1
 800b0dc:	9709      	str	r7, [sp, #36]	; 0x24
 800b0de:	e7e1      	b.n	800b0a4 <_strtod_l+0x224>
 800b0e0:	2b10      	cmp	r3, #16
 800b0e2:	bfd8      	it	le
 800b0e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b0e8:	e7dc      	b.n	800b0a4 <_strtod_l+0x224>
 800b0ea:	2e10      	cmp	r6, #16
 800b0ec:	bfdc      	itt	le
 800b0ee:	230a      	movle	r3, #10
 800b0f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b0f4:	e7e3      	b.n	800b0be <_strtod_l+0x23e>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9305      	str	r3, [sp, #20]
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e780      	b.n	800b000 <_strtod_l+0x180>
 800b0fe:	f04f 0c00 	mov.w	ip, #0
 800b102:	1caa      	adds	r2, r5, #2
 800b104:	9215      	str	r2, [sp, #84]	; 0x54
 800b106:	78aa      	ldrb	r2, [r5, #2]
 800b108:	e788      	b.n	800b01c <_strtod_l+0x19c>
 800b10a:	f04f 0c01 	mov.w	ip, #1
 800b10e:	e7f8      	b.n	800b102 <_strtod_l+0x282>
 800b110:	0800d8b0 	.word	0x0800d8b0
 800b114:	0800d8ac 	.word	0x0800d8ac
 800b118:	7ff00000 	.word	0x7ff00000
 800b11c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b11e:	1c51      	adds	r1, r2, #1
 800b120:	9115      	str	r1, [sp, #84]	; 0x54
 800b122:	7852      	ldrb	r2, [r2, #1]
 800b124:	2a30      	cmp	r2, #48	; 0x30
 800b126:	d0f9      	beq.n	800b11c <_strtod_l+0x29c>
 800b128:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b12c:	2908      	cmp	r1, #8
 800b12e:	f63f af7a 	bhi.w	800b026 <_strtod_l+0x1a6>
 800b132:	3a30      	subs	r2, #48	; 0x30
 800b134:	9208      	str	r2, [sp, #32]
 800b136:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b138:	920c      	str	r2, [sp, #48]	; 0x30
 800b13a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b13c:	1c57      	adds	r7, r2, #1
 800b13e:	9715      	str	r7, [sp, #84]	; 0x54
 800b140:	7852      	ldrb	r2, [r2, #1]
 800b142:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b146:	f1be 0f09 	cmp.w	lr, #9
 800b14a:	d938      	bls.n	800b1be <_strtod_l+0x33e>
 800b14c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b14e:	1a7f      	subs	r7, r7, r1
 800b150:	2f08      	cmp	r7, #8
 800b152:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b156:	dc03      	bgt.n	800b160 <_strtod_l+0x2e0>
 800b158:	9908      	ldr	r1, [sp, #32]
 800b15a:	428f      	cmp	r7, r1
 800b15c:	bfa8      	it	ge
 800b15e:	460f      	movge	r7, r1
 800b160:	f1bc 0f00 	cmp.w	ip, #0
 800b164:	d000      	beq.n	800b168 <_strtod_l+0x2e8>
 800b166:	427f      	negs	r7, r7
 800b168:	2e00      	cmp	r6, #0
 800b16a:	d14f      	bne.n	800b20c <_strtod_l+0x38c>
 800b16c:	9904      	ldr	r1, [sp, #16]
 800b16e:	4301      	orrs	r1, r0
 800b170:	f47f aec1 	bne.w	800aef6 <_strtod_l+0x76>
 800b174:	2b00      	cmp	r3, #0
 800b176:	f47f aedb 	bne.w	800af30 <_strtod_l+0xb0>
 800b17a:	2a69      	cmp	r2, #105	; 0x69
 800b17c:	d029      	beq.n	800b1d2 <_strtod_l+0x352>
 800b17e:	dc26      	bgt.n	800b1ce <_strtod_l+0x34e>
 800b180:	2a49      	cmp	r2, #73	; 0x49
 800b182:	d026      	beq.n	800b1d2 <_strtod_l+0x352>
 800b184:	2a4e      	cmp	r2, #78	; 0x4e
 800b186:	f47f aed3 	bne.w	800af30 <_strtod_l+0xb0>
 800b18a:	499b      	ldr	r1, [pc, #620]	; (800b3f8 <_strtod_l+0x578>)
 800b18c:	a815      	add	r0, sp, #84	; 0x54
 800b18e:	f001 fdab 	bl	800cce8 <__match>
 800b192:	2800      	cmp	r0, #0
 800b194:	f43f aecc 	beq.w	800af30 <_strtod_l+0xb0>
 800b198:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2b28      	cmp	r3, #40	; 0x28
 800b19e:	d12f      	bne.n	800b200 <_strtod_l+0x380>
 800b1a0:	4996      	ldr	r1, [pc, #600]	; (800b3fc <_strtod_l+0x57c>)
 800b1a2:	aa18      	add	r2, sp, #96	; 0x60
 800b1a4:	a815      	add	r0, sp, #84	; 0x54
 800b1a6:	f001 fdb3 	bl	800cd10 <__hexnan>
 800b1aa:	2805      	cmp	r0, #5
 800b1ac:	d128      	bne.n	800b200 <_strtod_l+0x380>
 800b1ae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b1b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b1bc:	e69b      	b.n	800aef6 <_strtod_l+0x76>
 800b1be:	9f08      	ldr	r7, [sp, #32]
 800b1c0:	210a      	movs	r1, #10
 800b1c2:	fb01 2107 	mla	r1, r1, r7, r2
 800b1c6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b1ca:	9208      	str	r2, [sp, #32]
 800b1cc:	e7b5      	b.n	800b13a <_strtod_l+0x2ba>
 800b1ce:	2a6e      	cmp	r2, #110	; 0x6e
 800b1d0:	e7d9      	b.n	800b186 <_strtod_l+0x306>
 800b1d2:	498b      	ldr	r1, [pc, #556]	; (800b400 <_strtod_l+0x580>)
 800b1d4:	a815      	add	r0, sp, #84	; 0x54
 800b1d6:	f001 fd87 	bl	800cce8 <__match>
 800b1da:	2800      	cmp	r0, #0
 800b1dc:	f43f aea8 	beq.w	800af30 <_strtod_l+0xb0>
 800b1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1e2:	4988      	ldr	r1, [pc, #544]	; (800b404 <_strtod_l+0x584>)
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	a815      	add	r0, sp, #84	; 0x54
 800b1e8:	9315      	str	r3, [sp, #84]	; 0x54
 800b1ea:	f001 fd7d 	bl	800cce8 <__match>
 800b1ee:	b910      	cbnz	r0, 800b1f6 <_strtod_l+0x376>
 800b1f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	9315      	str	r3, [sp, #84]	; 0x54
 800b1f6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b414 <_strtod_l+0x594>
 800b1fa:	f04f 0800 	mov.w	r8, #0
 800b1fe:	e67a      	b.n	800aef6 <_strtod_l+0x76>
 800b200:	4881      	ldr	r0, [pc, #516]	; (800b408 <_strtod_l+0x588>)
 800b202:	f001 fa8d 	bl	800c720 <nan>
 800b206:	ec59 8b10 	vmov	r8, r9, d0
 800b20a:	e674      	b.n	800aef6 <_strtod_l+0x76>
 800b20c:	9b05      	ldr	r3, [sp, #20]
 800b20e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b210:	1afb      	subs	r3, r7, r3
 800b212:	f1bb 0f00 	cmp.w	fp, #0
 800b216:	bf08      	it	eq
 800b218:	46b3      	moveq	fp, r6
 800b21a:	2e10      	cmp	r6, #16
 800b21c:	9308      	str	r3, [sp, #32]
 800b21e:	4635      	mov	r5, r6
 800b220:	bfa8      	it	ge
 800b222:	2510      	movge	r5, #16
 800b224:	f7f5 f996 	bl	8000554 <__aeabi_ui2d>
 800b228:	2e09      	cmp	r6, #9
 800b22a:	4680      	mov	r8, r0
 800b22c:	4689      	mov	r9, r1
 800b22e:	dd13      	ble.n	800b258 <_strtod_l+0x3d8>
 800b230:	4b76      	ldr	r3, [pc, #472]	; (800b40c <_strtod_l+0x58c>)
 800b232:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b236:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b23a:	f7f5 fa05 	bl	8000648 <__aeabi_dmul>
 800b23e:	4680      	mov	r8, r0
 800b240:	4650      	mov	r0, sl
 800b242:	4689      	mov	r9, r1
 800b244:	f7f5 f986 	bl	8000554 <__aeabi_ui2d>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	4640      	mov	r0, r8
 800b24e:	4649      	mov	r1, r9
 800b250:	f7f5 f844 	bl	80002dc <__adddf3>
 800b254:	4680      	mov	r8, r0
 800b256:	4689      	mov	r9, r1
 800b258:	2e0f      	cmp	r6, #15
 800b25a:	dc38      	bgt.n	800b2ce <_strtod_l+0x44e>
 800b25c:	9b08      	ldr	r3, [sp, #32]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	f43f ae49 	beq.w	800aef6 <_strtod_l+0x76>
 800b264:	dd24      	ble.n	800b2b0 <_strtod_l+0x430>
 800b266:	2b16      	cmp	r3, #22
 800b268:	dc0b      	bgt.n	800b282 <_strtod_l+0x402>
 800b26a:	4968      	ldr	r1, [pc, #416]	; (800b40c <_strtod_l+0x58c>)
 800b26c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b270:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b274:	4642      	mov	r2, r8
 800b276:	464b      	mov	r3, r9
 800b278:	f7f5 f9e6 	bl	8000648 <__aeabi_dmul>
 800b27c:	4680      	mov	r8, r0
 800b27e:	4689      	mov	r9, r1
 800b280:	e639      	b.n	800aef6 <_strtod_l+0x76>
 800b282:	9a08      	ldr	r2, [sp, #32]
 800b284:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b288:	4293      	cmp	r3, r2
 800b28a:	db20      	blt.n	800b2ce <_strtod_l+0x44e>
 800b28c:	4c5f      	ldr	r4, [pc, #380]	; (800b40c <_strtod_l+0x58c>)
 800b28e:	f1c6 060f 	rsb	r6, r6, #15
 800b292:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b296:	4642      	mov	r2, r8
 800b298:	464b      	mov	r3, r9
 800b29a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b29e:	f7f5 f9d3 	bl	8000648 <__aeabi_dmul>
 800b2a2:	9b08      	ldr	r3, [sp, #32]
 800b2a4:	1b9e      	subs	r6, r3, r6
 800b2a6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b2aa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b2ae:	e7e3      	b.n	800b278 <_strtod_l+0x3f8>
 800b2b0:	9b08      	ldr	r3, [sp, #32]
 800b2b2:	3316      	adds	r3, #22
 800b2b4:	db0b      	blt.n	800b2ce <_strtod_l+0x44e>
 800b2b6:	9b05      	ldr	r3, [sp, #20]
 800b2b8:	1bdf      	subs	r7, r3, r7
 800b2ba:	4b54      	ldr	r3, [pc, #336]	; (800b40c <_strtod_l+0x58c>)
 800b2bc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b2c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2c4:	4640      	mov	r0, r8
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	f7f5 fae8 	bl	800089c <__aeabi_ddiv>
 800b2cc:	e7d6      	b.n	800b27c <_strtod_l+0x3fc>
 800b2ce:	9b08      	ldr	r3, [sp, #32]
 800b2d0:	1b75      	subs	r5, r6, r5
 800b2d2:	441d      	add	r5, r3
 800b2d4:	2d00      	cmp	r5, #0
 800b2d6:	dd70      	ble.n	800b3ba <_strtod_l+0x53a>
 800b2d8:	f015 030f 	ands.w	r3, r5, #15
 800b2dc:	d00a      	beq.n	800b2f4 <_strtod_l+0x474>
 800b2de:	494b      	ldr	r1, [pc, #300]	; (800b40c <_strtod_l+0x58c>)
 800b2e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2e4:	4642      	mov	r2, r8
 800b2e6:	464b      	mov	r3, r9
 800b2e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2ec:	f7f5 f9ac 	bl	8000648 <__aeabi_dmul>
 800b2f0:	4680      	mov	r8, r0
 800b2f2:	4689      	mov	r9, r1
 800b2f4:	f035 050f 	bics.w	r5, r5, #15
 800b2f8:	d04d      	beq.n	800b396 <_strtod_l+0x516>
 800b2fa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b2fe:	dd22      	ble.n	800b346 <_strtod_l+0x4c6>
 800b300:	2500      	movs	r5, #0
 800b302:	46ab      	mov	fp, r5
 800b304:	9509      	str	r5, [sp, #36]	; 0x24
 800b306:	9505      	str	r5, [sp, #20]
 800b308:	2322      	movs	r3, #34	; 0x22
 800b30a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b414 <_strtod_l+0x594>
 800b30e:	6023      	str	r3, [r4, #0]
 800b310:	f04f 0800 	mov.w	r8, #0
 800b314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b316:	2b00      	cmp	r3, #0
 800b318:	f43f aded 	beq.w	800aef6 <_strtod_l+0x76>
 800b31c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b31e:	4620      	mov	r0, r4
 800b320:	f7ff f924 	bl	800a56c <_Bfree>
 800b324:	9905      	ldr	r1, [sp, #20]
 800b326:	4620      	mov	r0, r4
 800b328:	f7ff f920 	bl	800a56c <_Bfree>
 800b32c:	4659      	mov	r1, fp
 800b32e:	4620      	mov	r0, r4
 800b330:	f7ff f91c 	bl	800a56c <_Bfree>
 800b334:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b336:	4620      	mov	r0, r4
 800b338:	f7ff f918 	bl	800a56c <_Bfree>
 800b33c:	4629      	mov	r1, r5
 800b33e:	4620      	mov	r0, r4
 800b340:	f7ff f914 	bl	800a56c <_Bfree>
 800b344:	e5d7      	b.n	800aef6 <_strtod_l+0x76>
 800b346:	4b32      	ldr	r3, [pc, #200]	; (800b410 <_strtod_l+0x590>)
 800b348:	9304      	str	r3, [sp, #16]
 800b34a:	2300      	movs	r3, #0
 800b34c:	112d      	asrs	r5, r5, #4
 800b34e:	4640      	mov	r0, r8
 800b350:	4649      	mov	r1, r9
 800b352:	469a      	mov	sl, r3
 800b354:	2d01      	cmp	r5, #1
 800b356:	dc21      	bgt.n	800b39c <_strtod_l+0x51c>
 800b358:	b10b      	cbz	r3, 800b35e <_strtod_l+0x4de>
 800b35a:	4680      	mov	r8, r0
 800b35c:	4689      	mov	r9, r1
 800b35e:	492c      	ldr	r1, [pc, #176]	; (800b410 <_strtod_l+0x590>)
 800b360:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b364:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b368:	4642      	mov	r2, r8
 800b36a:	464b      	mov	r3, r9
 800b36c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b370:	f7f5 f96a 	bl	8000648 <__aeabi_dmul>
 800b374:	4b27      	ldr	r3, [pc, #156]	; (800b414 <_strtod_l+0x594>)
 800b376:	460a      	mov	r2, r1
 800b378:	400b      	ands	r3, r1
 800b37a:	4927      	ldr	r1, [pc, #156]	; (800b418 <_strtod_l+0x598>)
 800b37c:	428b      	cmp	r3, r1
 800b37e:	4680      	mov	r8, r0
 800b380:	d8be      	bhi.n	800b300 <_strtod_l+0x480>
 800b382:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b386:	428b      	cmp	r3, r1
 800b388:	bf86      	itte	hi
 800b38a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b41c <_strtod_l+0x59c>
 800b38e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b392:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b396:	2300      	movs	r3, #0
 800b398:	9304      	str	r3, [sp, #16]
 800b39a:	e07b      	b.n	800b494 <_strtod_l+0x614>
 800b39c:	07ea      	lsls	r2, r5, #31
 800b39e:	d505      	bpl.n	800b3ac <_strtod_l+0x52c>
 800b3a0:	9b04      	ldr	r3, [sp, #16]
 800b3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a6:	f7f5 f94f 	bl	8000648 <__aeabi_dmul>
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	9a04      	ldr	r2, [sp, #16]
 800b3ae:	3208      	adds	r2, #8
 800b3b0:	f10a 0a01 	add.w	sl, sl, #1
 800b3b4:	106d      	asrs	r5, r5, #1
 800b3b6:	9204      	str	r2, [sp, #16]
 800b3b8:	e7cc      	b.n	800b354 <_strtod_l+0x4d4>
 800b3ba:	d0ec      	beq.n	800b396 <_strtod_l+0x516>
 800b3bc:	426d      	negs	r5, r5
 800b3be:	f015 020f 	ands.w	r2, r5, #15
 800b3c2:	d00a      	beq.n	800b3da <_strtod_l+0x55a>
 800b3c4:	4b11      	ldr	r3, [pc, #68]	; (800b40c <_strtod_l+0x58c>)
 800b3c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3ca:	4640      	mov	r0, r8
 800b3cc:	4649      	mov	r1, r9
 800b3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3d2:	f7f5 fa63 	bl	800089c <__aeabi_ddiv>
 800b3d6:	4680      	mov	r8, r0
 800b3d8:	4689      	mov	r9, r1
 800b3da:	112d      	asrs	r5, r5, #4
 800b3dc:	d0db      	beq.n	800b396 <_strtod_l+0x516>
 800b3de:	2d1f      	cmp	r5, #31
 800b3e0:	dd1e      	ble.n	800b420 <_strtod_l+0x5a0>
 800b3e2:	2500      	movs	r5, #0
 800b3e4:	46ab      	mov	fp, r5
 800b3e6:	9509      	str	r5, [sp, #36]	; 0x24
 800b3e8:	9505      	str	r5, [sp, #20]
 800b3ea:	2322      	movs	r3, #34	; 0x22
 800b3ec:	f04f 0800 	mov.w	r8, #0
 800b3f0:	f04f 0900 	mov.w	r9, #0
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	e78d      	b.n	800b314 <_strtod_l+0x494>
 800b3f8:	0800d699 	.word	0x0800d699
 800b3fc:	0800d8c4 	.word	0x0800d8c4
 800b400:	0800d691 	.word	0x0800d691
 800b404:	0800d6c6 	.word	0x0800d6c6
 800b408:	0800da70 	.word	0x0800da70
 800b40c:	0800d7d8 	.word	0x0800d7d8
 800b410:	0800d7b0 	.word	0x0800d7b0
 800b414:	7ff00000 	.word	0x7ff00000
 800b418:	7ca00000 	.word	0x7ca00000
 800b41c:	7fefffff 	.word	0x7fefffff
 800b420:	f015 0310 	ands.w	r3, r5, #16
 800b424:	bf18      	it	ne
 800b426:	236a      	movne	r3, #106	; 0x6a
 800b428:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b7cc <_strtod_l+0x94c>
 800b42c:	9304      	str	r3, [sp, #16]
 800b42e:	4640      	mov	r0, r8
 800b430:	4649      	mov	r1, r9
 800b432:	2300      	movs	r3, #0
 800b434:	07ea      	lsls	r2, r5, #31
 800b436:	d504      	bpl.n	800b442 <_strtod_l+0x5c2>
 800b438:	e9da 2300 	ldrd	r2, r3, [sl]
 800b43c:	f7f5 f904 	bl	8000648 <__aeabi_dmul>
 800b440:	2301      	movs	r3, #1
 800b442:	106d      	asrs	r5, r5, #1
 800b444:	f10a 0a08 	add.w	sl, sl, #8
 800b448:	d1f4      	bne.n	800b434 <_strtod_l+0x5b4>
 800b44a:	b10b      	cbz	r3, 800b450 <_strtod_l+0x5d0>
 800b44c:	4680      	mov	r8, r0
 800b44e:	4689      	mov	r9, r1
 800b450:	9b04      	ldr	r3, [sp, #16]
 800b452:	b1bb      	cbz	r3, 800b484 <_strtod_l+0x604>
 800b454:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b458:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	4649      	mov	r1, r9
 800b460:	dd10      	ble.n	800b484 <_strtod_l+0x604>
 800b462:	2b1f      	cmp	r3, #31
 800b464:	f340 811e 	ble.w	800b6a4 <_strtod_l+0x824>
 800b468:	2b34      	cmp	r3, #52	; 0x34
 800b46a:	bfde      	ittt	le
 800b46c:	f04f 33ff 	movle.w	r3, #4294967295
 800b470:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b474:	4093      	lslle	r3, r2
 800b476:	f04f 0800 	mov.w	r8, #0
 800b47a:	bfcc      	ite	gt
 800b47c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b480:	ea03 0901 	andle.w	r9, r3, r1
 800b484:	2200      	movs	r2, #0
 800b486:	2300      	movs	r3, #0
 800b488:	4640      	mov	r0, r8
 800b48a:	4649      	mov	r1, r9
 800b48c:	f7f5 fb44 	bl	8000b18 <__aeabi_dcmpeq>
 800b490:	2800      	cmp	r0, #0
 800b492:	d1a6      	bne.n	800b3e2 <_strtod_l+0x562>
 800b494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b496:	9300      	str	r3, [sp, #0]
 800b498:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b49a:	4633      	mov	r3, r6
 800b49c:	465a      	mov	r2, fp
 800b49e:	4620      	mov	r0, r4
 800b4a0:	f7ff f8cc 	bl	800a63c <__s2b>
 800b4a4:	9009      	str	r0, [sp, #36]	; 0x24
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	f43f af2a 	beq.w	800b300 <_strtod_l+0x480>
 800b4ac:	9a08      	ldr	r2, [sp, #32]
 800b4ae:	9b05      	ldr	r3, [sp, #20]
 800b4b0:	2a00      	cmp	r2, #0
 800b4b2:	eba3 0307 	sub.w	r3, r3, r7
 800b4b6:	bfa8      	it	ge
 800b4b8:	2300      	movge	r3, #0
 800b4ba:	930c      	str	r3, [sp, #48]	; 0x30
 800b4bc:	2500      	movs	r5, #0
 800b4be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b4c2:	9312      	str	r3, [sp, #72]	; 0x48
 800b4c4:	46ab      	mov	fp, r5
 800b4c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	6859      	ldr	r1, [r3, #4]
 800b4cc:	f7ff f80e 	bl	800a4ec <_Balloc>
 800b4d0:	9005      	str	r0, [sp, #20]
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	f43f af18 	beq.w	800b308 <_strtod_l+0x488>
 800b4d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4da:	691a      	ldr	r2, [r3, #16]
 800b4dc:	3202      	adds	r2, #2
 800b4de:	f103 010c 	add.w	r1, r3, #12
 800b4e2:	0092      	lsls	r2, r2, #2
 800b4e4:	300c      	adds	r0, #12
 800b4e6:	f7fe f870 	bl	80095ca <memcpy>
 800b4ea:	ec49 8b10 	vmov	d0, r8, r9
 800b4ee:	aa18      	add	r2, sp, #96	; 0x60
 800b4f0:	a917      	add	r1, sp, #92	; 0x5c
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f7ff fbd6 	bl	800aca4 <__d2b>
 800b4f8:	ec49 8b18 	vmov	d8, r8, r9
 800b4fc:	9016      	str	r0, [sp, #88]	; 0x58
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f af02 	beq.w	800b308 <_strtod_l+0x488>
 800b504:	2101      	movs	r1, #1
 800b506:	4620      	mov	r0, r4
 800b508:	f7ff f930 	bl	800a76c <__i2b>
 800b50c:	4683      	mov	fp, r0
 800b50e:	2800      	cmp	r0, #0
 800b510:	f43f aefa 	beq.w	800b308 <_strtod_l+0x488>
 800b514:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b516:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b518:	2e00      	cmp	r6, #0
 800b51a:	bfab      	itete	ge
 800b51c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b51e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b520:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b522:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b526:	bfac      	ite	ge
 800b528:	eb06 0a03 	addge.w	sl, r6, r3
 800b52c:	1b9f      	sublt	r7, r3, r6
 800b52e:	9b04      	ldr	r3, [sp, #16]
 800b530:	1af6      	subs	r6, r6, r3
 800b532:	4416      	add	r6, r2
 800b534:	4ba0      	ldr	r3, [pc, #640]	; (800b7b8 <_strtod_l+0x938>)
 800b536:	3e01      	subs	r6, #1
 800b538:	429e      	cmp	r6, r3
 800b53a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b53e:	f280 80c4 	bge.w	800b6ca <_strtod_l+0x84a>
 800b542:	1b9b      	subs	r3, r3, r6
 800b544:	2b1f      	cmp	r3, #31
 800b546:	eba2 0203 	sub.w	r2, r2, r3
 800b54a:	f04f 0101 	mov.w	r1, #1
 800b54e:	f300 80b0 	bgt.w	800b6b2 <_strtod_l+0x832>
 800b552:	fa01 f303 	lsl.w	r3, r1, r3
 800b556:	930e      	str	r3, [sp, #56]	; 0x38
 800b558:	2300      	movs	r3, #0
 800b55a:	930d      	str	r3, [sp, #52]	; 0x34
 800b55c:	eb0a 0602 	add.w	r6, sl, r2
 800b560:	9b04      	ldr	r3, [sp, #16]
 800b562:	45b2      	cmp	sl, r6
 800b564:	4417      	add	r7, r2
 800b566:	441f      	add	r7, r3
 800b568:	4653      	mov	r3, sl
 800b56a:	bfa8      	it	ge
 800b56c:	4633      	movge	r3, r6
 800b56e:	42bb      	cmp	r3, r7
 800b570:	bfa8      	it	ge
 800b572:	463b      	movge	r3, r7
 800b574:	2b00      	cmp	r3, #0
 800b576:	bfc2      	ittt	gt
 800b578:	1af6      	subgt	r6, r6, r3
 800b57a:	1aff      	subgt	r7, r7, r3
 800b57c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b580:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b582:	2b00      	cmp	r3, #0
 800b584:	dd17      	ble.n	800b5b6 <_strtod_l+0x736>
 800b586:	4659      	mov	r1, fp
 800b588:	461a      	mov	r2, r3
 800b58a:	4620      	mov	r0, r4
 800b58c:	f7ff f9ae 	bl	800a8ec <__pow5mult>
 800b590:	4683      	mov	fp, r0
 800b592:	2800      	cmp	r0, #0
 800b594:	f43f aeb8 	beq.w	800b308 <_strtod_l+0x488>
 800b598:	4601      	mov	r1, r0
 800b59a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7ff f8fb 	bl	800a798 <__multiply>
 800b5a2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b5a4:	2800      	cmp	r0, #0
 800b5a6:	f43f aeaf 	beq.w	800b308 <_strtod_l+0x488>
 800b5aa:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f7fe ffdd 	bl	800a56c <_Bfree>
 800b5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5b4:	9316      	str	r3, [sp, #88]	; 0x58
 800b5b6:	2e00      	cmp	r6, #0
 800b5b8:	f300 808c 	bgt.w	800b6d4 <_strtod_l+0x854>
 800b5bc:	9b08      	ldr	r3, [sp, #32]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	dd08      	ble.n	800b5d4 <_strtod_l+0x754>
 800b5c2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5c4:	9905      	ldr	r1, [sp, #20]
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	f7ff f990 	bl	800a8ec <__pow5mult>
 800b5cc:	9005      	str	r0, [sp, #20]
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	f43f ae9a 	beq.w	800b308 <_strtod_l+0x488>
 800b5d4:	2f00      	cmp	r7, #0
 800b5d6:	dd08      	ble.n	800b5ea <_strtod_l+0x76a>
 800b5d8:	9905      	ldr	r1, [sp, #20]
 800b5da:	463a      	mov	r2, r7
 800b5dc:	4620      	mov	r0, r4
 800b5de:	f7ff f9df 	bl	800a9a0 <__lshift>
 800b5e2:	9005      	str	r0, [sp, #20]
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	f43f ae8f 	beq.w	800b308 <_strtod_l+0x488>
 800b5ea:	f1ba 0f00 	cmp.w	sl, #0
 800b5ee:	dd08      	ble.n	800b602 <_strtod_l+0x782>
 800b5f0:	4659      	mov	r1, fp
 800b5f2:	4652      	mov	r2, sl
 800b5f4:	4620      	mov	r0, r4
 800b5f6:	f7ff f9d3 	bl	800a9a0 <__lshift>
 800b5fa:	4683      	mov	fp, r0
 800b5fc:	2800      	cmp	r0, #0
 800b5fe:	f43f ae83 	beq.w	800b308 <_strtod_l+0x488>
 800b602:	9a05      	ldr	r2, [sp, #20]
 800b604:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b606:	4620      	mov	r0, r4
 800b608:	f7ff fa52 	bl	800aab0 <__mdiff>
 800b60c:	4605      	mov	r5, r0
 800b60e:	2800      	cmp	r0, #0
 800b610:	f43f ae7a 	beq.w	800b308 <_strtod_l+0x488>
 800b614:	68c3      	ldr	r3, [r0, #12]
 800b616:	930b      	str	r3, [sp, #44]	; 0x2c
 800b618:	2300      	movs	r3, #0
 800b61a:	60c3      	str	r3, [r0, #12]
 800b61c:	4659      	mov	r1, fp
 800b61e:	f7ff fa2b 	bl	800aa78 <__mcmp>
 800b622:	2800      	cmp	r0, #0
 800b624:	da60      	bge.n	800b6e8 <_strtod_l+0x868>
 800b626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b628:	ea53 0308 	orrs.w	r3, r3, r8
 800b62c:	f040 8084 	bne.w	800b738 <_strtod_l+0x8b8>
 800b630:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b634:	2b00      	cmp	r3, #0
 800b636:	d17f      	bne.n	800b738 <_strtod_l+0x8b8>
 800b638:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b63c:	0d1b      	lsrs	r3, r3, #20
 800b63e:	051b      	lsls	r3, r3, #20
 800b640:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b644:	d978      	bls.n	800b738 <_strtod_l+0x8b8>
 800b646:	696b      	ldr	r3, [r5, #20]
 800b648:	b913      	cbnz	r3, 800b650 <_strtod_l+0x7d0>
 800b64a:	692b      	ldr	r3, [r5, #16]
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	dd73      	ble.n	800b738 <_strtod_l+0x8b8>
 800b650:	4629      	mov	r1, r5
 800b652:	2201      	movs	r2, #1
 800b654:	4620      	mov	r0, r4
 800b656:	f7ff f9a3 	bl	800a9a0 <__lshift>
 800b65a:	4659      	mov	r1, fp
 800b65c:	4605      	mov	r5, r0
 800b65e:	f7ff fa0b 	bl	800aa78 <__mcmp>
 800b662:	2800      	cmp	r0, #0
 800b664:	dd68      	ble.n	800b738 <_strtod_l+0x8b8>
 800b666:	9904      	ldr	r1, [sp, #16]
 800b668:	4a54      	ldr	r2, [pc, #336]	; (800b7bc <_strtod_l+0x93c>)
 800b66a:	464b      	mov	r3, r9
 800b66c:	2900      	cmp	r1, #0
 800b66e:	f000 8084 	beq.w	800b77a <_strtod_l+0x8fa>
 800b672:	ea02 0109 	and.w	r1, r2, r9
 800b676:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b67a:	dc7e      	bgt.n	800b77a <_strtod_l+0x8fa>
 800b67c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b680:	f77f aeb3 	ble.w	800b3ea <_strtod_l+0x56a>
 800b684:	4b4e      	ldr	r3, [pc, #312]	; (800b7c0 <_strtod_l+0x940>)
 800b686:	4640      	mov	r0, r8
 800b688:	4649      	mov	r1, r9
 800b68a:	2200      	movs	r2, #0
 800b68c:	f7f4 ffdc 	bl	8000648 <__aeabi_dmul>
 800b690:	4b4a      	ldr	r3, [pc, #296]	; (800b7bc <_strtod_l+0x93c>)
 800b692:	400b      	ands	r3, r1
 800b694:	4680      	mov	r8, r0
 800b696:	4689      	mov	r9, r1
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f47f ae3f 	bne.w	800b31c <_strtod_l+0x49c>
 800b69e:	2322      	movs	r3, #34	; 0x22
 800b6a0:	6023      	str	r3, [r4, #0]
 800b6a2:	e63b      	b.n	800b31c <_strtod_l+0x49c>
 800b6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ac:	ea03 0808 	and.w	r8, r3, r8
 800b6b0:	e6e8      	b.n	800b484 <_strtod_l+0x604>
 800b6b2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b6b6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b6ba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b6be:	36e2      	adds	r6, #226	; 0xe2
 800b6c0:	fa01 f306 	lsl.w	r3, r1, r6
 800b6c4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b6c8:	e748      	b.n	800b55c <_strtod_l+0x6dc>
 800b6ca:	2100      	movs	r1, #0
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b6d2:	e743      	b.n	800b55c <_strtod_l+0x6dc>
 800b6d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6d6:	4632      	mov	r2, r6
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f7ff f961 	bl	800a9a0 <__lshift>
 800b6de:	9016      	str	r0, [sp, #88]	; 0x58
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	f47f af6b 	bne.w	800b5bc <_strtod_l+0x73c>
 800b6e6:	e60f      	b.n	800b308 <_strtod_l+0x488>
 800b6e8:	46ca      	mov	sl, r9
 800b6ea:	d171      	bne.n	800b7d0 <_strtod_l+0x950>
 800b6ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6f2:	b352      	cbz	r2, 800b74a <_strtod_l+0x8ca>
 800b6f4:	4a33      	ldr	r2, [pc, #204]	; (800b7c4 <_strtod_l+0x944>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d12a      	bne.n	800b750 <_strtod_l+0x8d0>
 800b6fa:	9b04      	ldr	r3, [sp, #16]
 800b6fc:	4641      	mov	r1, r8
 800b6fe:	b1fb      	cbz	r3, 800b740 <_strtod_l+0x8c0>
 800b700:	4b2e      	ldr	r3, [pc, #184]	; (800b7bc <_strtod_l+0x93c>)
 800b702:	ea09 0303 	and.w	r3, r9, r3
 800b706:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b70a:	f04f 32ff 	mov.w	r2, #4294967295
 800b70e:	d81a      	bhi.n	800b746 <_strtod_l+0x8c6>
 800b710:	0d1b      	lsrs	r3, r3, #20
 800b712:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b716:	fa02 f303 	lsl.w	r3, r2, r3
 800b71a:	4299      	cmp	r1, r3
 800b71c:	d118      	bne.n	800b750 <_strtod_l+0x8d0>
 800b71e:	4b2a      	ldr	r3, [pc, #168]	; (800b7c8 <_strtod_l+0x948>)
 800b720:	459a      	cmp	sl, r3
 800b722:	d102      	bne.n	800b72a <_strtod_l+0x8aa>
 800b724:	3101      	adds	r1, #1
 800b726:	f43f adef 	beq.w	800b308 <_strtod_l+0x488>
 800b72a:	4b24      	ldr	r3, [pc, #144]	; (800b7bc <_strtod_l+0x93c>)
 800b72c:	ea0a 0303 	and.w	r3, sl, r3
 800b730:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b734:	f04f 0800 	mov.w	r8, #0
 800b738:	9b04      	ldr	r3, [sp, #16]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1a2      	bne.n	800b684 <_strtod_l+0x804>
 800b73e:	e5ed      	b.n	800b31c <_strtod_l+0x49c>
 800b740:	f04f 33ff 	mov.w	r3, #4294967295
 800b744:	e7e9      	b.n	800b71a <_strtod_l+0x89a>
 800b746:	4613      	mov	r3, r2
 800b748:	e7e7      	b.n	800b71a <_strtod_l+0x89a>
 800b74a:	ea53 0308 	orrs.w	r3, r3, r8
 800b74e:	d08a      	beq.n	800b666 <_strtod_l+0x7e6>
 800b750:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b752:	b1e3      	cbz	r3, 800b78e <_strtod_l+0x90e>
 800b754:	ea13 0f0a 	tst.w	r3, sl
 800b758:	d0ee      	beq.n	800b738 <_strtod_l+0x8b8>
 800b75a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b75c:	9a04      	ldr	r2, [sp, #16]
 800b75e:	4640      	mov	r0, r8
 800b760:	4649      	mov	r1, r9
 800b762:	b1c3      	cbz	r3, 800b796 <_strtod_l+0x916>
 800b764:	f7ff fb6f 	bl	800ae46 <sulp>
 800b768:	4602      	mov	r2, r0
 800b76a:	460b      	mov	r3, r1
 800b76c:	ec51 0b18 	vmov	r0, r1, d8
 800b770:	f7f4 fdb4 	bl	80002dc <__adddf3>
 800b774:	4680      	mov	r8, r0
 800b776:	4689      	mov	r9, r1
 800b778:	e7de      	b.n	800b738 <_strtod_l+0x8b8>
 800b77a:	4013      	ands	r3, r2
 800b77c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b780:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b784:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b788:	f04f 38ff 	mov.w	r8, #4294967295
 800b78c:	e7d4      	b.n	800b738 <_strtod_l+0x8b8>
 800b78e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b790:	ea13 0f08 	tst.w	r3, r8
 800b794:	e7e0      	b.n	800b758 <_strtod_l+0x8d8>
 800b796:	f7ff fb56 	bl	800ae46 <sulp>
 800b79a:	4602      	mov	r2, r0
 800b79c:	460b      	mov	r3, r1
 800b79e:	ec51 0b18 	vmov	r0, r1, d8
 800b7a2:	f7f4 fd99 	bl	80002d8 <__aeabi_dsub>
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	4680      	mov	r8, r0
 800b7ac:	4689      	mov	r9, r1
 800b7ae:	f7f5 f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d0c0      	beq.n	800b738 <_strtod_l+0x8b8>
 800b7b6:	e618      	b.n	800b3ea <_strtod_l+0x56a>
 800b7b8:	fffffc02 	.word	0xfffffc02
 800b7bc:	7ff00000 	.word	0x7ff00000
 800b7c0:	39500000 	.word	0x39500000
 800b7c4:	000fffff 	.word	0x000fffff
 800b7c8:	7fefffff 	.word	0x7fefffff
 800b7cc:	0800d8d8 	.word	0x0800d8d8
 800b7d0:	4659      	mov	r1, fp
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	f7ff fac0 	bl	800ad58 <__ratio>
 800b7d8:	ec57 6b10 	vmov	r6, r7, d0
 800b7dc:	ee10 0a10 	vmov	r0, s0
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	f7f5 f9aa 	bl	8000b40 <__aeabi_dcmple>
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d071      	beq.n	800b8d4 <_strtod_l+0xa54>
 800b7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d17c      	bne.n	800b8f0 <_strtod_l+0xa70>
 800b7f6:	f1b8 0f00 	cmp.w	r8, #0
 800b7fa:	d15a      	bne.n	800b8b2 <_strtod_l+0xa32>
 800b7fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b800:	2b00      	cmp	r3, #0
 800b802:	d15d      	bne.n	800b8c0 <_strtod_l+0xa40>
 800b804:	4b90      	ldr	r3, [pc, #576]	; (800ba48 <_strtod_l+0xbc8>)
 800b806:	2200      	movs	r2, #0
 800b808:	4630      	mov	r0, r6
 800b80a:	4639      	mov	r1, r7
 800b80c:	f7f5 f98e 	bl	8000b2c <__aeabi_dcmplt>
 800b810:	2800      	cmp	r0, #0
 800b812:	d15c      	bne.n	800b8ce <_strtod_l+0xa4e>
 800b814:	4630      	mov	r0, r6
 800b816:	4639      	mov	r1, r7
 800b818:	4b8c      	ldr	r3, [pc, #560]	; (800ba4c <_strtod_l+0xbcc>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	f7f4 ff14 	bl	8000648 <__aeabi_dmul>
 800b820:	4606      	mov	r6, r0
 800b822:	460f      	mov	r7, r1
 800b824:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b828:	9606      	str	r6, [sp, #24]
 800b82a:	9307      	str	r3, [sp, #28]
 800b82c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b830:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b834:	4b86      	ldr	r3, [pc, #536]	; (800ba50 <_strtod_l+0xbd0>)
 800b836:	ea0a 0303 	and.w	r3, sl, r3
 800b83a:	930d      	str	r3, [sp, #52]	; 0x34
 800b83c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b83e:	4b85      	ldr	r3, [pc, #532]	; (800ba54 <_strtod_l+0xbd4>)
 800b840:	429a      	cmp	r2, r3
 800b842:	f040 8090 	bne.w	800b966 <_strtod_l+0xae6>
 800b846:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b84a:	ec49 8b10 	vmov	d0, r8, r9
 800b84e:	f7ff f9b9 	bl	800abc4 <__ulp>
 800b852:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b856:	ec51 0b10 	vmov	r0, r1, d0
 800b85a:	f7f4 fef5 	bl	8000648 <__aeabi_dmul>
 800b85e:	4642      	mov	r2, r8
 800b860:	464b      	mov	r3, r9
 800b862:	f7f4 fd3b 	bl	80002dc <__adddf3>
 800b866:	460b      	mov	r3, r1
 800b868:	4979      	ldr	r1, [pc, #484]	; (800ba50 <_strtod_l+0xbd0>)
 800b86a:	4a7b      	ldr	r2, [pc, #492]	; (800ba58 <_strtod_l+0xbd8>)
 800b86c:	4019      	ands	r1, r3
 800b86e:	4291      	cmp	r1, r2
 800b870:	4680      	mov	r8, r0
 800b872:	d944      	bls.n	800b8fe <_strtod_l+0xa7e>
 800b874:	ee18 2a90 	vmov	r2, s17
 800b878:	4b78      	ldr	r3, [pc, #480]	; (800ba5c <_strtod_l+0xbdc>)
 800b87a:	429a      	cmp	r2, r3
 800b87c:	d104      	bne.n	800b888 <_strtod_l+0xa08>
 800b87e:	ee18 3a10 	vmov	r3, s16
 800b882:	3301      	adds	r3, #1
 800b884:	f43f ad40 	beq.w	800b308 <_strtod_l+0x488>
 800b888:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ba5c <_strtod_l+0xbdc>
 800b88c:	f04f 38ff 	mov.w	r8, #4294967295
 800b890:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b892:	4620      	mov	r0, r4
 800b894:	f7fe fe6a 	bl	800a56c <_Bfree>
 800b898:	9905      	ldr	r1, [sp, #20]
 800b89a:	4620      	mov	r0, r4
 800b89c:	f7fe fe66 	bl	800a56c <_Bfree>
 800b8a0:	4659      	mov	r1, fp
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7fe fe62 	bl	800a56c <_Bfree>
 800b8a8:	4629      	mov	r1, r5
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	f7fe fe5e 	bl	800a56c <_Bfree>
 800b8b0:	e609      	b.n	800b4c6 <_strtod_l+0x646>
 800b8b2:	f1b8 0f01 	cmp.w	r8, #1
 800b8b6:	d103      	bne.n	800b8c0 <_strtod_l+0xa40>
 800b8b8:	f1b9 0f00 	cmp.w	r9, #0
 800b8bc:	f43f ad95 	beq.w	800b3ea <_strtod_l+0x56a>
 800b8c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ba18 <_strtod_l+0xb98>
 800b8c4:	4f60      	ldr	r7, [pc, #384]	; (800ba48 <_strtod_l+0xbc8>)
 800b8c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8ca:	2600      	movs	r6, #0
 800b8cc:	e7ae      	b.n	800b82c <_strtod_l+0x9ac>
 800b8ce:	4f5f      	ldr	r7, [pc, #380]	; (800ba4c <_strtod_l+0xbcc>)
 800b8d0:	2600      	movs	r6, #0
 800b8d2:	e7a7      	b.n	800b824 <_strtod_l+0x9a4>
 800b8d4:	4b5d      	ldr	r3, [pc, #372]	; (800ba4c <_strtod_l+0xbcc>)
 800b8d6:	4630      	mov	r0, r6
 800b8d8:	4639      	mov	r1, r7
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f7f4 feb4 	bl	8000648 <__aeabi_dmul>
 800b8e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8e2:	4606      	mov	r6, r0
 800b8e4:	460f      	mov	r7, r1
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d09c      	beq.n	800b824 <_strtod_l+0x9a4>
 800b8ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b8ee:	e79d      	b.n	800b82c <_strtod_l+0x9ac>
 800b8f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ba20 <_strtod_l+0xba0>
 800b8f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8f8:	ec57 6b17 	vmov	r6, r7, d7
 800b8fc:	e796      	b.n	800b82c <_strtod_l+0x9ac>
 800b8fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b902:	9b04      	ldr	r3, [sp, #16]
 800b904:	46ca      	mov	sl, r9
 800b906:	2b00      	cmp	r3, #0
 800b908:	d1c2      	bne.n	800b890 <_strtod_l+0xa10>
 800b90a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b90e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b910:	0d1b      	lsrs	r3, r3, #20
 800b912:	051b      	lsls	r3, r3, #20
 800b914:	429a      	cmp	r2, r3
 800b916:	d1bb      	bne.n	800b890 <_strtod_l+0xa10>
 800b918:	4630      	mov	r0, r6
 800b91a:	4639      	mov	r1, r7
 800b91c:	f7f5 f9f4 	bl	8000d08 <__aeabi_d2lz>
 800b920:	f7f4 fe64 	bl	80005ec <__aeabi_l2d>
 800b924:	4602      	mov	r2, r0
 800b926:	460b      	mov	r3, r1
 800b928:	4630      	mov	r0, r6
 800b92a:	4639      	mov	r1, r7
 800b92c:	f7f4 fcd4 	bl	80002d8 <__aeabi_dsub>
 800b930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b932:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b936:	ea43 0308 	orr.w	r3, r3, r8
 800b93a:	4313      	orrs	r3, r2
 800b93c:	4606      	mov	r6, r0
 800b93e:	460f      	mov	r7, r1
 800b940:	d054      	beq.n	800b9ec <_strtod_l+0xb6c>
 800b942:	a339      	add	r3, pc, #228	; (adr r3, 800ba28 <_strtod_l+0xba8>)
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	f7f5 f8f0 	bl	8000b2c <__aeabi_dcmplt>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	f47f ace5 	bne.w	800b31c <_strtod_l+0x49c>
 800b952:	a337      	add	r3, pc, #220	; (adr r3, 800ba30 <_strtod_l+0xbb0>)
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	4630      	mov	r0, r6
 800b95a:	4639      	mov	r1, r7
 800b95c:	f7f5 f904 	bl	8000b68 <__aeabi_dcmpgt>
 800b960:	2800      	cmp	r0, #0
 800b962:	d095      	beq.n	800b890 <_strtod_l+0xa10>
 800b964:	e4da      	b.n	800b31c <_strtod_l+0x49c>
 800b966:	9b04      	ldr	r3, [sp, #16]
 800b968:	b333      	cbz	r3, 800b9b8 <_strtod_l+0xb38>
 800b96a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b96c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b970:	d822      	bhi.n	800b9b8 <_strtod_l+0xb38>
 800b972:	a331      	add	r3, pc, #196	; (adr r3, 800ba38 <_strtod_l+0xbb8>)
 800b974:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b978:	4630      	mov	r0, r6
 800b97a:	4639      	mov	r1, r7
 800b97c:	f7f5 f8e0 	bl	8000b40 <__aeabi_dcmple>
 800b980:	b1a0      	cbz	r0, 800b9ac <_strtod_l+0xb2c>
 800b982:	4639      	mov	r1, r7
 800b984:	4630      	mov	r0, r6
 800b986:	f7f5 f937 	bl	8000bf8 <__aeabi_d2uiz>
 800b98a:	2801      	cmp	r0, #1
 800b98c:	bf38      	it	cc
 800b98e:	2001      	movcc	r0, #1
 800b990:	f7f4 fde0 	bl	8000554 <__aeabi_ui2d>
 800b994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b996:	4606      	mov	r6, r0
 800b998:	460f      	mov	r7, r1
 800b99a:	bb23      	cbnz	r3, 800b9e6 <_strtod_l+0xb66>
 800b99c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9a0:	9010      	str	r0, [sp, #64]	; 0x40
 800b9a2:	9311      	str	r3, [sp, #68]	; 0x44
 800b9a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b9a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b9ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b9b4:	1a9b      	subs	r3, r3, r2
 800b9b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b9bc:	eeb0 0a48 	vmov.f32	s0, s16
 800b9c0:	eef0 0a68 	vmov.f32	s1, s17
 800b9c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b9c8:	f7ff f8fc 	bl	800abc4 <__ulp>
 800b9cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b9d0:	ec53 2b10 	vmov	r2, r3, d0
 800b9d4:	f7f4 fe38 	bl	8000648 <__aeabi_dmul>
 800b9d8:	ec53 2b18 	vmov	r2, r3, d8
 800b9dc:	f7f4 fc7e 	bl	80002dc <__adddf3>
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	4689      	mov	r9, r1
 800b9e4:	e78d      	b.n	800b902 <_strtod_l+0xa82>
 800b9e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b9ea:	e7db      	b.n	800b9a4 <_strtod_l+0xb24>
 800b9ec:	a314      	add	r3, pc, #80	; (adr r3, 800ba40 <_strtod_l+0xbc0>)
 800b9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f2:	f7f5 f89b 	bl	8000b2c <__aeabi_dcmplt>
 800b9f6:	e7b3      	b.n	800b960 <_strtod_l+0xae0>
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	930a      	str	r3, [sp, #40]	; 0x28
 800b9fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b9fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba00:	6013      	str	r3, [r2, #0]
 800ba02:	f7ff ba7c 	b.w	800aefe <_strtod_l+0x7e>
 800ba06:	2a65      	cmp	r2, #101	; 0x65
 800ba08:	f43f ab75 	beq.w	800b0f6 <_strtod_l+0x276>
 800ba0c:	2a45      	cmp	r2, #69	; 0x45
 800ba0e:	f43f ab72 	beq.w	800b0f6 <_strtod_l+0x276>
 800ba12:	2301      	movs	r3, #1
 800ba14:	f7ff bbaa 	b.w	800b16c <_strtod_l+0x2ec>
 800ba18:	00000000 	.word	0x00000000
 800ba1c:	bff00000 	.word	0xbff00000
 800ba20:	00000000 	.word	0x00000000
 800ba24:	3ff00000 	.word	0x3ff00000
 800ba28:	94a03595 	.word	0x94a03595
 800ba2c:	3fdfffff 	.word	0x3fdfffff
 800ba30:	35afe535 	.word	0x35afe535
 800ba34:	3fe00000 	.word	0x3fe00000
 800ba38:	ffc00000 	.word	0xffc00000
 800ba3c:	41dfffff 	.word	0x41dfffff
 800ba40:	94a03595 	.word	0x94a03595
 800ba44:	3fcfffff 	.word	0x3fcfffff
 800ba48:	3ff00000 	.word	0x3ff00000
 800ba4c:	3fe00000 	.word	0x3fe00000
 800ba50:	7ff00000 	.word	0x7ff00000
 800ba54:	7fe00000 	.word	0x7fe00000
 800ba58:	7c9fffff 	.word	0x7c9fffff
 800ba5c:	7fefffff 	.word	0x7fefffff

0800ba60 <_strtod_r>:
 800ba60:	4b01      	ldr	r3, [pc, #4]	; (800ba68 <_strtod_r+0x8>)
 800ba62:	f7ff ba0d 	b.w	800ae80 <_strtod_l>
 800ba66:	bf00      	nop
 800ba68:	20000064 	.word	0x20000064

0800ba6c <_strtol_l.constprop.0>:
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba72:	d001      	beq.n	800ba78 <_strtol_l.constprop.0+0xc>
 800ba74:	2b24      	cmp	r3, #36	; 0x24
 800ba76:	d906      	bls.n	800ba86 <_strtol_l.constprop.0+0x1a>
 800ba78:	f7fd fd7a 	bl	8009570 <__errno>
 800ba7c:	2316      	movs	r3, #22
 800ba7e:	6003      	str	r3, [r0, #0]
 800ba80:	2000      	movs	r0, #0
 800ba82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba86:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bb6c <_strtol_l.constprop.0+0x100>
 800ba8a:	460d      	mov	r5, r1
 800ba8c:	462e      	mov	r6, r5
 800ba8e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba92:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ba96:	f017 0708 	ands.w	r7, r7, #8
 800ba9a:	d1f7      	bne.n	800ba8c <_strtol_l.constprop.0+0x20>
 800ba9c:	2c2d      	cmp	r4, #45	; 0x2d
 800ba9e:	d132      	bne.n	800bb06 <_strtol_l.constprop.0+0x9a>
 800baa0:	782c      	ldrb	r4, [r5, #0]
 800baa2:	2701      	movs	r7, #1
 800baa4:	1cb5      	adds	r5, r6, #2
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d05b      	beq.n	800bb62 <_strtol_l.constprop.0+0xf6>
 800baaa:	2b10      	cmp	r3, #16
 800baac:	d109      	bne.n	800bac2 <_strtol_l.constprop.0+0x56>
 800baae:	2c30      	cmp	r4, #48	; 0x30
 800bab0:	d107      	bne.n	800bac2 <_strtol_l.constprop.0+0x56>
 800bab2:	782c      	ldrb	r4, [r5, #0]
 800bab4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bab8:	2c58      	cmp	r4, #88	; 0x58
 800baba:	d14d      	bne.n	800bb58 <_strtol_l.constprop.0+0xec>
 800babc:	786c      	ldrb	r4, [r5, #1]
 800babe:	2310      	movs	r3, #16
 800bac0:	3502      	adds	r5, #2
 800bac2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bac6:	f108 38ff 	add.w	r8, r8, #4294967295
 800baca:	f04f 0e00 	mov.w	lr, #0
 800bace:	fbb8 f9f3 	udiv	r9, r8, r3
 800bad2:	4676      	mov	r6, lr
 800bad4:	fb03 8a19 	mls	sl, r3, r9, r8
 800bad8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800badc:	f1bc 0f09 	cmp.w	ip, #9
 800bae0:	d816      	bhi.n	800bb10 <_strtol_l.constprop.0+0xa4>
 800bae2:	4664      	mov	r4, ip
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	dd24      	ble.n	800bb32 <_strtol_l.constprop.0+0xc6>
 800bae8:	f1be 3fff 	cmp.w	lr, #4294967295
 800baec:	d008      	beq.n	800bb00 <_strtol_l.constprop.0+0x94>
 800baee:	45b1      	cmp	r9, r6
 800baf0:	d31c      	bcc.n	800bb2c <_strtol_l.constprop.0+0xc0>
 800baf2:	d101      	bne.n	800baf8 <_strtol_l.constprop.0+0x8c>
 800baf4:	45a2      	cmp	sl, r4
 800baf6:	db19      	blt.n	800bb2c <_strtol_l.constprop.0+0xc0>
 800baf8:	fb06 4603 	mla	r6, r6, r3, r4
 800bafc:	f04f 0e01 	mov.w	lr, #1
 800bb00:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb04:	e7e8      	b.n	800bad8 <_strtol_l.constprop.0+0x6c>
 800bb06:	2c2b      	cmp	r4, #43	; 0x2b
 800bb08:	bf04      	itt	eq
 800bb0a:	782c      	ldrbeq	r4, [r5, #0]
 800bb0c:	1cb5      	addeq	r5, r6, #2
 800bb0e:	e7ca      	b.n	800baa6 <_strtol_l.constprop.0+0x3a>
 800bb10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bb14:	f1bc 0f19 	cmp.w	ip, #25
 800bb18:	d801      	bhi.n	800bb1e <_strtol_l.constprop.0+0xb2>
 800bb1a:	3c37      	subs	r4, #55	; 0x37
 800bb1c:	e7e2      	b.n	800bae4 <_strtol_l.constprop.0+0x78>
 800bb1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bb22:	f1bc 0f19 	cmp.w	ip, #25
 800bb26:	d804      	bhi.n	800bb32 <_strtol_l.constprop.0+0xc6>
 800bb28:	3c57      	subs	r4, #87	; 0x57
 800bb2a:	e7db      	b.n	800bae4 <_strtol_l.constprop.0+0x78>
 800bb2c:	f04f 3eff 	mov.w	lr, #4294967295
 800bb30:	e7e6      	b.n	800bb00 <_strtol_l.constprop.0+0x94>
 800bb32:	f1be 3fff 	cmp.w	lr, #4294967295
 800bb36:	d105      	bne.n	800bb44 <_strtol_l.constprop.0+0xd8>
 800bb38:	2322      	movs	r3, #34	; 0x22
 800bb3a:	6003      	str	r3, [r0, #0]
 800bb3c:	4646      	mov	r6, r8
 800bb3e:	b942      	cbnz	r2, 800bb52 <_strtol_l.constprop.0+0xe6>
 800bb40:	4630      	mov	r0, r6
 800bb42:	e79e      	b.n	800ba82 <_strtol_l.constprop.0+0x16>
 800bb44:	b107      	cbz	r7, 800bb48 <_strtol_l.constprop.0+0xdc>
 800bb46:	4276      	negs	r6, r6
 800bb48:	2a00      	cmp	r2, #0
 800bb4a:	d0f9      	beq.n	800bb40 <_strtol_l.constprop.0+0xd4>
 800bb4c:	f1be 0f00 	cmp.w	lr, #0
 800bb50:	d000      	beq.n	800bb54 <_strtol_l.constprop.0+0xe8>
 800bb52:	1e69      	subs	r1, r5, #1
 800bb54:	6011      	str	r1, [r2, #0]
 800bb56:	e7f3      	b.n	800bb40 <_strtol_l.constprop.0+0xd4>
 800bb58:	2430      	movs	r4, #48	; 0x30
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1b1      	bne.n	800bac2 <_strtol_l.constprop.0+0x56>
 800bb5e:	2308      	movs	r3, #8
 800bb60:	e7af      	b.n	800bac2 <_strtol_l.constprop.0+0x56>
 800bb62:	2c30      	cmp	r4, #48	; 0x30
 800bb64:	d0a5      	beq.n	800bab2 <_strtol_l.constprop.0+0x46>
 800bb66:	230a      	movs	r3, #10
 800bb68:	e7ab      	b.n	800bac2 <_strtol_l.constprop.0+0x56>
 800bb6a:	bf00      	nop
 800bb6c:	0800d901 	.word	0x0800d901

0800bb70 <_strtol_r>:
 800bb70:	f7ff bf7c 	b.w	800ba6c <_strtol_l.constprop.0>

0800bb74 <__ssputs_r>:
 800bb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb78:	688e      	ldr	r6, [r1, #8]
 800bb7a:	461f      	mov	r7, r3
 800bb7c:	42be      	cmp	r6, r7
 800bb7e:	680b      	ldr	r3, [r1, #0]
 800bb80:	4682      	mov	sl, r0
 800bb82:	460c      	mov	r4, r1
 800bb84:	4690      	mov	r8, r2
 800bb86:	d82c      	bhi.n	800bbe2 <__ssputs_r+0x6e>
 800bb88:	898a      	ldrh	r2, [r1, #12]
 800bb8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb8e:	d026      	beq.n	800bbde <__ssputs_r+0x6a>
 800bb90:	6965      	ldr	r5, [r4, #20]
 800bb92:	6909      	ldr	r1, [r1, #16]
 800bb94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb98:	eba3 0901 	sub.w	r9, r3, r1
 800bb9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bba0:	1c7b      	adds	r3, r7, #1
 800bba2:	444b      	add	r3, r9
 800bba4:	106d      	asrs	r5, r5, #1
 800bba6:	429d      	cmp	r5, r3
 800bba8:	bf38      	it	cc
 800bbaa:	461d      	movcc	r5, r3
 800bbac:	0553      	lsls	r3, r2, #21
 800bbae:	d527      	bpl.n	800bc00 <__ssputs_r+0x8c>
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	f7fe fc0f 	bl	800a3d4 <_malloc_r>
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	b360      	cbz	r0, 800bc14 <__ssputs_r+0xa0>
 800bbba:	6921      	ldr	r1, [r4, #16]
 800bbbc:	464a      	mov	r2, r9
 800bbbe:	f7fd fd04 	bl	80095ca <memcpy>
 800bbc2:	89a3      	ldrh	r3, [r4, #12]
 800bbc4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbcc:	81a3      	strh	r3, [r4, #12]
 800bbce:	6126      	str	r6, [r4, #16]
 800bbd0:	6165      	str	r5, [r4, #20]
 800bbd2:	444e      	add	r6, r9
 800bbd4:	eba5 0509 	sub.w	r5, r5, r9
 800bbd8:	6026      	str	r6, [r4, #0]
 800bbda:	60a5      	str	r5, [r4, #8]
 800bbdc:	463e      	mov	r6, r7
 800bbde:	42be      	cmp	r6, r7
 800bbe0:	d900      	bls.n	800bbe4 <__ssputs_r+0x70>
 800bbe2:	463e      	mov	r6, r7
 800bbe4:	6820      	ldr	r0, [r4, #0]
 800bbe6:	4632      	mov	r2, r6
 800bbe8:	4641      	mov	r1, r8
 800bbea:	f000 fd5c 	bl	800c6a6 <memmove>
 800bbee:	68a3      	ldr	r3, [r4, #8]
 800bbf0:	1b9b      	subs	r3, r3, r6
 800bbf2:	60a3      	str	r3, [r4, #8]
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	4433      	add	r3, r6
 800bbf8:	6023      	str	r3, [r4, #0]
 800bbfa:	2000      	movs	r0, #0
 800bbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc00:	462a      	mov	r2, r5
 800bc02:	f001 f932 	bl	800ce6a <_realloc_r>
 800bc06:	4606      	mov	r6, r0
 800bc08:	2800      	cmp	r0, #0
 800bc0a:	d1e0      	bne.n	800bbce <__ssputs_r+0x5a>
 800bc0c:	6921      	ldr	r1, [r4, #16]
 800bc0e:	4650      	mov	r0, sl
 800bc10:	f7fe fb6c 	bl	800a2ec <_free_r>
 800bc14:	230c      	movs	r3, #12
 800bc16:	f8ca 3000 	str.w	r3, [sl]
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	f04f 30ff 	mov.w	r0, #4294967295
 800bc26:	e7e9      	b.n	800bbfc <__ssputs_r+0x88>

0800bc28 <_svfiprintf_r>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	4698      	mov	r8, r3
 800bc2e:	898b      	ldrh	r3, [r1, #12]
 800bc30:	061b      	lsls	r3, r3, #24
 800bc32:	b09d      	sub	sp, #116	; 0x74
 800bc34:	4607      	mov	r7, r0
 800bc36:	460d      	mov	r5, r1
 800bc38:	4614      	mov	r4, r2
 800bc3a:	d50e      	bpl.n	800bc5a <_svfiprintf_r+0x32>
 800bc3c:	690b      	ldr	r3, [r1, #16]
 800bc3e:	b963      	cbnz	r3, 800bc5a <_svfiprintf_r+0x32>
 800bc40:	2140      	movs	r1, #64	; 0x40
 800bc42:	f7fe fbc7 	bl	800a3d4 <_malloc_r>
 800bc46:	6028      	str	r0, [r5, #0]
 800bc48:	6128      	str	r0, [r5, #16]
 800bc4a:	b920      	cbnz	r0, 800bc56 <_svfiprintf_r+0x2e>
 800bc4c:	230c      	movs	r3, #12
 800bc4e:	603b      	str	r3, [r7, #0]
 800bc50:	f04f 30ff 	mov.w	r0, #4294967295
 800bc54:	e0d0      	b.n	800bdf8 <_svfiprintf_r+0x1d0>
 800bc56:	2340      	movs	r3, #64	; 0x40
 800bc58:	616b      	str	r3, [r5, #20]
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc5e:	2320      	movs	r3, #32
 800bc60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc64:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc68:	2330      	movs	r3, #48	; 0x30
 800bc6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800be10 <_svfiprintf_r+0x1e8>
 800bc6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc72:	f04f 0901 	mov.w	r9, #1
 800bc76:	4623      	mov	r3, r4
 800bc78:	469a      	mov	sl, r3
 800bc7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc7e:	b10a      	cbz	r2, 800bc84 <_svfiprintf_r+0x5c>
 800bc80:	2a25      	cmp	r2, #37	; 0x25
 800bc82:	d1f9      	bne.n	800bc78 <_svfiprintf_r+0x50>
 800bc84:	ebba 0b04 	subs.w	fp, sl, r4
 800bc88:	d00b      	beq.n	800bca2 <_svfiprintf_r+0x7a>
 800bc8a:	465b      	mov	r3, fp
 800bc8c:	4622      	mov	r2, r4
 800bc8e:	4629      	mov	r1, r5
 800bc90:	4638      	mov	r0, r7
 800bc92:	f7ff ff6f 	bl	800bb74 <__ssputs_r>
 800bc96:	3001      	adds	r0, #1
 800bc98:	f000 80a9 	beq.w	800bdee <_svfiprintf_r+0x1c6>
 800bc9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc9e:	445a      	add	r2, fp
 800bca0:	9209      	str	r2, [sp, #36]	; 0x24
 800bca2:	f89a 3000 	ldrb.w	r3, [sl]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	f000 80a1 	beq.w	800bdee <_svfiprintf_r+0x1c6>
 800bcac:	2300      	movs	r3, #0
 800bcae:	f04f 32ff 	mov.w	r2, #4294967295
 800bcb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bcb6:	f10a 0a01 	add.w	sl, sl, #1
 800bcba:	9304      	str	r3, [sp, #16]
 800bcbc:	9307      	str	r3, [sp, #28]
 800bcbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcc2:	931a      	str	r3, [sp, #104]	; 0x68
 800bcc4:	4654      	mov	r4, sl
 800bcc6:	2205      	movs	r2, #5
 800bcc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bccc:	4850      	ldr	r0, [pc, #320]	; (800be10 <_svfiprintf_r+0x1e8>)
 800bcce:	f7f4 faa7 	bl	8000220 <memchr>
 800bcd2:	9a04      	ldr	r2, [sp, #16]
 800bcd4:	b9d8      	cbnz	r0, 800bd0e <_svfiprintf_r+0xe6>
 800bcd6:	06d0      	lsls	r0, r2, #27
 800bcd8:	bf44      	itt	mi
 800bcda:	2320      	movmi	r3, #32
 800bcdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bce0:	0711      	lsls	r1, r2, #28
 800bce2:	bf44      	itt	mi
 800bce4:	232b      	movmi	r3, #43	; 0x2b
 800bce6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcea:	f89a 3000 	ldrb.w	r3, [sl]
 800bcee:	2b2a      	cmp	r3, #42	; 0x2a
 800bcf0:	d015      	beq.n	800bd1e <_svfiprintf_r+0xf6>
 800bcf2:	9a07      	ldr	r2, [sp, #28]
 800bcf4:	4654      	mov	r4, sl
 800bcf6:	2000      	movs	r0, #0
 800bcf8:	f04f 0c0a 	mov.w	ip, #10
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd02:	3b30      	subs	r3, #48	; 0x30
 800bd04:	2b09      	cmp	r3, #9
 800bd06:	d94d      	bls.n	800bda4 <_svfiprintf_r+0x17c>
 800bd08:	b1b0      	cbz	r0, 800bd38 <_svfiprintf_r+0x110>
 800bd0a:	9207      	str	r2, [sp, #28]
 800bd0c:	e014      	b.n	800bd38 <_svfiprintf_r+0x110>
 800bd0e:	eba0 0308 	sub.w	r3, r0, r8
 800bd12:	fa09 f303 	lsl.w	r3, r9, r3
 800bd16:	4313      	orrs	r3, r2
 800bd18:	9304      	str	r3, [sp, #16]
 800bd1a:	46a2      	mov	sl, r4
 800bd1c:	e7d2      	b.n	800bcc4 <_svfiprintf_r+0x9c>
 800bd1e:	9b03      	ldr	r3, [sp, #12]
 800bd20:	1d19      	adds	r1, r3, #4
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	9103      	str	r1, [sp, #12]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	bfbb      	ittet	lt
 800bd2a:	425b      	neglt	r3, r3
 800bd2c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd30:	9307      	strge	r3, [sp, #28]
 800bd32:	9307      	strlt	r3, [sp, #28]
 800bd34:	bfb8      	it	lt
 800bd36:	9204      	strlt	r2, [sp, #16]
 800bd38:	7823      	ldrb	r3, [r4, #0]
 800bd3a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd3c:	d10c      	bne.n	800bd58 <_svfiprintf_r+0x130>
 800bd3e:	7863      	ldrb	r3, [r4, #1]
 800bd40:	2b2a      	cmp	r3, #42	; 0x2a
 800bd42:	d134      	bne.n	800bdae <_svfiprintf_r+0x186>
 800bd44:	9b03      	ldr	r3, [sp, #12]
 800bd46:	1d1a      	adds	r2, r3, #4
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	9203      	str	r2, [sp, #12]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	bfb8      	it	lt
 800bd50:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd54:	3402      	adds	r4, #2
 800bd56:	9305      	str	r3, [sp, #20]
 800bd58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800be20 <_svfiprintf_r+0x1f8>
 800bd5c:	7821      	ldrb	r1, [r4, #0]
 800bd5e:	2203      	movs	r2, #3
 800bd60:	4650      	mov	r0, sl
 800bd62:	f7f4 fa5d 	bl	8000220 <memchr>
 800bd66:	b138      	cbz	r0, 800bd78 <_svfiprintf_r+0x150>
 800bd68:	9b04      	ldr	r3, [sp, #16]
 800bd6a:	eba0 000a 	sub.w	r0, r0, sl
 800bd6e:	2240      	movs	r2, #64	; 0x40
 800bd70:	4082      	lsls	r2, r0
 800bd72:	4313      	orrs	r3, r2
 800bd74:	3401      	adds	r4, #1
 800bd76:	9304      	str	r3, [sp, #16]
 800bd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd7c:	4825      	ldr	r0, [pc, #148]	; (800be14 <_svfiprintf_r+0x1ec>)
 800bd7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd82:	2206      	movs	r2, #6
 800bd84:	f7f4 fa4c 	bl	8000220 <memchr>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d038      	beq.n	800bdfe <_svfiprintf_r+0x1d6>
 800bd8c:	4b22      	ldr	r3, [pc, #136]	; (800be18 <_svfiprintf_r+0x1f0>)
 800bd8e:	bb1b      	cbnz	r3, 800bdd8 <_svfiprintf_r+0x1b0>
 800bd90:	9b03      	ldr	r3, [sp, #12]
 800bd92:	3307      	adds	r3, #7
 800bd94:	f023 0307 	bic.w	r3, r3, #7
 800bd98:	3308      	adds	r3, #8
 800bd9a:	9303      	str	r3, [sp, #12]
 800bd9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd9e:	4433      	add	r3, r6
 800bda0:	9309      	str	r3, [sp, #36]	; 0x24
 800bda2:	e768      	b.n	800bc76 <_svfiprintf_r+0x4e>
 800bda4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bda8:	460c      	mov	r4, r1
 800bdaa:	2001      	movs	r0, #1
 800bdac:	e7a6      	b.n	800bcfc <_svfiprintf_r+0xd4>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	3401      	adds	r4, #1
 800bdb2:	9305      	str	r3, [sp, #20]
 800bdb4:	4619      	mov	r1, r3
 800bdb6:	f04f 0c0a 	mov.w	ip, #10
 800bdba:	4620      	mov	r0, r4
 800bdbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdc0:	3a30      	subs	r2, #48	; 0x30
 800bdc2:	2a09      	cmp	r2, #9
 800bdc4:	d903      	bls.n	800bdce <_svfiprintf_r+0x1a6>
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d0c6      	beq.n	800bd58 <_svfiprintf_r+0x130>
 800bdca:	9105      	str	r1, [sp, #20]
 800bdcc:	e7c4      	b.n	800bd58 <_svfiprintf_r+0x130>
 800bdce:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	e7f0      	b.n	800bdba <_svfiprintf_r+0x192>
 800bdd8:	ab03      	add	r3, sp, #12
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	462a      	mov	r2, r5
 800bdde:	4b0f      	ldr	r3, [pc, #60]	; (800be1c <_svfiprintf_r+0x1f4>)
 800bde0:	a904      	add	r1, sp, #16
 800bde2:	4638      	mov	r0, r7
 800bde4:	f7fc fc3a 	bl	800865c <_printf_float>
 800bde8:	1c42      	adds	r2, r0, #1
 800bdea:	4606      	mov	r6, r0
 800bdec:	d1d6      	bne.n	800bd9c <_svfiprintf_r+0x174>
 800bdee:	89ab      	ldrh	r3, [r5, #12]
 800bdf0:	065b      	lsls	r3, r3, #25
 800bdf2:	f53f af2d 	bmi.w	800bc50 <_svfiprintf_r+0x28>
 800bdf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdf8:	b01d      	add	sp, #116	; 0x74
 800bdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdfe:	ab03      	add	r3, sp, #12
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	462a      	mov	r2, r5
 800be04:	4b05      	ldr	r3, [pc, #20]	; (800be1c <_svfiprintf_r+0x1f4>)
 800be06:	a904      	add	r1, sp, #16
 800be08:	4638      	mov	r0, r7
 800be0a:	f7fc fecb 	bl	8008ba4 <_printf_i>
 800be0e:	e7eb      	b.n	800bde8 <_svfiprintf_r+0x1c0>
 800be10:	0800da01 	.word	0x0800da01
 800be14:	0800da0b 	.word	0x0800da0b
 800be18:	0800865d 	.word	0x0800865d
 800be1c:	0800bb75 	.word	0x0800bb75
 800be20:	0800da07 	.word	0x0800da07

0800be24 <_sungetc_r>:
 800be24:	b538      	push	{r3, r4, r5, lr}
 800be26:	1c4b      	adds	r3, r1, #1
 800be28:	4614      	mov	r4, r2
 800be2a:	d103      	bne.n	800be34 <_sungetc_r+0x10>
 800be2c:	f04f 35ff 	mov.w	r5, #4294967295
 800be30:	4628      	mov	r0, r5
 800be32:	bd38      	pop	{r3, r4, r5, pc}
 800be34:	8993      	ldrh	r3, [r2, #12]
 800be36:	f023 0320 	bic.w	r3, r3, #32
 800be3a:	8193      	strh	r3, [r2, #12]
 800be3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be3e:	6852      	ldr	r2, [r2, #4]
 800be40:	b2cd      	uxtb	r5, r1
 800be42:	b18b      	cbz	r3, 800be68 <_sungetc_r+0x44>
 800be44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be46:	4293      	cmp	r3, r2
 800be48:	dd08      	ble.n	800be5c <_sungetc_r+0x38>
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	1e5a      	subs	r2, r3, #1
 800be4e:	6022      	str	r2, [r4, #0]
 800be50:	f803 5c01 	strb.w	r5, [r3, #-1]
 800be54:	6863      	ldr	r3, [r4, #4]
 800be56:	3301      	adds	r3, #1
 800be58:	6063      	str	r3, [r4, #4]
 800be5a:	e7e9      	b.n	800be30 <_sungetc_r+0xc>
 800be5c:	4621      	mov	r1, r4
 800be5e:	f000 fbe8 	bl	800c632 <__submore>
 800be62:	2800      	cmp	r0, #0
 800be64:	d0f1      	beq.n	800be4a <_sungetc_r+0x26>
 800be66:	e7e1      	b.n	800be2c <_sungetc_r+0x8>
 800be68:	6921      	ldr	r1, [r4, #16]
 800be6a:	6823      	ldr	r3, [r4, #0]
 800be6c:	b151      	cbz	r1, 800be84 <_sungetc_r+0x60>
 800be6e:	4299      	cmp	r1, r3
 800be70:	d208      	bcs.n	800be84 <_sungetc_r+0x60>
 800be72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800be76:	42a9      	cmp	r1, r5
 800be78:	d104      	bne.n	800be84 <_sungetc_r+0x60>
 800be7a:	3b01      	subs	r3, #1
 800be7c:	3201      	adds	r2, #1
 800be7e:	6023      	str	r3, [r4, #0]
 800be80:	6062      	str	r2, [r4, #4]
 800be82:	e7d5      	b.n	800be30 <_sungetc_r+0xc>
 800be84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800be88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be8c:	6363      	str	r3, [r4, #52]	; 0x34
 800be8e:	2303      	movs	r3, #3
 800be90:	63a3      	str	r3, [r4, #56]	; 0x38
 800be92:	4623      	mov	r3, r4
 800be94:	f803 5f46 	strb.w	r5, [r3, #70]!
 800be98:	6023      	str	r3, [r4, #0]
 800be9a:	2301      	movs	r3, #1
 800be9c:	e7dc      	b.n	800be58 <_sungetc_r+0x34>

0800be9e <__ssrefill_r>:
 800be9e:	b510      	push	{r4, lr}
 800bea0:	460c      	mov	r4, r1
 800bea2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bea4:	b169      	cbz	r1, 800bec2 <__ssrefill_r+0x24>
 800bea6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beaa:	4299      	cmp	r1, r3
 800beac:	d001      	beq.n	800beb2 <__ssrefill_r+0x14>
 800beae:	f7fe fa1d 	bl	800a2ec <_free_r>
 800beb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800beb4:	6063      	str	r3, [r4, #4]
 800beb6:	2000      	movs	r0, #0
 800beb8:	6360      	str	r0, [r4, #52]	; 0x34
 800beba:	b113      	cbz	r3, 800bec2 <__ssrefill_r+0x24>
 800bebc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bebe:	6023      	str	r3, [r4, #0]
 800bec0:	bd10      	pop	{r4, pc}
 800bec2:	6923      	ldr	r3, [r4, #16]
 800bec4:	6023      	str	r3, [r4, #0]
 800bec6:	2300      	movs	r3, #0
 800bec8:	6063      	str	r3, [r4, #4]
 800beca:	89a3      	ldrh	r3, [r4, #12]
 800becc:	f043 0320 	orr.w	r3, r3, #32
 800bed0:	81a3      	strh	r3, [r4, #12]
 800bed2:	f04f 30ff 	mov.w	r0, #4294967295
 800bed6:	e7f3      	b.n	800bec0 <__ssrefill_r+0x22>

0800bed8 <__ssvfiscanf_r>:
 800bed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bedc:	460c      	mov	r4, r1
 800bede:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bee2:	2100      	movs	r1, #0
 800bee4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bee8:	49a6      	ldr	r1, [pc, #664]	; (800c184 <__ssvfiscanf_r+0x2ac>)
 800beea:	91a0      	str	r1, [sp, #640]	; 0x280
 800beec:	f10d 0804 	add.w	r8, sp, #4
 800bef0:	49a5      	ldr	r1, [pc, #660]	; (800c188 <__ssvfiscanf_r+0x2b0>)
 800bef2:	4fa6      	ldr	r7, [pc, #664]	; (800c18c <__ssvfiscanf_r+0x2b4>)
 800bef4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c190 <__ssvfiscanf_r+0x2b8>
 800bef8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800befc:	4606      	mov	r6, r0
 800befe:	91a1      	str	r1, [sp, #644]	; 0x284
 800bf00:	9300      	str	r3, [sp, #0]
 800bf02:	7813      	ldrb	r3, [r2, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	f000 815a 	beq.w	800c1be <__ssvfiscanf_r+0x2e6>
 800bf0a:	5cf9      	ldrb	r1, [r7, r3]
 800bf0c:	f011 0108 	ands.w	r1, r1, #8
 800bf10:	f102 0501 	add.w	r5, r2, #1
 800bf14:	d019      	beq.n	800bf4a <__ssvfiscanf_r+0x72>
 800bf16:	6863      	ldr	r3, [r4, #4]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	dd0f      	ble.n	800bf3c <__ssvfiscanf_r+0x64>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	781a      	ldrb	r2, [r3, #0]
 800bf20:	5cba      	ldrb	r2, [r7, r2]
 800bf22:	0712      	lsls	r2, r2, #28
 800bf24:	d401      	bmi.n	800bf2a <__ssvfiscanf_r+0x52>
 800bf26:	462a      	mov	r2, r5
 800bf28:	e7eb      	b.n	800bf02 <__ssvfiscanf_r+0x2a>
 800bf2a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bf2c:	3201      	adds	r2, #1
 800bf2e:	9245      	str	r2, [sp, #276]	; 0x114
 800bf30:	6862      	ldr	r2, [r4, #4]
 800bf32:	3301      	adds	r3, #1
 800bf34:	3a01      	subs	r2, #1
 800bf36:	6062      	str	r2, [r4, #4]
 800bf38:	6023      	str	r3, [r4, #0]
 800bf3a:	e7ec      	b.n	800bf16 <__ssvfiscanf_r+0x3e>
 800bf3c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf3e:	4621      	mov	r1, r4
 800bf40:	4630      	mov	r0, r6
 800bf42:	4798      	blx	r3
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d0e9      	beq.n	800bf1c <__ssvfiscanf_r+0x44>
 800bf48:	e7ed      	b.n	800bf26 <__ssvfiscanf_r+0x4e>
 800bf4a:	2b25      	cmp	r3, #37	; 0x25
 800bf4c:	d012      	beq.n	800bf74 <__ssvfiscanf_r+0x9c>
 800bf4e:	469a      	mov	sl, r3
 800bf50:	6863      	ldr	r3, [r4, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	f340 8091 	ble.w	800c07a <__ssvfiscanf_r+0x1a2>
 800bf58:	6822      	ldr	r2, [r4, #0]
 800bf5a:	7813      	ldrb	r3, [r2, #0]
 800bf5c:	4553      	cmp	r3, sl
 800bf5e:	f040 812e 	bne.w	800c1be <__ssvfiscanf_r+0x2e6>
 800bf62:	6863      	ldr	r3, [r4, #4]
 800bf64:	3b01      	subs	r3, #1
 800bf66:	6063      	str	r3, [r4, #4]
 800bf68:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bf6a:	3201      	adds	r2, #1
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	6022      	str	r2, [r4, #0]
 800bf70:	9345      	str	r3, [sp, #276]	; 0x114
 800bf72:	e7d8      	b.n	800bf26 <__ssvfiscanf_r+0x4e>
 800bf74:	9141      	str	r1, [sp, #260]	; 0x104
 800bf76:	9143      	str	r1, [sp, #268]	; 0x10c
 800bf78:	7853      	ldrb	r3, [r2, #1]
 800bf7a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf7c:	bf02      	ittt	eq
 800bf7e:	2310      	moveq	r3, #16
 800bf80:	1c95      	addeq	r5, r2, #2
 800bf82:	9341      	streq	r3, [sp, #260]	; 0x104
 800bf84:	220a      	movs	r2, #10
 800bf86:	46aa      	mov	sl, r5
 800bf88:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bf8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bf90:	2b09      	cmp	r3, #9
 800bf92:	d91c      	bls.n	800bfce <__ssvfiscanf_r+0xf6>
 800bf94:	487e      	ldr	r0, [pc, #504]	; (800c190 <__ssvfiscanf_r+0x2b8>)
 800bf96:	2203      	movs	r2, #3
 800bf98:	f7f4 f942 	bl	8000220 <memchr>
 800bf9c:	b138      	cbz	r0, 800bfae <__ssvfiscanf_r+0xd6>
 800bf9e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bfa0:	eba0 0009 	sub.w	r0, r0, r9
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	4083      	lsls	r3, r0
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	9341      	str	r3, [sp, #260]	; 0x104
 800bfac:	4655      	mov	r5, sl
 800bfae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bfb2:	2b78      	cmp	r3, #120	; 0x78
 800bfb4:	d806      	bhi.n	800bfc4 <__ssvfiscanf_r+0xec>
 800bfb6:	2b57      	cmp	r3, #87	; 0x57
 800bfb8:	d810      	bhi.n	800bfdc <__ssvfiscanf_r+0x104>
 800bfba:	2b25      	cmp	r3, #37	; 0x25
 800bfbc:	d0c7      	beq.n	800bf4e <__ssvfiscanf_r+0x76>
 800bfbe:	d857      	bhi.n	800c070 <__ssvfiscanf_r+0x198>
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d065      	beq.n	800c090 <__ssvfiscanf_r+0x1b8>
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	9347      	str	r3, [sp, #284]	; 0x11c
 800bfc8:	230a      	movs	r3, #10
 800bfca:	9342      	str	r3, [sp, #264]	; 0x108
 800bfcc:	e076      	b.n	800c0bc <__ssvfiscanf_r+0x1e4>
 800bfce:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bfd0:	fb02 1103 	mla	r1, r2, r3, r1
 800bfd4:	3930      	subs	r1, #48	; 0x30
 800bfd6:	9143      	str	r1, [sp, #268]	; 0x10c
 800bfd8:	4655      	mov	r5, sl
 800bfda:	e7d4      	b.n	800bf86 <__ssvfiscanf_r+0xae>
 800bfdc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bfe0:	2a20      	cmp	r2, #32
 800bfe2:	d8ef      	bhi.n	800bfc4 <__ssvfiscanf_r+0xec>
 800bfe4:	a101      	add	r1, pc, #4	; (adr r1, 800bfec <__ssvfiscanf_r+0x114>)
 800bfe6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bfea:	bf00      	nop
 800bfec:	0800c09f 	.word	0x0800c09f
 800bff0:	0800bfc5 	.word	0x0800bfc5
 800bff4:	0800bfc5 	.word	0x0800bfc5
 800bff8:	0800c0fd 	.word	0x0800c0fd
 800bffc:	0800bfc5 	.word	0x0800bfc5
 800c000:	0800bfc5 	.word	0x0800bfc5
 800c004:	0800bfc5 	.word	0x0800bfc5
 800c008:	0800bfc5 	.word	0x0800bfc5
 800c00c:	0800bfc5 	.word	0x0800bfc5
 800c010:	0800bfc5 	.word	0x0800bfc5
 800c014:	0800bfc5 	.word	0x0800bfc5
 800c018:	0800c113 	.word	0x0800c113
 800c01c:	0800c0f9 	.word	0x0800c0f9
 800c020:	0800c077 	.word	0x0800c077
 800c024:	0800c077 	.word	0x0800c077
 800c028:	0800c077 	.word	0x0800c077
 800c02c:	0800bfc5 	.word	0x0800bfc5
 800c030:	0800c0b5 	.word	0x0800c0b5
 800c034:	0800bfc5 	.word	0x0800bfc5
 800c038:	0800bfc5 	.word	0x0800bfc5
 800c03c:	0800bfc5 	.word	0x0800bfc5
 800c040:	0800bfc5 	.word	0x0800bfc5
 800c044:	0800c123 	.word	0x0800c123
 800c048:	0800c0f1 	.word	0x0800c0f1
 800c04c:	0800c097 	.word	0x0800c097
 800c050:	0800bfc5 	.word	0x0800bfc5
 800c054:	0800bfc5 	.word	0x0800bfc5
 800c058:	0800c11f 	.word	0x0800c11f
 800c05c:	0800bfc5 	.word	0x0800bfc5
 800c060:	0800c0f9 	.word	0x0800c0f9
 800c064:	0800bfc5 	.word	0x0800bfc5
 800c068:	0800bfc5 	.word	0x0800bfc5
 800c06c:	0800c09f 	.word	0x0800c09f
 800c070:	3b45      	subs	r3, #69	; 0x45
 800c072:	2b02      	cmp	r3, #2
 800c074:	d8a6      	bhi.n	800bfc4 <__ssvfiscanf_r+0xec>
 800c076:	2305      	movs	r3, #5
 800c078:	e01f      	b.n	800c0ba <__ssvfiscanf_r+0x1e2>
 800c07a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c07c:	4621      	mov	r1, r4
 800c07e:	4630      	mov	r0, r6
 800c080:	4798      	blx	r3
 800c082:	2800      	cmp	r0, #0
 800c084:	f43f af68 	beq.w	800bf58 <__ssvfiscanf_r+0x80>
 800c088:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c08a:	2800      	cmp	r0, #0
 800c08c:	f040 808d 	bne.w	800c1aa <__ssvfiscanf_r+0x2d2>
 800c090:	f04f 30ff 	mov.w	r0, #4294967295
 800c094:	e08f      	b.n	800c1b6 <__ssvfiscanf_r+0x2de>
 800c096:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c098:	f042 0220 	orr.w	r2, r2, #32
 800c09c:	9241      	str	r2, [sp, #260]	; 0x104
 800c09e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c0a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c0a4:	9241      	str	r2, [sp, #260]	; 0x104
 800c0a6:	2210      	movs	r2, #16
 800c0a8:	2b6f      	cmp	r3, #111	; 0x6f
 800c0aa:	9242      	str	r2, [sp, #264]	; 0x108
 800c0ac:	bf34      	ite	cc
 800c0ae:	2303      	movcc	r3, #3
 800c0b0:	2304      	movcs	r3, #4
 800c0b2:	e002      	b.n	800c0ba <__ssvfiscanf_r+0x1e2>
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	9342      	str	r3, [sp, #264]	; 0x108
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	9347      	str	r3, [sp, #284]	; 0x11c
 800c0bc:	6863      	ldr	r3, [r4, #4]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	dd3d      	ble.n	800c13e <__ssvfiscanf_r+0x266>
 800c0c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c0c4:	0659      	lsls	r1, r3, #25
 800c0c6:	d404      	bmi.n	800c0d2 <__ssvfiscanf_r+0x1fa>
 800c0c8:	6823      	ldr	r3, [r4, #0]
 800c0ca:	781a      	ldrb	r2, [r3, #0]
 800c0cc:	5cba      	ldrb	r2, [r7, r2]
 800c0ce:	0712      	lsls	r2, r2, #28
 800c0d0:	d43c      	bmi.n	800c14c <__ssvfiscanf_r+0x274>
 800c0d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c0d4:	2b02      	cmp	r3, #2
 800c0d6:	dc4b      	bgt.n	800c170 <__ssvfiscanf_r+0x298>
 800c0d8:	466b      	mov	r3, sp
 800c0da:	4622      	mov	r2, r4
 800c0dc:	a941      	add	r1, sp, #260	; 0x104
 800c0de:	4630      	mov	r0, r6
 800c0e0:	f000 f872 	bl	800c1c8 <_scanf_chars>
 800c0e4:	2801      	cmp	r0, #1
 800c0e6:	d06a      	beq.n	800c1be <__ssvfiscanf_r+0x2e6>
 800c0e8:	2802      	cmp	r0, #2
 800c0ea:	f47f af1c 	bne.w	800bf26 <__ssvfiscanf_r+0x4e>
 800c0ee:	e7cb      	b.n	800c088 <__ssvfiscanf_r+0x1b0>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	9342      	str	r3, [sp, #264]	; 0x108
 800c0f4:	2304      	movs	r3, #4
 800c0f6:	e7e0      	b.n	800c0ba <__ssvfiscanf_r+0x1e2>
 800c0f8:	220a      	movs	r2, #10
 800c0fa:	e7d5      	b.n	800c0a8 <__ssvfiscanf_r+0x1d0>
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	4640      	mov	r0, r8
 800c100:	f000 fa5e 	bl	800c5c0 <__sccl>
 800c104:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c10a:	9341      	str	r3, [sp, #260]	; 0x104
 800c10c:	4605      	mov	r5, r0
 800c10e:	2301      	movs	r3, #1
 800c110:	e7d3      	b.n	800c0ba <__ssvfiscanf_r+0x1e2>
 800c112:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c118:	9341      	str	r3, [sp, #260]	; 0x104
 800c11a:	2300      	movs	r3, #0
 800c11c:	e7cd      	b.n	800c0ba <__ssvfiscanf_r+0x1e2>
 800c11e:	2302      	movs	r3, #2
 800c120:	e7cb      	b.n	800c0ba <__ssvfiscanf_r+0x1e2>
 800c122:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c124:	06c3      	lsls	r3, r0, #27
 800c126:	f53f aefe 	bmi.w	800bf26 <__ssvfiscanf_r+0x4e>
 800c12a:	9b00      	ldr	r3, [sp, #0]
 800c12c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c12e:	1d19      	adds	r1, r3, #4
 800c130:	9100      	str	r1, [sp, #0]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	07c0      	lsls	r0, r0, #31
 800c136:	bf4c      	ite	mi
 800c138:	801a      	strhmi	r2, [r3, #0]
 800c13a:	601a      	strpl	r2, [r3, #0]
 800c13c:	e6f3      	b.n	800bf26 <__ssvfiscanf_r+0x4e>
 800c13e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c140:	4621      	mov	r1, r4
 800c142:	4630      	mov	r0, r6
 800c144:	4798      	blx	r3
 800c146:	2800      	cmp	r0, #0
 800c148:	d0bb      	beq.n	800c0c2 <__ssvfiscanf_r+0x1ea>
 800c14a:	e79d      	b.n	800c088 <__ssvfiscanf_r+0x1b0>
 800c14c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c14e:	3201      	adds	r2, #1
 800c150:	9245      	str	r2, [sp, #276]	; 0x114
 800c152:	6862      	ldr	r2, [r4, #4]
 800c154:	3a01      	subs	r2, #1
 800c156:	2a00      	cmp	r2, #0
 800c158:	6062      	str	r2, [r4, #4]
 800c15a:	dd02      	ble.n	800c162 <__ssvfiscanf_r+0x28a>
 800c15c:	3301      	adds	r3, #1
 800c15e:	6023      	str	r3, [r4, #0]
 800c160:	e7b2      	b.n	800c0c8 <__ssvfiscanf_r+0x1f0>
 800c162:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c164:	4621      	mov	r1, r4
 800c166:	4630      	mov	r0, r6
 800c168:	4798      	blx	r3
 800c16a:	2800      	cmp	r0, #0
 800c16c:	d0ac      	beq.n	800c0c8 <__ssvfiscanf_r+0x1f0>
 800c16e:	e78b      	b.n	800c088 <__ssvfiscanf_r+0x1b0>
 800c170:	2b04      	cmp	r3, #4
 800c172:	dc0f      	bgt.n	800c194 <__ssvfiscanf_r+0x2bc>
 800c174:	466b      	mov	r3, sp
 800c176:	4622      	mov	r2, r4
 800c178:	a941      	add	r1, sp, #260	; 0x104
 800c17a:	4630      	mov	r0, r6
 800c17c:	f000 f87e 	bl	800c27c <_scanf_i>
 800c180:	e7b0      	b.n	800c0e4 <__ssvfiscanf_r+0x20c>
 800c182:	bf00      	nop
 800c184:	0800be25 	.word	0x0800be25
 800c188:	0800be9f 	.word	0x0800be9f
 800c18c:	0800d901 	.word	0x0800d901
 800c190:	0800da07 	.word	0x0800da07
 800c194:	4b0b      	ldr	r3, [pc, #44]	; (800c1c4 <__ssvfiscanf_r+0x2ec>)
 800c196:	2b00      	cmp	r3, #0
 800c198:	f43f aec5 	beq.w	800bf26 <__ssvfiscanf_r+0x4e>
 800c19c:	466b      	mov	r3, sp
 800c19e:	4622      	mov	r2, r4
 800c1a0:	a941      	add	r1, sp, #260	; 0x104
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	f7fc fe20 	bl	8008de8 <_scanf_float>
 800c1a8:	e79c      	b.n	800c0e4 <__ssvfiscanf_r+0x20c>
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c1b0:	bf18      	it	ne
 800c1b2:	f04f 30ff 	movne.w	r0, #4294967295
 800c1b6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c1ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1be:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c1c0:	e7f9      	b.n	800c1b6 <__ssvfiscanf_r+0x2de>
 800c1c2:	bf00      	nop
 800c1c4:	08008de9 	.word	0x08008de9

0800c1c8 <_scanf_chars>:
 800c1c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1cc:	4615      	mov	r5, r2
 800c1ce:	688a      	ldr	r2, [r1, #8]
 800c1d0:	4680      	mov	r8, r0
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	b932      	cbnz	r2, 800c1e4 <_scanf_chars+0x1c>
 800c1d6:	698a      	ldr	r2, [r1, #24]
 800c1d8:	2a00      	cmp	r2, #0
 800c1da:	bf0c      	ite	eq
 800c1dc:	2201      	moveq	r2, #1
 800c1de:	f04f 32ff 	movne.w	r2, #4294967295
 800c1e2:	608a      	str	r2, [r1, #8]
 800c1e4:	6822      	ldr	r2, [r4, #0]
 800c1e6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c278 <_scanf_chars+0xb0>
 800c1ea:	06d1      	lsls	r1, r2, #27
 800c1ec:	bf5f      	itttt	pl
 800c1ee:	681a      	ldrpl	r2, [r3, #0]
 800c1f0:	1d11      	addpl	r1, r2, #4
 800c1f2:	6019      	strpl	r1, [r3, #0]
 800c1f4:	6816      	ldrpl	r6, [r2, #0]
 800c1f6:	2700      	movs	r7, #0
 800c1f8:	69a0      	ldr	r0, [r4, #24]
 800c1fa:	b188      	cbz	r0, 800c220 <_scanf_chars+0x58>
 800c1fc:	2801      	cmp	r0, #1
 800c1fe:	d107      	bne.n	800c210 <_scanf_chars+0x48>
 800c200:	682a      	ldr	r2, [r5, #0]
 800c202:	7811      	ldrb	r1, [r2, #0]
 800c204:	6962      	ldr	r2, [r4, #20]
 800c206:	5c52      	ldrb	r2, [r2, r1]
 800c208:	b952      	cbnz	r2, 800c220 <_scanf_chars+0x58>
 800c20a:	2f00      	cmp	r7, #0
 800c20c:	d031      	beq.n	800c272 <_scanf_chars+0xaa>
 800c20e:	e022      	b.n	800c256 <_scanf_chars+0x8e>
 800c210:	2802      	cmp	r0, #2
 800c212:	d120      	bne.n	800c256 <_scanf_chars+0x8e>
 800c214:	682b      	ldr	r3, [r5, #0]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c21c:	071b      	lsls	r3, r3, #28
 800c21e:	d41a      	bmi.n	800c256 <_scanf_chars+0x8e>
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	06da      	lsls	r2, r3, #27
 800c224:	bf5e      	ittt	pl
 800c226:	682b      	ldrpl	r3, [r5, #0]
 800c228:	781b      	ldrbpl	r3, [r3, #0]
 800c22a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c22e:	682a      	ldr	r2, [r5, #0]
 800c230:	686b      	ldr	r3, [r5, #4]
 800c232:	3201      	adds	r2, #1
 800c234:	602a      	str	r2, [r5, #0]
 800c236:	68a2      	ldr	r2, [r4, #8]
 800c238:	3b01      	subs	r3, #1
 800c23a:	3a01      	subs	r2, #1
 800c23c:	606b      	str	r3, [r5, #4]
 800c23e:	3701      	adds	r7, #1
 800c240:	60a2      	str	r2, [r4, #8]
 800c242:	b142      	cbz	r2, 800c256 <_scanf_chars+0x8e>
 800c244:	2b00      	cmp	r3, #0
 800c246:	dcd7      	bgt.n	800c1f8 <_scanf_chars+0x30>
 800c248:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c24c:	4629      	mov	r1, r5
 800c24e:	4640      	mov	r0, r8
 800c250:	4798      	blx	r3
 800c252:	2800      	cmp	r0, #0
 800c254:	d0d0      	beq.n	800c1f8 <_scanf_chars+0x30>
 800c256:	6823      	ldr	r3, [r4, #0]
 800c258:	f013 0310 	ands.w	r3, r3, #16
 800c25c:	d105      	bne.n	800c26a <_scanf_chars+0xa2>
 800c25e:	68e2      	ldr	r2, [r4, #12]
 800c260:	3201      	adds	r2, #1
 800c262:	60e2      	str	r2, [r4, #12]
 800c264:	69a2      	ldr	r2, [r4, #24]
 800c266:	b102      	cbz	r2, 800c26a <_scanf_chars+0xa2>
 800c268:	7033      	strb	r3, [r6, #0]
 800c26a:	6923      	ldr	r3, [r4, #16]
 800c26c:	443b      	add	r3, r7
 800c26e:	6123      	str	r3, [r4, #16]
 800c270:	2000      	movs	r0, #0
 800c272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c276:	bf00      	nop
 800c278:	0800d901 	.word	0x0800d901

0800c27c <_scanf_i>:
 800c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	4698      	mov	r8, r3
 800c282:	4b74      	ldr	r3, [pc, #464]	; (800c454 <_scanf_i+0x1d8>)
 800c284:	460c      	mov	r4, r1
 800c286:	4682      	mov	sl, r0
 800c288:	4616      	mov	r6, r2
 800c28a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c28e:	b087      	sub	sp, #28
 800c290:	ab03      	add	r3, sp, #12
 800c292:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c296:	4b70      	ldr	r3, [pc, #448]	; (800c458 <_scanf_i+0x1dc>)
 800c298:	69a1      	ldr	r1, [r4, #24]
 800c29a:	4a70      	ldr	r2, [pc, #448]	; (800c45c <_scanf_i+0x1e0>)
 800c29c:	2903      	cmp	r1, #3
 800c29e:	bf18      	it	ne
 800c2a0:	461a      	movne	r2, r3
 800c2a2:	68a3      	ldr	r3, [r4, #8]
 800c2a4:	9201      	str	r2, [sp, #4]
 800c2a6:	1e5a      	subs	r2, r3, #1
 800c2a8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c2ac:	bf88      	it	hi
 800c2ae:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c2b2:	4627      	mov	r7, r4
 800c2b4:	bf82      	ittt	hi
 800c2b6:	eb03 0905 	addhi.w	r9, r3, r5
 800c2ba:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c2be:	60a3      	strhi	r3, [r4, #8]
 800c2c0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c2c4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c2c8:	bf98      	it	ls
 800c2ca:	f04f 0900 	movls.w	r9, #0
 800c2ce:	6023      	str	r3, [r4, #0]
 800c2d0:	463d      	mov	r5, r7
 800c2d2:	f04f 0b00 	mov.w	fp, #0
 800c2d6:	6831      	ldr	r1, [r6, #0]
 800c2d8:	ab03      	add	r3, sp, #12
 800c2da:	7809      	ldrb	r1, [r1, #0]
 800c2dc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	f7f3 ff9d 	bl	8000220 <memchr>
 800c2e6:	b328      	cbz	r0, 800c334 <_scanf_i+0xb8>
 800c2e8:	f1bb 0f01 	cmp.w	fp, #1
 800c2ec:	d159      	bne.n	800c3a2 <_scanf_i+0x126>
 800c2ee:	6862      	ldr	r2, [r4, #4]
 800c2f0:	b92a      	cbnz	r2, 800c2fe <_scanf_i+0x82>
 800c2f2:	6822      	ldr	r2, [r4, #0]
 800c2f4:	2308      	movs	r3, #8
 800c2f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2fa:	6063      	str	r3, [r4, #4]
 800c2fc:	6022      	str	r2, [r4, #0]
 800c2fe:	6822      	ldr	r2, [r4, #0]
 800c300:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c304:	6022      	str	r2, [r4, #0]
 800c306:	68a2      	ldr	r2, [r4, #8]
 800c308:	1e51      	subs	r1, r2, #1
 800c30a:	60a1      	str	r1, [r4, #8]
 800c30c:	b192      	cbz	r2, 800c334 <_scanf_i+0xb8>
 800c30e:	6832      	ldr	r2, [r6, #0]
 800c310:	1c51      	adds	r1, r2, #1
 800c312:	6031      	str	r1, [r6, #0]
 800c314:	7812      	ldrb	r2, [r2, #0]
 800c316:	f805 2b01 	strb.w	r2, [r5], #1
 800c31a:	6872      	ldr	r2, [r6, #4]
 800c31c:	3a01      	subs	r2, #1
 800c31e:	2a00      	cmp	r2, #0
 800c320:	6072      	str	r2, [r6, #4]
 800c322:	dc07      	bgt.n	800c334 <_scanf_i+0xb8>
 800c324:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c328:	4631      	mov	r1, r6
 800c32a:	4650      	mov	r0, sl
 800c32c:	4790      	blx	r2
 800c32e:	2800      	cmp	r0, #0
 800c330:	f040 8085 	bne.w	800c43e <_scanf_i+0x1c2>
 800c334:	f10b 0b01 	add.w	fp, fp, #1
 800c338:	f1bb 0f03 	cmp.w	fp, #3
 800c33c:	d1cb      	bne.n	800c2d6 <_scanf_i+0x5a>
 800c33e:	6863      	ldr	r3, [r4, #4]
 800c340:	b90b      	cbnz	r3, 800c346 <_scanf_i+0xca>
 800c342:	230a      	movs	r3, #10
 800c344:	6063      	str	r3, [r4, #4]
 800c346:	6863      	ldr	r3, [r4, #4]
 800c348:	4945      	ldr	r1, [pc, #276]	; (800c460 <_scanf_i+0x1e4>)
 800c34a:	6960      	ldr	r0, [r4, #20]
 800c34c:	1ac9      	subs	r1, r1, r3
 800c34e:	f000 f937 	bl	800c5c0 <__sccl>
 800c352:	f04f 0b00 	mov.w	fp, #0
 800c356:	68a3      	ldr	r3, [r4, #8]
 800c358:	6822      	ldr	r2, [r4, #0]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d03d      	beq.n	800c3da <_scanf_i+0x15e>
 800c35e:	6831      	ldr	r1, [r6, #0]
 800c360:	6960      	ldr	r0, [r4, #20]
 800c362:	f891 c000 	ldrb.w	ip, [r1]
 800c366:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d035      	beq.n	800c3da <_scanf_i+0x15e>
 800c36e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c372:	d124      	bne.n	800c3be <_scanf_i+0x142>
 800c374:	0510      	lsls	r0, r2, #20
 800c376:	d522      	bpl.n	800c3be <_scanf_i+0x142>
 800c378:	f10b 0b01 	add.w	fp, fp, #1
 800c37c:	f1b9 0f00 	cmp.w	r9, #0
 800c380:	d003      	beq.n	800c38a <_scanf_i+0x10e>
 800c382:	3301      	adds	r3, #1
 800c384:	f109 39ff 	add.w	r9, r9, #4294967295
 800c388:	60a3      	str	r3, [r4, #8]
 800c38a:	6873      	ldr	r3, [r6, #4]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	6073      	str	r3, [r6, #4]
 800c392:	dd1b      	ble.n	800c3cc <_scanf_i+0x150>
 800c394:	6833      	ldr	r3, [r6, #0]
 800c396:	3301      	adds	r3, #1
 800c398:	6033      	str	r3, [r6, #0]
 800c39a:	68a3      	ldr	r3, [r4, #8]
 800c39c:	3b01      	subs	r3, #1
 800c39e:	60a3      	str	r3, [r4, #8]
 800c3a0:	e7d9      	b.n	800c356 <_scanf_i+0xda>
 800c3a2:	f1bb 0f02 	cmp.w	fp, #2
 800c3a6:	d1ae      	bne.n	800c306 <_scanf_i+0x8a>
 800c3a8:	6822      	ldr	r2, [r4, #0]
 800c3aa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c3ae:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c3b2:	d1bf      	bne.n	800c334 <_scanf_i+0xb8>
 800c3b4:	2310      	movs	r3, #16
 800c3b6:	6063      	str	r3, [r4, #4]
 800c3b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3bc:	e7a2      	b.n	800c304 <_scanf_i+0x88>
 800c3be:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c3c2:	6022      	str	r2, [r4, #0]
 800c3c4:	780b      	ldrb	r3, [r1, #0]
 800c3c6:	f805 3b01 	strb.w	r3, [r5], #1
 800c3ca:	e7de      	b.n	800c38a <_scanf_i+0x10e>
 800c3cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c3d0:	4631      	mov	r1, r6
 800c3d2:	4650      	mov	r0, sl
 800c3d4:	4798      	blx	r3
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d0df      	beq.n	800c39a <_scanf_i+0x11e>
 800c3da:	6823      	ldr	r3, [r4, #0]
 800c3dc:	05d9      	lsls	r1, r3, #23
 800c3de:	d50d      	bpl.n	800c3fc <_scanf_i+0x180>
 800c3e0:	42bd      	cmp	r5, r7
 800c3e2:	d909      	bls.n	800c3f8 <_scanf_i+0x17c>
 800c3e4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c3e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3ec:	4632      	mov	r2, r6
 800c3ee:	4650      	mov	r0, sl
 800c3f0:	4798      	blx	r3
 800c3f2:	f105 39ff 	add.w	r9, r5, #4294967295
 800c3f6:	464d      	mov	r5, r9
 800c3f8:	42bd      	cmp	r5, r7
 800c3fa:	d028      	beq.n	800c44e <_scanf_i+0x1d2>
 800c3fc:	6822      	ldr	r2, [r4, #0]
 800c3fe:	f012 0210 	ands.w	r2, r2, #16
 800c402:	d113      	bne.n	800c42c <_scanf_i+0x1b0>
 800c404:	702a      	strb	r2, [r5, #0]
 800c406:	6863      	ldr	r3, [r4, #4]
 800c408:	9e01      	ldr	r6, [sp, #4]
 800c40a:	4639      	mov	r1, r7
 800c40c:	4650      	mov	r0, sl
 800c40e:	47b0      	blx	r6
 800c410:	f8d8 3000 	ldr.w	r3, [r8]
 800c414:	6821      	ldr	r1, [r4, #0]
 800c416:	1d1a      	adds	r2, r3, #4
 800c418:	f8c8 2000 	str.w	r2, [r8]
 800c41c:	f011 0f20 	tst.w	r1, #32
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	d00f      	beq.n	800c444 <_scanf_i+0x1c8>
 800c424:	6018      	str	r0, [r3, #0]
 800c426:	68e3      	ldr	r3, [r4, #12]
 800c428:	3301      	adds	r3, #1
 800c42a:	60e3      	str	r3, [r4, #12]
 800c42c:	6923      	ldr	r3, [r4, #16]
 800c42e:	1bed      	subs	r5, r5, r7
 800c430:	445d      	add	r5, fp
 800c432:	442b      	add	r3, r5
 800c434:	6123      	str	r3, [r4, #16]
 800c436:	2000      	movs	r0, #0
 800c438:	b007      	add	sp, #28
 800c43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c43e:	f04f 0b00 	mov.w	fp, #0
 800c442:	e7ca      	b.n	800c3da <_scanf_i+0x15e>
 800c444:	07ca      	lsls	r2, r1, #31
 800c446:	bf4c      	ite	mi
 800c448:	8018      	strhmi	r0, [r3, #0]
 800c44a:	6018      	strpl	r0, [r3, #0]
 800c44c:	e7eb      	b.n	800c426 <_scanf_i+0x1aa>
 800c44e:	2001      	movs	r0, #1
 800c450:	e7f2      	b.n	800c438 <_scanf_i+0x1bc>
 800c452:	bf00      	nop
 800c454:	0800d640 	.word	0x0800d640
 800c458:	0800cfad 	.word	0x0800cfad
 800c45c:	0800bb71 	.word	0x0800bb71
 800c460:	0800da22 	.word	0x0800da22

0800c464 <__sflush_r>:
 800c464:	898a      	ldrh	r2, [r1, #12]
 800c466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c46a:	4605      	mov	r5, r0
 800c46c:	0710      	lsls	r0, r2, #28
 800c46e:	460c      	mov	r4, r1
 800c470:	d458      	bmi.n	800c524 <__sflush_r+0xc0>
 800c472:	684b      	ldr	r3, [r1, #4]
 800c474:	2b00      	cmp	r3, #0
 800c476:	dc05      	bgt.n	800c484 <__sflush_r+0x20>
 800c478:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	dc02      	bgt.n	800c484 <__sflush_r+0x20>
 800c47e:	2000      	movs	r0, #0
 800c480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c484:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c486:	2e00      	cmp	r6, #0
 800c488:	d0f9      	beq.n	800c47e <__sflush_r+0x1a>
 800c48a:	2300      	movs	r3, #0
 800c48c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c490:	682f      	ldr	r7, [r5, #0]
 800c492:	6a21      	ldr	r1, [r4, #32]
 800c494:	602b      	str	r3, [r5, #0]
 800c496:	d032      	beq.n	800c4fe <__sflush_r+0x9a>
 800c498:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	075a      	lsls	r2, r3, #29
 800c49e:	d505      	bpl.n	800c4ac <__sflush_r+0x48>
 800c4a0:	6863      	ldr	r3, [r4, #4]
 800c4a2:	1ac0      	subs	r0, r0, r3
 800c4a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c4a6:	b10b      	cbz	r3, 800c4ac <__sflush_r+0x48>
 800c4a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c4aa:	1ac0      	subs	r0, r0, r3
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4b2:	6a21      	ldr	r1, [r4, #32]
 800c4b4:	4628      	mov	r0, r5
 800c4b6:	47b0      	blx	r6
 800c4b8:	1c43      	adds	r3, r0, #1
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	d106      	bne.n	800c4cc <__sflush_r+0x68>
 800c4be:	6829      	ldr	r1, [r5, #0]
 800c4c0:	291d      	cmp	r1, #29
 800c4c2:	d82b      	bhi.n	800c51c <__sflush_r+0xb8>
 800c4c4:	4a29      	ldr	r2, [pc, #164]	; (800c56c <__sflush_r+0x108>)
 800c4c6:	410a      	asrs	r2, r1
 800c4c8:	07d6      	lsls	r6, r2, #31
 800c4ca:	d427      	bmi.n	800c51c <__sflush_r+0xb8>
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	6062      	str	r2, [r4, #4]
 800c4d0:	04d9      	lsls	r1, r3, #19
 800c4d2:	6922      	ldr	r2, [r4, #16]
 800c4d4:	6022      	str	r2, [r4, #0]
 800c4d6:	d504      	bpl.n	800c4e2 <__sflush_r+0x7e>
 800c4d8:	1c42      	adds	r2, r0, #1
 800c4da:	d101      	bne.n	800c4e0 <__sflush_r+0x7c>
 800c4dc:	682b      	ldr	r3, [r5, #0]
 800c4de:	b903      	cbnz	r3, 800c4e2 <__sflush_r+0x7e>
 800c4e0:	6560      	str	r0, [r4, #84]	; 0x54
 800c4e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4e4:	602f      	str	r7, [r5, #0]
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	d0c9      	beq.n	800c47e <__sflush_r+0x1a>
 800c4ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4ee:	4299      	cmp	r1, r3
 800c4f0:	d002      	beq.n	800c4f8 <__sflush_r+0x94>
 800c4f2:	4628      	mov	r0, r5
 800c4f4:	f7fd fefa 	bl	800a2ec <_free_r>
 800c4f8:	2000      	movs	r0, #0
 800c4fa:	6360      	str	r0, [r4, #52]	; 0x34
 800c4fc:	e7c0      	b.n	800c480 <__sflush_r+0x1c>
 800c4fe:	2301      	movs	r3, #1
 800c500:	4628      	mov	r0, r5
 800c502:	47b0      	blx	r6
 800c504:	1c41      	adds	r1, r0, #1
 800c506:	d1c8      	bne.n	800c49a <__sflush_r+0x36>
 800c508:	682b      	ldr	r3, [r5, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d0c5      	beq.n	800c49a <__sflush_r+0x36>
 800c50e:	2b1d      	cmp	r3, #29
 800c510:	d001      	beq.n	800c516 <__sflush_r+0xb2>
 800c512:	2b16      	cmp	r3, #22
 800c514:	d101      	bne.n	800c51a <__sflush_r+0xb6>
 800c516:	602f      	str	r7, [r5, #0]
 800c518:	e7b1      	b.n	800c47e <__sflush_r+0x1a>
 800c51a:	89a3      	ldrh	r3, [r4, #12]
 800c51c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c520:	81a3      	strh	r3, [r4, #12]
 800c522:	e7ad      	b.n	800c480 <__sflush_r+0x1c>
 800c524:	690f      	ldr	r7, [r1, #16]
 800c526:	2f00      	cmp	r7, #0
 800c528:	d0a9      	beq.n	800c47e <__sflush_r+0x1a>
 800c52a:	0793      	lsls	r3, r2, #30
 800c52c:	680e      	ldr	r6, [r1, #0]
 800c52e:	bf08      	it	eq
 800c530:	694b      	ldreq	r3, [r1, #20]
 800c532:	600f      	str	r7, [r1, #0]
 800c534:	bf18      	it	ne
 800c536:	2300      	movne	r3, #0
 800c538:	eba6 0807 	sub.w	r8, r6, r7
 800c53c:	608b      	str	r3, [r1, #8]
 800c53e:	f1b8 0f00 	cmp.w	r8, #0
 800c542:	dd9c      	ble.n	800c47e <__sflush_r+0x1a>
 800c544:	6a21      	ldr	r1, [r4, #32]
 800c546:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c548:	4643      	mov	r3, r8
 800c54a:	463a      	mov	r2, r7
 800c54c:	4628      	mov	r0, r5
 800c54e:	47b0      	blx	r6
 800c550:	2800      	cmp	r0, #0
 800c552:	dc06      	bgt.n	800c562 <__sflush_r+0xfe>
 800c554:	89a3      	ldrh	r3, [r4, #12]
 800c556:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c55a:	81a3      	strh	r3, [r4, #12]
 800c55c:	f04f 30ff 	mov.w	r0, #4294967295
 800c560:	e78e      	b.n	800c480 <__sflush_r+0x1c>
 800c562:	4407      	add	r7, r0
 800c564:	eba8 0800 	sub.w	r8, r8, r0
 800c568:	e7e9      	b.n	800c53e <__sflush_r+0xda>
 800c56a:	bf00      	nop
 800c56c:	dfbffffe 	.word	0xdfbffffe

0800c570 <_fflush_r>:
 800c570:	b538      	push	{r3, r4, r5, lr}
 800c572:	690b      	ldr	r3, [r1, #16]
 800c574:	4605      	mov	r5, r0
 800c576:	460c      	mov	r4, r1
 800c578:	b913      	cbnz	r3, 800c580 <_fflush_r+0x10>
 800c57a:	2500      	movs	r5, #0
 800c57c:	4628      	mov	r0, r5
 800c57e:	bd38      	pop	{r3, r4, r5, pc}
 800c580:	b118      	cbz	r0, 800c58a <_fflush_r+0x1a>
 800c582:	6a03      	ldr	r3, [r0, #32]
 800c584:	b90b      	cbnz	r3, 800c58a <_fflush_r+0x1a>
 800c586:	f7fc fecb 	bl	8009320 <__sinit>
 800c58a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d0f3      	beq.n	800c57a <_fflush_r+0xa>
 800c592:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c594:	07d0      	lsls	r0, r2, #31
 800c596:	d404      	bmi.n	800c5a2 <_fflush_r+0x32>
 800c598:	0599      	lsls	r1, r3, #22
 800c59a:	d402      	bmi.n	800c5a2 <_fflush_r+0x32>
 800c59c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c59e:	f7fd f812 	bl	80095c6 <__retarget_lock_acquire_recursive>
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	4621      	mov	r1, r4
 800c5a6:	f7ff ff5d 	bl	800c464 <__sflush_r>
 800c5aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5ac:	07da      	lsls	r2, r3, #31
 800c5ae:	4605      	mov	r5, r0
 800c5b0:	d4e4      	bmi.n	800c57c <_fflush_r+0xc>
 800c5b2:	89a3      	ldrh	r3, [r4, #12]
 800c5b4:	059b      	lsls	r3, r3, #22
 800c5b6:	d4e1      	bmi.n	800c57c <_fflush_r+0xc>
 800c5b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5ba:	f7fd f805 	bl	80095c8 <__retarget_lock_release_recursive>
 800c5be:	e7dd      	b.n	800c57c <_fflush_r+0xc>

0800c5c0 <__sccl>:
 800c5c0:	b570      	push	{r4, r5, r6, lr}
 800c5c2:	780b      	ldrb	r3, [r1, #0]
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	2b5e      	cmp	r3, #94	; 0x5e
 800c5c8:	bf0b      	itete	eq
 800c5ca:	784b      	ldrbeq	r3, [r1, #1]
 800c5cc:	1c4a      	addne	r2, r1, #1
 800c5ce:	1c8a      	addeq	r2, r1, #2
 800c5d0:	2100      	movne	r1, #0
 800c5d2:	bf08      	it	eq
 800c5d4:	2101      	moveq	r1, #1
 800c5d6:	3801      	subs	r0, #1
 800c5d8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c5dc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c5e0:	42a8      	cmp	r0, r5
 800c5e2:	d1fb      	bne.n	800c5dc <__sccl+0x1c>
 800c5e4:	b90b      	cbnz	r3, 800c5ea <__sccl+0x2a>
 800c5e6:	1e50      	subs	r0, r2, #1
 800c5e8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ea:	f081 0101 	eor.w	r1, r1, #1
 800c5ee:	54e1      	strb	r1, [r4, r3]
 800c5f0:	4610      	mov	r0, r2
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c5f8:	2d2d      	cmp	r5, #45	; 0x2d
 800c5fa:	d005      	beq.n	800c608 <__sccl+0x48>
 800c5fc:	2d5d      	cmp	r5, #93	; 0x5d
 800c5fe:	d016      	beq.n	800c62e <__sccl+0x6e>
 800c600:	2d00      	cmp	r5, #0
 800c602:	d0f1      	beq.n	800c5e8 <__sccl+0x28>
 800c604:	462b      	mov	r3, r5
 800c606:	e7f2      	b.n	800c5ee <__sccl+0x2e>
 800c608:	7846      	ldrb	r6, [r0, #1]
 800c60a:	2e5d      	cmp	r6, #93	; 0x5d
 800c60c:	d0fa      	beq.n	800c604 <__sccl+0x44>
 800c60e:	42b3      	cmp	r3, r6
 800c610:	dcf8      	bgt.n	800c604 <__sccl+0x44>
 800c612:	3002      	adds	r0, #2
 800c614:	461a      	mov	r2, r3
 800c616:	3201      	adds	r2, #1
 800c618:	4296      	cmp	r6, r2
 800c61a:	54a1      	strb	r1, [r4, r2]
 800c61c:	dcfb      	bgt.n	800c616 <__sccl+0x56>
 800c61e:	1af2      	subs	r2, r6, r3
 800c620:	3a01      	subs	r2, #1
 800c622:	1c5d      	adds	r5, r3, #1
 800c624:	42b3      	cmp	r3, r6
 800c626:	bfa8      	it	ge
 800c628:	2200      	movge	r2, #0
 800c62a:	18ab      	adds	r3, r5, r2
 800c62c:	e7e1      	b.n	800c5f2 <__sccl+0x32>
 800c62e:	4610      	mov	r0, r2
 800c630:	e7da      	b.n	800c5e8 <__sccl+0x28>

0800c632 <__submore>:
 800c632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c636:	460c      	mov	r4, r1
 800c638:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c63a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c63e:	4299      	cmp	r1, r3
 800c640:	d11d      	bne.n	800c67e <__submore+0x4c>
 800c642:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c646:	f7fd fec5 	bl	800a3d4 <_malloc_r>
 800c64a:	b918      	cbnz	r0, 800c654 <__submore+0x22>
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c654:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c658:	63a3      	str	r3, [r4, #56]	; 0x38
 800c65a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c65e:	6360      	str	r0, [r4, #52]	; 0x34
 800c660:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c664:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c668:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c66c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c670:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c674:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c678:	6020      	str	r0, [r4, #0]
 800c67a:	2000      	movs	r0, #0
 800c67c:	e7e8      	b.n	800c650 <__submore+0x1e>
 800c67e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c680:	0077      	lsls	r7, r6, #1
 800c682:	463a      	mov	r2, r7
 800c684:	f000 fbf1 	bl	800ce6a <_realloc_r>
 800c688:	4605      	mov	r5, r0
 800c68a:	2800      	cmp	r0, #0
 800c68c:	d0de      	beq.n	800c64c <__submore+0x1a>
 800c68e:	eb00 0806 	add.w	r8, r0, r6
 800c692:	4601      	mov	r1, r0
 800c694:	4632      	mov	r2, r6
 800c696:	4640      	mov	r0, r8
 800c698:	f7fc ff97 	bl	80095ca <memcpy>
 800c69c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c6a0:	f8c4 8000 	str.w	r8, [r4]
 800c6a4:	e7e9      	b.n	800c67a <__submore+0x48>

0800c6a6 <memmove>:
 800c6a6:	4288      	cmp	r0, r1
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	eb01 0402 	add.w	r4, r1, r2
 800c6ae:	d902      	bls.n	800c6b6 <memmove+0x10>
 800c6b0:	4284      	cmp	r4, r0
 800c6b2:	4623      	mov	r3, r4
 800c6b4:	d807      	bhi.n	800c6c6 <memmove+0x20>
 800c6b6:	1e43      	subs	r3, r0, #1
 800c6b8:	42a1      	cmp	r1, r4
 800c6ba:	d008      	beq.n	800c6ce <memmove+0x28>
 800c6bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6c4:	e7f8      	b.n	800c6b8 <memmove+0x12>
 800c6c6:	4402      	add	r2, r0
 800c6c8:	4601      	mov	r1, r0
 800c6ca:	428a      	cmp	r2, r1
 800c6cc:	d100      	bne.n	800c6d0 <memmove+0x2a>
 800c6ce:	bd10      	pop	{r4, pc}
 800c6d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6d8:	e7f7      	b.n	800c6ca <memmove+0x24>

0800c6da <strncmp>:
 800c6da:	b510      	push	{r4, lr}
 800c6dc:	b16a      	cbz	r2, 800c6fa <strncmp+0x20>
 800c6de:	3901      	subs	r1, #1
 800c6e0:	1884      	adds	r4, r0, r2
 800c6e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6e6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d103      	bne.n	800c6f6 <strncmp+0x1c>
 800c6ee:	42a0      	cmp	r0, r4
 800c6f0:	d001      	beq.n	800c6f6 <strncmp+0x1c>
 800c6f2:	2a00      	cmp	r2, #0
 800c6f4:	d1f5      	bne.n	800c6e2 <strncmp+0x8>
 800c6f6:	1ad0      	subs	r0, r2, r3
 800c6f8:	bd10      	pop	{r4, pc}
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	e7fc      	b.n	800c6f8 <strncmp+0x1e>
	...

0800c700 <_sbrk_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	4d06      	ldr	r5, [pc, #24]	; (800c71c <_sbrk_r+0x1c>)
 800c704:	2300      	movs	r3, #0
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	602b      	str	r3, [r5, #0]
 800c70c:	f7f6 fa10 	bl	8002b30 <_sbrk>
 800c710:	1c43      	adds	r3, r0, #1
 800c712:	d102      	bne.n	800c71a <_sbrk_r+0x1a>
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	b103      	cbz	r3, 800c71a <_sbrk_r+0x1a>
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	2000080c 	.word	0x2000080c

0800c720 <nan>:
 800c720:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c728 <nan+0x8>
 800c724:	4770      	bx	lr
 800c726:	bf00      	nop
 800c728:	00000000 	.word	0x00000000
 800c72c:	7ff80000 	.word	0x7ff80000

0800c730 <__assert_func>:
 800c730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c732:	4614      	mov	r4, r2
 800c734:	461a      	mov	r2, r3
 800c736:	4b09      	ldr	r3, [pc, #36]	; (800c75c <__assert_func+0x2c>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4605      	mov	r5, r0
 800c73c:	68d8      	ldr	r0, [r3, #12]
 800c73e:	b14c      	cbz	r4, 800c754 <__assert_func+0x24>
 800c740:	4b07      	ldr	r3, [pc, #28]	; (800c760 <__assert_func+0x30>)
 800c742:	9100      	str	r1, [sp, #0]
 800c744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c748:	4906      	ldr	r1, [pc, #24]	; (800c764 <__assert_func+0x34>)
 800c74a:	462b      	mov	r3, r5
 800c74c:	f000 fc3e 	bl	800cfcc <fiprintf>
 800c750:	f000 fc4e 	bl	800cff0 <abort>
 800c754:	4b04      	ldr	r3, [pc, #16]	; (800c768 <__assert_func+0x38>)
 800c756:	461c      	mov	r4, r3
 800c758:	e7f3      	b.n	800c742 <__assert_func+0x12>
 800c75a:	bf00      	nop
 800c75c:	20000060 	.word	0x20000060
 800c760:	0800da35 	.word	0x0800da35
 800c764:	0800da42 	.word	0x0800da42
 800c768:	0800da70 	.word	0x0800da70

0800c76c <_calloc_r>:
 800c76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c76e:	fba1 2402 	umull	r2, r4, r1, r2
 800c772:	b94c      	cbnz	r4, 800c788 <_calloc_r+0x1c>
 800c774:	4611      	mov	r1, r2
 800c776:	9201      	str	r2, [sp, #4]
 800c778:	f7fd fe2c 	bl	800a3d4 <_malloc_r>
 800c77c:	9a01      	ldr	r2, [sp, #4]
 800c77e:	4605      	mov	r5, r0
 800c780:	b930      	cbnz	r0, 800c790 <_calloc_r+0x24>
 800c782:	4628      	mov	r0, r5
 800c784:	b003      	add	sp, #12
 800c786:	bd30      	pop	{r4, r5, pc}
 800c788:	220c      	movs	r2, #12
 800c78a:	6002      	str	r2, [r0, #0]
 800c78c:	2500      	movs	r5, #0
 800c78e:	e7f8      	b.n	800c782 <_calloc_r+0x16>
 800c790:	4621      	mov	r1, r4
 800c792:	f7fc fe8c 	bl	80094ae <memset>
 800c796:	e7f4      	b.n	800c782 <_calloc_r+0x16>

0800c798 <rshift>:
 800c798:	6903      	ldr	r3, [r0, #16]
 800c79a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c79e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7a6:	f100 0414 	add.w	r4, r0, #20
 800c7aa:	dd45      	ble.n	800c838 <rshift+0xa0>
 800c7ac:	f011 011f 	ands.w	r1, r1, #31
 800c7b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7b8:	d10c      	bne.n	800c7d4 <rshift+0x3c>
 800c7ba:	f100 0710 	add.w	r7, r0, #16
 800c7be:	4629      	mov	r1, r5
 800c7c0:	42b1      	cmp	r1, r6
 800c7c2:	d334      	bcc.n	800c82e <rshift+0x96>
 800c7c4:	1a9b      	subs	r3, r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	1eea      	subs	r2, r5, #3
 800c7ca:	4296      	cmp	r6, r2
 800c7cc:	bf38      	it	cc
 800c7ce:	2300      	movcc	r3, #0
 800c7d0:	4423      	add	r3, r4
 800c7d2:	e015      	b.n	800c800 <rshift+0x68>
 800c7d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c7d8:	f1c1 0820 	rsb	r8, r1, #32
 800c7dc:	40cf      	lsrs	r7, r1
 800c7de:	f105 0e04 	add.w	lr, r5, #4
 800c7e2:	46a1      	mov	r9, r4
 800c7e4:	4576      	cmp	r6, lr
 800c7e6:	46f4      	mov	ip, lr
 800c7e8:	d815      	bhi.n	800c816 <rshift+0x7e>
 800c7ea:	1a9a      	subs	r2, r3, r2
 800c7ec:	0092      	lsls	r2, r2, #2
 800c7ee:	3a04      	subs	r2, #4
 800c7f0:	3501      	adds	r5, #1
 800c7f2:	42ae      	cmp	r6, r5
 800c7f4:	bf38      	it	cc
 800c7f6:	2200      	movcc	r2, #0
 800c7f8:	18a3      	adds	r3, r4, r2
 800c7fa:	50a7      	str	r7, [r4, r2]
 800c7fc:	b107      	cbz	r7, 800c800 <rshift+0x68>
 800c7fe:	3304      	adds	r3, #4
 800c800:	1b1a      	subs	r2, r3, r4
 800c802:	42a3      	cmp	r3, r4
 800c804:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c808:	bf08      	it	eq
 800c80a:	2300      	moveq	r3, #0
 800c80c:	6102      	str	r2, [r0, #16]
 800c80e:	bf08      	it	eq
 800c810:	6143      	streq	r3, [r0, #20]
 800c812:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c816:	f8dc c000 	ldr.w	ip, [ip]
 800c81a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c81e:	ea4c 0707 	orr.w	r7, ip, r7
 800c822:	f849 7b04 	str.w	r7, [r9], #4
 800c826:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c82a:	40cf      	lsrs	r7, r1
 800c82c:	e7da      	b.n	800c7e4 <rshift+0x4c>
 800c82e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c832:	f847 cf04 	str.w	ip, [r7, #4]!
 800c836:	e7c3      	b.n	800c7c0 <rshift+0x28>
 800c838:	4623      	mov	r3, r4
 800c83a:	e7e1      	b.n	800c800 <rshift+0x68>

0800c83c <__hexdig_fun>:
 800c83c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c840:	2b09      	cmp	r3, #9
 800c842:	d802      	bhi.n	800c84a <__hexdig_fun+0xe>
 800c844:	3820      	subs	r0, #32
 800c846:	b2c0      	uxtb	r0, r0
 800c848:	4770      	bx	lr
 800c84a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c84e:	2b05      	cmp	r3, #5
 800c850:	d801      	bhi.n	800c856 <__hexdig_fun+0x1a>
 800c852:	3847      	subs	r0, #71	; 0x47
 800c854:	e7f7      	b.n	800c846 <__hexdig_fun+0xa>
 800c856:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c85a:	2b05      	cmp	r3, #5
 800c85c:	d801      	bhi.n	800c862 <__hexdig_fun+0x26>
 800c85e:	3827      	subs	r0, #39	; 0x27
 800c860:	e7f1      	b.n	800c846 <__hexdig_fun+0xa>
 800c862:	2000      	movs	r0, #0
 800c864:	4770      	bx	lr
	...

0800c868 <__gethex>:
 800c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	4617      	mov	r7, r2
 800c86e:	680a      	ldr	r2, [r1, #0]
 800c870:	b085      	sub	sp, #20
 800c872:	f102 0b02 	add.w	fp, r2, #2
 800c876:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c87a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c87e:	4681      	mov	r9, r0
 800c880:	468a      	mov	sl, r1
 800c882:	9302      	str	r3, [sp, #8]
 800c884:	32fe      	adds	r2, #254	; 0xfe
 800c886:	eb02 030b 	add.w	r3, r2, fp
 800c88a:	46d8      	mov	r8, fp
 800c88c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c890:	9301      	str	r3, [sp, #4]
 800c892:	2830      	cmp	r0, #48	; 0x30
 800c894:	d0f7      	beq.n	800c886 <__gethex+0x1e>
 800c896:	f7ff ffd1 	bl	800c83c <__hexdig_fun>
 800c89a:	4604      	mov	r4, r0
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d138      	bne.n	800c912 <__gethex+0xaa>
 800c8a0:	49a7      	ldr	r1, [pc, #668]	; (800cb40 <__gethex+0x2d8>)
 800c8a2:	2201      	movs	r2, #1
 800c8a4:	4640      	mov	r0, r8
 800c8a6:	f7ff ff18 	bl	800c6da <strncmp>
 800c8aa:	4606      	mov	r6, r0
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	d169      	bne.n	800c984 <__gethex+0x11c>
 800c8b0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c8b4:	465d      	mov	r5, fp
 800c8b6:	f7ff ffc1 	bl	800c83c <__hexdig_fun>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d064      	beq.n	800c988 <__gethex+0x120>
 800c8be:	465a      	mov	r2, fp
 800c8c0:	7810      	ldrb	r0, [r2, #0]
 800c8c2:	2830      	cmp	r0, #48	; 0x30
 800c8c4:	4690      	mov	r8, r2
 800c8c6:	f102 0201 	add.w	r2, r2, #1
 800c8ca:	d0f9      	beq.n	800c8c0 <__gethex+0x58>
 800c8cc:	f7ff ffb6 	bl	800c83c <__hexdig_fun>
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	fab0 f480 	clz	r4, r0
 800c8d6:	0964      	lsrs	r4, r4, #5
 800c8d8:	465e      	mov	r6, fp
 800c8da:	9301      	str	r3, [sp, #4]
 800c8dc:	4642      	mov	r2, r8
 800c8de:	4615      	mov	r5, r2
 800c8e0:	3201      	adds	r2, #1
 800c8e2:	7828      	ldrb	r0, [r5, #0]
 800c8e4:	f7ff ffaa 	bl	800c83c <__hexdig_fun>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	d1f8      	bne.n	800c8de <__gethex+0x76>
 800c8ec:	4994      	ldr	r1, [pc, #592]	; (800cb40 <__gethex+0x2d8>)
 800c8ee:	2201      	movs	r2, #1
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	f7ff fef2 	bl	800c6da <strncmp>
 800c8f6:	b978      	cbnz	r0, 800c918 <__gethex+0xb0>
 800c8f8:	b946      	cbnz	r6, 800c90c <__gethex+0xa4>
 800c8fa:	1c6e      	adds	r6, r5, #1
 800c8fc:	4632      	mov	r2, r6
 800c8fe:	4615      	mov	r5, r2
 800c900:	3201      	adds	r2, #1
 800c902:	7828      	ldrb	r0, [r5, #0]
 800c904:	f7ff ff9a 	bl	800c83c <__hexdig_fun>
 800c908:	2800      	cmp	r0, #0
 800c90a:	d1f8      	bne.n	800c8fe <__gethex+0x96>
 800c90c:	1b73      	subs	r3, r6, r5
 800c90e:	009e      	lsls	r6, r3, #2
 800c910:	e004      	b.n	800c91c <__gethex+0xb4>
 800c912:	2400      	movs	r4, #0
 800c914:	4626      	mov	r6, r4
 800c916:	e7e1      	b.n	800c8dc <__gethex+0x74>
 800c918:	2e00      	cmp	r6, #0
 800c91a:	d1f7      	bne.n	800c90c <__gethex+0xa4>
 800c91c:	782b      	ldrb	r3, [r5, #0]
 800c91e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c922:	2b50      	cmp	r3, #80	; 0x50
 800c924:	d13d      	bne.n	800c9a2 <__gethex+0x13a>
 800c926:	786b      	ldrb	r3, [r5, #1]
 800c928:	2b2b      	cmp	r3, #43	; 0x2b
 800c92a:	d02f      	beq.n	800c98c <__gethex+0x124>
 800c92c:	2b2d      	cmp	r3, #45	; 0x2d
 800c92e:	d031      	beq.n	800c994 <__gethex+0x12c>
 800c930:	1c69      	adds	r1, r5, #1
 800c932:	f04f 0b00 	mov.w	fp, #0
 800c936:	7808      	ldrb	r0, [r1, #0]
 800c938:	f7ff ff80 	bl	800c83c <__hexdig_fun>
 800c93c:	1e42      	subs	r2, r0, #1
 800c93e:	b2d2      	uxtb	r2, r2
 800c940:	2a18      	cmp	r2, #24
 800c942:	d82e      	bhi.n	800c9a2 <__gethex+0x13a>
 800c944:	f1a0 0210 	sub.w	r2, r0, #16
 800c948:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c94c:	f7ff ff76 	bl	800c83c <__hexdig_fun>
 800c950:	f100 3cff 	add.w	ip, r0, #4294967295
 800c954:	fa5f fc8c 	uxtb.w	ip, ip
 800c958:	f1bc 0f18 	cmp.w	ip, #24
 800c95c:	d91d      	bls.n	800c99a <__gethex+0x132>
 800c95e:	f1bb 0f00 	cmp.w	fp, #0
 800c962:	d000      	beq.n	800c966 <__gethex+0xfe>
 800c964:	4252      	negs	r2, r2
 800c966:	4416      	add	r6, r2
 800c968:	f8ca 1000 	str.w	r1, [sl]
 800c96c:	b1dc      	cbz	r4, 800c9a6 <__gethex+0x13e>
 800c96e:	9b01      	ldr	r3, [sp, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	bf14      	ite	ne
 800c974:	f04f 0800 	movne.w	r8, #0
 800c978:	f04f 0806 	moveq.w	r8, #6
 800c97c:	4640      	mov	r0, r8
 800c97e:	b005      	add	sp, #20
 800c980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c984:	4645      	mov	r5, r8
 800c986:	4626      	mov	r6, r4
 800c988:	2401      	movs	r4, #1
 800c98a:	e7c7      	b.n	800c91c <__gethex+0xb4>
 800c98c:	f04f 0b00 	mov.w	fp, #0
 800c990:	1ca9      	adds	r1, r5, #2
 800c992:	e7d0      	b.n	800c936 <__gethex+0xce>
 800c994:	f04f 0b01 	mov.w	fp, #1
 800c998:	e7fa      	b.n	800c990 <__gethex+0x128>
 800c99a:	230a      	movs	r3, #10
 800c99c:	fb03 0002 	mla	r0, r3, r2, r0
 800c9a0:	e7d0      	b.n	800c944 <__gethex+0xdc>
 800c9a2:	4629      	mov	r1, r5
 800c9a4:	e7e0      	b.n	800c968 <__gethex+0x100>
 800c9a6:	eba5 0308 	sub.w	r3, r5, r8
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	4621      	mov	r1, r4
 800c9ae:	2b07      	cmp	r3, #7
 800c9b0:	dc0a      	bgt.n	800c9c8 <__gethex+0x160>
 800c9b2:	4648      	mov	r0, r9
 800c9b4:	f7fd fd9a 	bl	800a4ec <_Balloc>
 800c9b8:	4604      	mov	r4, r0
 800c9ba:	b940      	cbnz	r0, 800c9ce <__gethex+0x166>
 800c9bc:	4b61      	ldr	r3, [pc, #388]	; (800cb44 <__gethex+0x2dc>)
 800c9be:	4602      	mov	r2, r0
 800c9c0:	21e4      	movs	r1, #228	; 0xe4
 800c9c2:	4861      	ldr	r0, [pc, #388]	; (800cb48 <__gethex+0x2e0>)
 800c9c4:	f7ff feb4 	bl	800c730 <__assert_func>
 800c9c8:	3101      	adds	r1, #1
 800c9ca:	105b      	asrs	r3, r3, #1
 800c9cc:	e7ef      	b.n	800c9ae <__gethex+0x146>
 800c9ce:	f100 0a14 	add.w	sl, r0, #20
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	495a      	ldr	r1, [pc, #360]	; (800cb40 <__gethex+0x2d8>)
 800c9d6:	f8cd a004 	str.w	sl, [sp, #4]
 800c9da:	469b      	mov	fp, r3
 800c9dc:	45a8      	cmp	r8, r5
 800c9de:	d342      	bcc.n	800ca66 <__gethex+0x1fe>
 800c9e0:	9801      	ldr	r0, [sp, #4]
 800c9e2:	f840 bb04 	str.w	fp, [r0], #4
 800c9e6:	eba0 000a 	sub.w	r0, r0, sl
 800c9ea:	1080      	asrs	r0, r0, #2
 800c9ec:	6120      	str	r0, [r4, #16]
 800c9ee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c9f2:	4658      	mov	r0, fp
 800c9f4:	f7fd fe6c 	bl	800a6d0 <__hi0bits>
 800c9f8:	683d      	ldr	r5, [r7, #0]
 800c9fa:	eba8 0000 	sub.w	r0, r8, r0
 800c9fe:	42a8      	cmp	r0, r5
 800ca00:	dd59      	ble.n	800cab6 <__gethex+0x24e>
 800ca02:	eba0 0805 	sub.w	r8, r0, r5
 800ca06:	4641      	mov	r1, r8
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f7fe f9fb 	bl	800ae04 <__any_on>
 800ca0e:	4683      	mov	fp, r0
 800ca10:	b1b8      	cbz	r0, 800ca42 <__gethex+0x1da>
 800ca12:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca16:	1159      	asrs	r1, r3, #5
 800ca18:	f003 021f 	and.w	r2, r3, #31
 800ca1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ca20:	f04f 0b01 	mov.w	fp, #1
 800ca24:	fa0b f202 	lsl.w	r2, fp, r2
 800ca28:	420a      	tst	r2, r1
 800ca2a:	d00a      	beq.n	800ca42 <__gethex+0x1da>
 800ca2c:	455b      	cmp	r3, fp
 800ca2e:	dd06      	ble.n	800ca3e <__gethex+0x1d6>
 800ca30:	f1a8 0102 	sub.w	r1, r8, #2
 800ca34:	4620      	mov	r0, r4
 800ca36:	f7fe f9e5 	bl	800ae04 <__any_on>
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	d138      	bne.n	800cab0 <__gethex+0x248>
 800ca3e:	f04f 0b02 	mov.w	fp, #2
 800ca42:	4641      	mov	r1, r8
 800ca44:	4620      	mov	r0, r4
 800ca46:	f7ff fea7 	bl	800c798 <rshift>
 800ca4a:	4446      	add	r6, r8
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	42b3      	cmp	r3, r6
 800ca50:	da41      	bge.n	800cad6 <__gethex+0x26e>
 800ca52:	4621      	mov	r1, r4
 800ca54:	4648      	mov	r0, r9
 800ca56:	f7fd fd89 	bl	800a56c <_Bfree>
 800ca5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ca64:	e78a      	b.n	800c97c <__gethex+0x114>
 800ca66:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ca6a:	2a2e      	cmp	r2, #46	; 0x2e
 800ca6c:	d014      	beq.n	800ca98 <__gethex+0x230>
 800ca6e:	2b20      	cmp	r3, #32
 800ca70:	d106      	bne.n	800ca80 <__gethex+0x218>
 800ca72:	9b01      	ldr	r3, [sp, #4]
 800ca74:	f843 bb04 	str.w	fp, [r3], #4
 800ca78:	f04f 0b00 	mov.w	fp, #0
 800ca7c:	9301      	str	r3, [sp, #4]
 800ca7e:	465b      	mov	r3, fp
 800ca80:	7828      	ldrb	r0, [r5, #0]
 800ca82:	9303      	str	r3, [sp, #12]
 800ca84:	f7ff feda 	bl	800c83c <__hexdig_fun>
 800ca88:	9b03      	ldr	r3, [sp, #12]
 800ca8a:	f000 000f 	and.w	r0, r0, #15
 800ca8e:	4098      	lsls	r0, r3
 800ca90:	ea4b 0b00 	orr.w	fp, fp, r0
 800ca94:	3304      	adds	r3, #4
 800ca96:	e7a1      	b.n	800c9dc <__gethex+0x174>
 800ca98:	45a8      	cmp	r8, r5
 800ca9a:	d8e8      	bhi.n	800ca6e <__gethex+0x206>
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	4628      	mov	r0, r5
 800caa0:	9303      	str	r3, [sp, #12]
 800caa2:	f7ff fe1a 	bl	800c6da <strncmp>
 800caa6:	4926      	ldr	r1, [pc, #152]	; (800cb40 <__gethex+0x2d8>)
 800caa8:	9b03      	ldr	r3, [sp, #12]
 800caaa:	2800      	cmp	r0, #0
 800caac:	d1df      	bne.n	800ca6e <__gethex+0x206>
 800caae:	e795      	b.n	800c9dc <__gethex+0x174>
 800cab0:	f04f 0b03 	mov.w	fp, #3
 800cab4:	e7c5      	b.n	800ca42 <__gethex+0x1da>
 800cab6:	da0b      	bge.n	800cad0 <__gethex+0x268>
 800cab8:	eba5 0800 	sub.w	r8, r5, r0
 800cabc:	4621      	mov	r1, r4
 800cabe:	4642      	mov	r2, r8
 800cac0:	4648      	mov	r0, r9
 800cac2:	f7fd ff6d 	bl	800a9a0 <__lshift>
 800cac6:	eba6 0608 	sub.w	r6, r6, r8
 800caca:	4604      	mov	r4, r0
 800cacc:	f100 0a14 	add.w	sl, r0, #20
 800cad0:	f04f 0b00 	mov.w	fp, #0
 800cad4:	e7ba      	b.n	800ca4c <__gethex+0x1e4>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	42b3      	cmp	r3, r6
 800cada:	dd73      	ble.n	800cbc4 <__gethex+0x35c>
 800cadc:	1b9e      	subs	r6, r3, r6
 800cade:	42b5      	cmp	r5, r6
 800cae0:	dc34      	bgt.n	800cb4c <__gethex+0x2e4>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d023      	beq.n	800cb30 <__gethex+0x2c8>
 800cae8:	2b03      	cmp	r3, #3
 800caea:	d025      	beq.n	800cb38 <__gethex+0x2d0>
 800caec:	2b01      	cmp	r3, #1
 800caee:	d115      	bne.n	800cb1c <__gethex+0x2b4>
 800caf0:	42b5      	cmp	r5, r6
 800caf2:	d113      	bne.n	800cb1c <__gethex+0x2b4>
 800caf4:	2d01      	cmp	r5, #1
 800caf6:	d10b      	bne.n	800cb10 <__gethex+0x2a8>
 800caf8:	9a02      	ldr	r2, [sp, #8]
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6013      	str	r3, [r2, #0]
 800cafe:	2301      	movs	r3, #1
 800cb00:	6123      	str	r3, [r4, #16]
 800cb02:	f8ca 3000 	str.w	r3, [sl]
 800cb06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb08:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cb0c:	601c      	str	r4, [r3, #0]
 800cb0e:	e735      	b.n	800c97c <__gethex+0x114>
 800cb10:	1e69      	subs	r1, r5, #1
 800cb12:	4620      	mov	r0, r4
 800cb14:	f7fe f976 	bl	800ae04 <__any_on>
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d1ed      	bne.n	800caf8 <__gethex+0x290>
 800cb1c:	4621      	mov	r1, r4
 800cb1e:	4648      	mov	r0, r9
 800cb20:	f7fd fd24 	bl	800a56c <_Bfree>
 800cb24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb26:	2300      	movs	r3, #0
 800cb28:	6013      	str	r3, [r2, #0]
 800cb2a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cb2e:	e725      	b.n	800c97c <__gethex+0x114>
 800cb30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d1f2      	bne.n	800cb1c <__gethex+0x2b4>
 800cb36:	e7df      	b.n	800caf8 <__gethex+0x290>
 800cb38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1dc      	bne.n	800caf8 <__gethex+0x290>
 800cb3e:	e7ed      	b.n	800cb1c <__gethex+0x2b4>
 800cb40:	0800d8ac 	.word	0x0800d8ac
 800cb44:	0800d73f 	.word	0x0800d73f
 800cb48:	0800da71 	.word	0x0800da71
 800cb4c:	f106 38ff 	add.w	r8, r6, #4294967295
 800cb50:	f1bb 0f00 	cmp.w	fp, #0
 800cb54:	d133      	bne.n	800cbbe <__gethex+0x356>
 800cb56:	f1b8 0f00 	cmp.w	r8, #0
 800cb5a:	d004      	beq.n	800cb66 <__gethex+0x2fe>
 800cb5c:	4641      	mov	r1, r8
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f7fe f950 	bl	800ae04 <__any_on>
 800cb64:	4683      	mov	fp, r0
 800cb66:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cb70:	f008 081f 	and.w	r8, r8, #31
 800cb74:	fa03 f308 	lsl.w	r3, r3, r8
 800cb78:	4213      	tst	r3, r2
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	bf18      	it	ne
 800cb80:	f04b 0b02 	orrne.w	fp, fp, #2
 800cb84:	1bad      	subs	r5, r5, r6
 800cb86:	f7ff fe07 	bl	800c798 <rshift>
 800cb8a:	687e      	ldr	r6, [r7, #4]
 800cb8c:	f04f 0802 	mov.w	r8, #2
 800cb90:	f1bb 0f00 	cmp.w	fp, #0
 800cb94:	d04a      	beq.n	800cc2c <__gethex+0x3c4>
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	d016      	beq.n	800cbca <__gethex+0x362>
 800cb9c:	2b03      	cmp	r3, #3
 800cb9e:	d018      	beq.n	800cbd2 <__gethex+0x36a>
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d109      	bne.n	800cbb8 <__gethex+0x350>
 800cba4:	f01b 0f02 	tst.w	fp, #2
 800cba8:	d006      	beq.n	800cbb8 <__gethex+0x350>
 800cbaa:	f8da 3000 	ldr.w	r3, [sl]
 800cbae:	ea4b 0b03 	orr.w	fp, fp, r3
 800cbb2:	f01b 0f01 	tst.w	fp, #1
 800cbb6:	d10f      	bne.n	800cbd8 <__gethex+0x370>
 800cbb8:	f048 0810 	orr.w	r8, r8, #16
 800cbbc:	e036      	b.n	800cc2c <__gethex+0x3c4>
 800cbbe:	f04f 0b01 	mov.w	fp, #1
 800cbc2:	e7d0      	b.n	800cb66 <__gethex+0x2fe>
 800cbc4:	f04f 0801 	mov.w	r8, #1
 800cbc8:	e7e2      	b.n	800cb90 <__gethex+0x328>
 800cbca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbcc:	f1c3 0301 	rsb	r3, r3, #1
 800cbd0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d0ef      	beq.n	800cbb8 <__gethex+0x350>
 800cbd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cbdc:	f104 0214 	add.w	r2, r4, #20
 800cbe0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cbe4:	9301      	str	r3, [sp, #4]
 800cbe6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cbea:	2300      	movs	r3, #0
 800cbec:	4694      	mov	ip, r2
 800cbee:	f852 1b04 	ldr.w	r1, [r2], #4
 800cbf2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cbf6:	d01e      	beq.n	800cc36 <__gethex+0x3ce>
 800cbf8:	3101      	adds	r1, #1
 800cbfa:	f8cc 1000 	str.w	r1, [ip]
 800cbfe:	f1b8 0f02 	cmp.w	r8, #2
 800cc02:	f104 0214 	add.w	r2, r4, #20
 800cc06:	d13d      	bne.n	800cc84 <__gethex+0x41c>
 800cc08:	683b      	ldr	r3, [r7, #0]
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	42ab      	cmp	r3, r5
 800cc0e:	d10b      	bne.n	800cc28 <__gethex+0x3c0>
 800cc10:	1169      	asrs	r1, r5, #5
 800cc12:	2301      	movs	r3, #1
 800cc14:	f005 051f 	and.w	r5, r5, #31
 800cc18:	fa03 f505 	lsl.w	r5, r3, r5
 800cc1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc20:	421d      	tst	r5, r3
 800cc22:	bf18      	it	ne
 800cc24:	f04f 0801 	movne.w	r8, #1
 800cc28:	f048 0820 	orr.w	r8, r8, #32
 800cc2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc2e:	601c      	str	r4, [r3, #0]
 800cc30:	9b02      	ldr	r3, [sp, #8]
 800cc32:	601e      	str	r6, [r3, #0]
 800cc34:	e6a2      	b.n	800c97c <__gethex+0x114>
 800cc36:	4290      	cmp	r0, r2
 800cc38:	f842 3c04 	str.w	r3, [r2, #-4]
 800cc3c:	d8d6      	bhi.n	800cbec <__gethex+0x384>
 800cc3e:	68a2      	ldr	r2, [r4, #8]
 800cc40:	4593      	cmp	fp, r2
 800cc42:	db17      	blt.n	800cc74 <__gethex+0x40c>
 800cc44:	6861      	ldr	r1, [r4, #4]
 800cc46:	4648      	mov	r0, r9
 800cc48:	3101      	adds	r1, #1
 800cc4a:	f7fd fc4f 	bl	800a4ec <_Balloc>
 800cc4e:	4682      	mov	sl, r0
 800cc50:	b918      	cbnz	r0, 800cc5a <__gethex+0x3f2>
 800cc52:	4b1b      	ldr	r3, [pc, #108]	; (800ccc0 <__gethex+0x458>)
 800cc54:	4602      	mov	r2, r0
 800cc56:	2184      	movs	r1, #132	; 0x84
 800cc58:	e6b3      	b.n	800c9c2 <__gethex+0x15a>
 800cc5a:	6922      	ldr	r2, [r4, #16]
 800cc5c:	3202      	adds	r2, #2
 800cc5e:	f104 010c 	add.w	r1, r4, #12
 800cc62:	0092      	lsls	r2, r2, #2
 800cc64:	300c      	adds	r0, #12
 800cc66:	f7fc fcb0 	bl	80095ca <memcpy>
 800cc6a:	4621      	mov	r1, r4
 800cc6c:	4648      	mov	r0, r9
 800cc6e:	f7fd fc7d 	bl	800a56c <_Bfree>
 800cc72:	4654      	mov	r4, sl
 800cc74:	6922      	ldr	r2, [r4, #16]
 800cc76:	1c51      	adds	r1, r2, #1
 800cc78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cc7c:	6121      	str	r1, [r4, #16]
 800cc7e:	2101      	movs	r1, #1
 800cc80:	6151      	str	r1, [r2, #20]
 800cc82:	e7bc      	b.n	800cbfe <__gethex+0x396>
 800cc84:	6921      	ldr	r1, [r4, #16]
 800cc86:	4559      	cmp	r1, fp
 800cc88:	dd0b      	ble.n	800cca2 <__gethex+0x43a>
 800cc8a:	2101      	movs	r1, #1
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f7ff fd83 	bl	800c798 <rshift>
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	3601      	adds	r6, #1
 800cc96:	42b3      	cmp	r3, r6
 800cc98:	f6ff aedb 	blt.w	800ca52 <__gethex+0x1ea>
 800cc9c:	f04f 0801 	mov.w	r8, #1
 800cca0:	e7c2      	b.n	800cc28 <__gethex+0x3c0>
 800cca2:	f015 051f 	ands.w	r5, r5, #31
 800cca6:	d0f9      	beq.n	800cc9c <__gethex+0x434>
 800cca8:	9b01      	ldr	r3, [sp, #4]
 800ccaa:	441a      	add	r2, r3
 800ccac:	f1c5 0520 	rsb	r5, r5, #32
 800ccb0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ccb4:	f7fd fd0c 	bl	800a6d0 <__hi0bits>
 800ccb8:	42a8      	cmp	r0, r5
 800ccba:	dbe6      	blt.n	800cc8a <__gethex+0x422>
 800ccbc:	e7ee      	b.n	800cc9c <__gethex+0x434>
 800ccbe:	bf00      	nop
 800ccc0:	0800d73f 	.word	0x0800d73f

0800ccc4 <L_shift>:
 800ccc4:	f1c2 0208 	rsb	r2, r2, #8
 800ccc8:	0092      	lsls	r2, r2, #2
 800ccca:	b570      	push	{r4, r5, r6, lr}
 800cccc:	f1c2 0620 	rsb	r6, r2, #32
 800ccd0:	6843      	ldr	r3, [r0, #4]
 800ccd2:	6804      	ldr	r4, [r0, #0]
 800ccd4:	fa03 f506 	lsl.w	r5, r3, r6
 800ccd8:	432c      	orrs	r4, r5
 800ccda:	40d3      	lsrs	r3, r2
 800ccdc:	6004      	str	r4, [r0, #0]
 800ccde:	f840 3f04 	str.w	r3, [r0, #4]!
 800cce2:	4288      	cmp	r0, r1
 800cce4:	d3f4      	bcc.n	800ccd0 <L_shift+0xc>
 800cce6:	bd70      	pop	{r4, r5, r6, pc}

0800cce8 <__match>:
 800cce8:	b530      	push	{r4, r5, lr}
 800ccea:	6803      	ldr	r3, [r0, #0]
 800ccec:	3301      	adds	r3, #1
 800ccee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccf2:	b914      	cbnz	r4, 800ccfa <__match+0x12>
 800ccf4:	6003      	str	r3, [r0, #0]
 800ccf6:	2001      	movs	r0, #1
 800ccf8:	bd30      	pop	{r4, r5, pc}
 800ccfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccfe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd02:	2d19      	cmp	r5, #25
 800cd04:	bf98      	it	ls
 800cd06:	3220      	addls	r2, #32
 800cd08:	42a2      	cmp	r2, r4
 800cd0a:	d0f0      	beq.n	800ccee <__match+0x6>
 800cd0c:	2000      	movs	r0, #0
 800cd0e:	e7f3      	b.n	800ccf8 <__match+0x10>

0800cd10 <__hexnan>:
 800cd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd14:	680b      	ldr	r3, [r1, #0]
 800cd16:	6801      	ldr	r1, [r0, #0]
 800cd18:	115e      	asrs	r6, r3, #5
 800cd1a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd1e:	f013 031f 	ands.w	r3, r3, #31
 800cd22:	b087      	sub	sp, #28
 800cd24:	bf18      	it	ne
 800cd26:	3604      	addne	r6, #4
 800cd28:	2500      	movs	r5, #0
 800cd2a:	1f37      	subs	r7, r6, #4
 800cd2c:	4682      	mov	sl, r0
 800cd2e:	4690      	mov	r8, r2
 800cd30:	9301      	str	r3, [sp, #4]
 800cd32:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd36:	46b9      	mov	r9, r7
 800cd38:	463c      	mov	r4, r7
 800cd3a:	9502      	str	r5, [sp, #8]
 800cd3c:	46ab      	mov	fp, r5
 800cd3e:	784a      	ldrb	r2, [r1, #1]
 800cd40:	1c4b      	adds	r3, r1, #1
 800cd42:	9303      	str	r3, [sp, #12]
 800cd44:	b342      	cbz	r2, 800cd98 <__hexnan+0x88>
 800cd46:	4610      	mov	r0, r2
 800cd48:	9105      	str	r1, [sp, #20]
 800cd4a:	9204      	str	r2, [sp, #16]
 800cd4c:	f7ff fd76 	bl	800c83c <__hexdig_fun>
 800cd50:	2800      	cmp	r0, #0
 800cd52:	d14f      	bne.n	800cdf4 <__hexnan+0xe4>
 800cd54:	9a04      	ldr	r2, [sp, #16]
 800cd56:	9905      	ldr	r1, [sp, #20]
 800cd58:	2a20      	cmp	r2, #32
 800cd5a:	d818      	bhi.n	800cd8e <__hexnan+0x7e>
 800cd5c:	9b02      	ldr	r3, [sp, #8]
 800cd5e:	459b      	cmp	fp, r3
 800cd60:	dd13      	ble.n	800cd8a <__hexnan+0x7a>
 800cd62:	454c      	cmp	r4, r9
 800cd64:	d206      	bcs.n	800cd74 <__hexnan+0x64>
 800cd66:	2d07      	cmp	r5, #7
 800cd68:	dc04      	bgt.n	800cd74 <__hexnan+0x64>
 800cd6a:	462a      	mov	r2, r5
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f7ff ffa8 	bl	800ccc4 <L_shift>
 800cd74:	4544      	cmp	r4, r8
 800cd76:	d950      	bls.n	800ce1a <__hexnan+0x10a>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f1a4 0904 	sub.w	r9, r4, #4
 800cd7e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd82:	f8cd b008 	str.w	fp, [sp, #8]
 800cd86:	464c      	mov	r4, r9
 800cd88:	461d      	mov	r5, r3
 800cd8a:	9903      	ldr	r1, [sp, #12]
 800cd8c:	e7d7      	b.n	800cd3e <__hexnan+0x2e>
 800cd8e:	2a29      	cmp	r2, #41	; 0x29
 800cd90:	d155      	bne.n	800ce3e <__hexnan+0x12e>
 800cd92:	3102      	adds	r1, #2
 800cd94:	f8ca 1000 	str.w	r1, [sl]
 800cd98:	f1bb 0f00 	cmp.w	fp, #0
 800cd9c:	d04f      	beq.n	800ce3e <__hexnan+0x12e>
 800cd9e:	454c      	cmp	r4, r9
 800cda0:	d206      	bcs.n	800cdb0 <__hexnan+0xa0>
 800cda2:	2d07      	cmp	r5, #7
 800cda4:	dc04      	bgt.n	800cdb0 <__hexnan+0xa0>
 800cda6:	462a      	mov	r2, r5
 800cda8:	4649      	mov	r1, r9
 800cdaa:	4620      	mov	r0, r4
 800cdac:	f7ff ff8a 	bl	800ccc4 <L_shift>
 800cdb0:	4544      	cmp	r4, r8
 800cdb2:	d934      	bls.n	800ce1e <__hexnan+0x10e>
 800cdb4:	f1a8 0204 	sub.w	r2, r8, #4
 800cdb8:	4623      	mov	r3, r4
 800cdba:	f853 1b04 	ldr.w	r1, [r3], #4
 800cdbe:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdc2:	429f      	cmp	r7, r3
 800cdc4:	d2f9      	bcs.n	800cdba <__hexnan+0xaa>
 800cdc6:	1b3b      	subs	r3, r7, r4
 800cdc8:	f023 0303 	bic.w	r3, r3, #3
 800cdcc:	3304      	adds	r3, #4
 800cdce:	3e03      	subs	r6, #3
 800cdd0:	3401      	adds	r4, #1
 800cdd2:	42a6      	cmp	r6, r4
 800cdd4:	bf38      	it	cc
 800cdd6:	2304      	movcc	r3, #4
 800cdd8:	4443      	add	r3, r8
 800cdda:	2200      	movs	r2, #0
 800cddc:	f843 2b04 	str.w	r2, [r3], #4
 800cde0:	429f      	cmp	r7, r3
 800cde2:	d2fb      	bcs.n	800cddc <__hexnan+0xcc>
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	b91b      	cbnz	r3, 800cdf0 <__hexnan+0xe0>
 800cde8:	4547      	cmp	r7, r8
 800cdea:	d126      	bne.n	800ce3a <__hexnan+0x12a>
 800cdec:	2301      	movs	r3, #1
 800cdee:	603b      	str	r3, [r7, #0]
 800cdf0:	2005      	movs	r0, #5
 800cdf2:	e025      	b.n	800ce40 <__hexnan+0x130>
 800cdf4:	3501      	adds	r5, #1
 800cdf6:	2d08      	cmp	r5, #8
 800cdf8:	f10b 0b01 	add.w	fp, fp, #1
 800cdfc:	dd06      	ble.n	800ce0c <__hexnan+0xfc>
 800cdfe:	4544      	cmp	r4, r8
 800ce00:	d9c3      	bls.n	800cd8a <__hexnan+0x7a>
 800ce02:	2300      	movs	r3, #0
 800ce04:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce08:	2501      	movs	r5, #1
 800ce0a:	3c04      	subs	r4, #4
 800ce0c:	6822      	ldr	r2, [r4, #0]
 800ce0e:	f000 000f 	and.w	r0, r0, #15
 800ce12:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce16:	6020      	str	r0, [r4, #0]
 800ce18:	e7b7      	b.n	800cd8a <__hexnan+0x7a>
 800ce1a:	2508      	movs	r5, #8
 800ce1c:	e7b5      	b.n	800cd8a <__hexnan+0x7a>
 800ce1e:	9b01      	ldr	r3, [sp, #4]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d0df      	beq.n	800cde4 <__hexnan+0xd4>
 800ce24:	f1c3 0320 	rsb	r3, r3, #32
 800ce28:	f04f 32ff 	mov.w	r2, #4294967295
 800ce2c:	40da      	lsrs	r2, r3
 800ce2e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce32:	4013      	ands	r3, r2
 800ce34:	f846 3c04 	str.w	r3, [r6, #-4]
 800ce38:	e7d4      	b.n	800cde4 <__hexnan+0xd4>
 800ce3a:	3f04      	subs	r7, #4
 800ce3c:	e7d2      	b.n	800cde4 <__hexnan+0xd4>
 800ce3e:	2004      	movs	r0, #4
 800ce40:	b007      	add	sp, #28
 800ce42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce46 <__ascii_mbtowc>:
 800ce46:	b082      	sub	sp, #8
 800ce48:	b901      	cbnz	r1, 800ce4c <__ascii_mbtowc+0x6>
 800ce4a:	a901      	add	r1, sp, #4
 800ce4c:	b142      	cbz	r2, 800ce60 <__ascii_mbtowc+0x1a>
 800ce4e:	b14b      	cbz	r3, 800ce64 <__ascii_mbtowc+0x1e>
 800ce50:	7813      	ldrb	r3, [r2, #0]
 800ce52:	600b      	str	r3, [r1, #0]
 800ce54:	7812      	ldrb	r2, [r2, #0]
 800ce56:	1e10      	subs	r0, r2, #0
 800ce58:	bf18      	it	ne
 800ce5a:	2001      	movne	r0, #1
 800ce5c:	b002      	add	sp, #8
 800ce5e:	4770      	bx	lr
 800ce60:	4610      	mov	r0, r2
 800ce62:	e7fb      	b.n	800ce5c <__ascii_mbtowc+0x16>
 800ce64:	f06f 0001 	mvn.w	r0, #1
 800ce68:	e7f8      	b.n	800ce5c <__ascii_mbtowc+0x16>

0800ce6a <_realloc_r>:
 800ce6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6e:	4680      	mov	r8, r0
 800ce70:	4614      	mov	r4, r2
 800ce72:	460e      	mov	r6, r1
 800ce74:	b921      	cbnz	r1, 800ce80 <_realloc_r+0x16>
 800ce76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7a:	4611      	mov	r1, r2
 800ce7c:	f7fd baaa 	b.w	800a3d4 <_malloc_r>
 800ce80:	b92a      	cbnz	r2, 800ce8e <_realloc_r+0x24>
 800ce82:	f7fd fa33 	bl	800a2ec <_free_r>
 800ce86:	4625      	mov	r5, r4
 800ce88:	4628      	mov	r0, r5
 800ce8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce8e:	f000 f8b6 	bl	800cffe <_malloc_usable_size_r>
 800ce92:	4284      	cmp	r4, r0
 800ce94:	4607      	mov	r7, r0
 800ce96:	d802      	bhi.n	800ce9e <_realloc_r+0x34>
 800ce98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce9c:	d812      	bhi.n	800cec4 <_realloc_r+0x5a>
 800ce9e:	4621      	mov	r1, r4
 800cea0:	4640      	mov	r0, r8
 800cea2:	f7fd fa97 	bl	800a3d4 <_malloc_r>
 800cea6:	4605      	mov	r5, r0
 800cea8:	2800      	cmp	r0, #0
 800ceaa:	d0ed      	beq.n	800ce88 <_realloc_r+0x1e>
 800ceac:	42bc      	cmp	r4, r7
 800ceae:	4622      	mov	r2, r4
 800ceb0:	4631      	mov	r1, r6
 800ceb2:	bf28      	it	cs
 800ceb4:	463a      	movcs	r2, r7
 800ceb6:	f7fc fb88 	bl	80095ca <memcpy>
 800ceba:	4631      	mov	r1, r6
 800cebc:	4640      	mov	r0, r8
 800cebe:	f7fd fa15 	bl	800a2ec <_free_r>
 800cec2:	e7e1      	b.n	800ce88 <_realloc_r+0x1e>
 800cec4:	4635      	mov	r5, r6
 800cec6:	e7df      	b.n	800ce88 <_realloc_r+0x1e>

0800cec8 <_strtoul_l.constprop.0>:
 800cec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cecc:	4f36      	ldr	r7, [pc, #216]	; (800cfa8 <_strtoul_l.constprop.0+0xe0>)
 800cece:	4686      	mov	lr, r0
 800ced0:	460d      	mov	r5, r1
 800ced2:	4628      	mov	r0, r5
 800ced4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ced8:	5d3e      	ldrb	r6, [r7, r4]
 800ceda:	f016 0608 	ands.w	r6, r6, #8
 800cede:	d1f8      	bne.n	800ced2 <_strtoul_l.constprop.0+0xa>
 800cee0:	2c2d      	cmp	r4, #45	; 0x2d
 800cee2:	d130      	bne.n	800cf46 <_strtoul_l.constprop.0+0x7e>
 800cee4:	782c      	ldrb	r4, [r5, #0]
 800cee6:	2601      	movs	r6, #1
 800cee8:	1c85      	adds	r5, r0, #2
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d057      	beq.n	800cf9e <_strtoul_l.constprop.0+0xd6>
 800ceee:	2b10      	cmp	r3, #16
 800cef0:	d109      	bne.n	800cf06 <_strtoul_l.constprop.0+0x3e>
 800cef2:	2c30      	cmp	r4, #48	; 0x30
 800cef4:	d107      	bne.n	800cf06 <_strtoul_l.constprop.0+0x3e>
 800cef6:	7828      	ldrb	r0, [r5, #0]
 800cef8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800cefc:	2858      	cmp	r0, #88	; 0x58
 800cefe:	d149      	bne.n	800cf94 <_strtoul_l.constprop.0+0xcc>
 800cf00:	786c      	ldrb	r4, [r5, #1]
 800cf02:	2310      	movs	r3, #16
 800cf04:	3502      	adds	r5, #2
 800cf06:	f04f 38ff 	mov.w	r8, #4294967295
 800cf0a:	2700      	movs	r7, #0
 800cf0c:	fbb8 f8f3 	udiv	r8, r8, r3
 800cf10:	fb03 f908 	mul.w	r9, r3, r8
 800cf14:	ea6f 0909 	mvn.w	r9, r9
 800cf18:	4638      	mov	r0, r7
 800cf1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf1e:	f1bc 0f09 	cmp.w	ip, #9
 800cf22:	d815      	bhi.n	800cf50 <_strtoul_l.constprop.0+0x88>
 800cf24:	4664      	mov	r4, ip
 800cf26:	42a3      	cmp	r3, r4
 800cf28:	dd23      	ble.n	800cf72 <_strtoul_l.constprop.0+0xaa>
 800cf2a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800cf2e:	d007      	beq.n	800cf40 <_strtoul_l.constprop.0+0x78>
 800cf30:	4580      	cmp	r8, r0
 800cf32:	d31b      	bcc.n	800cf6c <_strtoul_l.constprop.0+0xa4>
 800cf34:	d101      	bne.n	800cf3a <_strtoul_l.constprop.0+0x72>
 800cf36:	45a1      	cmp	r9, r4
 800cf38:	db18      	blt.n	800cf6c <_strtoul_l.constprop.0+0xa4>
 800cf3a:	fb00 4003 	mla	r0, r0, r3, r4
 800cf3e:	2701      	movs	r7, #1
 800cf40:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf44:	e7e9      	b.n	800cf1a <_strtoul_l.constprop.0+0x52>
 800cf46:	2c2b      	cmp	r4, #43	; 0x2b
 800cf48:	bf04      	itt	eq
 800cf4a:	782c      	ldrbeq	r4, [r5, #0]
 800cf4c:	1c85      	addeq	r5, r0, #2
 800cf4e:	e7cc      	b.n	800ceea <_strtoul_l.constprop.0+0x22>
 800cf50:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cf54:	f1bc 0f19 	cmp.w	ip, #25
 800cf58:	d801      	bhi.n	800cf5e <_strtoul_l.constprop.0+0x96>
 800cf5a:	3c37      	subs	r4, #55	; 0x37
 800cf5c:	e7e3      	b.n	800cf26 <_strtoul_l.constprop.0+0x5e>
 800cf5e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cf62:	f1bc 0f19 	cmp.w	ip, #25
 800cf66:	d804      	bhi.n	800cf72 <_strtoul_l.constprop.0+0xaa>
 800cf68:	3c57      	subs	r4, #87	; 0x57
 800cf6a:	e7dc      	b.n	800cf26 <_strtoul_l.constprop.0+0x5e>
 800cf6c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf70:	e7e6      	b.n	800cf40 <_strtoul_l.constprop.0+0x78>
 800cf72:	1c7b      	adds	r3, r7, #1
 800cf74:	d106      	bne.n	800cf84 <_strtoul_l.constprop.0+0xbc>
 800cf76:	2322      	movs	r3, #34	; 0x22
 800cf78:	f8ce 3000 	str.w	r3, [lr]
 800cf7c:	4638      	mov	r0, r7
 800cf7e:	b932      	cbnz	r2, 800cf8e <_strtoul_l.constprop.0+0xc6>
 800cf80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf84:	b106      	cbz	r6, 800cf88 <_strtoul_l.constprop.0+0xc0>
 800cf86:	4240      	negs	r0, r0
 800cf88:	2a00      	cmp	r2, #0
 800cf8a:	d0f9      	beq.n	800cf80 <_strtoul_l.constprop.0+0xb8>
 800cf8c:	b107      	cbz	r7, 800cf90 <_strtoul_l.constprop.0+0xc8>
 800cf8e:	1e69      	subs	r1, r5, #1
 800cf90:	6011      	str	r1, [r2, #0]
 800cf92:	e7f5      	b.n	800cf80 <_strtoul_l.constprop.0+0xb8>
 800cf94:	2430      	movs	r4, #48	; 0x30
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d1b5      	bne.n	800cf06 <_strtoul_l.constprop.0+0x3e>
 800cf9a:	2308      	movs	r3, #8
 800cf9c:	e7b3      	b.n	800cf06 <_strtoul_l.constprop.0+0x3e>
 800cf9e:	2c30      	cmp	r4, #48	; 0x30
 800cfa0:	d0a9      	beq.n	800cef6 <_strtoul_l.constprop.0+0x2e>
 800cfa2:	230a      	movs	r3, #10
 800cfa4:	e7af      	b.n	800cf06 <_strtoul_l.constprop.0+0x3e>
 800cfa6:	bf00      	nop
 800cfa8:	0800d901 	.word	0x0800d901

0800cfac <_strtoul_r>:
 800cfac:	f7ff bf8c 	b.w	800cec8 <_strtoul_l.constprop.0>

0800cfb0 <__ascii_wctomb>:
 800cfb0:	b149      	cbz	r1, 800cfc6 <__ascii_wctomb+0x16>
 800cfb2:	2aff      	cmp	r2, #255	; 0xff
 800cfb4:	bf85      	ittet	hi
 800cfb6:	238a      	movhi	r3, #138	; 0x8a
 800cfb8:	6003      	strhi	r3, [r0, #0]
 800cfba:	700a      	strbls	r2, [r1, #0]
 800cfbc:	f04f 30ff 	movhi.w	r0, #4294967295
 800cfc0:	bf98      	it	ls
 800cfc2:	2001      	movls	r0, #1
 800cfc4:	4770      	bx	lr
 800cfc6:	4608      	mov	r0, r1
 800cfc8:	4770      	bx	lr
	...

0800cfcc <fiprintf>:
 800cfcc:	b40e      	push	{r1, r2, r3}
 800cfce:	b503      	push	{r0, r1, lr}
 800cfd0:	4601      	mov	r1, r0
 800cfd2:	ab03      	add	r3, sp, #12
 800cfd4:	4805      	ldr	r0, [pc, #20]	; (800cfec <fiprintf+0x20>)
 800cfd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfda:	6800      	ldr	r0, [r0, #0]
 800cfdc:	9301      	str	r3, [sp, #4]
 800cfde:	f000 f83f 	bl	800d060 <_vfiprintf_r>
 800cfe2:	b002      	add	sp, #8
 800cfe4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfe8:	b003      	add	sp, #12
 800cfea:	4770      	bx	lr
 800cfec:	20000060 	.word	0x20000060

0800cff0 <abort>:
 800cff0:	b508      	push	{r3, lr}
 800cff2:	2006      	movs	r0, #6
 800cff4:	f000 fa0c 	bl	800d410 <raise>
 800cff8:	2001      	movs	r0, #1
 800cffa:	f7f5 fd21 	bl	8002a40 <_exit>

0800cffe <_malloc_usable_size_r>:
 800cffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d002:	1f18      	subs	r0, r3, #4
 800d004:	2b00      	cmp	r3, #0
 800d006:	bfbc      	itt	lt
 800d008:	580b      	ldrlt	r3, [r1, r0]
 800d00a:	18c0      	addlt	r0, r0, r3
 800d00c:	4770      	bx	lr

0800d00e <__sfputc_r>:
 800d00e:	6893      	ldr	r3, [r2, #8]
 800d010:	3b01      	subs	r3, #1
 800d012:	2b00      	cmp	r3, #0
 800d014:	b410      	push	{r4}
 800d016:	6093      	str	r3, [r2, #8]
 800d018:	da08      	bge.n	800d02c <__sfputc_r+0x1e>
 800d01a:	6994      	ldr	r4, [r2, #24]
 800d01c:	42a3      	cmp	r3, r4
 800d01e:	db01      	blt.n	800d024 <__sfputc_r+0x16>
 800d020:	290a      	cmp	r1, #10
 800d022:	d103      	bne.n	800d02c <__sfputc_r+0x1e>
 800d024:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d028:	f000 b934 	b.w	800d294 <__swbuf_r>
 800d02c:	6813      	ldr	r3, [r2, #0]
 800d02e:	1c58      	adds	r0, r3, #1
 800d030:	6010      	str	r0, [r2, #0]
 800d032:	7019      	strb	r1, [r3, #0]
 800d034:	4608      	mov	r0, r1
 800d036:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <__sfputs_r>:
 800d03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03e:	4606      	mov	r6, r0
 800d040:	460f      	mov	r7, r1
 800d042:	4614      	mov	r4, r2
 800d044:	18d5      	adds	r5, r2, r3
 800d046:	42ac      	cmp	r4, r5
 800d048:	d101      	bne.n	800d04e <__sfputs_r+0x12>
 800d04a:	2000      	movs	r0, #0
 800d04c:	e007      	b.n	800d05e <__sfputs_r+0x22>
 800d04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d052:	463a      	mov	r2, r7
 800d054:	4630      	mov	r0, r6
 800d056:	f7ff ffda 	bl	800d00e <__sfputc_r>
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	d1f3      	bne.n	800d046 <__sfputs_r+0xa>
 800d05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d060 <_vfiprintf_r>:
 800d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d064:	460d      	mov	r5, r1
 800d066:	b09d      	sub	sp, #116	; 0x74
 800d068:	4614      	mov	r4, r2
 800d06a:	4698      	mov	r8, r3
 800d06c:	4606      	mov	r6, r0
 800d06e:	b118      	cbz	r0, 800d078 <_vfiprintf_r+0x18>
 800d070:	6a03      	ldr	r3, [r0, #32]
 800d072:	b90b      	cbnz	r3, 800d078 <_vfiprintf_r+0x18>
 800d074:	f7fc f954 	bl	8009320 <__sinit>
 800d078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d07a:	07d9      	lsls	r1, r3, #31
 800d07c:	d405      	bmi.n	800d08a <_vfiprintf_r+0x2a>
 800d07e:	89ab      	ldrh	r3, [r5, #12]
 800d080:	059a      	lsls	r2, r3, #22
 800d082:	d402      	bmi.n	800d08a <_vfiprintf_r+0x2a>
 800d084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d086:	f7fc fa9e 	bl	80095c6 <__retarget_lock_acquire_recursive>
 800d08a:	89ab      	ldrh	r3, [r5, #12]
 800d08c:	071b      	lsls	r3, r3, #28
 800d08e:	d501      	bpl.n	800d094 <_vfiprintf_r+0x34>
 800d090:	692b      	ldr	r3, [r5, #16]
 800d092:	b99b      	cbnz	r3, 800d0bc <_vfiprintf_r+0x5c>
 800d094:	4629      	mov	r1, r5
 800d096:	4630      	mov	r0, r6
 800d098:	f000 f93a 	bl	800d310 <__swsetup_r>
 800d09c:	b170      	cbz	r0, 800d0bc <_vfiprintf_r+0x5c>
 800d09e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0a0:	07dc      	lsls	r4, r3, #31
 800d0a2:	d504      	bpl.n	800d0ae <_vfiprintf_r+0x4e>
 800d0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a8:	b01d      	add	sp, #116	; 0x74
 800d0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	0598      	lsls	r0, r3, #22
 800d0b2:	d4f7      	bmi.n	800d0a4 <_vfiprintf_r+0x44>
 800d0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0b6:	f7fc fa87 	bl	80095c8 <__retarget_lock_release_recursive>
 800d0ba:	e7f3      	b.n	800d0a4 <_vfiprintf_r+0x44>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c0:	2320      	movs	r3, #32
 800d0c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0ca:	2330      	movs	r3, #48	; 0x30
 800d0cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d280 <_vfiprintf_r+0x220>
 800d0d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0d4:	f04f 0901 	mov.w	r9, #1
 800d0d8:	4623      	mov	r3, r4
 800d0da:	469a      	mov	sl, r3
 800d0dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0e0:	b10a      	cbz	r2, 800d0e6 <_vfiprintf_r+0x86>
 800d0e2:	2a25      	cmp	r2, #37	; 0x25
 800d0e4:	d1f9      	bne.n	800d0da <_vfiprintf_r+0x7a>
 800d0e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d0ea:	d00b      	beq.n	800d104 <_vfiprintf_r+0xa4>
 800d0ec:	465b      	mov	r3, fp
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7ff ffa2 	bl	800d03c <__sfputs_r>
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	f000 80a9 	beq.w	800d250 <_vfiprintf_r+0x1f0>
 800d0fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d100:	445a      	add	r2, fp
 800d102:	9209      	str	r2, [sp, #36]	; 0x24
 800d104:	f89a 3000 	ldrb.w	r3, [sl]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 80a1 	beq.w	800d250 <_vfiprintf_r+0x1f0>
 800d10e:	2300      	movs	r3, #0
 800d110:	f04f 32ff 	mov.w	r2, #4294967295
 800d114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d118:	f10a 0a01 	add.w	sl, sl, #1
 800d11c:	9304      	str	r3, [sp, #16]
 800d11e:	9307      	str	r3, [sp, #28]
 800d120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d124:	931a      	str	r3, [sp, #104]	; 0x68
 800d126:	4654      	mov	r4, sl
 800d128:	2205      	movs	r2, #5
 800d12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12e:	4854      	ldr	r0, [pc, #336]	; (800d280 <_vfiprintf_r+0x220>)
 800d130:	f7f3 f876 	bl	8000220 <memchr>
 800d134:	9a04      	ldr	r2, [sp, #16]
 800d136:	b9d8      	cbnz	r0, 800d170 <_vfiprintf_r+0x110>
 800d138:	06d1      	lsls	r1, r2, #27
 800d13a:	bf44      	itt	mi
 800d13c:	2320      	movmi	r3, #32
 800d13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d142:	0713      	lsls	r3, r2, #28
 800d144:	bf44      	itt	mi
 800d146:	232b      	movmi	r3, #43	; 0x2b
 800d148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d14c:	f89a 3000 	ldrb.w	r3, [sl]
 800d150:	2b2a      	cmp	r3, #42	; 0x2a
 800d152:	d015      	beq.n	800d180 <_vfiprintf_r+0x120>
 800d154:	9a07      	ldr	r2, [sp, #28]
 800d156:	4654      	mov	r4, sl
 800d158:	2000      	movs	r0, #0
 800d15a:	f04f 0c0a 	mov.w	ip, #10
 800d15e:	4621      	mov	r1, r4
 800d160:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d164:	3b30      	subs	r3, #48	; 0x30
 800d166:	2b09      	cmp	r3, #9
 800d168:	d94d      	bls.n	800d206 <_vfiprintf_r+0x1a6>
 800d16a:	b1b0      	cbz	r0, 800d19a <_vfiprintf_r+0x13a>
 800d16c:	9207      	str	r2, [sp, #28]
 800d16e:	e014      	b.n	800d19a <_vfiprintf_r+0x13a>
 800d170:	eba0 0308 	sub.w	r3, r0, r8
 800d174:	fa09 f303 	lsl.w	r3, r9, r3
 800d178:	4313      	orrs	r3, r2
 800d17a:	9304      	str	r3, [sp, #16]
 800d17c:	46a2      	mov	sl, r4
 800d17e:	e7d2      	b.n	800d126 <_vfiprintf_r+0xc6>
 800d180:	9b03      	ldr	r3, [sp, #12]
 800d182:	1d19      	adds	r1, r3, #4
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	9103      	str	r1, [sp, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	bfbb      	ittet	lt
 800d18c:	425b      	neglt	r3, r3
 800d18e:	f042 0202 	orrlt.w	r2, r2, #2
 800d192:	9307      	strge	r3, [sp, #28]
 800d194:	9307      	strlt	r3, [sp, #28]
 800d196:	bfb8      	it	lt
 800d198:	9204      	strlt	r2, [sp, #16]
 800d19a:	7823      	ldrb	r3, [r4, #0]
 800d19c:	2b2e      	cmp	r3, #46	; 0x2e
 800d19e:	d10c      	bne.n	800d1ba <_vfiprintf_r+0x15a>
 800d1a0:	7863      	ldrb	r3, [r4, #1]
 800d1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1a4:	d134      	bne.n	800d210 <_vfiprintf_r+0x1b0>
 800d1a6:	9b03      	ldr	r3, [sp, #12]
 800d1a8:	1d1a      	adds	r2, r3, #4
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	9203      	str	r2, [sp, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfb8      	it	lt
 800d1b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1b6:	3402      	adds	r4, #2
 800d1b8:	9305      	str	r3, [sp, #20]
 800d1ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d290 <_vfiprintf_r+0x230>
 800d1be:	7821      	ldrb	r1, [r4, #0]
 800d1c0:	2203      	movs	r2, #3
 800d1c2:	4650      	mov	r0, sl
 800d1c4:	f7f3 f82c 	bl	8000220 <memchr>
 800d1c8:	b138      	cbz	r0, 800d1da <_vfiprintf_r+0x17a>
 800d1ca:	9b04      	ldr	r3, [sp, #16]
 800d1cc:	eba0 000a 	sub.w	r0, r0, sl
 800d1d0:	2240      	movs	r2, #64	; 0x40
 800d1d2:	4082      	lsls	r2, r0
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	3401      	adds	r4, #1
 800d1d8:	9304      	str	r3, [sp, #16]
 800d1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1de:	4829      	ldr	r0, [pc, #164]	; (800d284 <_vfiprintf_r+0x224>)
 800d1e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1e4:	2206      	movs	r2, #6
 800d1e6:	f7f3 f81b 	bl	8000220 <memchr>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d03f      	beq.n	800d26e <_vfiprintf_r+0x20e>
 800d1ee:	4b26      	ldr	r3, [pc, #152]	; (800d288 <_vfiprintf_r+0x228>)
 800d1f0:	bb1b      	cbnz	r3, 800d23a <_vfiprintf_r+0x1da>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	3307      	adds	r3, #7
 800d1f6:	f023 0307 	bic.w	r3, r3, #7
 800d1fa:	3308      	adds	r3, #8
 800d1fc:	9303      	str	r3, [sp, #12]
 800d1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d200:	443b      	add	r3, r7
 800d202:	9309      	str	r3, [sp, #36]	; 0x24
 800d204:	e768      	b.n	800d0d8 <_vfiprintf_r+0x78>
 800d206:	fb0c 3202 	mla	r2, ip, r2, r3
 800d20a:	460c      	mov	r4, r1
 800d20c:	2001      	movs	r0, #1
 800d20e:	e7a6      	b.n	800d15e <_vfiprintf_r+0xfe>
 800d210:	2300      	movs	r3, #0
 800d212:	3401      	adds	r4, #1
 800d214:	9305      	str	r3, [sp, #20]
 800d216:	4619      	mov	r1, r3
 800d218:	f04f 0c0a 	mov.w	ip, #10
 800d21c:	4620      	mov	r0, r4
 800d21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d222:	3a30      	subs	r2, #48	; 0x30
 800d224:	2a09      	cmp	r2, #9
 800d226:	d903      	bls.n	800d230 <_vfiprintf_r+0x1d0>
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d0c6      	beq.n	800d1ba <_vfiprintf_r+0x15a>
 800d22c:	9105      	str	r1, [sp, #20]
 800d22e:	e7c4      	b.n	800d1ba <_vfiprintf_r+0x15a>
 800d230:	fb0c 2101 	mla	r1, ip, r1, r2
 800d234:	4604      	mov	r4, r0
 800d236:	2301      	movs	r3, #1
 800d238:	e7f0      	b.n	800d21c <_vfiprintf_r+0x1bc>
 800d23a:	ab03      	add	r3, sp, #12
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	462a      	mov	r2, r5
 800d240:	4b12      	ldr	r3, [pc, #72]	; (800d28c <_vfiprintf_r+0x22c>)
 800d242:	a904      	add	r1, sp, #16
 800d244:	4630      	mov	r0, r6
 800d246:	f7fb fa09 	bl	800865c <_printf_float>
 800d24a:	4607      	mov	r7, r0
 800d24c:	1c78      	adds	r0, r7, #1
 800d24e:	d1d6      	bne.n	800d1fe <_vfiprintf_r+0x19e>
 800d250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d252:	07d9      	lsls	r1, r3, #31
 800d254:	d405      	bmi.n	800d262 <_vfiprintf_r+0x202>
 800d256:	89ab      	ldrh	r3, [r5, #12]
 800d258:	059a      	lsls	r2, r3, #22
 800d25a:	d402      	bmi.n	800d262 <_vfiprintf_r+0x202>
 800d25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d25e:	f7fc f9b3 	bl	80095c8 <__retarget_lock_release_recursive>
 800d262:	89ab      	ldrh	r3, [r5, #12]
 800d264:	065b      	lsls	r3, r3, #25
 800d266:	f53f af1d 	bmi.w	800d0a4 <_vfiprintf_r+0x44>
 800d26a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d26c:	e71c      	b.n	800d0a8 <_vfiprintf_r+0x48>
 800d26e:	ab03      	add	r3, sp, #12
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	462a      	mov	r2, r5
 800d274:	4b05      	ldr	r3, [pc, #20]	; (800d28c <_vfiprintf_r+0x22c>)
 800d276:	a904      	add	r1, sp, #16
 800d278:	4630      	mov	r0, r6
 800d27a:	f7fb fc93 	bl	8008ba4 <_printf_i>
 800d27e:	e7e4      	b.n	800d24a <_vfiprintf_r+0x1ea>
 800d280:	0800da01 	.word	0x0800da01
 800d284:	0800da0b 	.word	0x0800da0b
 800d288:	0800865d 	.word	0x0800865d
 800d28c:	0800d03d 	.word	0x0800d03d
 800d290:	0800da07 	.word	0x0800da07

0800d294 <__swbuf_r>:
 800d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d296:	460e      	mov	r6, r1
 800d298:	4614      	mov	r4, r2
 800d29a:	4605      	mov	r5, r0
 800d29c:	b118      	cbz	r0, 800d2a6 <__swbuf_r+0x12>
 800d29e:	6a03      	ldr	r3, [r0, #32]
 800d2a0:	b90b      	cbnz	r3, 800d2a6 <__swbuf_r+0x12>
 800d2a2:	f7fc f83d 	bl	8009320 <__sinit>
 800d2a6:	69a3      	ldr	r3, [r4, #24]
 800d2a8:	60a3      	str	r3, [r4, #8]
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	071a      	lsls	r2, r3, #28
 800d2ae:	d525      	bpl.n	800d2fc <__swbuf_r+0x68>
 800d2b0:	6923      	ldr	r3, [r4, #16]
 800d2b2:	b31b      	cbz	r3, 800d2fc <__swbuf_r+0x68>
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	6922      	ldr	r2, [r4, #16]
 800d2b8:	1a98      	subs	r0, r3, r2
 800d2ba:	6963      	ldr	r3, [r4, #20]
 800d2bc:	b2f6      	uxtb	r6, r6
 800d2be:	4283      	cmp	r3, r0
 800d2c0:	4637      	mov	r7, r6
 800d2c2:	dc04      	bgt.n	800d2ce <__swbuf_r+0x3a>
 800d2c4:	4621      	mov	r1, r4
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f7ff f952 	bl	800c570 <_fflush_r>
 800d2cc:	b9e0      	cbnz	r0, 800d308 <__swbuf_r+0x74>
 800d2ce:	68a3      	ldr	r3, [r4, #8]
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	60a3      	str	r3, [r4, #8]
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	6022      	str	r2, [r4, #0]
 800d2da:	701e      	strb	r6, [r3, #0]
 800d2dc:	6962      	ldr	r2, [r4, #20]
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d004      	beq.n	800d2ee <__swbuf_r+0x5a>
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	07db      	lsls	r3, r3, #31
 800d2e8:	d506      	bpl.n	800d2f8 <__swbuf_r+0x64>
 800d2ea:	2e0a      	cmp	r6, #10
 800d2ec:	d104      	bne.n	800d2f8 <__swbuf_r+0x64>
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	f7ff f93d 	bl	800c570 <_fflush_r>
 800d2f6:	b938      	cbnz	r0, 800d308 <__swbuf_r+0x74>
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	4628      	mov	r0, r5
 800d300:	f000 f806 	bl	800d310 <__swsetup_r>
 800d304:	2800      	cmp	r0, #0
 800d306:	d0d5      	beq.n	800d2b4 <__swbuf_r+0x20>
 800d308:	f04f 37ff 	mov.w	r7, #4294967295
 800d30c:	e7f4      	b.n	800d2f8 <__swbuf_r+0x64>
	...

0800d310 <__swsetup_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4b2a      	ldr	r3, [pc, #168]	; (800d3bc <__swsetup_r+0xac>)
 800d314:	4605      	mov	r5, r0
 800d316:	6818      	ldr	r0, [r3, #0]
 800d318:	460c      	mov	r4, r1
 800d31a:	b118      	cbz	r0, 800d324 <__swsetup_r+0x14>
 800d31c:	6a03      	ldr	r3, [r0, #32]
 800d31e:	b90b      	cbnz	r3, 800d324 <__swsetup_r+0x14>
 800d320:	f7fb fffe 	bl	8009320 <__sinit>
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d32a:	0718      	lsls	r0, r3, #28
 800d32c:	d422      	bmi.n	800d374 <__swsetup_r+0x64>
 800d32e:	06d9      	lsls	r1, r3, #27
 800d330:	d407      	bmi.n	800d342 <__swsetup_r+0x32>
 800d332:	2309      	movs	r3, #9
 800d334:	602b      	str	r3, [r5, #0]
 800d336:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d33a:	81a3      	strh	r3, [r4, #12]
 800d33c:	f04f 30ff 	mov.w	r0, #4294967295
 800d340:	e034      	b.n	800d3ac <__swsetup_r+0x9c>
 800d342:	0758      	lsls	r0, r3, #29
 800d344:	d512      	bpl.n	800d36c <__swsetup_r+0x5c>
 800d346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d348:	b141      	cbz	r1, 800d35c <__swsetup_r+0x4c>
 800d34a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d34e:	4299      	cmp	r1, r3
 800d350:	d002      	beq.n	800d358 <__swsetup_r+0x48>
 800d352:	4628      	mov	r0, r5
 800d354:	f7fc ffca 	bl	800a2ec <_free_r>
 800d358:	2300      	movs	r3, #0
 800d35a:	6363      	str	r3, [r4, #52]	; 0x34
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	2300      	movs	r3, #0
 800d366:	6063      	str	r3, [r4, #4]
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	6023      	str	r3, [r4, #0]
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	f043 0308 	orr.w	r3, r3, #8
 800d372:	81a3      	strh	r3, [r4, #12]
 800d374:	6923      	ldr	r3, [r4, #16]
 800d376:	b94b      	cbnz	r3, 800d38c <__swsetup_r+0x7c>
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d37e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d382:	d003      	beq.n	800d38c <__swsetup_r+0x7c>
 800d384:	4621      	mov	r1, r4
 800d386:	4628      	mov	r0, r5
 800d388:	f000 f884 	bl	800d494 <__smakebuf_r>
 800d38c:	89a0      	ldrh	r0, [r4, #12]
 800d38e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d392:	f010 0301 	ands.w	r3, r0, #1
 800d396:	d00a      	beq.n	800d3ae <__swsetup_r+0x9e>
 800d398:	2300      	movs	r3, #0
 800d39a:	60a3      	str	r3, [r4, #8]
 800d39c:	6963      	ldr	r3, [r4, #20]
 800d39e:	425b      	negs	r3, r3
 800d3a0:	61a3      	str	r3, [r4, #24]
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	b943      	cbnz	r3, 800d3b8 <__swsetup_r+0xa8>
 800d3a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3aa:	d1c4      	bne.n	800d336 <__swsetup_r+0x26>
 800d3ac:	bd38      	pop	{r3, r4, r5, pc}
 800d3ae:	0781      	lsls	r1, r0, #30
 800d3b0:	bf58      	it	pl
 800d3b2:	6963      	ldrpl	r3, [r4, #20]
 800d3b4:	60a3      	str	r3, [r4, #8]
 800d3b6:	e7f4      	b.n	800d3a2 <__swsetup_r+0x92>
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	e7f7      	b.n	800d3ac <__swsetup_r+0x9c>
 800d3bc:	20000060 	.word	0x20000060

0800d3c0 <_raise_r>:
 800d3c0:	291f      	cmp	r1, #31
 800d3c2:	b538      	push	{r3, r4, r5, lr}
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	d904      	bls.n	800d3d4 <_raise_r+0x14>
 800d3ca:	2316      	movs	r3, #22
 800d3cc:	6003      	str	r3, [r0, #0]
 800d3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d3d6:	b112      	cbz	r2, 800d3de <_raise_r+0x1e>
 800d3d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3dc:	b94b      	cbnz	r3, 800d3f2 <_raise_r+0x32>
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 f830 	bl	800d444 <_getpid_r>
 800d3e4:	462a      	mov	r2, r5
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ee:	f000 b817 	b.w	800d420 <_kill_r>
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d00a      	beq.n	800d40c <_raise_r+0x4c>
 800d3f6:	1c59      	adds	r1, r3, #1
 800d3f8:	d103      	bne.n	800d402 <_raise_r+0x42>
 800d3fa:	2316      	movs	r3, #22
 800d3fc:	6003      	str	r3, [r0, #0]
 800d3fe:	2001      	movs	r0, #1
 800d400:	e7e7      	b.n	800d3d2 <_raise_r+0x12>
 800d402:	2400      	movs	r4, #0
 800d404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d408:	4628      	mov	r0, r5
 800d40a:	4798      	blx	r3
 800d40c:	2000      	movs	r0, #0
 800d40e:	e7e0      	b.n	800d3d2 <_raise_r+0x12>

0800d410 <raise>:
 800d410:	4b02      	ldr	r3, [pc, #8]	; (800d41c <raise+0xc>)
 800d412:	4601      	mov	r1, r0
 800d414:	6818      	ldr	r0, [r3, #0]
 800d416:	f7ff bfd3 	b.w	800d3c0 <_raise_r>
 800d41a:	bf00      	nop
 800d41c:	20000060 	.word	0x20000060

0800d420 <_kill_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4d07      	ldr	r5, [pc, #28]	; (800d440 <_kill_r+0x20>)
 800d424:	2300      	movs	r3, #0
 800d426:	4604      	mov	r4, r0
 800d428:	4608      	mov	r0, r1
 800d42a:	4611      	mov	r1, r2
 800d42c:	602b      	str	r3, [r5, #0]
 800d42e:	f7f5 faf7 	bl	8002a20 <_kill>
 800d432:	1c43      	adds	r3, r0, #1
 800d434:	d102      	bne.n	800d43c <_kill_r+0x1c>
 800d436:	682b      	ldr	r3, [r5, #0]
 800d438:	b103      	cbz	r3, 800d43c <_kill_r+0x1c>
 800d43a:	6023      	str	r3, [r4, #0]
 800d43c:	bd38      	pop	{r3, r4, r5, pc}
 800d43e:	bf00      	nop
 800d440:	2000080c 	.word	0x2000080c

0800d444 <_getpid_r>:
 800d444:	f7f5 bae4 	b.w	8002a10 <_getpid>

0800d448 <__swhatbuf_r>:
 800d448:	b570      	push	{r4, r5, r6, lr}
 800d44a:	460c      	mov	r4, r1
 800d44c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d450:	2900      	cmp	r1, #0
 800d452:	b096      	sub	sp, #88	; 0x58
 800d454:	4615      	mov	r5, r2
 800d456:	461e      	mov	r6, r3
 800d458:	da0d      	bge.n	800d476 <__swhatbuf_r+0x2e>
 800d45a:	89a3      	ldrh	r3, [r4, #12]
 800d45c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d460:	f04f 0100 	mov.w	r1, #0
 800d464:	bf0c      	ite	eq
 800d466:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d46a:	2340      	movne	r3, #64	; 0x40
 800d46c:	2000      	movs	r0, #0
 800d46e:	6031      	str	r1, [r6, #0]
 800d470:	602b      	str	r3, [r5, #0]
 800d472:	b016      	add	sp, #88	; 0x58
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	466a      	mov	r2, sp
 800d478:	f000 f848 	bl	800d50c <_fstat_r>
 800d47c:	2800      	cmp	r0, #0
 800d47e:	dbec      	blt.n	800d45a <__swhatbuf_r+0x12>
 800d480:	9901      	ldr	r1, [sp, #4]
 800d482:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d486:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d48a:	4259      	negs	r1, r3
 800d48c:	4159      	adcs	r1, r3
 800d48e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d492:	e7eb      	b.n	800d46c <__swhatbuf_r+0x24>

0800d494 <__smakebuf_r>:
 800d494:	898b      	ldrh	r3, [r1, #12]
 800d496:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d498:	079d      	lsls	r5, r3, #30
 800d49a:	4606      	mov	r6, r0
 800d49c:	460c      	mov	r4, r1
 800d49e:	d507      	bpl.n	800d4b0 <__smakebuf_r+0x1c>
 800d4a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4a4:	6023      	str	r3, [r4, #0]
 800d4a6:	6123      	str	r3, [r4, #16]
 800d4a8:	2301      	movs	r3, #1
 800d4aa:	6163      	str	r3, [r4, #20]
 800d4ac:	b002      	add	sp, #8
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	ab01      	add	r3, sp, #4
 800d4b2:	466a      	mov	r2, sp
 800d4b4:	f7ff ffc8 	bl	800d448 <__swhatbuf_r>
 800d4b8:	9900      	ldr	r1, [sp, #0]
 800d4ba:	4605      	mov	r5, r0
 800d4bc:	4630      	mov	r0, r6
 800d4be:	f7fc ff89 	bl	800a3d4 <_malloc_r>
 800d4c2:	b948      	cbnz	r0, 800d4d8 <__smakebuf_r+0x44>
 800d4c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4c8:	059a      	lsls	r2, r3, #22
 800d4ca:	d4ef      	bmi.n	800d4ac <__smakebuf_r+0x18>
 800d4cc:	f023 0303 	bic.w	r3, r3, #3
 800d4d0:	f043 0302 	orr.w	r3, r3, #2
 800d4d4:	81a3      	strh	r3, [r4, #12]
 800d4d6:	e7e3      	b.n	800d4a0 <__smakebuf_r+0xc>
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	6020      	str	r0, [r4, #0]
 800d4dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4e0:	81a3      	strh	r3, [r4, #12]
 800d4e2:	9b00      	ldr	r3, [sp, #0]
 800d4e4:	6163      	str	r3, [r4, #20]
 800d4e6:	9b01      	ldr	r3, [sp, #4]
 800d4e8:	6120      	str	r0, [r4, #16]
 800d4ea:	b15b      	cbz	r3, 800d504 <__smakebuf_r+0x70>
 800d4ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4f0:	4630      	mov	r0, r6
 800d4f2:	f000 f81d 	bl	800d530 <_isatty_r>
 800d4f6:	b128      	cbz	r0, 800d504 <__smakebuf_r+0x70>
 800d4f8:	89a3      	ldrh	r3, [r4, #12]
 800d4fa:	f023 0303 	bic.w	r3, r3, #3
 800d4fe:	f043 0301 	orr.w	r3, r3, #1
 800d502:	81a3      	strh	r3, [r4, #12]
 800d504:	89a3      	ldrh	r3, [r4, #12]
 800d506:	431d      	orrs	r5, r3
 800d508:	81a5      	strh	r5, [r4, #12]
 800d50a:	e7cf      	b.n	800d4ac <__smakebuf_r+0x18>

0800d50c <_fstat_r>:
 800d50c:	b538      	push	{r3, r4, r5, lr}
 800d50e:	4d07      	ldr	r5, [pc, #28]	; (800d52c <_fstat_r+0x20>)
 800d510:	2300      	movs	r3, #0
 800d512:	4604      	mov	r4, r0
 800d514:	4608      	mov	r0, r1
 800d516:	4611      	mov	r1, r2
 800d518:	602b      	str	r3, [r5, #0]
 800d51a:	f7f5 fae0 	bl	8002ade <_fstat>
 800d51e:	1c43      	adds	r3, r0, #1
 800d520:	d102      	bne.n	800d528 <_fstat_r+0x1c>
 800d522:	682b      	ldr	r3, [r5, #0]
 800d524:	b103      	cbz	r3, 800d528 <_fstat_r+0x1c>
 800d526:	6023      	str	r3, [r4, #0]
 800d528:	bd38      	pop	{r3, r4, r5, pc}
 800d52a:	bf00      	nop
 800d52c:	2000080c 	.word	0x2000080c

0800d530 <_isatty_r>:
 800d530:	b538      	push	{r3, r4, r5, lr}
 800d532:	4d06      	ldr	r5, [pc, #24]	; (800d54c <_isatty_r+0x1c>)
 800d534:	2300      	movs	r3, #0
 800d536:	4604      	mov	r4, r0
 800d538:	4608      	mov	r0, r1
 800d53a:	602b      	str	r3, [r5, #0]
 800d53c:	f7f5 fadf 	bl	8002afe <_isatty>
 800d540:	1c43      	adds	r3, r0, #1
 800d542:	d102      	bne.n	800d54a <_isatty_r+0x1a>
 800d544:	682b      	ldr	r3, [r5, #0]
 800d546:	b103      	cbz	r3, 800d54a <_isatty_r+0x1a>
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	bd38      	pop	{r3, r4, r5, pc}
 800d54c:	2000080c 	.word	0x2000080c

0800d550 <_init>:
 800d550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d552:	bf00      	nop
 800d554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d556:	bc08      	pop	{r3}
 800d558:	469e      	mov	lr, r3
 800d55a:	4770      	bx	lr

0800d55c <_fini>:
 800d55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d55e:	bf00      	nop
 800d560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d562:	bc08      	pop	{r3}
 800d564:	469e      	mov	lr, r3
 800d566:	4770      	bx	lr
