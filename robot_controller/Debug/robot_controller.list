
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080055dc  080055dc  000155dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800561c  0800561c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005624  08005624  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800562c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  2000000c  08005638  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08005638  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016968  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ffd  00000000  00000000  000369e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c8  00000000  00000000  000399e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea4  00000000  00000000  0003acb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002645d  00000000  00000000  0003bb54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017156  00000000  00000000  00061fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001025f6  00000000  00000000  00079107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e4c  00000000  00000000  0017b700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0018054c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000000c 	.word	0x2000000c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080055c4 	.word	0x080055c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000010 	.word	0x20000010
 800021c:	080055c4 	.word	0x080055c4

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b970 	b.w	8000518 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	460d      	mov	r5, r1
 8000258:	4604      	mov	r4, r0
 800025a:	460f      	mov	r7, r1
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14a      	bne.n	80002f6 <__udivmoddi4+0xa6>
 8000260:	428a      	cmp	r2, r1
 8000262:	4694      	mov	ip, r2
 8000264:	d965      	bls.n	8000332 <__udivmoddi4+0xe2>
 8000266:	fab2 f382 	clz	r3, r2
 800026a:	b143      	cbz	r3, 800027e <__udivmoddi4+0x2e>
 800026c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000270:	f1c3 0220 	rsb	r2, r3, #32
 8000274:	409f      	lsls	r7, r3
 8000276:	fa20 f202 	lsr.w	r2, r0, r2
 800027a:	4317      	orrs	r7, r2
 800027c:	409c      	lsls	r4, r3
 800027e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000282:	fa1f f58c 	uxth.w	r5, ip
 8000286:	fbb7 f1fe 	udiv	r1, r7, lr
 800028a:	0c22      	lsrs	r2, r4, #16
 800028c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000290:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000294:	fb01 f005 	mul.w	r0, r1, r5
 8000298:	4290      	cmp	r0, r2
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x62>
 800029c:	eb1c 0202 	adds.w	r2, ip, r2
 80002a0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002a4:	f080 811c 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002a8:	4290      	cmp	r0, r2
 80002aa:	f240 8119 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002ae:	3902      	subs	r1, #2
 80002b0:	4462      	add	r2, ip
 80002b2:	1a12      	subs	r2, r2, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ba:	fb0e 2210 	mls	r2, lr, r0, r2
 80002be:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002c2:	fb00 f505 	mul.w	r5, r0, r5
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	d90a      	bls.n	80002e0 <__udivmoddi4+0x90>
 80002ca:	eb1c 0404 	adds.w	r4, ip, r4
 80002ce:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d2:	f080 8107 	bcs.w	80004e4 <__udivmoddi4+0x294>
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	f240 8104 	bls.w	80004e4 <__udivmoddi4+0x294>
 80002dc:	4464      	add	r4, ip
 80002de:	3802      	subs	r0, #2
 80002e0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e4:	1b64      	subs	r4, r4, r5
 80002e6:	2100      	movs	r1, #0
 80002e8:	b11e      	cbz	r6, 80002f2 <__udivmoddi4+0xa2>
 80002ea:	40dc      	lsrs	r4, r3
 80002ec:	2300      	movs	r3, #0
 80002ee:	e9c6 4300 	strd	r4, r3, [r6]
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d908      	bls.n	800030c <__udivmoddi4+0xbc>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80ed 	beq.w	80004da <__udivmoddi4+0x28a>
 8000300:	2100      	movs	r1, #0
 8000302:	e9c6 0500 	strd	r0, r5, [r6]
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	d149      	bne.n	80003a8 <__udivmoddi4+0x158>
 8000314:	42ab      	cmp	r3, r5
 8000316:	d302      	bcc.n	800031e <__udivmoddi4+0xce>
 8000318:	4282      	cmp	r2, r0
 800031a:	f200 80f8 	bhi.w	800050e <__udivmoddi4+0x2be>
 800031e:	1a84      	subs	r4, r0, r2
 8000320:	eb65 0203 	sbc.w	r2, r5, r3
 8000324:	2001      	movs	r0, #1
 8000326:	4617      	mov	r7, r2
 8000328:	2e00      	cmp	r6, #0
 800032a:	d0e2      	beq.n	80002f2 <__udivmoddi4+0xa2>
 800032c:	e9c6 4700 	strd	r4, r7, [r6]
 8000330:	e7df      	b.n	80002f2 <__udivmoddi4+0xa2>
 8000332:	b902      	cbnz	r2, 8000336 <__udivmoddi4+0xe6>
 8000334:	deff      	udf	#255	; 0xff
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	2b00      	cmp	r3, #0
 800033c:	f040 8090 	bne.w	8000460 <__udivmoddi4+0x210>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2101      	movs	r1, #1
 800034c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000350:	fb07 2015 	mls	r0, r7, r5, r2
 8000354:	0c22      	lsrs	r2, r4, #16
 8000356:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800035a:	fb0e f005 	mul.w	r0, lr, r5
 800035e:	4290      	cmp	r0, r2
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x124>
 8000362:	eb1c 0202 	adds.w	r2, ip, r2
 8000366:	f105 38ff 	add.w	r8, r5, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4290      	cmp	r0, r2
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2b8>
 8000372:	4645      	mov	r5, r8
 8000374:	1a12      	subs	r2, r2, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb2 f0f7 	udiv	r0, r2, r7
 800037c:	fb07 2210 	mls	r2, r7, r0, r2
 8000380:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x14e>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 32ff 	add.w	r2, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x14c>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2c2>
 800039c:	4610      	mov	r0, r2
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003a6:	e79f      	b.n	80002e8 <__udivmoddi4+0x98>
 80003a8:	f1c1 0720 	rsb	r7, r1, #32
 80003ac:	408b      	lsls	r3, r1
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ba:	fa20 f307 	lsr.w	r3, r0, r7
 80003be:	40fd      	lsrs	r5, r7
 80003c0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c4:	4323      	orrs	r3, r4
 80003c6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ca:	fa1f fe8c 	uxth.w	lr, ip
 80003ce:	fb09 5518 	mls	r5, r9, r8, r5
 80003d2:	0c1c      	lsrs	r4, r3, #16
 80003d4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d8:	fb08 f50e 	mul.w	r5, r8, lr
 80003dc:	42a5      	cmp	r5, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	fa00 f001 	lsl.w	r0, r0, r1
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2b4>
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2b4>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4464      	add	r4, ip
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	b29d      	uxth	r5, r3
 8000404:	fbb4 f3f9 	udiv	r3, r4, r9
 8000408:	fb09 4413 	mls	r4, r9, r3, r4
 800040c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000410:	fb03 fe0e 	mul.w	lr, r3, lr
 8000414:	45a6      	cmp	lr, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1c 0404 	adds.w	r4, ip, r4
 800041c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2ac>
 8000422:	45a6      	cmp	lr, r4
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2ac>
 8000426:	3b02      	subs	r3, #2
 8000428:	4464      	add	r4, ip
 800042a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800042e:	fba3 9502 	umull	r9, r5, r3, r2
 8000432:	eba4 040e 	sub.w	r4, r4, lr
 8000436:	42ac      	cmp	r4, r5
 8000438:	46c8      	mov	r8, r9
 800043a:	46ae      	mov	lr, r5
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x29c>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x298>
 8000440:	b156      	cbz	r6, 8000458 <__udivmoddi4+0x208>
 8000442:	ebb0 0208 	subs.w	r2, r0, r8
 8000446:	eb64 040e 	sbc.w	r4, r4, lr
 800044a:	fa04 f707 	lsl.w	r7, r4, r7
 800044e:	40ca      	lsrs	r2, r1
 8000450:	40cc      	lsrs	r4, r1
 8000452:	4317      	orrs	r7, r2
 8000454:	e9c6 7400 	strd	r7, r4, [r6]
 8000458:	4618      	mov	r0, r3
 800045a:	2100      	movs	r1, #0
 800045c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000460:	f1c3 0120 	rsb	r1, r3, #32
 8000464:	fa02 fc03 	lsl.w	ip, r2, r3
 8000468:	fa20 f201 	lsr.w	r2, r0, r1
 800046c:	fa25 f101 	lsr.w	r1, r5, r1
 8000470:	409d      	lsls	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000480:	fb07 1510 	mls	r5, r7, r0, r1
 8000484:	0c11      	lsrs	r1, r2, #16
 8000486:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800048a:	fb00 f50e 	mul.w	r5, r0, lr
 800048e:	428d      	cmp	r5, r1
 8000490:	fa04 f403 	lsl.w	r4, r4, r3
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x258>
 8000496:	eb1c 0101 	adds.w	r1, ip, r1
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004a0:	428d      	cmp	r5, r1
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1b49      	subs	r1, r1, r5
 80004aa:	b292      	uxth	r2, r2
 80004ac:	fbb1 f5f7 	udiv	r5, r1, r7
 80004b0:	fb07 1115 	mls	r1, r7, r5, r1
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	fb05 f10e 	mul.w	r1, r5, lr
 80004bc:	4291      	cmp	r1, r2
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x282>
 80004c0:	eb1c 0202 	adds.w	r2, ip, r2
 80004c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2a8>
 80004ca:	4291      	cmp	r1, r2
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2a8>
 80004ce:	3d02      	subs	r5, #2
 80004d0:	4462      	add	r2, ip
 80004d2:	1a52      	subs	r2, r2, r1
 80004d4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0xfc>
 80004da:	4631      	mov	r1, r6
 80004dc:	4630      	mov	r0, r6
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xa2>
 80004e0:	4639      	mov	r1, r7
 80004e2:	e6e6      	b.n	80002b2 <__udivmoddi4+0x62>
 80004e4:	4610      	mov	r0, r2
 80004e6:	e6fb      	b.n	80002e0 <__udivmoddi4+0x90>
 80004e8:	4548      	cmp	r0, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004f4:	3b01      	subs	r3, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f8:	4645      	mov	r5, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x282>
 80004fc:	462b      	mov	r3, r5
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1da>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x258>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000508:	3d02      	subs	r5, #2
 800050a:	4462      	add	r2, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x124>
 800050e:	4608      	mov	r0, r1
 8000510:	e70a      	b.n	8000328 <__udivmoddi4+0xd8>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x14e>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <SystemClock_Config>:




void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b094      	sub	sp, #80	; 0x50
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0318 	add.w	r3, r7, #24
 8000526:	2238      	movs	r2, #56	; 0x38
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f005 f81e 	bl	800556c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800053e:	2000      	movs	r0, #0
 8000540:	f001 f88a 	bl	8001658 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000544:	2302      	movs	r3, #2
 8000546:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800054c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800054e:	2340      	movs	r3, #64	; 0x40
 8000550:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000552:	2302      	movs	r3, #2
 8000554:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000556:	2302      	movs	r3, #2
 8000558:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800055a:	2304      	movs	r3, #4
 800055c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800055e:	2355      	movs	r3, #85	; 0x55
 8000560:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000566:	2302      	movs	r3, #2
 8000568:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800056a:	2302      	movs	r3, #2
 800056c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800056e:	f107 0318 	add.w	r3, r7, #24
 8000572:	4618      	mov	r0, r3
 8000574:	f001 f924 	bl	80017c0 <HAL_RCC_OscConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800057e:	f000 fb21 	bl	8000bc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000582:	230f      	movs	r3, #15
 8000584:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000586:	2303      	movs	r3, #3
 8000588:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	2104      	movs	r1, #4
 800059a:	4618      	mov	r0, r3
 800059c:	f001 fc22 	bl	8001de4 <HAL_RCC_ClockConfig>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005a6:	f000 fb0d 	bl	8000bc4 <Error_Handler>
  }
}
 80005aa:	bf00      	nop
 80005ac:	3750      	adds	r7, #80	; 0x50
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
	...

080005b4 <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	4a2e      	ldr	r2, [pc, #184]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005d6:	4b2c      	ldr	r3, [pc, #176]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005e2:	4b29      	ldr	r3, [pc, #164]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	4a28      	ldr	r2, [pc, #160]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005e8:	f043 0320 	orr.w	r3, r3, #32
 80005ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ee:	4b26      	ldr	r3, [pc, #152]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	f003 0320 	and.w	r3, r3, #32
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b23      	ldr	r3, [pc, #140]	; (8000688 <MX_GPIO_Init+0xd4>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	4a22      	ldr	r2, [pc, #136]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000606:	4b20      	ldr	r3, [pc, #128]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_GPIO_Init+0xd4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2123      	movs	r1, #35	; 0x23
 800062e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000632:	f000 ffd5 	bl	80015e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800063c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480f      	ldr	r0, [pc, #60]	; (800068c <MX_GPIO_Init+0xd8>)
 800064e:	f000 fe45 	bl	80012dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8000652:	2323      	movs	r3, #35	; 0x23
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066c:	f000 fe36 	bl	80012dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000670:	2200      	movs	r2, #0
 8000672:	2100      	movs	r1, #0
 8000674:	2028      	movs	r0, #40	; 0x28
 8000676:	f000 fe09 	bl	800128c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800067a:	2028      	movs	r0, #40	; 0x28
 800067c:	f000 fe20 	bl	80012c0 <HAL_NVIC_EnableIRQ>

}
 8000680:	bf00      	nop
 8000682:	3728      	adds	r7, #40	; 0x28
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40021000 	.word	0x40021000
 800068c:	48000800 	.word	0x48000800

08000690 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim8;


void MX_TIM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b09c      	sub	sp, #112	; 0x70
 8000694:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000696:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	609a      	str	r2, [r3, #8]
 80006a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
 80006c0:	615a      	str	r2, [r3, #20]
 80006c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006c4:	1d3b      	adds	r3, r7, #4
 80006c6:	2234      	movs	r2, #52	; 0x34
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f004 ff4e 	bl	800556c <memset>

  htim1.Instance = TIM1;
 80006d0:	4b57      	ldr	r3, [pc, #348]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006d2:	4a58      	ldr	r2, [pc, #352]	; (8000834 <MX_TIM1_Init+0x1a4>)
 80006d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 172000-1;
 80006d6:	4b56      	ldr	r3, [pc, #344]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006d8:	4a57      	ldr	r2, [pc, #348]	; (8000838 <MX_TIM1_Init+0x1a8>)
 80006da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006dc:	4b54      	ldr	r3, [pc, #336]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80006e2:	4b53      	ldr	r3, [pc, #332]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006e4:	2263      	movs	r2, #99	; 0x63
 80006e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006e8:	4b51      	ldr	r3, [pc, #324]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ee:	4b50      	ldr	r3, [pc, #320]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f4:	4b4e      	ldr	r3, [pc, #312]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006fa:	484d      	ldr	r0, [pc, #308]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80006fc:	f002 f80e 	bl	800271c <HAL_TIM_Base_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000706:	f000 fa5d 	bl	8000bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800070a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000710:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000714:	4619      	mov	r1, r3
 8000716:	4846      	ldr	r0, [pc, #280]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000718:	f002 fe4c 	bl	80033b4 <HAL_TIM_ConfigClockSource>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000722:	f000 fa4f 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000726:	4842      	ldr	r0, [pc, #264]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000728:	f002 f938 	bl	800299c <HAL_TIM_PWM_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000732:	f000 fa47 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000736:	2300      	movs	r3, #0
 8000738:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000742:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000746:	4619      	mov	r1, r3
 8000748:	4839      	ldr	r0, [pc, #228]	; (8000830 <MX_TIM1_Init+0x1a0>)
 800074a:	f003 fd33 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000754:	f000 fa36 	bl	8000bc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000758:	2360      	movs	r3, #96	; 0x60
 800075a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000760:	2300      	movs	r3, #0
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000764:	2300      	movs	r3, #0
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800076c:	2300      	movs	r3, #0
 800076e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000774:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000778:	2200      	movs	r2, #0
 800077a:	4619      	mov	r1, r3
 800077c:	482c      	ldr	r0, [pc, #176]	; (8000830 <MX_TIM1_Init+0x1a0>)
 800077e:	f002 fd05 	bl	800318c <HAL_TIM_PWM_ConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000788:	f000 fa1c 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800078c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000790:	2204      	movs	r2, #4
 8000792:	4619      	mov	r1, r3
 8000794:	4826      	ldr	r0, [pc, #152]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000796:	f002 fcf9 	bl	800318c <HAL_TIM_PWM_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80007a0:	f000 fa10 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007a8:	2208      	movs	r2, #8
 80007aa:	4619      	mov	r1, r3
 80007ac:	4820      	ldr	r0, [pc, #128]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80007ae:	f002 fced 	bl	800318c <HAL_TIM_PWM_ConfigChannel>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80007b8:	f000 fa04 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007c0:	220c      	movs	r2, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	481a      	ldr	r0, [pc, #104]	; (8000830 <MX_TIM1_Init+0x1a0>)
 80007c6:	f002 fce1 	bl	800318c <HAL_TIM_PWM_ConfigChannel>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80007d0:	f000 f9f8 	bl	8000bc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000804:	2300      	movs	r3, #0
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	4619      	mov	r1, r3
 8000810:	4807      	ldr	r0, [pc, #28]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000812:	f003 fd65 	bl	80042e0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 800081c:	f000 f9d2 	bl	8000bc4 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <MX_TIM1_Init+0x1a0>)
 8000822:	f000 fb2d 	bl	8000e80 <HAL_TIM_MspPostInit>

}
 8000826:	bf00      	nop
 8000828:	3770      	adds	r7, #112	; 0x70
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000028 	.word	0x20000028
 8000834:	40012c00 	.word	0x40012c00
 8000838:	00029fdf 	.word	0x00029fdf

0800083c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2224      	movs	r2, #36	; 0x24
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f004 fe8e 	bl	800556c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_TIM4_Init+0xa4>)
 800085c:	4a21      	ldr	r2, [pc, #132]	; (80008e4 <MX_TIM4_Init+0xa8>)
 800085e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000860:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_TIM4_Init+0xa4>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b1e      	ldr	r3, [pc, #120]	; (80008e0 <MX_TIM4_Init+0xa4>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800086c:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_TIM4_Init+0xa4>)
 800086e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000872:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_TIM4_Init+0xa4>)
 8000876:	2200      	movs	r2, #0
 8000878:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_TIM4_Init+0xa4>)
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000880:	2303      	movs	r3, #3
 8000882:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000884:	2300      	movs	r3, #0
 8000886:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000888:	2301      	movs	r3, #1
 800088a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000890:	230a      	movs	r3, #10
 8000892:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000898:	2301      	movs	r3, #1
 800089a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008a4:	f107 030c 	add.w	r3, r7, #12
 80008a8:	4619      	mov	r1, r3
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_TIM4_Init+0xa4>)
 80008ac:	f002 f9ea 	bl	8002c84 <HAL_TIM_Encoder_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80008b6:	f000 f985 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008c2:	463b      	mov	r3, r7
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	; (80008e0 <MX_TIM4_Init+0xa4>)
 80008c8:	f003 fc74 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80008d2:	f000 f977 	bl	8000bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	3730      	adds	r7, #48	; 0x30
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000074 	.word	0x20000074
 80008e4:	40000800 	.word	0x40000800

080008e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM8_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008ee:	f107 030c 	add.w	r3, r7, #12
 80008f2:	2200      	movs	r2, #0
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	605a      	str	r2, [r3, #4]
 80008f8:	609a      	str	r2, [r3, #8]
 80008fa:	60da      	str	r2, [r3, #12]
 80008fc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	463b      	mov	r3, r7
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000908:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_TIM8_Init+0xb0>)
 800090a:	4a24      	ldr	r2, [pc, #144]	; (800099c <MX_TIM8_Init+0xb4>)
 800090c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800090e:	4b22      	ldr	r3, [pc, #136]	; (8000998 <MX_TIM8_Init+0xb0>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b20      	ldr	r3, [pc, #128]	; (8000998 <MX_TIM8_Init+0xb0>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_TIM8_Init+0xb0>)
 800091c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000920:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000922:	4b1d      	ldr	r3, [pc, #116]	; (8000998 <MX_TIM8_Init+0xb0>)
 8000924:	2200      	movs	r2, #0
 8000926:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_TIM8_Init+0xb0>)
 800092a:	2200      	movs	r2, #0
 800092c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_TIM8_Init+0xb0>)
 8000930:	2200      	movs	r2, #0
 8000932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000934:	4818      	ldr	r0, [pc, #96]	; (8000998 <MX_TIM8_Init+0xb0>)
 8000936:	f001 fef1 	bl	800271c <HAL_TIM_Base_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 f940 	bl	8000bc4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000944:	2307      	movs	r3, #7
 8000946:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000948:	2370      	movs	r3, #112	; 0x70
 800094a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim8, &sSlaveConfig) != HAL_OK)
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	480e      	ldr	r0, [pc, #56]	; (8000998 <MX_TIM8_Init+0xb0>)
 8000960:	f002 fe3e 	bl	80035e0 <HAL_TIM_SlaveConfigSynchro>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 800096a:	f000 f92b 	bl	8000bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_TIM8_Init+0xb0>)
 8000980:	f003 fc18 	bl	80041b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800098a:	f000 f91b 	bl	8000bc4 <Error_Handler>
  }


}
 800098e:	bf00      	nop
 8000990:	3720      	adds	r7, #32
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200000c0 	.word	0x200000c0
 800099c:	40013400 	.word	0x40013400

080009a0 <MX_LPUART1_UART_Init>:

 UART_HandleTypeDef huart1;
 UART_HandleTypeDef hlpuart1;

void MX_LPUART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80009a4:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009a6:	4a22      	ldr	r2, [pc, #136]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009aa:	4b20      	ldr	r3, [pc, #128]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e2:	4812      	ldr	r0, [pc, #72]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009e4:	f003 fd56 	bl	8004494 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f000 f8e9 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 80009f6:	f004 faf1 	bl	8004fdc <HAL_UARTEx_SetTxFifoThreshold>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a00:	f000 f8e0 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 8000a08:	f004 fb26 	bl	8005058 <HAL_UARTEx_SetRxFifoThreshold>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a12:	f000 f8d7 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_LPUART1_UART_Init+0x8c>)
 8000a18:	f004 faa7 	bl	8004f6a <HAL_UARTEx_DisableFifoMode>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000a22:	f000 f8cf 	bl	8000bc4 <Error_Handler>
  }
}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200001a0 	.word	0x200001a0
 8000a30:	40008000 	.word	0x40008000

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000a38:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a3a:	4a23      	ldr	r2, [pc, #140]	; (8000ac8 <MX_USART1_UART_Init+0x94>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b17      	ldr	r3, [pc, #92]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7c:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a7e:	f003 fd09 	bl	8004494 <HAL_UART_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a88:	f000 f89c 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a90:	f004 faa4 	bl	8004fdc <HAL_UARTEx_SetTxFifoThreshold>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a9a:	f000 f893 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f004 fad9 	bl	8005058 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aac:	f000 f88a 	bl	8000bc4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	; (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000ab2:	f004 fa5a 	bl	8004f6a <HAL_UARTEx_DisableFifoMode>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000abc:	f000 f882 	bl	8000bc4 <Error_Handler>
  }

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000010c 	.word	0x2000010c
 8000ac8:	40013800 	.word	0x40013800

08000acc <init_wheel_information>:
uint16_t timer_counter = 0;


EngineInfo wheel_info;

void init_wheel_information(EngineInfo* wheel_info, EncoderInfo* encoder_info){
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
//	int velocity = 0;
//	int position = 0;
//	int last_position = 0;
//	uint32_t last_counter_value = 0;

	wheel_info->velocity = 0;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	801a      	strh	r2, [r3, #0]

}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <main>:


int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09a      	sub	sp, #104	; 0x68
 8000aec:	af00      	add	r7, sp, #0

  HAL_Init();
 8000aee:	f000 face 	bl	800108e <HAL_Init>
  SystemClock_Config();
 8000af2:	f7ff fd13 	bl	800051c <SystemClock_Config>
  MX_GPIO_Init();
 8000af6:	f7ff fd5d 	bl	80005b4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000afa:	f7ff ff51 	bl	80009a0 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000afe:	f7ff ff99 	bl	8000a34 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000b02:	f7ff fdc5 	bl	8000690 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000b06:	f7ff fe99 	bl	800083c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b0a:	f7ff feed 	bl	80008e8 <MX_TIM8_Init>

  HAL_TIM_Base_Start(&htim8);
 8000b0e:	481d      	ldr	r0, [pc, #116]	; (8000b84 <main+0x9c>)
 8000b10:	f001 fe5c 	bl	80027cc <HAL_TIM_Base_Start>

  static __IO uint16_t pulseCounter = 0;
  static __IO uint16_t previous_pulseCounter = 0;


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b14:	2100      	movs	r1, #0
 8000b16:	481c      	ldr	r0, [pc, #112]	; (8000b88 <main+0xa0>)
 8000b18:	f001 ffa2 	bl	8002a60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b1c:	2104      	movs	r1, #4
 8000b1e:	481a      	ldr	r0, [pc, #104]	; (8000b88 <main+0xa0>)
 8000b20:	f001 ff9e 	bl	8002a60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000b24:	2108      	movs	r1, #8
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <main+0xa0>)
 8000b28:	f001 ff9a 	bl	8002a60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000b2c:	210c      	movs	r1, #12
 8000b2e:	4816      	ldr	r0, [pc, #88]	; (8000b88 <main+0xa0>)
 8000b30:	f001 ff96 	bl	8002a60 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000b34:	213c      	movs	r1, #60	; 0x3c
 8000b36:	4815      	ldr	r0, [pc, #84]	; (8000b8c <main+0xa4>)
 8000b38:	f002 f94a 	bl	8002dd0 <HAL_TIM_Encoder_Start>

  TIM1->CCR1 = 40;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <main+0xa8>)
 8000b3e:	2228      	movs	r2, #40	; 0x28
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 40;
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <main+0xa8>)
 8000b44:	2228      	movs	r2, #40	; 0x28
 8000b46:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 40;
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <main+0xa8>)
 8000b4a:	2228      	movs	r2, #40	; 0x28
 8000b4c:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 40;
 8000b4e:	4b10      	ldr	r3, [pc, #64]	; (8000b90 <main+0xa8>)
 8000b50:	2228      	movs	r2, #40	; 0x28
 8000b52:	641a      	str	r2, [r3, #64]	; 0x40


  timer_counter = 1;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <main+0xac>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	801a      	strh	r2, [r3, #0]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b62:	f000 fd3d 	bl	80015e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2102      	movs	r1, #2
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6e:	f000 fd37 	bl	80015e0 <HAL_GPIO_WritePin>

  char message[100];
  static int diff;
  static int received_data_int;

  init_wheel_information(&wheel_info, &htim4);
 8000b72:	4906      	ldr	r1, [pc, #24]	; (8000b8c <main+0xa4>)
 8000b74:	4808      	ldr	r0, [pc, #32]	; (8000b98 <main+0xb0>)
 8000b76:	f7ff ffa9 	bl	8000acc <init_wheel_information>
//	  sscanf((char*)received_data, "%d", &received_data_int);
//
//	  sprintf(&(message[strlen(message)]), "to %d \n\r", received_data_int);
//
//	  HAL_UART_Transmit(&hlpuart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
	  HAL_Delay(1000);
 8000b7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b7e:	f000 faab 	bl	80010d8 <HAL_Delay>
 8000b82:	e7fa      	b.n	8000b7a <main+0x92>
 8000b84:	200000c0 	.word	0x200000c0
 8000b88:	20000028 	.word	0x20000028
 8000b8c:	20000074 	.word	0x20000074
 8000b90:	40012c00 	.word	0x40012c00
 8000b94:	20000234 	.word	0x20000234
 8000b98:	20000238 	.word	0x20000238

08000b9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]


  timer_counter = __HAL_TIM_GET_COUNTER(&htim4);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000bae:	801a      	strh	r2, [r3, #0]



//  /* USER CODE END Callback 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr
 8000bbc:	20000074 	.word	0x20000074
 8000bc0:	20000234 	.word	0x20000234

08000bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc8:	b672      	cpsid	i
}
 8000bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bcc:	e7fe      	b.n	8000bcc <Error_Handler+0x8>
	...

08000bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x44>)
 8000bd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x44>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6613      	str	r3, [r2, #96]	; 0x60
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x44>)
 8000be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x44>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x44>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c06:	f000 fdcb 	bl	80017a0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0a0      	sub	sp, #128	; 0x80
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0318 	add.w	r3, r7, #24
 8000c34:	2254      	movs	r2, #84	; 0x54
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 fc97 	bl	800556c <memset>
  if(huart->Instance==LPUART1)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a3d      	ldr	r2, [pc, #244]	; (8000d38 <HAL_UART_MspInit+0x120>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d137      	bne.n	8000cb8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	f107 0318 	add.w	r3, r7, #24
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 fb13 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c60:	f7ff ffb0 	bl	8000bc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c64:	4b35      	ldr	r3, [pc, #212]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c68:	4a34      	ldr	r2, [pc, #208]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b2f      	ldr	r3, [pc, #188]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c94:	230c      	movs	r3, #12
 8000c96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000cac:	4619      	mov	r1, r3
 8000cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb2:	f000 fb13 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cb6:	e03a      	b.n	8000d2e <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a20      	ldr	r2, [pc, #128]	; (8000d40 <HAL_UART_MspInit+0x128>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d135      	bne.n	8000d2e <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cca:	f107 0318 	add.w	r3, r7, #24
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fad6 	bl	8002280 <HAL_RCCEx_PeriphCLKConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000cda:	f7ff ff73 	bl	8000bc4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce2:	4a16      	ldr	r2, [pc, #88]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000ce4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a10      	ldr	r2, [pc, #64]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <HAL_UART_MspInit+0x124>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d0e:	2330      	movs	r3, #48	; 0x30
 8000d10:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d26:	4619      	mov	r1, r3
 8000d28:	4806      	ldr	r0, [pc, #24]	; (8000d44 <HAL_UART_MspInit+0x12c>)
 8000d2a:	f000 fad7 	bl	80012dc <HAL_GPIO_Init>
}
 8000d2e:	bf00      	nop
 8000d30:	3780      	adds	r7, #128	; 0x80
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40008000 	.word	0x40008000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40013800 	.word	0x40013800
 8000d44:	48000800 	.word	0x48000800

08000d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08a      	sub	sp, #40	; 0x28
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 0314 	add.w	r3, r7, #20
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_TIM_Base_MspInit+0xa0>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d10c      	bne.n	8000d84 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_TIM_Base_MspInit+0xa4>)
 8000d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d6e:	4a1f      	ldr	r2, [pc, #124]	; (8000dec <HAL_TIM_Base_MspInit+0xa4>)
 8000d70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d74:	6613      	str	r3, [r2, #96]	; 0x60
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <HAL_TIM_Base_MspInit+0xa4>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d82:	e02c      	b.n	8000dde <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a19      	ldr	r2, [pc, #100]	; (8000df0 <HAL_TIM_Base_MspInit+0xa8>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d127      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d8e:	4b17      	ldr	r3, [pc, #92]	; (8000dec <HAL_TIM_Base_MspInit+0xa4>)
 8000d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d92:	4a16      	ldr	r2, [pc, #88]	; (8000dec <HAL_TIM_Base_MspInit+0xa4>)
 8000d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d98:	6613      	str	r3, [r2, #96]	; 0x60
 8000d9a:	4b14      	ldr	r3, [pc, #80]	; (8000dec <HAL_TIM_Base_MspInit+0xa4>)
 8000d9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <HAL_TIM_Base_MspInit+0xa4>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a10      	ldr	r2, [pc, #64]	; (8000dec <HAL_TIM_Base_MspInit+0xa4>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_TIM_Base_MspInit+0xa4>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dbe:	2340      	movs	r3, #64	; 0x40
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8000dce:	2306      	movs	r3, #6
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_TIM_Base_MspInit+0xac>)
 8000dda:	f000 fa7f 	bl	80012dc <HAL_GPIO_Init>
}
 8000dde:	bf00      	nop
 8000de0:	3728      	adds	r7, #40	; 0x28
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40012c00 	.word	0x40012c00
 8000dec:	40021000 	.word	0x40021000
 8000df0:	40013400 	.word	0x40013400
 8000df4:	48000400 	.word	0x48000400

08000df8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <HAL_TIM_Encoder_MspInit+0x80>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d129      	bne.n	8000e6e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1e:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6593      	str	r3, [r2, #88]	; 0x58
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000e28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_TIM_Encoder_MspInit+0x84>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6a:	f000 fa37 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	; 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40000800 	.word	0x40000800
 8000e7c:	40021000 	.word	0x40021000

08000e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a11      	ldr	r2, [pc, #68]	; (8000ee4 <HAL_TIM_MspPostInit+0x64>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d11b      	bne.n	8000eda <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	4b11      	ldr	r3, [pc, #68]	; (8000ee8 <HAL_TIM_MspPostInit+0x68>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a10      	ldr	r2, [pc, #64]	; (8000ee8 <HAL_TIM_MspPostInit+0x68>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_TIM_MspPostInit+0x68>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000eba:	230f      	movs	r3, #15
 8000ebc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <HAL_TIM_MspPostInit+0x6c>)
 8000ed6:	f000 fa01 	bl	80012dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3720      	adds	r7, #32
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40012c00 	.word	0x40012c00
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	48000800 	.word	0x48000800

08000ef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	; 0x30
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f00:	4b2c      	ldr	r3, [pc, #176]	; (8000fb4 <HAL_InitTick+0xc4>)
 8000f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f04:	4a2b      	ldr	r2, [pc, #172]	; (8000fb4 <HAL_InitTick+0xc4>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <HAL_InitTick+0xc4>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f10:	f003 0310 	and.w	r3, r3, #16
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f18:	f107 020c 	add.w	r2, r7, #12
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f001 f934 	bl	8002190 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f28:	f001 f906 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8000f2c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f30:	4a21      	ldr	r2, [pc, #132]	; (8000fb8 <HAL_InitTick+0xc8>)
 8000f32:	fba2 2303 	umull	r2, r3, r2, r3
 8000f36:	0c9b      	lsrs	r3, r3, #18
 8000f38:	3b01      	subs	r3, #1
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f3e:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <HAL_InitTick+0xd0>)
 8000f40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f48:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f5c:	4817      	ldr	r0, [pc, #92]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f5e:	f001 fbdd 	bl	800271c <HAL_TIM_Base_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d11b      	bne.n	8000fa8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f70:	4812      	ldr	r0, [pc, #72]	; (8000fbc <HAL_InitTick+0xcc>)
 8000f72:	f001 fc9b 	bl	80028ac <HAL_TIM_Base_Start_IT>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d111      	bne.n	8000fa8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f84:	2036      	movs	r0, #54	; 0x36
 8000f86:	f000 f99b 	bl	80012c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b0f      	cmp	r3, #15
 8000f8e:	d808      	bhi.n	8000fa2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f90:	2200      	movs	r2, #0
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	2036      	movs	r0, #54	; 0x36
 8000f96:	f000 f979 	bl	800128c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <HAL_InitTick+0xd4>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e002      	b.n	8000fa8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3730      	adds	r7, #48	; 0x30
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	431bde83 	.word	0x431bde83
 8000fbc:	20000250 	.word	0x20000250
 8000fc0:	40001000 	.word	0x40001000
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fcc:	e7fe      	b.n	8000fcc <NMI_Handler+0x4>

08000fce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd2:	e7fe      	b.n	8000fd2 <HardFault_Handler+0x4>

08000fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000ff8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ffc:	f000 fb08 	bl	8001610 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}

08001004 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM6_DAC_IRQHandler+0x10>)
 800100a:	f001 ff6f 	bl	8002eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000250 	.word	0x20000250

08001018 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <SystemInit+0x20>)
 800101e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <SystemInit+0x20>)
 8001024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	; (8001074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001040:	f7ff ffea 	bl	8001018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f004 fa87 	bl	800557c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106e:	f7ff fd3b 	bl	8000ae8 <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   r0, =_estack
 8001074:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001080:	0800562c 	.word	0x0800562c
  ldr r2, =_sbss
 8001084:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001088:	2000032c 	.word	0x2000032c

0800108c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_2_IRQHandler>

0800108e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f8ec 	bl	8001276 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109e:	200f      	movs	r0, #15
 80010a0:	f7ff ff26 	bl	8000ef0 <HAL_InitTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	e001      	b.n	80010b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010b0:	f7ff fd8e 	bl	8000bd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b4:	79fb      	ldrb	r3, [r7, #7]

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]


}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	2000029c 	.word	0x2000029c

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d004      	beq.n	80010fc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_Delay+0x40>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010fc:	bf00      	nop
 80010fe:	f7ff ffdf 	bl	80010c0 <HAL_GetTick>
 8001102:	4602      	mov	r2, r0
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1ad3      	subs	r3, r2, r3
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	429a      	cmp	r2, r3
 800110c:	d8f7      	bhi.n	80010fe <HAL_Delay+0x26>
  {
  }
}
 800110e:	bf00      	nop
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000008 	.word	0x20000008

0800111c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800112c:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001132:	68ba      	ldr	r2, [r7, #8]
 8001134:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001138:	4013      	ands	r3, r2
 800113a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800114c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114e:	4a04      	ldr	r2, [pc, #16]	; (8001160 <__NVIC_SetPriorityGrouping+0x44>)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	60d3      	str	r3, [r2, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <__NVIC_GetPriorityGrouping+0x18>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	0a1b      	lsrs	r3, r3, #8
 800116e:	f003 0307 	and.w	r3, r3, #7
}
 8001172:	4618      	mov	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800118a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118e:	2b00      	cmp	r3, #0
 8001190:	db0b      	blt.n	80011aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 021f 	and.w	r2, r3, #31
 8001198:	4907      	ldr	r1, [pc, #28]	; (80011b8 <__NVIC_EnableIRQ+0x38>)
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	095b      	lsrs	r3, r3, #5
 80011a0:	2001      	movs	r0, #1
 80011a2:	fa00 f202 	lsl.w	r2, r0, r2
 80011a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100

080011bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	db0a      	blt.n	80011e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	490c      	ldr	r1, [pc, #48]	; (8001208 <__NVIC_SetPriority+0x4c>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	0112      	lsls	r2, r2, #4
 80011dc:	b2d2      	uxtb	r2, r2
 80011de:	440b      	add	r3, r1
 80011e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e4:	e00a      	b.n	80011fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4908      	ldr	r1, [pc, #32]	; (800120c <__NVIC_SetPriority+0x50>)
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	3b04      	subs	r3, #4
 80011f4:	0112      	lsls	r2, r2, #4
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	440b      	add	r3, r1
 80011fa:	761a      	strb	r2, [r3, #24]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f1c3 0307 	rsb	r3, r3, #7
 800122a:	2b04      	cmp	r3, #4
 800122c:	bf28      	it	cs
 800122e:	2304      	movcs	r3, #4
 8001230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3304      	adds	r3, #4
 8001236:	2b06      	cmp	r3, #6
 8001238:	d902      	bls.n	8001240 <NVIC_EncodePriority+0x30>
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3b03      	subs	r3, #3
 800123e:	e000      	b.n	8001242 <NVIC_EncodePriority+0x32>
 8001240:	2300      	movs	r3, #0
 8001242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	f04f 32ff 	mov.w	r2, #4294967295
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43da      	mvns	r2, r3
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	401a      	ands	r2, r3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001258:	f04f 31ff 	mov.w	r1, #4294967295
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	fa01 f303 	lsl.w	r3, r1, r3
 8001262:	43d9      	mvns	r1, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	4313      	orrs	r3, r2
         );
}
 800126a:	4618      	mov	r0, r3
 800126c:	3724      	adds	r7, #36	; 0x24
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ff4c 	bl	800111c <__NVIC_SetPriorityGrouping>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
 8001298:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800129a:	f7ff ff63 	bl	8001164 <__NVIC_GetPriorityGrouping>
 800129e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	6978      	ldr	r0, [r7, #20]
 80012a6:	f7ff ffb3 	bl	8001210 <NVIC_EncodePriority>
 80012aa:	4602      	mov	r2, r0
 80012ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff ff82 	bl	80011bc <__NVIC_SetPriority>
}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff ff56 	bl	8001180 <__NVIC_EnableIRQ>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012dc:	b480      	push	{r7}
 80012de:	b087      	sub	sp, #28
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012ea:	e15a      	b.n	80015a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2101      	movs	r1, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	fa01 f303 	lsl.w	r3, r1, r3
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f000 814c 	beq.w	800159c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d005      	beq.n	800131c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001318:	2b02      	cmp	r3, #2
 800131a:	d130      	bne.n	800137e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	2203      	movs	r2, #3
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	4313      	orrs	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001352:	2201      	movs	r2, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 0201 	and.w	r2, r3, #1
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4313      	orrs	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	2b03      	cmp	r3, #3
 8001388:	d017      	beq.n	80013ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	2203      	movs	r2, #3
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 0303 	and.w	r3, r3, #3
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d123      	bne.n	800140e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	08da      	lsrs	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3208      	adds	r2, #8
 80013ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	f003 0307 	and.w	r3, r3, #7
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	08da      	lsrs	r2, r3, #3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3208      	adds	r2, #8
 8001408:	6939      	ldr	r1, [r7, #16]
 800140a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	2203      	movs	r2, #3
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4013      	ands	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0203 	and.w	r2, r3, #3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80a6 	beq.w	800159c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001450:	4b5b      	ldr	r3, [pc, #364]	; (80015c0 <HAL_GPIO_Init+0x2e4>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001454:	4a5a      	ldr	r2, [pc, #360]	; (80015c0 <HAL_GPIO_Init+0x2e4>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6613      	str	r3, [r2, #96]	; 0x60
 800145c:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_GPIO_Init+0x2e4>)
 800145e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001468:	4a56      	ldr	r2, [pc, #344]	; (80015c4 <HAL_GPIO_Init+0x2e8>)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001492:	d01f      	beq.n	80014d4 <HAL_GPIO_Init+0x1f8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4c      	ldr	r2, [pc, #304]	; (80015c8 <HAL_GPIO_Init+0x2ec>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d019      	beq.n	80014d0 <HAL_GPIO_Init+0x1f4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <HAL_GPIO_Init+0x2f0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d013      	beq.n	80014cc <HAL_GPIO_Init+0x1f0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x2f4>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d00d      	beq.n	80014c8 <HAL_GPIO_Init+0x1ec>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4a49      	ldr	r2, [pc, #292]	; (80015d4 <HAL_GPIO_Init+0x2f8>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d007      	beq.n	80014c4 <HAL_GPIO_Init+0x1e8>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a48      	ldr	r2, [pc, #288]	; (80015d8 <HAL_GPIO_Init+0x2fc>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d101      	bne.n	80014c0 <HAL_GPIO_Init+0x1e4>
 80014bc:	2305      	movs	r3, #5
 80014be:	e00a      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014c0:	2306      	movs	r3, #6
 80014c2:	e008      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014c4:	2304      	movs	r3, #4
 80014c6:	e006      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014c8:	2303      	movs	r3, #3
 80014ca:	e004      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e002      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014d0:	2301      	movs	r3, #1
 80014d2:	e000      	b.n	80014d6 <HAL_GPIO_Init+0x1fa>
 80014d4:	2300      	movs	r3, #0
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	f002 0203 	and.w	r2, r2, #3
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	4093      	lsls	r3, r2
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e6:	4937      	ldr	r1, [pc, #220]	; (80015c4 <HAL_GPIO_Init+0x2e8>)
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	089b      	lsrs	r3, r3, #2
 80014ec:	3302      	adds	r3, #2
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f4:	4b39      	ldr	r3, [pc, #228]	; (80015dc <HAL_GPIO_Init+0x300>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4013      	ands	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d003      	beq.n	8001518 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001510:	693a      	ldr	r2, [r7, #16]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001518:	4a30      	ldr	r2, [pc, #192]	; (80015dc <HAL_GPIO_Init+0x300>)
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800151e:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <HAL_GPIO_Init+0x300>)
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	43db      	mvns	r3, r3
 8001528:	693a      	ldr	r2, [r7, #16]
 800152a:	4013      	ands	r3, r2
 800152c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001542:	4a26      	ldr	r2, [pc, #152]	; (80015dc <HAL_GPIO_Init+0x300>)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <HAL_GPIO_Init+0x300>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d003      	beq.n	800156c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <HAL_GPIO_Init+0x300>)
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <HAL_GPIO_Init+0x300>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d003      	beq.n	8001596 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	4313      	orrs	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <HAL_GPIO_Init+0x300>)
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	3301      	adds	r3, #1
 80015a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	fa22 f303 	lsr.w	r3, r2, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f47f ae9d 	bne.w	80012ec <HAL_GPIO_Init+0x10>
  }
}
 80015b2:	bf00      	nop
 80015b4:	bf00      	nop
 80015b6:	371c      	adds	r7, #28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000
 80015c8:	48000400 	.word	0x48000400
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000c00 	.word	0x48000c00
 80015d4:	48001000 	.word	0x48001000
 80015d8:	48001400 	.word	0x48001400
 80015dc:	40010400 	.word	0x40010400

080015e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	807b      	strh	r3, [r7, #2]
 80015ec:	4613      	mov	r3, r2
 80015ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015f0:	787b      	ldrb	r3, [r7, #1]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d003      	beq.n	80015fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015f6:	887a      	ldrh	r2, [r7, #2]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015fc:	e002      	b.n	8001604 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015fe:	887a      	ldrh	r2, [r7, #2]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800161a:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800161c:	695a      	ldr	r2, [r3, #20]
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d006      	beq.n	8001634 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001626:	4a05      	ldr	r2, [pc, #20]	; (800163c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001628:	88fb      	ldrh	r3, [r7, #6]
 800162a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800162c:	88fb      	ldrh	r3, [r7, #6]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f806 	bl	8001640 <HAL_GPIO_EXTI_Callback>
  }
}
 8001634:	bf00      	nop
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d141      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001666:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	d131      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001674:	4b47      	ldr	r3, [pc, #284]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167a:	4a46      	ldr	r2, [pc, #280]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001684:	4b43      	ldr	r3, [pc, #268]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800168c:	4a41      	ldr	r2, [pc, #260]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001694:	4b40      	ldr	r3, [pc, #256]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2232      	movs	r2, #50	; 0x32
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	4a3f      	ldr	r2, [pc, #252]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9b      	lsrs	r3, r3, #18
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	e002      	b.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016be:	d102      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f2      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d158      	bne.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e057      	b.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016de:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e8:	e04d      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f0:	d141      	bne.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f2:	4b28      	ldr	r3, [pc, #160]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fe:	d131      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001700:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001706:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	4b20      	ldr	r3, [pc, #128]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001718:	4a1e      	ldr	r2, [pc, #120]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800171e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2232      	movs	r2, #50	; 0x32
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	4a1c      	ldr	r2, [pc, #112]	; (800179c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	0c9b      	lsrs	r3, r3, #18
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	e002      	b.n	800173e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3b01      	subs	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800174a:	d102      	bne.n	8001752 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f2      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800175e:	d112      	bne.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e011      	b.n	8001788 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800176a:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001774:	e007      	b.n	8001786 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001784:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001786:	2300      	movs	r3, #0
}
 8001788:	4618      	mov	r0, r3
 800178a:	3714      	adds	r7, #20
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	40007000 	.word	0x40007000
 8001798:	20000000 	.word	0x20000000
 800179c:	431bde83 	.word	0x431bde83

080017a0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a04      	ldr	r2, [pc, #16]	; (80017bc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80017aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ae:	6093      	str	r3, [r2, #8]
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40007000 	.word	0x40007000

080017c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e2fe      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d075      	beq.n	80018ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017de:	4b97      	ldr	r3, [pc, #604]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 030c 	and.w	r3, r3, #12
 80017e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e8:	4b94      	ldr	r3, [pc, #592]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	2b0c      	cmp	r3, #12
 80017f6:	d102      	bne.n	80017fe <HAL_RCC_OscConfig+0x3e>
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d002      	beq.n	8001804 <HAL_RCC_OscConfig+0x44>
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	2b08      	cmp	r3, #8
 8001802:	d10b      	bne.n	800181c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001804:	4b8d      	ldr	r3, [pc, #564]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d05b      	beq.n	80018c8 <HAL_RCC_OscConfig+0x108>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d157      	bne.n	80018c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e2d9      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001824:	d106      	bne.n	8001834 <HAL_RCC_OscConfig+0x74>
 8001826:	4b85      	ldr	r3, [pc, #532]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a84      	ldr	r2, [pc, #528]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e01d      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800183c:	d10c      	bne.n	8001858 <HAL_RCC_OscConfig+0x98>
 800183e:	4b7f      	ldr	r3, [pc, #508]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a7e      	ldr	r2, [pc, #504]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	4b7c      	ldr	r3, [pc, #496]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a7b      	ldr	r2, [pc, #492]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0xb0>
 8001858:	4b78      	ldr	r3, [pc, #480]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a77      	ldr	r2, [pc, #476]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 800185e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	4b75      	ldr	r3, [pc, #468]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a74      	ldr	r2, [pc, #464]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 800186a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800186e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d013      	beq.n	80018a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fc22 	bl	80010c0 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fc1e 	bl	80010c0 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	; 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e29e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001892:	4b6a      	ldr	r3, [pc, #424]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0xc0>
 800189e:	e014      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fc0e 	bl	80010c0 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fc0a 	bl	80010c0 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e28a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ba:	4b60      	ldr	r3, [pc, #384]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0xe8>
 80018c6:	e000      	b.n	80018ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d075      	beq.n	80019c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d6:	4b59      	ldr	r3, [pc, #356]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e0:	4b56      	ldr	r3, [pc, #344]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d102      	bne.n	80018f6 <HAL_RCC_OscConfig+0x136>
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d002      	beq.n	80018fc <HAL_RCC_OscConfig+0x13c>
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d11f      	bne.n	800193c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018fc:	4b4f      	ldr	r3, [pc, #316]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_RCC_OscConfig+0x154>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e25d      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001914:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	061b      	lsls	r3, r3, #24
 8001922:	4946      	ldr	r1, [pc, #280]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001924:	4313      	orrs	r3, r2
 8001926:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <HAL_RCC_OscConfig+0x280>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fadf 	bl	8000ef0 <HAL_InitTick>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d043      	beq.n	80019c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e249      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d023      	beq.n	800198c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001944:	4b3d      	ldr	r3, [pc, #244]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3c      	ldr	r2, [pc, #240]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 800194a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800194e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fbb6 	bl	80010c0 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff fbb2 	bl	80010c0 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e232      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196a:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001976:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	061b      	lsls	r3, r3, #24
 8001984:	492d      	ldr	r1, [pc, #180]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
 800198a:	e01a      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198c:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a2a      	ldr	r2, [pc, #168]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fb92 	bl	80010c0 <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a0:	f7ff fb8e 	bl	80010c0 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e20e      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x1e0>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d041      	beq.n	8001a52 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d6:	4b19      	ldr	r3, [pc, #100]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 80019d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 80019de:	f043 0301 	orr.w	r3, r3, #1
 80019e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7ff fb6b 	bl	80010c0 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ee:	f7ff fb67 	bl	80010c0 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1e7      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a00:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0ef      	beq.n	80019ee <HAL_RCC_OscConfig+0x22e>
 8001a0e:	e020      	b.n	8001a52 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_RCC_OscConfig+0x27c>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a20:	f7ff fb4e 	bl	80010c0 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a26:	e00d      	b.n	8001a44 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fb4a 	bl	80010c0 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d906      	bls.n	8001a44 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e1ca      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a44:	4b8c      	ldr	r3, [pc, #560]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	f003 0302 	and.w	r3, r3, #2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1ea      	bne.n	8001a28 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0304 	and.w	r3, r3, #4
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 80a6 	beq.w	8001bac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a64:	4b84      	ldr	r3, [pc, #528]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_OscConfig+0x2b4>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x2b6>
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d00d      	beq.n	8001a96 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4b7f      	ldr	r3, [pc, #508]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7e:	4a7e      	ldr	r2, [pc, #504]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a84:	6593      	str	r3, [r2, #88]	; 0x58
 8001a86:	4b7c      	ldr	r3, [pc, #496]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a92:	2301      	movs	r3, #1
 8001a94:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a96:	4b79      	ldr	r3, [pc, #484]	; (8001c7c <HAL_RCC_OscConfig+0x4bc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d118      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa2:	4b76      	ldr	r3, [pc, #472]	; (8001c7c <HAL_RCC_OscConfig+0x4bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a75      	ldr	r2, [pc, #468]	; (8001c7c <HAL_RCC_OscConfig+0x4bc>)
 8001aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fb07 	bl	80010c0 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab4:	e008      	b.n	8001ac8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab6:	f7ff fb03 	bl	80010c0 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d901      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e183      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac8:	4b6c      	ldr	r3, [pc, #432]	; (8001c7c <HAL_RCC_OscConfig+0x4bc>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d0f0      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d108      	bne.n	8001aee <HAL_RCC_OscConfig+0x32e>
 8001adc:	4b66      	ldr	r3, [pc, #408]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae2:	4a65      	ldr	r2, [pc, #404]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aec:	e024      	b.n	8001b38 <HAL_RCC_OscConfig+0x378>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d110      	bne.n	8001b18 <HAL_RCC_OscConfig+0x358>
 8001af6:	4b60      	ldr	r3, [pc, #384]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afc:	4a5e      	ldr	r2, [pc, #376]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001afe:	f043 0304 	orr.w	r3, r3, #4
 8001b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b06:	4b5c      	ldr	r3, [pc, #368]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	4a5a      	ldr	r2, [pc, #360]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b16:	e00f      	b.n	8001b38 <HAL_RCC_OscConfig+0x378>
 8001b18:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a56      	ldr	r2, [pc, #344]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b28:	4b53      	ldr	r3, [pc, #332]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	4a52      	ldr	r2, [pc, #328]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d016      	beq.n	8001b6e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b40:	f7ff fabe 	bl	80010c0 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b48:	f7ff faba 	bl	80010c0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e138      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b5e:	4b46      	ldr	r3, [pc, #280]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0ed      	beq.n	8001b48 <HAL_RCC_OscConfig+0x388>
 8001b6c:	e015      	b.n	8001b9a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff faa7 	bl	80010c0 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b74:	e00a      	b.n	8001b8c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b76:	f7ff faa3 	bl	80010c0 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e121      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d1ed      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b9a:	7ffb      	ldrb	r3, [r7, #31]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba0:	4b35      	ldr	r3, [pc, #212]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba4:	4a34      	ldr	r2, [pc, #208]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001baa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0320 	and.w	r3, r3, #32
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d03c      	beq.n	8001c32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bc0:	4b2d      	ldr	r3, [pc, #180]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc6:	4a2c      	ldr	r2, [pc, #176]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7ff fa76 	bl	80010c0 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bd8:	f7ff fa72 	bl	80010c0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e0f2      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bea:	4b23      	ldr	r3, [pc, #140]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001bec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ef      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x418>
 8001bf8:	e01b      	b.n	8001c32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001bfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c00:	4a1d      	ldr	r2, [pc, #116]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fa59 	bl	80010c0 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c12:	f7ff fa55 	bl	80010c0 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e0d5      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ef      	bne.n	8001c12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	69db      	ldr	r3, [r3, #28]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80c9 	beq.w	8001dce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 030c 	and.w	r3, r3, #12
 8001c44:	2b0c      	cmp	r3, #12
 8001c46:	f000 8083 	beq.w	8001d50 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d15e      	bne.n	8001d10 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_RCC_OscConfig+0x4b8>)
 8001c58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fa2f 	bl	80010c0 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c64:	e00c      	b.n	8001c80 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff fa2b 	bl	80010c0 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d905      	bls.n	8001c80 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0ab      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c80:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1ec      	bne.n	8001c66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c8c:	4b52      	ldr	r3, [pc, #328]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001c8e:	68da      	ldr	r2, [r3, #12]
 8001c90:	4b52      	ldr	r3, [pc, #328]	; (8001ddc <HAL_RCC_OscConfig+0x61c>)
 8001c92:	4013      	ands	r3, r2
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6a11      	ldr	r1, [r2, #32]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001c9c:	3a01      	subs	r2, #1
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	4311      	orrs	r1, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001ca6:	0212      	lsls	r2, r2, #8
 8001ca8:	4311      	orrs	r1, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cae:	0852      	lsrs	r2, r2, #1
 8001cb0:	3a01      	subs	r2, #1
 8001cb2:	0552      	lsls	r2, r2, #21
 8001cb4:	4311      	orrs	r1, r2
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cba:	0852      	lsrs	r2, r2, #1
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	0652      	lsls	r2, r2, #25
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001cc6:	06d2      	lsls	r2, r2, #27
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	4943      	ldr	r1, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cd0:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a40      	ldr	r2, [pc, #256]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cdc:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a3d      	ldr	r2, [pc, #244]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff f9ea 	bl	80010c0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf0:	f7ff f9e6 	bl	80010c0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e066      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d02:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x530>
 8001d0e:	e05e      	b.n	8001dce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d10:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a30      	ldr	r2, [pc, #192]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7ff f9d0 	bl	80010c0 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7ff f9cc 	bl	80010c0 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e04c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001d42:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	4924      	ldr	r1, [pc, #144]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_RCC_OscConfig+0x620>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60cb      	str	r3, [r1, #12]
 8001d4e:	e03e      	b.n	8001dce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e039      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_RCC_OscConfig+0x618>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d12c      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d123      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d11b      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d113      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d109      	bne.n	8001dca <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	019f800c 	.word	0x019f800c
 8001de0:	feeefffc 	.word	0xfeeefffc

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e11e      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b91      	ldr	r3, [pc, #580]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d910      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b8e      	ldr	r3, [pc, #568]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 020f 	bic.w	r2, r3, #15
 8001e12:	498c      	ldr	r1, [pc, #560]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b8a      	ldr	r3, [pc, #552]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e106      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d073      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d129      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e40:	4b81      	ldr	r3, [pc, #516]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0f4      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e50:	f000 f9d0 	bl	80021f4 <RCC_GetSysClockFreqFromPLLSource>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4a7c      	ldr	r2, [pc, #496]	; (800204c <HAL_RCC_ClockConfig+0x268>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d93f      	bls.n	8001ede <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e5e:	4b7a      	ldr	r3, [pc, #488]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d009      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d033      	beq.n	8001ede <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d12f      	bne.n	8001ede <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e7e:	4b72      	ldr	r3, [pc, #456]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e86:	4a70      	ldr	r2, [pc, #448]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e8c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e024      	b.n	8001ede <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9c:	4b6a      	ldr	r3, [pc, #424]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e0c6      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eac:	4b66      	ldr	r3, [pc, #408]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0be      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ebc:	f000 f8ce 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4a61      	ldr	r2, [pc, #388]	; (800204c <HAL_RCC_ClockConfig+0x268>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d909      	bls.n	8001ede <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001eca:	4b5f      	ldr	r3, [pc, #380]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ed2:	4a5d      	ldr	r2, [pc, #372]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ede:	4b5a      	ldr	r3, [pc, #360]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 0203 	bic.w	r2, r3, #3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4957      	ldr	r1, [pc, #348]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ef0:	f7ff f8e6 	bl	80010c0 <HAL_GetTick>
 8001ef4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	e00a      	b.n	8001f0e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef8:	f7ff f8e2 	bl	80010c0 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e095      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 020c 	and.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d1eb      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d023      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f38:	4b43      	ldr	r3, [pc, #268]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a42      	ldr	r2, [pc, #264]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f42:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001f50:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001f58:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	4936      	ldr	r1, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	2b80      	cmp	r3, #128	; 0x80
 8001f78:	d105      	bne.n	8001f86 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f7a:	4b33      	ldr	r3, [pc, #204]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	4a32      	ldr	r2, [pc, #200]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f84:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f86:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d21d      	bcs.n	8001fd0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f023 020f 	bic.w	r2, r3, #15
 8001f9c:	4929      	ldr	r1, [pc, #164]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa4:	f7ff f88c 	bl	80010c0 <HAL_GetTick>
 8001fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	e00a      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fac:	f7ff f888 	bl	80010c0 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e03b      	b.n	800203a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1ed      	bne.n	8001fac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4917      	ldr	r1, [pc, #92]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ffa:	4b13      	ldr	r3, [pc, #76]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	490f      	ldr	r1, [pc, #60]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 800200a:	4313      	orrs	r3, r2
 800200c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800200e:	f000 f825 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8002012:	4602      	mov	r2, r0
 8002014:	4b0c      	ldr	r3, [pc, #48]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	091b      	lsrs	r3, r3, #4
 800201a:	f003 030f 	and.w	r3, r3, #15
 800201e:	490c      	ldr	r1, [pc, #48]	; (8002050 <HAL_RCC_ClockConfig+0x26c>)
 8002020:	5ccb      	ldrb	r3, [r1, r3]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x270>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <HAL_RCC_ClockConfig+0x274>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe ff5c 	bl	8000ef0 <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	04c4b400 	.word	0x04c4b400
 8002050:	080055dc 	.word	0x080055dc
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002062:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b04      	cmp	r3, #4
 800206c:	d102      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800206e:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	e047      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d102      	bne.n	8002086 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002080:	4b26      	ldr	r3, [pc, #152]	; (800211c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e03e      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002086:	4b23      	ldr	r3, [pc, #140]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b0c      	cmp	r3, #12
 8002090:	d136      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3301      	adds	r3, #1
 80020a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	d10c      	bne.n	80020ca <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b8:	4a16      	ldr	r2, [pc, #88]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ba:	68d2      	ldr	r2, [r2, #12]
 80020bc:	0a12      	lsrs	r2, r2, #8
 80020be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	617b      	str	r3, [r7, #20]
      break;
 80020c8:	e00c      	b.n	80020e4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80020ca:	4a13      	ldr	r2, [pc, #76]	; (8002118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4a10      	ldr	r2, [pc, #64]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020d4:	68d2      	ldr	r2, [r2, #12]
 80020d6:	0a12      	lsrs	r2, r2, #8
 80020d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
      break;
 80020e2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0e5b      	lsrs	r3, r3, #25
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	3301      	adds	r3, #1
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e001      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002104:	693b      	ldr	r3, [r7, #16]
}
 8002106:	4618      	mov	r0, r3
 8002108:	371c      	adds	r7, #28
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	00f42400 	.word	0x00f42400
 800211c:	016e3600 	.word	0x016e3600

08002120 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <HAL_RCC_GetHCLKFreq+0x14>)
 8002126:	681b      	ldr	r3, [r3, #0]
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	20000000 	.word	0x20000000

08002138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800213c:	f7ff fff0 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 8002140:	4602      	mov	r2, r0
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	0a1b      	lsrs	r3, r3, #8
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	4904      	ldr	r1, [pc, #16]	; (8002160 <HAL_RCC_GetPCLK1Freq+0x28>)
 800214e:	5ccb      	ldrb	r3, [r1, r3]
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002158:	4618      	mov	r0, r3
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	080055ec 	.word	0x080055ec

08002164 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002168:	f7ff ffda 	bl	8002120 <HAL_RCC_GetHCLKFreq>
 800216c:	4602      	mov	r2, r0
 800216e:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	0adb      	lsrs	r3, r3, #11
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	4904      	ldr	r1, [pc, #16]	; (800218c <HAL_RCC_GetPCLK2Freq+0x28>)
 800217a:	5ccb      	ldrb	r3, [r1, r3]
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	080055ec 	.word	0x080055ec

08002190 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	220f      	movs	r2, #15
 800219e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021a0:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <HAL_RCC_GetClockConfig+0x5c>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	08db      	lsrs	r3, r3, #3
 80021ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_RCC_GetClockConfig+0x60>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 020f 	and.w	r2, r3, #15
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	601a      	str	r2, [r3, #0]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40022000 	.word	0x40022000

080021f4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b087      	sub	sp, #28
 80021f8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	f003 030f 	and.w	r3, r3, #15
 800220e:	3301      	adds	r3, #1
 8002210:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	2b03      	cmp	r3, #3
 8002216:	d10c      	bne.n	8002232 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002218:	4a17      	ldr	r2, [pc, #92]	; (8002278 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002220:	4a14      	ldr	r2, [pc, #80]	; (8002274 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002222:	68d2      	ldr	r2, [r2, #12]
 8002224:	0a12      	lsrs	r2, r2, #8
 8002226:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
    break;
 8002230:	e00c      	b.n	800224c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800223c:	68d2      	ldr	r2, [r2, #12]
 800223e:	0a12      	lsrs	r2, r2, #8
 8002240:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002244:	fb02 f303 	mul.w	r3, r2, r3
 8002248:	617b      	str	r3, [r7, #20]
    break;
 800224a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800224c:	4b09      	ldr	r3, [pc, #36]	; (8002274 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0e5b      	lsrs	r3, r3, #25
 8002252:	f003 0303 	and.w	r3, r3, #3
 8002256:	3301      	adds	r3, #1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002266:	687b      	ldr	r3, [r7, #4]
}
 8002268:	4618      	mov	r0, r3
 800226a:	371c      	adds	r7, #28
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	40021000 	.word	0x40021000
 8002278:	016e3600 	.word	0x016e3600
 800227c:	00f42400 	.word	0x00f42400

08002280 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002288:	2300      	movs	r3, #0
 800228a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800228c:	2300      	movs	r3, #0
 800228e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 8098 	beq.w	80023ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229e:	2300      	movs	r3, #0
 80022a0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a2:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10d      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ae:	4b40      	ldr	r3, [pc, #256]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b2:	4a3f      	ldr	r2, [pc, #252]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c6:	2301      	movs	r3, #1
 80022c8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a39      	ldr	r2, [pc, #228]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022d6:	f7fe fef3 	bl	80010c0 <HAL_GetTick>
 80022da:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022dc:	e009      	b.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022de:	f7fe feef 	bl	80010c0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d902      	bls.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80022ec:	2303      	movs	r3, #3
 80022ee:	74fb      	strb	r3, [r7, #19]
        break;
 80022f0:	e005      	b.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022f2:	4b30      	ldr	r3, [pc, #192]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0ef      	beq.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80022fe:	7cfb      	ldrb	r3, [r7, #19]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d159      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01e      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	d019      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800232c:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	4a1f      	ldr	r2, [pc, #124]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800233c:	4b1c      	ldr	r3, [pc, #112]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800233e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002342:	4a1b      	ldr	r2, [pc, #108]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002344:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800234c:	4a18      	ldr	r2, [pc, #96]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d016      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe feaf 	bl	80010c0 <HAL_GetTick>
 8002362:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002364:	e00b      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002366:	f7fe feab 	bl	80010c0 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	f241 3288 	movw	r2, #5000	; 0x1388
 8002374:	4293      	cmp	r3, r2
 8002376:	d902      	bls.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	74fb      	strb	r3, [r7, #19]
            break;
 800237c:	e006      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237e:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d0ec      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10b      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002392:	4b07      	ldr	r3, [pc, #28]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a0:	4903      	ldr	r1, [pc, #12]	; (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023a8:	e008      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023aa:	7cfb      	ldrb	r3, [r7, #19]
 80023ac:	74bb      	strb	r3, [r7, #18]
 80023ae:	e005      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023bc:	7c7b      	ldrb	r3, [r7, #17]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d105      	bne.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023c2:	4ba7      	ldr	r3, [pc, #668]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	4aa6      	ldr	r2, [pc, #664]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023da:	4ba1      	ldr	r3, [pc, #644]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e0:	f023 0203 	bic.w	r2, r3, #3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	499d      	ldr	r1, [pc, #628]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00a      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023fc:	4b98      	ldr	r3, [pc, #608]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	f023 020c 	bic.w	r2, r3, #12
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4995      	ldr	r1, [pc, #596]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800240c:	4313      	orrs	r3, r2
 800240e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0304 	and.w	r3, r3, #4
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800241e:	4b90      	ldr	r3, [pc, #576]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	498c      	ldr	r1, [pc, #560]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00a      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002440:	4b87      	ldr	r3, [pc, #540]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002446:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	4984      	ldr	r1, [pc, #528]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0310 	and.w	r3, r3, #16
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00a      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002462:	4b7f      	ldr	r3, [pc, #508]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	497b      	ldr	r1, [pc, #492]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0320 	and.w	r3, r3, #32
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00a      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002484:	4b76      	ldr	r3, [pc, #472]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	4973      	ldr	r1, [pc, #460]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00a      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024a6:	4b6e      	ldr	r3, [pc, #440]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ac:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	496a      	ldr	r1, [pc, #424]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00a      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024c8:	4b65      	ldr	r3, [pc, #404]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ce:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4962      	ldr	r1, [pc, #392]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00a      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024ea:	4b5d      	ldr	r3, [pc, #372]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	4959      	ldr	r1, [pc, #356]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00a      	beq.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800250c:	4b54      	ldr	r3, [pc, #336]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800250e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002512:	f023 0203 	bic.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	4951      	ldr	r1, [pc, #324]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00a      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800252e:	4b4c      	ldr	r3, [pc, #304]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253c:	4948      	ldr	r1, [pc, #288]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800253e:	4313      	orrs	r3, r2
 8002540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002550:	4b43      	ldr	r3, [pc, #268]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4940      	ldr	r1, [pc, #256]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800256e:	d105      	bne.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002570:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a3a      	ldr	r2, [pc, #232]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800257a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002584:	2b00      	cmp	r3, #0
 8002586:	d015      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002588:	4b35      	ldr	r3, [pc, #212]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	4932      	ldr	r1, [pc, #200]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a6:	d105      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025a8:	4b2d      	ldr	r3, [pc, #180]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4a2c      	ldr	r2, [pc, #176]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d015      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025c0:	4b27      	ldr	r3, [pc, #156]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ce:	4924      	ldr	r1, [pc, #144]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025de:	d105      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e0:	4b1f      	ldr	r3, [pc, #124]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d015      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025f8:	4b19      	ldr	r3, [pc, #100]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002606:	4916      	ldr	r1, [pc, #88]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002616:	d105      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a10      	ldr	r2, [pc, #64]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800261e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002622:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d019      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002630:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	4908      	ldr	r1, [pc, #32]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264e:	d109      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002650:	4b03      	ldr	r3, [pc, #12]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a02      	ldr	r2, [pc, #8]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002656:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800265a:	60d3      	str	r3, [r2, #12]
 800265c:	e002      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d015      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267e:	4926      	ldr	r1, [pc, #152]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800268e:	d105      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002690:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a20      	ldr	r2, [pc, #128]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d015      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80026a8:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b6:	4918      	ldr	r1, [pc, #96]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c6:	d105      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026c8:	4b13      	ldr	r3, [pc, #76]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a12      	ldr	r2, [pc, #72]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d015      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80026e0:	4b0d      	ldr	r3, [pc, #52]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ee:	490a      	ldr	r1, [pc, #40]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026fe:	d105      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	4a04      	ldr	r2, [pc, #16]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002706:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800270a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800270c:	7cbb      	ldrb	r3, [r7, #18]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000

0800271c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e049      	b.n	80027c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7fe fb00 	bl	8000d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3304      	adds	r3, #4
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f000 ffaa 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027da:	b2db      	uxtb	r3, r3
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d001      	beq.n	80027e4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e04c      	b.n	800287e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a26      	ldr	r2, [pc, #152]	; (800288c <HAL_TIM_Base_Start+0xc0>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d022      	beq.n	800283c <HAL_TIM_Base_Start+0x70>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fe:	d01d      	beq.n	800283c <HAL_TIM_Base_Start+0x70>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a22      	ldr	r2, [pc, #136]	; (8002890 <HAL_TIM_Base_Start+0xc4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d018      	beq.n	800283c <HAL_TIM_Base_Start+0x70>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a21      	ldr	r2, [pc, #132]	; (8002894 <HAL_TIM_Base_Start+0xc8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d013      	beq.n	800283c <HAL_TIM_Base_Start+0x70>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <HAL_TIM_Base_Start+0xcc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00e      	beq.n	800283c <HAL_TIM_Base_Start+0x70>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1e      	ldr	r2, [pc, #120]	; (800289c <HAL_TIM_Base_Start+0xd0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d009      	beq.n	800283c <HAL_TIM_Base_Start+0x70>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a1c      	ldr	r2, [pc, #112]	; (80028a0 <HAL_TIM_Base_Start+0xd4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d004      	beq.n	800283c <HAL_TIM_Base_Start+0x70>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_TIM_Base_Start+0xd8>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d115      	bne.n	8002868 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_TIM_Base_Start+0xdc>)
 8002844:	4013      	ands	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b06      	cmp	r3, #6
 800284c:	d015      	beq.n	800287a <HAL_TIM_Base_Start+0xae>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002854:	d011      	beq.n	800287a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002866:	e008      	b.n	800287a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e000      	b.n	800287c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3714      	adds	r7, #20
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40012c00 	.word	0x40012c00
 8002890:	40000400 	.word	0x40000400
 8002894:	40000800 	.word	0x40000800
 8002898:	40000c00 	.word	0x40000c00
 800289c:	40013400 	.word	0x40013400
 80028a0:	40014000 	.word	0x40014000
 80028a4:	40015000 	.word	0x40015000
 80028a8:	00010007 	.word	0x00010007

080028ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b085      	sub	sp, #20
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d001      	beq.n	80028c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e054      	b.n	800296e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f042 0201 	orr.w	r2, r2, #1
 80028da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a26      	ldr	r2, [pc, #152]	; (800297c <HAL_TIM_Base_Start_IT+0xd0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d022      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d01d      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a22      	ldr	r2, [pc, #136]	; (8002980 <HAL_TIM_Base_Start_IT+0xd4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d018      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a21      	ldr	r2, [pc, #132]	; (8002984 <HAL_TIM_Base_Start_IT+0xd8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d013      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a1f      	ldr	r2, [pc, #124]	; (8002988 <HAL_TIM_Base_Start_IT+0xdc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d00e      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a1e      	ldr	r2, [pc, #120]	; (800298c <HAL_TIM_Base_Start_IT+0xe0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d009      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <HAL_TIM_Base_Start_IT+0xe4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d004      	beq.n	800292c <HAL_TIM_Base_Start_IT+0x80>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_TIM_Base_Start_IT+0xe8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d115      	bne.n	8002958 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_TIM_Base_Start_IT+0xec>)
 8002934:	4013      	ands	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2b06      	cmp	r3, #6
 800293c:	d015      	beq.n	800296a <HAL_TIM_Base_Start_IT+0xbe>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002944:	d011      	beq.n	800296a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f042 0201 	orr.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002956:	e008      	b.n	800296a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e000      	b.n	800296c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40012c00 	.word	0x40012c00
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40000c00 	.word	0x40000c00
 800298c:	40013400 	.word	0x40013400
 8002990:	40014000 	.word	0x40014000
 8002994:	40015000 	.word	0x40015000
 8002998:	00010007 	.word	0x00010007

0800299c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e049      	b.n	8002a42 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d106      	bne.n	80029c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f841 	bl	8002a4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3304      	adds	r3, #4
 80029d8:	4619      	mov	r1, r3
 80029da:	4610      	mov	r0, r2
 80029dc:	f000 fe6a 	bl	80036b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d109      	bne.n	8002a84 <HAL_TIM_PWM_Start+0x24>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	e03c      	b.n	8002afe <HAL_TIM_PWM_Start+0x9e>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	d109      	bne.n	8002a9e <HAL_TIM_PWM_Start+0x3e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	bf14      	ite	ne
 8002a96:	2301      	movne	r3, #1
 8002a98:	2300      	moveq	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e02f      	b.n	8002afe <HAL_TIM_PWM_Start+0x9e>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d109      	bne.n	8002ab8 <HAL_TIM_PWM_Start+0x58>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	bf14      	ite	ne
 8002ab0:	2301      	movne	r3, #1
 8002ab2:	2300      	moveq	r3, #0
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	e022      	b.n	8002afe <HAL_TIM_PWM_Start+0x9e>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	2b0c      	cmp	r3, #12
 8002abc:	d109      	bne.n	8002ad2 <HAL_TIM_PWM_Start+0x72>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	e015      	b.n	8002afe <HAL_TIM_PWM_Start+0x9e>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b10      	cmp	r3, #16
 8002ad6:	d109      	bne.n	8002aec <HAL_TIM_PWM_Start+0x8c>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	bf14      	ite	ne
 8002ae4:	2301      	movne	r3, #1
 8002ae6:	2300      	moveq	r3, #0
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	e008      	b.n	8002afe <HAL_TIM_PWM_Start+0x9e>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	bf14      	ite	ne
 8002af8:	2301      	movne	r3, #1
 8002afa:	2300      	moveq	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e0a6      	b.n	8002c54 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d104      	bne.n	8002b16 <HAL_TIM_PWM_Start+0xb6>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b14:	e023      	b.n	8002b5e <HAL_TIM_PWM_Start+0xfe>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d104      	bne.n	8002b26 <HAL_TIM_PWM_Start+0xc6>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2202      	movs	r2, #2
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b24:	e01b      	b.n	8002b5e <HAL_TIM_PWM_Start+0xfe>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b08      	cmp	r3, #8
 8002b2a:	d104      	bne.n	8002b36 <HAL_TIM_PWM_Start+0xd6>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b34:	e013      	b.n	8002b5e <HAL_TIM_PWM_Start+0xfe>
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	2b0c      	cmp	r3, #12
 8002b3a:	d104      	bne.n	8002b46 <HAL_TIM_PWM_Start+0xe6>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2202      	movs	r2, #2
 8002b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b44:	e00b      	b.n	8002b5e <HAL_TIM_PWM_Start+0xfe>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0xf6>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b54:	e003      	b.n	8002b5e <HAL_TIM_PWM_Start+0xfe>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2201      	movs	r2, #1
 8002b64:	6839      	ldr	r1, [r7, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fafe 	bl	8004168 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3a      	ldr	r2, [pc, #232]	; (8002c5c <HAL_TIM_PWM_Start+0x1fc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d018      	beq.n	8002ba8 <HAL_TIM_PWM_Start+0x148>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a39      	ldr	r2, [pc, #228]	; (8002c60 <HAL_TIM_PWM_Start+0x200>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <HAL_TIM_PWM_Start+0x148>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a37      	ldr	r2, [pc, #220]	; (8002c64 <HAL_TIM_PWM_Start+0x204>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00e      	beq.n	8002ba8 <HAL_TIM_PWM_Start+0x148>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a36      	ldr	r2, [pc, #216]	; (8002c68 <HAL_TIM_PWM_Start+0x208>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d009      	beq.n	8002ba8 <HAL_TIM_PWM_Start+0x148>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <HAL_TIM_PWM_Start+0x20c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d004      	beq.n	8002ba8 <HAL_TIM_PWM_Start+0x148>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a33      	ldr	r2, [pc, #204]	; (8002c70 <HAL_TIM_PWM_Start+0x210>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <HAL_TIM_PWM_Start+0x14c>
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e000      	b.n	8002bae <HAL_TIM_PWM_Start+0x14e>
 8002bac:	2300      	movs	r3, #0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d007      	beq.n	8002bc2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a25      	ldr	r2, [pc, #148]	; (8002c5c <HAL_TIM_PWM_Start+0x1fc>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d022      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x1b2>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d01d      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x1b2>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a26      	ldr	r2, [pc, #152]	; (8002c74 <HAL_TIM_PWM_Start+0x214>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d018      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x1b2>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a24      	ldr	r2, [pc, #144]	; (8002c78 <HAL_TIM_PWM_Start+0x218>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d013      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x1b2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a23      	ldr	r2, [pc, #140]	; (8002c7c <HAL_TIM_PWM_Start+0x21c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00e      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x1b2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <HAL_TIM_PWM_Start+0x200>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x1b2>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_TIM_PWM_Start+0x204>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d004      	beq.n	8002c12 <HAL_TIM_PWM_Start+0x1b2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_TIM_PWM_Start+0x210>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d115      	bne.n	8002c3e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_TIM_PWM_Start+0x220>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b06      	cmp	r3, #6
 8002c22:	d015      	beq.n	8002c50 <HAL_TIM_PWM_Start+0x1f0>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c2a:	d011      	beq.n	8002c50 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0201 	orr.w	r2, r2, #1
 8002c3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c3c:	e008      	b.n	8002c50 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0201 	orr.w	r2, r2, #1
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e000      	b.n	8002c52 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40013400 	.word	0x40013400
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800
 8002c70:	40015000 	.word	0x40015000
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40000800 	.word	0x40000800
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	00010007 	.word	0x00010007

08002c84 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e097      	b.n	8002dc8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7fe f8a3 	bl	8000df8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002cc8:	f023 0307 	bic.w	r3, r3, #7
 8002ccc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	4610      	mov	r0, r2
 8002cda:	f000 fceb 	bl	80036b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d06:	f023 0303 	bic.w	r3, r3, #3
 8002d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	4313      	orrs	r3, r2
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002d24:	f023 030c 	bic.w	r3, r3, #12
 8002d28:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68da      	ldr	r2, [r3, #12]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	69db      	ldr	r3, [r3, #28]
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	4313      	orrs	r3, r2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	011a      	lsls	r2, r3, #4
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	031b      	lsls	r3, r3, #12
 8002d54:	4313      	orrs	r3, r2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002d62:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002d6a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	695b      	ldr	r3, [r3, #20]
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	4313      	orrs	r3, r2
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3718      	adds	r7, #24
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002de8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002df0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002df8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d110      	bne.n	8002e22 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e06:	7b7b      	ldrb	r3, [r7, #13]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d001      	beq.n	8002e10 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e069      	b.n	8002ee4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e20:	e031      	b.n	8002e86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d110      	bne.n	8002e4a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e28:	7bbb      	ldrb	r3, [r7, #14]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d102      	bne.n	8002e34 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e2e:	7b3b      	ldrb	r3, [r7, #12]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d001      	beq.n	8002e38 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e055      	b.n	8002ee4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e48:	e01d      	b.n	8002e86 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d108      	bne.n	8002e62 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e50:	7bbb      	ldrb	r3, [r7, #14]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d105      	bne.n	8002e62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e56:	7b7b      	ldrb	r3, [r7, #13]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d102      	bne.n	8002e62 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e5c:	7b3b      	ldrb	r3, [r7, #12]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d001      	beq.n	8002e66 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e03e      	b.n	8002ee4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2202      	movs	r2, #2
 8002e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_TIM_Encoder_Start+0xc4>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d008      	beq.n	8002ea4 <HAL_TIM_Encoder_Start+0xd4>
 8002e92:	e00f      	b.n	8002eb4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f963 	bl	8004168 <TIM_CCxChannelCmd>
      break;
 8002ea2:	e016      	b.n	8002ed2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	2104      	movs	r1, #4
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 f95b 	bl	8004168 <TIM_CCxChannelCmd>
      break;
 8002eb2:	e00e      	b.n	8002ed2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	2100      	movs	r1, #0
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f001 f953 	bl	8004168 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2104      	movs	r1, #4
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f001 f94c 	bl	8004168 <TIM_CCxChannelCmd>
      break;
 8002ed0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d020      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01b      	beq.n	8002f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0202 	mvn.w	r2, #2
 8002f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0303 	and.w	r3, r3, #3
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 fb9e 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 8002f3c:	e005      	b.n	8002f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fb90 	bl	8003664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fba1 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f003 0304 	and.w	r3, r3, #4
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d020      	beq.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d01b      	beq.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0204 	mvn.w	r2, #4
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 fb78 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fb6a 	bl	8003664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 fb7b 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d020      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01b      	beq.n	8002fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f06f 0208 	mvn.w	r2, #8
 8002fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2204      	movs	r2, #4
 8002fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	f003 0303 	and.w	r3, r3, #3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fb52 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 8002fd4:	e005      	b.n	8002fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fb44 	bl	8003664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 fb55 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d020      	beq.n	8003034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d01b      	beq.n	8003034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f06f 0210 	mvn.w	r2, #16
 8003004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2208      	movs	r2, #8
 800300a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003016:	2b00      	cmp	r3, #0
 8003018:	d003      	beq.n	8003022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 fb2c 	bl	8003678 <HAL_TIM_IC_CaptureCallback>
 8003020:	e005      	b.n	800302e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fb1e 	bl	8003664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fb2f 	bl	800368c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00c      	beq.n	8003058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d007      	beq.n	8003058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0201 	mvn.w	r2, #1
 8003050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd fda2 	bl	8000b9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00c      	beq.n	8003086 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003072:	2b00      	cmp	r3, #0
 8003074:	d007      	beq.n	8003086 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800307e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f001 f9cb 	bl	800441c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00c      	beq.n	80030aa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f001 f9c3 	bl	8004430 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00c      	beq.n	80030ce <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d007      	beq.n	80030ce <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 fae9 	bl	80036a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0220 	mvn.w	r2, #32
 80030ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f001 f98b 	bl	8004408 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00c      	beq.n	8003116 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d007      	beq.n	8003116 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800310e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f001 f997 	bl	8004444 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00c      	beq.n	800313a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d007      	beq.n	800313a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f001 f98f 	bl	8004458 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00c      	beq.n	800315e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d007      	beq.n	800315e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f001 f987 	bl	800446c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00c      	beq.n	8003182 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d007      	beq.n	8003182 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800317a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f001 f97f 	bl	8004480 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0ff      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b14      	cmp	r3, #20
 80031b6:	f200 80f0 	bhi.w	800339a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80031ba:	a201      	add	r2, pc, #4	; (adr r2, 80031c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c0:	08003215 	.word	0x08003215
 80031c4:	0800339b 	.word	0x0800339b
 80031c8:	0800339b 	.word	0x0800339b
 80031cc:	0800339b 	.word	0x0800339b
 80031d0:	08003255 	.word	0x08003255
 80031d4:	0800339b 	.word	0x0800339b
 80031d8:	0800339b 	.word	0x0800339b
 80031dc:	0800339b 	.word	0x0800339b
 80031e0:	08003297 	.word	0x08003297
 80031e4:	0800339b 	.word	0x0800339b
 80031e8:	0800339b 	.word	0x0800339b
 80031ec:	0800339b 	.word	0x0800339b
 80031f0:	080032d7 	.word	0x080032d7
 80031f4:	0800339b 	.word	0x0800339b
 80031f8:	0800339b 	.word	0x0800339b
 80031fc:	0800339b 	.word	0x0800339b
 8003200:	08003319 	.word	0x08003319
 8003204:	0800339b 	.word	0x0800339b
 8003208:	0800339b 	.word	0x0800339b
 800320c:	0800339b 	.word	0x0800339b
 8003210:	08003359 	.word	0x08003359
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68b9      	ldr	r1, [r7, #8]
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fafe 	bl	800381c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699a      	ldr	r2, [r3, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0208 	orr.w	r2, r2, #8
 800322e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	699a      	ldr	r2, [r3, #24]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 0204 	bic.w	r2, r2, #4
 800323e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6999      	ldr	r1, [r3, #24]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	619a      	str	r2, [r3, #24]
      break;
 8003252:	e0a5      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 fb78 	bl	8003950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800326e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699a      	ldr	r2, [r3, #24]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800327e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6999      	ldr	r1, [r3, #24]
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	021a      	lsls	r2, r3, #8
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	430a      	orrs	r2, r1
 8003292:	619a      	str	r2, [r3, #24]
      break;
 8003294:	e084      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fbeb 	bl	8003a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	69da      	ldr	r2, [r3, #28]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0208 	orr.w	r2, r2, #8
 80032b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	69da      	ldr	r2, [r3, #28]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0204 	bic.w	r2, r2, #4
 80032c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	69d9      	ldr	r1, [r3, #28]
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	61da      	str	r2, [r3, #28]
      break;
 80032d4:	e064      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fc5d 	bl	8003b9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	69da      	ldr	r2, [r3, #28]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	69da      	ldr	r2, [r3, #28]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69d9      	ldr	r1, [r3, #28]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	021a      	lsls	r2, r3, #8
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	61da      	str	r2, [r3, #28]
      break;
 8003316:	e043      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fcd0 	bl	8003cc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0208 	orr.w	r2, r2, #8
 8003332:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0204 	bic.w	r2, r2, #4
 8003342:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	430a      	orrs	r2, r1
 8003354:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003356:	e023      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68b9      	ldr	r1, [r7, #8]
 800335e:	4618      	mov	r0, r3
 8003360:	f000 fd1a 	bl	8003d98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003372:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003382:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	021a      	lsls	r2, r3, #8
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003398:	e002      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	75fb      	strb	r3, [r7, #23]
      break;
 800339e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop

080033b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033be:	2300      	movs	r3, #0
 80033c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d101      	bne.n	80033d0 <HAL_TIM_ConfigClockSource+0x1c>
 80033cc:	2302      	movs	r3, #2
 80033ce:	e0f6      	b.n	80035be <HAL_TIM_ConfigClockSource+0x20a>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2202      	movs	r2, #2
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80033ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a6f      	ldr	r2, [pc, #444]	; (80035c8 <HAL_TIM_ConfigClockSource+0x214>)
 800340a:	4293      	cmp	r3, r2
 800340c:	f000 80c1 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 8003410:	4a6d      	ldr	r2, [pc, #436]	; (80035c8 <HAL_TIM_ConfigClockSource+0x214>)
 8003412:	4293      	cmp	r3, r2
 8003414:	f200 80c6 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003418:	4a6c      	ldr	r2, [pc, #432]	; (80035cc <HAL_TIM_ConfigClockSource+0x218>)
 800341a:	4293      	cmp	r3, r2
 800341c:	f000 80b9 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 8003420:	4a6a      	ldr	r2, [pc, #424]	; (80035cc <HAL_TIM_ConfigClockSource+0x218>)
 8003422:	4293      	cmp	r3, r2
 8003424:	f200 80be 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003428:	4a69      	ldr	r2, [pc, #420]	; (80035d0 <HAL_TIM_ConfigClockSource+0x21c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	f000 80b1 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 8003430:	4a67      	ldr	r2, [pc, #412]	; (80035d0 <HAL_TIM_ConfigClockSource+0x21c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	f200 80b6 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003438:	4a66      	ldr	r2, [pc, #408]	; (80035d4 <HAL_TIM_ConfigClockSource+0x220>)
 800343a:	4293      	cmp	r3, r2
 800343c:	f000 80a9 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 8003440:	4a64      	ldr	r2, [pc, #400]	; (80035d4 <HAL_TIM_ConfigClockSource+0x220>)
 8003442:	4293      	cmp	r3, r2
 8003444:	f200 80ae 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003448:	4a63      	ldr	r2, [pc, #396]	; (80035d8 <HAL_TIM_ConfigClockSource+0x224>)
 800344a:	4293      	cmp	r3, r2
 800344c:	f000 80a1 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 8003450:	4a61      	ldr	r2, [pc, #388]	; (80035d8 <HAL_TIM_ConfigClockSource+0x224>)
 8003452:	4293      	cmp	r3, r2
 8003454:	f200 80a6 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003458:	4a60      	ldr	r2, [pc, #384]	; (80035dc <HAL_TIM_ConfigClockSource+0x228>)
 800345a:	4293      	cmp	r3, r2
 800345c:	f000 8099 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 8003460:	4a5e      	ldr	r2, [pc, #376]	; (80035dc <HAL_TIM_ConfigClockSource+0x228>)
 8003462:	4293      	cmp	r3, r2
 8003464:	f200 809e 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003468:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800346c:	f000 8091 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 8003470:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003474:	f200 8096 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347c:	f000 8089 	beq.w	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 8003480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003484:	f200 808e 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003488:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348c:	d03e      	beq.n	800350c <HAL_TIM_ConfigClockSource+0x158>
 800348e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003492:	f200 8087 	bhi.w	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	f000 8086 	beq.w	80035aa <HAL_TIM_ConfigClockSource+0x1f6>
 800349e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a2:	d87f      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80034a4:	2b70      	cmp	r3, #112	; 0x70
 80034a6:	d01a      	beq.n	80034de <HAL_TIM_ConfigClockSource+0x12a>
 80034a8:	2b70      	cmp	r3, #112	; 0x70
 80034aa:	d87b      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80034ac:	2b60      	cmp	r3, #96	; 0x60
 80034ae:	d050      	beq.n	8003552 <HAL_TIM_ConfigClockSource+0x19e>
 80034b0:	2b60      	cmp	r3, #96	; 0x60
 80034b2:	d877      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80034b4:	2b50      	cmp	r3, #80	; 0x50
 80034b6:	d03c      	beq.n	8003532 <HAL_TIM_ConfigClockSource+0x17e>
 80034b8:	2b50      	cmp	r3, #80	; 0x50
 80034ba:	d873      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80034bc:	2b40      	cmp	r3, #64	; 0x40
 80034be:	d058      	beq.n	8003572 <HAL_TIM_ConfigClockSource+0x1be>
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	d86f      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80034c4:	2b30      	cmp	r3, #48	; 0x30
 80034c6:	d064      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 80034c8:	2b30      	cmp	r3, #48	; 0x30
 80034ca:	d86b      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d060      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d867      	bhi.n	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d05c      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 80034d8:	2b10      	cmp	r3, #16
 80034da:	d05a      	beq.n	8003592 <HAL_TIM_ConfigClockSource+0x1de>
 80034dc:	e062      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034ee:	f000 fe1b 	bl	8004128 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	609a      	str	r2, [r3, #8]
      break;
 800350a:	e04f      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800351c:	f000 fe04 	bl	8004128 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800352e:	609a      	str	r2, [r3, #8]
      break;
 8003530:	e03c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353e:	461a      	mov	r2, r3
 8003540:	f000 fd76 	bl	8004030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2150      	movs	r1, #80	; 0x50
 800354a:	4618      	mov	r0, r3
 800354c:	f000 fdcf 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003550:	e02c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800355e:	461a      	mov	r2, r3
 8003560:	f000 fd95 	bl	800408e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2160      	movs	r1, #96	; 0x60
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fdbf 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003570:	e01c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800357e:	461a      	mov	r2, r3
 8003580:	f000 fd56 	bl	8004030 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2140      	movs	r1, #64	; 0x40
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fdaf 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 8003590:	e00c      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f000 fda6 	bl	80040ee <TIM_ITRx_SetConfig>
      break;
 80035a2:	e003      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      break;
 80035a8:	e000      	b.n	80035ac <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80035aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	00100070 	.word	0x00100070
 80035cc:	00100060 	.word	0x00100060
 80035d0:	00100050 	.word	0x00100050
 80035d4:	00100040 	.word	0x00100040
 80035d8:	00100030 	.word	0x00100030
 80035dc:	00100020 	.word	0x00100020

080035e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d101      	bne.n	80035f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80035f4:	2302      	movs	r3, #2
 80035f6:	e031      	b.n	800365c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003608:	6839      	ldr	r1, [r7, #0]
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fc30 	bl	8003e70 <TIM_SlaveTimer_SetConfig>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e018      	b.n	800365c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003638:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003648:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2201      	movs	r2, #1
 800364e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800365a:	2300      	movs	r3, #0
}
 800365c:	4618      	mov	r0, r3
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003694:	bf00      	nop
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a4c      	ldr	r2, [pc, #304]	; (80037f8 <TIM_Base_SetConfig+0x144>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d017      	beq.n	80036fc <TIM_Base_SetConfig+0x48>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d013      	beq.n	80036fc <TIM_Base_SetConfig+0x48>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a49      	ldr	r2, [pc, #292]	; (80037fc <TIM_Base_SetConfig+0x148>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00f      	beq.n	80036fc <TIM_Base_SetConfig+0x48>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a48      	ldr	r2, [pc, #288]	; (8003800 <TIM_Base_SetConfig+0x14c>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d00b      	beq.n	80036fc <TIM_Base_SetConfig+0x48>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a47      	ldr	r2, [pc, #284]	; (8003804 <TIM_Base_SetConfig+0x150>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d007      	beq.n	80036fc <TIM_Base_SetConfig+0x48>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a46      	ldr	r2, [pc, #280]	; (8003808 <TIM_Base_SetConfig+0x154>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_Base_SetConfig+0x48>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a45      	ldr	r2, [pc, #276]	; (800380c <TIM_Base_SetConfig+0x158>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d108      	bne.n	800370e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a39      	ldr	r2, [pc, #228]	; (80037f8 <TIM_Base_SetConfig+0x144>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d023      	beq.n	800375e <TIM_Base_SetConfig+0xaa>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d01f      	beq.n	800375e <TIM_Base_SetConfig+0xaa>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a36      	ldr	r2, [pc, #216]	; (80037fc <TIM_Base_SetConfig+0x148>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d01b      	beq.n	800375e <TIM_Base_SetConfig+0xaa>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a35      	ldr	r2, [pc, #212]	; (8003800 <TIM_Base_SetConfig+0x14c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d017      	beq.n	800375e <TIM_Base_SetConfig+0xaa>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a34      	ldr	r2, [pc, #208]	; (8003804 <TIM_Base_SetConfig+0x150>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d013      	beq.n	800375e <TIM_Base_SetConfig+0xaa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a33      	ldr	r2, [pc, #204]	; (8003808 <TIM_Base_SetConfig+0x154>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d00f      	beq.n	800375e <TIM_Base_SetConfig+0xaa>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a33      	ldr	r2, [pc, #204]	; (8003810 <TIM_Base_SetConfig+0x15c>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d00b      	beq.n	800375e <TIM_Base_SetConfig+0xaa>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a32      	ldr	r2, [pc, #200]	; (8003814 <TIM_Base_SetConfig+0x160>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d007      	beq.n	800375e <TIM_Base_SetConfig+0xaa>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a31      	ldr	r2, [pc, #196]	; (8003818 <TIM_Base_SetConfig+0x164>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d003      	beq.n	800375e <TIM_Base_SetConfig+0xaa>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a2c      	ldr	r2, [pc, #176]	; (800380c <TIM_Base_SetConfig+0x158>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d108      	bne.n	8003770 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a18      	ldr	r2, [pc, #96]	; (80037f8 <TIM_Base_SetConfig+0x144>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <TIM_Base_SetConfig+0x110>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a1a      	ldr	r2, [pc, #104]	; (8003808 <TIM_Base_SetConfig+0x154>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d00f      	beq.n	80037c4 <TIM_Base_SetConfig+0x110>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a1a      	ldr	r2, [pc, #104]	; (8003810 <TIM_Base_SetConfig+0x15c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <TIM_Base_SetConfig+0x110>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a19      	ldr	r2, [pc, #100]	; (8003814 <TIM_Base_SetConfig+0x160>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d007      	beq.n	80037c4 <TIM_Base_SetConfig+0x110>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a18      	ldr	r2, [pc, #96]	; (8003818 <TIM_Base_SetConfig+0x164>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d003      	beq.n	80037c4 <TIM_Base_SetConfig+0x110>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	4a13      	ldr	r2, [pc, #76]	; (800380c <TIM_Base_SetConfig+0x158>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d103      	bne.n	80037cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	691a      	ldr	r2, [r3, #16]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d105      	bne.n	80037ea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f023 0201 	bic.w	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	611a      	str	r2, [r3, #16]
  }
}
 80037ea:	bf00      	nop
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40012c00 	.word	0x40012c00
 80037fc:	40000400 	.word	0x40000400
 8003800:	40000800 	.word	0x40000800
 8003804:	40000c00 	.word	0x40000c00
 8003808:	40013400 	.word	0x40013400
 800380c:	40015000 	.word	0x40015000
 8003810:	40014000 	.word	0x40014000
 8003814:	40014400 	.word	0x40014400
 8003818:	40014800 	.word	0x40014800

0800381c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f023 0201 	bic.w	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800384a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4313      	orrs	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f023 0302 	bic.w	r3, r3, #2
 8003868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a30      	ldr	r2, [pc, #192]	; (8003938 <TIM_OC1_SetConfig+0x11c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <TIM_OC1_SetConfig+0x88>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a2f      	ldr	r2, [pc, #188]	; (800393c <TIM_OC1_SetConfig+0x120>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00f      	beq.n	80038a4 <TIM_OC1_SetConfig+0x88>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <TIM_OC1_SetConfig+0x124>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d00b      	beq.n	80038a4 <TIM_OC1_SetConfig+0x88>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <TIM_OC1_SetConfig+0x128>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d007      	beq.n	80038a4 <TIM_OC1_SetConfig+0x88>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <TIM_OC1_SetConfig+0x12c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d003      	beq.n	80038a4 <TIM_OC1_SetConfig+0x88>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a2b      	ldr	r2, [pc, #172]	; (800394c <TIM_OC1_SetConfig+0x130>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d10c      	bne.n	80038be <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0308 	bic.w	r3, r3, #8
 80038aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f023 0304 	bic.w	r3, r3, #4
 80038bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <TIM_OC1_SetConfig+0x11c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <TIM_OC1_SetConfig+0xd2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <TIM_OC1_SetConfig+0x120>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00f      	beq.n	80038ee <TIM_OC1_SetConfig+0xd2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <TIM_OC1_SetConfig+0x124>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00b      	beq.n	80038ee <TIM_OC1_SetConfig+0xd2>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <TIM_OC1_SetConfig+0x128>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <TIM_OC1_SetConfig+0xd2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a19      	ldr	r2, [pc, #100]	; (8003948 <TIM_OC1_SetConfig+0x12c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d003      	beq.n	80038ee <TIM_OC1_SetConfig+0xd2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <TIM_OC1_SetConfig+0x130>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d111      	bne.n	8003912 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	621a      	str	r2, [r3, #32]
}
 800392c:	bf00      	nop
 800392e:	371c      	adds	r7, #28
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40013400 	.word	0x40013400
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800
 800394c:	40015000 	.word	0x40015000

08003950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f023 0210 	bic.w	r2, r3, #16
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	021b      	lsls	r3, r3, #8
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0320 	bic.w	r3, r3, #32
 800399e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a2c      	ldr	r2, [pc, #176]	; (8003a60 <TIM_OC2_SetConfig+0x110>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d007      	beq.n	80039c4 <TIM_OC2_SetConfig+0x74>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a2b      	ldr	r2, [pc, #172]	; (8003a64 <TIM_OC2_SetConfig+0x114>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_OC2_SetConfig+0x74>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a2a      	ldr	r2, [pc, #168]	; (8003a68 <TIM_OC2_SetConfig+0x118>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d10d      	bne.n	80039e0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a1f      	ldr	r2, [pc, #124]	; (8003a60 <TIM_OC2_SetConfig+0x110>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <TIM_OC2_SetConfig+0xc0>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a1e      	ldr	r2, [pc, #120]	; (8003a64 <TIM_OC2_SetConfig+0x114>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00f      	beq.n	8003a10 <TIM_OC2_SetConfig+0xc0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a1e      	ldr	r2, [pc, #120]	; (8003a6c <TIM_OC2_SetConfig+0x11c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <TIM_OC2_SetConfig+0xc0>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a1d      	ldr	r2, [pc, #116]	; (8003a70 <TIM_OC2_SetConfig+0x120>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_OC2_SetConfig+0xc0>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a1c      	ldr	r2, [pc, #112]	; (8003a74 <TIM_OC2_SetConfig+0x124>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_OC2_SetConfig+0xc0>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <TIM_OC2_SetConfig+0x118>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d113      	bne.n	8003a38 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40013400 	.word	0x40013400
 8003a68:	40015000 	.word	0x40015000
 8003a6c:	40014000 	.word	0x40014000
 8003a70:	40014400 	.word	0x40014400
 8003a74:	40014800 	.word	0x40014800

08003a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f023 0303 	bic.w	r3, r3, #3
 8003ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2b      	ldr	r2, [pc, #172]	; (8003b84 <TIM_OC3_SetConfig+0x10c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <TIM_OC3_SetConfig+0x72>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <TIM_OC3_SetConfig+0x110>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d003      	beq.n	8003aea <TIM_OC3_SetConfig+0x72>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <TIM_OC3_SetConfig+0x114>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10d      	bne.n	8003b06 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <TIM_OC3_SetConfig+0x10c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d013      	beq.n	8003b36 <TIM_OC3_SetConfig+0xbe>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <TIM_OC3_SetConfig+0x110>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d00f      	beq.n	8003b36 <TIM_OC3_SetConfig+0xbe>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a1d      	ldr	r2, [pc, #116]	; (8003b90 <TIM_OC3_SetConfig+0x118>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00b      	beq.n	8003b36 <TIM_OC3_SetConfig+0xbe>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <TIM_OC3_SetConfig+0x11c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d007      	beq.n	8003b36 <TIM_OC3_SetConfig+0xbe>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <TIM_OC3_SetConfig+0x120>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d003      	beq.n	8003b36 <TIM_OC3_SetConfig+0xbe>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <TIM_OC3_SetConfig+0x114>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d113      	bne.n	8003b5e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	011b      	lsls	r3, r3, #4
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	40013400 	.word	0x40013400
 8003b8c:	40015000 	.word	0x40015000
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800

08003b9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	031b      	lsls	r3, r3, #12
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a2c      	ldr	r2, [pc, #176]	; (8003cac <TIM_OC4_SetConfig+0x110>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d007      	beq.n	8003c10 <TIM_OC4_SetConfig+0x74>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <TIM_OC4_SetConfig+0x114>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d003      	beq.n	8003c10 <TIM_OC4_SetConfig+0x74>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a2a      	ldr	r2, [pc, #168]	; (8003cb4 <TIM_OC4_SetConfig+0x118>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d10d      	bne.n	8003c2c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	031b      	lsls	r3, r3, #12
 8003c1e:	697a      	ldr	r2, [r7, #20]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <TIM_OC4_SetConfig+0x110>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d013      	beq.n	8003c5c <TIM_OC4_SetConfig+0xc0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <TIM_OC4_SetConfig+0x114>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d00f      	beq.n	8003c5c <TIM_OC4_SetConfig+0xc0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <TIM_OC4_SetConfig+0x11c>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d00b      	beq.n	8003c5c <TIM_OC4_SetConfig+0xc0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <TIM_OC4_SetConfig+0x120>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d007      	beq.n	8003c5c <TIM_OC4_SetConfig+0xc0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <TIM_OC4_SetConfig+0x124>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d003      	beq.n	8003c5c <TIM_OC4_SetConfig+0xc0>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <TIM_OC4_SetConfig+0x118>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d113      	bne.n	8003c84 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c62:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003c6a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	019b      	lsls	r3, r3, #6
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	019b      	lsls	r3, r3, #6
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685a      	ldr	r2, [r3, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	621a      	str	r2, [r3, #32]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	40012c00 	.word	0x40012c00
 8003cb0:	40013400 	.word	0x40013400
 8003cb4:	40015000 	.word	0x40015000
 8003cb8:	40014000 	.word	0x40014000
 8003cbc:	40014400 	.word	0x40014400
 8003cc0:	40014800 	.word	0x40014800

08003cc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b087      	sub	sp, #28
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003d08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	041b      	lsls	r3, r3, #16
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <TIM_OC5_SetConfig+0xbc>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <TIM_OC5_SetConfig+0x82>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <TIM_OC5_SetConfig+0xc0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00f      	beq.n	8003d46 <TIM_OC5_SetConfig+0x82>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <TIM_OC5_SetConfig+0xc4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d00b      	beq.n	8003d46 <TIM_OC5_SetConfig+0x82>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <TIM_OC5_SetConfig+0xc8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d007      	beq.n	8003d46 <TIM_OC5_SetConfig+0x82>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <TIM_OC5_SetConfig+0xcc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d003      	beq.n	8003d46 <TIM_OC5_SetConfig+0x82>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <TIM_OC5_SetConfig+0xd0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d109      	bne.n	8003d5a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	697a      	ldr	r2, [r7, #20]
 8003d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	621a      	str	r2, [r3, #32]
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	40012c00 	.word	0x40012c00
 8003d84:	40013400 	.word	0x40013400
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40014400 	.word	0x40014400
 8003d90:	40014800 	.word	0x40014800
 8003d94:	40015000 	.word	0x40015000

08003d98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	051b      	lsls	r3, r3, #20
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a1a      	ldr	r2, [pc, #104]	; (8003e58 <TIM_OC6_SetConfig+0xc0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <TIM_OC6_SetConfig+0x84>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a19      	ldr	r2, [pc, #100]	; (8003e5c <TIM_OC6_SetConfig+0xc4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00f      	beq.n	8003e1c <TIM_OC6_SetConfig+0x84>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a18      	ldr	r2, [pc, #96]	; (8003e60 <TIM_OC6_SetConfig+0xc8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d00b      	beq.n	8003e1c <TIM_OC6_SetConfig+0x84>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <TIM_OC6_SetConfig+0xcc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d007      	beq.n	8003e1c <TIM_OC6_SetConfig+0x84>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a16      	ldr	r2, [pc, #88]	; (8003e68 <TIM_OC6_SetConfig+0xd0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d003      	beq.n	8003e1c <TIM_OC6_SetConfig+0x84>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <TIM_OC6_SetConfig+0xd4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d109      	bne.n	8003e30 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	029b      	lsls	r3, r3, #10
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40013400 	.word	0x40013400
 8003e60:	40014000 	.word	0x40014000
 8003e64:	40014400 	.word	0x40014400
 8003e68:	40014800 	.word	0x40014800
 8003e6c:	40015000 	.word	0x40015000

08003e70 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	693a      	ldr	r2, [r7, #16]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea2:	f023 0307 	bic.w	r3, r3, #7
 8003ea6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	4a56      	ldr	r2, [pc, #344]	; (8004018 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	f000 80a2 	beq.w	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003ec6:	4a54      	ldr	r2, [pc, #336]	; (8004018 <TIM_SlaveTimer_SetConfig+0x1a8>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	f200 809b 	bhi.w	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003ece:	4a53      	ldr	r2, [pc, #332]	; (800401c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	f000 809a 	beq.w	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003ed6:	4a51      	ldr	r2, [pc, #324]	; (800401c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	f200 8093 	bhi.w	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003ede:	4a50      	ldr	r2, [pc, #320]	; (8004020 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	f000 8092 	beq.w	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003ee6:	4a4e      	ldr	r2, [pc, #312]	; (8004020 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	f200 808b 	bhi.w	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003eee:	4a4d      	ldr	r2, [pc, #308]	; (8004024 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	f000 808a 	beq.w	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003ef6:	4a4b      	ldr	r2, [pc, #300]	; (8004024 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	f200 8083 	bhi.w	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003efe:	4a4a      	ldr	r2, [pc, #296]	; (8004028 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	f000 8082 	beq.w	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003f06:	4a48      	ldr	r2, [pc, #288]	; (8004028 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d87b      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f0c:	4a47      	ldr	r2, [pc, #284]	; (800402c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d07b      	beq.n	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003f12:	4a46      	ldr	r2, [pc, #280]	; (800402c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d875      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f18:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f1c:	d075      	beq.n	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003f1e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003f22:	d86f      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f28:	d06f      	beq.n	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f2e:	d869      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f30:	2b70      	cmp	r3, #112	; 0x70
 8003f32:	d01a      	beq.n	8003f6a <TIM_SlaveTimer_SetConfig+0xfa>
 8003f34:	2b70      	cmp	r3, #112	; 0x70
 8003f36:	d865      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f38:	2b60      	cmp	r3, #96	; 0x60
 8003f3a:	d059      	beq.n	8003ff0 <TIM_SlaveTimer_SetConfig+0x180>
 8003f3c:	2b60      	cmp	r3, #96	; 0x60
 8003f3e:	d861      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f40:	2b50      	cmp	r3, #80	; 0x50
 8003f42:	d04b      	beq.n	8003fdc <TIM_SlaveTimer_SetConfig+0x16c>
 8003f44:	2b50      	cmp	r3, #80	; 0x50
 8003f46:	d85d      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d019      	beq.n	8003f80 <TIM_SlaveTimer_SetConfig+0x110>
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d859      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f50:	2b30      	cmp	r3, #48	; 0x30
 8003f52:	d05a      	beq.n	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003f54:	2b30      	cmp	r3, #48	; 0x30
 8003f56:	d855      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f58:	2b20      	cmp	r3, #32
 8003f5a:	d056      	beq.n	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003f5c:	2b20      	cmp	r3, #32
 8003f5e:	d851      	bhi.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d052      	beq.n	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d050      	beq.n	800400a <TIM_SlaveTimer_SetConfig+0x19a>
 8003f68:	e04c      	b.n	8004004 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003f7a:	f000 f8d5 	bl	8004128 <TIM_ETR_SetConfig>
      break;
 8003f7e:	e045      	b.n	800400c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	d004      	beq.n	8003f92 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8003f8c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8003f90:	d101      	bne.n	8003f96 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e03b      	b.n	800400e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6a1a      	ldr	r2, [r3, #32]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fbc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68ba      	ldr	r2, [r7, #8]
 8003fd0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68fa      	ldr	r2, [r7, #12]
 8003fd8:	621a      	str	r2, [r3, #32]
      break;
 8003fda:	e017      	b.n	800400c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f000 f821 	bl	8004030 <TIM_TI1_ConfigInputStage>
      break;
 8003fee:	e00d      	b.n	800400c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	f000 f846 	bl	800408e <TIM_TI2_ConfigInputStage>
      break;
 8004002:	e003      	b.n	800400c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	75fb      	strb	r3, [r7, #23]
      break;
 8004008:	e000      	b.n	800400c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800400a:	bf00      	nop
  }

  return status;
 800400c:	7dfb      	ldrb	r3, [r7, #23]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	00100070 	.word	0x00100070
 800401c:	00100060 	.word	0x00100060
 8004020:	00100050 	.word	0x00100050
 8004024:	00100040 	.word	0x00100040
 8004028:	00100030 	.word	0x00100030
 800402c:	00100020 	.word	0x00100020

08004030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004030:	b480      	push	{r7}
 8004032:	b087      	sub	sp, #28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f023 0201 	bic.w	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	4313      	orrs	r3, r2
 8004064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 030a 	bic.w	r3, r3, #10
 800406c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	621a      	str	r2, [r3, #32]
}
 8004082:	bf00      	nop
 8004084:	371c      	adds	r7, #28
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800408e:	b480      	push	{r7}
 8004090:	b087      	sub	sp, #28
 8004092:	af00      	add	r7, sp, #0
 8004094:	60f8      	str	r0, [r7, #12]
 8004096:	60b9      	str	r1, [r7, #8]
 8004098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 0210 	bic.w	r2, r3, #16
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	031b      	lsls	r3, r3, #12
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	bf00      	nop
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b085      	sub	sp, #20
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
 80040f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4313      	orrs	r3, r2
 8004110:	f043 0307 	orr.w	r3, r3, #7
 8004114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	609a      	str	r2, [r3, #8]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
 8004134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	021a      	lsls	r2, r3, #8
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	431a      	orrs	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	609a      	str	r2, [r3, #8]
}
 800415c:	bf00      	nop
 800415e:	371c      	adds	r7, #28
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 031f 	and.w	r3, r3, #31
 800417a:	2201      	movs	r2, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a1a      	ldr	r2, [r3, #32]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1a      	ldr	r2, [r3, #32]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	fa01 f303 	lsl.w	r3, r1, r3
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
	...

080041b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e074      	b.n	80042b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a33      	ldr	r2, [pc, #204]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d004      	beq.n	800420a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a31      	ldr	r2, [pc, #196]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d108      	bne.n	800421c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004210:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a21      	ldr	r2, [pc, #132]	; (80042c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d022      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d01d      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d018      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1d      	ldr	r2, [pc, #116]	; (80042d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d013      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1c      	ldr	r2, [pc, #112]	; (80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d00e      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d009      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a11      	ldr	r2, [pc, #68]	; (80042cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10c      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	4313      	orrs	r3, r2
 800429a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3714      	adds	r7, #20
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40012c00 	.word	0x40012c00
 80042c8:	40013400 	.word	0x40013400
 80042cc:	40015000 	.word	0x40015000
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40000800 	.word	0x40000800
 80042d8:	40000c00 	.word	0x40000c00
 80042dc:	40014000 	.word	0x40014000

080042e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e078      	b.n	80043ee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	699b      	ldr	r3, [r3, #24]
 8004370:	041b      	lsls	r3, r3, #16
 8004372:	4313      	orrs	r3, r2
 8004374:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	69db      	ldr	r3, [r3, #28]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1b      	ldr	r2, [pc, #108]	; (8004400 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a19      	ldr	r2, [pc, #100]	; (8004404 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d11c      	bne.n	80043dc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	051b      	lsls	r3, r3, #20
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3714      	adds	r7, #20
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40012c00 	.word	0x40012c00
 8004400:	40013400 	.word	0x40013400
 8004404:	40015000 	.word	0x40015000

08004408 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e042      	b.n	800452c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fc fbad 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2224      	movs	r2, #36	; 0x24
 80044c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fb24 	bl	8004b2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f825 	bl	8004534 <UART_SetConfig>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d101      	bne.n	80044f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e01b      	b.n	800452c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004502:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	689a      	ldr	r2, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004512:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fba3 	bl	8004c70 <UART_CheckIdleState>
 800452a:	4603      	mov	r3, r0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004538:	b08c      	sub	sp, #48	; 0x30
 800453a:	af00      	add	r7, sp, #0
 800453c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4313      	orrs	r3, r2
 800455a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4baa      	ldr	r3, [pc, #680]	; (800480c <UART_SetConfig+0x2d8>)
 8004564:	4013      	ands	r3, r2
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800456c:	430b      	orrs	r3, r1
 800456e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a9f      	ldr	r2, [pc, #636]	; (8004810 <UART_SetConfig+0x2dc>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459c:	4313      	orrs	r3, r2
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80045aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f023 010f 	bic.w	r1, r3, #15
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a90      	ldr	r2, [pc, #576]	; (8004814 <UART_SetConfig+0x2e0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d125      	bne.n	8004624 <UART_SetConfig+0xf0>
 80045d8:	4b8f      	ldr	r3, [pc, #572]	; (8004818 <UART_SetConfig+0x2e4>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d81a      	bhi.n	800461c <UART_SetConfig+0xe8>
 80045e6:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <UART_SetConfig+0xb8>)
 80045e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ec:	080045fd 	.word	0x080045fd
 80045f0:	0800460d 	.word	0x0800460d
 80045f4:	08004605 	.word	0x08004605
 80045f8:	08004615 	.word	0x08004615
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004602:	e116      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004604:	2302      	movs	r3, #2
 8004606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800460a:	e112      	b.n	8004832 <UART_SetConfig+0x2fe>
 800460c:	2304      	movs	r3, #4
 800460e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004612:	e10e      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004614:	2308      	movs	r3, #8
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800461a:	e10a      	b.n	8004832 <UART_SetConfig+0x2fe>
 800461c:	2310      	movs	r3, #16
 800461e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004622:	e106      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a7c      	ldr	r2, [pc, #496]	; (800481c <UART_SetConfig+0x2e8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d138      	bne.n	80046a0 <UART_SetConfig+0x16c>
 800462e:	4b7a      	ldr	r3, [pc, #488]	; (8004818 <UART_SetConfig+0x2e4>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b0c      	cmp	r3, #12
 800463a:	d82d      	bhi.n	8004698 <UART_SetConfig+0x164>
 800463c:	a201      	add	r2, pc, #4	; (adr r2, 8004644 <UART_SetConfig+0x110>)
 800463e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004642:	bf00      	nop
 8004644:	08004679 	.word	0x08004679
 8004648:	08004699 	.word	0x08004699
 800464c:	08004699 	.word	0x08004699
 8004650:	08004699 	.word	0x08004699
 8004654:	08004689 	.word	0x08004689
 8004658:	08004699 	.word	0x08004699
 800465c:	08004699 	.word	0x08004699
 8004660:	08004699 	.word	0x08004699
 8004664:	08004681 	.word	0x08004681
 8004668:	08004699 	.word	0x08004699
 800466c:	08004699 	.word	0x08004699
 8004670:	08004699 	.word	0x08004699
 8004674:	08004691 	.word	0x08004691
 8004678:	2300      	movs	r3, #0
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800467e:	e0d8      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004680:	2302      	movs	r3, #2
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004686:	e0d4      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004688:	2304      	movs	r3, #4
 800468a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800468e:	e0d0      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004690:	2308      	movs	r3, #8
 8004692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004696:	e0cc      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004698:	2310      	movs	r3, #16
 800469a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800469e:	e0c8      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a5e      	ldr	r2, [pc, #376]	; (8004820 <UART_SetConfig+0x2ec>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d125      	bne.n	80046f6 <UART_SetConfig+0x1c2>
 80046aa:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <UART_SetConfig+0x2e4>)
 80046ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80046b4:	2b30      	cmp	r3, #48	; 0x30
 80046b6:	d016      	beq.n	80046e6 <UART_SetConfig+0x1b2>
 80046b8:	2b30      	cmp	r3, #48	; 0x30
 80046ba:	d818      	bhi.n	80046ee <UART_SetConfig+0x1ba>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d00a      	beq.n	80046d6 <UART_SetConfig+0x1a2>
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d814      	bhi.n	80046ee <UART_SetConfig+0x1ba>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <UART_SetConfig+0x19a>
 80046c8:	2b10      	cmp	r3, #16
 80046ca:	d008      	beq.n	80046de <UART_SetConfig+0x1aa>
 80046cc:	e00f      	b.n	80046ee <UART_SetConfig+0x1ba>
 80046ce:	2300      	movs	r3, #0
 80046d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046d4:	e0ad      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046d6:	2302      	movs	r3, #2
 80046d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046dc:	e0a9      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046de:	2304      	movs	r3, #4
 80046e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046e4:	e0a5      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046e6:	2308      	movs	r3, #8
 80046e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046ec:	e0a1      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046ee:	2310      	movs	r3, #16
 80046f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80046f4:	e09d      	b.n	8004832 <UART_SetConfig+0x2fe>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a4a      	ldr	r2, [pc, #296]	; (8004824 <UART_SetConfig+0x2f0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d125      	bne.n	800474c <UART_SetConfig+0x218>
 8004700:	4b45      	ldr	r3, [pc, #276]	; (8004818 <UART_SetConfig+0x2e4>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800470a:	2bc0      	cmp	r3, #192	; 0xc0
 800470c:	d016      	beq.n	800473c <UART_SetConfig+0x208>
 800470e:	2bc0      	cmp	r3, #192	; 0xc0
 8004710:	d818      	bhi.n	8004744 <UART_SetConfig+0x210>
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d00a      	beq.n	800472c <UART_SetConfig+0x1f8>
 8004716:	2b80      	cmp	r3, #128	; 0x80
 8004718:	d814      	bhi.n	8004744 <UART_SetConfig+0x210>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <UART_SetConfig+0x1f0>
 800471e:	2b40      	cmp	r3, #64	; 0x40
 8004720:	d008      	beq.n	8004734 <UART_SetConfig+0x200>
 8004722:	e00f      	b.n	8004744 <UART_SetConfig+0x210>
 8004724:	2300      	movs	r3, #0
 8004726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800472a:	e082      	b.n	8004832 <UART_SetConfig+0x2fe>
 800472c:	2302      	movs	r3, #2
 800472e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004732:	e07e      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800473a:	e07a      	b.n	8004832 <UART_SetConfig+0x2fe>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004742:	e076      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800474a:	e072      	b.n	8004832 <UART_SetConfig+0x2fe>
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a35      	ldr	r2, [pc, #212]	; (8004828 <UART_SetConfig+0x2f4>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d12a      	bne.n	80047ac <UART_SetConfig+0x278>
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <UART_SetConfig+0x2e4>)
 8004758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004760:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004764:	d01a      	beq.n	800479c <UART_SetConfig+0x268>
 8004766:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800476a:	d81b      	bhi.n	80047a4 <UART_SetConfig+0x270>
 800476c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004770:	d00c      	beq.n	800478c <UART_SetConfig+0x258>
 8004772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004776:	d815      	bhi.n	80047a4 <UART_SetConfig+0x270>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <UART_SetConfig+0x250>
 800477c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004780:	d008      	beq.n	8004794 <UART_SetConfig+0x260>
 8004782:	e00f      	b.n	80047a4 <UART_SetConfig+0x270>
 8004784:	2300      	movs	r3, #0
 8004786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800478a:	e052      	b.n	8004832 <UART_SetConfig+0x2fe>
 800478c:	2302      	movs	r3, #2
 800478e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004792:	e04e      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004794:	2304      	movs	r3, #4
 8004796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800479a:	e04a      	b.n	8004832 <UART_SetConfig+0x2fe>
 800479c:	2308      	movs	r3, #8
 800479e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047a2:	e046      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047a4:	2310      	movs	r3, #16
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047aa:	e042      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a17      	ldr	r2, [pc, #92]	; (8004810 <UART_SetConfig+0x2dc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d13a      	bne.n	800482c <UART_SetConfig+0x2f8>
 80047b6:	4b18      	ldr	r3, [pc, #96]	; (8004818 <UART_SetConfig+0x2e4>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80047c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047c4:	d01a      	beq.n	80047fc <UART_SetConfig+0x2c8>
 80047c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047ca:	d81b      	bhi.n	8004804 <UART_SetConfig+0x2d0>
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d0:	d00c      	beq.n	80047ec <UART_SetConfig+0x2b8>
 80047d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d6:	d815      	bhi.n	8004804 <UART_SetConfig+0x2d0>
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d003      	beq.n	80047e4 <UART_SetConfig+0x2b0>
 80047dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e0:	d008      	beq.n	80047f4 <UART_SetConfig+0x2c0>
 80047e2:	e00f      	b.n	8004804 <UART_SetConfig+0x2d0>
 80047e4:	2300      	movs	r3, #0
 80047e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047ea:	e022      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047ec:	2302      	movs	r3, #2
 80047ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047f2:	e01e      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047f4:	2304      	movs	r3, #4
 80047f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047fa:	e01a      	b.n	8004832 <UART_SetConfig+0x2fe>
 80047fc:	2308      	movs	r3, #8
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004802:	e016      	b.n	8004832 <UART_SetConfig+0x2fe>
 8004804:	2310      	movs	r3, #16
 8004806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800480a:	e012      	b.n	8004832 <UART_SetConfig+0x2fe>
 800480c:	cfff69f3 	.word	0xcfff69f3
 8004810:	40008000 	.word	0x40008000
 8004814:	40013800 	.word	0x40013800
 8004818:	40021000 	.word	0x40021000
 800481c:	40004400 	.word	0x40004400
 8004820:	40004800 	.word	0x40004800
 8004824:	40004c00 	.word	0x40004c00
 8004828:	40005000 	.word	0x40005000
 800482c:	2310      	movs	r3, #16
 800482e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4aae      	ldr	r2, [pc, #696]	; (8004af0 <UART_SetConfig+0x5bc>)
 8004838:	4293      	cmp	r3, r2
 800483a:	f040 8097 	bne.w	800496c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800483e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004842:	2b08      	cmp	r3, #8
 8004844:	d823      	bhi.n	800488e <UART_SetConfig+0x35a>
 8004846:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0x318>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	08004871 	.word	0x08004871
 8004850:	0800488f 	.word	0x0800488f
 8004854:	08004879 	.word	0x08004879
 8004858:	0800488f 	.word	0x0800488f
 800485c:	0800487f 	.word	0x0800487f
 8004860:	0800488f 	.word	0x0800488f
 8004864:	0800488f 	.word	0x0800488f
 8004868:	0800488f 	.word	0x0800488f
 800486c:	08004887 	.word	0x08004887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7fd fc62 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8004874:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004876:	e010      	b.n	800489a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004878:	4b9e      	ldr	r3, [pc, #632]	; (8004af4 <UART_SetConfig+0x5c0>)
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800487c:	e00d      	b.n	800489a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800487e:	f7fd fbed 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8004882:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004884:	e009      	b.n	800489a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800488a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800488c:	e005      	b.n	800489a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8130 	beq.w	8004b02 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a6:	4a94      	ldr	r2, [pc, #592]	; (8004af8 <UART_SetConfig+0x5c4>)
 80048a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ac:	461a      	mov	r2, r3
 80048ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	4413      	add	r3, r2
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d305      	bcc.n	80048d2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d903      	bls.n	80048da <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80048d8:	e113      	b.n	8004b02 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048dc:	2200      	movs	r2, #0
 80048de:	60bb      	str	r3, [r7, #8]
 80048e0:	60fa      	str	r2, [r7, #12]
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	4a84      	ldr	r2, [pc, #528]	; (8004af8 <UART_SetConfig+0x5c4>)
 80048e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2200      	movs	r2, #0
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	607a      	str	r2, [r7, #4]
 80048f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048fc:	f7fb fc90 	bl	8000220 <__aeabi_uldivmod>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4610      	mov	r0, r2
 8004906:	4619      	mov	r1, r3
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	020b      	lsls	r3, r1, #8
 8004912:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004916:	0202      	lsls	r2, r0, #8
 8004918:	6979      	ldr	r1, [r7, #20]
 800491a:	6849      	ldr	r1, [r1, #4]
 800491c:	0849      	lsrs	r1, r1, #1
 800491e:	2000      	movs	r0, #0
 8004920:	460c      	mov	r4, r1
 8004922:	4605      	mov	r5, r0
 8004924:	eb12 0804 	adds.w	r8, r2, r4
 8004928:	eb43 0905 	adc.w	r9, r3, r5
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	469a      	mov	sl, r3
 8004934:	4693      	mov	fp, r2
 8004936:	4652      	mov	r2, sl
 8004938:	465b      	mov	r3, fp
 800493a:	4640      	mov	r0, r8
 800493c:	4649      	mov	r1, r9
 800493e:	f7fb fc6f 	bl	8000220 <__aeabi_uldivmod>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4613      	mov	r3, r2
 8004948:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004950:	d308      	bcc.n	8004964 <UART_SetConfig+0x430>
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004958:	d204      	bcs.n	8004964 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a3a      	ldr	r2, [r7, #32]
 8004960:	60da      	str	r2, [r3, #12]
 8004962:	e0ce      	b.n	8004b02 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800496a:	e0ca      	b.n	8004b02 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004974:	d166      	bne.n	8004a44 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800497a:	2b08      	cmp	r3, #8
 800497c:	d827      	bhi.n	80049ce <UART_SetConfig+0x49a>
 800497e:	a201      	add	r2, pc, #4	; (adr r2, 8004984 <UART_SetConfig+0x450>)
 8004980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004984:	080049a9 	.word	0x080049a9
 8004988:	080049b1 	.word	0x080049b1
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049cf 	.word	0x080049cf
 8004994:	080049bf 	.word	0x080049bf
 8004998:	080049cf 	.word	0x080049cf
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049cf 	.word	0x080049cf
 80049a4:	080049c7 	.word	0x080049c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049a8:	f7fd fbc6 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049ae:	e014      	b.n	80049da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049b0:	f7fd fbd8 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 80049b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049b6:	e010      	b.n	80049da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049b8:	4b4e      	ldr	r3, [pc, #312]	; (8004af4 <UART_SetConfig+0x5c0>)
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049bc:	e00d      	b.n	80049da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049be:	f7fd fb4d 	bl	800205c <HAL_RCC_GetSysClockFreq>
 80049c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80049c4:	e009      	b.n	80049da <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80049cc:	e005      	b.n	80049da <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80049d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8090 	beq.w	8004b02 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e6:	4a44      	ldr	r2, [pc, #272]	; (8004af8 <UART_SetConfig+0x5c4>)
 80049e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ec:	461a      	mov	r2, r3
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80049f4:	005a      	lsls	r2, r3, #1
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	441a      	add	r2, r3
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	2b0f      	cmp	r3, #15
 8004a0c:	d916      	bls.n	8004a3c <UART_SetConfig+0x508>
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a14:	d212      	bcs.n	8004a3c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f023 030f 	bic.w	r3, r3, #15
 8004a1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	085b      	lsrs	r3, r3, #1
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	b29a      	uxth	r2, r3
 8004a2c:	8bfb      	ldrh	r3, [r7, #30]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	8bfa      	ldrh	r2, [r7, #30]
 8004a38:	60da      	str	r2, [r3, #12]
 8004a3a:	e062      	b.n	8004b02 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004a42:	e05e      	b.n	8004b02 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d828      	bhi.n	8004a9e <UART_SetConfig+0x56a>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <UART_SetConfig+0x520>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a79 	.word	0x08004a79
 8004a58:	08004a81 	.word	0x08004a81
 8004a5c:	08004a89 	.word	0x08004a89
 8004a60:	08004a9f 	.word	0x08004a9f
 8004a64:	08004a8f 	.word	0x08004a8f
 8004a68:	08004a9f 	.word	0x08004a9f
 8004a6c:	08004a9f 	.word	0x08004a9f
 8004a70:	08004a9f 	.word	0x08004a9f
 8004a74:	08004a97 	.word	0x08004a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a78:	f7fd fb5e 	bl	8002138 <HAL_RCC_GetPCLK1Freq>
 8004a7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a7e:	e014      	b.n	8004aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a80:	f7fd fb70 	bl	8002164 <HAL_RCC_GetPCLK2Freq>
 8004a84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a86:	e010      	b.n	8004aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a88:	4b1a      	ldr	r3, [pc, #104]	; (8004af4 <UART_SetConfig+0x5c0>)
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a8c:	e00d      	b.n	8004aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a8e:	f7fd fae5 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8004a92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004a94:	e009      	b.n	8004aaa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004a9c:	e005      	b.n	8004aaa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d028      	beq.n	8004b02 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <UART_SetConfig+0x5c4>)
 8004ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aba:	461a      	mov	r2, r3
 8004abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	085b      	lsrs	r3, r3, #1
 8004ac8:	441a      	add	r2, r3
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	2b0f      	cmp	r3, #15
 8004ad8:	d910      	bls.n	8004afc <UART_SetConfig+0x5c8>
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d20c      	bcs.n	8004afc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60da      	str	r2, [r3, #12]
 8004aec:	e009      	b.n	8004b02 <UART_SetConfig+0x5ce>
 8004aee:	bf00      	nop
 8004af0:	40008000 	.word	0x40008000
 8004af4:	00f42400 	.word	0x00f42400
 8004af8:	080055f4 	.word	0x080055f4
      }
      else
      {
        ret = HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004b1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3730      	adds	r7, #48	; 0x30
 8004b26:	46bd      	mov	sp, r7
 8004b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	f003 0308 	and.w	r3, r3, #8
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc0:	f003 0310 	and.w	r3, r3, #16
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	430a      	orrs	r2, r1
 8004bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	430a      	orrs	r2, r1
 8004bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01a      	beq.n	8004c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	430a      	orrs	r2, r1
 8004c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c2a:	d10a      	bne.n	8004c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	605a      	str	r2, [r3, #4]
  }
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b098      	sub	sp, #96	; 0x60
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c80:	f7fc fa1e 	bl	80010c0 <HAL_GetTick>
 8004c84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d12f      	bne.n	8004cf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f88e 	bl	8004dc4 <UART_WaitOnFlagUntilTimeout>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d022      	beq.n	8004cf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004cd4:	e841 2300 	strex	r3, r2, [r1]
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1e6      	bne.n	8004cae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e063      	b.n	8004dbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d149      	bne.n	8004d96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f000 f857 	bl	8004dc4 <UART_WaitOnFlagUntilTimeout>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d03c      	beq.n	8004d96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	623b      	str	r3, [r7, #32]
   return(result);
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8004d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e6      	bne.n	8004d1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3308      	adds	r3, #8
 8004d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f023 0301 	bic.w	r3, r3, #1
 8004d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	3308      	adds	r3, #8
 8004d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d6e:	61fa      	str	r2, [r7, #28]
 8004d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d72:	69b9      	ldr	r1, [r7, #24]
 8004d74:	69fa      	ldr	r2, [r7, #28]
 8004d76:	e841 2300 	strex	r3, r2, [r1]
 8004d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1e5      	bne.n	8004d4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e012      	b.n	8004dbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3758      	adds	r7, #88	; 0x58
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	603b      	str	r3, [r7, #0]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd4:	e04f      	b.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ddc:	d04b      	beq.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dde:	f7fc f96f 	bl	80010c0 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d302      	bcc.n	8004df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e04e      	b.n	8004e96 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d037      	beq.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	2b80      	cmp	r3, #128	; 0x80
 8004e0a:	d034      	beq.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b40      	cmp	r3, #64	; 0x40
 8004e10:	d031      	beq.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d110      	bne.n	8004e42 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2208      	movs	r2, #8
 8004e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 f838 	bl	8004e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2208      	movs	r2, #8
 8004e32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e029      	b.n	8004e96 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e50:	d111      	bne.n	8004e76 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f81e 	bl	8004e9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e00f      	b.n	8004e96 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	bf0c      	ite	eq
 8004e86:	2301      	moveq	r3, #1
 8004e88:	2300      	movne	r3, #0
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d0a0      	beq.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b095      	sub	sp, #84	; 0x54
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e6      	bne.n	8004ea6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	e853 3f00 	ldrex	r3, [r3]
 8004ee6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eee:	f023 0301 	bic.w	r3, r3, #1
 8004ef2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3308      	adds	r3, #8
 8004efa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f04:	e841 2300 	strex	r3, r2, [r1]
 8004f08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1e3      	bne.n	8004ed8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d118      	bne.n	8004f4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f023 0310 	bic.w	r3, r3, #16
 8004f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	461a      	mov	r2, r3
 8004f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f36:	61bb      	str	r3, [r7, #24]
 8004f38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3a:	6979      	ldr	r1, [r7, #20]
 8004f3c:	69ba      	ldr	r2, [r7, #24]
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	613b      	str	r3, [r7, #16]
   return(result);
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1e6      	bne.n	8004f18 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004f5e:	bf00      	nop
 8004f60:	3754      	adds	r7, #84	; 0x54
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d101      	bne.n	8004f80 <HAL_UARTEx_DisableFifoMode+0x16>
 8004f7c:	2302      	movs	r3, #2
 8004f7e:	e027      	b.n	8004fd0 <HAL_UARTEx_DisableFifoMode+0x66>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2224      	movs	r2, #36	; 0x24
 8004f8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004fae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2220      	movs	r2, #32
 8004fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3714      	adds	r7, #20
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e02d      	b.n	8005050 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2224      	movs	r2, #36	; 0x24
 8005000:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f84f 	bl	80050d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2220      	movs	r2, #32
 8005042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005068:	2b01      	cmp	r3, #1
 800506a:	d101      	bne.n	8005070 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800506c:	2302      	movs	r3, #2
 800506e:	e02d      	b.n	80050cc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2224      	movs	r2, #36	; 0x24
 800507c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f811 	bl	80050d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d108      	bne.n	80050f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80050f4:	e031      	b.n	800515a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80050f6:	2308      	movs	r3, #8
 80050f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80050fa:	2308      	movs	r3, #8
 80050fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	0e5b      	lsrs	r3, r3, #25
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 0307 	and.w	r3, r3, #7
 800510c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	0f5b      	lsrs	r3, r3, #29
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800511e:	7bbb      	ldrb	r3, [r7, #14]
 8005120:	7b3a      	ldrb	r2, [r7, #12]
 8005122:	4911      	ldr	r1, [pc, #68]	; (8005168 <UARTEx_SetNbDataToProcess+0x94>)
 8005124:	5c8a      	ldrb	r2, [r1, r2]
 8005126:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800512a:	7b3a      	ldrb	r2, [r7, #12]
 800512c:	490f      	ldr	r1, [pc, #60]	; (800516c <UARTEx_SetNbDataToProcess+0x98>)
 800512e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005130:	fb93 f3f2 	sdiv	r3, r3, r2
 8005134:	b29a      	uxth	r2, r3
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	7b7a      	ldrb	r2, [r7, #13]
 8005140:	4909      	ldr	r1, [pc, #36]	; (8005168 <UARTEx_SetNbDataToProcess+0x94>)
 8005142:	5c8a      	ldrb	r2, [r1, r2]
 8005144:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005148:	7b7a      	ldrb	r2, [r7, #13]
 800514a:	4908      	ldr	r1, [pc, #32]	; (800516c <UARTEx_SetNbDataToProcess+0x98>)
 800514c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800514e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005152:	b29a      	uxth	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	0800560c 	.word	0x0800560c
 800516c:	08005614 	.word	0x08005614

08005170 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b08a      	sub	sp, #40	; 0x28
 8005174:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8005176:	2300      	movs	r3, #0
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800517a:	4b7d      	ldr	r3, [pc, #500]	; (8005370 <xTaskIncrementTick+0x200>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 80ec 	bne.w	800535c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005184:	4b7b      	ldr	r3, [pc, #492]	; (8005374 <xTaskIncrementTick+0x204>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3301      	adds	r3, #1
 800518a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800518c:	4a79      	ldr	r2, [pc, #484]	; (8005374 <xTaskIncrementTick+0x204>)
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d120      	bne.n	80051da <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8005198:	4b77      	ldr	r3, [pc, #476]	; (8005378 <xTaskIncrementTick+0x208>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00a      	beq.n	80051b8 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <xTaskIncrementTick+0x46>
 80051b8:	4b6f      	ldr	r3, [pc, #444]	; (8005378 <xTaskIncrementTick+0x208>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	61fb      	str	r3, [r7, #28]
 80051be:	4b6f      	ldr	r3, [pc, #444]	; (800537c <xTaskIncrementTick+0x20c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a6d      	ldr	r2, [pc, #436]	; (8005378 <xTaskIncrementTick+0x208>)
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	4a6d      	ldr	r2, [pc, #436]	; (800537c <xTaskIncrementTick+0x20c>)
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	6013      	str	r3, [r2, #0]
 80051cc:	4b6c      	ldr	r3, [pc, #432]	; (8005380 <xTaskIncrementTick+0x210>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	4a6b      	ldr	r2, [pc, #428]	; (8005380 <xTaskIncrementTick+0x210>)
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	f000 f93d 	bl	8005454 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80051da:	4b6a      	ldr	r3, [pc, #424]	; (8005384 <xTaskIncrementTick+0x214>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a3a      	ldr	r2, [r7, #32]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	f0c0 80a6 	bcc.w	8005332 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e6:	4b64      	ldr	r3, [pc, #400]	; (8005378 <xTaskIncrementTick+0x208>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051f0:	4b64      	ldr	r3, [pc, #400]	; (8005384 <xTaskIncrementTick+0x214>)
 80051f2:	f04f 32ff 	mov.w	r2, #4294967295
 80051f6:	601a      	str	r2, [r3, #0]
                    break;
 80051f8:	e09b      	b.n	8005332 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051fa:	4b5f      	ldr	r3, [pc, #380]	; (8005378 <xTaskIncrementTick+0x208>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	429a      	cmp	r2, r3
 8005210:	d203      	bcs.n	800521a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005212:	4a5c      	ldr	r2, [pc, #368]	; (8005384 <xTaskIncrementTick+0x214>)
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8005218:	e08b      	b.n	8005332 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	68d2      	ldr	r2, [r2, #12]
 8005228:	609a      	str	r2, [r3, #8]
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	69ba      	ldr	r2, [r7, #24]
 8005230:	6892      	ldr	r2, [r2, #8]
 8005232:	605a      	str	r2, [r3, #4]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	685a      	ldr	r2, [r3, #4]
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	3304      	adds	r3, #4
 800523c:	429a      	cmp	r2, r3
 800523e:	d103      	bne.n	8005248 <xTaskIncrementTick+0xd8>
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	68da      	ldr	r2, [r3, #12]
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	605a      	str	r2, [r3, #4]
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	2200      	movs	r2, #0
 800524c:	615a      	str	r2, [r3, #20]
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	1e5a      	subs	r2, r3, #1
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01e      	beq.n	800529e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	6a12      	ldr	r2, [r2, #32]
 800526e:	609a      	str	r2, [r3, #8]
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	69d2      	ldr	r2, [r2, #28]
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	3318      	adds	r3, #24
 8005282:	429a      	cmp	r2, r3
 8005284:	d103      	bne.n	800528e <xTaskIncrementTick+0x11e>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	6a1a      	ldr	r2, [r3, #32]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	605a      	str	r2, [r3, #4]
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2200      	movs	r2, #0
 8005292:	629a      	str	r2, [r3, #40]	; 0x28
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	1e5a      	subs	r2, r3, #1
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a2:	2201      	movs	r2, #1
 80052a4:	409a      	lsls	r2, r3
 80052a6:	4b38      	ldr	r3, [pc, #224]	; (8005388 <xTaskIncrementTick+0x218>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	4a36      	ldr	r2, [pc, #216]	; (8005388 <xTaskIncrementTick+0x218>)
 80052ae:	6013      	str	r3, [r2, #0]
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b4:	4935      	ldr	r1, [pc, #212]	; (800538c <xTaskIncrementTick+0x21c>)
 80052b6:	4613      	mov	r3, r2
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	4413      	add	r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	3304      	adds	r3, #4
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	609a      	str	r2, [r3, #8]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	60da      	str	r2, [r3, #12]
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	3204      	adds	r2, #4
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	1d1a      	adds	r2, r3, #4
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	609a      	str	r2, [r3, #8]
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ea:	4613      	mov	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4413      	add	r3, r2
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4a26      	ldr	r2, [pc, #152]	; (800538c <xTaskIncrementTick+0x21c>)
 80052f4:	441a      	add	r2, r3
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	615a      	str	r2, [r3, #20]
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052fe:	4923      	ldr	r1, [pc, #140]	; (800538c <xTaskIncrementTick+0x21c>)
 8005300:	4613      	mov	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	1c59      	adds	r1, r3, #1
 800530e:	481f      	ldr	r0, [pc, #124]	; (800538c <xTaskIncrementTick+0x21c>)
 8005310:	4613      	mov	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4403      	add	r3, r0
 800531a:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <xTaskIncrementTick+0x220>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005326:	429a      	cmp	r2, r3
 8005328:	f67f af5d 	bls.w	80051e6 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800532c:	2301      	movs	r3, #1
 800532e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005330:	e759      	b.n	80051e6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005332:	4b17      	ldr	r3, [pc, #92]	; (8005390 <xTaskIncrementTick+0x220>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005338:	4914      	ldr	r1, [pc, #80]	; (800538c <xTaskIncrementTick+0x21c>)
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d901      	bls.n	800534e <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 800534a:	2301      	movs	r3, #1
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800534e:	4b11      	ldr	r3, [pc, #68]	; (8005394 <xTaskIncrementTick+0x224>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8005356:	2301      	movs	r3, #1
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
 800535a:	e004      	b.n	8005366 <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800535c:	4b0e      	ldr	r3, [pc, #56]	; (8005398 <xTaskIncrementTick+0x228>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3301      	adds	r3, #1
 8005362:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <xTaskIncrementTick+0x228>)
 8005364:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005368:	4618      	mov	r0, r3
 800536a:	3728      	adds	r7, #40	; 0x28
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000328 	.word	0x20000328
 8005374:	20000310 	.word	0x20000310
 8005378:	20000308 	.word	0x20000308
 800537c:	2000030c 	.word	0x2000030c
 8005380:	20000320 	.word	0x20000320
 8005384:	20000324 	.word	0x20000324
 8005388:	20000314 	.word	0x20000314
 800538c:	200002a4 	.word	0x200002a4
 8005390:	200002a0 	.word	0x200002a0
 8005394:	2000031c 	.word	0x2000031c
 8005398:	20000318 	.word	0x20000318

0800539c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053a2:	4b27      	ldr	r3, [pc, #156]	; (8005440 <vTaskSwitchContext+0xa4>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80053aa:	4b26      	ldr	r3, [pc, #152]	; (8005444 <vTaskSwitchContext+0xa8>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80053b0:	e03f      	b.n	8005432 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80053b2:	4b24      	ldr	r3, [pc, #144]	; (8005444 <vTaskSwitchContext+0xa8>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053b8:	4b23      	ldr	r3, [pc, #140]	; (8005448 <vTaskSwitchContext+0xac>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	fab3 f383 	clz	r3, r3
 80053c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80053c6:	7afb      	ldrb	r3, [r7, #11]
 80053c8:	f1c3 031f 	rsb	r3, r3, #31
 80053cc:	617b      	str	r3, [r7, #20]
 80053ce:	491f      	ldr	r1, [pc, #124]	; (800544c <vTaskSwitchContext+0xb0>)
 80053d0:	697a      	ldr	r2, [r7, #20]
 80053d2:	4613      	mov	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	607b      	str	r3, [r7, #4]
    }
 80053f4:	bf00      	nop
 80053f6:	e7fe      	b.n	80053f6 <vTaskSwitchContext+0x5a>
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	4a12      	ldr	r2, [pc, #72]	; (800544c <vTaskSwitchContext+0xb0>)
 8005404:	4413      	add	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	605a      	str	r2, [r3, #4]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	3308      	adds	r3, #8
 800541a:	429a      	cmp	r2, r3
 800541c:	d104      	bne.n	8005428 <vTaskSwitchContext+0x8c>
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	605a      	str	r2, [r3, #4]
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	4a08      	ldr	r2, [pc, #32]	; (8005450 <vTaskSwitchContext+0xb4>)
 8005430:	6013      	str	r3, [r2, #0]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	20000328 	.word	0x20000328
 8005444:	2000031c 	.word	0x2000031c
 8005448:	20000314 	.word	0x20000314
 800544c:	200002a4 	.word	0x200002a4
 8005450:	200002a0 	.word	0x200002a0

08005454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <prvResetNextTaskUnblockTime+0x30>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d104      	bne.n	800546c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005462:	4b09      	ldr	r3, [pc, #36]	; (8005488 <prvResetNextTaskUnblockTime+0x34>)
 8005464:	f04f 32ff 	mov.w	r2, #4294967295
 8005468:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800546a:	e005      	b.n	8005478 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800546c:	4b05      	ldr	r3, [pc, #20]	; (8005484 <prvResetNextTaskUnblockTime+0x30>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a04      	ldr	r2, [pc, #16]	; (8005488 <prvResetNextTaskUnblockTime+0x34>)
 8005476:	6013      	str	r3, [r2, #0]
}
 8005478:	bf00      	nop
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000308 	.word	0x20000308
 8005488:	20000324 	.word	0x20000324
 800548c:	00000000 	.word	0x00000000

08005490 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005490:	4b07      	ldr	r3, [pc, #28]	; (80054b0 <pxCurrentTCBConst2>)
 8005492:	6819      	ldr	r1, [r3, #0]
 8005494:	6808      	ldr	r0, [r1, #0]
 8005496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549a:	f380 8809 	msr	PSP, r0
 800549e:	f3bf 8f6f 	isb	sy
 80054a2:	f04f 0000 	mov.w	r0, #0
 80054a6:	f380 8811 	msr	BASEPRI, r0
 80054aa:	4770      	bx	lr
 80054ac:	f3af 8000 	nop.w

080054b0 <pxCurrentTCBConst2>:
 80054b0:	200002a0 	.word	0x200002a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
	...

080054c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80054c0:	f3ef 8009 	mrs	r0, PSP
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	4b15      	ldr	r3, [pc, #84]	; (8005520 <pxCurrentTCBConst>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	f01e 0f10 	tst.w	lr, #16
 80054d0:	bf08      	it	eq
 80054d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054da:	6010      	str	r0, [r2, #0]
 80054dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054e4:	f380 8811 	msr	BASEPRI, r0
 80054e8:	f3bf 8f4f 	dsb	sy
 80054ec:	f3bf 8f6f 	isb	sy
 80054f0:	f7ff ff54 	bl	800539c <vTaskSwitchContext>
 80054f4:	f04f 0000 	mov.w	r0, #0
 80054f8:	f380 8811 	msr	BASEPRI, r0
 80054fc:	bc09      	pop	{r0, r3}
 80054fe:	6819      	ldr	r1, [r3, #0]
 8005500:	6808      	ldr	r0, [r1, #0]
 8005502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005506:	f01e 0f10 	tst.w	lr, #16
 800550a:	bf08      	it	eq
 800550c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005510:	f380 8809 	msr	PSP, r0
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	f3af 8000 	nop.w

08005520 <pxCurrentTCBConst>:
 8005520:	200002a0 	.word	0x200002a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop

08005528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
        __asm volatile
 800552e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005532:	f383 8811 	msr	BASEPRI, r3
 8005536:	f3bf 8f6f 	isb	sy
 800553a:	f3bf 8f4f 	dsb	sy
 800553e:	607b      	str	r3, [r7, #4]
    }
 8005540:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005542:	f7ff fe15 	bl	8005170 <xTaskIncrementTick>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <SysTick_Handler+0x40>)
 800554e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	2300      	movs	r3, #0
 8005556:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800555e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005560:	bf00      	nop
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <memset>:
 800556c:	4402      	add	r2, r0
 800556e:	4603      	mov	r3, r0
 8005570:	4293      	cmp	r3, r2
 8005572:	d100      	bne.n	8005576 <memset+0xa>
 8005574:	4770      	bx	lr
 8005576:	f803 1b01 	strb.w	r1, [r3], #1
 800557a:	e7f9      	b.n	8005570 <memset+0x4>

0800557c <__libc_init_array>:
 800557c:	b570      	push	{r4, r5, r6, lr}
 800557e:	4d0d      	ldr	r5, [pc, #52]	; (80055b4 <__libc_init_array+0x38>)
 8005580:	4c0d      	ldr	r4, [pc, #52]	; (80055b8 <__libc_init_array+0x3c>)
 8005582:	1b64      	subs	r4, r4, r5
 8005584:	10a4      	asrs	r4, r4, #2
 8005586:	2600      	movs	r6, #0
 8005588:	42a6      	cmp	r6, r4
 800558a:	d109      	bne.n	80055a0 <__libc_init_array+0x24>
 800558c:	4d0b      	ldr	r5, [pc, #44]	; (80055bc <__libc_init_array+0x40>)
 800558e:	4c0c      	ldr	r4, [pc, #48]	; (80055c0 <__libc_init_array+0x44>)
 8005590:	f000 f818 	bl	80055c4 <_init>
 8005594:	1b64      	subs	r4, r4, r5
 8005596:	10a4      	asrs	r4, r4, #2
 8005598:	2600      	movs	r6, #0
 800559a:	42a6      	cmp	r6, r4
 800559c:	d105      	bne.n	80055aa <__libc_init_array+0x2e>
 800559e:	bd70      	pop	{r4, r5, r6, pc}
 80055a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a4:	4798      	blx	r3
 80055a6:	3601      	adds	r6, #1
 80055a8:	e7ee      	b.n	8005588 <__libc_init_array+0xc>
 80055aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ae:	4798      	blx	r3
 80055b0:	3601      	adds	r6, #1
 80055b2:	e7f2      	b.n	800559a <__libc_init_array+0x1e>
 80055b4:	08005624 	.word	0x08005624
 80055b8:	08005624 	.word	0x08005624
 80055bc:	08005624 	.word	0x08005624
 80055c0:	08005628 	.word	0x08005628

080055c4 <_init>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	bf00      	nop
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr

080055d0 <_fini>:
 80055d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055d2:	bf00      	nop
 80055d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d6:	bc08      	pop	{r3}
 80055d8:	469e      	mov	lr, r3
 80055da:	4770      	bx	lr
