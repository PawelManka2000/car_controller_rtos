
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  08009180  08009180  00019180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009534  08009534  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  08009534  08009534  00019534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800953c  0800953c  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800953c  0800953c  0001953c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08009544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a0  200001d0  08009714  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000770  08009714  00020770  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a25c  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b7e  00000000  00000000  0003a49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003e020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff6  00000000  00000000  0003f4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028add  00000000  00000000  000404ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b5b1  00000000  00000000  00068fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001058cc  00000000  00000000  0008455c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006488  00000000  00000000  00189e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001902b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009164 	.word	0x08009164

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	08009164 	.word	0x08009164

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	2238      	movs	r2, #56	; 0x38
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 f98d 	bl	80072c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f001 fdb2 	bl	8002b20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fd6:	2355      	movs	r3, #85	; 0x55
 8000fd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fe4c 	bl	8002c88 <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ff6:	f000 ff33 	bl	8001e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	2303      	movs	r3, #3
 8001000:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2104      	movs	r1, #4
 8001012:	4618      	mov	r0, r3
 8001014:	f002 f94a 	bl	80032ac <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800101e:	f000 ff1f 	bl	8001e60 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	4b29      	ldr	r3, [pc, #164]	; (8001100 <MX_GPIO_Init+0xd4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a22      	ldr	r2, [pc, #136]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_GPIO_Init+0xd4>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2123      	movs	r1, #35	; 0x23
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f001 fd21 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <MX_GPIO_Init+0xd8>)
 80010c6:	f001 fb91 	bl	80027ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 80010ca:	2323      	movs	r3, #35	; 0x23
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f001 fb82 	bl	80027ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f001 fb55 	bl	800279c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f001 fb6c 	bl	80027d0 <HAL_NVIC_EnableIRQ>

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	48000800 	.word	0x48000800

08001108 <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09c      	sub	sp, #112	; 0x70
 800110c:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2234      	movs	r2, #52	; 0x34
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f006 f8bd 	bl	80072c2 <memset>

  htim1.Instance = TIM1;
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800114a:	4a58      	ldr	r2, [pc, #352]	; (80012ac <MX_TIM1_Init+0x1a4>)
 800114c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 800114e:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001150:	4a57      	ldr	r2, [pc, #348]	; (80012b0 <MX_TIM1_Init+0x1a8>)
 8001152:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800115a:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800115c:	2263      	movs	r2, #99	; 0x63
 800115e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b4e      	ldr	r3, [pc, #312]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001172:	484d      	ldr	r0, [pc, #308]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001174:	f002 fd36 	bl	8003be4 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800117e:	f000 fe6f 	bl	8001e60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001188:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800118c:	4619      	mov	r1, r3
 800118e:	4846      	ldr	r0, [pc, #280]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001190:	f003 fb74 	bl	800487c <HAL_TIM_ConfigClockSource>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800119a:	f000 fe61 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800119e:	4842      	ldr	r0, [pc, #264]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 80011a0:	f002 fe60 	bl	8003e64 <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011aa:	f000 fe59 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011be:	4619      	mov	r1, r3
 80011c0:	4839      	ldr	r0, [pc, #228]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 80011c2:	f004 f939 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80011cc:	f000 fe48 	bl	8001e60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d0:	2360      	movs	r3, #96	; 0x60
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	482c      	ldr	r0, [pc, #176]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 80011f6:	f003 fa2d 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001200:	f000 fe2e 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001208:	2204      	movs	r2, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4826      	ldr	r0, [pc, #152]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800120e:	f003 fa21 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001218:	f000 fe22 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800121c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001220:	2208      	movs	r2, #8
 8001222:	4619      	mov	r1, r3
 8001224:	4820      	ldr	r0, [pc, #128]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001226:	f003 fa15 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001230:	f000 fe16 	bl	8001e60 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001234:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001238:	220c      	movs	r2, #12
 800123a:	4619      	mov	r1, r3
 800123c:	481a      	ldr	r0, [pc, #104]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800123e:	f003 fa09 	bl	8004654 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001248:	f000 fe0a 	bl	8001e60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800128a:	f004 f96b 	bl	8005564 <HAL_TIMEx_ConfigBreakDeadTime>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001294:	f000 fde4 	bl	8001e60 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800129a:	f000 ffd3 	bl	8002244 <HAL_TIM_MspPostInit>

}
 800129e:	bf00      	nop
 80012a0:	3770      	adds	r7, #112	; 0x70
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001ec 	.word	0x200001ec
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	0002980f 	.word	0x0002980f

080012b4 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fffd 	bl	80072c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012d4:	4a21      	ldr	r2, [pc, #132]	; (800135c <MX_TIM3_Init+0xa8>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012f8:	2303      	movs	r3, #3
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001310:	2301      	movs	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM3_Init+0xa4>)
 8001324:	f002 ff12 	bl	800414c <HAL_TIM_Encoder_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800132e:	f000 fd97 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM3_Init+0xa4>)
 8001340:	f004 f87a 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800134a:	f000 fd89 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000238 	.word	0x20000238
 800135c:	40000400 	.word	0x40000400

08001360 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f005 ffa7 	bl	80072c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_TIM4_Init+0xa4>)
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <MX_TIM4_Init+0xa8>)
 8001382:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_TIM4_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_TIM4_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM4_Init+0xa4>)
 8001392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001396:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM4_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_TIM4_Init+0xa4>)
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a4:	2303      	movs	r3, #3
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013b4:	230a      	movs	r3, #10
 80013b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_TIM4_Init+0xa4>)
 80013d0:	f002 febc 	bl	800414c <HAL_TIM_Encoder_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013da:	f000 fd41 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_TIM4_Init+0xa4>)
 80013ec:	f004 f824 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80013f6:	f000 fd33 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000284 	.word	0x20000284
 8001408:	40000800 	.word	0x40000800

0800140c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f005 ff51 	bl	80072c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800142c:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <MX_TIM5_Init+0xa8>)
 800142e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_TIM5_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_TIM5_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800143e:	f04f 32ff 	mov.w	r2, #4294967295
 8001442:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM5_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001450:	2303      	movs	r3, #3
 8001452:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800147c:	f002 fe66 	bl	800414c <HAL_TIM_Encoder_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001486:	f000 fceb 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_TIM5_Init+0xa4>)
 8001498:	f003 ffce 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80014a2:	f000 fcdd 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	; 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200002d0 	.word	0x200002d0
 80014b4:	40000c00 	.word	0x40000c00

080014b8 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_TIM7_Init+0x64>)
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <MX_TIM7_Init+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_TIM7_Init+0x64>)
 80014d0:	22a9      	movs	r2, #169	; 0xa9
 80014d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_TIM7_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_TIM7_Init+0x64>)
 80014dc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80014e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_TIM7_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_TIM7_Init+0x64>)
 80014ea:	f002 fb7b 	bl	8003be4 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014f4:	f000 fcb4 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_TIM7_Init+0x64>)
 8001506:	f003 ff97 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 fca6 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000031c 	.word	0x2000031c
 8001520:	40001400 	.word	0x40001400

08001524 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	2224      	movs	r2, #36	; 0x24
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fec5 	bl	80072c2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <MX_TIM8_Init+0xac>)
 8001544:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <MX_TIM8_Init+0xb0>)
 8001546:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_TIM8_Init+0xac>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <MX_TIM8_Init+0xac>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_TIM8_Init+0xac>)
 8001556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_TIM8_Init+0xac>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_TIM8_Init+0xac>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_TIM8_Init+0xac>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800156e:	2303      	movs	r3, #3
 8001570:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4619      	mov	r1, r3
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_TIM8_Init+0xac>)
 800159a:	f002 fdd7 	bl	800414c <HAL_TIM_Encoder_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80015a4:	f000 fc5c 	bl	8001e60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_TIM8_Init+0xac>)
 80015ba:	f003 ff3d 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80015c4:	f000 fc4c 	bl	8001e60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3730      	adds	r7, #48	; 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000368 	.word	0x20000368
 80015d4:	40013400 	.word	0x40013400

080015d8 <MX_LPUART1_UART_Init>:

 UART_HandleTypeDef huart1;
 UART_HandleTypeDef hlpuart1;

void MX_LPUART1_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015de:	4a22      	ldr	r2, [pc, #136]	; (8001668 <MX_LPUART1_UART_Init+0x90>)
 80015e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 800161c:	f004 f87c 	bl	8005718 <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001626:	f000 fc1b 	bl	8001e60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 800162e:	f004 fe17 	bl	8006260 <HAL_UARTEx_SetTxFifoThreshold>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001638:	f000 fc12 	bl	8001e60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001640:	f004 fe4c 	bl	80062dc <HAL_UARTEx_SetRxFifoThreshold>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800164a:	f000 fc09 	bl	8001e60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001650:	f004 fdcd 	bl	80061ee <HAL_UARTEx_DisableFifoMode>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800165a:	f000 fc01 	bl	8001e60 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000448 	.word	0x20000448
 8001668:	40008000 	.word	0x40008000

0800166c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001672:	4a23      	ldr	r2, [pc, #140]	; (8001700 <MX_USART1_UART_Init+0x94>)
 8001674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_USART1_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b4:	4811      	ldr	r0, [pc, #68]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016b6:	f004 f82f 	bl	8005718 <HAL_UART_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016c0:	f000 fbce 	bl	8001e60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c4:	2100      	movs	r1, #0
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016c8:	f004 fdca 	bl	8006260 <HAL_UARTEx_SetTxFifoThreshold>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016d2:	f000 fbc5 	bl	8001e60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016da:	f004 fdff 	bl	80062dc <HAL_UARTEx_SetRxFifoThreshold>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f000 fbbc 	bl	8001e60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016ea:	f004 fd80 	bl	80061ee <HAL_UARTEx_DisableFifoMode>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 fbb4 	bl	8001e60 <Error_Handler>
  }

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200003b4 	.word	0x200003b4
 8001700:	40013800 	.word	0x40013800

08001704 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	607a      	str	r2, [r7, #4]
 8001710:	603b      	str	r3, [r7, #0]
	L298N_driver->current_PWM = 0;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2200      	movs	r2, #0
 8001716:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	8b3a      	ldrh	r2, [r7, #24]
 800172e:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	69fa      	ldr	r2, [r7, #28]
 8001734:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	8c3a      	ldrh	r2, [r7, #32]
 800173a:	831a      	strh	r2, [r3, #24]

}
 800173c:	bf00      	nop
 800173e:	3714      	adds	r7, #20
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <L298N_update_pwm>:


void L298N_update_pwm(L298N_driver* L298_driver, uint8_t new_pwm_count)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
	L298_driver->current_PWM = new_pwm_count;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	78fa      	ldrb	r2, [r7, #3]
 8001758:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <L298N_update_pwm+0x28>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	7a1a      	ldrb	r2, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	635a      	str	r2, [r3, #52]	; 0x34

}
 800176e:	e036      	b.n	80017de <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b04      	cmp	r3, #4
 8001776:	d107      	bne.n	8001788 <L298N_update_pwm+0x40>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7a19      	ldrb	r1, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	460b      	mov	r3, r1
 8001784:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001786:	e02a      	b.n	80017de <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b08      	cmp	r3, #8
 800178e:	d107      	bne.n	80017a0 <L298N_update_pwm+0x58>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	7a19      	ldrb	r1, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	460b      	mov	r3, r1
 800179c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800179e:	e01e      	b.n	80017de <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d107      	bne.n	80017b8 <L298N_update_pwm+0x70>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7a19      	ldrb	r1, [r3, #8]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	460b      	mov	r3, r1
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80017b6:	e012      	b.n	80017de <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d107      	bne.n	80017d0 <L298N_update_pwm+0x88>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7a19      	ldrb	r1, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	460b      	mov	r3, r1
 80017cc:	6493      	str	r3, [r2, #72]	; 0x48
}
 80017ce:	e006      	b.n	80017de <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7a19      	ldrb	r1, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	460b      	mov	r3, r1
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, E_L298N_MODE l298n_mode)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	460b      	mov	r3, r1
 80017f4:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == BACKWARD)
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d110      	bne.n	800181e <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68d8      	ldr	r0, [r3, #12]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	8a1b      	ldrh	r3, [r3, #16]
 8001804:	2201      	movs	r2, #1
 8001806:	4619      	mov	r1, r3
 8001808:	f001 f972 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6958      	ldr	r0, [r3, #20]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	8b1b      	ldrh	r3, [r3, #24]
 8001814:	2200      	movs	r2, #0
 8001816:	4619      	mov	r1, r3
 8001818:	f001 f96a 	bl	8002af0 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 800181c:	e026      	b.n	800186c <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == FORWARD)
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d110      	bne.n	8001846 <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68d8      	ldr	r0, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	8a1b      	ldrh	r3, [r3, #16]
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	f001 f95e 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6958      	ldr	r0, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	8b1b      	ldrh	r3, [r3, #24]
 800183c:	2201      	movs	r2, #1
 800183e:	4619      	mov	r1, r3
 8001840:	f001 f956 	bl	8002af0 <HAL_GPIO_WritePin>
}
 8001844:	e012      	b.n	800186c <L298N_set_input_configuration+0x82>
	else if(l298n_mode == STOP)
 8001846:	78fb      	ldrb	r3, [r7, #3]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10f      	bne.n	800186c <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68d8      	ldr	r0, [r3, #12]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	8a1b      	ldrh	r3, [r3, #16]
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	f001 f94a 	bl	8002af0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6958      	ldr	r0, [r3, #20]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	8b1b      	ldrh	r3, [r3, #24]
 8001864:	2200      	movs	r2, #0
 8001866:	4619      	mov	r1, r3
 8001868:	f001 f942 	bl	8002af0 <HAL_GPIO_WritePin>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	601a      	str	r2, [r3, #0]

}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	889a      	ldrh	r2, [r3, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	809a      	strh	r2, [r3, #4]

}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b085      	sub	sp, #20
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
 80018c6:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]
	motor_struct->encoder_info = enc_inf_param_;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	69fa      	ldr	r2, [r7, #28]
 80018de:	611a      	str	r2, [r3, #16]
	motor_struct->pid_controller = pid_controller_;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	605a      	str	r2, [r3, #4]

}
 80018e6:	bf00      	nop
 80018e8:	3714      	adds	r7, #20
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685a      	ldr	r2, [r3, #4]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	edd3 7a01 	vldr	s15, [r3, #4]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	ed93 7a00 	vldr	s14, [r3]
 8001910:	eef0 0a47 	vmov.f32	s1, s14
 8001914:	eeb0 0a67 	vmov.f32	s0, s15
 8001918:	4610      	mov	r0, r2
 800191a:	f000 f8df 	bl	8001adc <pid_calculate>
 800191e:	4603      	mov	r3, r0
 8001920:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001922:	897b      	ldrh	r3, [r7, #10]
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f99f 	bl	8001c68 <saturate_pwm>
 800192a:	4603      	mov	r3, r0
 800192c:	727b      	strb	r3, [r7, #9]
	L298N_update_pwm(motor_struct->L298N_driver, saturated_pwm_value);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	7a7a      	ldrb	r2, [r7, #9]
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff06 	bl	8001748 <L298N_update_pwm>

}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 8001956:	6838      	ldr	r0, [r7, #0]
 8001958:	f7ff ff9a 	bl	8001890 <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	889a      	ldrh	r2, [r3, #4]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	88db      	ldrh	r3, [r3, #6]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 800196e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001972:	2b00      	cmp	r3, #0
 8001974:	dd1f      	ble.n	80019b6 <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	2b10      	cmp	r3, #16
 8001984:	d114      	bne.n	80019b0 <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	889b      	ldrh	r3, [r3, #4]
 800198a:	461a      	mov	r2, r3
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	bfb8      	it	lt
 800199a:	425b      	neglt	r3, r3
 800199c:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	88da      	ldrh	r2, [r3, #6]
 80019a2:	89fb      	ldrh	r3, [r7, #14]
 80019a4:	4413      	add	r3, r2
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	425b      	negs	r3, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	82fb      	strh	r3, [r7, #22]
 80019ae:	e023      	b.n	80019f8 <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 80019b0:	8abb      	ldrh	r3, [r7, #20]
 80019b2:	82fb      	strh	r3, [r7, #22]
 80019b4:	e020      	b.n	80019f8 <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 80019b6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	da1c      	bge.n	80019f8 <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d012      	beq.n	80019f4 <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	889b      	ldrh	r3, [r3, #4]
 80019d2:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	b29a      	uxth	r2, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	88db      	ldrh	r3, [r3, #6]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 80019e8:	8a7a      	ldrh	r2, [r7, #18]
 80019ea:	8a3b      	ldrh	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	82fb      	strh	r3, [r7, #22]
 80019f2:	e001      	b.n	80019f8 <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 80019f4:	8abb      	ldrh	r3, [r7, #20]
 80019f6:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 80019f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f8ff 	bl	8001c00 <convert_to_radians>
 8001a02:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <set_velocity>:

void set_velocity(MotorState *motor_state, float velocity)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	ed87 0a00 	vstr	s0, [r7]
	motor_state->set_velocity = velocity;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	605a      	str	r2, [r3, #4]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <update_measured_velocity>:

void update_measured_velocity(MotorState* motor_state, float updater_timer_periods)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	ed87 0a00 	vstr	s0, [r7]

	float rotary_displacement_ = rotary_displacement(motor_state);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f80f 	bl	8001a70 <rotary_displacement>
 8001a52:	ed87 0a03 	vstr	s0, [r7, #12]
	motor_state->measured_velocity = (float)rotary_displacement_ /updater_timer_periods;
 8001a56:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a5a:	ed97 7a00 	vldr	s14, [r7]
 8001a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	edc3 7a00 	vstr	s15, [r3]

}
 8001a68:	bf00      	nop
 8001a6a:	3710      	adds	r7, #16
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]

	return motor_state->position - motor_state->last_position;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a84:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001a88:	eeb0 0a67 	vmov.f32	s0, s15
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <pid_init>:


#include "pid_controller.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6178      	str	r0, [r7, #20]
 8001a9e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001aa2:	edc7 0a03 	vstr	s1, [r7, #12]
 8001aa6:	ed87 1a02 	vstr	s2, [r7, #8]
 8001aaa:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	615a      	str	r2, [r3, #20]
}
 8001ad0:	bf00      	nop
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <pid_calculate>:
	pid_data->previous_error = 0;
}


int pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	ed87 0a02 	vstr	s0, [r7, #8]
 8001ae8:	edc7 0a01 	vstr	s1, [r7, #4]
	float error;
	float p_term, i_term, d_term;


	error = setpoint - process_variable;
 8001aec:	ed97 7a02 	vldr	s14, [r7, #8]
 8001af0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001af4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001af8:	edc7 7a06 	vstr	s15, [r7, #24]
	pid_data->total_error += error;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	ee07 3a90 	vmov	s15, r3
 8001b04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b14:	ee17 2a90 	vmov	r2, s15
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b22:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2a:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	ee07 3a90 	vmov	s15, r3
 8001b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b44:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5a:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b5e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b66:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b76:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b82:	db08      	blt.n	8001b96 <pid_calculate+0xba>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	ee07 3a90 	vmov	s15, r3
 8001b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b90:	edc7 7a07 	vstr	s15, [r7, #28]
 8001b94:	e016      	b.n	8001bc4 <pid_calculate+0xe8>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	425b      	negs	r3, r3
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	d808      	bhi.n	8001bc4 <pid_calculate+0xe8>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	425b      	negs	r3, r3
 8001bb8:	ee07 3a90 	vmov	s15, r3
 8001bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bc0:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8001bc4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bcc:	ee17 2a90 	vmov	r2, s15
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8001bd4:	ed97 7a05 	vldr	s14, [r7, #20]
 8001bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bec:	ee17 3a90 	vmov	r3, s15
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3724      	adds	r7, #36	; 0x24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	0000      	movs	r0, r0
	...

08001c00 <convert_to_radians>:
 *      Author: pawel
 */

#include "motor_features.h"

float convert_to_radians(int32_t enc_position){
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c12:	ee17 0a90 	vmov	r0, s15
 8001c16:	f7fe fcbf 	bl	8000598 <__aeabi_f2d>
 8001c1a:	a30f      	add	r3, pc, #60	; (adr r3, 8001c58 <convert_to_radians+0x58>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe fd12 	bl	8000648 <__aeabi_dmul>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	a30c      	add	r3, pc, #48	; (adr r3, 8001c60 <convert_to_radians+0x60>)
 8001c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c32:	f7fe fe33 	bl	800089c <__aeabi_ddiv>
 8001c36:	4602      	mov	r2, r0
 8001c38:	460b      	mov	r3, r1
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f7fe ffdb 	bl	8000bf8 <__aeabi_d2f>
 8001c42:	4603      	mov	r3, r0
 8001c44:	ee07 3a90 	vmov	s15, r3

}
 8001c48:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	f3af 8000 	nop.w
 8001c58:	54442d18 	.word	0x54442d18
 8001c5c:	401921fb 	.word	0x401921fb
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40ae6400 	.word	0x40ae6400

08001c68 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]


	if (pwm_value < 0){
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da02      	bge.n	8001c7c <saturate_pwm+0x14>
		pwm_value = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	e004      	b.n	8001c86 <saturate_pwm+0x1e>
	}else if(pwm_value > 100){
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b64      	cmp	r3, #100	; 0x64
 8001c80:	dd01      	ble.n	8001c86 <saturate_pwm+0x1e>
		pwm_value = 100;
 8001c82:	2364      	movs	r3, #100	; 0x64
 8001c84:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	b2db      	uxtb	r3, r3

}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 8001caa:	f001 fc9d 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8001cae:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	ee07 3a90 	vmov	s15, r3
 8001cbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cce:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	ee07 3a90 	vmov	s15, r3
}
 8001cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <main>:

uint16_t period;
float updater_timer_periods;

int main(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af04      	add	r7, sp, #16

  HAL_Init();
 8001cea:	f000 fc7a 	bl	80025e2 <HAL_Init>
  SystemClock_Config();
 8001cee:	f7ff f951 	bl	8000f94 <SystemClock_Config>
  MX_GPIO_Init();
 8001cf2:	f7ff f99b 	bl	800102c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001cf6:	f7ff fc6f 	bl	80015d8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001cfa:	f7ff fcb7 	bl	800166c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001cfe:	f7ff fa03 	bl	8001108 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001d02:	f7ff fad7 	bl	80012b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001d06:	f7ff fb2b 	bl	8001360 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001d0a:	f7ff fb7f 	bl	800140c <MX_TIM5_Init>
  MX_TIM7_Init();
 8001d0e:	f7ff fbd3 	bl	80014b8 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001d12:	f7ff fc07 	bl	8001524 <MX_TIM8_Init>

  init_encoder_info(&encoder_info, &htim4);
 8001d16:	4931      	ldr	r1, [pc, #196]	; (8001ddc <main+0xf8>)
 8001d18:	4831      	ldr	r0, [pc, #196]	; (8001de0 <main+0xfc>)
 8001d1a:	f7ff fdab 	bl	8001874 <init_encoder_info>
  L298N_init(&L298N_lb, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 8001d1e:	2302      	movs	r3, #2
 8001d20:	9302      	str	r3, [sp, #8]
 8001d22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	2301      	movs	r3, #1
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001d30:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <main+0x100>)
 8001d32:	2100      	movs	r1, #0
 8001d34:	482c      	ldr	r0, [pc, #176]	; (8001de8 <main+0x104>)
 8001d36:	f7ff fce5 	bl	8001704 <L298N_init>
  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8001d3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001d3e:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8001dec <main+0x108>
 8001d42:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001d46:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8001df0 <main+0x10c>
 8001d4a:	482a      	ldr	r0, [pc, #168]	; (8001df4 <main+0x110>)
 8001d4c:	f7ff fea3 	bl	8001a96 <pid_init>
  init_motor(&motor, &lb_motor_state, &htim7, &encoder_info, &pid_controller, &L298N_lb);
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <main+0x104>)
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <main+0x110>)
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4b21      	ldr	r3, [pc, #132]	; (8001de0 <main+0xfc>)
 8001d5a:	4a27      	ldr	r2, [pc, #156]	; (8001df8 <main+0x114>)
 8001d5c:	4927      	ldr	r1, [pc, #156]	; (8001dfc <main+0x118>)
 8001d5e:	4828      	ldr	r0, [pc, #160]	; (8001e00 <main+0x11c>)
 8001d60:	f7ff fdab 	bl	80018ba <init_motor>


  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001d64:	4824      	ldr	r0, [pc, #144]	; (8001df8 <main+0x114>)
 8001d66:	f002 f805 	bl	8003d74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 8001d6a:	4826      	ldr	r0, [pc, #152]	; (8001e04 <main+0x120>)
 8001d6c:	f001 ff92 	bl	8003c94 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d70:	2100      	movs	r1, #0
 8001d72:	481c      	ldr	r0, [pc, #112]	; (8001de4 <main+0x100>)
 8001d74:	f002 f8d8 	bl	8003f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001d78:	2104      	movs	r1, #4
 8001d7a:	481a      	ldr	r0, [pc, #104]	; (8001de4 <main+0x100>)
 8001d7c:	f002 f8d4 	bl	8003f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001d80:	2108      	movs	r1, #8
 8001d82:	4818      	ldr	r0, [pc, #96]	; (8001de4 <main+0x100>)
 8001d84:	f002 f8d0 	bl	8003f28 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001d88:	210c      	movs	r1, #12
 8001d8a:	4816      	ldr	r0, [pc, #88]	; (8001de4 <main+0x100>)
 8001d8c:	f002 f8cc 	bl	8003f28 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001d90:	213c      	movs	r1, #60	; 0x3c
 8001d92:	4812      	ldr	r0, [pc, #72]	; (8001ddc <main+0xf8>)
 8001d94:	f002 fa80 	bl	8004298 <HAL_TIM_Encoder_Start>

  updater_timer_periods = CountPeriodS(motor.motor_updater_tim);
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <main+0x11c>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff7a 	bl	8001c96 <CountPeriodS>
 8001da2:	eef0 7a40 	vmov.f32	s15, s0
 8001da6:	4b18      	ldr	r3, [pc, #96]	; (8001e08 <main+0x124>)
 8001da8:	edc3 7a00 	vstr	s15, [r3]
  L298N_set_input_configuration(&L298N_lb, FORWARD);
 8001dac:	2101      	movs	r1, #1
 8001dae:	480e      	ldr	r0, [pc, #56]	; (8001de8 <main+0x104>)
 8001db0:	f7ff fd1b 	bl	80017ea <L298N_set_input_configuration>
  set_velocity(motor.motor_state, 4);
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <main+0x11c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fe30 	bl	8001a22 <set_velocity>

  /* USER CODE END 2 */



  period = CountPeriodS(&htim7);
 8001dc2:	480d      	ldr	r0, [pc, #52]	; (8001df8 <main+0x114>)
 8001dc4:	f7ff ff67 	bl	8001c96 <CountPeriodS>
 8001dc8:	eef0 7a40 	vmov.f32	s15, s0
 8001dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd0:	ee17 3a90 	vmov	r3, s15
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <main+0x128>)
 8001dd8:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8001dda:	e7fe      	b.n	8001dda <main+0xf6>
 8001ddc:	20000284 	.word	0x20000284
 8001de0:	200004dc 	.word	0x200004dc
 8001de4:	200001ec 	.word	0x200001ec
 8001de8:	20000510 	.word	0x20000510
 8001dec:	00000000 	.word	0x00000000
 8001df0:	3d75c28f 	.word	0x3d75c28f
 8001df4:	200004f8 	.word	0x200004f8
 8001df8:	2000031c 	.word	0x2000031c
 8001dfc:	2000052c 	.word	0x2000052c
 8001e00:	200004e4 	.word	0x200004e4
 8001e04:	20000368 	.word	0x20000368
 8001e08:	20000540 	.word	0x20000540
 8001e0c:	2000053c 	.word	0x2000053c

08001e10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)motor.motor_updater_tim->Instance) {
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d114      	bne.n	8001e50 <HAL_TIM_PeriodElapsedCallback+0x40>

    	update_motor_position(motor.motor_state, motor.encoder_info);
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a0b      	ldr	r2, [pc, #44]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e2c:	6892      	ldr	r2, [r2, #8]
 8001e2e:	4611      	mov	r1, r2
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7ff fd87 	bl	8001944 <update_motor_position>

    	update_measured_velocity(motor.motor_state, updater_timer_periods);
 8001e36:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a08      	ldr	r2, [pc, #32]	; (8001e5c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e3c:	edd2 7a00 	vldr	s15, [r2]
 8001e40:	eeb0 0a67 	vmov.f32	s0, s15
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fdfb 	bl	8001a40 <update_measured_velocity>
    	regulate_velocity(&motor);
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e4c:	f7ff fd51 	bl	80018f2 <regulate_velocity>
    }



//  /* USER CODE END Callback 1 */
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200004e4 	.word	0x200004e4
 8001e5c:	20000540 	.word	0x20000540

08001e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e64:	b672      	cpsid	i
}
 8001e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <Error_Handler+0x8>
	...

08001e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6593      	str	r3, [r2, #88]	; 0x58
 8001e96:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <HAL_MspInit+0x44>)
 8001e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001ea2:	f000 fee1 	bl	8002c68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0a0      	sub	sp, #128	; 0x80
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ecc:	f107 0318 	add.w	r3, r7, #24
 8001ed0:	2254      	movs	r2, #84	; 0x54
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f005 f9f4 	bl	80072c2 <memset>
  if(huart->Instance==LPUART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a3d      	ldr	r2, [pc, #244]	; (8001fd4 <HAL_UART_MspInit+0x120>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d137      	bne.n	8001f54 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001ee4:	2320      	movs	r3, #32
 8001ee6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eec:	f107 0318 	add.w	r3, r7, #24
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 fc29 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001efc:	f7ff ffb0 	bl	8001e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001f00:	4b35      	ldr	r3, [pc, #212]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	4a34      	ldr	r2, [pc, #208]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001f0c:	4b32      	ldr	r3, [pc, #200]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b2f      	ldr	r3, [pc, #188]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	4a2e      	ldr	r2, [pc, #184]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f24:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f30:	230c      	movs	r3, #12
 8001f32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001f40:	230c      	movs	r3, #12
 8001f42:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f48:	4619      	mov	r1, r3
 8001f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f4e:	f000 fc4d 	bl	80027ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f52:	e03a      	b.n	8001fca <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a20      	ldr	r2, [pc, #128]	; (8001fdc <HAL_UART_MspInit+0x128>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d135      	bne.n	8001fca <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f66:	f107 0318 	add.w	r3, r7, #24
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 fbec 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001f76:	f7ff ff73 	bl	8001e60 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f7e:	4a16      	ldr	r2, [pc, #88]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f84:	6613      	str	r3, [r2, #96]	; 0x60
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	4a10      	ldr	r2, [pc, #64]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <HAL_UART_MspInit+0x124>)
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001faa:	2330      	movs	r3, #48	; 0x30
 8001fac:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fba:	2307      	movs	r3, #7
 8001fbc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4806      	ldr	r0, [pc, #24]	; (8001fe0 <HAL_UART_MspInit+0x12c>)
 8001fc6:	f000 fc11 	bl	80027ec <HAL_GPIO_Init>
}
 8001fca:	bf00      	nop
 8001fcc:	3780      	adds	r7, #128	; 0x80
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40008000 	.word	0x40008000
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	48000800 	.word	0x48000800

08001fe4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_TIM_Base_MspInit+0x68>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10c      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <HAL_TIM_Base_MspInit+0x6c>)
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffa:	4a15      	ldr	r2, [pc, #84]	; (8002050 <HAL_TIM_Base_MspInit+0x6c>)
 8001ffc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002000:	6613      	str	r3, [r2, #96]	; 0x60
 8002002:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_TIM_Base_MspInit+0x6c>)
 8002004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002006:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800200e:	e018      	b.n	8002042 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_TIM_Base_MspInit+0x70>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d113      	bne.n	8002042 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_TIM_Base_MspInit+0x6c>)
 800201c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <HAL_TIM_Base_MspInit+0x6c>)
 8002020:	f043 0320 	orr.w	r3, r3, #32
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_TIM_Base_MspInit+0x6c>)
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	60bb      	str	r3, [r7, #8]
 8002030:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	2037      	movs	r0, #55	; 0x37
 8002038:	f000 fbb0 	bl	800279c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800203c:	2037      	movs	r0, #55	; 0x37
 800203e:	f000 fbc7 	bl	80027d0 <HAL_NVIC_EnableIRQ>
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40012c00 	.word	0x40012c00
 8002050:	40021000 	.word	0x40021000
 8002054:	40001400 	.word	0x40001400

08002058 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b090      	sub	sp, #64	; 0x40
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002060:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	605a      	str	r2, [r3, #4]
 800206a:	609a      	str	r2, [r3, #8]
 800206c:	60da      	str	r2, [r3, #12]
 800206e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6c      	ldr	r2, [pc, #432]	; (8002228 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d129      	bne.n	80020ce <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800207a:	4b6c      	ldr	r3, [pc, #432]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	4a6b      	ldr	r2, [pc, #428]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	6593      	str	r3, [r2, #88]	; 0x58
 8002086:	4b69      	ldr	r3, [pc, #420]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	4b66      	ldr	r3, [pc, #408]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002096:	4a65      	ldr	r2, [pc, #404]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800209e:	4b63      	ldr	r3, [pc, #396]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
 80020a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80020aa:	2350      	movs	r3, #80	; 0x50
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80020ba:	2302      	movs	r3, #2
 80020bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c8:	f000 fb90 	bl	80027ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020cc:	e0a7      	b.n	800221e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a57      	ldr	r2, [pc, #348]	; (8002230 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d12a      	bne.n	800212e <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020d8:	4b54      	ldr	r3, [pc, #336]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	4a53      	ldr	r2, [pc, #332]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020de:	f043 0304 	orr.w	r3, r3, #4
 80020e2:	6593      	str	r3, [r2, #88]	; 0x58
 80020e4:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	623b      	str	r3, [r7, #32]
 80020ee:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	4b4e      	ldr	r3, [pc, #312]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	4a4d      	ldr	r2, [pc, #308]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020fc:	4b4b      	ldr	r3, [pc, #300]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002108:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800211a:	230a      	movs	r3, #10
 800211c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800211e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002122:	4619      	mov	r1, r3
 8002124:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002128:	f000 fb60 	bl	80027ec <HAL_GPIO_Init>
}
 800212c:	e077      	b.n	800221e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a40      	ldr	r2, [pc, #256]	; (8002234 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d145      	bne.n	80021c4 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002138:	4b3c      	ldr	r3, [pc, #240]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800213a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800213c:	4a3b      	ldr	r2, [pc, #236]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800213e:	f043 0308 	orr.w	r3, r3, #8
 8002142:	6593      	str	r3, [r2, #88]	; 0x58
 8002144:	4b39      	ldr	r3, [pc, #228]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002150:	4b36      	ldr	r3, [pc, #216]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002154:	4a35      	ldr	r2, [pc, #212]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002156:	f043 0302 	orr.w	r3, r3, #2
 800215a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800215c:	4b33      	ldr	r3, [pc, #204]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	617b      	str	r3, [r7, #20]
 8002166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216c:	4a2f      	ldr	r2, [pc, #188]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002174:	4b2d      	ldr	r3, [pc, #180]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002180:	2304      	movs	r3, #4
 8002182:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002184:	2302      	movs	r3, #2
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218c:	2300      	movs	r3, #0
 800218e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002190:	2302      	movs	r3, #2
 8002192:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002194:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002198:	4619      	mov	r1, r3
 800219a:	4827      	ldr	r0, [pc, #156]	; (8002238 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800219c:	f000 fb26 	bl	80027ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80021a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80021b2:	2301      	movs	r3, #1
 80021b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ba:	4619      	mov	r1, r3
 80021bc:	481f      	ldr	r0, [pc, #124]	; (800223c <HAL_TIM_Encoder_MspInit+0x1e4>)
 80021be:	f000 fb15 	bl	80027ec <HAL_GPIO_Init>
}
 80021c2:	e02c      	b.n	800221e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a1d      	ldr	r2, [pc, #116]	; (8002240 <HAL_TIM_Encoder_MspInit+0x1e8>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d127      	bne.n	800221e <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021ce:	4b17      	ldr	r3, [pc, #92]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021d2:	4a16      	ldr	r2, [pc, #88]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021d8:	6613      	str	r3, [r2, #96]	; 0x60
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ea:	4a10      	ldr	r2, [pc, #64]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f2:	4b0e      	ldr	r3, [pc, #56]	; (800222c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021fe:	23c0      	movs	r3, #192	; 0xc0
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002202:	2302      	movs	r3, #2
 8002204:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800220e:	2304      	movs	r3, #4
 8002210:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002212:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002216:	4619      	mov	r1, r3
 8002218:	4808      	ldr	r0, [pc, #32]	; (800223c <HAL_TIM_Encoder_MspInit+0x1e4>)
 800221a:	f000 fae7 	bl	80027ec <HAL_GPIO_Init>
}
 800221e:	bf00      	nop
 8002220:	3740      	adds	r7, #64	; 0x40
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40000400 	.word	0x40000400
 800222c:	40021000 	.word	0x40021000
 8002230:	40000800 	.word	0x40000800
 8002234:	40000c00 	.word	0x40000c00
 8002238:	48000400 	.word	0x48000400
 800223c:	48000800 	.word	0x48000800
 8002240:	40013400 	.word	0x40013400

08002244 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a11      	ldr	r2, [pc, #68]	; (80022a8 <HAL_TIM_MspPostInit+0x64>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d11b      	bne.n	800229e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_TIM_MspPostInit+0x68>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	4a10      	ldr	r2, [pc, #64]	; (80022ac <HAL_TIM_MspPostInit+0x68>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002272:	4b0e      	ldr	r3, [pc, #56]	; (80022ac <HAL_TIM_MspPostInit+0x68>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800227e:	230f      	movs	r3, #15
 8002280:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002282:	2302      	movs	r3, #2
 8002284:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228a:	2300      	movs	r3, #0
 800228c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800228e:	2302      	movs	r3, #2
 8002290:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002292:	f107 030c 	add.w	r3, r7, #12
 8002296:	4619      	mov	r1, r3
 8002298:	4805      	ldr	r0, [pc, #20]	; (80022b0 <HAL_TIM_MspPostInit+0x6c>)
 800229a:	f000 faa7 	bl	80027ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800229e:	bf00      	nop
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40012c00 	.word	0x40012c00
 80022ac:	40021000 	.word	0x40021000
 80022b0:	48000800 	.word	0x48000800

080022b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08c      	sub	sp, #48	; 0x30
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022c4:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <HAL_InitTick+0xc4>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c8:	4a2b      	ldr	r2, [pc, #172]	; (8002378 <HAL_InitTick+0xc4>)
 80022ca:	f043 0310 	orr.w	r3, r3, #16
 80022ce:	6593      	str	r3, [r2, #88]	; 0x58
 80022d0:	4b29      	ldr	r3, [pc, #164]	; (8002378 <HAL_InitTick+0xc4>)
 80022d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d4:	f003 0310 	and.w	r3, r3, #16
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022dc:	f107 020c 	add.w	r2, r7, #12
 80022e0:	f107 0310 	add.w	r3, r7, #16
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f001 f9b6 	bl	8003658 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022ec:	f001 f988 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 80022f0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022f4:	4a21      	ldr	r2, [pc, #132]	; (800237c <HAL_InitTick+0xc8>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0c9b      	lsrs	r3, r3, #18
 80022fc:	3b01      	subs	r3, #1
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_InitTick+0xcc>)
 8002302:	4a20      	ldr	r2, [pc, #128]	; (8002384 <HAL_InitTick+0xd0>)
 8002304:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_InitTick+0xcc>)
 8002308:	f240 32e7 	movw	r2, #999	; 0x3e7
 800230c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800230e:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <HAL_InitTick+0xcc>)
 8002310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002312:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002314:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_InitTick+0xcc>)
 8002316:	2200      	movs	r2, #0
 8002318:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800231a:	4b19      	ldr	r3, [pc, #100]	; (8002380 <HAL_InitTick+0xcc>)
 800231c:	2200      	movs	r2, #0
 800231e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002320:	4817      	ldr	r0, [pc, #92]	; (8002380 <HAL_InitTick+0xcc>)
 8002322:	f001 fc5f 	bl	8003be4 <HAL_TIM_Base_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800232c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002330:	2b00      	cmp	r3, #0
 8002332:	d11b      	bne.n	800236c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002334:	4812      	ldr	r0, [pc, #72]	; (8002380 <HAL_InitTick+0xcc>)
 8002336:	f001 fd1d 	bl	8003d74 <HAL_TIM_Base_Start_IT>
 800233a:	4603      	mov	r3, r0
 800233c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002340:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002344:	2b00      	cmp	r3, #0
 8002346:	d111      	bne.n	800236c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002348:	2036      	movs	r0, #54	; 0x36
 800234a:	f000 fa41 	bl	80027d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b0f      	cmp	r3, #15
 8002352:	d808      	bhi.n	8002366 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002354:	2200      	movs	r2, #0
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	2036      	movs	r0, #54	; 0x36
 800235a:	f000 fa1f 	bl	800279c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_InitTick+0xd4>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e002      	b.n	800236c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800236c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002370:	4618      	mov	r0, r3
 8002372:	3730      	adds	r7, #48	; 0x30
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40021000 	.word	0x40021000
 800237c:	431bde83 	.word	0x431bde83
 8002380:	20000544 	.word	0x20000544
 8002384:	40001000 	.word	0x40001000
 8002388:	20000004 	.word	0x20000004

0800238c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002390:	e7fe      	b.n	8002390 <NMI_Handler+0x4>

08002392 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002396:	e7fe      	b.n	8002396 <HardFault_Handler+0x4>

08002398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800239c:	e7fe      	b.n	800239c <MemManage_Handler+0x4>

0800239e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <BusFault_Handler+0x4>

080023a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a8:	e7fe      	b.n	80023a8 <UsageFault_Handler+0x4>

080023aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023aa:	b480      	push	{r7}
 80023ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ae:	bf00      	nop
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023bc:	4802      	ldr	r0, [pc, #8]	; (80023c8 <TIM6_DAC_IRQHandler+0x10>)
 80023be:	f001 fff9 	bl	80043b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000544 	.word	0x20000544

080023cc <TIM7_DAC_IRQHandler>:

void TIM7_DAC_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <TIM7_DAC_IRQHandler+0x10>)
 80023d2:	f001 ffef 	bl	80043b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	2000031c 	.word	0x2000031c

080023e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
	return 1;
 80023e4:	2301      	movs	r3, #1
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_kill>:

int _kill(int pid, int sig)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023fa:	f004 ffb5 	bl	8007368 <__errno>
 80023fe:	4603      	mov	r3, r0
 8002400:	2216      	movs	r2, #22
 8002402:	601a      	str	r2, [r3, #0]
	return -1;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002408:	4618      	mov	r0, r3
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_exit>:

void _exit (int status)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002418:	f04f 31ff 	mov.w	r1, #4294967295
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ffe7 	bl	80023f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002422:	e7fe      	b.n	8002422 <_exit+0x12>

08002424 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	2300      	movs	r3, #0
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	e00a      	b.n	800244c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002436:	f3af 8000 	nop.w
 800243a:	4601      	mov	r1, r0
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	1c5a      	adds	r2, r3, #1
 8002440:	60ba      	str	r2, [r7, #8]
 8002442:	b2ca      	uxtb	r2, r1
 8002444:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	3301      	adds	r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	429a      	cmp	r2, r3
 8002452:	dbf0      	blt.n	8002436 <_read+0x12>
	}

return len;
 8002454:	687b      	ldr	r3, [r7, #4]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e009      	b.n	8002484 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	60ba      	str	r2, [r7, #8]
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	3301      	adds	r3, #1
 8002482:	617b      	str	r3, [r7, #20]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	429a      	cmp	r2, r3
 800248a:	dbf1      	blt.n	8002470 <_write+0x12>
	}
	return len;
 800248c:	687b      	ldr	r3, [r7, #4]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <_close>:

int _close(int file)
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
	return -1;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr

080024ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
 80024b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024be:	605a      	str	r2, [r3, #4]
	return 0;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <_isatty>:

int _isatty(int file)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
	return 1;
 80024d6:	2301      	movs	r3, #1
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
	return 0;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002508:	4a14      	ldr	r2, [pc, #80]	; (800255c <_sbrk+0x5c>)
 800250a:	4b15      	ldr	r3, [pc, #84]	; (8002560 <_sbrk+0x60>)
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002514:	4b13      	ldr	r3, [pc, #76]	; (8002564 <_sbrk+0x64>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d102      	bne.n	8002522 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <_sbrk+0x64>)
 800251e:	4a12      	ldr	r2, [pc, #72]	; (8002568 <_sbrk+0x68>)
 8002520:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002522:	4b10      	ldr	r3, [pc, #64]	; (8002564 <_sbrk+0x64>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	429a      	cmp	r2, r3
 800252e:	d207      	bcs.n	8002540 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002530:	f004 ff1a 	bl	8007368 <__errno>
 8002534:	4603      	mov	r3, r0
 8002536:	220c      	movs	r2, #12
 8002538:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800253a:	f04f 33ff 	mov.w	r3, #4294967295
 800253e:	e009      	b.n	8002554 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <_sbrk+0x64>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002546:	4b07      	ldr	r3, [pc, #28]	; (8002564 <_sbrk+0x64>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <_sbrk+0x64>)
 8002550:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002552:	68fb      	ldr	r3, [r7, #12]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20020000 	.word	0x20020000
 8002560:	00000400 	.word	0x00000400
 8002564:	20000590 	.word	0x20000590
 8002568:	20000770 	.word	0x20000770

0800256c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <SystemInit+0x20>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	4a05      	ldr	r2, [pc, #20]	; (800258c <SystemInit+0x20>)
 8002578:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800257c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002590:	480d      	ldr	r0, [pc, #52]	; (80025c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002592:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002594:	f7ff ffea 	bl	800256c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002598:	480c      	ldr	r0, [pc, #48]	; (80025cc <LoopForever+0x6>)
  ldr r1, =_edata
 800259a:	490d      	ldr	r1, [pc, #52]	; (80025d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800259c:	4a0d      	ldr	r2, [pc, #52]	; (80025d4 <LoopForever+0xe>)
  movs r3, #0
 800259e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025a0:	e002      	b.n	80025a8 <LoopCopyDataInit>

080025a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025a6:	3304      	adds	r3, #4

080025a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ac:	d3f9      	bcc.n	80025a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ae:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80025b0:	4c0a      	ldr	r4, [pc, #40]	; (80025dc <LoopForever+0x16>)
  movs r3, #0
 80025b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b4:	e001      	b.n	80025ba <LoopFillZerobss>

080025b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025b8:	3204      	adds	r2, #4

080025ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025bc:	d3fb      	bcc.n	80025b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025be:	f004 fed9 	bl	8007374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80025c2:	f7ff fb8f 	bl	8001ce4 <main>

080025c6 <LoopForever>:

LoopForever:
    b LoopForever
 80025c6:	e7fe      	b.n	80025c6 <LoopForever>
  ldr   r0, =_estack
 80025c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025d0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80025d4:	08009544 	.word	0x08009544
  ldr r2, =_sbss
 80025d8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80025dc:	20000770 	.word	0x20000770

080025e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80025e0:	e7fe      	b.n	80025e0 <ADC1_2_IRQHandler>

080025e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b082      	sub	sp, #8
 80025e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ec:	2003      	movs	r0, #3
 80025ee:	f000 f8ca 	bl	8002786 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025f2:	200f      	movs	r0, #15
 80025f4:	f7ff fe5e 	bl	80022b4 <HAL_InitTick>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	71fb      	strb	r3, [r7, #7]
 8002602:	e001      	b.n	8002608 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002604:	f7ff fc32 	bl	8001e6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002608:	79fb      	ldrb	r3, [r7, #7]

}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
 }
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000594 	.word	0x20000594

0800262c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f003 0307 	and.w	r3, r3, #7
 800263a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002648:	4013      	ands	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800265c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800265e:	4a04      	ldr	r2, [pc, #16]	; (8002670 <__NVIC_SetPriorityGrouping+0x44>)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	60d3      	str	r3, [r2, #12]
}
 8002664:	bf00      	nop
 8002666:	3714      	adds	r7, #20
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002678:	4b04      	ldr	r3, [pc, #16]	; (800268c <__NVIC_GetPriorityGrouping+0x18>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 0307 	and.w	r3, r3, #7
}
 8002682:	4618      	mov	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	db0b      	blt.n	80026ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	f003 021f 	and.w	r2, r3, #31
 80026a8:	4907      	ldr	r1, [pc, #28]	; (80026c8 <__NVIC_EnableIRQ+0x38>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	2001      	movs	r0, #1
 80026b2:	fa00 f202 	lsl.w	r2, r0, r2
 80026b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000e100 	.word	0xe000e100

080026cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4603      	mov	r3, r0
 80026d4:	6039      	str	r1, [r7, #0]
 80026d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	db0a      	blt.n	80026f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	490c      	ldr	r1, [pc, #48]	; (8002718 <__NVIC_SetPriority+0x4c>)
 80026e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ea:	0112      	lsls	r2, r2, #4
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	440b      	add	r3, r1
 80026f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026f4:	e00a      	b.n	800270c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4908      	ldr	r1, [pc, #32]	; (800271c <__NVIC_SetPriority+0x50>)
 80026fc:	79fb      	ldrb	r3, [r7, #7]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	3b04      	subs	r3, #4
 8002704:	0112      	lsls	r2, r2, #4
 8002706:	b2d2      	uxtb	r2, r2
 8002708:	440b      	add	r3, r1
 800270a:	761a      	strb	r2, [r3, #24]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr
 8002718:	e000e100 	.word	0xe000e100
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	f1c3 0307 	rsb	r3, r3, #7
 800273a:	2b04      	cmp	r3, #4
 800273c:	bf28      	it	cs
 800273e:	2304      	movcs	r3, #4
 8002740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3304      	adds	r3, #4
 8002746:	2b06      	cmp	r3, #6
 8002748:	d902      	bls.n	8002750 <NVIC_EncodePriority+0x30>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3b03      	subs	r3, #3
 800274e:	e000      	b.n	8002752 <NVIC_EncodePriority+0x32>
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	f04f 32ff 	mov.w	r2, #4294967295
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43da      	mvns	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	401a      	ands	r2, r3
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002768:	f04f 31ff 	mov.w	r1, #4294967295
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	fa01 f303 	lsl.w	r3, r1, r3
 8002772:	43d9      	mvns	r1, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002778:	4313      	orrs	r3, r2
         );
}
 800277a:	4618      	mov	r0, r3
 800277c:	3724      	adds	r7, #36	; 0x24
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b082      	sub	sp, #8
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7ff ff4c 	bl	800262c <__NVIC_SetPriorityGrouping>
}
 8002794:	bf00      	nop
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80027aa:	f7ff ff63 	bl	8002674 <__NVIC_GetPriorityGrouping>
 80027ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	68b9      	ldr	r1, [r7, #8]
 80027b4:	6978      	ldr	r0, [r7, #20]
 80027b6:	f7ff ffb3 	bl	8002720 <NVIC_EncodePriority>
 80027ba:	4602      	mov	r2, r0
 80027bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff82 	bl	80026cc <__NVIC_SetPriority>
}
 80027c8:	bf00      	nop
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff ff56 	bl	8002690 <__NVIC_EnableIRQ>
}
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027fa:	e15a      	b.n	8002ab2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	fa01 f303 	lsl.w	r3, r1, r3
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 814c 	beq.w	8002aac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f003 0303 	and.w	r3, r3, #3
 800281c:	2b01      	cmp	r3, #1
 800281e:	d005      	beq.n	800282c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002828:	2b02      	cmp	r3, #2
 800282a:	d130      	bne.n	800288e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	2203      	movs	r2, #3
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	43db      	mvns	r3, r3
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	4013      	ands	r3, r2
 8002842:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002862:	2201      	movs	r2, #1
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	4013      	ands	r3, r2
 8002870:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 0201 	and.w	r2, r3, #1
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	2b03      	cmp	r3, #3
 8002898:	d017      	beq.n	80028ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4013      	ands	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	693a      	ldr	r2, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d123      	bne.n	800291e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	08da      	lsrs	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	3208      	adds	r2, #8
 80028de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	691a      	ldr	r2, [r3, #16]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	08da      	lsrs	r2, r3, #3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3208      	adds	r2, #8
 8002918:	6939      	ldr	r1, [r7, #16]
 800291a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	2203      	movs	r2, #3
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4013      	ands	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0203 	and.w	r2, r3, #3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800295a:	2b00      	cmp	r3, #0
 800295c:	f000 80a6 	beq.w	8002aac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002960:	4b5b      	ldr	r3, [pc, #364]	; (8002ad0 <HAL_GPIO_Init+0x2e4>)
 8002962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002964:	4a5a      	ldr	r2, [pc, #360]	; (8002ad0 <HAL_GPIO_Init+0x2e4>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6613      	str	r3, [r2, #96]	; 0x60
 800296c:	4b58      	ldr	r3, [pc, #352]	; (8002ad0 <HAL_GPIO_Init+0x2e4>)
 800296e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002978:	4a56      	ldr	r2, [pc, #344]	; (8002ad4 <HAL_GPIO_Init+0x2e8>)
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	220f      	movs	r2, #15
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	4013      	ands	r3, r2
 800299a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029a2:	d01f      	beq.n	80029e4 <HAL_GPIO_Init+0x1f8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a4c      	ldr	r2, [pc, #304]	; (8002ad8 <HAL_GPIO_Init+0x2ec>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d019      	beq.n	80029e0 <HAL_GPIO_Init+0x1f4>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	4a4b      	ldr	r2, [pc, #300]	; (8002adc <HAL_GPIO_Init+0x2f0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d013      	beq.n	80029dc <HAL_GPIO_Init+0x1f0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a4a      	ldr	r2, [pc, #296]	; (8002ae0 <HAL_GPIO_Init+0x2f4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d00d      	beq.n	80029d8 <HAL_GPIO_Init+0x1ec>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a49      	ldr	r2, [pc, #292]	; (8002ae4 <HAL_GPIO_Init+0x2f8>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d007      	beq.n	80029d4 <HAL_GPIO_Init+0x1e8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a48      	ldr	r2, [pc, #288]	; (8002ae8 <HAL_GPIO_Init+0x2fc>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d101      	bne.n	80029d0 <HAL_GPIO_Init+0x1e4>
 80029cc:	2305      	movs	r3, #5
 80029ce:	e00a      	b.n	80029e6 <HAL_GPIO_Init+0x1fa>
 80029d0:	2306      	movs	r3, #6
 80029d2:	e008      	b.n	80029e6 <HAL_GPIO_Init+0x1fa>
 80029d4:	2304      	movs	r3, #4
 80029d6:	e006      	b.n	80029e6 <HAL_GPIO_Init+0x1fa>
 80029d8:	2303      	movs	r3, #3
 80029da:	e004      	b.n	80029e6 <HAL_GPIO_Init+0x1fa>
 80029dc:	2302      	movs	r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x1fa>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_GPIO_Init+0x1fa>
 80029e4:	2300      	movs	r3, #0
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	f002 0203 	and.w	r2, r2, #3
 80029ec:	0092      	lsls	r2, r2, #2
 80029ee:	4093      	lsls	r3, r2
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029f6:	4937      	ldr	r1, [pc, #220]	; (8002ad4 <HAL_GPIO_Init+0x2e8>)
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	089b      	lsrs	r3, r3, #2
 80029fc:	3302      	adds	r3, #2
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a04:	4b39      	ldr	r3, [pc, #228]	; (8002aec <HAL_GPIO_Init+0x300>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4013      	ands	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a28:	4a30      	ldr	r2, [pc, #192]	; (8002aec <HAL_GPIO_Init+0x300>)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_GPIO_Init+0x300>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a52:	4a26      	ldr	r2, [pc, #152]	; (8002aec <HAL_GPIO_Init+0x300>)
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a58:	4b24      	ldr	r3, [pc, #144]	; (8002aec <HAL_GPIO_Init+0x300>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a74:	693a      	ldr	r2, [r7, #16]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <HAL_GPIO_Init+0x300>)
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_GPIO_Init+0x300>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002a9e:	693a      	ldr	r2, [r7, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aa6:	4a11      	ldr	r2, [pc, #68]	; (8002aec <HAL_GPIO_Init+0x300>)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f47f ae9d 	bne.w	80027fc <HAL_GPIO_Init+0x10>
  }
}
 8002ac2:	bf00      	nop
 8002ac4:	bf00      	nop
 8002ac6:	371c      	adds	r7, #28
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40010000 	.word	0x40010000
 8002ad8:	48000400 	.word	0x48000400
 8002adc:	48000800 	.word	0x48000800
 8002ae0:	48000c00 	.word	0x48000c00
 8002ae4:	48001000 	.word	0x48001000
 8002ae8:	48001400 	.word	0x48001400
 8002aec:	40010400 	.word	0x40010400

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b0c:	e002      	b.n	8002b14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b0e:	887a      	ldrh	r2, [r7, #2]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d141      	bne.n	8002bb2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b2e:	4b4b      	ldr	r3, [pc, #300]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b3a:	d131      	bne.n	8002ba0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b3c:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b42:	4a46      	ldr	r2, [pc, #280]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b4c:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b54:	4a41      	ldr	r2, [pc, #260]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b5c:	4b40      	ldr	r3, [pc, #256]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2232      	movs	r2, #50	; 0x32
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	4a3f      	ldr	r2, [pc, #252]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	0c9b      	lsrs	r3, r3, #18
 8002b6e:	3301      	adds	r3, #1
 8002b70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b72:	e002      	b.n	8002b7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7a:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b86:	d102      	bne.n	8002b8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f2      	bne.n	8002b74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b8e:	4b33      	ldr	r3, [pc, #204]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d158      	bne.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e057      	b.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba0:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ba6:	4a2d      	ldr	r2, [pc, #180]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002bb0:	e04d      	b.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb8:	d141      	bne.n	8002c3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bba:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc6:	d131      	bne.n	8002c2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bc8:	4b24      	ldr	r3, [pc, #144]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bce:	4a23      	ldr	r2, [pc, #140]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd8:	4b20      	ldr	r3, [pc, #128]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be0:	4a1e      	ldr	r2, [pc, #120]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002be6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002be8:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2232      	movs	r2, #50	; 0x32
 8002bee:	fb02 f303 	mul.w	r3, r2, r3
 8002bf2:	4a1c      	ldr	r2, [pc, #112]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	0c9b      	lsrs	r3, r3, #18
 8002bfa:	3301      	adds	r3, #1
 8002bfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002bfe:	e002      	b.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c06:	4b15      	ldr	r3, [pc, #84]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c12:	d102      	bne.n	8002c1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f2      	bne.n	8002c00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d112      	bne.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e011      	b.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c2c:	4b0b      	ldr	r3, [pc, #44]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c32:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002c3c:	e007      	b.n	8002c4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c3e:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c46:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40007000 	.word	0x40007000
 8002c60:	20000000 	.word	0x20000000
 8002c64:	431bde83 	.word	0x431bde83

08002c68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a04      	ldr	r2, [pc, #16]	; (8002c84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c76:	6093      	str	r3, [r2, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40007000 	.word	0x40007000

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e2fe      	b.n	8003298 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d075      	beq.n	8002d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca6:	4b97      	ldr	r3, [pc, #604]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb0:	4b94      	ldr	r3, [pc, #592]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	2b0c      	cmp	r3, #12
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x3e>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_OscConfig+0x44>
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	4b8d      	ldr	r3, [pc, #564]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05b      	beq.n	8002d90 <HAL_RCC_OscConfig+0x108>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d157      	bne.n	8002d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e2d9      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x74>
 8002cee:	4b85      	ldr	r3, [pc, #532]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a84      	ldr	r2, [pc, #528]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e01d      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x98>
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a7e      	ldr	r2, [pc, #504]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b7c      	ldr	r3, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a7b      	ldr	r2, [pc, #492]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002d20:	4b78      	ldr	r3, [pc, #480]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a77      	ldr	r2, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a74      	ldr	r2, [pc, #464]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d40:	f7ff fc68 	bl	8002614 <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d48:	f7ff fc64 	bl	8002614 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e29e      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5a:	4b6a      	ldr	r3, [pc, #424]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0xc0>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d68:	f7ff fc54 	bl	8002614 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d70:	f7ff fc50 	bl	8002614 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e28a      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d82:	4b60      	ldr	r3, [pc, #384]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0xe8>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d075      	beq.n	8002e8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d9e:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da8:	4b56      	ldr	r3, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f003 0303 	and.w	r3, r3, #3
 8002db0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d102      	bne.n	8002dbe <HAL_RCC_OscConfig+0x136>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d002      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x13c>
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d11f      	bne.n	8002e04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc4:	4b4f      	ldr	r3, [pc, #316]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_RCC_OscConfig+0x154>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e25d      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ddc:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	061b      	lsls	r3, r3, #24
 8002dea:	4946      	ldr	r1, [pc, #280]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002df0:	4b45      	ldr	r3, [pc, #276]	; (8002f08 <HAL_RCC_OscConfig+0x280>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff fa5d 	bl	80022b4 <HAL_InitTick>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d043      	beq.n	8002e88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e249      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d023      	beq.n	8002e54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a3c      	ldr	r2, [pc, #240]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e18:	f7ff fbfc 	bl	8002614 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e20:	f7ff fbf8 	bl	8002614 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e232      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e3e:	4b31      	ldr	r3, [pc, #196]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	061b      	lsls	r3, r3, #24
 8002e4c:	492d      	ldr	r1, [pc, #180]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	604b      	str	r3, [r1, #4]
 8002e52:	e01a      	b.n	8002e8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e54:	4b2b      	ldr	r3, [pc, #172]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2a      	ldr	r2, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e60:	f7ff fbd8 	bl	8002614 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e68:	f7ff fbd4 	bl	8002614 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e20e      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e7a:	4b22      	ldr	r3, [pc, #136]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x1e0>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d041      	beq.n	8002f1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01c      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9e:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ea4:	4a17      	ldr	r2, [pc, #92]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eae:	f7ff fbb1 	bl	8002614 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb6:	f7ff fbad 	bl	8002614 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e1e7      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ec8:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0ef      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x22e>
 8002ed6:	e020      	b.n	8002f1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed8:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_RCC_OscConfig+0x27c>)
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7ff fb94 	bl	8002614 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002eee:	e00d      	b.n	8002f0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7ff fb90 	bl	8002614 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d906      	bls.n	8002f0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e1ca      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f0c:	4b8c      	ldr	r3, [pc, #560]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ea      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 80a6 	beq.w	8003074 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f2c:	4b84      	ldr	r3, [pc, #528]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2b4>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x2b6>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00d      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f42:	4b7f      	ldr	r3, [pc, #508]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f46:	4a7e      	ldr	r2, [pc, #504]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002f4e:	4b7c      	ldr	r3, [pc, #496]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f5e:	4b79      	ldr	r3, [pc, #484]	; (8003144 <HAL_RCC_OscConfig+0x4bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d118      	bne.n	8002f9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6a:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_RCC_OscConfig+0x4bc>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a75      	ldr	r2, [pc, #468]	; (8003144 <HAL_RCC_OscConfig+0x4bc>)
 8002f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f76:	f7ff fb4d 	bl	8002614 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f7c:	e008      	b.n	8002f90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7e:	f7ff fb49 	bl	8002614 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e183      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f90:	4b6c      	ldr	r3, [pc, #432]	; (8003144 <HAL_RCC_OscConfig+0x4bc>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0f0      	beq.n	8002f7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d108      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x32e>
 8002fa4:	4b66      	ldr	r3, [pc, #408]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002faa:	4a65      	ldr	r2, [pc, #404]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fb4:	e024      	b.n	8003000 <HAL_RCC_OscConfig+0x378>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	2b05      	cmp	r3, #5
 8002fbc:	d110      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x358>
 8002fbe:	4b60      	ldr	r3, [pc, #384]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	4a5e      	ldr	r2, [pc, #376]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fce:	4b5c      	ldr	r3, [pc, #368]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fd4:	4a5a      	ldr	r2, [pc, #360]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002fde:	e00f      	b.n	8003000 <HAL_RCC_OscConfig+0x378>
 8002fe0:	4b57      	ldr	r3, [pc, #348]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	4a56      	ldr	r2, [pc, #344]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	f023 0301 	bic.w	r3, r3, #1
 8002fec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ff0:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff6:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8002ff8:	f023 0304 	bic.w	r3, r3, #4
 8002ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d016      	beq.n	8003036 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7ff fb04 	bl	8002614 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7ff fb00 	bl	8002614 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e138      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003026:	4b46      	ldr	r3, [pc, #280]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0ed      	beq.n	8003010 <HAL_RCC_OscConfig+0x388>
 8003034:	e015      	b.n	8003062 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003036:	f7ff faed 	bl	8002614 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800303e:	f7ff fae9 	bl	8002614 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	f241 3288 	movw	r2, #5000	; 0x1388
 800304c:	4293      	cmp	r3, r2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e121      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003054:	4b3a      	ldr	r3, [pc, #232]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8003056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1ed      	bne.n	800303e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003062:	7ffb      	ldrb	r3, [r7, #31]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d105      	bne.n	8003074 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 800306a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306c:	4a34      	ldr	r2, [pc, #208]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 800306e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003072:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d03c      	beq.n	80030fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01c      	beq.n	80030c2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003088:	4b2d      	ldr	r3, [pc, #180]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 800308a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800308e:	4a2c      	ldr	r2, [pc, #176]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003098:	f7ff fabc 	bl	8002614 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030a0:	f7ff fab8 	bl	8002614 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e0f2      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030b2:	4b23      	ldr	r3, [pc, #140]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 80030b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0ef      	beq.n	80030a0 <HAL_RCC_OscConfig+0x418>
 80030c0:	e01b      	b.n	80030fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030c2:	4b1f      	ldr	r3, [pc, #124]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 80030c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030c8:	4a1d      	ldr	r2, [pc, #116]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d2:	f7ff fa9f 	bl	8002614 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030da:	f7ff fa9b 	bl	8002614 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e0d5      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 80030ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d1ef      	bne.n	80030da <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80c9 	beq.w	8003296 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b0c      	cmp	r3, #12
 800310e:	f000 8083 	beq.w	8003218 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d15e      	bne.n	80031d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a08      	ldr	r2, [pc, #32]	; (8003140 <HAL_RCC_OscConfig+0x4b8>)
 8003120:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003124:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003126:	f7ff fa75 	bl	8002614 <HAL_GetTick>
 800312a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800312c:	e00c      	b.n	8003148 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800312e:	f7ff fa71 	bl	8002614 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d905      	bls.n	8003148 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800313c:	2303      	movs	r3, #3
 800313e:	e0ab      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
 8003140:	40021000 	.word	0x40021000
 8003144:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003148:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1ec      	bne.n	800312e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003154:	4b52      	ldr	r3, [pc, #328]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4b52      	ldr	r3, [pc, #328]	; (80032a4 <HAL_RCC_OscConfig+0x61c>)
 800315a:	4013      	ands	r3, r2
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6a11      	ldr	r1, [r2, #32]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003164:	3a01      	subs	r2, #1
 8003166:	0112      	lsls	r2, r2, #4
 8003168:	4311      	orrs	r1, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800316e:	0212      	lsls	r2, r2, #8
 8003170:	4311      	orrs	r1, r2
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003176:	0852      	lsrs	r2, r2, #1
 8003178:	3a01      	subs	r2, #1
 800317a:	0552      	lsls	r2, r2, #21
 800317c:	4311      	orrs	r1, r2
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003182:	0852      	lsrs	r2, r2, #1
 8003184:	3a01      	subs	r2, #1
 8003186:	0652      	lsls	r2, r2, #25
 8003188:	4311      	orrs	r1, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800318e:	06d2      	lsls	r2, r2, #27
 8003190:	430a      	orrs	r2, r1
 8003192:	4943      	ldr	r1, [pc, #268]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 8003194:	4313      	orrs	r3, r2
 8003196:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a40      	ldr	r2, [pc, #256]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 800319e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a4:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	4a3d      	ldr	r2, [pc, #244]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 80031aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7ff fa30 	bl	8002614 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7ff fa2c 	bl	8002614 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e066      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ca:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x530>
 80031d6:	e05e      	b.n	8003296 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d8:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a30      	ldr	r2, [pc, #192]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 80031de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7ff fa16 	bl	8002614 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ec:	f7ff fa12 	bl	8002614 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e04c      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031fe:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800320a:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	4924      	ldr	r1, [pc, #144]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_RCC_OscConfig+0x620>)
 8003212:	4013      	ands	r3, r2
 8003214:	60cb      	str	r3, [r1, #12]
 8003216:	e03e      	b.n	8003296 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e039      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003224:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <HAL_RCC_OscConfig+0x618>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 0203 	and.w	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	429a      	cmp	r2, r3
 8003236:	d12c      	bne.n	8003292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	3b01      	subs	r3, #1
 8003244:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d123      	bne.n	8003292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003256:	429a      	cmp	r2, r3
 8003258:	d11b      	bne.n	8003292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003266:	429a      	cmp	r2, r3
 8003268:	d113      	bne.n	8003292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	085b      	lsrs	r3, r3, #1
 8003276:	3b01      	subs	r3, #1
 8003278:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d109      	bne.n	8003292 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	3b01      	subs	r3, #1
 800328c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800328e:	429a      	cmp	r2, r3
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e000      	b.n	8003298 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3720      	adds	r7, #32
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	40021000 	.word	0x40021000
 80032a4:	019f800c 	.word	0x019f800c
 80032a8:	feeefffc 	.word	0xfeeefffc

080032ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d101      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e11e      	b.n	8003502 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c4:	4b91      	ldr	r3, [pc, #580]	; (800350c <HAL_RCC_ClockConfig+0x260>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 030f 	and.w	r3, r3, #15
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d910      	bls.n	80032f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d2:	4b8e      	ldr	r3, [pc, #568]	; (800350c <HAL_RCC_ClockConfig+0x260>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f023 020f 	bic.w	r2, r3, #15
 80032da:	498c      	ldr	r1, [pc, #560]	; (800350c <HAL_RCC_ClockConfig+0x260>)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	4313      	orrs	r3, r2
 80032e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e2:	4b8a      	ldr	r3, [pc, #552]	; (800350c <HAL_RCC_ClockConfig+0x260>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 030f 	and.w	r3, r3, #15
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d001      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e106      	b.n	8003502 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d073      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d129      	bne.n	800335c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003308:	4b81      	ldr	r3, [pc, #516]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0f4      	b.n	8003502 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003318:	f000 f9d0 	bl	80036bc <RCC_GetSysClockFreqFromPLLSource>
 800331c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4a7c      	ldr	r2, [pc, #496]	; (8003514 <HAL_RCC_ClockConfig+0x268>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d93f      	bls.n	80033a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003326:	4b7a      	ldr	r3, [pc, #488]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800333a:	2b00      	cmp	r3, #0
 800333c:	d033      	beq.n	80033a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003342:	2b00      	cmp	r3, #0
 8003344:	d12f      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003346:	4b72      	ldr	r3, [pc, #456]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800334e:	4a70      	ldr	r2, [pc, #448]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003354:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003356:	2380      	movs	r3, #128	; 0x80
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	e024      	b.n	80033a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d107      	bne.n	8003374 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003364:	4b6a      	ldr	r3, [pc, #424]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e0c6      	b.n	8003502 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e0be      	b.n	8003502 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003384:	f000 f8ce 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 8003388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	4a61      	ldr	r2, [pc, #388]	; (8003514 <HAL_RCC_ClockConfig+0x268>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d909      	bls.n	80033a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003392:	4b5f      	ldr	r3, [pc, #380]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800339a:	4a5d      	ldr	r2, [pc, #372]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 800339c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033a2:	2380      	movs	r3, #128	; 0x80
 80033a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033a6:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f023 0203 	bic.w	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4957      	ldr	r1, [pc, #348]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033b8:	f7ff f92c 	bl	8002614 <HAL_GetTick>
 80033bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033be:	e00a      	b.n	80033d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c0:	f7ff f928 	bl	8002614 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e095      	b.n	8003502 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d6:	4b4e      	ldr	r3, [pc, #312]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 020c 	and.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1eb      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d023      	beq.n	800343c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0304 	and.w	r3, r3, #4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d005      	beq.n	800340c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	4a42      	ldr	r2, [pc, #264]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003406:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800340a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003418:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003420:	4a3b      	ldr	r2, [pc, #236]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003422:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003426:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b39      	ldr	r3, [pc, #228]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4936      	ldr	r1, [pc, #216]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003436:	4313      	orrs	r3, r2
 8003438:	608b      	str	r3, [r1, #8]
 800343a:	e008      	b.n	800344e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	2b80      	cmp	r3, #128	; 0x80
 8003440:	d105      	bne.n	800344e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003442:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	4a32      	ldr	r2, [pc, #200]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 8003448:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800344c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800344e:	4b2f      	ldr	r3, [pc, #188]	; (800350c <HAL_RCC_ClockConfig+0x260>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d21d      	bcs.n	8003498 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345c:	4b2b      	ldr	r3, [pc, #172]	; (800350c <HAL_RCC_ClockConfig+0x260>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 020f 	bic.w	r2, r3, #15
 8003464:	4929      	ldr	r1, [pc, #164]	; (800350c <HAL_RCC_ClockConfig+0x260>)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800346c:	f7ff f8d2 	bl	8002614 <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7ff f8ce 	bl	8002614 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e03b      	b.n	8003502 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_RCC_ClockConfig+0x260>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	429a      	cmp	r2, r3
 8003496:	d1ed      	bne.n	8003474 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4917      	ldr	r1, [pc, #92]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0308 	and.w	r3, r3, #8
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d009      	beq.n	80034d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	490f      	ldr	r1, [pc, #60]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034d6:	f000 f825 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 80034da:	4602      	mov	r2, r0
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_RCC_ClockConfig+0x264>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	091b      	lsrs	r3, r3, #4
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	490c      	ldr	r1, [pc, #48]	; (8003518 <HAL_RCC_ClockConfig+0x26c>)
 80034e8:	5ccb      	ldrb	r3, [r1, r3]
 80034ea:	f003 031f 	and.w	r3, r3, #31
 80034ee:	fa22 f303 	lsr.w	r3, r2, r3
 80034f2:	4a0a      	ldr	r2, [pc, #40]	; (800351c <HAL_RCC_ClockConfig+0x270>)
 80034f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <HAL_RCC_ClockConfig+0x274>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7fe feda 	bl	80022b4 <HAL_InitTick>
 8003500:	4603      	mov	r3, r0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40022000 	.word	0x40022000
 8003510:	40021000 	.word	0x40021000
 8003514:	04c4b400 	.word	0x04c4b400
 8003518:	08009180 	.word	0x08009180
 800351c:	20000000 	.word	0x20000000
 8003520:	20000004 	.word	0x20000004

08003524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800352a:	4b2c      	ldr	r3, [pc, #176]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 030c 	and.w	r3, r3, #12
 8003532:	2b04      	cmp	r3, #4
 8003534:	d102      	bne.n	800353c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003536:	4b2a      	ldr	r3, [pc, #168]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	e047      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800353c:	4b27      	ldr	r3, [pc, #156]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 030c 	and.w	r3, r3, #12
 8003544:	2b08      	cmp	r3, #8
 8003546:	d102      	bne.n	800354e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003548:	4b26      	ldr	r3, [pc, #152]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	e03e      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800354e:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d136      	bne.n	80035c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800355a:	4b20      	ldr	r3, [pc, #128]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0303 	and.w	r3, r3, #3
 8003562:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003564:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	091b      	lsrs	r3, r3, #4
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	3301      	adds	r3, #1
 8003570:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d10c      	bne.n	8003592 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003578:	4a1a      	ldr	r2, [pc, #104]	; (80035e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	4a16      	ldr	r2, [pc, #88]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003582:	68d2      	ldr	r2, [r2, #12]
 8003584:	0a12      	lsrs	r2, r2, #8
 8003586:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	617b      	str	r3, [r7, #20]
      break;
 8003590:	e00c      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003592:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	fbb2 f3f3 	udiv	r3, r2, r3
 800359a:	4a10      	ldr	r2, [pc, #64]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800359c:	68d2      	ldr	r2, [r2, #12]
 800359e:	0a12      	lsrs	r2, r2, #8
 80035a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035a4:	fb02 f303 	mul.w	r3, r2, r3
 80035a8:	617b      	str	r3, [r7, #20]
      break;
 80035aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	0e5b      	lsrs	r3, r3, #25
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	3301      	adds	r3, #1
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	e001      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035cc:	693b      	ldr	r3, [r7, #16]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	371c      	adds	r7, #28
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	00f42400 	.word	0x00f42400
 80035e4:	016e3600 	.word	0x016e3600

080035e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_RCC_GetHCLKFreq+0x14>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	20000000 	.word	0x20000000

08003600 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003604:	f7ff fff0 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003608:	4602      	mov	r2, r0
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x24>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	f003 0307 	and.w	r3, r3, #7
 8003614:	4904      	ldr	r1, [pc, #16]	; (8003628 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003616:	5ccb      	ldrb	r3, [r1, r3]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40021000 	.word	0x40021000
 8003628:	08009190 	.word	0x08009190

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003630:	f7ff ffda 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0adb      	lsrs	r3, r3, #11
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4904      	ldr	r1, [pc, #16]	; (8003654 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	08009190 	.word	0x08009190

08003658 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	220f      	movs	r2, #15
 8003666:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003668:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <HAL_RCC_GetClockConfig+0x5c>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0203 	and.w	r2, r3, #3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003680:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <HAL_RCC_GetClockConfig+0x5c>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800368c:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_RCC_GetClockConfig+0x5c>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	08db      	lsrs	r3, r3, #3
 8003692:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800369a:	4b07      	ldr	r3, [pc, #28]	; (80036b8 <HAL_RCC_GetClockConfig+0x60>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 020f 	and.w	r2, r3, #15
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	601a      	str	r2, [r3, #0]
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40022000 	.word	0x40022000

080036bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036bc:	b480      	push	{r7}
 80036be:	b087      	sub	sp, #28
 80036c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036c2:	4b1e      	ldr	r3, [pc, #120]	; (800373c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	3301      	adds	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	2b03      	cmp	r3, #3
 80036de:	d10c      	bne.n	80036fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e8:	4a14      	ldr	r2, [pc, #80]	; (800373c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ea:	68d2      	ldr	r2, [r2, #12]
 80036ec:	0a12      	lsrs	r2, r2, #8
 80036ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036f2:	fb02 f303 	mul.w	r3, r2, r3
 80036f6:	617b      	str	r3, [r7, #20]
    break;
 80036f8:	e00c      	b.n	8003714 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003702:	4a0e      	ldr	r2, [pc, #56]	; (800373c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003704:	68d2      	ldr	r2, [r2, #12]
 8003706:	0a12      	lsrs	r2, r2, #8
 8003708:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800370c:	fb02 f303 	mul.w	r3, r2, r3
 8003710:	617b      	str	r3, [r7, #20]
    break;
 8003712:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003714:	4b09      	ldr	r3, [pc, #36]	; (800373c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	0e5b      	lsrs	r3, r3, #25
 800371a:	f003 0303 	and.w	r3, r3, #3
 800371e:	3301      	adds	r3, #1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003724:	697a      	ldr	r2, [r7, #20]
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800372e:	687b      	ldr	r3, [r7, #4]
}
 8003730:	4618      	mov	r0, r3
 8003732:	371c      	adds	r7, #28
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr
 800373c:	40021000 	.word	0x40021000
 8003740:	016e3600 	.word	0x016e3600
 8003744:	00f42400 	.word	0x00f42400

08003748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003750:	2300      	movs	r3, #0
 8003752:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003754:	2300      	movs	r3, #0
 8003756:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8098 	beq.w	8003896 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b43      	ldr	r3, [pc, #268]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	4b40      	ldr	r3, [pc, #256]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	4a3f      	ldr	r2, [pc, #252]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800377c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003780:	6593      	str	r3, [r2, #88]	; 0x58
 8003782:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378e:	2301      	movs	r3, #1
 8003790:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003792:	4b3a      	ldr	r3, [pc, #232]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a39      	ldr	r2, [pc, #228]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800379e:	f7fe ff39 	bl	8002614 <HAL_GetTick>
 80037a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037a4:	e009      	b.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a6:	f7fe ff35 	bl	8002614 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d902      	bls.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	74fb      	strb	r3, [r7, #19]
        break;
 80037b8:	e005      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ba:	4b30      	ldr	r3, [pc, #192]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0ef      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d159      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037cc:	4b2a      	ldr	r3, [pc, #168]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d01e      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d019      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e8:	4b23      	ldr	r3, [pc, #140]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037f4:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	4a1f      	ldr	r2, [pc, #124]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	4a1b      	ldr	r2, [pc, #108]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003814:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d016      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003826:	f7fe fef5 	bl	8002614 <HAL_GetTick>
 800382a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800382c:	e00b      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fef1 	bl	8002614 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d902      	bls.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	74fb      	strb	r3, [r7, #19]
            break;
 8003844:	e006      	b.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003846:	4b0c      	ldr	r3, [pc, #48]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ec      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800385a:	4b07      	ldr	r3, [pc, #28]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003868:	4903      	ldr	r1, [pc, #12]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003870:	e008      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003872:	7cfb      	ldrb	r3, [r7, #19]
 8003874:	74bb      	strb	r3, [r7, #18]
 8003876:	e005      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003878:	40021000 	.word	0x40021000
 800387c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003884:	7c7b      	ldrb	r3, [r7, #17]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d105      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388a:	4ba7      	ldr	r3, [pc, #668]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	4aa6      	ldr	r2, [pc, #664]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003894:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a2:	4ba1      	ldr	r3, [pc, #644]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a8:	f023 0203 	bic.w	r2, r3, #3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	499d      	ldr	r1, [pc, #628]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00a      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c4:	4b98      	ldr	r3, [pc, #608]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ca:	f023 020c 	bic.w	r2, r3, #12
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4995      	ldr	r1, [pc, #596]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00a      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e6:	4b90      	ldr	r3, [pc, #576]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	498c      	ldr	r1, [pc, #560]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00a      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003908:	4b87      	ldr	r3, [pc, #540]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	4984      	ldr	r1, [pc, #528]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003918:	4313      	orrs	r3, r2
 800391a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00a      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800392a:	4b7f      	ldr	r3, [pc, #508]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	497b      	ldr	r1, [pc, #492]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393a:	4313      	orrs	r3, r2
 800393c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0320 	and.w	r3, r3, #32
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800394c:	4b76      	ldr	r3, [pc, #472]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	4973      	ldr	r1, [pc, #460]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800396e:	4b6e      	ldr	r3, [pc, #440]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003974:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	69db      	ldr	r3, [r3, #28]
 800397c:	496a      	ldr	r1, [pc, #424]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397e:	4313      	orrs	r3, r2
 8003980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00a      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003990:	4b65      	ldr	r3, [pc, #404]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
 800399e:	4962      	ldr	r1, [pc, #392]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a0:	4313      	orrs	r3, r2
 80039a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039b2:	4b5d      	ldr	r3, [pc, #372]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	4959      	ldr	r1, [pc, #356]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039d4:	4b54      	ldr	r3, [pc, #336]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039da:	f023 0203 	bic.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e2:	4951      	ldr	r1, [pc, #324]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f6:	4b4c      	ldr	r3, [pc, #304]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a04:	4948      	ldr	r1, [pc, #288]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d015      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a18:	4b43      	ldr	r3, [pc, #268]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4940      	ldr	r1, [pc, #256]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a36:	d105      	bne.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a38:	4b3b      	ldr	r3, [pc, #236]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4a3a      	ldr	r2, [pc, #232]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d015      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a50:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5e:	4932      	ldr	r1, [pc, #200]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a60:	4313      	orrs	r3, r2
 8003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a70:	4b2d      	ldr	r3, [pc, #180]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4a2c      	ldr	r2, [pc, #176]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d015      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a88:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	4924      	ldr	r1, [pc, #144]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa6:	d105      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aa8:	4b1f      	ldr	r3, [pc, #124]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ab2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d015      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	4916      	ldr	r1, [pc, #88]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003aea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d019      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003afe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b06:	4908      	ldr	r1, [pc, #32]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b16:	d109      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b18:	4b03      	ldr	r3, [pc, #12]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a02      	ldr	r2, [pc, #8]	; (8003b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b22:	60d3      	str	r3, [r2, #12]
 8003b24:	e002      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b26:	bf00      	nop
 8003b28:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	4926      	ldr	r1, [pc, #152]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b56:	d105      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b58:	4b21      	ldr	r3, [pc, #132]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a20      	ldr	r2, [pc, #128]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b62:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b70:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b7e:	4918      	ldr	r1, [pc, #96]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b90:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a12      	ldr	r2, [pc, #72]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b9a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb6:	490a      	ldr	r1, [pc, #40]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a04      	ldr	r2, [pc, #16]	; (8003be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40021000 	.word	0x40021000

08003be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e049      	b.n	8003c8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fe f9ea 	bl	8001fe4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4619      	mov	r1, r3
 8003c22:	4610      	mov	r0, r2
 8003c24:	f000 ff68 	bl	8004af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d001      	beq.n	8003cac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e04c      	b.n	8003d46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	; (8003d54 <HAL_TIM_Base_Start+0xc0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d022      	beq.n	8003d04 <HAL_TIM_Base_Start+0x70>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cc6:	d01d      	beq.n	8003d04 <HAL_TIM_Base_Start+0x70>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <HAL_TIM_Base_Start+0xc4>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d018      	beq.n	8003d04 <HAL_TIM_Base_Start+0x70>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a21      	ldr	r2, [pc, #132]	; (8003d5c <HAL_TIM_Base_Start+0xc8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d013      	beq.n	8003d04 <HAL_TIM_Base_Start+0x70>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1f      	ldr	r2, [pc, #124]	; (8003d60 <HAL_TIM_Base_Start+0xcc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_TIM_Base_Start+0x70>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1e      	ldr	r2, [pc, #120]	; (8003d64 <HAL_TIM_Base_Start+0xd0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d009      	beq.n	8003d04 <HAL_TIM_Base_Start+0x70>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1c      	ldr	r2, [pc, #112]	; (8003d68 <HAL_TIM_Base_Start+0xd4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d004      	beq.n	8003d04 <HAL_TIM_Base_Start+0x70>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1b      	ldr	r2, [pc, #108]	; (8003d6c <HAL_TIM_Base_Start+0xd8>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d115      	bne.n	8003d30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_TIM_Base_Start+0xdc>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b06      	cmp	r3, #6
 8003d14:	d015      	beq.n	8003d42 <HAL_TIM_Base_Start+0xae>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1c:	d011      	beq.n	8003d42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d2e:	e008      	b.n	8003d42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0201 	orr.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]
 8003d40:	e000      	b.n	8003d44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800
 8003d60:	40000c00 	.word	0x40000c00
 8003d64:	40013400 	.word	0x40013400
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	40015000 	.word	0x40015000
 8003d70:	00010007 	.word	0x00010007

08003d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d001      	beq.n	8003d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e054      	b.n	8003e36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2202      	movs	r2, #2
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a26      	ldr	r2, [pc, #152]	; (8003e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d022      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db6:	d01d      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a22      	ldr	r2, [pc, #136]	; (8003e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d018      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a21      	ldr	r2, [pc, #132]	; (8003e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d013      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a1f      	ldr	r2, [pc, #124]	; (8003e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d00e      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1e      	ldr	r2, [pc, #120]	; (8003e54 <HAL_TIM_Base_Start_IT+0xe0>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d009      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a1c      	ldr	r2, [pc, #112]	; (8003e58 <HAL_TIM_Base_Start_IT+0xe4>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d004      	beq.n	8003df4 <HAL_TIM_Base_Start_IT+0x80>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a1b      	ldr	r2, [pc, #108]	; (8003e5c <HAL_TIM_Base_Start_IT+0xe8>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d115      	bne.n	8003e20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_TIM_Base_Start_IT+0xec>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2b06      	cmp	r3, #6
 8003e04:	d015      	beq.n	8003e32 <HAL_TIM_Base_Start_IT+0xbe>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e0c:	d011      	beq.n	8003e32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	e008      	b.n	8003e32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	e000      	b.n	8003e34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40012c00 	.word	0x40012c00
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40000c00 	.word	0x40000c00
 8003e54:	40013400 	.word	0x40013400
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40015000 	.word	0x40015000
 8003e60:	00010007 	.word	0x00010007

08003e64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e049      	b.n	8003f0a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f841 	bl	8003f12 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	3304      	adds	r3, #4
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	4610      	mov	r0, r2
 8003ea4:	f000 fe28 	bl	8004af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f12:	b480      	push	{r7}
 8003f14:	b083      	sub	sp, #12
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
	...

08003f28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d109      	bne.n	8003f4c <HAL_TIM_PWM_Start+0x24>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e03c      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d109      	bne.n	8003f66 <HAL_TIM_PWM_Start+0x3e>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	e02f      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d109      	bne.n	8003f80 <HAL_TIM_PWM_Start+0x58>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	e022      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d109      	bne.n	8003f9a <HAL_TIM_PWM_Start+0x72>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	bf14      	ite	ne
 8003f92:	2301      	movne	r3, #1
 8003f94:	2300      	moveq	r3, #0
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	e015      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b10      	cmp	r3, #16
 8003f9e:	d109      	bne.n	8003fb4 <HAL_TIM_PWM_Start+0x8c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	bf14      	ite	ne
 8003fac:	2301      	movne	r3, #1
 8003fae:	2300      	moveq	r3, #0
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	e008      	b.n	8003fc6 <HAL_TIM_PWM_Start+0x9e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	bf14      	ite	ne
 8003fc0:	2301      	movne	r3, #1
 8003fc2:	2300      	moveq	r3, #0
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e0a6      	b.n	800411c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_PWM_Start+0xb6>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fdc:	e023      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_PWM_Start+0xc6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fec:	e01b      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_PWM_Start+0xd6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffc:	e013      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b0c      	cmp	r3, #12
 8004002:	d104      	bne.n	800400e <HAL_TIM_PWM_Start+0xe6>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800400c:	e00b      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b10      	cmp	r3, #16
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0xf6>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800401c:	e003      	b.n	8004026 <HAL_TIM_PWM_Start+0xfe>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f001 f9dc 	bl	80053ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a3a      	ldr	r2, [pc, #232]	; (8004124 <HAL_TIM_PWM_Start+0x1fc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d018      	beq.n	8004070 <HAL_TIM_PWM_Start+0x148>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a39      	ldr	r2, [pc, #228]	; (8004128 <HAL_TIM_PWM_Start+0x200>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d013      	beq.n	8004070 <HAL_TIM_PWM_Start+0x148>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a37      	ldr	r2, [pc, #220]	; (800412c <HAL_TIM_PWM_Start+0x204>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00e      	beq.n	8004070 <HAL_TIM_PWM_Start+0x148>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a36      	ldr	r2, [pc, #216]	; (8004130 <HAL_TIM_PWM_Start+0x208>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d009      	beq.n	8004070 <HAL_TIM_PWM_Start+0x148>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a34      	ldr	r2, [pc, #208]	; (8004134 <HAL_TIM_PWM_Start+0x20c>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d004      	beq.n	8004070 <HAL_TIM_PWM_Start+0x148>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a33      	ldr	r2, [pc, #204]	; (8004138 <HAL_TIM_PWM_Start+0x210>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d101      	bne.n	8004074 <HAL_TIM_PWM_Start+0x14c>
 8004070:	2301      	movs	r3, #1
 8004072:	e000      	b.n	8004076 <HAL_TIM_PWM_Start+0x14e>
 8004074:	2300      	movs	r3, #0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004088:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a25      	ldr	r2, [pc, #148]	; (8004124 <HAL_TIM_PWM_Start+0x1fc>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d022      	beq.n	80040da <HAL_TIM_PWM_Start+0x1b2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800409c:	d01d      	beq.n	80040da <HAL_TIM_PWM_Start+0x1b2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a26      	ldr	r2, [pc, #152]	; (800413c <HAL_TIM_PWM_Start+0x214>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d018      	beq.n	80040da <HAL_TIM_PWM_Start+0x1b2>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a24      	ldr	r2, [pc, #144]	; (8004140 <HAL_TIM_PWM_Start+0x218>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_TIM_PWM_Start+0x1b2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a23      	ldr	r2, [pc, #140]	; (8004144 <HAL_TIM_PWM_Start+0x21c>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00e      	beq.n	80040da <HAL_TIM_PWM_Start+0x1b2>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_TIM_PWM_Start+0x200>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_TIM_PWM_Start+0x1b2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_TIM_PWM_Start+0x204>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d004      	beq.n	80040da <HAL_TIM_PWM_Start+0x1b2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a18      	ldr	r2, [pc, #96]	; (8004138 <HAL_TIM_PWM_Start+0x210>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d115      	bne.n	8004106 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	4b19      	ldr	r3, [pc, #100]	; (8004148 <HAL_TIM_PWM_Start+0x220>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b06      	cmp	r3, #6
 80040ea:	d015      	beq.n	8004118 <HAL_TIM_PWM_Start+0x1f0>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f2:	d011      	beq.n	8004118 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f042 0201 	orr.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	e008      	b.n	8004118 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e000      	b.n	800411a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004118:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40013400 	.word	0x40013400
 800412c:	40014000 	.word	0x40014000
 8004130:	40014400 	.word	0x40014400
 8004134:	40014800 	.word	0x40014800
 8004138:	40015000 	.word	0x40015000
 800413c:	40000400 	.word	0x40000400
 8004140:	40000800 	.word	0x40000800
 8004144:	40000c00 	.word	0x40000c00
 8004148:	00010007 	.word	0x00010007

0800414c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e097      	b.n	8004290 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fd ff6f 	bl	8002058 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004190:	f023 0307 	bic.w	r3, r3, #7
 8004194:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f000 fca9 	bl	8004af8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ce:	f023 0303 	bic.w	r3, r3, #3
 80041d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	021b      	lsls	r3, r3, #8
 80041de:	4313      	orrs	r3, r2
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80041ec:	f023 030c 	bic.w	r3, r3, #12
 80041f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	4313      	orrs	r3, r2
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	4313      	orrs	r3, r2
 800420e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	011a      	lsls	r2, r3, #4
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	031b      	lsls	r3, r3, #12
 800421c:	4313      	orrs	r3, r2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800422a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004232:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	4313      	orrs	r3, r2
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2201      	movs	r2, #1
 800426a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d110      	bne.n	80042ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042c8:	7bfb      	ldrb	r3, [r7, #15]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d102      	bne.n	80042d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042ce:	7b7b      	ldrb	r3, [r7, #13]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d001      	beq.n	80042d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e069      	b.n	80043ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e8:	e031      	b.n	800434e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b04      	cmp	r3, #4
 80042ee:	d110      	bne.n	8004312 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042f0:	7bbb      	ldrb	r3, [r7, #14]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d102      	bne.n	80042fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042f6:	7b3b      	ldrb	r3, [r7, #12]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d001      	beq.n	8004300 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e055      	b.n	80043ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2202      	movs	r2, #2
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004310:	e01d      	b.n	800434e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d108      	bne.n	800432a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004318:	7bbb      	ldrb	r3, [r7, #14]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800431e:	7b7b      	ldrb	r3, [r7, #13]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d102      	bne.n	800432a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004324:	7b3b      	ldrb	r3, [r7, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d001      	beq.n	800432e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e03e      	b.n	80043ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2202      	movs	r2, #2
 8004342:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2202      	movs	r2, #2
 800434a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_TIM_Encoder_Start+0xc4>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	2b04      	cmp	r3, #4
 8004358:	d008      	beq.n	800436c <HAL_TIM_Encoder_Start+0xd4>
 800435a:	e00f      	b.n	800437c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2201      	movs	r2, #1
 8004362:	2100      	movs	r1, #0
 8004364:	4618      	mov	r0, r3
 8004366:	f001 f841 	bl	80053ec <TIM_CCxChannelCmd>
      break;
 800436a:	e016      	b.n	800439a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2201      	movs	r2, #1
 8004372:	2104      	movs	r1, #4
 8004374:	4618      	mov	r0, r3
 8004376:	f001 f839 	bl	80053ec <TIM_CCxChannelCmd>
      break;
 800437a:	e00e      	b.n	800439a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2201      	movs	r2, #1
 8004382:	2100      	movs	r1, #0
 8004384:	4618      	mov	r0, r3
 8004386:	f001 f831 	bl	80053ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2201      	movs	r2, #1
 8004390:	2104      	movs	r1, #4
 8004392:	4618      	mov	r0, r3
 8004394:	f001 f82a 	bl	80053ec <TIM_CCxChannelCmd>
      break;
 8004398:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3710      	adds	r7, #16
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d020      	beq.n	8004418 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d01b      	beq.n	8004418 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f06f 0202 	mvn.w	r2, #2
 80043e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2201      	movs	r2, #1
 80043ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	f003 0303 	and.w	r3, r3, #3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fb5c 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 8004404:	e005      	b.n	8004412 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fb4e 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fb5f 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b00      	cmp	r3, #0
 8004420:	d020      	beq.n	8004464 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d01b      	beq.n	8004464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0204 	mvn.w	r2, #4
 8004434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fb36 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fb28 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fb39 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d020      	beq.n	80044b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01b      	beq.n	80044b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f06f 0208 	mvn.w	r2, #8
 8004480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2204      	movs	r2, #4
 8004486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69db      	ldr	r3, [r3, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fb10 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 800449c:	e005      	b.n	80044aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 fb02 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 fb13 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d020      	beq.n	80044fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0310 	and.w	r3, r3, #16
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d01b      	beq.n	80044fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0210 	mvn.w	r2, #16
 80044cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2208      	movs	r2, #8
 80044d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 faea 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 80044e8:	e005      	b.n	80044f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fadc 	bl	8004aa8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f000 faed 	bl	8004ad0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00c      	beq.n	8004520 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0201 	mvn.w	r2, #1
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd fc78 	bl	8001e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004526:	2b00      	cmp	r3, #0
 8004528:	d104      	bne.n	8004534 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00c      	beq.n	800454e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f001 f8a9 	bl	80056a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00c      	beq.n	8004572 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800456a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f001 f8a1 	bl	80056b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00c      	beq.n	8004596 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800458e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 faa7 	bl	8004ae4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00c      	beq.n	80045ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d007      	beq.n	80045ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f06f 0220 	mvn.w	r2, #32
 80045b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f001 f869 	bl	800568c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00c      	beq.n	80045de <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80045d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f001 f875 	bl	80056c8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00c      	beq.n	8004602 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80045fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f001 f86d 	bl	80056dc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00c      	beq.n	8004626 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d007      	beq.n	8004626 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800461e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f001 f865 	bl	80056f0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d007      	beq.n	800464a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f001 f85d 	bl	8005704 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464a:	bf00      	nop
 800464c:	3710      	adds	r7, #16
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800466e:	2302      	movs	r3, #2
 8004670:	e0ff      	b.n	8004872 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b14      	cmp	r3, #20
 800467e:	f200 80f0 	bhi.w	8004862 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004682:	a201      	add	r2, pc, #4	; (adr r2, 8004688 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004688:	080046dd 	.word	0x080046dd
 800468c:	08004863 	.word	0x08004863
 8004690:	08004863 	.word	0x08004863
 8004694:	08004863 	.word	0x08004863
 8004698:	0800471d 	.word	0x0800471d
 800469c:	08004863 	.word	0x08004863
 80046a0:	08004863 	.word	0x08004863
 80046a4:	08004863 	.word	0x08004863
 80046a8:	0800475f 	.word	0x0800475f
 80046ac:	08004863 	.word	0x08004863
 80046b0:	08004863 	.word	0x08004863
 80046b4:	08004863 	.word	0x08004863
 80046b8:	0800479f 	.word	0x0800479f
 80046bc:	08004863 	.word	0x08004863
 80046c0:	08004863 	.word	0x08004863
 80046c4:	08004863 	.word	0x08004863
 80046c8:	080047e1 	.word	0x080047e1
 80046cc:	08004863 	.word	0x08004863
 80046d0:	08004863 	.word	0x08004863
 80046d4:	08004863 	.word	0x08004863
 80046d8:	08004821 	.word	0x08004821
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68b9      	ldr	r1, [r7, #8]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fabc 	bl	8004c60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	699a      	ldr	r2, [r3, #24]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0208 	orr.w	r2, r2, #8
 80046f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699a      	ldr	r2, [r3, #24]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6999      	ldr	r1, [r3, #24]
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	430a      	orrs	r2, r1
 8004718:	619a      	str	r2, [r3, #24]
      break;
 800471a:	e0a5      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fb36 	bl	8004d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699a      	ldr	r2, [r3, #24]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6999      	ldr	r1, [r3, #24]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	021a      	lsls	r2, r3, #8
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
      break;
 800475c:	e084      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68b9      	ldr	r1, [r7, #8]
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fba9 	bl	8004ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0208 	orr.w	r2, r2, #8
 8004778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0204 	bic.w	r2, r2, #4
 8004788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69d9      	ldr	r1, [r3, #28]
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	691a      	ldr	r2, [r3, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	61da      	str	r2, [r3, #28]
      break;
 800479c:	e064      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fc1b 	bl	8004fe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69d9      	ldr	r1, [r3, #28]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	021a      	lsls	r2, r3, #8
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	61da      	str	r2, [r3, #28]
      break;
 80047de:	e043      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68b9      	ldr	r1, [r7, #8]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f000 fc8e 	bl	8005108 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0208 	orr.w	r2, r2, #8
 80047fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f022 0204 	bic.w	r2, r2, #4
 800480a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800481e:	e023      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fcd8 	bl	80051dc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800483a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800484a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	021a      	lsls	r2, r3, #8
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004860:	e002      	b.n	8004868 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	75fb      	strb	r3, [r7, #23]
      break;
 8004866:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004870:	7dfb      	ldrb	r3, [r7, #23]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop

0800487c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_TIM_ConfigClockSource+0x1c>
 8004894:	2302      	movs	r3, #2
 8004896:	e0f6      	b.n	8004a86 <HAL_TIM_ConfigClockSource+0x20a>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80048b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80048ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a6f      	ldr	r2, [pc, #444]	; (8004a90 <HAL_TIM_ConfigClockSource+0x214>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	f000 80c1 	beq.w	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 80048d8:	4a6d      	ldr	r2, [pc, #436]	; (8004a90 <HAL_TIM_ConfigClockSource+0x214>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	f200 80c6 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 80048e0:	4a6c      	ldr	r2, [pc, #432]	; (8004a94 <HAL_TIM_ConfigClockSource+0x218>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	f000 80b9 	beq.w	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 80048e8:	4a6a      	ldr	r2, [pc, #424]	; (8004a94 <HAL_TIM_ConfigClockSource+0x218>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	f200 80be 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 80048f0:	4a69      	ldr	r2, [pc, #420]	; (8004a98 <HAL_TIM_ConfigClockSource+0x21c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	f000 80b1 	beq.w	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 80048f8:	4a67      	ldr	r2, [pc, #412]	; (8004a98 <HAL_TIM_ConfigClockSource+0x21c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	f200 80b6 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 8004900:	4a66      	ldr	r2, [pc, #408]	; (8004a9c <HAL_TIM_ConfigClockSource+0x220>)
 8004902:	4293      	cmp	r3, r2
 8004904:	f000 80a9 	beq.w	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 8004908:	4a64      	ldr	r2, [pc, #400]	; (8004a9c <HAL_TIM_ConfigClockSource+0x220>)
 800490a:	4293      	cmp	r3, r2
 800490c:	f200 80ae 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 8004910:	4a63      	ldr	r2, [pc, #396]	; (8004aa0 <HAL_TIM_ConfigClockSource+0x224>)
 8004912:	4293      	cmp	r3, r2
 8004914:	f000 80a1 	beq.w	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 8004918:	4a61      	ldr	r2, [pc, #388]	; (8004aa0 <HAL_TIM_ConfigClockSource+0x224>)
 800491a:	4293      	cmp	r3, r2
 800491c:	f200 80a6 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 8004920:	4a60      	ldr	r2, [pc, #384]	; (8004aa4 <HAL_TIM_ConfigClockSource+0x228>)
 8004922:	4293      	cmp	r3, r2
 8004924:	f000 8099 	beq.w	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 8004928:	4a5e      	ldr	r2, [pc, #376]	; (8004aa4 <HAL_TIM_ConfigClockSource+0x228>)
 800492a:	4293      	cmp	r3, r2
 800492c:	f200 809e 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 8004930:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004934:	f000 8091 	beq.w	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 8004938:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800493c:	f200 8096 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 8004940:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004944:	f000 8089 	beq.w	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 8004948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800494c:	f200 808e 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004954:	d03e      	beq.n	80049d4 <HAL_TIM_ConfigClockSource+0x158>
 8004956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495a:	f200 8087 	bhi.w	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 800495e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004962:	f000 8086 	beq.w	8004a72 <HAL_TIM_ConfigClockSource+0x1f6>
 8004966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800496a:	d87f      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 800496c:	2b70      	cmp	r3, #112	; 0x70
 800496e:	d01a      	beq.n	80049a6 <HAL_TIM_ConfigClockSource+0x12a>
 8004970:	2b70      	cmp	r3, #112	; 0x70
 8004972:	d87b      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 8004974:	2b60      	cmp	r3, #96	; 0x60
 8004976:	d050      	beq.n	8004a1a <HAL_TIM_ConfigClockSource+0x19e>
 8004978:	2b60      	cmp	r3, #96	; 0x60
 800497a:	d877      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 800497c:	2b50      	cmp	r3, #80	; 0x50
 800497e:	d03c      	beq.n	80049fa <HAL_TIM_ConfigClockSource+0x17e>
 8004980:	2b50      	cmp	r3, #80	; 0x50
 8004982:	d873      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d058      	beq.n	8004a3a <HAL_TIM_ConfigClockSource+0x1be>
 8004988:	2b40      	cmp	r3, #64	; 0x40
 800498a:	d86f      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 800498c:	2b30      	cmp	r3, #48	; 0x30
 800498e:	d064      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 8004990:	2b30      	cmp	r3, #48	; 0x30
 8004992:	d86b      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d060      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d867      	bhi.n	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d05c      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 80049a0:	2b10      	cmp	r3, #16
 80049a2:	d05a      	beq.n	8004a5a <HAL_TIM_ConfigClockSource+0x1de>
 80049a4:	e062      	b.n	8004a6c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049b6:	f000 fcf9 	bl	80053ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68ba      	ldr	r2, [r7, #8]
 80049d0:	609a      	str	r2, [r3, #8]
      break;
 80049d2:	e04f      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049e4:	f000 fce2 	bl	80053ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689a      	ldr	r2, [r3, #8]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049f6:	609a      	str	r2, [r3, #8]
      break;
 80049f8:	e03c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a06:	461a      	mov	r2, r3
 8004a08:	f000 fc54 	bl	80052b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2150      	movs	r1, #80	; 0x50
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fcad 	bl	8005372 <TIM_ITRx_SetConfig>
      break;
 8004a18:	e02c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a26:	461a      	mov	r2, r3
 8004a28:	f000 fc73 	bl	8005312 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2160      	movs	r1, #96	; 0x60
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fc9d 	bl	8005372 <TIM_ITRx_SetConfig>
      break;
 8004a38:	e01c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a46:	461a      	mov	r2, r3
 8004a48:	f000 fc34 	bl	80052b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2140      	movs	r1, #64	; 0x40
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fc8d 	bl	8005372 <TIM_ITRx_SetConfig>
      break;
 8004a58:	e00c      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	4610      	mov	r0, r2
 8004a66:	f000 fc84 	bl	8005372 <TIM_ITRx_SetConfig>
      break;
 8004a6a:	e003      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a70:	e000      	b.n	8004a74 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	00100070 	.word	0x00100070
 8004a94:	00100060 	.word	0x00100060
 8004a98:	00100050 	.word	0x00100050
 8004a9c:	00100040 	.word	0x00100040
 8004aa0:	00100030 	.word	0x00100030
 8004aa4:	00100020 	.word	0x00100020

08004aa8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	4a4c      	ldr	r2, [pc, #304]	; (8004c3c <TIM_Base_SetConfig+0x144>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d017      	beq.n	8004b40 <TIM_Base_SetConfig+0x48>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b16:	d013      	beq.n	8004b40 <TIM_Base_SetConfig+0x48>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a49      	ldr	r2, [pc, #292]	; (8004c40 <TIM_Base_SetConfig+0x148>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d00f      	beq.n	8004b40 <TIM_Base_SetConfig+0x48>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	4a48      	ldr	r2, [pc, #288]	; (8004c44 <TIM_Base_SetConfig+0x14c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d00b      	beq.n	8004b40 <TIM_Base_SetConfig+0x48>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a47      	ldr	r2, [pc, #284]	; (8004c48 <TIM_Base_SetConfig+0x150>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d007      	beq.n	8004b40 <TIM_Base_SetConfig+0x48>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a46      	ldr	r2, [pc, #280]	; (8004c4c <TIM_Base_SetConfig+0x154>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d003      	beq.n	8004b40 <TIM_Base_SetConfig+0x48>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a45      	ldr	r2, [pc, #276]	; (8004c50 <TIM_Base_SetConfig+0x158>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d108      	bne.n	8004b52 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	68fa      	ldr	r2, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a39      	ldr	r2, [pc, #228]	; (8004c3c <TIM_Base_SetConfig+0x144>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d023      	beq.n	8004ba2 <TIM_Base_SetConfig+0xaa>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b60:	d01f      	beq.n	8004ba2 <TIM_Base_SetConfig+0xaa>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a36      	ldr	r2, [pc, #216]	; (8004c40 <TIM_Base_SetConfig+0x148>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d01b      	beq.n	8004ba2 <TIM_Base_SetConfig+0xaa>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a35      	ldr	r2, [pc, #212]	; (8004c44 <TIM_Base_SetConfig+0x14c>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d017      	beq.n	8004ba2 <TIM_Base_SetConfig+0xaa>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a34      	ldr	r2, [pc, #208]	; (8004c48 <TIM_Base_SetConfig+0x150>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d013      	beq.n	8004ba2 <TIM_Base_SetConfig+0xaa>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a33      	ldr	r2, [pc, #204]	; (8004c4c <TIM_Base_SetConfig+0x154>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d00f      	beq.n	8004ba2 <TIM_Base_SetConfig+0xaa>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a33      	ldr	r2, [pc, #204]	; (8004c54 <TIM_Base_SetConfig+0x15c>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00b      	beq.n	8004ba2 <TIM_Base_SetConfig+0xaa>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a32      	ldr	r2, [pc, #200]	; (8004c58 <TIM_Base_SetConfig+0x160>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d007      	beq.n	8004ba2 <TIM_Base_SetConfig+0xaa>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a31      	ldr	r2, [pc, #196]	; (8004c5c <TIM_Base_SetConfig+0x164>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d003      	beq.n	8004ba2 <TIM_Base_SetConfig+0xaa>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a2c      	ldr	r2, [pc, #176]	; (8004c50 <TIM_Base_SetConfig+0x158>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d108      	bne.n	8004bb4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ba8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <TIM_Base_SetConfig+0x144>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d013      	beq.n	8004c08 <TIM_Base_SetConfig+0x110>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a1a      	ldr	r2, [pc, #104]	; (8004c4c <TIM_Base_SetConfig+0x154>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d00f      	beq.n	8004c08 <TIM_Base_SetConfig+0x110>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a1a      	ldr	r2, [pc, #104]	; (8004c54 <TIM_Base_SetConfig+0x15c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00b      	beq.n	8004c08 <TIM_Base_SetConfig+0x110>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <TIM_Base_SetConfig+0x160>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d007      	beq.n	8004c08 <TIM_Base_SetConfig+0x110>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <TIM_Base_SetConfig+0x164>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d003      	beq.n	8004c08 <TIM_Base_SetConfig+0x110>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a13      	ldr	r2, [pc, #76]	; (8004c50 <TIM_Base_SetConfig+0x158>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d103      	bne.n	8004c10 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	691a      	ldr	r2, [r3, #16]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d105      	bne.n	8004c2e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	f023 0201 	bic.w	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	611a      	str	r2, [r3, #16]
  }
}
 8004c2e:	bf00      	nop
 8004c30:	3714      	adds	r7, #20
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40012c00 	.word	0x40012c00
 8004c40:	40000400 	.word	0x40000400
 8004c44:	40000800 	.word	0x40000800
 8004c48:	40000c00 	.word	0x40000c00
 8004c4c:	40013400 	.word	0x40013400
 8004c50:	40015000 	.word	0x40015000
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800

08004c60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	f023 0201 	bic.w	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 0302 	bic.w	r3, r3, #2
 8004cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a30      	ldr	r2, [pc, #192]	; (8004d7c <TIM_OC1_SetConfig+0x11c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d013      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x88>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a2f      	ldr	r2, [pc, #188]	; (8004d80 <TIM_OC1_SetConfig+0x120>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d00f      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x88>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a2e      	ldr	r2, [pc, #184]	; (8004d84 <TIM_OC1_SetConfig+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00b      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x88>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a2d      	ldr	r2, [pc, #180]	; (8004d88 <TIM_OC1_SetConfig+0x128>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d007      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x88>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a2c      	ldr	r2, [pc, #176]	; (8004d8c <TIM_OC1_SetConfig+0x12c>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d003      	beq.n	8004ce8 <TIM_OC1_SetConfig+0x88>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a2b      	ldr	r2, [pc, #172]	; (8004d90 <TIM_OC1_SetConfig+0x130>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d10c      	bne.n	8004d02 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0308 	bic.w	r3, r3, #8
 8004cee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f023 0304 	bic.w	r3, r3, #4
 8004d00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <TIM_OC1_SetConfig+0x11c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d013      	beq.n	8004d32 <TIM_OC1_SetConfig+0xd2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <TIM_OC1_SetConfig+0x120>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00f      	beq.n	8004d32 <TIM_OC1_SetConfig+0xd2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a1b      	ldr	r2, [pc, #108]	; (8004d84 <TIM_OC1_SetConfig+0x124>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00b      	beq.n	8004d32 <TIM_OC1_SetConfig+0xd2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <TIM_OC1_SetConfig+0x128>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d007      	beq.n	8004d32 <TIM_OC1_SetConfig+0xd2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a19      	ldr	r2, [pc, #100]	; (8004d8c <TIM_OC1_SetConfig+0x12c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d003      	beq.n	8004d32 <TIM_OC1_SetConfig+0xd2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a18      	ldr	r2, [pc, #96]	; (8004d90 <TIM_OC1_SetConfig+0x130>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d111      	bne.n	8004d56 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	699b      	ldr	r3, [r3, #24]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40013400 	.word	0x40013400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800
 8004d90:	40015000 	.word	0x40015000

08004d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a1b      	ldr	r3, [r3, #32]
 8004da8:	f023 0210 	bic.w	r2, r3, #16
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	021b      	lsls	r3, r3, #8
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	f023 0320 	bic.w	r3, r3, #32
 8004de2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a2c      	ldr	r2, [pc, #176]	; (8004ea4 <TIM_OC2_SetConfig+0x110>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d007      	beq.n	8004e08 <TIM_OC2_SetConfig+0x74>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a2b      	ldr	r2, [pc, #172]	; (8004ea8 <TIM_OC2_SetConfig+0x114>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d003      	beq.n	8004e08 <TIM_OC2_SetConfig+0x74>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a2a      	ldr	r2, [pc, #168]	; (8004eac <TIM_OC2_SetConfig+0x118>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d10d      	bne.n	8004e24 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	011b      	lsls	r3, r3, #4
 8004e16:	697a      	ldr	r2, [r7, #20]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e22:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <TIM_OC2_SetConfig+0x110>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d013      	beq.n	8004e54 <TIM_OC2_SetConfig+0xc0>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <TIM_OC2_SetConfig+0x114>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d00f      	beq.n	8004e54 <TIM_OC2_SetConfig+0xc0>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a1e      	ldr	r2, [pc, #120]	; (8004eb0 <TIM_OC2_SetConfig+0x11c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <TIM_OC2_SetConfig+0xc0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a1d      	ldr	r2, [pc, #116]	; (8004eb4 <TIM_OC2_SetConfig+0x120>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d007      	beq.n	8004e54 <TIM_OC2_SetConfig+0xc0>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a1c      	ldr	r2, [pc, #112]	; (8004eb8 <TIM_OC2_SetConfig+0x124>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_OC2_SetConfig+0xc0>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a17      	ldr	r2, [pc, #92]	; (8004eac <TIM_OC2_SetConfig+0x118>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d113      	bne.n	8004e7c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	621a      	str	r2, [r3, #32]
}
 8004e96:	bf00      	nop
 8004e98:	371c      	adds	r7, #28
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40012c00 	.word	0x40012c00
 8004ea8:	40013400 	.word	0x40013400
 8004eac:	40015000 	.word	0x40015000
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800

08004ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0303 	bic.w	r3, r3, #3
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <TIM_OC3_SetConfig+0x10c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d007      	beq.n	8004f2e <TIM_OC3_SetConfig+0x72>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <TIM_OC3_SetConfig+0x110>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_OC3_SetConfig+0x72>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a29      	ldr	r2, [pc, #164]	; (8004fd0 <TIM_OC3_SetConfig+0x114>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d10d      	bne.n	8004f4a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <TIM_OC3_SetConfig+0x10c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <TIM_OC3_SetConfig+0xbe>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <TIM_OC3_SetConfig+0x110>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_OC3_SetConfig+0xbe>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1d      	ldr	r2, [pc, #116]	; (8004fd4 <TIM_OC3_SetConfig+0x118>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_OC3_SetConfig+0xbe>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1c      	ldr	r2, [pc, #112]	; (8004fd8 <TIM_OC3_SetConfig+0x11c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_OC3_SetConfig+0xbe>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1b      	ldr	r2, [pc, #108]	; (8004fdc <TIM_OC3_SetConfig+0x120>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_OC3_SetConfig+0xbe>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a16      	ldr	r2, [pc, #88]	; (8004fd0 <TIM_OC3_SetConfig+0x114>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d113      	bne.n	8004fa2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	011b      	lsls	r3, r3, #4
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40015000 	.word	0x40015000
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400
 8004fdc:	40014800 	.word	0x40014800

08004fe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
 8004ff4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800500e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800502e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	031b      	lsls	r3, r3, #12
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a2c      	ldr	r2, [pc, #176]	; (80050f0 <TIM_OC4_SetConfig+0x110>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d007      	beq.n	8005054 <TIM_OC4_SetConfig+0x74>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a2b      	ldr	r2, [pc, #172]	; (80050f4 <TIM_OC4_SetConfig+0x114>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d003      	beq.n	8005054 <TIM_OC4_SetConfig+0x74>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a2a      	ldr	r2, [pc, #168]	; (80050f8 <TIM_OC4_SetConfig+0x118>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d10d      	bne.n	8005070 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800505a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	031b      	lsls	r3, r3, #12
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	4313      	orrs	r3, r2
 8005066:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800506e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a1f      	ldr	r2, [pc, #124]	; (80050f0 <TIM_OC4_SetConfig+0x110>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <TIM_OC4_SetConfig+0xc0>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <TIM_OC4_SetConfig+0x114>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00f      	beq.n	80050a0 <TIM_OC4_SetConfig+0xc0>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a1e      	ldr	r2, [pc, #120]	; (80050fc <TIM_OC4_SetConfig+0x11c>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d00b      	beq.n	80050a0 <TIM_OC4_SetConfig+0xc0>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a1d      	ldr	r2, [pc, #116]	; (8005100 <TIM_OC4_SetConfig+0x120>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d007      	beq.n	80050a0 <TIM_OC4_SetConfig+0xc0>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a1c      	ldr	r2, [pc, #112]	; (8005104 <TIM_OC4_SetConfig+0x124>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC4_SetConfig+0xc0>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a17      	ldr	r2, [pc, #92]	; (80050f8 <TIM_OC4_SetConfig+0x118>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d113      	bne.n	80050c8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	019b      	lsls	r3, r3, #6
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	019b      	lsls	r3, r3, #6
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40012c00 	.word	0x40012c00
 80050f4:	40013400 	.word	0x40013400
 80050f8:	40015000 	.word	0x40015000
 80050fc:	40014000 	.word	0x40014000
 8005100:	40014400 	.word	0x40014400
 8005104:	40014800 	.word	0x40014800

08005108 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800512e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68fa      	ldr	r2, [r7, #12]
 8005142:	4313      	orrs	r3, r2
 8005144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800514c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	041b      	lsls	r3, r3, #16
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a19      	ldr	r2, [pc, #100]	; (80051c4 <TIM_OC5_SetConfig+0xbc>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d013      	beq.n	800518a <TIM_OC5_SetConfig+0x82>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a18      	ldr	r2, [pc, #96]	; (80051c8 <TIM_OC5_SetConfig+0xc0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00f      	beq.n	800518a <TIM_OC5_SetConfig+0x82>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a17      	ldr	r2, [pc, #92]	; (80051cc <TIM_OC5_SetConfig+0xc4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d00b      	beq.n	800518a <TIM_OC5_SetConfig+0x82>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a16      	ldr	r2, [pc, #88]	; (80051d0 <TIM_OC5_SetConfig+0xc8>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d007      	beq.n	800518a <TIM_OC5_SetConfig+0x82>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <TIM_OC5_SetConfig+0xcc>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_OC5_SetConfig+0x82>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <TIM_OC5_SetConfig+0xd0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d109      	bne.n	800519e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005190:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	695b      	ldr	r3, [r3, #20]
 8005196:	021b      	lsls	r3, r3, #8
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685a      	ldr	r2, [r3, #4]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	621a      	str	r2, [r3, #32]
}
 80051b8:	bf00      	nop
 80051ba:	371c      	adds	r7, #28
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr
 80051c4:	40012c00 	.word	0x40012c00
 80051c8:	40013400 	.word	0x40013400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	40014400 	.word	0x40014400
 80051d4:	40014800 	.word	0x40014800
 80051d8:	40015000 	.word	0x40015000

080051dc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	021b      	lsls	r3, r3, #8
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	4313      	orrs	r3, r2
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005222:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	051b      	lsls	r3, r3, #20
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1a      	ldr	r2, [pc, #104]	; (800529c <TIM_OC6_SetConfig+0xc0>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d013      	beq.n	8005260 <TIM_OC6_SetConfig+0x84>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <TIM_OC6_SetConfig+0xc4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d00f      	beq.n	8005260 <TIM_OC6_SetConfig+0x84>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <TIM_OC6_SetConfig+0xc8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d00b      	beq.n	8005260 <TIM_OC6_SetConfig+0x84>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <TIM_OC6_SetConfig+0xcc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d007      	beq.n	8005260 <TIM_OC6_SetConfig+0x84>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a16      	ldr	r2, [pc, #88]	; (80052ac <TIM_OC6_SetConfig+0xd0>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d003      	beq.n	8005260 <TIM_OC6_SetConfig+0x84>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a15      	ldr	r2, [pc, #84]	; (80052b0 <TIM_OC6_SetConfig+0xd4>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d109      	bne.n	8005274 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005266:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	029b      	lsls	r3, r3, #10
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800
 80052b0:	40015000 	.word	0x40015000

080052b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	f023 0201 	bic.w	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	699b      	ldr	r3, [r3, #24]
 80052d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f023 030a 	bic.w	r3, r3, #10
 80052f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	621a      	str	r2, [r3, #32]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr

08005312 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005312:	b480      	push	{r7}
 8005314:	b087      	sub	sp, #28
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a1b      	ldr	r3, [r3, #32]
 8005328:	f023 0210 	bic.w	r2, r3, #16
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800533c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	031b      	lsls	r3, r3, #12
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800534e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	011b      	lsls	r3, r3, #4
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005372:	b480      	push	{r7}
 8005374:	b085      	sub	sp, #20
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	f043 0307 	orr.w	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	609a      	str	r2, [r3, #8]
}
 80053a0:	bf00      	nop
 80053a2:	3714      	adds	r7, #20
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b087      	sub	sp, #28
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	021a      	lsls	r2, r3, #8
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	431a      	orrs	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2201      	movs	r2, #1
 8005400:	fa02 f303 	lsl.w	r3, r2, r3
 8005404:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1a      	ldr	r2, [r3, #32]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	43db      	mvns	r3, r3
 800540e:	401a      	ands	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a1a      	ldr	r2, [r3, #32]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f003 031f 	and.w	r3, r3, #31
 800541e:	6879      	ldr	r1, [r7, #4]
 8005420:	fa01 f303 	lsl.w	r3, r1, r3
 8005424:	431a      	orrs	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]
}
 800542a:	bf00      	nop
 800542c:	371c      	adds	r7, #28
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
	...

08005438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800544c:	2302      	movs	r3, #2
 800544e:	e074      	b.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a34      	ldr	r2, [pc, #208]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d009      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a33      	ldr	r2, [pc, #204]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d004      	beq.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a31      	ldr	r2, [pc, #196]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d108      	bne.n	80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005494:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	4313      	orrs	r3, r2
 800549e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80054a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a21      	ldr	r2, [pc, #132]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d022      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054d0:	d01d      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1f      	ldr	r2, [pc, #124]	; (8005554 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d018      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d013      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1c      	ldr	r2, [pc, #112]	; (800555c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a15      	ldr	r2, [pc, #84]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d009      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a18      	ldr	r2, [pc, #96]	; (8005560 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a11      	ldr	r2, [pc, #68]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d10c      	bne.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4313      	orrs	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40013400 	.word	0x40013400
 8005550:	40015000 	.word	0x40015000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40014000 	.word	0x40014000

08005564 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800557c:	2302      	movs	r3, #2
 800557e:	e078      	b.n	8005672 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4313      	orrs	r3, r2
 80055be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	4313      	orrs	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a1c      	ldr	r2, [pc, #112]	; (8005680 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a1b      	ldr	r2, [pc, #108]	; (8005684 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a19      	ldr	r2, [pc, #100]	; (8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d11c      	bne.n	8005660 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005630:	051b      	lsls	r3, r3, #20
 8005632:	4313      	orrs	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564e:	4313      	orrs	r3, r2
 8005650:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40013400 	.word	0x40013400
 8005688:	40015000 	.word	0x40015000

0800568c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e042      	b.n	80057b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	2b00      	cmp	r3, #0
 8005732:	d106      	bne.n	8005742 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f7fc fbb9 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2224      	movs	r2, #36	; 0x24
 8005746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0201 	bic.w	r2, r2, #1
 8005758:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 fb24 	bl	8005db0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f825 	bl	80057b8 <UART_SetConfig>
 800576e:	4603      	mov	r3, r0
 8005770:	2b01      	cmp	r3, #1
 8005772:	d101      	bne.n	8005778 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	e01b      	b.n	80057b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	685a      	ldr	r2, [r3, #4]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005786:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005796:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 fba3 	bl	8005ef4 <UART_CheckIdleState>
 80057ae:	4603      	mov	r3, r0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80057b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057bc:	b08c      	sub	sp, #48	; 0x30
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	689a      	ldr	r2, [r3, #8]
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	69db      	ldr	r3, [r3, #28]
 80057dc:	4313      	orrs	r3, r2
 80057de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	4baa      	ldr	r3, [pc, #680]	; (8005a90 <UART_SetConfig+0x2d8>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	6812      	ldr	r2, [r2, #0]
 80057ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f0:	430b      	orrs	r3, r1
 80057f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	699b      	ldr	r3, [r3, #24]
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a9f      	ldr	r2, [pc, #636]	; (8005a94 <UART_SetConfig+0x2dc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d004      	beq.n	8005824 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005820:	4313      	orrs	r3, r2
 8005822:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800582e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	6812      	ldr	r2, [r2, #0]
 8005836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005838:	430b      	orrs	r3, r1
 800583a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	f023 010f 	bic.w	r1, r3, #15
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	430a      	orrs	r2, r1
 8005850:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a90      	ldr	r2, [pc, #576]	; (8005a98 <UART_SetConfig+0x2e0>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d125      	bne.n	80058a8 <UART_SetConfig+0xf0>
 800585c:	4b8f      	ldr	r3, [pc, #572]	; (8005a9c <UART_SetConfig+0x2e4>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	f003 0303 	and.w	r3, r3, #3
 8005866:	2b03      	cmp	r3, #3
 8005868:	d81a      	bhi.n	80058a0 <UART_SetConfig+0xe8>
 800586a:	a201      	add	r2, pc, #4	; (adr r2, 8005870 <UART_SetConfig+0xb8>)
 800586c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005870:	08005881 	.word	0x08005881
 8005874:	08005891 	.word	0x08005891
 8005878:	08005889 	.word	0x08005889
 800587c:	08005899 	.word	0x08005899
 8005880:	2301      	movs	r3, #1
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005886:	e116      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005888:	2302      	movs	r3, #2
 800588a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800588e:	e112      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005890:	2304      	movs	r3, #4
 8005892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005896:	e10e      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005898:	2308      	movs	r3, #8
 800589a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800589e:	e10a      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 80058a0:	2310      	movs	r3, #16
 80058a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058a6:	e106      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a7c      	ldr	r2, [pc, #496]	; (8005aa0 <UART_SetConfig+0x2e8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d138      	bne.n	8005924 <UART_SetConfig+0x16c>
 80058b2:	4b7a      	ldr	r3, [pc, #488]	; (8005a9c <UART_SetConfig+0x2e4>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f003 030c 	and.w	r3, r3, #12
 80058bc:	2b0c      	cmp	r3, #12
 80058be:	d82d      	bhi.n	800591c <UART_SetConfig+0x164>
 80058c0:	a201      	add	r2, pc, #4	; (adr r2, 80058c8 <UART_SetConfig+0x110>)
 80058c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c6:	bf00      	nop
 80058c8:	080058fd 	.word	0x080058fd
 80058cc:	0800591d 	.word	0x0800591d
 80058d0:	0800591d 	.word	0x0800591d
 80058d4:	0800591d 	.word	0x0800591d
 80058d8:	0800590d 	.word	0x0800590d
 80058dc:	0800591d 	.word	0x0800591d
 80058e0:	0800591d 	.word	0x0800591d
 80058e4:	0800591d 	.word	0x0800591d
 80058e8:	08005905 	.word	0x08005905
 80058ec:	0800591d 	.word	0x0800591d
 80058f0:	0800591d 	.word	0x0800591d
 80058f4:	0800591d 	.word	0x0800591d
 80058f8:	08005915 	.word	0x08005915
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005902:	e0d8      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005904:	2302      	movs	r3, #2
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590a:	e0d4      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005912:	e0d0      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591a:	e0cc      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005922:	e0c8      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a5e      	ldr	r2, [pc, #376]	; (8005aa4 <UART_SetConfig+0x2ec>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d125      	bne.n	800597a <UART_SetConfig+0x1c2>
 800592e:	4b5b      	ldr	r3, [pc, #364]	; (8005a9c <UART_SetConfig+0x2e4>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005938:	2b30      	cmp	r3, #48	; 0x30
 800593a:	d016      	beq.n	800596a <UART_SetConfig+0x1b2>
 800593c:	2b30      	cmp	r3, #48	; 0x30
 800593e:	d818      	bhi.n	8005972 <UART_SetConfig+0x1ba>
 8005940:	2b20      	cmp	r3, #32
 8005942:	d00a      	beq.n	800595a <UART_SetConfig+0x1a2>
 8005944:	2b20      	cmp	r3, #32
 8005946:	d814      	bhi.n	8005972 <UART_SetConfig+0x1ba>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d002      	beq.n	8005952 <UART_SetConfig+0x19a>
 800594c:	2b10      	cmp	r3, #16
 800594e:	d008      	beq.n	8005962 <UART_SetConfig+0x1aa>
 8005950:	e00f      	b.n	8005972 <UART_SetConfig+0x1ba>
 8005952:	2300      	movs	r3, #0
 8005954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005958:	e0ad      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 800595a:	2302      	movs	r3, #2
 800595c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005960:	e0a9      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005962:	2304      	movs	r3, #4
 8005964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005968:	e0a5      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 800596a:	2308      	movs	r3, #8
 800596c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005970:	e0a1      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005972:	2310      	movs	r3, #16
 8005974:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005978:	e09d      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a4a      	ldr	r2, [pc, #296]	; (8005aa8 <UART_SetConfig+0x2f0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d125      	bne.n	80059d0 <UART_SetConfig+0x218>
 8005984:	4b45      	ldr	r3, [pc, #276]	; (8005a9c <UART_SetConfig+0x2e4>)
 8005986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800598e:	2bc0      	cmp	r3, #192	; 0xc0
 8005990:	d016      	beq.n	80059c0 <UART_SetConfig+0x208>
 8005992:	2bc0      	cmp	r3, #192	; 0xc0
 8005994:	d818      	bhi.n	80059c8 <UART_SetConfig+0x210>
 8005996:	2b80      	cmp	r3, #128	; 0x80
 8005998:	d00a      	beq.n	80059b0 <UART_SetConfig+0x1f8>
 800599a:	2b80      	cmp	r3, #128	; 0x80
 800599c:	d814      	bhi.n	80059c8 <UART_SetConfig+0x210>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <UART_SetConfig+0x1f0>
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d008      	beq.n	80059b8 <UART_SetConfig+0x200>
 80059a6:	e00f      	b.n	80059c8 <UART_SetConfig+0x210>
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ae:	e082      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 80059b0:	2302      	movs	r3, #2
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059b6:	e07e      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 80059b8:	2304      	movs	r3, #4
 80059ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059be:	e07a      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 80059c0:	2308      	movs	r3, #8
 80059c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c6:	e076      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ce:	e072      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a35      	ldr	r2, [pc, #212]	; (8005aac <UART_SetConfig+0x2f4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d12a      	bne.n	8005a30 <UART_SetConfig+0x278>
 80059da:	4b30      	ldr	r3, [pc, #192]	; (8005a9c <UART_SetConfig+0x2e4>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059e8:	d01a      	beq.n	8005a20 <UART_SetConfig+0x268>
 80059ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059ee:	d81b      	bhi.n	8005a28 <UART_SetConfig+0x270>
 80059f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059f4:	d00c      	beq.n	8005a10 <UART_SetConfig+0x258>
 80059f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059fa:	d815      	bhi.n	8005a28 <UART_SetConfig+0x270>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d003      	beq.n	8005a08 <UART_SetConfig+0x250>
 8005a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a04:	d008      	beq.n	8005a18 <UART_SetConfig+0x260>
 8005a06:	e00f      	b.n	8005a28 <UART_SetConfig+0x270>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a0e:	e052      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a10:	2302      	movs	r3, #2
 8005a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a16:	e04e      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a18:	2304      	movs	r3, #4
 8005a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a1e:	e04a      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a20:	2308      	movs	r3, #8
 8005a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a26:	e046      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a28:	2310      	movs	r3, #16
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2e:	e042      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <UART_SetConfig+0x2dc>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d13a      	bne.n	8005ab0 <UART_SetConfig+0x2f8>
 8005a3a:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <UART_SetConfig+0x2e4>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a48:	d01a      	beq.n	8005a80 <UART_SetConfig+0x2c8>
 8005a4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a4e:	d81b      	bhi.n	8005a88 <UART_SetConfig+0x2d0>
 8005a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a54:	d00c      	beq.n	8005a70 <UART_SetConfig+0x2b8>
 8005a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a5a:	d815      	bhi.n	8005a88 <UART_SetConfig+0x2d0>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <UART_SetConfig+0x2b0>
 8005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a64:	d008      	beq.n	8005a78 <UART_SetConfig+0x2c0>
 8005a66:	e00f      	b.n	8005a88 <UART_SetConfig+0x2d0>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a6e:	e022      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a70:	2302      	movs	r3, #2
 8005a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a76:	e01e      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a78:	2304      	movs	r3, #4
 8005a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a7e:	e01a      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a80:	2308      	movs	r3, #8
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a86:	e016      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a88:	2310      	movs	r3, #16
 8005a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a8e:	e012      	b.n	8005ab6 <UART_SetConfig+0x2fe>
 8005a90:	cfff69f3 	.word	0xcfff69f3
 8005a94:	40008000 	.word	0x40008000
 8005a98:	40013800 	.word	0x40013800
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	40004400 	.word	0x40004400
 8005aa4:	40004800 	.word	0x40004800
 8005aa8:	40004c00 	.word	0x40004c00
 8005aac:	40005000 	.word	0x40005000
 8005ab0:	2310      	movs	r3, #16
 8005ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4aae      	ldr	r2, [pc, #696]	; (8005d74 <UART_SetConfig+0x5bc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	f040 8097 	bne.w	8005bf0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ac2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d823      	bhi.n	8005b12 <UART_SetConfig+0x35a>
 8005aca:	a201      	add	r2, pc, #4	; (adr r2, 8005ad0 <UART_SetConfig+0x318>)
 8005acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad0:	08005af5 	.word	0x08005af5
 8005ad4:	08005b13 	.word	0x08005b13
 8005ad8:	08005afd 	.word	0x08005afd
 8005adc:	08005b13 	.word	0x08005b13
 8005ae0:	08005b03 	.word	0x08005b03
 8005ae4:	08005b13 	.word	0x08005b13
 8005ae8:	08005b13 	.word	0x08005b13
 8005aec:	08005b13 	.word	0x08005b13
 8005af0:	08005b0b 	.word	0x08005b0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005af4:	f7fd fd84 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8005af8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005afa:	e010      	b.n	8005b1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005afc:	4b9e      	ldr	r3, [pc, #632]	; (8005d78 <UART_SetConfig+0x5c0>)
 8005afe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b00:	e00d      	b.n	8005b1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b02:	f7fd fd0f 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 8005b06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b08:	e009      	b.n	8005b1e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b10:	e005      	b.n	8005b1e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b1c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 8130 	beq.w	8005d86 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2a:	4a94      	ldr	r2, [pc, #592]	; (8005d7c <UART_SetConfig+0x5c4>)
 8005b2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	4413      	add	r3, r2
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d305      	bcc.n	8005b56 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d903      	bls.n	8005b5e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b5c:	e113      	b.n	8005d86 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	2200      	movs	r2, #0
 8005b62:	60bb      	str	r3, [r7, #8]
 8005b64:	60fa      	str	r2, [r7, #12]
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6a:	4a84      	ldr	r2, [pc, #528]	; (8005d7c <UART_SetConfig+0x5c4>)
 8005b6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2200      	movs	r2, #0
 8005b74:	603b      	str	r3, [r7, #0]
 8005b76:	607a      	str	r2, [r7, #4]
 8005b78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b7c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005b80:	f7fb f88a 	bl	8000c98 <__aeabi_uldivmod>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4610      	mov	r0, r2
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	f04f 0200 	mov.w	r2, #0
 8005b90:	f04f 0300 	mov.w	r3, #0
 8005b94:	020b      	lsls	r3, r1, #8
 8005b96:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b9a:	0202      	lsls	r2, r0, #8
 8005b9c:	6979      	ldr	r1, [r7, #20]
 8005b9e:	6849      	ldr	r1, [r1, #4]
 8005ba0:	0849      	lsrs	r1, r1, #1
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	4605      	mov	r5, r0
 8005ba8:	eb12 0804 	adds.w	r8, r2, r4
 8005bac:	eb43 0905 	adc.w	r9, r3, r5
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	469a      	mov	sl, r3
 8005bb8:	4693      	mov	fp, r2
 8005bba:	4652      	mov	r2, sl
 8005bbc:	465b      	mov	r3, fp
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	f7fb f869 	bl	8000c98 <__aeabi_uldivmod>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4613      	mov	r3, r2
 8005bcc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005bd4:	d308      	bcc.n	8005be8 <UART_SetConfig+0x430>
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bdc:	d204      	bcs.n	8005be8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a3a      	ldr	r2, [r7, #32]
 8005be4:	60da      	str	r2, [r3, #12]
 8005be6:	e0ce      	b.n	8005d86 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bee:	e0ca      	b.n	8005d86 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bf8:	d166      	bne.n	8005cc8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005bfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d827      	bhi.n	8005c52 <UART_SetConfig+0x49a>
 8005c02:	a201      	add	r2, pc, #4	; (adr r2, 8005c08 <UART_SetConfig+0x450>)
 8005c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c08:	08005c2d 	.word	0x08005c2d
 8005c0c:	08005c35 	.word	0x08005c35
 8005c10:	08005c3d 	.word	0x08005c3d
 8005c14:	08005c53 	.word	0x08005c53
 8005c18:	08005c43 	.word	0x08005c43
 8005c1c:	08005c53 	.word	0x08005c53
 8005c20:	08005c53 	.word	0x08005c53
 8005c24:	08005c53 	.word	0x08005c53
 8005c28:	08005c4b 	.word	0x08005c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c2c:	f7fd fce8 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8005c30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c32:	e014      	b.n	8005c5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c34:	f7fd fcfa 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8005c38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c3a:	e010      	b.n	8005c5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c3c:	4b4e      	ldr	r3, [pc, #312]	; (8005d78 <UART_SetConfig+0x5c0>)
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c40:	e00d      	b.n	8005c5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c42:	f7fd fc6f 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 8005c46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c48:	e009      	b.n	8005c5e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c50:	e005      	b.n	8005c5e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 8090 	beq.w	8005d86 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6a:	4a44      	ldr	r2, [pc, #272]	; (8005d7c <UART_SetConfig+0x5c4>)
 8005c6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c70:	461a      	mov	r2, r3
 8005c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c78:	005a      	lsls	r2, r3, #1
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	441a      	add	r2, r3
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	2b0f      	cmp	r3, #15
 8005c90:	d916      	bls.n	8005cc0 <UART_SetConfig+0x508>
 8005c92:	6a3b      	ldr	r3, [r7, #32]
 8005c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c98:	d212      	bcs.n	8005cc0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c9a:	6a3b      	ldr	r3, [r7, #32]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	f023 030f 	bic.w	r3, r3, #15
 8005ca2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	085b      	lsrs	r3, r3, #1
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	8bfb      	ldrh	r3, [r7, #30]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	8bfa      	ldrh	r2, [r7, #30]
 8005cbc:	60da      	str	r2, [r3, #12]
 8005cbe:	e062      	b.n	8005d86 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005cc6:	e05e      	b.n	8005d86 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005cc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d828      	bhi.n	8005d22 <UART_SetConfig+0x56a>
 8005cd0:	a201      	add	r2, pc, #4	; (adr r2, 8005cd8 <UART_SetConfig+0x520>)
 8005cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd6:	bf00      	nop
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	08005d23 	.word	0x08005d23
 8005ce8:	08005d13 	.word	0x08005d13
 8005cec:	08005d23 	.word	0x08005d23
 8005cf0:	08005d23 	.word	0x08005d23
 8005cf4:	08005d23 	.word	0x08005d23
 8005cf8:	08005d1b 	.word	0x08005d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cfc:	f7fd fc80 	bl	8003600 <HAL_RCC_GetPCLK1Freq>
 8005d00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d02:	e014      	b.n	8005d2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d04:	f7fd fc92 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8005d08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d0a:	e010      	b.n	8005d2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <UART_SetConfig+0x5c0>)
 8005d0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d10:	e00d      	b.n	8005d2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d12:	f7fd fc07 	bl	8003524 <HAL_RCC_GetSysClockFreq>
 8005d16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d18:	e009      	b.n	8005d2e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005d20:	e005      	b.n	8005d2e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005d2c:	bf00      	nop
    }

    if (pclk != 0U)
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d028      	beq.n	8005d86 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d38:	4a10      	ldr	r2, [pc, #64]	; (8005d7c <UART_SetConfig+0x5c4>)
 8005d3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	fbb3 f2f2 	udiv	r2, r3, r2
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	085b      	lsrs	r3, r3, #1
 8005d4c:	441a      	add	r2, r3
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	2b0f      	cmp	r3, #15
 8005d5c:	d910      	bls.n	8005d80 <UART_SetConfig+0x5c8>
 8005d5e:	6a3b      	ldr	r3, [r7, #32]
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d64:	d20c      	bcs.n	8005d80 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	60da      	str	r2, [r3, #12]
 8005d70:	e009      	b.n	8005d86 <UART_SetConfig+0x5ce>
 8005d72:	bf00      	nop
 8005d74:	40008000 	.word	0x40008000
 8005d78:	00f42400 	.word	0x00f42400
 8005d7c:	08009198 	.word	0x08009198
      }
      else
      {
        ret = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005da2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3730      	adds	r7, #48	; 0x30
 8005daa:	46bd      	mov	sp, r7
 8005dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00a      	beq.n	8005dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d00a      	beq.n	8005dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	f003 0304 	and.w	r3, r3, #4
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00a      	beq.n	8005e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	430a      	orrs	r2, r1
 8005e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00a      	beq.n	8005e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	430a      	orrs	r2, r1
 8005e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	f003 0320 	and.w	r3, r3, #32
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01a      	beq.n	8005ec6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eae:	d10a      	bne.n	8005ec6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	430a      	orrs	r2, r1
 8005ec4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	430a      	orrs	r2, r1
 8005ee6:	605a      	str	r2, [r3, #4]
  }
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b098      	sub	sp, #96	; 0x60
 8005ef8:	af02      	add	r7, sp, #8
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f04:	f7fc fb86 	bl	8002614 <HAL_GetTick>
 8005f08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0308 	and.w	r3, r3, #8
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d12f      	bne.n	8005f78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f20:	2200      	movs	r2, #0
 8005f22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 f88e 	bl	8006048 <UART_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d022      	beq.n	8005f78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	e853 3f00 	ldrex	r3, [r3]
 8005f3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f46:	653b      	str	r3, [r7, #80]	; 0x50
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f50:	647b      	str	r3, [r7, #68]	; 0x44
 8005f52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f58:	e841 2300 	strex	r3, r2, [r1]
 8005f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1e6      	bne.n	8005f32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e063      	b.n	8006040 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b04      	cmp	r3, #4
 8005f84:	d149      	bne.n	800601a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f000 f857 	bl	8006048 <UART_WaitOnFlagUntilTimeout>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d03c      	beq.n	800601a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	623b      	str	r3, [r7, #32]
   return(result);
 8005fae:	6a3b      	ldr	r3, [r7, #32]
 8005fb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005fc0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e6      	bne.n	8005fa0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	3308      	adds	r3, #8
 8005fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	e853 3f00 	ldrex	r3, [r3]
 8005fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f023 0301 	bic.w	r3, r3, #1
 8005fe8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3308      	adds	r3, #8
 8005ff0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ff2:	61fa      	str	r2, [r7, #28]
 8005ff4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	69b9      	ldr	r1, [r7, #24]
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	e841 2300 	strex	r3, r2, [r1]
 8005ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d1e5      	bne.n	8005fd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2220      	movs	r2, #32
 800600a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e012      	b.n	8006040 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3758      	adds	r7, #88	; 0x58
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	603b      	str	r3, [r7, #0]
 8006054:	4613      	mov	r3, r2
 8006056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006058:	e04f      	b.n	80060fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006060:	d04b      	beq.n	80060fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006062:	f7fc fad7 	bl	8002614 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	429a      	cmp	r2, r3
 8006070:	d302      	bcc.n	8006078 <UART_WaitOnFlagUntilTimeout+0x30>
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d101      	bne.n	800607c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e04e      	b.n	800611a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0304 	and.w	r3, r3, #4
 8006086:	2b00      	cmp	r3, #0
 8006088:	d037      	beq.n	80060fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b80      	cmp	r3, #128	; 0x80
 800608e:	d034      	beq.n	80060fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b40      	cmp	r3, #64	; 0x40
 8006094:	d031      	beq.n	80060fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69db      	ldr	r3, [r3, #28]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b08      	cmp	r3, #8
 80060a2:	d110      	bne.n	80060c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2208      	movs	r2, #8
 80060aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f838 	bl	8006122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2208      	movs	r2, #8
 80060b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	e029      	b.n	800611a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d4:	d111      	bne.n	80060fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060e0:	68f8      	ldr	r0, [r7, #12]
 80060e2:	f000 f81e 	bl	8006122 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e00f      	b.n	800611a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69da      	ldr	r2, [r3, #28]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4013      	ands	r3, r2
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	429a      	cmp	r2, r3
 8006108:	bf0c      	ite	eq
 800610a:	2301      	moveq	r3, #1
 800610c:	2300      	movne	r3, #0
 800610e:	b2db      	uxtb	r3, r3
 8006110:	461a      	mov	r2, r3
 8006112:	79fb      	ldrb	r3, [r7, #7]
 8006114:	429a      	cmp	r2, r3
 8006116:	d0a0      	beq.n	800605a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006122:	b480      	push	{r7}
 8006124:	b095      	sub	sp, #84	; 0x54
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006132:	e853 3f00 	ldrex	r3, [r3]
 8006136:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800613e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	461a      	mov	r2, r3
 8006146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006148:	643b      	str	r3, [r7, #64]	; 0x40
 800614a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800614e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006150:	e841 2300 	strex	r3, r2, [r1]
 8006154:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006158:	2b00      	cmp	r3, #0
 800615a:	d1e6      	bne.n	800612a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3308      	adds	r3, #8
 8006162:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	e853 3f00 	ldrex	r3, [r3]
 800616a:	61fb      	str	r3, [r7, #28]
   return(result);
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006172:	f023 0301 	bic.w	r3, r3, #1
 8006176:	64bb      	str	r3, [r7, #72]	; 0x48
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3308      	adds	r3, #8
 800617e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006180:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800618e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e3      	bne.n	800615c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006198:	2b01      	cmp	r3, #1
 800619a:	d118      	bne.n	80061ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	e853 3f00 	ldrex	r3, [r3]
 80061a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f023 0310 	bic.w	r3, r3, #16
 80061b0:	647b      	str	r3, [r7, #68]	; 0x44
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80061ba:	61bb      	str	r3, [r7, #24]
 80061bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	6979      	ldr	r1, [r7, #20]
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	e841 2300 	strex	r3, r2, [r1]
 80061c6:	613b      	str	r3, [r7, #16]
   return(result);
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e6      	bne.n	800619c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80061e2:	bf00      	nop
 80061e4:	3754      	adds	r7, #84	; 0x54
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b085      	sub	sp, #20
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_UARTEx_DisableFifoMode+0x16>
 8006200:	2302      	movs	r3, #2
 8006202:	e027      	b.n	8006254 <HAL_UARTEx_DisableFifoMode+0x66>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2224      	movs	r2, #36	; 0x24
 8006210:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0201 	bic.w	r2, r2, #1
 800622a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006232:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3714      	adds	r7, #20
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006270:	2b01      	cmp	r3, #1
 8006272:	d101      	bne.n	8006278 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006274:	2302      	movs	r3, #2
 8006276:	e02d      	b.n	80062d4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2224      	movs	r2, #36	; 0x24
 8006284:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0201 	bic.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 f84f 	bl	8006358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2220      	movs	r2, #32
 80062c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}

080062dc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e02d      	b.n	8006350 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2224      	movs	r2, #36	; 0x24
 8006300:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0201 	bic.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 f811 	bl	8006358 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006358:	b480      	push	{r7}
 800635a:	b085      	sub	sp, #20
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006364:	2b00      	cmp	r3, #0
 8006366:	d108      	bne.n	800637a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006378:	e031      	b.n	80063de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800637a:	2308      	movs	r3, #8
 800637c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800637e:	2308      	movs	r3, #8
 8006380:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	0e5b      	lsrs	r3, r3, #25
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	0f5b      	lsrs	r3, r3, #29
 800639a:	b2db      	uxtb	r3, r3
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063a2:	7bbb      	ldrb	r3, [r7, #14]
 80063a4:	7b3a      	ldrb	r2, [r7, #12]
 80063a6:	4911      	ldr	r1, [pc, #68]	; (80063ec <UARTEx_SetNbDataToProcess+0x94>)
 80063a8:	5c8a      	ldrb	r2, [r1, r2]
 80063aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80063ae:	7b3a      	ldrb	r2, [r7, #12]
 80063b0:	490f      	ldr	r1, [pc, #60]	; (80063f0 <UARTEx_SetNbDataToProcess+0x98>)
 80063b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063c0:	7bfb      	ldrb	r3, [r7, #15]
 80063c2:	7b7a      	ldrb	r2, [r7, #13]
 80063c4:	4909      	ldr	r1, [pc, #36]	; (80063ec <UARTEx_SetNbDataToProcess+0x94>)
 80063c6:	5c8a      	ldrb	r2, [r1, r2]
 80063c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063cc:	7b7a      	ldrb	r2, [r7, #13]
 80063ce:	4908      	ldr	r1, [pc, #32]	; (80063f0 <UARTEx_SetNbDataToProcess+0x98>)
 80063d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
 80063ea:	bf00      	nop
 80063ec:	080091b0 	.word	0x080091b0
 80063f0:	080091b8 	.word	0x080091b8

080063f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063fe:	4b7d      	ldr	r3, [pc, #500]	; (80065f4 <xTaskIncrementTick+0x200>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f040 80ec 	bne.w	80065e0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006408:	4b7b      	ldr	r3, [pc, #492]	; (80065f8 <xTaskIncrementTick+0x204>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3301      	adds	r3, #1
 800640e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006410:	4a79      	ldr	r2, [pc, #484]	; (80065f8 <xTaskIncrementTick+0x204>)
 8006412:	6a3b      	ldr	r3, [r7, #32]
 8006414:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d120      	bne.n	800645e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800641c:	4b77      	ldr	r3, [pc, #476]	; (80065fc <xTaskIncrementTick+0x208>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00a      	beq.n	800643c <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8006426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f3bf 8f4f 	dsb	sy
 8006436:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8006438:	bf00      	nop
 800643a:	e7fe      	b.n	800643a <xTaskIncrementTick+0x46>
 800643c:	4b6f      	ldr	r3, [pc, #444]	; (80065fc <xTaskIncrementTick+0x208>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	4b6f      	ldr	r3, [pc, #444]	; (8006600 <xTaskIncrementTick+0x20c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a6d      	ldr	r2, [pc, #436]	; (80065fc <xTaskIncrementTick+0x208>)
 8006448:	6013      	str	r3, [r2, #0]
 800644a:	4a6d      	ldr	r2, [pc, #436]	; (8006600 <xTaskIncrementTick+0x20c>)
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	4b6c      	ldr	r3, [pc, #432]	; (8006604 <xTaskIncrementTick+0x210>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	4a6b      	ldr	r2, [pc, #428]	; (8006604 <xTaskIncrementTick+0x210>)
 8006458:	6013      	str	r3, [r2, #0]
 800645a:	f000 f93d 	bl	80066d8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800645e:	4b6a      	ldr	r3, [pc, #424]	; (8006608 <xTaskIncrementTick+0x214>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	429a      	cmp	r2, r3
 8006466:	f0c0 80a6 	bcc.w	80065b6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800646a:	4b64      	ldr	r3, [pc, #400]	; (80065fc <xTaskIncrementTick+0x208>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d104      	bne.n	800647e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006474:	4b64      	ldr	r3, [pc, #400]	; (8006608 <xTaskIncrementTick+0x214>)
 8006476:	f04f 32ff 	mov.w	r2, #4294967295
 800647a:	601a      	str	r2, [r3, #0]
                    break;
 800647c:	e09b      	b.n	80065b6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800647e:	4b5f      	ldr	r3, [pc, #380]	; (80065fc <xTaskIncrementTick+0x208>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800648e:	6a3a      	ldr	r2, [r7, #32]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	429a      	cmp	r2, r3
 8006494:	d203      	bcs.n	800649e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006496:	4a5c      	ldr	r2, [pc, #368]	; (8006608 <xTaskIncrementTick+0x214>)
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800649c:	e08b      	b.n	80065b6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	68d2      	ldr	r2, [r2, #12]
 80064ac:	609a      	str	r2, [r3, #8]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	69ba      	ldr	r2, [r7, #24]
 80064b4:	6892      	ldr	r2, [r2, #8]
 80064b6:	605a      	str	r2, [r3, #4]
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	3304      	adds	r3, #4
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d103      	bne.n	80064cc <xTaskIncrementTick+0xd8>
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	605a      	str	r2, [r3, #4]
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	2200      	movs	r2, #0
 80064d0:	615a      	str	r2, [r3, #20]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	1e5a      	subs	r2, r3, #1
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01e      	beq.n	8006522 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	6a12      	ldr	r2, [r2, #32]
 80064f2:	609a      	str	r2, [r3, #8]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	69d2      	ldr	r2, [r2, #28]
 80064fc:	605a      	str	r2, [r3, #4]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	3318      	adds	r3, #24
 8006506:	429a      	cmp	r2, r3
 8006508:	d103      	bne.n	8006512 <xTaskIncrementTick+0x11e>
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	6a1a      	ldr	r2, [r3, #32]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	605a      	str	r2, [r3, #4]
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2200      	movs	r2, #0
 8006516:	629a      	str	r2, [r3, #40]	; 0x28
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	1e5a      	subs	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	2201      	movs	r2, #1
 8006528:	409a      	lsls	r2, r3
 800652a:	4b38      	ldr	r3, [pc, #224]	; (800660c <xTaskIncrementTick+0x218>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4313      	orrs	r3, r2
 8006530:	4a36      	ldr	r2, [pc, #216]	; (800660c <xTaskIncrementTick+0x218>)
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006538:	4935      	ldr	r1, [pc, #212]	; (8006610 <xTaskIncrementTick+0x21c>)
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	440b      	add	r3, r1
 8006544:	3304      	adds	r3, #4
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	609a      	str	r2, [r3, #8]
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	69bb      	ldr	r3, [r7, #24]
 8006556:	60da      	str	r2, [r3, #12]
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	3204      	adds	r2, #4
 8006560:	605a      	str	r2, [r3, #4]
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	1d1a      	adds	r2, r3, #4
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	609a      	str	r2, [r3, #8]
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4a26      	ldr	r2, [pc, #152]	; (8006610 <xTaskIncrementTick+0x21c>)
 8006578:	441a      	add	r2, r3
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	615a      	str	r2, [r3, #20]
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006582:	4923      	ldr	r1, [pc, #140]	; (8006610 <xTaskIncrementTick+0x21c>)
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	440b      	add	r3, r1
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	1c59      	adds	r1, r3, #1
 8006592:	481f      	ldr	r0, [pc, #124]	; (8006610 <xTaskIncrementTick+0x21c>)
 8006594:	4613      	mov	r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4403      	add	r3, r0
 800659e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065a4:	4b1b      	ldr	r3, [pc, #108]	; (8006614 <xTaskIncrementTick+0x220>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	429a      	cmp	r2, r3
 80065ac:	f67f af5d 	bls.w	800646a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80065b0:	2301      	movs	r3, #1
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065b4:	e759      	b.n	800646a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065b6:	4b17      	ldr	r3, [pc, #92]	; (8006614 <xTaskIncrementTick+0x220>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	4914      	ldr	r1, [pc, #80]	; (8006610 <xTaskIncrementTick+0x21c>)
 80065be:	4613      	mov	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	4413      	add	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	440b      	add	r3, r1
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d901      	bls.n	80065d2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80065ce:	2301      	movs	r3, #1
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80065d2:	4b11      	ldr	r3, [pc, #68]	; (8006618 <xTaskIncrementTick+0x224>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d007      	beq.n	80065ea <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80065da:	2301      	movs	r3, #1
 80065dc:	627b      	str	r3, [r7, #36]	; 0x24
 80065de:	e004      	b.n	80065ea <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80065e0:	4b0e      	ldr	r3, [pc, #56]	; (800661c <xTaskIncrementTick+0x228>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3301      	adds	r3, #1
 80065e6:	4a0d      	ldr	r2, [pc, #52]	; (800661c <xTaskIncrementTick+0x228>)
 80065e8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80065ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3728      	adds	r7, #40	; 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	20000620 	.word	0x20000620
 80065f8:	20000608 	.word	0x20000608
 80065fc:	20000600 	.word	0x20000600
 8006600:	20000604 	.word	0x20000604
 8006604:	20000618 	.word	0x20000618
 8006608:	2000061c 	.word	0x2000061c
 800660c:	2000060c 	.word	0x2000060c
 8006610:	2000059c 	.word	0x2000059c
 8006614:	20000598 	.word	0x20000598
 8006618:	20000614 	.word	0x20000614
 800661c:	20000610 	.word	0x20000610

08006620 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006626:	4b27      	ldr	r3, [pc, #156]	; (80066c4 <vTaskSwitchContext+0xa4>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800662e:	4b26      	ldr	r3, [pc, #152]	; (80066c8 <vTaskSwitchContext+0xa8>)
 8006630:	2201      	movs	r2, #1
 8006632:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006634:	e03f      	b.n	80066b6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8006636:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <vTaskSwitchContext+0xa8>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800663c:	4b23      	ldr	r3, [pc, #140]	; (80066cc <vTaskSwitchContext+0xac>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	fab3 f383 	clz	r3, r3
 8006648:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800664a:	7afb      	ldrb	r3, [r7, #11]
 800664c:	f1c3 031f 	rsb	r3, r3, #31
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	491f      	ldr	r1, [pc, #124]	; (80066d0 <vTaskSwitchContext+0xb0>)
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4613      	mov	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4413      	add	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <vTaskSwitchContext+0x5c>
        __asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	607b      	str	r3, [r7, #4]
    }
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <vTaskSwitchContext+0x5a>
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4a12      	ldr	r2, [pc, #72]	; (80066d0 <vTaskSwitchContext+0xb0>)
 8006688:	4413      	add	r3, r2
 800668a:	613b      	str	r3, [r7, #16]
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	605a      	str	r2, [r3, #4]
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	3308      	adds	r3, #8
 800669e:	429a      	cmp	r2, r3
 80066a0:	d104      	bne.n	80066ac <vTaskSwitchContext+0x8c>
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	685a      	ldr	r2, [r3, #4]
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	605a      	str	r2, [r3, #4]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	4a08      	ldr	r2, [pc, #32]	; (80066d4 <vTaskSwitchContext+0xb4>)
 80066b4:	6013      	str	r3, [r2, #0]
}
 80066b6:	bf00      	nop
 80066b8:	371c      	adds	r7, #28
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	20000620 	.word	0x20000620
 80066c8:	20000614 	.word	0x20000614
 80066cc:	2000060c 	.word	0x2000060c
 80066d0:	2000059c 	.word	0x2000059c
 80066d4:	20000598 	.word	0x20000598

080066d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066d8:	b480      	push	{r7}
 80066da:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <prvResetNextTaskUnblockTime+0x30>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d104      	bne.n	80066f0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80066e6:	4b09      	ldr	r3, [pc, #36]	; (800670c <prvResetNextTaskUnblockTime+0x34>)
 80066e8:	f04f 32ff 	mov.w	r2, #4294967295
 80066ec:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80066ee:	e005      	b.n	80066fc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <prvResetNextTaskUnblockTime+0x30>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a04      	ldr	r2, [pc, #16]	; (800670c <prvResetNextTaskUnblockTime+0x34>)
 80066fa:	6013      	str	r3, [r2, #0]
}
 80066fc:	bf00      	nop
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20000600 	.word	0x20000600
 800670c:	2000061c 	.word	0x2000061c

08006710 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <pxCurrentTCBConst2>)
 8006712:	6819      	ldr	r1, [r3, #0]
 8006714:	6808      	ldr	r0, [r1, #0]
 8006716:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671a:	f380 8809 	msr	PSP, r0
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f04f 0000 	mov.w	r0, #0
 8006726:	f380 8811 	msr	BASEPRI, r0
 800672a:	4770      	bx	lr
 800672c:	f3af 8000 	nop.w

08006730 <pxCurrentTCBConst2>:
 8006730:	20000598 	.word	0x20000598
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006734:	bf00      	nop
 8006736:	bf00      	nop
	...

08006740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006740:	f3ef 8009 	mrs	r0, PSP
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <pxCurrentTCBConst>)
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	f01e 0f10 	tst.w	lr, #16
 8006750:	bf08      	it	eq
 8006752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800675a:	6010      	str	r0, [r2, #0]
 800675c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006760:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006764:	f380 8811 	msr	BASEPRI, r0
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f7ff ff56 	bl	8006620 <vTaskSwitchContext>
 8006774:	f04f 0000 	mov.w	r0, #0
 8006778:	f380 8811 	msr	BASEPRI, r0
 800677c:	bc09      	pop	{r0, r3}
 800677e:	6819      	ldr	r1, [r3, #0]
 8006780:	6808      	ldr	r0, [r1, #0]
 8006782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006786:	f01e 0f10 	tst.w	lr, #16
 800678a:	bf08      	it	eq
 800678c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006790:	f380 8809 	msr	PSP, r0
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	f3af 8000 	nop.w

080067a0 <pxCurrentTCBConst>:
 80067a0:	20000598 	.word	0x20000598
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80067a4:	bf00      	nop
 80067a6:	bf00      	nop

080067a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
        __asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b2:	f383 8811 	msr	BASEPRI, r3
 80067b6:	f3bf 8f6f 	isb	sy
 80067ba:	f3bf 8f4f 	dsb	sy
 80067be:	607b      	str	r3, [r7, #4]
    }
 80067c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80067c2:	f7ff fe17 	bl	80063f4 <xTaskIncrementTick>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80067cc:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <SysTick_Handler+0x40>)
 80067ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	2300      	movs	r3, #0
 80067d6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80067de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	e000ed04 	.word	0xe000ed04

080067ec <__cvt>:
 80067ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067f0:	ec55 4b10 	vmov	r4, r5, d0
 80067f4:	2d00      	cmp	r5, #0
 80067f6:	460e      	mov	r6, r1
 80067f8:	4619      	mov	r1, r3
 80067fa:	462b      	mov	r3, r5
 80067fc:	bfbb      	ittet	lt
 80067fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006802:	461d      	movlt	r5, r3
 8006804:	2300      	movge	r3, #0
 8006806:	232d      	movlt	r3, #45	; 0x2d
 8006808:	700b      	strb	r3, [r1, #0]
 800680a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800680c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006810:	4691      	mov	r9, r2
 8006812:	f023 0820 	bic.w	r8, r3, #32
 8006816:	bfbc      	itt	lt
 8006818:	4622      	movlt	r2, r4
 800681a:	4614      	movlt	r4, r2
 800681c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006820:	d005      	beq.n	800682e <__cvt+0x42>
 8006822:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006826:	d100      	bne.n	800682a <__cvt+0x3e>
 8006828:	3601      	adds	r6, #1
 800682a:	2102      	movs	r1, #2
 800682c:	e000      	b.n	8006830 <__cvt+0x44>
 800682e:	2103      	movs	r1, #3
 8006830:	ab03      	add	r3, sp, #12
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	ab02      	add	r3, sp, #8
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	ec45 4b10 	vmov	d0, r4, r5
 800683c:	4653      	mov	r3, sl
 800683e:	4632      	mov	r2, r6
 8006840:	f000 fe56 	bl	80074f0 <_dtoa_r>
 8006844:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006848:	4607      	mov	r7, r0
 800684a:	d102      	bne.n	8006852 <__cvt+0x66>
 800684c:	f019 0f01 	tst.w	r9, #1
 8006850:	d022      	beq.n	8006898 <__cvt+0xac>
 8006852:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006856:	eb07 0906 	add.w	r9, r7, r6
 800685a:	d110      	bne.n	800687e <__cvt+0x92>
 800685c:	783b      	ldrb	r3, [r7, #0]
 800685e:	2b30      	cmp	r3, #48	; 0x30
 8006860:	d10a      	bne.n	8006878 <__cvt+0x8c>
 8006862:	2200      	movs	r2, #0
 8006864:	2300      	movs	r3, #0
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7fa f955 	bl	8000b18 <__aeabi_dcmpeq>
 800686e:	b918      	cbnz	r0, 8006878 <__cvt+0x8c>
 8006870:	f1c6 0601 	rsb	r6, r6, #1
 8006874:	f8ca 6000 	str.w	r6, [sl]
 8006878:	f8da 3000 	ldr.w	r3, [sl]
 800687c:	4499      	add	r9, r3
 800687e:	2200      	movs	r2, #0
 8006880:	2300      	movs	r3, #0
 8006882:	4620      	mov	r0, r4
 8006884:	4629      	mov	r1, r5
 8006886:	f7fa f947 	bl	8000b18 <__aeabi_dcmpeq>
 800688a:	b108      	cbz	r0, 8006890 <__cvt+0xa4>
 800688c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006890:	2230      	movs	r2, #48	; 0x30
 8006892:	9b03      	ldr	r3, [sp, #12]
 8006894:	454b      	cmp	r3, r9
 8006896:	d307      	bcc.n	80068a8 <__cvt+0xbc>
 8006898:	9b03      	ldr	r3, [sp, #12]
 800689a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800689c:	1bdb      	subs	r3, r3, r7
 800689e:	4638      	mov	r0, r7
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	b004      	add	sp, #16
 80068a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068a8:	1c59      	adds	r1, r3, #1
 80068aa:	9103      	str	r1, [sp, #12]
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	e7f0      	b.n	8006892 <__cvt+0xa6>

080068b0 <__exponent>:
 80068b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068b2:	4603      	mov	r3, r0
 80068b4:	2900      	cmp	r1, #0
 80068b6:	bfb8      	it	lt
 80068b8:	4249      	neglt	r1, r1
 80068ba:	f803 2b02 	strb.w	r2, [r3], #2
 80068be:	bfb4      	ite	lt
 80068c0:	222d      	movlt	r2, #45	; 0x2d
 80068c2:	222b      	movge	r2, #43	; 0x2b
 80068c4:	2909      	cmp	r1, #9
 80068c6:	7042      	strb	r2, [r0, #1]
 80068c8:	dd2a      	ble.n	8006920 <__exponent+0x70>
 80068ca:	f10d 0207 	add.w	r2, sp, #7
 80068ce:	4617      	mov	r7, r2
 80068d0:	260a      	movs	r6, #10
 80068d2:	4694      	mov	ip, r2
 80068d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80068d8:	fb06 1415 	mls	r4, r6, r5, r1
 80068dc:	3430      	adds	r4, #48	; 0x30
 80068de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80068e2:	460c      	mov	r4, r1
 80068e4:	2c63      	cmp	r4, #99	; 0x63
 80068e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80068ea:	4629      	mov	r1, r5
 80068ec:	dcf1      	bgt.n	80068d2 <__exponent+0x22>
 80068ee:	3130      	adds	r1, #48	; 0x30
 80068f0:	f1ac 0402 	sub.w	r4, ip, #2
 80068f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80068f8:	1c41      	adds	r1, r0, #1
 80068fa:	4622      	mov	r2, r4
 80068fc:	42ba      	cmp	r2, r7
 80068fe:	d30a      	bcc.n	8006916 <__exponent+0x66>
 8006900:	f10d 0209 	add.w	r2, sp, #9
 8006904:	eba2 020c 	sub.w	r2, r2, ip
 8006908:	42bc      	cmp	r4, r7
 800690a:	bf88      	it	hi
 800690c:	2200      	movhi	r2, #0
 800690e:	4413      	add	r3, r2
 8006910:	1a18      	subs	r0, r3, r0
 8006912:	b003      	add	sp, #12
 8006914:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006916:	f812 5b01 	ldrb.w	r5, [r2], #1
 800691a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800691e:	e7ed      	b.n	80068fc <__exponent+0x4c>
 8006920:	2330      	movs	r3, #48	; 0x30
 8006922:	3130      	adds	r1, #48	; 0x30
 8006924:	7083      	strb	r3, [r0, #2]
 8006926:	70c1      	strb	r1, [r0, #3]
 8006928:	1d03      	adds	r3, r0, #4
 800692a:	e7f1      	b.n	8006910 <__exponent+0x60>

0800692c <_printf_float>:
 800692c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006930:	ed2d 8b02 	vpush	{d8}
 8006934:	b08d      	sub	sp, #52	; 0x34
 8006936:	460c      	mov	r4, r1
 8006938:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800693c:	4616      	mov	r6, r2
 800693e:	461f      	mov	r7, r3
 8006940:	4605      	mov	r5, r0
 8006942:	f000 fcc7 	bl	80072d4 <_localeconv_r>
 8006946:	f8d0 a000 	ldr.w	sl, [r0]
 800694a:	4650      	mov	r0, sl
 800694c:	f7f9 fcb8 	bl	80002c0 <strlen>
 8006950:	2300      	movs	r3, #0
 8006952:	930a      	str	r3, [sp, #40]	; 0x28
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	9305      	str	r3, [sp, #20]
 8006958:	f8d8 3000 	ldr.w	r3, [r8]
 800695c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006960:	3307      	adds	r3, #7
 8006962:	f023 0307 	bic.w	r3, r3, #7
 8006966:	f103 0208 	add.w	r2, r3, #8
 800696a:	f8c8 2000 	str.w	r2, [r8]
 800696e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006972:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006976:	9307      	str	r3, [sp, #28]
 8006978:	f8cd 8018 	str.w	r8, [sp, #24]
 800697c:	ee08 0a10 	vmov	s16, r0
 8006980:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006984:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006988:	4b9e      	ldr	r3, [pc, #632]	; (8006c04 <_printf_float+0x2d8>)
 800698a:	f04f 32ff 	mov.w	r2, #4294967295
 800698e:	f7fa f8f5 	bl	8000b7c <__aeabi_dcmpun>
 8006992:	bb88      	cbnz	r0, 80069f8 <_printf_float+0xcc>
 8006994:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006998:	4b9a      	ldr	r3, [pc, #616]	; (8006c04 <_printf_float+0x2d8>)
 800699a:	f04f 32ff 	mov.w	r2, #4294967295
 800699e:	f7fa f8cf 	bl	8000b40 <__aeabi_dcmple>
 80069a2:	bb48      	cbnz	r0, 80069f8 <_printf_float+0xcc>
 80069a4:	2200      	movs	r2, #0
 80069a6:	2300      	movs	r3, #0
 80069a8:	4640      	mov	r0, r8
 80069aa:	4649      	mov	r1, r9
 80069ac:	f7fa f8be 	bl	8000b2c <__aeabi_dcmplt>
 80069b0:	b110      	cbz	r0, 80069b8 <_printf_float+0x8c>
 80069b2:	232d      	movs	r3, #45	; 0x2d
 80069b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069b8:	4a93      	ldr	r2, [pc, #588]	; (8006c08 <_printf_float+0x2dc>)
 80069ba:	4b94      	ldr	r3, [pc, #592]	; (8006c0c <_printf_float+0x2e0>)
 80069bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80069c0:	bf94      	ite	ls
 80069c2:	4690      	movls	r8, r2
 80069c4:	4698      	movhi	r8, r3
 80069c6:	2303      	movs	r3, #3
 80069c8:	6123      	str	r3, [r4, #16]
 80069ca:	9b05      	ldr	r3, [sp, #20]
 80069cc:	f023 0304 	bic.w	r3, r3, #4
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	f04f 0900 	mov.w	r9, #0
 80069d6:	9700      	str	r7, [sp, #0]
 80069d8:	4633      	mov	r3, r6
 80069da:	aa0b      	add	r2, sp, #44	; 0x2c
 80069dc:	4621      	mov	r1, r4
 80069de:	4628      	mov	r0, r5
 80069e0:	f000 f9da 	bl	8006d98 <_printf_common>
 80069e4:	3001      	adds	r0, #1
 80069e6:	f040 8090 	bne.w	8006b0a <_printf_float+0x1de>
 80069ea:	f04f 30ff 	mov.w	r0, #4294967295
 80069ee:	b00d      	add	sp, #52	; 0x34
 80069f0:	ecbd 8b02 	vpop	{d8}
 80069f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f8:	4642      	mov	r2, r8
 80069fa:	464b      	mov	r3, r9
 80069fc:	4640      	mov	r0, r8
 80069fe:	4649      	mov	r1, r9
 8006a00:	f7fa f8bc 	bl	8000b7c <__aeabi_dcmpun>
 8006a04:	b140      	cbz	r0, 8006a18 <_printf_float+0xec>
 8006a06:	464b      	mov	r3, r9
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	bfbc      	itt	lt
 8006a0c:	232d      	movlt	r3, #45	; 0x2d
 8006a0e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a12:	4a7f      	ldr	r2, [pc, #508]	; (8006c10 <_printf_float+0x2e4>)
 8006a14:	4b7f      	ldr	r3, [pc, #508]	; (8006c14 <_printf_float+0x2e8>)
 8006a16:	e7d1      	b.n	80069bc <_printf_float+0x90>
 8006a18:	6863      	ldr	r3, [r4, #4]
 8006a1a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a1e:	9206      	str	r2, [sp, #24]
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	d13f      	bne.n	8006aa4 <_printf_float+0x178>
 8006a24:	2306      	movs	r3, #6
 8006a26:	6063      	str	r3, [r4, #4]
 8006a28:	9b05      	ldr	r3, [sp, #20]
 8006a2a:	6861      	ldr	r1, [r4, #4]
 8006a2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a30:	2300      	movs	r3, #0
 8006a32:	9303      	str	r3, [sp, #12]
 8006a34:	ab0a      	add	r3, sp, #40	; 0x28
 8006a36:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a3a:	ab09      	add	r3, sp, #36	; 0x24
 8006a3c:	ec49 8b10 	vmov	d0, r8, r9
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	6022      	str	r2, [r4, #0]
 8006a44:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a48:	4628      	mov	r0, r5
 8006a4a:	f7ff fecf 	bl	80067ec <__cvt>
 8006a4e:	9b06      	ldr	r3, [sp, #24]
 8006a50:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a52:	2b47      	cmp	r3, #71	; 0x47
 8006a54:	4680      	mov	r8, r0
 8006a56:	d108      	bne.n	8006a6a <_printf_float+0x13e>
 8006a58:	1cc8      	adds	r0, r1, #3
 8006a5a:	db02      	blt.n	8006a62 <_printf_float+0x136>
 8006a5c:	6863      	ldr	r3, [r4, #4]
 8006a5e:	4299      	cmp	r1, r3
 8006a60:	dd41      	ble.n	8006ae6 <_printf_float+0x1ba>
 8006a62:	f1ab 0302 	sub.w	r3, fp, #2
 8006a66:	fa5f fb83 	uxtb.w	fp, r3
 8006a6a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a6e:	d820      	bhi.n	8006ab2 <_printf_float+0x186>
 8006a70:	3901      	subs	r1, #1
 8006a72:	465a      	mov	r2, fp
 8006a74:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006a78:	9109      	str	r1, [sp, #36]	; 0x24
 8006a7a:	f7ff ff19 	bl	80068b0 <__exponent>
 8006a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a80:	1813      	adds	r3, r2, r0
 8006a82:	2a01      	cmp	r2, #1
 8006a84:	4681      	mov	r9, r0
 8006a86:	6123      	str	r3, [r4, #16]
 8006a88:	dc02      	bgt.n	8006a90 <_printf_float+0x164>
 8006a8a:	6822      	ldr	r2, [r4, #0]
 8006a8c:	07d2      	lsls	r2, r2, #31
 8006a8e:	d501      	bpl.n	8006a94 <_printf_float+0x168>
 8006a90:	3301      	adds	r3, #1
 8006a92:	6123      	str	r3, [r4, #16]
 8006a94:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d09c      	beq.n	80069d6 <_printf_float+0xaa>
 8006a9c:	232d      	movs	r3, #45	; 0x2d
 8006a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006aa2:	e798      	b.n	80069d6 <_printf_float+0xaa>
 8006aa4:	9a06      	ldr	r2, [sp, #24]
 8006aa6:	2a47      	cmp	r2, #71	; 0x47
 8006aa8:	d1be      	bne.n	8006a28 <_printf_float+0xfc>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d1bc      	bne.n	8006a28 <_printf_float+0xfc>
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e7b9      	b.n	8006a26 <_printf_float+0xfa>
 8006ab2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006ab6:	d118      	bne.n	8006aea <_printf_float+0x1be>
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	6863      	ldr	r3, [r4, #4]
 8006abc:	dd0b      	ble.n	8006ad6 <_printf_float+0x1aa>
 8006abe:	6121      	str	r1, [r4, #16]
 8006ac0:	b913      	cbnz	r3, 8006ac8 <_printf_float+0x19c>
 8006ac2:	6822      	ldr	r2, [r4, #0]
 8006ac4:	07d0      	lsls	r0, r2, #31
 8006ac6:	d502      	bpl.n	8006ace <_printf_float+0x1a2>
 8006ac8:	3301      	adds	r3, #1
 8006aca:	440b      	add	r3, r1
 8006acc:	6123      	str	r3, [r4, #16]
 8006ace:	65a1      	str	r1, [r4, #88]	; 0x58
 8006ad0:	f04f 0900 	mov.w	r9, #0
 8006ad4:	e7de      	b.n	8006a94 <_printf_float+0x168>
 8006ad6:	b913      	cbnz	r3, 8006ade <_printf_float+0x1b2>
 8006ad8:	6822      	ldr	r2, [r4, #0]
 8006ada:	07d2      	lsls	r2, r2, #31
 8006adc:	d501      	bpl.n	8006ae2 <_printf_float+0x1b6>
 8006ade:	3302      	adds	r3, #2
 8006ae0:	e7f4      	b.n	8006acc <_printf_float+0x1a0>
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e7f2      	b.n	8006acc <_printf_float+0x1a0>
 8006ae6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aec:	4299      	cmp	r1, r3
 8006aee:	db05      	blt.n	8006afc <_printf_float+0x1d0>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	6121      	str	r1, [r4, #16]
 8006af4:	07d8      	lsls	r0, r3, #31
 8006af6:	d5ea      	bpl.n	8006ace <_printf_float+0x1a2>
 8006af8:	1c4b      	adds	r3, r1, #1
 8006afa:	e7e7      	b.n	8006acc <_printf_float+0x1a0>
 8006afc:	2900      	cmp	r1, #0
 8006afe:	bfd4      	ite	le
 8006b00:	f1c1 0202 	rsble	r2, r1, #2
 8006b04:	2201      	movgt	r2, #1
 8006b06:	4413      	add	r3, r2
 8006b08:	e7e0      	b.n	8006acc <_printf_float+0x1a0>
 8006b0a:	6823      	ldr	r3, [r4, #0]
 8006b0c:	055a      	lsls	r2, r3, #21
 8006b0e:	d407      	bmi.n	8006b20 <_printf_float+0x1f4>
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	4642      	mov	r2, r8
 8006b14:	4631      	mov	r1, r6
 8006b16:	4628      	mov	r0, r5
 8006b18:	47b8      	blx	r7
 8006b1a:	3001      	adds	r0, #1
 8006b1c:	d12c      	bne.n	8006b78 <_printf_float+0x24c>
 8006b1e:	e764      	b.n	80069ea <_printf_float+0xbe>
 8006b20:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b24:	f240 80e0 	bls.w	8006ce8 <_printf_float+0x3bc>
 8006b28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f7f9 fff2 	bl	8000b18 <__aeabi_dcmpeq>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d034      	beq.n	8006ba2 <_printf_float+0x276>
 8006b38:	4a37      	ldr	r2, [pc, #220]	; (8006c18 <_printf_float+0x2ec>)
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	f43f af51 	beq.w	80069ea <_printf_float+0xbe>
 8006b48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	db02      	blt.n	8006b56 <_printf_float+0x22a>
 8006b50:	6823      	ldr	r3, [r4, #0]
 8006b52:	07d8      	lsls	r0, r3, #31
 8006b54:	d510      	bpl.n	8006b78 <_printf_float+0x24c>
 8006b56:	ee18 3a10 	vmov	r3, s16
 8006b5a:	4652      	mov	r2, sl
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	47b8      	blx	r7
 8006b62:	3001      	adds	r0, #1
 8006b64:	f43f af41 	beq.w	80069ea <_printf_float+0xbe>
 8006b68:	f04f 0800 	mov.w	r8, #0
 8006b6c:	f104 091a 	add.w	r9, r4, #26
 8006b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b72:	3b01      	subs	r3, #1
 8006b74:	4543      	cmp	r3, r8
 8006b76:	dc09      	bgt.n	8006b8c <_printf_float+0x260>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	079b      	lsls	r3, r3, #30
 8006b7c:	f100 8107 	bmi.w	8006d8e <_printf_float+0x462>
 8006b80:	68e0      	ldr	r0, [r4, #12]
 8006b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b84:	4298      	cmp	r0, r3
 8006b86:	bfb8      	it	lt
 8006b88:	4618      	movlt	r0, r3
 8006b8a:	e730      	b.n	80069ee <_printf_float+0xc2>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	464a      	mov	r2, r9
 8006b90:	4631      	mov	r1, r6
 8006b92:	4628      	mov	r0, r5
 8006b94:	47b8      	blx	r7
 8006b96:	3001      	adds	r0, #1
 8006b98:	f43f af27 	beq.w	80069ea <_printf_float+0xbe>
 8006b9c:	f108 0801 	add.w	r8, r8, #1
 8006ba0:	e7e6      	b.n	8006b70 <_printf_float+0x244>
 8006ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dc39      	bgt.n	8006c1c <_printf_float+0x2f0>
 8006ba8:	4a1b      	ldr	r2, [pc, #108]	; (8006c18 <_printf_float+0x2ec>)
 8006baa:	2301      	movs	r3, #1
 8006bac:	4631      	mov	r1, r6
 8006bae:	4628      	mov	r0, r5
 8006bb0:	47b8      	blx	r7
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	f43f af19 	beq.w	80069ea <_printf_float+0xbe>
 8006bb8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	d102      	bne.n	8006bc6 <_printf_float+0x29a>
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	07d9      	lsls	r1, r3, #31
 8006bc4:	d5d8      	bpl.n	8006b78 <_printf_float+0x24c>
 8006bc6:	ee18 3a10 	vmov	r3, s16
 8006bca:	4652      	mov	r2, sl
 8006bcc:	4631      	mov	r1, r6
 8006bce:	4628      	mov	r0, r5
 8006bd0:	47b8      	blx	r7
 8006bd2:	3001      	adds	r0, #1
 8006bd4:	f43f af09 	beq.w	80069ea <_printf_float+0xbe>
 8006bd8:	f04f 0900 	mov.w	r9, #0
 8006bdc:	f104 0a1a 	add.w	sl, r4, #26
 8006be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be2:	425b      	negs	r3, r3
 8006be4:	454b      	cmp	r3, r9
 8006be6:	dc01      	bgt.n	8006bec <_printf_float+0x2c0>
 8006be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bea:	e792      	b.n	8006b12 <_printf_float+0x1e6>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4652      	mov	r2, sl
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f aef7 	beq.w	80069ea <_printf_float+0xbe>
 8006bfc:	f109 0901 	add.w	r9, r9, #1
 8006c00:	e7ee      	b.n	8006be0 <_printf_float+0x2b4>
 8006c02:	bf00      	nop
 8006c04:	7fefffff 	.word	0x7fefffff
 8006c08:	080091c0 	.word	0x080091c0
 8006c0c:	080091c4 	.word	0x080091c4
 8006c10:	080091c8 	.word	0x080091c8
 8006c14:	080091cc 	.word	0x080091cc
 8006c18:	080091d0 	.word	0x080091d0
 8006c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c1e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c20:	429a      	cmp	r2, r3
 8006c22:	bfa8      	it	ge
 8006c24:	461a      	movge	r2, r3
 8006c26:	2a00      	cmp	r2, #0
 8006c28:	4691      	mov	r9, r2
 8006c2a:	dc37      	bgt.n	8006c9c <_printf_float+0x370>
 8006c2c:	f04f 0b00 	mov.w	fp, #0
 8006c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c34:	f104 021a 	add.w	r2, r4, #26
 8006c38:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c3a:	9305      	str	r3, [sp, #20]
 8006c3c:	eba3 0309 	sub.w	r3, r3, r9
 8006c40:	455b      	cmp	r3, fp
 8006c42:	dc33      	bgt.n	8006cac <_printf_float+0x380>
 8006c44:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	db3b      	blt.n	8006cc4 <_printf_float+0x398>
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	07da      	lsls	r2, r3, #31
 8006c50:	d438      	bmi.n	8006cc4 <_printf_float+0x398>
 8006c52:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c56:	eba2 0903 	sub.w	r9, r2, r3
 8006c5a:	9b05      	ldr	r3, [sp, #20]
 8006c5c:	1ad2      	subs	r2, r2, r3
 8006c5e:	4591      	cmp	r9, r2
 8006c60:	bfa8      	it	ge
 8006c62:	4691      	movge	r9, r2
 8006c64:	f1b9 0f00 	cmp.w	r9, #0
 8006c68:	dc35      	bgt.n	8006cd6 <_printf_float+0x3aa>
 8006c6a:	f04f 0800 	mov.w	r8, #0
 8006c6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c72:	f104 0a1a 	add.w	sl, r4, #26
 8006c76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c7a:	1a9b      	subs	r3, r3, r2
 8006c7c:	eba3 0309 	sub.w	r3, r3, r9
 8006c80:	4543      	cmp	r3, r8
 8006c82:	f77f af79 	ble.w	8006b78 <_printf_float+0x24c>
 8006c86:	2301      	movs	r3, #1
 8006c88:	4652      	mov	r2, sl
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4628      	mov	r0, r5
 8006c8e:	47b8      	blx	r7
 8006c90:	3001      	adds	r0, #1
 8006c92:	f43f aeaa 	beq.w	80069ea <_printf_float+0xbe>
 8006c96:	f108 0801 	add.w	r8, r8, #1
 8006c9a:	e7ec      	b.n	8006c76 <_printf_float+0x34a>
 8006c9c:	4613      	mov	r3, r2
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4642      	mov	r2, r8
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	47b8      	blx	r7
 8006ca6:	3001      	adds	r0, #1
 8006ca8:	d1c0      	bne.n	8006c2c <_printf_float+0x300>
 8006caa:	e69e      	b.n	80069ea <_printf_float+0xbe>
 8006cac:	2301      	movs	r3, #1
 8006cae:	4631      	mov	r1, r6
 8006cb0:	4628      	mov	r0, r5
 8006cb2:	9205      	str	r2, [sp, #20]
 8006cb4:	47b8      	blx	r7
 8006cb6:	3001      	adds	r0, #1
 8006cb8:	f43f ae97 	beq.w	80069ea <_printf_float+0xbe>
 8006cbc:	9a05      	ldr	r2, [sp, #20]
 8006cbe:	f10b 0b01 	add.w	fp, fp, #1
 8006cc2:	e7b9      	b.n	8006c38 <_printf_float+0x30c>
 8006cc4:	ee18 3a10 	vmov	r3, s16
 8006cc8:	4652      	mov	r2, sl
 8006cca:	4631      	mov	r1, r6
 8006ccc:	4628      	mov	r0, r5
 8006cce:	47b8      	blx	r7
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d1be      	bne.n	8006c52 <_printf_float+0x326>
 8006cd4:	e689      	b.n	80069ea <_printf_float+0xbe>
 8006cd6:	9a05      	ldr	r2, [sp, #20]
 8006cd8:	464b      	mov	r3, r9
 8006cda:	4442      	add	r2, r8
 8006cdc:	4631      	mov	r1, r6
 8006cde:	4628      	mov	r0, r5
 8006ce0:	47b8      	blx	r7
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	d1c1      	bne.n	8006c6a <_printf_float+0x33e>
 8006ce6:	e680      	b.n	80069ea <_printf_float+0xbe>
 8006ce8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cea:	2a01      	cmp	r2, #1
 8006cec:	dc01      	bgt.n	8006cf2 <_printf_float+0x3c6>
 8006cee:	07db      	lsls	r3, r3, #31
 8006cf0:	d53a      	bpl.n	8006d68 <_printf_float+0x43c>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	4631      	mov	r1, r6
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b8      	blx	r7
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	f43f ae74 	beq.w	80069ea <_printf_float+0xbe>
 8006d02:	ee18 3a10 	vmov	r3, s16
 8006d06:	4652      	mov	r2, sl
 8006d08:	4631      	mov	r1, r6
 8006d0a:	4628      	mov	r0, r5
 8006d0c:	47b8      	blx	r7
 8006d0e:	3001      	adds	r0, #1
 8006d10:	f43f ae6b 	beq.w	80069ea <_printf_float+0xbe>
 8006d14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006d20:	f7f9 fefa 	bl	8000b18 <__aeabi_dcmpeq>
 8006d24:	b9d8      	cbnz	r0, 8006d5e <_printf_float+0x432>
 8006d26:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006d2a:	f108 0201 	add.w	r2, r8, #1
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	d10e      	bne.n	8006d56 <_printf_float+0x42a>
 8006d38:	e657      	b.n	80069ea <_printf_float+0xbe>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4652      	mov	r2, sl
 8006d3e:	4631      	mov	r1, r6
 8006d40:	4628      	mov	r0, r5
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f ae50 	beq.w	80069ea <_printf_float+0xbe>
 8006d4a:	f108 0801 	add.w	r8, r8, #1
 8006d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d50:	3b01      	subs	r3, #1
 8006d52:	4543      	cmp	r3, r8
 8006d54:	dcf1      	bgt.n	8006d3a <_printf_float+0x40e>
 8006d56:	464b      	mov	r3, r9
 8006d58:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006d5c:	e6da      	b.n	8006b14 <_printf_float+0x1e8>
 8006d5e:	f04f 0800 	mov.w	r8, #0
 8006d62:	f104 0a1a 	add.w	sl, r4, #26
 8006d66:	e7f2      	b.n	8006d4e <_printf_float+0x422>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	4642      	mov	r2, r8
 8006d6c:	e7df      	b.n	8006d2e <_printf_float+0x402>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	464a      	mov	r2, r9
 8006d72:	4631      	mov	r1, r6
 8006d74:	4628      	mov	r0, r5
 8006d76:	47b8      	blx	r7
 8006d78:	3001      	adds	r0, #1
 8006d7a:	f43f ae36 	beq.w	80069ea <_printf_float+0xbe>
 8006d7e:	f108 0801 	add.w	r8, r8, #1
 8006d82:	68e3      	ldr	r3, [r4, #12]
 8006d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006d86:	1a5b      	subs	r3, r3, r1
 8006d88:	4543      	cmp	r3, r8
 8006d8a:	dcf0      	bgt.n	8006d6e <_printf_float+0x442>
 8006d8c:	e6f8      	b.n	8006b80 <_printf_float+0x254>
 8006d8e:	f04f 0800 	mov.w	r8, #0
 8006d92:	f104 0919 	add.w	r9, r4, #25
 8006d96:	e7f4      	b.n	8006d82 <_printf_float+0x456>

08006d98 <_printf_common>:
 8006d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d9c:	4616      	mov	r6, r2
 8006d9e:	4699      	mov	r9, r3
 8006da0:	688a      	ldr	r2, [r1, #8]
 8006da2:	690b      	ldr	r3, [r1, #16]
 8006da4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006da8:	4293      	cmp	r3, r2
 8006daa:	bfb8      	it	lt
 8006dac:	4613      	movlt	r3, r2
 8006dae:	6033      	str	r3, [r6, #0]
 8006db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006db4:	4607      	mov	r7, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	b10a      	cbz	r2, 8006dbe <_printf_common+0x26>
 8006dba:	3301      	adds	r3, #1
 8006dbc:	6033      	str	r3, [r6, #0]
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	0699      	lsls	r1, r3, #26
 8006dc2:	bf42      	ittt	mi
 8006dc4:	6833      	ldrmi	r3, [r6, #0]
 8006dc6:	3302      	addmi	r3, #2
 8006dc8:	6033      	strmi	r3, [r6, #0]
 8006dca:	6825      	ldr	r5, [r4, #0]
 8006dcc:	f015 0506 	ands.w	r5, r5, #6
 8006dd0:	d106      	bne.n	8006de0 <_printf_common+0x48>
 8006dd2:	f104 0a19 	add.w	sl, r4, #25
 8006dd6:	68e3      	ldr	r3, [r4, #12]
 8006dd8:	6832      	ldr	r2, [r6, #0]
 8006dda:	1a9b      	subs	r3, r3, r2
 8006ddc:	42ab      	cmp	r3, r5
 8006dde:	dc26      	bgt.n	8006e2e <_printf_common+0x96>
 8006de0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006de4:	1e13      	subs	r3, r2, #0
 8006de6:	6822      	ldr	r2, [r4, #0]
 8006de8:	bf18      	it	ne
 8006dea:	2301      	movne	r3, #1
 8006dec:	0692      	lsls	r2, r2, #26
 8006dee:	d42b      	bmi.n	8006e48 <_printf_common+0xb0>
 8006df0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006df4:	4649      	mov	r1, r9
 8006df6:	4638      	mov	r0, r7
 8006df8:	47c0      	blx	r8
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	d01e      	beq.n	8006e3c <_printf_common+0xa4>
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	6922      	ldr	r2, [r4, #16]
 8006e02:	f003 0306 	and.w	r3, r3, #6
 8006e06:	2b04      	cmp	r3, #4
 8006e08:	bf02      	ittt	eq
 8006e0a:	68e5      	ldreq	r5, [r4, #12]
 8006e0c:	6833      	ldreq	r3, [r6, #0]
 8006e0e:	1aed      	subeq	r5, r5, r3
 8006e10:	68a3      	ldr	r3, [r4, #8]
 8006e12:	bf0c      	ite	eq
 8006e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e18:	2500      	movne	r5, #0
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	bfc4      	itt	gt
 8006e1e:	1a9b      	subgt	r3, r3, r2
 8006e20:	18ed      	addgt	r5, r5, r3
 8006e22:	2600      	movs	r6, #0
 8006e24:	341a      	adds	r4, #26
 8006e26:	42b5      	cmp	r5, r6
 8006e28:	d11a      	bne.n	8006e60 <_printf_common+0xc8>
 8006e2a:	2000      	movs	r0, #0
 8006e2c:	e008      	b.n	8006e40 <_printf_common+0xa8>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	4652      	mov	r2, sl
 8006e32:	4649      	mov	r1, r9
 8006e34:	4638      	mov	r0, r7
 8006e36:	47c0      	blx	r8
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d103      	bne.n	8006e44 <_printf_common+0xac>
 8006e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e44:	3501      	adds	r5, #1
 8006e46:	e7c6      	b.n	8006dd6 <_printf_common+0x3e>
 8006e48:	18e1      	adds	r1, r4, r3
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	2030      	movs	r0, #48	; 0x30
 8006e4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e52:	4422      	add	r2, r4
 8006e54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e5c:	3302      	adds	r3, #2
 8006e5e:	e7c7      	b.n	8006df0 <_printf_common+0x58>
 8006e60:	2301      	movs	r3, #1
 8006e62:	4622      	mov	r2, r4
 8006e64:	4649      	mov	r1, r9
 8006e66:	4638      	mov	r0, r7
 8006e68:	47c0      	blx	r8
 8006e6a:	3001      	adds	r0, #1
 8006e6c:	d0e6      	beq.n	8006e3c <_printf_common+0xa4>
 8006e6e:	3601      	adds	r6, #1
 8006e70:	e7d9      	b.n	8006e26 <_printf_common+0x8e>
	...

08006e74 <_printf_i>:
 8006e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e78:	7e0f      	ldrb	r7, [r1, #24]
 8006e7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e7c:	2f78      	cmp	r7, #120	; 0x78
 8006e7e:	4691      	mov	r9, r2
 8006e80:	4680      	mov	r8, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	469a      	mov	sl, r3
 8006e86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e8a:	d807      	bhi.n	8006e9c <_printf_i+0x28>
 8006e8c:	2f62      	cmp	r7, #98	; 0x62
 8006e8e:	d80a      	bhi.n	8006ea6 <_printf_i+0x32>
 8006e90:	2f00      	cmp	r7, #0
 8006e92:	f000 80d4 	beq.w	800703e <_printf_i+0x1ca>
 8006e96:	2f58      	cmp	r7, #88	; 0x58
 8006e98:	f000 80c0 	beq.w	800701c <_printf_i+0x1a8>
 8006e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ea0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ea4:	e03a      	b.n	8006f1c <_printf_i+0xa8>
 8006ea6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006eaa:	2b15      	cmp	r3, #21
 8006eac:	d8f6      	bhi.n	8006e9c <_printf_i+0x28>
 8006eae:	a101      	add	r1, pc, #4	; (adr r1, 8006eb4 <_printf_i+0x40>)
 8006eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006eb4:	08006f0d 	.word	0x08006f0d
 8006eb8:	08006f21 	.word	0x08006f21
 8006ebc:	08006e9d 	.word	0x08006e9d
 8006ec0:	08006e9d 	.word	0x08006e9d
 8006ec4:	08006e9d 	.word	0x08006e9d
 8006ec8:	08006e9d 	.word	0x08006e9d
 8006ecc:	08006f21 	.word	0x08006f21
 8006ed0:	08006e9d 	.word	0x08006e9d
 8006ed4:	08006e9d 	.word	0x08006e9d
 8006ed8:	08006e9d 	.word	0x08006e9d
 8006edc:	08006e9d 	.word	0x08006e9d
 8006ee0:	08007025 	.word	0x08007025
 8006ee4:	08006f4d 	.word	0x08006f4d
 8006ee8:	08006fdf 	.word	0x08006fdf
 8006eec:	08006e9d 	.word	0x08006e9d
 8006ef0:	08006e9d 	.word	0x08006e9d
 8006ef4:	08007047 	.word	0x08007047
 8006ef8:	08006e9d 	.word	0x08006e9d
 8006efc:	08006f4d 	.word	0x08006f4d
 8006f00:	08006e9d 	.word	0x08006e9d
 8006f04:	08006e9d 	.word	0x08006e9d
 8006f08:	08006fe7 	.word	0x08006fe7
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	1d1a      	adds	r2, r3, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	602a      	str	r2, [r5, #0]
 8006f14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e09f      	b.n	8007060 <_printf_i+0x1ec>
 8006f20:	6820      	ldr	r0, [r4, #0]
 8006f22:	682b      	ldr	r3, [r5, #0]
 8006f24:	0607      	lsls	r7, r0, #24
 8006f26:	f103 0104 	add.w	r1, r3, #4
 8006f2a:	6029      	str	r1, [r5, #0]
 8006f2c:	d501      	bpl.n	8006f32 <_printf_i+0xbe>
 8006f2e:	681e      	ldr	r6, [r3, #0]
 8006f30:	e003      	b.n	8006f3a <_printf_i+0xc6>
 8006f32:	0646      	lsls	r6, r0, #25
 8006f34:	d5fb      	bpl.n	8006f2e <_printf_i+0xba>
 8006f36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	da03      	bge.n	8006f46 <_printf_i+0xd2>
 8006f3e:	232d      	movs	r3, #45	; 0x2d
 8006f40:	4276      	negs	r6, r6
 8006f42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f46:	485a      	ldr	r0, [pc, #360]	; (80070b0 <_printf_i+0x23c>)
 8006f48:	230a      	movs	r3, #10
 8006f4a:	e012      	b.n	8006f72 <_printf_i+0xfe>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	6820      	ldr	r0, [r4, #0]
 8006f50:	1d19      	adds	r1, r3, #4
 8006f52:	6029      	str	r1, [r5, #0]
 8006f54:	0605      	lsls	r5, r0, #24
 8006f56:	d501      	bpl.n	8006f5c <_printf_i+0xe8>
 8006f58:	681e      	ldr	r6, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <_printf_i+0xee>
 8006f5c:	0641      	lsls	r1, r0, #25
 8006f5e:	d5fb      	bpl.n	8006f58 <_printf_i+0xe4>
 8006f60:	881e      	ldrh	r6, [r3, #0]
 8006f62:	4853      	ldr	r0, [pc, #332]	; (80070b0 <_printf_i+0x23c>)
 8006f64:	2f6f      	cmp	r7, #111	; 0x6f
 8006f66:	bf0c      	ite	eq
 8006f68:	2308      	moveq	r3, #8
 8006f6a:	230a      	movne	r3, #10
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f72:	6865      	ldr	r5, [r4, #4]
 8006f74:	60a5      	str	r5, [r4, #8]
 8006f76:	2d00      	cmp	r5, #0
 8006f78:	bfa2      	ittt	ge
 8006f7a:	6821      	ldrge	r1, [r4, #0]
 8006f7c:	f021 0104 	bicge.w	r1, r1, #4
 8006f80:	6021      	strge	r1, [r4, #0]
 8006f82:	b90e      	cbnz	r6, 8006f88 <_printf_i+0x114>
 8006f84:	2d00      	cmp	r5, #0
 8006f86:	d04b      	beq.n	8007020 <_printf_i+0x1ac>
 8006f88:	4615      	mov	r5, r2
 8006f8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f8e:	fb03 6711 	mls	r7, r3, r1, r6
 8006f92:	5dc7      	ldrb	r7, [r0, r7]
 8006f94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f98:	4637      	mov	r7, r6
 8006f9a:	42bb      	cmp	r3, r7
 8006f9c:	460e      	mov	r6, r1
 8006f9e:	d9f4      	bls.n	8006f8a <_printf_i+0x116>
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	d10b      	bne.n	8006fbc <_printf_i+0x148>
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	07de      	lsls	r6, r3, #31
 8006fa8:	d508      	bpl.n	8006fbc <_printf_i+0x148>
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	6861      	ldr	r1, [r4, #4]
 8006fae:	4299      	cmp	r1, r3
 8006fb0:	bfde      	ittt	le
 8006fb2:	2330      	movle	r3, #48	; 0x30
 8006fb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006fb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006fbc:	1b52      	subs	r2, r2, r5
 8006fbe:	6122      	str	r2, [r4, #16]
 8006fc0:	f8cd a000 	str.w	sl, [sp]
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	aa03      	add	r2, sp, #12
 8006fc8:	4621      	mov	r1, r4
 8006fca:	4640      	mov	r0, r8
 8006fcc:	f7ff fee4 	bl	8006d98 <_printf_common>
 8006fd0:	3001      	adds	r0, #1
 8006fd2:	d14a      	bne.n	800706a <_printf_i+0x1f6>
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd8:	b004      	add	sp, #16
 8006fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	f043 0320 	orr.w	r3, r3, #32
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	4833      	ldr	r0, [pc, #204]	; (80070b4 <_printf_i+0x240>)
 8006fe8:	2778      	movs	r7, #120	; 0x78
 8006fea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	6829      	ldr	r1, [r5, #0]
 8006ff2:	061f      	lsls	r7, r3, #24
 8006ff4:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ff8:	d402      	bmi.n	8007000 <_printf_i+0x18c>
 8006ffa:	065f      	lsls	r7, r3, #25
 8006ffc:	bf48      	it	mi
 8006ffe:	b2b6      	uxthmi	r6, r6
 8007000:	07df      	lsls	r7, r3, #31
 8007002:	bf48      	it	mi
 8007004:	f043 0320 	orrmi.w	r3, r3, #32
 8007008:	6029      	str	r1, [r5, #0]
 800700a:	bf48      	it	mi
 800700c:	6023      	strmi	r3, [r4, #0]
 800700e:	b91e      	cbnz	r6, 8007018 <_printf_i+0x1a4>
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	f023 0320 	bic.w	r3, r3, #32
 8007016:	6023      	str	r3, [r4, #0]
 8007018:	2310      	movs	r3, #16
 800701a:	e7a7      	b.n	8006f6c <_printf_i+0xf8>
 800701c:	4824      	ldr	r0, [pc, #144]	; (80070b0 <_printf_i+0x23c>)
 800701e:	e7e4      	b.n	8006fea <_printf_i+0x176>
 8007020:	4615      	mov	r5, r2
 8007022:	e7bd      	b.n	8006fa0 <_printf_i+0x12c>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	6826      	ldr	r6, [r4, #0]
 8007028:	6961      	ldr	r1, [r4, #20]
 800702a:	1d18      	adds	r0, r3, #4
 800702c:	6028      	str	r0, [r5, #0]
 800702e:	0635      	lsls	r5, r6, #24
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	d501      	bpl.n	8007038 <_printf_i+0x1c4>
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	e002      	b.n	800703e <_printf_i+0x1ca>
 8007038:	0670      	lsls	r0, r6, #25
 800703a:	d5fb      	bpl.n	8007034 <_printf_i+0x1c0>
 800703c:	8019      	strh	r1, [r3, #0]
 800703e:	2300      	movs	r3, #0
 8007040:	6123      	str	r3, [r4, #16]
 8007042:	4615      	mov	r5, r2
 8007044:	e7bc      	b.n	8006fc0 <_printf_i+0x14c>
 8007046:	682b      	ldr	r3, [r5, #0]
 8007048:	1d1a      	adds	r2, r3, #4
 800704a:	602a      	str	r2, [r5, #0]
 800704c:	681d      	ldr	r5, [r3, #0]
 800704e:	6862      	ldr	r2, [r4, #4]
 8007050:	2100      	movs	r1, #0
 8007052:	4628      	mov	r0, r5
 8007054:	f7f9 f8e4 	bl	8000220 <memchr>
 8007058:	b108      	cbz	r0, 800705e <_printf_i+0x1ea>
 800705a:	1b40      	subs	r0, r0, r5
 800705c:	6060      	str	r0, [r4, #4]
 800705e:	6863      	ldr	r3, [r4, #4]
 8007060:	6123      	str	r3, [r4, #16]
 8007062:	2300      	movs	r3, #0
 8007064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007068:	e7aa      	b.n	8006fc0 <_printf_i+0x14c>
 800706a:	6923      	ldr	r3, [r4, #16]
 800706c:	462a      	mov	r2, r5
 800706e:	4649      	mov	r1, r9
 8007070:	4640      	mov	r0, r8
 8007072:	47d0      	blx	sl
 8007074:	3001      	adds	r0, #1
 8007076:	d0ad      	beq.n	8006fd4 <_printf_i+0x160>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	079b      	lsls	r3, r3, #30
 800707c:	d413      	bmi.n	80070a6 <_printf_i+0x232>
 800707e:	68e0      	ldr	r0, [r4, #12]
 8007080:	9b03      	ldr	r3, [sp, #12]
 8007082:	4298      	cmp	r0, r3
 8007084:	bfb8      	it	lt
 8007086:	4618      	movlt	r0, r3
 8007088:	e7a6      	b.n	8006fd8 <_printf_i+0x164>
 800708a:	2301      	movs	r3, #1
 800708c:	4632      	mov	r2, r6
 800708e:	4649      	mov	r1, r9
 8007090:	4640      	mov	r0, r8
 8007092:	47d0      	blx	sl
 8007094:	3001      	adds	r0, #1
 8007096:	d09d      	beq.n	8006fd4 <_printf_i+0x160>
 8007098:	3501      	adds	r5, #1
 800709a:	68e3      	ldr	r3, [r4, #12]
 800709c:	9903      	ldr	r1, [sp, #12]
 800709e:	1a5b      	subs	r3, r3, r1
 80070a0:	42ab      	cmp	r3, r5
 80070a2:	dcf2      	bgt.n	800708a <_printf_i+0x216>
 80070a4:	e7eb      	b.n	800707e <_printf_i+0x20a>
 80070a6:	2500      	movs	r5, #0
 80070a8:	f104 0619 	add.w	r6, r4, #25
 80070ac:	e7f5      	b.n	800709a <_printf_i+0x226>
 80070ae:	bf00      	nop
 80070b0:	080091d2 	.word	0x080091d2
 80070b4:	080091e3 	.word	0x080091e3

080070b8 <std>:
 80070b8:	2300      	movs	r3, #0
 80070ba:	b510      	push	{r4, lr}
 80070bc:	4604      	mov	r4, r0
 80070be:	e9c0 3300 	strd	r3, r3, [r0]
 80070c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070c6:	6083      	str	r3, [r0, #8]
 80070c8:	8181      	strh	r1, [r0, #12]
 80070ca:	6643      	str	r3, [r0, #100]	; 0x64
 80070cc:	81c2      	strh	r2, [r0, #14]
 80070ce:	6183      	str	r3, [r0, #24]
 80070d0:	4619      	mov	r1, r3
 80070d2:	2208      	movs	r2, #8
 80070d4:	305c      	adds	r0, #92	; 0x5c
 80070d6:	f000 f8f4 	bl	80072c2 <memset>
 80070da:	4b0d      	ldr	r3, [pc, #52]	; (8007110 <std+0x58>)
 80070dc:	6263      	str	r3, [r4, #36]	; 0x24
 80070de:	4b0d      	ldr	r3, [pc, #52]	; (8007114 <std+0x5c>)
 80070e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80070e2:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <std+0x60>)
 80070e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070e6:	4b0d      	ldr	r3, [pc, #52]	; (800711c <std+0x64>)
 80070e8:	6323      	str	r3, [r4, #48]	; 0x30
 80070ea:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <std+0x68>)
 80070ec:	6224      	str	r4, [r4, #32]
 80070ee:	429c      	cmp	r4, r3
 80070f0:	d006      	beq.n	8007100 <std+0x48>
 80070f2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80070f6:	4294      	cmp	r4, r2
 80070f8:	d002      	beq.n	8007100 <std+0x48>
 80070fa:	33d0      	adds	r3, #208	; 0xd0
 80070fc:	429c      	cmp	r4, r3
 80070fe:	d105      	bne.n	800710c <std+0x54>
 8007100:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007108:	f000 b958 	b.w	80073bc <__retarget_lock_init_recursive>
 800710c:	bd10      	pop	{r4, pc}
 800710e:	bf00      	nop
 8007110:	0800723d 	.word	0x0800723d
 8007114:	0800725f 	.word	0x0800725f
 8007118:	08007297 	.word	0x08007297
 800711c:	080072bb 	.word	0x080072bb
 8007120:	20000624 	.word	0x20000624

08007124 <stdio_exit_handler>:
 8007124:	4a02      	ldr	r2, [pc, #8]	; (8007130 <stdio_exit_handler+0xc>)
 8007126:	4903      	ldr	r1, [pc, #12]	; (8007134 <stdio_exit_handler+0x10>)
 8007128:	4803      	ldr	r0, [pc, #12]	; (8007138 <stdio_exit_handler+0x14>)
 800712a:	f000 b869 	b.w	8007200 <_fwalk_sglue>
 800712e:	bf00      	nop
 8007130:	20000008 	.word	0x20000008
 8007134:	08008ad9 	.word	0x08008ad9
 8007138:	20000014 	.word	0x20000014

0800713c <cleanup_stdio>:
 800713c:	6841      	ldr	r1, [r0, #4]
 800713e:	4b0c      	ldr	r3, [pc, #48]	; (8007170 <cleanup_stdio+0x34>)
 8007140:	4299      	cmp	r1, r3
 8007142:	b510      	push	{r4, lr}
 8007144:	4604      	mov	r4, r0
 8007146:	d001      	beq.n	800714c <cleanup_stdio+0x10>
 8007148:	f001 fcc6 	bl	8008ad8 <_fflush_r>
 800714c:	68a1      	ldr	r1, [r4, #8]
 800714e:	4b09      	ldr	r3, [pc, #36]	; (8007174 <cleanup_stdio+0x38>)
 8007150:	4299      	cmp	r1, r3
 8007152:	d002      	beq.n	800715a <cleanup_stdio+0x1e>
 8007154:	4620      	mov	r0, r4
 8007156:	f001 fcbf 	bl	8008ad8 <_fflush_r>
 800715a:	68e1      	ldr	r1, [r4, #12]
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <cleanup_stdio+0x3c>)
 800715e:	4299      	cmp	r1, r3
 8007160:	d004      	beq.n	800716c <cleanup_stdio+0x30>
 8007162:	4620      	mov	r0, r4
 8007164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007168:	f001 bcb6 	b.w	8008ad8 <_fflush_r>
 800716c:	bd10      	pop	{r4, pc}
 800716e:	bf00      	nop
 8007170:	20000624 	.word	0x20000624
 8007174:	2000068c 	.word	0x2000068c
 8007178:	200006f4 	.word	0x200006f4

0800717c <global_stdio_init.part.0>:
 800717c:	b510      	push	{r4, lr}
 800717e:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <global_stdio_init.part.0+0x30>)
 8007180:	4c0b      	ldr	r4, [pc, #44]	; (80071b0 <global_stdio_init.part.0+0x34>)
 8007182:	4a0c      	ldr	r2, [pc, #48]	; (80071b4 <global_stdio_init.part.0+0x38>)
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	4620      	mov	r0, r4
 8007188:	2200      	movs	r2, #0
 800718a:	2104      	movs	r1, #4
 800718c:	f7ff ff94 	bl	80070b8 <std>
 8007190:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007194:	2201      	movs	r2, #1
 8007196:	2109      	movs	r1, #9
 8007198:	f7ff ff8e 	bl	80070b8 <std>
 800719c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80071a0:	2202      	movs	r2, #2
 80071a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a6:	2112      	movs	r1, #18
 80071a8:	f7ff bf86 	b.w	80070b8 <std>
 80071ac:	2000075c 	.word	0x2000075c
 80071b0:	20000624 	.word	0x20000624
 80071b4:	08007125 	.word	0x08007125

080071b8 <__sfp_lock_acquire>:
 80071b8:	4801      	ldr	r0, [pc, #4]	; (80071c0 <__sfp_lock_acquire+0x8>)
 80071ba:	f000 b900 	b.w	80073be <__retarget_lock_acquire_recursive>
 80071be:	bf00      	nop
 80071c0:	20000765 	.word	0x20000765

080071c4 <__sfp_lock_release>:
 80071c4:	4801      	ldr	r0, [pc, #4]	; (80071cc <__sfp_lock_release+0x8>)
 80071c6:	f000 b8fb 	b.w	80073c0 <__retarget_lock_release_recursive>
 80071ca:	bf00      	nop
 80071cc:	20000765 	.word	0x20000765

080071d0 <__sinit>:
 80071d0:	b510      	push	{r4, lr}
 80071d2:	4604      	mov	r4, r0
 80071d4:	f7ff fff0 	bl	80071b8 <__sfp_lock_acquire>
 80071d8:	6a23      	ldr	r3, [r4, #32]
 80071da:	b11b      	cbz	r3, 80071e4 <__sinit+0x14>
 80071dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e0:	f7ff bff0 	b.w	80071c4 <__sfp_lock_release>
 80071e4:	4b04      	ldr	r3, [pc, #16]	; (80071f8 <__sinit+0x28>)
 80071e6:	6223      	str	r3, [r4, #32]
 80071e8:	4b04      	ldr	r3, [pc, #16]	; (80071fc <__sinit+0x2c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1f5      	bne.n	80071dc <__sinit+0xc>
 80071f0:	f7ff ffc4 	bl	800717c <global_stdio_init.part.0>
 80071f4:	e7f2      	b.n	80071dc <__sinit+0xc>
 80071f6:	bf00      	nop
 80071f8:	0800713d 	.word	0x0800713d
 80071fc:	2000075c 	.word	0x2000075c

08007200 <_fwalk_sglue>:
 8007200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007204:	4607      	mov	r7, r0
 8007206:	4688      	mov	r8, r1
 8007208:	4614      	mov	r4, r2
 800720a:	2600      	movs	r6, #0
 800720c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007210:	f1b9 0901 	subs.w	r9, r9, #1
 8007214:	d505      	bpl.n	8007222 <_fwalk_sglue+0x22>
 8007216:	6824      	ldr	r4, [r4, #0]
 8007218:	2c00      	cmp	r4, #0
 800721a:	d1f7      	bne.n	800720c <_fwalk_sglue+0xc>
 800721c:	4630      	mov	r0, r6
 800721e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007222:	89ab      	ldrh	r3, [r5, #12]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d907      	bls.n	8007238 <_fwalk_sglue+0x38>
 8007228:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800722c:	3301      	adds	r3, #1
 800722e:	d003      	beq.n	8007238 <_fwalk_sglue+0x38>
 8007230:	4629      	mov	r1, r5
 8007232:	4638      	mov	r0, r7
 8007234:	47c0      	blx	r8
 8007236:	4306      	orrs	r6, r0
 8007238:	3568      	adds	r5, #104	; 0x68
 800723a:	e7e9      	b.n	8007210 <_fwalk_sglue+0x10>

0800723c <__sread>:
 800723c:	b510      	push	{r4, lr}
 800723e:	460c      	mov	r4, r1
 8007240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007244:	f000 f86c 	bl	8007320 <_read_r>
 8007248:	2800      	cmp	r0, #0
 800724a:	bfab      	itete	ge
 800724c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800724e:	89a3      	ldrhlt	r3, [r4, #12]
 8007250:	181b      	addge	r3, r3, r0
 8007252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007256:	bfac      	ite	ge
 8007258:	6563      	strge	r3, [r4, #84]	; 0x54
 800725a:	81a3      	strhlt	r3, [r4, #12]
 800725c:	bd10      	pop	{r4, pc}

0800725e <__swrite>:
 800725e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007262:	461f      	mov	r7, r3
 8007264:	898b      	ldrh	r3, [r1, #12]
 8007266:	05db      	lsls	r3, r3, #23
 8007268:	4605      	mov	r5, r0
 800726a:	460c      	mov	r4, r1
 800726c:	4616      	mov	r6, r2
 800726e:	d505      	bpl.n	800727c <__swrite+0x1e>
 8007270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007274:	2302      	movs	r3, #2
 8007276:	2200      	movs	r2, #0
 8007278:	f000 f840 	bl	80072fc <_lseek_r>
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007286:	81a3      	strh	r3, [r4, #12]
 8007288:	4632      	mov	r2, r6
 800728a:	463b      	mov	r3, r7
 800728c:	4628      	mov	r0, r5
 800728e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007292:	f000 b857 	b.w	8007344 <_write_r>

08007296 <__sseek>:
 8007296:	b510      	push	{r4, lr}
 8007298:	460c      	mov	r4, r1
 800729a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800729e:	f000 f82d 	bl	80072fc <_lseek_r>
 80072a2:	1c43      	adds	r3, r0, #1
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	bf15      	itete	ne
 80072a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80072aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072b2:	81a3      	strheq	r3, [r4, #12]
 80072b4:	bf18      	it	ne
 80072b6:	81a3      	strhne	r3, [r4, #12]
 80072b8:	bd10      	pop	{r4, pc}

080072ba <__sclose>:
 80072ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072be:	f000 b80d 	b.w	80072dc <_close_r>

080072c2 <memset>:
 80072c2:	4402      	add	r2, r0
 80072c4:	4603      	mov	r3, r0
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d100      	bne.n	80072cc <memset+0xa>
 80072ca:	4770      	bx	lr
 80072cc:	f803 1b01 	strb.w	r1, [r3], #1
 80072d0:	e7f9      	b.n	80072c6 <memset+0x4>
	...

080072d4 <_localeconv_r>:
 80072d4:	4800      	ldr	r0, [pc, #0]	; (80072d8 <_localeconv_r+0x4>)
 80072d6:	4770      	bx	lr
 80072d8:	20000154 	.word	0x20000154

080072dc <_close_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d06      	ldr	r5, [pc, #24]	; (80072f8 <_close_r+0x1c>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fb f8d5 	bl	8002496 <_close>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_close_r+0x1a>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_close_r+0x1a>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000760 	.word	0x20000760

080072fc <_lseek_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d07      	ldr	r5, [pc, #28]	; (800731c <_lseek_r+0x20>)
 8007300:	4604      	mov	r4, r0
 8007302:	4608      	mov	r0, r1
 8007304:	4611      	mov	r1, r2
 8007306:	2200      	movs	r2, #0
 8007308:	602a      	str	r2, [r5, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	f7fb f8ea 	bl	80024e4 <_lseek>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_lseek_r+0x1e>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_lseek_r+0x1e>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	20000760 	.word	0x20000760

08007320 <_read_r>:
 8007320:	b538      	push	{r3, r4, r5, lr}
 8007322:	4d07      	ldr	r5, [pc, #28]	; (8007340 <_read_r+0x20>)
 8007324:	4604      	mov	r4, r0
 8007326:	4608      	mov	r0, r1
 8007328:	4611      	mov	r1, r2
 800732a:	2200      	movs	r2, #0
 800732c:	602a      	str	r2, [r5, #0]
 800732e:	461a      	mov	r2, r3
 8007330:	f7fb f878 	bl	8002424 <_read>
 8007334:	1c43      	adds	r3, r0, #1
 8007336:	d102      	bne.n	800733e <_read_r+0x1e>
 8007338:	682b      	ldr	r3, [r5, #0]
 800733a:	b103      	cbz	r3, 800733e <_read_r+0x1e>
 800733c:	6023      	str	r3, [r4, #0]
 800733e:	bd38      	pop	{r3, r4, r5, pc}
 8007340:	20000760 	.word	0x20000760

08007344 <_write_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4d07      	ldr	r5, [pc, #28]	; (8007364 <_write_r+0x20>)
 8007348:	4604      	mov	r4, r0
 800734a:	4608      	mov	r0, r1
 800734c:	4611      	mov	r1, r2
 800734e:	2200      	movs	r2, #0
 8007350:	602a      	str	r2, [r5, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	f7fb f883 	bl	800245e <_write>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d102      	bne.n	8007362 <_write_r+0x1e>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	b103      	cbz	r3, 8007362 <_write_r+0x1e>
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	20000760 	.word	0x20000760

08007368 <__errno>:
 8007368:	4b01      	ldr	r3, [pc, #4]	; (8007370 <__errno+0x8>)
 800736a:	6818      	ldr	r0, [r3, #0]
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	20000060 	.word	0x20000060

08007374 <__libc_init_array>:
 8007374:	b570      	push	{r4, r5, r6, lr}
 8007376:	4d0d      	ldr	r5, [pc, #52]	; (80073ac <__libc_init_array+0x38>)
 8007378:	4c0d      	ldr	r4, [pc, #52]	; (80073b0 <__libc_init_array+0x3c>)
 800737a:	1b64      	subs	r4, r4, r5
 800737c:	10a4      	asrs	r4, r4, #2
 800737e:	2600      	movs	r6, #0
 8007380:	42a6      	cmp	r6, r4
 8007382:	d109      	bne.n	8007398 <__libc_init_array+0x24>
 8007384:	4d0b      	ldr	r5, [pc, #44]	; (80073b4 <__libc_init_array+0x40>)
 8007386:	4c0c      	ldr	r4, [pc, #48]	; (80073b8 <__libc_init_array+0x44>)
 8007388:	f001 feec 	bl	8009164 <_init>
 800738c:	1b64      	subs	r4, r4, r5
 800738e:	10a4      	asrs	r4, r4, #2
 8007390:	2600      	movs	r6, #0
 8007392:	42a6      	cmp	r6, r4
 8007394:	d105      	bne.n	80073a2 <__libc_init_array+0x2e>
 8007396:	bd70      	pop	{r4, r5, r6, pc}
 8007398:	f855 3b04 	ldr.w	r3, [r5], #4
 800739c:	4798      	blx	r3
 800739e:	3601      	adds	r6, #1
 80073a0:	e7ee      	b.n	8007380 <__libc_init_array+0xc>
 80073a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80073a6:	4798      	blx	r3
 80073a8:	3601      	adds	r6, #1
 80073aa:	e7f2      	b.n	8007392 <__libc_init_array+0x1e>
 80073ac:	0800953c 	.word	0x0800953c
 80073b0:	0800953c 	.word	0x0800953c
 80073b4:	0800953c 	.word	0x0800953c
 80073b8:	08009540 	.word	0x08009540

080073bc <__retarget_lock_init_recursive>:
 80073bc:	4770      	bx	lr

080073be <__retarget_lock_acquire_recursive>:
 80073be:	4770      	bx	lr

080073c0 <__retarget_lock_release_recursive>:
 80073c0:	4770      	bx	lr

080073c2 <memcpy>:
 80073c2:	440a      	add	r2, r1
 80073c4:	4291      	cmp	r1, r2
 80073c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80073ca:	d100      	bne.n	80073ce <memcpy+0xc>
 80073cc:	4770      	bx	lr
 80073ce:	b510      	push	{r4, lr}
 80073d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073d8:	4291      	cmp	r1, r2
 80073da:	d1f9      	bne.n	80073d0 <memcpy+0xe>
 80073dc:	bd10      	pop	{r4, pc}

080073de <quorem>:
 80073de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e2:	6903      	ldr	r3, [r0, #16]
 80073e4:	690c      	ldr	r4, [r1, #16]
 80073e6:	42a3      	cmp	r3, r4
 80073e8:	4607      	mov	r7, r0
 80073ea:	db7e      	blt.n	80074ea <quorem+0x10c>
 80073ec:	3c01      	subs	r4, #1
 80073ee:	f101 0814 	add.w	r8, r1, #20
 80073f2:	f100 0514 	add.w	r5, r0, #20
 80073f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007404:	3301      	adds	r3, #1
 8007406:	429a      	cmp	r2, r3
 8007408:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800740c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007410:	fbb2 f6f3 	udiv	r6, r2, r3
 8007414:	d331      	bcc.n	800747a <quorem+0x9c>
 8007416:	f04f 0e00 	mov.w	lr, #0
 800741a:	4640      	mov	r0, r8
 800741c:	46ac      	mov	ip, r5
 800741e:	46f2      	mov	sl, lr
 8007420:	f850 2b04 	ldr.w	r2, [r0], #4
 8007424:	b293      	uxth	r3, r2
 8007426:	fb06 e303 	mla	r3, r6, r3, lr
 800742a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800742e:	0c1a      	lsrs	r2, r3, #16
 8007430:	b29b      	uxth	r3, r3
 8007432:	ebaa 0303 	sub.w	r3, sl, r3
 8007436:	f8dc a000 	ldr.w	sl, [ip]
 800743a:	fa13 f38a 	uxtah	r3, r3, sl
 800743e:	fb06 220e 	mla	r2, r6, lr, r2
 8007442:	9300      	str	r3, [sp, #0]
 8007444:	9b00      	ldr	r3, [sp, #0]
 8007446:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800744a:	b292      	uxth	r2, r2
 800744c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007450:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007454:	f8bd 3000 	ldrh.w	r3, [sp]
 8007458:	4581      	cmp	r9, r0
 800745a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800745e:	f84c 3b04 	str.w	r3, [ip], #4
 8007462:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007466:	d2db      	bcs.n	8007420 <quorem+0x42>
 8007468:	f855 300b 	ldr.w	r3, [r5, fp]
 800746c:	b92b      	cbnz	r3, 800747a <quorem+0x9c>
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	3b04      	subs	r3, #4
 8007472:	429d      	cmp	r5, r3
 8007474:	461a      	mov	r2, r3
 8007476:	d32c      	bcc.n	80074d2 <quorem+0xf4>
 8007478:	613c      	str	r4, [r7, #16]
 800747a:	4638      	mov	r0, r7
 800747c:	f001 f9a6 	bl	80087cc <__mcmp>
 8007480:	2800      	cmp	r0, #0
 8007482:	db22      	blt.n	80074ca <quorem+0xec>
 8007484:	3601      	adds	r6, #1
 8007486:	4629      	mov	r1, r5
 8007488:	2000      	movs	r0, #0
 800748a:	f858 2b04 	ldr.w	r2, [r8], #4
 800748e:	f8d1 c000 	ldr.w	ip, [r1]
 8007492:	b293      	uxth	r3, r2
 8007494:	1ac3      	subs	r3, r0, r3
 8007496:	0c12      	lsrs	r2, r2, #16
 8007498:	fa13 f38c 	uxtah	r3, r3, ip
 800749c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80074a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80074aa:	45c1      	cmp	r9, r8
 80074ac:	f841 3b04 	str.w	r3, [r1], #4
 80074b0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074b4:	d2e9      	bcs.n	800748a <quorem+0xac>
 80074b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074be:	b922      	cbnz	r2, 80074ca <quorem+0xec>
 80074c0:	3b04      	subs	r3, #4
 80074c2:	429d      	cmp	r5, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	d30a      	bcc.n	80074de <quorem+0x100>
 80074c8:	613c      	str	r4, [r7, #16]
 80074ca:	4630      	mov	r0, r6
 80074cc:	b003      	add	sp, #12
 80074ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074d2:	6812      	ldr	r2, [r2, #0]
 80074d4:	3b04      	subs	r3, #4
 80074d6:	2a00      	cmp	r2, #0
 80074d8:	d1ce      	bne.n	8007478 <quorem+0x9a>
 80074da:	3c01      	subs	r4, #1
 80074dc:	e7c9      	b.n	8007472 <quorem+0x94>
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	3b04      	subs	r3, #4
 80074e2:	2a00      	cmp	r2, #0
 80074e4:	d1f0      	bne.n	80074c8 <quorem+0xea>
 80074e6:	3c01      	subs	r4, #1
 80074e8:	e7eb      	b.n	80074c2 <quorem+0xe4>
 80074ea:	2000      	movs	r0, #0
 80074ec:	e7ee      	b.n	80074cc <quorem+0xee>
	...

080074f0 <_dtoa_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	ed2d 8b04 	vpush	{d8-d9}
 80074f8:	69c5      	ldr	r5, [r0, #28]
 80074fa:	b093      	sub	sp, #76	; 0x4c
 80074fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007500:	ec57 6b10 	vmov	r6, r7, d0
 8007504:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007508:	9107      	str	r1, [sp, #28]
 800750a:	4604      	mov	r4, r0
 800750c:	920a      	str	r2, [sp, #40]	; 0x28
 800750e:	930d      	str	r3, [sp, #52]	; 0x34
 8007510:	b975      	cbnz	r5, 8007530 <_dtoa_r+0x40>
 8007512:	2010      	movs	r0, #16
 8007514:	f000 fe2a 	bl	800816c <malloc>
 8007518:	4602      	mov	r2, r0
 800751a:	61e0      	str	r0, [r4, #28]
 800751c:	b920      	cbnz	r0, 8007528 <_dtoa_r+0x38>
 800751e:	4bae      	ldr	r3, [pc, #696]	; (80077d8 <_dtoa_r+0x2e8>)
 8007520:	21ef      	movs	r1, #239	; 0xef
 8007522:	48ae      	ldr	r0, [pc, #696]	; (80077dc <_dtoa_r+0x2ec>)
 8007524:	f001 fb10 	bl	8008b48 <__assert_func>
 8007528:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800752c:	6005      	str	r5, [r0, #0]
 800752e:	60c5      	str	r5, [r0, #12]
 8007530:	69e3      	ldr	r3, [r4, #28]
 8007532:	6819      	ldr	r1, [r3, #0]
 8007534:	b151      	cbz	r1, 800754c <_dtoa_r+0x5c>
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	604a      	str	r2, [r1, #4]
 800753a:	2301      	movs	r3, #1
 800753c:	4093      	lsls	r3, r2
 800753e:	608b      	str	r3, [r1, #8]
 8007540:	4620      	mov	r0, r4
 8007542:	f000 ff07 	bl	8008354 <_Bfree>
 8007546:	69e3      	ldr	r3, [r4, #28]
 8007548:	2200      	movs	r2, #0
 800754a:	601a      	str	r2, [r3, #0]
 800754c:	1e3b      	subs	r3, r7, #0
 800754e:	bfbb      	ittet	lt
 8007550:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007554:	9303      	strlt	r3, [sp, #12]
 8007556:	2300      	movge	r3, #0
 8007558:	2201      	movlt	r2, #1
 800755a:	bfac      	ite	ge
 800755c:	f8c8 3000 	strge.w	r3, [r8]
 8007560:	f8c8 2000 	strlt.w	r2, [r8]
 8007564:	4b9e      	ldr	r3, [pc, #632]	; (80077e0 <_dtoa_r+0x2f0>)
 8007566:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800756a:	ea33 0308 	bics.w	r3, r3, r8
 800756e:	d11b      	bne.n	80075a8 <_dtoa_r+0xb8>
 8007570:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007572:	f242 730f 	movw	r3, #9999	; 0x270f
 8007576:	6013      	str	r3, [r2, #0]
 8007578:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800757c:	4333      	orrs	r3, r6
 800757e:	f000 8593 	beq.w	80080a8 <_dtoa_r+0xbb8>
 8007582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007584:	b963      	cbnz	r3, 80075a0 <_dtoa_r+0xb0>
 8007586:	4b97      	ldr	r3, [pc, #604]	; (80077e4 <_dtoa_r+0x2f4>)
 8007588:	e027      	b.n	80075da <_dtoa_r+0xea>
 800758a:	4b97      	ldr	r3, [pc, #604]	; (80077e8 <_dtoa_r+0x2f8>)
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	9800      	ldr	r0, [sp, #0]
 8007596:	b013      	add	sp, #76	; 0x4c
 8007598:	ecbd 8b04 	vpop	{d8-d9}
 800759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a0:	4b90      	ldr	r3, [pc, #576]	; (80077e4 <_dtoa_r+0x2f4>)
 80075a2:	9300      	str	r3, [sp, #0]
 80075a4:	3303      	adds	r3, #3
 80075a6:	e7f3      	b.n	8007590 <_dtoa_r+0xa0>
 80075a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075ac:	2200      	movs	r2, #0
 80075ae:	ec51 0b17 	vmov	r0, r1, d7
 80075b2:	eeb0 8a47 	vmov.f32	s16, s14
 80075b6:	eef0 8a67 	vmov.f32	s17, s15
 80075ba:	2300      	movs	r3, #0
 80075bc:	f7f9 faac 	bl	8000b18 <__aeabi_dcmpeq>
 80075c0:	4681      	mov	r9, r0
 80075c2:	b160      	cbz	r0, 80075de <_dtoa_r+0xee>
 80075c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075c6:	2301      	movs	r3, #1
 80075c8:	6013      	str	r3, [r2, #0]
 80075ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f000 8568 	beq.w	80080a2 <_dtoa_r+0xbb2>
 80075d2:	4b86      	ldr	r3, [pc, #536]	; (80077ec <_dtoa_r+0x2fc>)
 80075d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80075d6:	6013      	str	r3, [r2, #0]
 80075d8:	3b01      	subs	r3, #1
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	e7da      	b.n	8007594 <_dtoa_r+0xa4>
 80075de:	aa10      	add	r2, sp, #64	; 0x40
 80075e0:	a911      	add	r1, sp, #68	; 0x44
 80075e2:	4620      	mov	r0, r4
 80075e4:	eeb0 0a48 	vmov.f32	s0, s16
 80075e8:	eef0 0a68 	vmov.f32	s1, s17
 80075ec:	f001 f994 	bl	8008918 <__d2b>
 80075f0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80075f4:	4682      	mov	sl, r0
 80075f6:	2d00      	cmp	r5, #0
 80075f8:	d07f      	beq.n	80076fa <_dtoa_r+0x20a>
 80075fa:	ee18 3a90 	vmov	r3, s17
 80075fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007602:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007606:	ec51 0b18 	vmov	r0, r1, d8
 800760a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800760e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007612:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007616:	4619      	mov	r1, r3
 8007618:	2200      	movs	r2, #0
 800761a:	4b75      	ldr	r3, [pc, #468]	; (80077f0 <_dtoa_r+0x300>)
 800761c:	f7f8 fe5c 	bl	80002d8 <__aeabi_dsub>
 8007620:	a367      	add	r3, pc, #412	; (adr r3, 80077c0 <_dtoa_r+0x2d0>)
 8007622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007626:	f7f9 f80f 	bl	8000648 <__aeabi_dmul>
 800762a:	a367      	add	r3, pc, #412	; (adr r3, 80077c8 <_dtoa_r+0x2d8>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 fe54 	bl	80002dc <__adddf3>
 8007634:	4606      	mov	r6, r0
 8007636:	4628      	mov	r0, r5
 8007638:	460f      	mov	r7, r1
 800763a:	f7f8 ff9b 	bl	8000574 <__aeabi_i2d>
 800763e:	a364      	add	r3, pc, #400	; (adr r3, 80077d0 <_dtoa_r+0x2e0>)
 8007640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007644:	f7f9 f800 	bl	8000648 <__aeabi_dmul>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4630      	mov	r0, r6
 800764e:	4639      	mov	r1, r7
 8007650:	f7f8 fe44 	bl	80002dc <__adddf3>
 8007654:	4606      	mov	r6, r0
 8007656:	460f      	mov	r7, r1
 8007658:	f7f9 faa6 	bl	8000ba8 <__aeabi_d2iz>
 800765c:	2200      	movs	r2, #0
 800765e:	4683      	mov	fp, r0
 8007660:	2300      	movs	r3, #0
 8007662:	4630      	mov	r0, r6
 8007664:	4639      	mov	r1, r7
 8007666:	f7f9 fa61 	bl	8000b2c <__aeabi_dcmplt>
 800766a:	b148      	cbz	r0, 8007680 <_dtoa_r+0x190>
 800766c:	4658      	mov	r0, fp
 800766e:	f7f8 ff81 	bl	8000574 <__aeabi_i2d>
 8007672:	4632      	mov	r2, r6
 8007674:	463b      	mov	r3, r7
 8007676:	f7f9 fa4f 	bl	8000b18 <__aeabi_dcmpeq>
 800767a:	b908      	cbnz	r0, 8007680 <_dtoa_r+0x190>
 800767c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007680:	f1bb 0f16 	cmp.w	fp, #22
 8007684:	d857      	bhi.n	8007736 <_dtoa_r+0x246>
 8007686:	4b5b      	ldr	r3, [pc, #364]	; (80077f4 <_dtoa_r+0x304>)
 8007688:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	ec51 0b18 	vmov	r0, r1, d8
 8007694:	f7f9 fa4a 	bl	8000b2c <__aeabi_dcmplt>
 8007698:	2800      	cmp	r0, #0
 800769a:	d04e      	beq.n	800773a <_dtoa_r+0x24a>
 800769c:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076a0:	2300      	movs	r3, #0
 80076a2:	930c      	str	r3, [sp, #48]	; 0x30
 80076a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80076a6:	1b5b      	subs	r3, r3, r5
 80076a8:	1e5a      	subs	r2, r3, #1
 80076aa:	bf45      	ittet	mi
 80076ac:	f1c3 0301 	rsbmi	r3, r3, #1
 80076b0:	9305      	strmi	r3, [sp, #20]
 80076b2:	2300      	movpl	r3, #0
 80076b4:	2300      	movmi	r3, #0
 80076b6:	9206      	str	r2, [sp, #24]
 80076b8:	bf54      	ite	pl
 80076ba:	9305      	strpl	r3, [sp, #20]
 80076bc:	9306      	strmi	r3, [sp, #24]
 80076be:	f1bb 0f00 	cmp.w	fp, #0
 80076c2:	db3c      	blt.n	800773e <_dtoa_r+0x24e>
 80076c4:	9b06      	ldr	r3, [sp, #24]
 80076c6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80076ca:	445b      	add	r3, fp
 80076cc:	9306      	str	r3, [sp, #24]
 80076ce:	2300      	movs	r3, #0
 80076d0:	9308      	str	r3, [sp, #32]
 80076d2:	9b07      	ldr	r3, [sp, #28]
 80076d4:	2b09      	cmp	r3, #9
 80076d6:	d868      	bhi.n	80077aa <_dtoa_r+0x2ba>
 80076d8:	2b05      	cmp	r3, #5
 80076da:	bfc4      	itt	gt
 80076dc:	3b04      	subgt	r3, #4
 80076de:	9307      	strgt	r3, [sp, #28]
 80076e0:	9b07      	ldr	r3, [sp, #28]
 80076e2:	f1a3 0302 	sub.w	r3, r3, #2
 80076e6:	bfcc      	ite	gt
 80076e8:	2500      	movgt	r5, #0
 80076ea:	2501      	movle	r5, #1
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	f200 8085 	bhi.w	80077fc <_dtoa_r+0x30c>
 80076f2:	e8df f003 	tbb	[pc, r3]
 80076f6:	3b2e      	.short	0x3b2e
 80076f8:	5839      	.short	0x5839
 80076fa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80076fe:	441d      	add	r5, r3
 8007700:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007704:	2b20      	cmp	r3, #32
 8007706:	bfc1      	itttt	gt
 8007708:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800770c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007710:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007714:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007718:	bfd6      	itet	le
 800771a:	f1c3 0320 	rsble	r3, r3, #32
 800771e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007722:	fa06 f003 	lslle.w	r0, r6, r3
 8007726:	f7f8 ff15 	bl	8000554 <__aeabi_ui2d>
 800772a:	2201      	movs	r2, #1
 800772c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007730:	3d01      	subs	r5, #1
 8007732:	920e      	str	r2, [sp, #56]	; 0x38
 8007734:	e76f      	b.n	8007616 <_dtoa_r+0x126>
 8007736:	2301      	movs	r3, #1
 8007738:	e7b3      	b.n	80076a2 <_dtoa_r+0x1b2>
 800773a:	900c      	str	r0, [sp, #48]	; 0x30
 800773c:	e7b2      	b.n	80076a4 <_dtoa_r+0x1b4>
 800773e:	9b05      	ldr	r3, [sp, #20]
 8007740:	eba3 030b 	sub.w	r3, r3, fp
 8007744:	9305      	str	r3, [sp, #20]
 8007746:	f1cb 0300 	rsb	r3, fp, #0
 800774a:	9308      	str	r3, [sp, #32]
 800774c:	2300      	movs	r3, #0
 800774e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007750:	e7bf      	b.n	80076d2 <_dtoa_r+0x1e2>
 8007752:	2300      	movs	r3, #0
 8007754:	9309      	str	r3, [sp, #36]	; 0x24
 8007756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007758:	2b00      	cmp	r3, #0
 800775a:	dc52      	bgt.n	8007802 <_dtoa_r+0x312>
 800775c:	2301      	movs	r3, #1
 800775e:	9301      	str	r3, [sp, #4]
 8007760:	9304      	str	r3, [sp, #16]
 8007762:	461a      	mov	r2, r3
 8007764:	920a      	str	r2, [sp, #40]	; 0x28
 8007766:	e00b      	b.n	8007780 <_dtoa_r+0x290>
 8007768:	2301      	movs	r3, #1
 800776a:	e7f3      	b.n	8007754 <_dtoa_r+0x264>
 800776c:	2300      	movs	r3, #0
 800776e:	9309      	str	r3, [sp, #36]	; 0x24
 8007770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007772:	445b      	add	r3, fp
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	3301      	adds	r3, #1
 8007778:	2b01      	cmp	r3, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	bfb8      	it	lt
 800777e:	2301      	movlt	r3, #1
 8007780:	69e0      	ldr	r0, [r4, #28]
 8007782:	2100      	movs	r1, #0
 8007784:	2204      	movs	r2, #4
 8007786:	f102 0614 	add.w	r6, r2, #20
 800778a:	429e      	cmp	r6, r3
 800778c:	d93d      	bls.n	800780a <_dtoa_r+0x31a>
 800778e:	6041      	str	r1, [r0, #4]
 8007790:	4620      	mov	r0, r4
 8007792:	f000 fd9f 	bl	80082d4 <_Balloc>
 8007796:	9000      	str	r0, [sp, #0]
 8007798:	2800      	cmp	r0, #0
 800779a:	d139      	bne.n	8007810 <_dtoa_r+0x320>
 800779c:	4b16      	ldr	r3, [pc, #88]	; (80077f8 <_dtoa_r+0x308>)
 800779e:	4602      	mov	r2, r0
 80077a0:	f240 11af 	movw	r1, #431	; 0x1af
 80077a4:	e6bd      	b.n	8007522 <_dtoa_r+0x32>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e7e1      	b.n	800776e <_dtoa_r+0x27e>
 80077aa:	2501      	movs	r5, #1
 80077ac:	2300      	movs	r3, #0
 80077ae:	9307      	str	r3, [sp, #28]
 80077b0:	9509      	str	r5, [sp, #36]	; 0x24
 80077b2:	f04f 33ff 	mov.w	r3, #4294967295
 80077b6:	9301      	str	r3, [sp, #4]
 80077b8:	9304      	str	r3, [sp, #16]
 80077ba:	2200      	movs	r2, #0
 80077bc:	2312      	movs	r3, #18
 80077be:	e7d1      	b.n	8007764 <_dtoa_r+0x274>
 80077c0:	636f4361 	.word	0x636f4361
 80077c4:	3fd287a7 	.word	0x3fd287a7
 80077c8:	8b60c8b3 	.word	0x8b60c8b3
 80077cc:	3fc68a28 	.word	0x3fc68a28
 80077d0:	509f79fb 	.word	0x509f79fb
 80077d4:	3fd34413 	.word	0x3fd34413
 80077d8:	08009201 	.word	0x08009201
 80077dc:	08009218 	.word	0x08009218
 80077e0:	7ff00000 	.word	0x7ff00000
 80077e4:	080091fd 	.word	0x080091fd
 80077e8:	080091f4 	.word	0x080091f4
 80077ec:	080091d1 	.word	0x080091d1
 80077f0:	3ff80000 	.word	0x3ff80000
 80077f4:	08009308 	.word	0x08009308
 80077f8:	08009270 	.word	0x08009270
 80077fc:	2301      	movs	r3, #1
 80077fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007800:	e7d7      	b.n	80077b2 <_dtoa_r+0x2c2>
 8007802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007804:	9301      	str	r3, [sp, #4]
 8007806:	9304      	str	r3, [sp, #16]
 8007808:	e7ba      	b.n	8007780 <_dtoa_r+0x290>
 800780a:	3101      	adds	r1, #1
 800780c:	0052      	lsls	r2, r2, #1
 800780e:	e7ba      	b.n	8007786 <_dtoa_r+0x296>
 8007810:	69e3      	ldr	r3, [r4, #28]
 8007812:	9a00      	ldr	r2, [sp, #0]
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	2b0e      	cmp	r3, #14
 800781a:	f200 80a8 	bhi.w	800796e <_dtoa_r+0x47e>
 800781e:	2d00      	cmp	r5, #0
 8007820:	f000 80a5 	beq.w	800796e <_dtoa_r+0x47e>
 8007824:	f1bb 0f00 	cmp.w	fp, #0
 8007828:	dd38      	ble.n	800789c <_dtoa_r+0x3ac>
 800782a:	4bc0      	ldr	r3, [pc, #768]	; (8007b2c <_dtoa_r+0x63c>)
 800782c:	f00b 020f 	and.w	r2, fp, #15
 8007830:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007834:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007838:	e9d3 6700 	ldrd	r6, r7, [r3]
 800783c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007840:	d019      	beq.n	8007876 <_dtoa_r+0x386>
 8007842:	4bbb      	ldr	r3, [pc, #748]	; (8007b30 <_dtoa_r+0x640>)
 8007844:	ec51 0b18 	vmov	r0, r1, d8
 8007848:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800784c:	f7f9 f826 	bl	800089c <__aeabi_ddiv>
 8007850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007854:	f008 080f 	and.w	r8, r8, #15
 8007858:	2503      	movs	r5, #3
 800785a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007b30 <_dtoa_r+0x640>
 800785e:	f1b8 0f00 	cmp.w	r8, #0
 8007862:	d10a      	bne.n	800787a <_dtoa_r+0x38a>
 8007864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007868:	4632      	mov	r2, r6
 800786a:	463b      	mov	r3, r7
 800786c:	f7f9 f816 	bl	800089c <__aeabi_ddiv>
 8007870:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007874:	e02b      	b.n	80078ce <_dtoa_r+0x3de>
 8007876:	2502      	movs	r5, #2
 8007878:	e7ef      	b.n	800785a <_dtoa_r+0x36a>
 800787a:	f018 0f01 	tst.w	r8, #1
 800787e:	d008      	beq.n	8007892 <_dtoa_r+0x3a2>
 8007880:	4630      	mov	r0, r6
 8007882:	4639      	mov	r1, r7
 8007884:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007888:	f7f8 fede 	bl	8000648 <__aeabi_dmul>
 800788c:	3501      	adds	r5, #1
 800788e:	4606      	mov	r6, r0
 8007890:	460f      	mov	r7, r1
 8007892:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007896:	f109 0908 	add.w	r9, r9, #8
 800789a:	e7e0      	b.n	800785e <_dtoa_r+0x36e>
 800789c:	f000 809f 	beq.w	80079de <_dtoa_r+0x4ee>
 80078a0:	f1cb 0600 	rsb	r6, fp, #0
 80078a4:	4ba1      	ldr	r3, [pc, #644]	; (8007b2c <_dtoa_r+0x63c>)
 80078a6:	4fa2      	ldr	r7, [pc, #648]	; (8007b30 <_dtoa_r+0x640>)
 80078a8:	f006 020f 	and.w	r2, r6, #15
 80078ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b4:	ec51 0b18 	vmov	r0, r1, d8
 80078b8:	f7f8 fec6 	bl	8000648 <__aeabi_dmul>
 80078bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078c0:	1136      	asrs	r6, r6, #4
 80078c2:	2300      	movs	r3, #0
 80078c4:	2502      	movs	r5, #2
 80078c6:	2e00      	cmp	r6, #0
 80078c8:	d17e      	bne.n	80079c8 <_dtoa_r+0x4d8>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d1d0      	bne.n	8007870 <_dtoa_r+0x380>
 80078ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 8084 	beq.w	80079e2 <_dtoa_r+0x4f2>
 80078da:	4b96      	ldr	r3, [pc, #600]	; (8007b34 <_dtoa_r+0x644>)
 80078dc:	2200      	movs	r2, #0
 80078de:	4640      	mov	r0, r8
 80078e0:	4649      	mov	r1, r9
 80078e2:	f7f9 f923 	bl	8000b2c <__aeabi_dcmplt>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	d07b      	beq.n	80079e2 <_dtoa_r+0x4f2>
 80078ea:	9b04      	ldr	r3, [sp, #16]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d078      	beq.n	80079e2 <_dtoa_r+0x4f2>
 80078f0:	9b01      	ldr	r3, [sp, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dd39      	ble.n	800796a <_dtoa_r+0x47a>
 80078f6:	4b90      	ldr	r3, [pc, #576]	; (8007b38 <_dtoa_r+0x648>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	4640      	mov	r0, r8
 80078fc:	4649      	mov	r1, r9
 80078fe:	f7f8 fea3 	bl	8000648 <__aeabi_dmul>
 8007902:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007906:	9e01      	ldr	r6, [sp, #4]
 8007908:	f10b 37ff 	add.w	r7, fp, #4294967295
 800790c:	3501      	adds	r5, #1
 800790e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007912:	4628      	mov	r0, r5
 8007914:	f7f8 fe2e 	bl	8000574 <__aeabi_i2d>
 8007918:	4642      	mov	r2, r8
 800791a:	464b      	mov	r3, r9
 800791c:	f7f8 fe94 	bl	8000648 <__aeabi_dmul>
 8007920:	4b86      	ldr	r3, [pc, #536]	; (8007b3c <_dtoa_r+0x64c>)
 8007922:	2200      	movs	r2, #0
 8007924:	f7f8 fcda 	bl	80002dc <__adddf3>
 8007928:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800792c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007930:	9303      	str	r3, [sp, #12]
 8007932:	2e00      	cmp	r6, #0
 8007934:	d158      	bne.n	80079e8 <_dtoa_r+0x4f8>
 8007936:	4b82      	ldr	r3, [pc, #520]	; (8007b40 <_dtoa_r+0x650>)
 8007938:	2200      	movs	r2, #0
 800793a:	4640      	mov	r0, r8
 800793c:	4649      	mov	r1, r9
 800793e:	f7f8 fccb 	bl	80002d8 <__aeabi_dsub>
 8007942:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007946:	4680      	mov	r8, r0
 8007948:	4689      	mov	r9, r1
 800794a:	f7f9 f90d 	bl	8000b68 <__aeabi_dcmpgt>
 800794e:	2800      	cmp	r0, #0
 8007950:	f040 8296 	bne.w	8007e80 <_dtoa_r+0x990>
 8007954:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007958:	4640      	mov	r0, r8
 800795a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800795e:	4649      	mov	r1, r9
 8007960:	f7f9 f8e4 	bl	8000b2c <__aeabi_dcmplt>
 8007964:	2800      	cmp	r0, #0
 8007966:	f040 8289 	bne.w	8007e7c <_dtoa_r+0x98c>
 800796a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800796e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007970:	2b00      	cmp	r3, #0
 8007972:	f2c0 814e 	blt.w	8007c12 <_dtoa_r+0x722>
 8007976:	f1bb 0f0e 	cmp.w	fp, #14
 800797a:	f300 814a 	bgt.w	8007c12 <_dtoa_r+0x722>
 800797e:	4b6b      	ldr	r3, [pc, #428]	; (8007b2c <_dtoa_r+0x63c>)
 8007980:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007984:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800798a:	2b00      	cmp	r3, #0
 800798c:	f280 80dc 	bge.w	8007b48 <_dtoa_r+0x658>
 8007990:	9b04      	ldr	r3, [sp, #16]
 8007992:	2b00      	cmp	r3, #0
 8007994:	f300 80d8 	bgt.w	8007b48 <_dtoa_r+0x658>
 8007998:	f040 826f 	bne.w	8007e7a <_dtoa_r+0x98a>
 800799c:	4b68      	ldr	r3, [pc, #416]	; (8007b40 <_dtoa_r+0x650>)
 800799e:	2200      	movs	r2, #0
 80079a0:	4640      	mov	r0, r8
 80079a2:	4649      	mov	r1, r9
 80079a4:	f7f8 fe50 	bl	8000648 <__aeabi_dmul>
 80079a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079ac:	f7f9 f8d2 	bl	8000b54 <__aeabi_dcmpge>
 80079b0:	9e04      	ldr	r6, [sp, #16]
 80079b2:	4637      	mov	r7, r6
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f040 8245 	bne.w	8007e44 <_dtoa_r+0x954>
 80079ba:	9d00      	ldr	r5, [sp, #0]
 80079bc:	2331      	movs	r3, #49	; 0x31
 80079be:	f805 3b01 	strb.w	r3, [r5], #1
 80079c2:	f10b 0b01 	add.w	fp, fp, #1
 80079c6:	e241      	b.n	8007e4c <_dtoa_r+0x95c>
 80079c8:	07f2      	lsls	r2, r6, #31
 80079ca:	d505      	bpl.n	80079d8 <_dtoa_r+0x4e8>
 80079cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079d0:	f7f8 fe3a 	bl	8000648 <__aeabi_dmul>
 80079d4:	3501      	adds	r5, #1
 80079d6:	2301      	movs	r3, #1
 80079d8:	1076      	asrs	r6, r6, #1
 80079da:	3708      	adds	r7, #8
 80079dc:	e773      	b.n	80078c6 <_dtoa_r+0x3d6>
 80079de:	2502      	movs	r5, #2
 80079e0:	e775      	b.n	80078ce <_dtoa_r+0x3de>
 80079e2:	9e04      	ldr	r6, [sp, #16]
 80079e4:	465f      	mov	r7, fp
 80079e6:	e792      	b.n	800790e <_dtoa_r+0x41e>
 80079e8:	9900      	ldr	r1, [sp, #0]
 80079ea:	4b50      	ldr	r3, [pc, #320]	; (8007b2c <_dtoa_r+0x63c>)
 80079ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079f0:	4431      	add	r1, r6
 80079f2:	9102      	str	r1, [sp, #8]
 80079f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079f6:	eeb0 9a47 	vmov.f32	s18, s14
 80079fa:	eef0 9a67 	vmov.f32	s19, s15
 80079fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007a02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007a06:	2900      	cmp	r1, #0
 8007a08:	d044      	beq.n	8007a94 <_dtoa_r+0x5a4>
 8007a0a:	494e      	ldr	r1, [pc, #312]	; (8007b44 <_dtoa_r+0x654>)
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f7f8 ff45 	bl	800089c <__aeabi_ddiv>
 8007a12:	ec53 2b19 	vmov	r2, r3, d9
 8007a16:	f7f8 fc5f 	bl	80002d8 <__aeabi_dsub>
 8007a1a:	9d00      	ldr	r5, [sp, #0]
 8007a1c:	ec41 0b19 	vmov	d9, r0, r1
 8007a20:	4649      	mov	r1, r9
 8007a22:	4640      	mov	r0, r8
 8007a24:	f7f9 f8c0 	bl	8000ba8 <__aeabi_d2iz>
 8007a28:	4606      	mov	r6, r0
 8007a2a:	f7f8 fda3 	bl	8000574 <__aeabi_i2d>
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	4640      	mov	r0, r8
 8007a34:	4649      	mov	r1, r9
 8007a36:	f7f8 fc4f 	bl	80002d8 <__aeabi_dsub>
 8007a3a:	3630      	adds	r6, #48	; 0x30
 8007a3c:	f805 6b01 	strb.w	r6, [r5], #1
 8007a40:	ec53 2b19 	vmov	r2, r3, d9
 8007a44:	4680      	mov	r8, r0
 8007a46:	4689      	mov	r9, r1
 8007a48:	f7f9 f870 	bl	8000b2c <__aeabi_dcmplt>
 8007a4c:	2800      	cmp	r0, #0
 8007a4e:	d164      	bne.n	8007b1a <_dtoa_r+0x62a>
 8007a50:	4642      	mov	r2, r8
 8007a52:	464b      	mov	r3, r9
 8007a54:	4937      	ldr	r1, [pc, #220]	; (8007b34 <_dtoa_r+0x644>)
 8007a56:	2000      	movs	r0, #0
 8007a58:	f7f8 fc3e 	bl	80002d8 <__aeabi_dsub>
 8007a5c:	ec53 2b19 	vmov	r2, r3, d9
 8007a60:	f7f9 f864 	bl	8000b2c <__aeabi_dcmplt>
 8007a64:	2800      	cmp	r0, #0
 8007a66:	f040 80b6 	bne.w	8007bd6 <_dtoa_r+0x6e6>
 8007a6a:	9b02      	ldr	r3, [sp, #8]
 8007a6c:	429d      	cmp	r5, r3
 8007a6e:	f43f af7c 	beq.w	800796a <_dtoa_r+0x47a>
 8007a72:	4b31      	ldr	r3, [pc, #196]	; (8007b38 <_dtoa_r+0x648>)
 8007a74:	ec51 0b19 	vmov	r0, r1, d9
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f7f8 fde5 	bl	8000648 <__aeabi_dmul>
 8007a7e:	4b2e      	ldr	r3, [pc, #184]	; (8007b38 <_dtoa_r+0x648>)
 8007a80:	ec41 0b19 	vmov	d9, r0, r1
 8007a84:	2200      	movs	r2, #0
 8007a86:	4640      	mov	r0, r8
 8007a88:	4649      	mov	r1, r9
 8007a8a:	f7f8 fddd 	bl	8000648 <__aeabi_dmul>
 8007a8e:	4680      	mov	r8, r0
 8007a90:	4689      	mov	r9, r1
 8007a92:	e7c5      	b.n	8007a20 <_dtoa_r+0x530>
 8007a94:	ec51 0b17 	vmov	r0, r1, d7
 8007a98:	f7f8 fdd6 	bl	8000648 <__aeabi_dmul>
 8007a9c:	9b02      	ldr	r3, [sp, #8]
 8007a9e:	9d00      	ldr	r5, [sp, #0]
 8007aa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007aa2:	ec41 0b19 	vmov	d9, r0, r1
 8007aa6:	4649      	mov	r1, r9
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	f7f9 f87d 	bl	8000ba8 <__aeabi_d2iz>
 8007aae:	4606      	mov	r6, r0
 8007ab0:	f7f8 fd60 	bl	8000574 <__aeabi_i2d>
 8007ab4:	3630      	adds	r6, #48	; 0x30
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	460b      	mov	r3, r1
 8007aba:	4640      	mov	r0, r8
 8007abc:	4649      	mov	r1, r9
 8007abe:	f7f8 fc0b 	bl	80002d8 <__aeabi_dsub>
 8007ac2:	f805 6b01 	strb.w	r6, [r5], #1
 8007ac6:	9b02      	ldr	r3, [sp, #8]
 8007ac8:	429d      	cmp	r5, r3
 8007aca:	4680      	mov	r8, r0
 8007acc:	4689      	mov	r9, r1
 8007ace:	f04f 0200 	mov.w	r2, #0
 8007ad2:	d124      	bne.n	8007b1e <_dtoa_r+0x62e>
 8007ad4:	4b1b      	ldr	r3, [pc, #108]	; (8007b44 <_dtoa_r+0x654>)
 8007ad6:	ec51 0b19 	vmov	r0, r1, d9
 8007ada:	f7f8 fbff 	bl	80002dc <__adddf3>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	4640      	mov	r0, r8
 8007ae4:	4649      	mov	r1, r9
 8007ae6:	f7f9 f83f 	bl	8000b68 <__aeabi_dcmpgt>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d173      	bne.n	8007bd6 <_dtoa_r+0x6e6>
 8007aee:	ec53 2b19 	vmov	r2, r3, d9
 8007af2:	4914      	ldr	r1, [pc, #80]	; (8007b44 <_dtoa_r+0x654>)
 8007af4:	2000      	movs	r0, #0
 8007af6:	f7f8 fbef 	bl	80002d8 <__aeabi_dsub>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4640      	mov	r0, r8
 8007b00:	4649      	mov	r1, r9
 8007b02:	f7f9 f813 	bl	8000b2c <__aeabi_dcmplt>
 8007b06:	2800      	cmp	r0, #0
 8007b08:	f43f af2f 	beq.w	800796a <_dtoa_r+0x47a>
 8007b0c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007b0e:	1e6b      	subs	r3, r5, #1
 8007b10:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b16:	2b30      	cmp	r3, #48	; 0x30
 8007b18:	d0f8      	beq.n	8007b0c <_dtoa_r+0x61c>
 8007b1a:	46bb      	mov	fp, r7
 8007b1c:	e04a      	b.n	8007bb4 <_dtoa_r+0x6c4>
 8007b1e:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <_dtoa_r+0x648>)
 8007b20:	f7f8 fd92 	bl	8000648 <__aeabi_dmul>
 8007b24:	4680      	mov	r8, r0
 8007b26:	4689      	mov	r9, r1
 8007b28:	e7bd      	b.n	8007aa6 <_dtoa_r+0x5b6>
 8007b2a:	bf00      	nop
 8007b2c:	08009308 	.word	0x08009308
 8007b30:	080092e0 	.word	0x080092e0
 8007b34:	3ff00000 	.word	0x3ff00000
 8007b38:	40240000 	.word	0x40240000
 8007b3c:	401c0000 	.word	0x401c0000
 8007b40:	40140000 	.word	0x40140000
 8007b44:	3fe00000 	.word	0x3fe00000
 8007b48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007b4c:	9d00      	ldr	r5, [sp, #0]
 8007b4e:	4642      	mov	r2, r8
 8007b50:	464b      	mov	r3, r9
 8007b52:	4630      	mov	r0, r6
 8007b54:	4639      	mov	r1, r7
 8007b56:	f7f8 fea1 	bl	800089c <__aeabi_ddiv>
 8007b5a:	f7f9 f825 	bl	8000ba8 <__aeabi_d2iz>
 8007b5e:	9001      	str	r0, [sp, #4]
 8007b60:	f7f8 fd08 	bl	8000574 <__aeabi_i2d>
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	f7f8 fd6e 	bl	8000648 <__aeabi_dmul>
 8007b6c:	4602      	mov	r2, r0
 8007b6e:	460b      	mov	r3, r1
 8007b70:	4630      	mov	r0, r6
 8007b72:	4639      	mov	r1, r7
 8007b74:	f7f8 fbb0 	bl	80002d8 <__aeabi_dsub>
 8007b78:	9e01      	ldr	r6, [sp, #4]
 8007b7a:	9f04      	ldr	r7, [sp, #16]
 8007b7c:	3630      	adds	r6, #48	; 0x30
 8007b7e:	f805 6b01 	strb.w	r6, [r5], #1
 8007b82:	9e00      	ldr	r6, [sp, #0]
 8007b84:	1bae      	subs	r6, r5, r6
 8007b86:	42b7      	cmp	r7, r6
 8007b88:	4602      	mov	r2, r0
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	d134      	bne.n	8007bf8 <_dtoa_r+0x708>
 8007b8e:	f7f8 fba5 	bl	80002dc <__adddf3>
 8007b92:	4642      	mov	r2, r8
 8007b94:	464b      	mov	r3, r9
 8007b96:	4606      	mov	r6, r0
 8007b98:	460f      	mov	r7, r1
 8007b9a:	f7f8 ffe5 	bl	8000b68 <__aeabi_dcmpgt>
 8007b9e:	b9c8      	cbnz	r0, 8007bd4 <_dtoa_r+0x6e4>
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	f7f8 ffb6 	bl	8000b18 <__aeabi_dcmpeq>
 8007bac:	b110      	cbz	r0, 8007bb4 <_dtoa_r+0x6c4>
 8007bae:	9b01      	ldr	r3, [sp, #4]
 8007bb0:	07db      	lsls	r3, r3, #31
 8007bb2:	d40f      	bmi.n	8007bd4 <_dtoa_r+0x6e4>
 8007bb4:	4651      	mov	r1, sl
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f000 fbcc 	bl	8008354 <_Bfree>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bc0:	702b      	strb	r3, [r5, #0]
 8007bc2:	f10b 0301 	add.w	r3, fp, #1
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f43f ace2 	beq.w	8007594 <_dtoa_r+0xa4>
 8007bd0:	601d      	str	r5, [r3, #0]
 8007bd2:	e4df      	b.n	8007594 <_dtoa_r+0xa4>
 8007bd4:	465f      	mov	r7, fp
 8007bd6:	462b      	mov	r3, r5
 8007bd8:	461d      	mov	r5, r3
 8007bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bde:	2a39      	cmp	r2, #57	; 0x39
 8007be0:	d106      	bne.n	8007bf0 <_dtoa_r+0x700>
 8007be2:	9a00      	ldr	r2, [sp, #0]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d1f7      	bne.n	8007bd8 <_dtoa_r+0x6e8>
 8007be8:	9900      	ldr	r1, [sp, #0]
 8007bea:	2230      	movs	r2, #48	; 0x30
 8007bec:	3701      	adds	r7, #1
 8007bee:	700a      	strb	r2, [r1, #0]
 8007bf0:	781a      	ldrb	r2, [r3, #0]
 8007bf2:	3201      	adds	r2, #1
 8007bf4:	701a      	strb	r2, [r3, #0]
 8007bf6:	e790      	b.n	8007b1a <_dtoa_r+0x62a>
 8007bf8:	4ba3      	ldr	r3, [pc, #652]	; (8007e88 <_dtoa_r+0x998>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f7f8 fd24 	bl	8000648 <__aeabi_dmul>
 8007c00:	2200      	movs	r2, #0
 8007c02:	2300      	movs	r3, #0
 8007c04:	4606      	mov	r6, r0
 8007c06:	460f      	mov	r7, r1
 8007c08:	f7f8 ff86 	bl	8000b18 <__aeabi_dcmpeq>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d09e      	beq.n	8007b4e <_dtoa_r+0x65e>
 8007c10:	e7d0      	b.n	8007bb4 <_dtoa_r+0x6c4>
 8007c12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c14:	2a00      	cmp	r2, #0
 8007c16:	f000 80ca 	beq.w	8007dae <_dtoa_r+0x8be>
 8007c1a:	9a07      	ldr	r2, [sp, #28]
 8007c1c:	2a01      	cmp	r2, #1
 8007c1e:	f300 80ad 	bgt.w	8007d7c <_dtoa_r+0x88c>
 8007c22:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	f000 80a5 	beq.w	8007d74 <_dtoa_r+0x884>
 8007c2a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007c2e:	9e08      	ldr	r6, [sp, #32]
 8007c30:	9d05      	ldr	r5, [sp, #20]
 8007c32:	9a05      	ldr	r2, [sp, #20]
 8007c34:	441a      	add	r2, r3
 8007c36:	9205      	str	r2, [sp, #20]
 8007c38:	9a06      	ldr	r2, [sp, #24]
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	441a      	add	r2, r3
 8007c3e:	4620      	mov	r0, r4
 8007c40:	9206      	str	r2, [sp, #24]
 8007c42:	f000 fc3d 	bl	80084c0 <__i2b>
 8007c46:	4607      	mov	r7, r0
 8007c48:	b165      	cbz	r5, 8007c64 <_dtoa_r+0x774>
 8007c4a:	9b06      	ldr	r3, [sp, #24]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dd09      	ble.n	8007c64 <_dtoa_r+0x774>
 8007c50:	42ab      	cmp	r3, r5
 8007c52:	9a05      	ldr	r2, [sp, #20]
 8007c54:	bfa8      	it	ge
 8007c56:	462b      	movge	r3, r5
 8007c58:	1ad2      	subs	r2, r2, r3
 8007c5a:	9205      	str	r2, [sp, #20]
 8007c5c:	9a06      	ldr	r2, [sp, #24]
 8007c5e:	1aed      	subs	r5, r5, r3
 8007c60:	1ad3      	subs	r3, r2, r3
 8007c62:	9306      	str	r3, [sp, #24]
 8007c64:	9b08      	ldr	r3, [sp, #32]
 8007c66:	b1f3      	cbz	r3, 8007ca6 <_dtoa_r+0x7b6>
 8007c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f000 80a3 	beq.w	8007db6 <_dtoa_r+0x8c6>
 8007c70:	2e00      	cmp	r6, #0
 8007c72:	dd10      	ble.n	8007c96 <_dtoa_r+0x7a6>
 8007c74:	4639      	mov	r1, r7
 8007c76:	4632      	mov	r2, r6
 8007c78:	4620      	mov	r0, r4
 8007c7a:	f000 fce1 	bl	8008640 <__pow5mult>
 8007c7e:	4652      	mov	r2, sl
 8007c80:	4601      	mov	r1, r0
 8007c82:	4607      	mov	r7, r0
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 fc31 	bl	80084ec <__multiply>
 8007c8a:	4651      	mov	r1, sl
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	4620      	mov	r0, r4
 8007c90:	f000 fb60 	bl	8008354 <_Bfree>
 8007c94:	46c2      	mov	sl, r8
 8007c96:	9b08      	ldr	r3, [sp, #32]
 8007c98:	1b9a      	subs	r2, r3, r6
 8007c9a:	d004      	beq.n	8007ca6 <_dtoa_r+0x7b6>
 8007c9c:	4651      	mov	r1, sl
 8007c9e:	4620      	mov	r0, r4
 8007ca0:	f000 fcce 	bl	8008640 <__pow5mult>
 8007ca4:	4682      	mov	sl, r0
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 fc09 	bl	80084c0 <__i2b>
 8007cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	4606      	mov	r6, r0
 8007cb4:	f340 8081 	ble.w	8007dba <_dtoa_r+0x8ca>
 8007cb8:	461a      	mov	r2, r3
 8007cba:	4601      	mov	r1, r0
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fcbf 	bl	8008640 <__pow5mult>
 8007cc2:	9b07      	ldr	r3, [sp, #28]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	dd7a      	ble.n	8007dc0 <_dtoa_r+0x8d0>
 8007cca:	f04f 0800 	mov.w	r8, #0
 8007cce:	6933      	ldr	r3, [r6, #16]
 8007cd0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007cd4:	6918      	ldr	r0, [r3, #16]
 8007cd6:	f000 fba5 	bl	8008424 <__hi0bits>
 8007cda:	f1c0 0020 	rsb	r0, r0, #32
 8007cde:	9b06      	ldr	r3, [sp, #24]
 8007ce0:	4418      	add	r0, r3
 8007ce2:	f010 001f 	ands.w	r0, r0, #31
 8007ce6:	f000 8094 	beq.w	8007e12 <_dtoa_r+0x922>
 8007cea:	f1c0 0320 	rsb	r3, r0, #32
 8007cee:	2b04      	cmp	r3, #4
 8007cf0:	f340 8085 	ble.w	8007dfe <_dtoa_r+0x90e>
 8007cf4:	9b05      	ldr	r3, [sp, #20]
 8007cf6:	f1c0 001c 	rsb	r0, r0, #28
 8007cfa:	4403      	add	r3, r0
 8007cfc:	9305      	str	r3, [sp, #20]
 8007cfe:	9b06      	ldr	r3, [sp, #24]
 8007d00:	4403      	add	r3, r0
 8007d02:	4405      	add	r5, r0
 8007d04:	9306      	str	r3, [sp, #24]
 8007d06:	9b05      	ldr	r3, [sp, #20]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	dd05      	ble.n	8007d18 <_dtoa_r+0x828>
 8007d0c:	4651      	mov	r1, sl
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 fcef 	bl	80086f4 <__lshift>
 8007d16:	4682      	mov	sl, r0
 8007d18:	9b06      	ldr	r3, [sp, #24]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dd05      	ble.n	8007d2a <_dtoa_r+0x83a>
 8007d1e:	4631      	mov	r1, r6
 8007d20:	461a      	mov	r2, r3
 8007d22:	4620      	mov	r0, r4
 8007d24:	f000 fce6 	bl	80086f4 <__lshift>
 8007d28:	4606      	mov	r6, r0
 8007d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d072      	beq.n	8007e16 <_dtoa_r+0x926>
 8007d30:	4631      	mov	r1, r6
 8007d32:	4650      	mov	r0, sl
 8007d34:	f000 fd4a 	bl	80087cc <__mcmp>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	da6c      	bge.n	8007e16 <_dtoa_r+0x926>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4651      	mov	r1, sl
 8007d40:	220a      	movs	r2, #10
 8007d42:	4620      	mov	r0, r4
 8007d44:	f000 fb28 	bl	8008398 <__multadd>
 8007d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007d4e:	4682      	mov	sl, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 81b0 	beq.w	80080b6 <_dtoa_r+0xbc6>
 8007d56:	2300      	movs	r3, #0
 8007d58:	4639      	mov	r1, r7
 8007d5a:	220a      	movs	r2, #10
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 fb1b 	bl	8008398 <__multadd>
 8007d62:	9b01      	ldr	r3, [sp, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	4607      	mov	r7, r0
 8007d68:	f300 8096 	bgt.w	8007e98 <_dtoa_r+0x9a8>
 8007d6c:	9b07      	ldr	r3, [sp, #28]
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	dc59      	bgt.n	8007e26 <_dtoa_r+0x936>
 8007d72:	e091      	b.n	8007e98 <_dtoa_r+0x9a8>
 8007d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007d76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d7a:	e758      	b.n	8007c2e <_dtoa_r+0x73e>
 8007d7c:	9b04      	ldr	r3, [sp, #16]
 8007d7e:	1e5e      	subs	r6, r3, #1
 8007d80:	9b08      	ldr	r3, [sp, #32]
 8007d82:	42b3      	cmp	r3, r6
 8007d84:	bfbf      	itttt	lt
 8007d86:	9b08      	ldrlt	r3, [sp, #32]
 8007d88:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007d8a:	9608      	strlt	r6, [sp, #32]
 8007d8c:	1af3      	sublt	r3, r6, r3
 8007d8e:	bfb4      	ite	lt
 8007d90:	18d2      	addlt	r2, r2, r3
 8007d92:	1b9e      	subge	r6, r3, r6
 8007d94:	9b04      	ldr	r3, [sp, #16]
 8007d96:	bfbc      	itt	lt
 8007d98:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007d9a:	2600      	movlt	r6, #0
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	bfb7      	itett	lt
 8007da0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007da4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007da8:	1a9d      	sublt	r5, r3, r2
 8007daa:	2300      	movlt	r3, #0
 8007dac:	e741      	b.n	8007c32 <_dtoa_r+0x742>
 8007dae:	9e08      	ldr	r6, [sp, #32]
 8007db0:	9d05      	ldr	r5, [sp, #20]
 8007db2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007db4:	e748      	b.n	8007c48 <_dtoa_r+0x758>
 8007db6:	9a08      	ldr	r2, [sp, #32]
 8007db8:	e770      	b.n	8007c9c <_dtoa_r+0x7ac>
 8007dba:	9b07      	ldr	r3, [sp, #28]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	dc19      	bgt.n	8007df4 <_dtoa_r+0x904>
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	b9bb      	cbnz	r3, 8007df4 <_dtoa_r+0x904>
 8007dc4:	9b03      	ldr	r3, [sp, #12]
 8007dc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dca:	b99b      	cbnz	r3, 8007df4 <_dtoa_r+0x904>
 8007dcc:	9b03      	ldr	r3, [sp, #12]
 8007dce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dd2:	0d1b      	lsrs	r3, r3, #20
 8007dd4:	051b      	lsls	r3, r3, #20
 8007dd6:	b183      	cbz	r3, 8007dfa <_dtoa_r+0x90a>
 8007dd8:	9b05      	ldr	r3, [sp, #20]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	9305      	str	r3, [sp, #20]
 8007dde:	9b06      	ldr	r3, [sp, #24]
 8007de0:	3301      	adds	r3, #1
 8007de2:	9306      	str	r3, [sp, #24]
 8007de4:	f04f 0801 	mov.w	r8, #1
 8007de8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f47f af6f 	bne.w	8007cce <_dtoa_r+0x7de>
 8007df0:	2001      	movs	r0, #1
 8007df2:	e774      	b.n	8007cde <_dtoa_r+0x7ee>
 8007df4:	f04f 0800 	mov.w	r8, #0
 8007df8:	e7f6      	b.n	8007de8 <_dtoa_r+0x8f8>
 8007dfa:	4698      	mov	r8, r3
 8007dfc:	e7f4      	b.n	8007de8 <_dtoa_r+0x8f8>
 8007dfe:	d082      	beq.n	8007d06 <_dtoa_r+0x816>
 8007e00:	9a05      	ldr	r2, [sp, #20]
 8007e02:	331c      	adds	r3, #28
 8007e04:	441a      	add	r2, r3
 8007e06:	9205      	str	r2, [sp, #20]
 8007e08:	9a06      	ldr	r2, [sp, #24]
 8007e0a:	441a      	add	r2, r3
 8007e0c:	441d      	add	r5, r3
 8007e0e:	9206      	str	r2, [sp, #24]
 8007e10:	e779      	b.n	8007d06 <_dtoa_r+0x816>
 8007e12:	4603      	mov	r3, r0
 8007e14:	e7f4      	b.n	8007e00 <_dtoa_r+0x910>
 8007e16:	9b04      	ldr	r3, [sp, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dc37      	bgt.n	8007e8c <_dtoa_r+0x99c>
 8007e1c:	9b07      	ldr	r3, [sp, #28]
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	dd34      	ble.n	8007e8c <_dtoa_r+0x99c>
 8007e22:	9b04      	ldr	r3, [sp, #16]
 8007e24:	9301      	str	r3, [sp, #4]
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	b963      	cbnz	r3, 8007e44 <_dtoa_r+0x954>
 8007e2a:	4631      	mov	r1, r6
 8007e2c:	2205      	movs	r2, #5
 8007e2e:	4620      	mov	r0, r4
 8007e30:	f000 fab2 	bl	8008398 <__multadd>
 8007e34:	4601      	mov	r1, r0
 8007e36:	4606      	mov	r6, r0
 8007e38:	4650      	mov	r0, sl
 8007e3a:	f000 fcc7 	bl	80087cc <__mcmp>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	f73f adbb 	bgt.w	80079ba <_dtoa_r+0x4ca>
 8007e44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e46:	9d00      	ldr	r5, [sp, #0]
 8007e48:	ea6f 0b03 	mvn.w	fp, r3
 8007e4c:	f04f 0800 	mov.w	r8, #0
 8007e50:	4631      	mov	r1, r6
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 fa7e 	bl	8008354 <_Bfree>
 8007e58:	2f00      	cmp	r7, #0
 8007e5a:	f43f aeab 	beq.w	8007bb4 <_dtoa_r+0x6c4>
 8007e5e:	f1b8 0f00 	cmp.w	r8, #0
 8007e62:	d005      	beq.n	8007e70 <_dtoa_r+0x980>
 8007e64:	45b8      	cmp	r8, r7
 8007e66:	d003      	beq.n	8007e70 <_dtoa_r+0x980>
 8007e68:	4641      	mov	r1, r8
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fa72 	bl	8008354 <_Bfree>
 8007e70:	4639      	mov	r1, r7
 8007e72:	4620      	mov	r0, r4
 8007e74:	f000 fa6e 	bl	8008354 <_Bfree>
 8007e78:	e69c      	b.n	8007bb4 <_dtoa_r+0x6c4>
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	4637      	mov	r7, r6
 8007e7e:	e7e1      	b.n	8007e44 <_dtoa_r+0x954>
 8007e80:	46bb      	mov	fp, r7
 8007e82:	4637      	mov	r7, r6
 8007e84:	e599      	b.n	80079ba <_dtoa_r+0x4ca>
 8007e86:	bf00      	nop
 8007e88:	40240000 	.word	0x40240000
 8007e8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f000 80c8 	beq.w	8008024 <_dtoa_r+0xb34>
 8007e94:	9b04      	ldr	r3, [sp, #16]
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	2d00      	cmp	r5, #0
 8007e9a:	dd05      	ble.n	8007ea8 <_dtoa_r+0x9b8>
 8007e9c:	4639      	mov	r1, r7
 8007e9e:	462a      	mov	r2, r5
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fc27 	bl	80086f4 <__lshift>
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	f1b8 0f00 	cmp.w	r8, #0
 8007eac:	d05b      	beq.n	8007f66 <_dtoa_r+0xa76>
 8007eae:	6879      	ldr	r1, [r7, #4]
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	f000 fa0f 	bl	80082d4 <_Balloc>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	b928      	cbnz	r0, 8007ec6 <_dtoa_r+0x9d6>
 8007eba:	4b83      	ldr	r3, [pc, #524]	; (80080c8 <_dtoa_r+0xbd8>)
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007ec2:	f7ff bb2e 	b.w	8007522 <_dtoa_r+0x32>
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	3202      	adds	r2, #2
 8007eca:	0092      	lsls	r2, r2, #2
 8007ecc:	f107 010c 	add.w	r1, r7, #12
 8007ed0:	300c      	adds	r0, #12
 8007ed2:	f7ff fa76 	bl	80073c2 <memcpy>
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4620      	mov	r0, r4
 8007edc:	f000 fc0a 	bl	80086f4 <__lshift>
 8007ee0:	9b00      	ldr	r3, [sp, #0]
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007eea:	4413      	add	r3, r2
 8007eec:	9308      	str	r3, [sp, #32]
 8007eee:	9b02      	ldr	r3, [sp, #8]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	46b8      	mov	r8, r7
 8007ef6:	9306      	str	r3, [sp, #24]
 8007ef8:	4607      	mov	r7, r0
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	4631      	mov	r1, r6
 8007efe:	3b01      	subs	r3, #1
 8007f00:	4650      	mov	r0, sl
 8007f02:	9301      	str	r3, [sp, #4]
 8007f04:	f7ff fa6b 	bl	80073de <quorem>
 8007f08:	4641      	mov	r1, r8
 8007f0a:	9002      	str	r0, [sp, #8]
 8007f0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f10:	4650      	mov	r0, sl
 8007f12:	f000 fc5b 	bl	80087cc <__mcmp>
 8007f16:	463a      	mov	r2, r7
 8007f18:	9005      	str	r0, [sp, #20]
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4620      	mov	r0, r4
 8007f1e:	f000 fc71 	bl	8008804 <__mdiff>
 8007f22:	68c2      	ldr	r2, [r0, #12]
 8007f24:	4605      	mov	r5, r0
 8007f26:	bb02      	cbnz	r2, 8007f6a <_dtoa_r+0xa7a>
 8007f28:	4601      	mov	r1, r0
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	f000 fc4e 	bl	80087cc <__mcmp>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4629      	mov	r1, r5
 8007f34:	4620      	mov	r0, r4
 8007f36:	9209      	str	r2, [sp, #36]	; 0x24
 8007f38:	f000 fa0c 	bl	8008354 <_Bfree>
 8007f3c:	9b07      	ldr	r3, [sp, #28]
 8007f3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f40:	9d04      	ldr	r5, [sp, #16]
 8007f42:	ea43 0102 	orr.w	r1, r3, r2
 8007f46:	9b06      	ldr	r3, [sp, #24]
 8007f48:	4319      	orrs	r1, r3
 8007f4a:	d110      	bne.n	8007f6e <_dtoa_r+0xa7e>
 8007f4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f50:	d029      	beq.n	8007fa6 <_dtoa_r+0xab6>
 8007f52:	9b05      	ldr	r3, [sp, #20]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	dd02      	ble.n	8007f5e <_dtoa_r+0xa6e>
 8007f58:	9b02      	ldr	r3, [sp, #8]
 8007f5a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007f5e:	9b01      	ldr	r3, [sp, #4]
 8007f60:	f883 9000 	strb.w	r9, [r3]
 8007f64:	e774      	b.n	8007e50 <_dtoa_r+0x960>
 8007f66:	4638      	mov	r0, r7
 8007f68:	e7ba      	b.n	8007ee0 <_dtoa_r+0x9f0>
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	e7e1      	b.n	8007f32 <_dtoa_r+0xa42>
 8007f6e:	9b05      	ldr	r3, [sp, #20]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	db04      	blt.n	8007f7e <_dtoa_r+0xa8e>
 8007f74:	9907      	ldr	r1, [sp, #28]
 8007f76:	430b      	orrs	r3, r1
 8007f78:	9906      	ldr	r1, [sp, #24]
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	d120      	bne.n	8007fc0 <_dtoa_r+0xad0>
 8007f7e:	2a00      	cmp	r2, #0
 8007f80:	dded      	ble.n	8007f5e <_dtoa_r+0xa6e>
 8007f82:	4651      	mov	r1, sl
 8007f84:	2201      	movs	r2, #1
 8007f86:	4620      	mov	r0, r4
 8007f88:	f000 fbb4 	bl	80086f4 <__lshift>
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	4682      	mov	sl, r0
 8007f90:	f000 fc1c 	bl	80087cc <__mcmp>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	dc03      	bgt.n	8007fa0 <_dtoa_r+0xab0>
 8007f98:	d1e1      	bne.n	8007f5e <_dtoa_r+0xa6e>
 8007f9a:	f019 0f01 	tst.w	r9, #1
 8007f9e:	d0de      	beq.n	8007f5e <_dtoa_r+0xa6e>
 8007fa0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fa4:	d1d8      	bne.n	8007f58 <_dtoa_r+0xa68>
 8007fa6:	9a01      	ldr	r2, [sp, #4]
 8007fa8:	2339      	movs	r3, #57	; 0x39
 8007faa:	7013      	strb	r3, [r2, #0]
 8007fac:	462b      	mov	r3, r5
 8007fae:	461d      	mov	r5, r3
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007fb6:	2a39      	cmp	r2, #57	; 0x39
 8007fb8:	d06c      	beq.n	8008094 <_dtoa_r+0xba4>
 8007fba:	3201      	adds	r2, #1
 8007fbc:	701a      	strb	r2, [r3, #0]
 8007fbe:	e747      	b.n	8007e50 <_dtoa_r+0x960>
 8007fc0:	2a00      	cmp	r2, #0
 8007fc2:	dd07      	ble.n	8007fd4 <_dtoa_r+0xae4>
 8007fc4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007fc8:	d0ed      	beq.n	8007fa6 <_dtoa_r+0xab6>
 8007fca:	9a01      	ldr	r2, [sp, #4]
 8007fcc:	f109 0301 	add.w	r3, r9, #1
 8007fd0:	7013      	strb	r3, [r2, #0]
 8007fd2:	e73d      	b.n	8007e50 <_dtoa_r+0x960>
 8007fd4:	9b04      	ldr	r3, [sp, #16]
 8007fd6:	9a08      	ldr	r2, [sp, #32]
 8007fd8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d043      	beq.n	8008068 <_dtoa_r+0xb78>
 8007fe0:	4651      	mov	r1, sl
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	220a      	movs	r2, #10
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f000 f9d6 	bl	8008398 <__multadd>
 8007fec:	45b8      	cmp	r8, r7
 8007fee:	4682      	mov	sl, r0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	f04f 020a 	mov.w	r2, #10
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	d107      	bne.n	800800e <_dtoa_r+0xb1e>
 8007ffe:	f000 f9cb 	bl	8008398 <__multadd>
 8008002:	4680      	mov	r8, r0
 8008004:	4607      	mov	r7, r0
 8008006:	9b04      	ldr	r3, [sp, #16]
 8008008:	3301      	adds	r3, #1
 800800a:	9304      	str	r3, [sp, #16]
 800800c:	e775      	b.n	8007efa <_dtoa_r+0xa0a>
 800800e:	f000 f9c3 	bl	8008398 <__multadd>
 8008012:	4639      	mov	r1, r7
 8008014:	4680      	mov	r8, r0
 8008016:	2300      	movs	r3, #0
 8008018:	220a      	movs	r2, #10
 800801a:	4620      	mov	r0, r4
 800801c:	f000 f9bc 	bl	8008398 <__multadd>
 8008020:	4607      	mov	r7, r0
 8008022:	e7f0      	b.n	8008006 <_dtoa_r+0xb16>
 8008024:	9b04      	ldr	r3, [sp, #16]
 8008026:	9301      	str	r3, [sp, #4]
 8008028:	9d00      	ldr	r5, [sp, #0]
 800802a:	4631      	mov	r1, r6
 800802c:	4650      	mov	r0, sl
 800802e:	f7ff f9d6 	bl	80073de <quorem>
 8008032:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008036:	9b00      	ldr	r3, [sp, #0]
 8008038:	f805 9b01 	strb.w	r9, [r5], #1
 800803c:	1aea      	subs	r2, r5, r3
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	4293      	cmp	r3, r2
 8008042:	dd07      	ble.n	8008054 <_dtoa_r+0xb64>
 8008044:	4651      	mov	r1, sl
 8008046:	2300      	movs	r3, #0
 8008048:	220a      	movs	r2, #10
 800804a:	4620      	mov	r0, r4
 800804c:	f000 f9a4 	bl	8008398 <__multadd>
 8008050:	4682      	mov	sl, r0
 8008052:	e7ea      	b.n	800802a <_dtoa_r+0xb3a>
 8008054:	9b01      	ldr	r3, [sp, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfc8      	it	gt
 800805a:	461d      	movgt	r5, r3
 800805c:	9b00      	ldr	r3, [sp, #0]
 800805e:	bfd8      	it	le
 8008060:	2501      	movle	r5, #1
 8008062:	441d      	add	r5, r3
 8008064:	f04f 0800 	mov.w	r8, #0
 8008068:	4651      	mov	r1, sl
 800806a:	2201      	movs	r2, #1
 800806c:	4620      	mov	r0, r4
 800806e:	f000 fb41 	bl	80086f4 <__lshift>
 8008072:	4631      	mov	r1, r6
 8008074:	4682      	mov	sl, r0
 8008076:	f000 fba9 	bl	80087cc <__mcmp>
 800807a:	2800      	cmp	r0, #0
 800807c:	dc96      	bgt.n	8007fac <_dtoa_r+0xabc>
 800807e:	d102      	bne.n	8008086 <_dtoa_r+0xb96>
 8008080:	f019 0f01 	tst.w	r9, #1
 8008084:	d192      	bne.n	8007fac <_dtoa_r+0xabc>
 8008086:	462b      	mov	r3, r5
 8008088:	461d      	mov	r5, r3
 800808a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800808e:	2a30      	cmp	r2, #48	; 0x30
 8008090:	d0fa      	beq.n	8008088 <_dtoa_r+0xb98>
 8008092:	e6dd      	b.n	8007e50 <_dtoa_r+0x960>
 8008094:	9a00      	ldr	r2, [sp, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d189      	bne.n	8007fae <_dtoa_r+0xabe>
 800809a:	f10b 0b01 	add.w	fp, fp, #1
 800809e:	2331      	movs	r3, #49	; 0x31
 80080a0:	e796      	b.n	8007fd0 <_dtoa_r+0xae0>
 80080a2:	4b0a      	ldr	r3, [pc, #40]	; (80080cc <_dtoa_r+0xbdc>)
 80080a4:	f7ff ba99 	b.w	80075da <_dtoa_r+0xea>
 80080a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f47f aa6d 	bne.w	800758a <_dtoa_r+0x9a>
 80080b0:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <_dtoa_r+0xbe0>)
 80080b2:	f7ff ba92 	b.w	80075da <_dtoa_r+0xea>
 80080b6:	9b01      	ldr	r3, [sp, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	dcb5      	bgt.n	8008028 <_dtoa_r+0xb38>
 80080bc:	9b07      	ldr	r3, [sp, #28]
 80080be:	2b02      	cmp	r3, #2
 80080c0:	f73f aeb1 	bgt.w	8007e26 <_dtoa_r+0x936>
 80080c4:	e7b0      	b.n	8008028 <_dtoa_r+0xb38>
 80080c6:	bf00      	nop
 80080c8:	08009270 	.word	0x08009270
 80080cc:	080091d0 	.word	0x080091d0
 80080d0:	080091f4 	.word	0x080091f4

080080d4 <_free_r>:
 80080d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080d6:	2900      	cmp	r1, #0
 80080d8:	d044      	beq.n	8008164 <_free_r+0x90>
 80080da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080de:	9001      	str	r0, [sp, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f1a1 0404 	sub.w	r4, r1, #4
 80080e6:	bfb8      	it	lt
 80080e8:	18e4      	addlt	r4, r4, r3
 80080ea:	f000 f8e7 	bl	80082bc <__malloc_lock>
 80080ee:	4a1e      	ldr	r2, [pc, #120]	; (8008168 <_free_r+0x94>)
 80080f0:	9801      	ldr	r0, [sp, #4]
 80080f2:	6813      	ldr	r3, [r2, #0]
 80080f4:	b933      	cbnz	r3, 8008104 <_free_r+0x30>
 80080f6:	6063      	str	r3, [r4, #4]
 80080f8:	6014      	str	r4, [r2, #0]
 80080fa:	b003      	add	sp, #12
 80080fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008100:	f000 b8e2 	b.w	80082c8 <__malloc_unlock>
 8008104:	42a3      	cmp	r3, r4
 8008106:	d908      	bls.n	800811a <_free_r+0x46>
 8008108:	6825      	ldr	r5, [r4, #0]
 800810a:	1961      	adds	r1, r4, r5
 800810c:	428b      	cmp	r3, r1
 800810e:	bf01      	itttt	eq
 8008110:	6819      	ldreq	r1, [r3, #0]
 8008112:	685b      	ldreq	r3, [r3, #4]
 8008114:	1949      	addeq	r1, r1, r5
 8008116:	6021      	streq	r1, [r4, #0]
 8008118:	e7ed      	b.n	80080f6 <_free_r+0x22>
 800811a:	461a      	mov	r2, r3
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	b10b      	cbz	r3, 8008124 <_free_r+0x50>
 8008120:	42a3      	cmp	r3, r4
 8008122:	d9fa      	bls.n	800811a <_free_r+0x46>
 8008124:	6811      	ldr	r1, [r2, #0]
 8008126:	1855      	adds	r5, r2, r1
 8008128:	42a5      	cmp	r5, r4
 800812a:	d10b      	bne.n	8008144 <_free_r+0x70>
 800812c:	6824      	ldr	r4, [r4, #0]
 800812e:	4421      	add	r1, r4
 8008130:	1854      	adds	r4, r2, r1
 8008132:	42a3      	cmp	r3, r4
 8008134:	6011      	str	r1, [r2, #0]
 8008136:	d1e0      	bne.n	80080fa <_free_r+0x26>
 8008138:	681c      	ldr	r4, [r3, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	6053      	str	r3, [r2, #4]
 800813e:	440c      	add	r4, r1
 8008140:	6014      	str	r4, [r2, #0]
 8008142:	e7da      	b.n	80080fa <_free_r+0x26>
 8008144:	d902      	bls.n	800814c <_free_r+0x78>
 8008146:	230c      	movs	r3, #12
 8008148:	6003      	str	r3, [r0, #0]
 800814a:	e7d6      	b.n	80080fa <_free_r+0x26>
 800814c:	6825      	ldr	r5, [r4, #0]
 800814e:	1961      	adds	r1, r4, r5
 8008150:	428b      	cmp	r3, r1
 8008152:	bf04      	itt	eq
 8008154:	6819      	ldreq	r1, [r3, #0]
 8008156:	685b      	ldreq	r3, [r3, #4]
 8008158:	6063      	str	r3, [r4, #4]
 800815a:	bf04      	itt	eq
 800815c:	1949      	addeq	r1, r1, r5
 800815e:	6021      	streq	r1, [r4, #0]
 8008160:	6054      	str	r4, [r2, #4]
 8008162:	e7ca      	b.n	80080fa <_free_r+0x26>
 8008164:	b003      	add	sp, #12
 8008166:	bd30      	pop	{r4, r5, pc}
 8008168:	20000768 	.word	0x20000768

0800816c <malloc>:
 800816c:	4b02      	ldr	r3, [pc, #8]	; (8008178 <malloc+0xc>)
 800816e:	4601      	mov	r1, r0
 8008170:	6818      	ldr	r0, [r3, #0]
 8008172:	f000 b823 	b.w	80081bc <_malloc_r>
 8008176:	bf00      	nop
 8008178:	20000060 	.word	0x20000060

0800817c <sbrk_aligned>:
 800817c:	b570      	push	{r4, r5, r6, lr}
 800817e:	4e0e      	ldr	r6, [pc, #56]	; (80081b8 <sbrk_aligned+0x3c>)
 8008180:	460c      	mov	r4, r1
 8008182:	6831      	ldr	r1, [r6, #0]
 8008184:	4605      	mov	r5, r0
 8008186:	b911      	cbnz	r1, 800818e <sbrk_aligned+0x12>
 8008188:	f000 fcce 	bl	8008b28 <_sbrk_r>
 800818c:	6030      	str	r0, [r6, #0]
 800818e:	4621      	mov	r1, r4
 8008190:	4628      	mov	r0, r5
 8008192:	f000 fcc9 	bl	8008b28 <_sbrk_r>
 8008196:	1c43      	adds	r3, r0, #1
 8008198:	d00a      	beq.n	80081b0 <sbrk_aligned+0x34>
 800819a:	1cc4      	adds	r4, r0, #3
 800819c:	f024 0403 	bic.w	r4, r4, #3
 80081a0:	42a0      	cmp	r0, r4
 80081a2:	d007      	beq.n	80081b4 <sbrk_aligned+0x38>
 80081a4:	1a21      	subs	r1, r4, r0
 80081a6:	4628      	mov	r0, r5
 80081a8:	f000 fcbe 	bl	8008b28 <_sbrk_r>
 80081ac:	3001      	adds	r0, #1
 80081ae:	d101      	bne.n	80081b4 <sbrk_aligned+0x38>
 80081b0:	f04f 34ff 	mov.w	r4, #4294967295
 80081b4:	4620      	mov	r0, r4
 80081b6:	bd70      	pop	{r4, r5, r6, pc}
 80081b8:	2000076c 	.word	0x2000076c

080081bc <_malloc_r>:
 80081bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c0:	1ccd      	adds	r5, r1, #3
 80081c2:	f025 0503 	bic.w	r5, r5, #3
 80081c6:	3508      	adds	r5, #8
 80081c8:	2d0c      	cmp	r5, #12
 80081ca:	bf38      	it	cc
 80081cc:	250c      	movcc	r5, #12
 80081ce:	2d00      	cmp	r5, #0
 80081d0:	4607      	mov	r7, r0
 80081d2:	db01      	blt.n	80081d8 <_malloc_r+0x1c>
 80081d4:	42a9      	cmp	r1, r5
 80081d6:	d905      	bls.n	80081e4 <_malloc_r+0x28>
 80081d8:	230c      	movs	r3, #12
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	2600      	movs	r6, #0
 80081de:	4630      	mov	r0, r6
 80081e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80082b8 <_malloc_r+0xfc>
 80081e8:	f000 f868 	bl	80082bc <__malloc_lock>
 80081ec:	f8d8 3000 	ldr.w	r3, [r8]
 80081f0:	461c      	mov	r4, r3
 80081f2:	bb5c      	cbnz	r4, 800824c <_malloc_r+0x90>
 80081f4:	4629      	mov	r1, r5
 80081f6:	4638      	mov	r0, r7
 80081f8:	f7ff ffc0 	bl	800817c <sbrk_aligned>
 80081fc:	1c43      	adds	r3, r0, #1
 80081fe:	4604      	mov	r4, r0
 8008200:	d155      	bne.n	80082ae <_malloc_r+0xf2>
 8008202:	f8d8 4000 	ldr.w	r4, [r8]
 8008206:	4626      	mov	r6, r4
 8008208:	2e00      	cmp	r6, #0
 800820a:	d145      	bne.n	8008298 <_malloc_r+0xdc>
 800820c:	2c00      	cmp	r4, #0
 800820e:	d048      	beq.n	80082a2 <_malloc_r+0xe6>
 8008210:	6823      	ldr	r3, [r4, #0]
 8008212:	4631      	mov	r1, r6
 8008214:	4638      	mov	r0, r7
 8008216:	eb04 0903 	add.w	r9, r4, r3
 800821a:	f000 fc85 	bl	8008b28 <_sbrk_r>
 800821e:	4581      	cmp	r9, r0
 8008220:	d13f      	bne.n	80082a2 <_malloc_r+0xe6>
 8008222:	6821      	ldr	r1, [r4, #0]
 8008224:	1a6d      	subs	r5, r5, r1
 8008226:	4629      	mov	r1, r5
 8008228:	4638      	mov	r0, r7
 800822a:	f7ff ffa7 	bl	800817c <sbrk_aligned>
 800822e:	3001      	adds	r0, #1
 8008230:	d037      	beq.n	80082a2 <_malloc_r+0xe6>
 8008232:	6823      	ldr	r3, [r4, #0]
 8008234:	442b      	add	r3, r5
 8008236:	6023      	str	r3, [r4, #0]
 8008238:	f8d8 3000 	ldr.w	r3, [r8]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d038      	beq.n	80082b2 <_malloc_r+0xf6>
 8008240:	685a      	ldr	r2, [r3, #4]
 8008242:	42a2      	cmp	r2, r4
 8008244:	d12b      	bne.n	800829e <_malloc_r+0xe2>
 8008246:	2200      	movs	r2, #0
 8008248:	605a      	str	r2, [r3, #4]
 800824a:	e00f      	b.n	800826c <_malloc_r+0xb0>
 800824c:	6822      	ldr	r2, [r4, #0]
 800824e:	1b52      	subs	r2, r2, r5
 8008250:	d41f      	bmi.n	8008292 <_malloc_r+0xd6>
 8008252:	2a0b      	cmp	r2, #11
 8008254:	d917      	bls.n	8008286 <_malloc_r+0xca>
 8008256:	1961      	adds	r1, r4, r5
 8008258:	42a3      	cmp	r3, r4
 800825a:	6025      	str	r5, [r4, #0]
 800825c:	bf18      	it	ne
 800825e:	6059      	strne	r1, [r3, #4]
 8008260:	6863      	ldr	r3, [r4, #4]
 8008262:	bf08      	it	eq
 8008264:	f8c8 1000 	streq.w	r1, [r8]
 8008268:	5162      	str	r2, [r4, r5]
 800826a:	604b      	str	r3, [r1, #4]
 800826c:	4638      	mov	r0, r7
 800826e:	f104 060b 	add.w	r6, r4, #11
 8008272:	f000 f829 	bl	80082c8 <__malloc_unlock>
 8008276:	f026 0607 	bic.w	r6, r6, #7
 800827a:	1d23      	adds	r3, r4, #4
 800827c:	1af2      	subs	r2, r6, r3
 800827e:	d0ae      	beq.n	80081de <_malloc_r+0x22>
 8008280:	1b9b      	subs	r3, r3, r6
 8008282:	50a3      	str	r3, [r4, r2]
 8008284:	e7ab      	b.n	80081de <_malloc_r+0x22>
 8008286:	42a3      	cmp	r3, r4
 8008288:	6862      	ldr	r2, [r4, #4]
 800828a:	d1dd      	bne.n	8008248 <_malloc_r+0x8c>
 800828c:	f8c8 2000 	str.w	r2, [r8]
 8008290:	e7ec      	b.n	800826c <_malloc_r+0xb0>
 8008292:	4623      	mov	r3, r4
 8008294:	6864      	ldr	r4, [r4, #4]
 8008296:	e7ac      	b.n	80081f2 <_malloc_r+0x36>
 8008298:	4634      	mov	r4, r6
 800829a:	6876      	ldr	r6, [r6, #4]
 800829c:	e7b4      	b.n	8008208 <_malloc_r+0x4c>
 800829e:	4613      	mov	r3, r2
 80082a0:	e7cc      	b.n	800823c <_malloc_r+0x80>
 80082a2:	230c      	movs	r3, #12
 80082a4:	603b      	str	r3, [r7, #0]
 80082a6:	4638      	mov	r0, r7
 80082a8:	f000 f80e 	bl	80082c8 <__malloc_unlock>
 80082ac:	e797      	b.n	80081de <_malloc_r+0x22>
 80082ae:	6025      	str	r5, [r4, #0]
 80082b0:	e7dc      	b.n	800826c <_malloc_r+0xb0>
 80082b2:	605b      	str	r3, [r3, #4]
 80082b4:	deff      	udf	#255	; 0xff
 80082b6:	bf00      	nop
 80082b8:	20000768 	.word	0x20000768

080082bc <__malloc_lock>:
 80082bc:	4801      	ldr	r0, [pc, #4]	; (80082c4 <__malloc_lock+0x8>)
 80082be:	f7ff b87e 	b.w	80073be <__retarget_lock_acquire_recursive>
 80082c2:	bf00      	nop
 80082c4:	20000764 	.word	0x20000764

080082c8 <__malloc_unlock>:
 80082c8:	4801      	ldr	r0, [pc, #4]	; (80082d0 <__malloc_unlock+0x8>)
 80082ca:	f7ff b879 	b.w	80073c0 <__retarget_lock_release_recursive>
 80082ce:	bf00      	nop
 80082d0:	20000764 	.word	0x20000764

080082d4 <_Balloc>:
 80082d4:	b570      	push	{r4, r5, r6, lr}
 80082d6:	69c6      	ldr	r6, [r0, #28]
 80082d8:	4604      	mov	r4, r0
 80082da:	460d      	mov	r5, r1
 80082dc:	b976      	cbnz	r6, 80082fc <_Balloc+0x28>
 80082de:	2010      	movs	r0, #16
 80082e0:	f7ff ff44 	bl	800816c <malloc>
 80082e4:	4602      	mov	r2, r0
 80082e6:	61e0      	str	r0, [r4, #28]
 80082e8:	b920      	cbnz	r0, 80082f4 <_Balloc+0x20>
 80082ea:	4b18      	ldr	r3, [pc, #96]	; (800834c <_Balloc+0x78>)
 80082ec:	4818      	ldr	r0, [pc, #96]	; (8008350 <_Balloc+0x7c>)
 80082ee:	216b      	movs	r1, #107	; 0x6b
 80082f0:	f000 fc2a 	bl	8008b48 <__assert_func>
 80082f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082f8:	6006      	str	r6, [r0, #0]
 80082fa:	60c6      	str	r6, [r0, #12]
 80082fc:	69e6      	ldr	r6, [r4, #28]
 80082fe:	68f3      	ldr	r3, [r6, #12]
 8008300:	b183      	cbz	r3, 8008324 <_Balloc+0x50>
 8008302:	69e3      	ldr	r3, [r4, #28]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800830a:	b9b8      	cbnz	r0, 800833c <_Balloc+0x68>
 800830c:	2101      	movs	r1, #1
 800830e:	fa01 f605 	lsl.w	r6, r1, r5
 8008312:	1d72      	adds	r2, r6, #5
 8008314:	0092      	lsls	r2, r2, #2
 8008316:	4620      	mov	r0, r4
 8008318:	f000 fc34 	bl	8008b84 <_calloc_r>
 800831c:	b160      	cbz	r0, 8008338 <_Balloc+0x64>
 800831e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008322:	e00e      	b.n	8008342 <_Balloc+0x6e>
 8008324:	2221      	movs	r2, #33	; 0x21
 8008326:	2104      	movs	r1, #4
 8008328:	4620      	mov	r0, r4
 800832a:	f000 fc2b 	bl	8008b84 <_calloc_r>
 800832e:	69e3      	ldr	r3, [r4, #28]
 8008330:	60f0      	str	r0, [r6, #12]
 8008332:	68db      	ldr	r3, [r3, #12]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e4      	bne.n	8008302 <_Balloc+0x2e>
 8008338:	2000      	movs	r0, #0
 800833a:	bd70      	pop	{r4, r5, r6, pc}
 800833c:	6802      	ldr	r2, [r0, #0]
 800833e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008342:	2300      	movs	r3, #0
 8008344:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008348:	e7f7      	b.n	800833a <_Balloc+0x66>
 800834a:	bf00      	nop
 800834c:	08009201 	.word	0x08009201
 8008350:	08009281 	.word	0x08009281

08008354 <_Bfree>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	69c6      	ldr	r6, [r0, #28]
 8008358:	4605      	mov	r5, r0
 800835a:	460c      	mov	r4, r1
 800835c:	b976      	cbnz	r6, 800837c <_Bfree+0x28>
 800835e:	2010      	movs	r0, #16
 8008360:	f7ff ff04 	bl	800816c <malloc>
 8008364:	4602      	mov	r2, r0
 8008366:	61e8      	str	r0, [r5, #28]
 8008368:	b920      	cbnz	r0, 8008374 <_Bfree+0x20>
 800836a:	4b09      	ldr	r3, [pc, #36]	; (8008390 <_Bfree+0x3c>)
 800836c:	4809      	ldr	r0, [pc, #36]	; (8008394 <_Bfree+0x40>)
 800836e:	218f      	movs	r1, #143	; 0x8f
 8008370:	f000 fbea 	bl	8008b48 <__assert_func>
 8008374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008378:	6006      	str	r6, [r0, #0]
 800837a:	60c6      	str	r6, [r0, #12]
 800837c:	b13c      	cbz	r4, 800838e <_Bfree+0x3a>
 800837e:	69eb      	ldr	r3, [r5, #28]
 8008380:	6862      	ldr	r2, [r4, #4]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008388:	6021      	str	r1, [r4, #0]
 800838a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	08009201 	.word	0x08009201
 8008394:	08009281 	.word	0x08009281

08008398 <__multadd>:
 8008398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839c:	690d      	ldr	r5, [r1, #16]
 800839e:	4607      	mov	r7, r0
 80083a0:	460c      	mov	r4, r1
 80083a2:	461e      	mov	r6, r3
 80083a4:	f101 0c14 	add.w	ip, r1, #20
 80083a8:	2000      	movs	r0, #0
 80083aa:	f8dc 3000 	ldr.w	r3, [ip]
 80083ae:	b299      	uxth	r1, r3
 80083b0:	fb02 6101 	mla	r1, r2, r1, r6
 80083b4:	0c1e      	lsrs	r6, r3, #16
 80083b6:	0c0b      	lsrs	r3, r1, #16
 80083b8:	fb02 3306 	mla	r3, r2, r6, r3
 80083bc:	b289      	uxth	r1, r1
 80083be:	3001      	adds	r0, #1
 80083c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083c4:	4285      	cmp	r5, r0
 80083c6:	f84c 1b04 	str.w	r1, [ip], #4
 80083ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083ce:	dcec      	bgt.n	80083aa <__multadd+0x12>
 80083d0:	b30e      	cbz	r6, 8008416 <__multadd+0x7e>
 80083d2:	68a3      	ldr	r3, [r4, #8]
 80083d4:	42ab      	cmp	r3, r5
 80083d6:	dc19      	bgt.n	800840c <__multadd+0x74>
 80083d8:	6861      	ldr	r1, [r4, #4]
 80083da:	4638      	mov	r0, r7
 80083dc:	3101      	adds	r1, #1
 80083de:	f7ff ff79 	bl	80082d4 <_Balloc>
 80083e2:	4680      	mov	r8, r0
 80083e4:	b928      	cbnz	r0, 80083f2 <__multadd+0x5a>
 80083e6:	4602      	mov	r2, r0
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <__multadd+0x84>)
 80083ea:	480d      	ldr	r0, [pc, #52]	; (8008420 <__multadd+0x88>)
 80083ec:	21ba      	movs	r1, #186	; 0xba
 80083ee:	f000 fbab 	bl	8008b48 <__assert_func>
 80083f2:	6922      	ldr	r2, [r4, #16]
 80083f4:	3202      	adds	r2, #2
 80083f6:	f104 010c 	add.w	r1, r4, #12
 80083fa:	0092      	lsls	r2, r2, #2
 80083fc:	300c      	adds	r0, #12
 80083fe:	f7fe ffe0 	bl	80073c2 <memcpy>
 8008402:	4621      	mov	r1, r4
 8008404:	4638      	mov	r0, r7
 8008406:	f7ff ffa5 	bl	8008354 <_Bfree>
 800840a:	4644      	mov	r4, r8
 800840c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008410:	3501      	adds	r5, #1
 8008412:	615e      	str	r6, [r3, #20]
 8008414:	6125      	str	r5, [r4, #16]
 8008416:	4620      	mov	r0, r4
 8008418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800841c:	08009270 	.word	0x08009270
 8008420:	08009281 	.word	0x08009281

08008424 <__hi0bits>:
 8008424:	0c03      	lsrs	r3, r0, #16
 8008426:	041b      	lsls	r3, r3, #16
 8008428:	b9d3      	cbnz	r3, 8008460 <__hi0bits+0x3c>
 800842a:	0400      	lsls	r0, r0, #16
 800842c:	2310      	movs	r3, #16
 800842e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008432:	bf04      	itt	eq
 8008434:	0200      	lsleq	r0, r0, #8
 8008436:	3308      	addeq	r3, #8
 8008438:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800843c:	bf04      	itt	eq
 800843e:	0100      	lsleq	r0, r0, #4
 8008440:	3304      	addeq	r3, #4
 8008442:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008446:	bf04      	itt	eq
 8008448:	0080      	lsleq	r0, r0, #2
 800844a:	3302      	addeq	r3, #2
 800844c:	2800      	cmp	r0, #0
 800844e:	db05      	blt.n	800845c <__hi0bits+0x38>
 8008450:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008454:	f103 0301 	add.w	r3, r3, #1
 8008458:	bf08      	it	eq
 800845a:	2320      	moveq	r3, #32
 800845c:	4618      	mov	r0, r3
 800845e:	4770      	bx	lr
 8008460:	2300      	movs	r3, #0
 8008462:	e7e4      	b.n	800842e <__hi0bits+0xa>

08008464 <__lo0bits>:
 8008464:	6803      	ldr	r3, [r0, #0]
 8008466:	f013 0207 	ands.w	r2, r3, #7
 800846a:	d00c      	beq.n	8008486 <__lo0bits+0x22>
 800846c:	07d9      	lsls	r1, r3, #31
 800846e:	d422      	bmi.n	80084b6 <__lo0bits+0x52>
 8008470:	079a      	lsls	r2, r3, #30
 8008472:	bf49      	itett	mi
 8008474:	085b      	lsrmi	r3, r3, #1
 8008476:	089b      	lsrpl	r3, r3, #2
 8008478:	6003      	strmi	r3, [r0, #0]
 800847a:	2201      	movmi	r2, #1
 800847c:	bf5c      	itt	pl
 800847e:	6003      	strpl	r3, [r0, #0]
 8008480:	2202      	movpl	r2, #2
 8008482:	4610      	mov	r0, r2
 8008484:	4770      	bx	lr
 8008486:	b299      	uxth	r1, r3
 8008488:	b909      	cbnz	r1, 800848e <__lo0bits+0x2a>
 800848a:	0c1b      	lsrs	r3, r3, #16
 800848c:	2210      	movs	r2, #16
 800848e:	b2d9      	uxtb	r1, r3
 8008490:	b909      	cbnz	r1, 8008496 <__lo0bits+0x32>
 8008492:	3208      	adds	r2, #8
 8008494:	0a1b      	lsrs	r3, r3, #8
 8008496:	0719      	lsls	r1, r3, #28
 8008498:	bf04      	itt	eq
 800849a:	091b      	lsreq	r3, r3, #4
 800849c:	3204      	addeq	r2, #4
 800849e:	0799      	lsls	r1, r3, #30
 80084a0:	bf04      	itt	eq
 80084a2:	089b      	lsreq	r3, r3, #2
 80084a4:	3202      	addeq	r2, #2
 80084a6:	07d9      	lsls	r1, r3, #31
 80084a8:	d403      	bmi.n	80084b2 <__lo0bits+0x4e>
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	f102 0201 	add.w	r2, r2, #1
 80084b0:	d003      	beq.n	80084ba <__lo0bits+0x56>
 80084b2:	6003      	str	r3, [r0, #0]
 80084b4:	e7e5      	b.n	8008482 <__lo0bits+0x1e>
 80084b6:	2200      	movs	r2, #0
 80084b8:	e7e3      	b.n	8008482 <__lo0bits+0x1e>
 80084ba:	2220      	movs	r2, #32
 80084bc:	e7e1      	b.n	8008482 <__lo0bits+0x1e>
	...

080084c0 <__i2b>:
 80084c0:	b510      	push	{r4, lr}
 80084c2:	460c      	mov	r4, r1
 80084c4:	2101      	movs	r1, #1
 80084c6:	f7ff ff05 	bl	80082d4 <_Balloc>
 80084ca:	4602      	mov	r2, r0
 80084cc:	b928      	cbnz	r0, 80084da <__i2b+0x1a>
 80084ce:	4b05      	ldr	r3, [pc, #20]	; (80084e4 <__i2b+0x24>)
 80084d0:	4805      	ldr	r0, [pc, #20]	; (80084e8 <__i2b+0x28>)
 80084d2:	f240 1145 	movw	r1, #325	; 0x145
 80084d6:	f000 fb37 	bl	8008b48 <__assert_func>
 80084da:	2301      	movs	r3, #1
 80084dc:	6144      	str	r4, [r0, #20]
 80084de:	6103      	str	r3, [r0, #16]
 80084e0:	bd10      	pop	{r4, pc}
 80084e2:	bf00      	nop
 80084e4:	08009270 	.word	0x08009270
 80084e8:	08009281 	.word	0x08009281

080084ec <__multiply>:
 80084ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f0:	4691      	mov	r9, r2
 80084f2:	690a      	ldr	r2, [r1, #16]
 80084f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	bfb8      	it	lt
 80084fc:	460b      	movlt	r3, r1
 80084fe:	460c      	mov	r4, r1
 8008500:	bfbc      	itt	lt
 8008502:	464c      	movlt	r4, r9
 8008504:	4699      	movlt	r9, r3
 8008506:	6927      	ldr	r7, [r4, #16]
 8008508:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800850c:	68a3      	ldr	r3, [r4, #8]
 800850e:	6861      	ldr	r1, [r4, #4]
 8008510:	eb07 060a 	add.w	r6, r7, sl
 8008514:	42b3      	cmp	r3, r6
 8008516:	b085      	sub	sp, #20
 8008518:	bfb8      	it	lt
 800851a:	3101      	addlt	r1, #1
 800851c:	f7ff feda 	bl	80082d4 <_Balloc>
 8008520:	b930      	cbnz	r0, 8008530 <__multiply+0x44>
 8008522:	4602      	mov	r2, r0
 8008524:	4b44      	ldr	r3, [pc, #272]	; (8008638 <__multiply+0x14c>)
 8008526:	4845      	ldr	r0, [pc, #276]	; (800863c <__multiply+0x150>)
 8008528:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800852c:	f000 fb0c 	bl	8008b48 <__assert_func>
 8008530:	f100 0514 	add.w	r5, r0, #20
 8008534:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008538:	462b      	mov	r3, r5
 800853a:	2200      	movs	r2, #0
 800853c:	4543      	cmp	r3, r8
 800853e:	d321      	bcc.n	8008584 <__multiply+0x98>
 8008540:	f104 0314 	add.w	r3, r4, #20
 8008544:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008548:	f109 0314 	add.w	r3, r9, #20
 800854c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008550:	9202      	str	r2, [sp, #8]
 8008552:	1b3a      	subs	r2, r7, r4
 8008554:	3a15      	subs	r2, #21
 8008556:	f022 0203 	bic.w	r2, r2, #3
 800855a:	3204      	adds	r2, #4
 800855c:	f104 0115 	add.w	r1, r4, #21
 8008560:	428f      	cmp	r7, r1
 8008562:	bf38      	it	cc
 8008564:	2204      	movcc	r2, #4
 8008566:	9201      	str	r2, [sp, #4]
 8008568:	9a02      	ldr	r2, [sp, #8]
 800856a:	9303      	str	r3, [sp, #12]
 800856c:	429a      	cmp	r2, r3
 800856e:	d80c      	bhi.n	800858a <__multiply+0x9e>
 8008570:	2e00      	cmp	r6, #0
 8008572:	dd03      	ble.n	800857c <__multiply+0x90>
 8008574:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008578:	2b00      	cmp	r3, #0
 800857a:	d05b      	beq.n	8008634 <__multiply+0x148>
 800857c:	6106      	str	r6, [r0, #16]
 800857e:	b005      	add	sp, #20
 8008580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008584:	f843 2b04 	str.w	r2, [r3], #4
 8008588:	e7d8      	b.n	800853c <__multiply+0x50>
 800858a:	f8b3 a000 	ldrh.w	sl, [r3]
 800858e:	f1ba 0f00 	cmp.w	sl, #0
 8008592:	d024      	beq.n	80085de <__multiply+0xf2>
 8008594:	f104 0e14 	add.w	lr, r4, #20
 8008598:	46a9      	mov	r9, r5
 800859a:	f04f 0c00 	mov.w	ip, #0
 800859e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80085a2:	f8d9 1000 	ldr.w	r1, [r9]
 80085a6:	fa1f fb82 	uxth.w	fp, r2
 80085aa:	b289      	uxth	r1, r1
 80085ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80085b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80085b4:	f8d9 2000 	ldr.w	r2, [r9]
 80085b8:	4461      	add	r1, ip
 80085ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085be:	fb0a c20b 	mla	r2, sl, fp, ip
 80085c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80085c6:	b289      	uxth	r1, r1
 80085c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80085cc:	4577      	cmp	r7, lr
 80085ce:	f849 1b04 	str.w	r1, [r9], #4
 80085d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80085d6:	d8e2      	bhi.n	800859e <__multiply+0xb2>
 80085d8:	9a01      	ldr	r2, [sp, #4]
 80085da:	f845 c002 	str.w	ip, [r5, r2]
 80085de:	9a03      	ldr	r2, [sp, #12]
 80085e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80085e4:	3304      	adds	r3, #4
 80085e6:	f1b9 0f00 	cmp.w	r9, #0
 80085ea:	d021      	beq.n	8008630 <__multiply+0x144>
 80085ec:	6829      	ldr	r1, [r5, #0]
 80085ee:	f104 0c14 	add.w	ip, r4, #20
 80085f2:	46ae      	mov	lr, r5
 80085f4:	f04f 0a00 	mov.w	sl, #0
 80085f8:	f8bc b000 	ldrh.w	fp, [ip]
 80085fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008600:	fb09 220b 	mla	r2, r9, fp, r2
 8008604:	4452      	add	r2, sl
 8008606:	b289      	uxth	r1, r1
 8008608:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800860c:	f84e 1b04 	str.w	r1, [lr], #4
 8008610:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008614:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008618:	f8be 1000 	ldrh.w	r1, [lr]
 800861c:	fb09 110a 	mla	r1, r9, sl, r1
 8008620:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008624:	4567      	cmp	r7, ip
 8008626:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800862a:	d8e5      	bhi.n	80085f8 <__multiply+0x10c>
 800862c:	9a01      	ldr	r2, [sp, #4]
 800862e:	50a9      	str	r1, [r5, r2]
 8008630:	3504      	adds	r5, #4
 8008632:	e799      	b.n	8008568 <__multiply+0x7c>
 8008634:	3e01      	subs	r6, #1
 8008636:	e79b      	b.n	8008570 <__multiply+0x84>
 8008638:	08009270 	.word	0x08009270
 800863c:	08009281 	.word	0x08009281

08008640 <__pow5mult>:
 8008640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008644:	4615      	mov	r5, r2
 8008646:	f012 0203 	ands.w	r2, r2, #3
 800864a:	4606      	mov	r6, r0
 800864c:	460f      	mov	r7, r1
 800864e:	d007      	beq.n	8008660 <__pow5mult+0x20>
 8008650:	4c25      	ldr	r4, [pc, #148]	; (80086e8 <__pow5mult+0xa8>)
 8008652:	3a01      	subs	r2, #1
 8008654:	2300      	movs	r3, #0
 8008656:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800865a:	f7ff fe9d 	bl	8008398 <__multadd>
 800865e:	4607      	mov	r7, r0
 8008660:	10ad      	asrs	r5, r5, #2
 8008662:	d03d      	beq.n	80086e0 <__pow5mult+0xa0>
 8008664:	69f4      	ldr	r4, [r6, #28]
 8008666:	b97c      	cbnz	r4, 8008688 <__pow5mult+0x48>
 8008668:	2010      	movs	r0, #16
 800866a:	f7ff fd7f 	bl	800816c <malloc>
 800866e:	4602      	mov	r2, r0
 8008670:	61f0      	str	r0, [r6, #28]
 8008672:	b928      	cbnz	r0, 8008680 <__pow5mult+0x40>
 8008674:	4b1d      	ldr	r3, [pc, #116]	; (80086ec <__pow5mult+0xac>)
 8008676:	481e      	ldr	r0, [pc, #120]	; (80086f0 <__pow5mult+0xb0>)
 8008678:	f240 11b3 	movw	r1, #435	; 0x1b3
 800867c:	f000 fa64 	bl	8008b48 <__assert_func>
 8008680:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008684:	6004      	str	r4, [r0, #0]
 8008686:	60c4      	str	r4, [r0, #12]
 8008688:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800868c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008690:	b94c      	cbnz	r4, 80086a6 <__pow5mult+0x66>
 8008692:	f240 2171 	movw	r1, #625	; 0x271
 8008696:	4630      	mov	r0, r6
 8008698:	f7ff ff12 	bl	80084c0 <__i2b>
 800869c:	2300      	movs	r3, #0
 800869e:	f8c8 0008 	str.w	r0, [r8, #8]
 80086a2:	4604      	mov	r4, r0
 80086a4:	6003      	str	r3, [r0, #0]
 80086a6:	f04f 0900 	mov.w	r9, #0
 80086aa:	07eb      	lsls	r3, r5, #31
 80086ac:	d50a      	bpl.n	80086c4 <__pow5mult+0x84>
 80086ae:	4639      	mov	r1, r7
 80086b0:	4622      	mov	r2, r4
 80086b2:	4630      	mov	r0, r6
 80086b4:	f7ff ff1a 	bl	80084ec <__multiply>
 80086b8:	4639      	mov	r1, r7
 80086ba:	4680      	mov	r8, r0
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff fe49 	bl	8008354 <_Bfree>
 80086c2:	4647      	mov	r7, r8
 80086c4:	106d      	asrs	r5, r5, #1
 80086c6:	d00b      	beq.n	80086e0 <__pow5mult+0xa0>
 80086c8:	6820      	ldr	r0, [r4, #0]
 80086ca:	b938      	cbnz	r0, 80086dc <__pow5mult+0x9c>
 80086cc:	4622      	mov	r2, r4
 80086ce:	4621      	mov	r1, r4
 80086d0:	4630      	mov	r0, r6
 80086d2:	f7ff ff0b 	bl	80084ec <__multiply>
 80086d6:	6020      	str	r0, [r4, #0]
 80086d8:	f8c0 9000 	str.w	r9, [r0]
 80086dc:	4604      	mov	r4, r0
 80086de:	e7e4      	b.n	80086aa <__pow5mult+0x6a>
 80086e0:	4638      	mov	r0, r7
 80086e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086e6:	bf00      	nop
 80086e8:	080093d0 	.word	0x080093d0
 80086ec:	08009201 	.word	0x08009201
 80086f0:	08009281 	.word	0x08009281

080086f4 <__lshift>:
 80086f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086f8:	460c      	mov	r4, r1
 80086fa:	6849      	ldr	r1, [r1, #4]
 80086fc:	6923      	ldr	r3, [r4, #16]
 80086fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008702:	68a3      	ldr	r3, [r4, #8]
 8008704:	4607      	mov	r7, r0
 8008706:	4691      	mov	r9, r2
 8008708:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800870c:	f108 0601 	add.w	r6, r8, #1
 8008710:	42b3      	cmp	r3, r6
 8008712:	db0b      	blt.n	800872c <__lshift+0x38>
 8008714:	4638      	mov	r0, r7
 8008716:	f7ff fddd 	bl	80082d4 <_Balloc>
 800871a:	4605      	mov	r5, r0
 800871c:	b948      	cbnz	r0, 8008732 <__lshift+0x3e>
 800871e:	4602      	mov	r2, r0
 8008720:	4b28      	ldr	r3, [pc, #160]	; (80087c4 <__lshift+0xd0>)
 8008722:	4829      	ldr	r0, [pc, #164]	; (80087c8 <__lshift+0xd4>)
 8008724:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008728:	f000 fa0e 	bl	8008b48 <__assert_func>
 800872c:	3101      	adds	r1, #1
 800872e:	005b      	lsls	r3, r3, #1
 8008730:	e7ee      	b.n	8008710 <__lshift+0x1c>
 8008732:	2300      	movs	r3, #0
 8008734:	f100 0114 	add.w	r1, r0, #20
 8008738:	f100 0210 	add.w	r2, r0, #16
 800873c:	4618      	mov	r0, r3
 800873e:	4553      	cmp	r3, sl
 8008740:	db33      	blt.n	80087aa <__lshift+0xb6>
 8008742:	6920      	ldr	r0, [r4, #16]
 8008744:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008748:	f104 0314 	add.w	r3, r4, #20
 800874c:	f019 091f 	ands.w	r9, r9, #31
 8008750:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008754:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008758:	d02b      	beq.n	80087b2 <__lshift+0xbe>
 800875a:	f1c9 0e20 	rsb	lr, r9, #32
 800875e:	468a      	mov	sl, r1
 8008760:	2200      	movs	r2, #0
 8008762:	6818      	ldr	r0, [r3, #0]
 8008764:	fa00 f009 	lsl.w	r0, r0, r9
 8008768:	4310      	orrs	r0, r2
 800876a:	f84a 0b04 	str.w	r0, [sl], #4
 800876e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008772:	459c      	cmp	ip, r3
 8008774:	fa22 f20e 	lsr.w	r2, r2, lr
 8008778:	d8f3      	bhi.n	8008762 <__lshift+0x6e>
 800877a:	ebac 0304 	sub.w	r3, ip, r4
 800877e:	3b15      	subs	r3, #21
 8008780:	f023 0303 	bic.w	r3, r3, #3
 8008784:	3304      	adds	r3, #4
 8008786:	f104 0015 	add.w	r0, r4, #21
 800878a:	4584      	cmp	ip, r0
 800878c:	bf38      	it	cc
 800878e:	2304      	movcc	r3, #4
 8008790:	50ca      	str	r2, [r1, r3]
 8008792:	b10a      	cbz	r2, 8008798 <__lshift+0xa4>
 8008794:	f108 0602 	add.w	r6, r8, #2
 8008798:	3e01      	subs	r6, #1
 800879a:	4638      	mov	r0, r7
 800879c:	612e      	str	r6, [r5, #16]
 800879e:	4621      	mov	r1, r4
 80087a0:	f7ff fdd8 	bl	8008354 <_Bfree>
 80087a4:	4628      	mov	r0, r5
 80087a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80087ae:	3301      	adds	r3, #1
 80087b0:	e7c5      	b.n	800873e <__lshift+0x4a>
 80087b2:	3904      	subs	r1, #4
 80087b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80087bc:	459c      	cmp	ip, r3
 80087be:	d8f9      	bhi.n	80087b4 <__lshift+0xc0>
 80087c0:	e7ea      	b.n	8008798 <__lshift+0xa4>
 80087c2:	bf00      	nop
 80087c4:	08009270 	.word	0x08009270
 80087c8:	08009281 	.word	0x08009281

080087cc <__mcmp>:
 80087cc:	b530      	push	{r4, r5, lr}
 80087ce:	6902      	ldr	r2, [r0, #16]
 80087d0:	690c      	ldr	r4, [r1, #16]
 80087d2:	1b12      	subs	r2, r2, r4
 80087d4:	d10e      	bne.n	80087f4 <__mcmp+0x28>
 80087d6:	f100 0314 	add.w	r3, r0, #20
 80087da:	3114      	adds	r1, #20
 80087dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80087e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80087e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80087e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80087ec:	42a5      	cmp	r5, r4
 80087ee:	d003      	beq.n	80087f8 <__mcmp+0x2c>
 80087f0:	d305      	bcc.n	80087fe <__mcmp+0x32>
 80087f2:	2201      	movs	r2, #1
 80087f4:	4610      	mov	r0, r2
 80087f6:	bd30      	pop	{r4, r5, pc}
 80087f8:	4283      	cmp	r3, r0
 80087fa:	d3f3      	bcc.n	80087e4 <__mcmp+0x18>
 80087fc:	e7fa      	b.n	80087f4 <__mcmp+0x28>
 80087fe:	f04f 32ff 	mov.w	r2, #4294967295
 8008802:	e7f7      	b.n	80087f4 <__mcmp+0x28>

08008804 <__mdiff>:
 8008804:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008808:	460c      	mov	r4, r1
 800880a:	4606      	mov	r6, r0
 800880c:	4611      	mov	r1, r2
 800880e:	4620      	mov	r0, r4
 8008810:	4690      	mov	r8, r2
 8008812:	f7ff ffdb 	bl	80087cc <__mcmp>
 8008816:	1e05      	subs	r5, r0, #0
 8008818:	d110      	bne.n	800883c <__mdiff+0x38>
 800881a:	4629      	mov	r1, r5
 800881c:	4630      	mov	r0, r6
 800881e:	f7ff fd59 	bl	80082d4 <_Balloc>
 8008822:	b930      	cbnz	r0, 8008832 <__mdiff+0x2e>
 8008824:	4b3a      	ldr	r3, [pc, #232]	; (8008910 <__mdiff+0x10c>)
 8008826:	4602      	mov	r2, r0
 8008828:	f240 2137 	movw	r1, #567	; 0x237
 800882c:	4839      	ldr	r0, [pc, #228]	; (8008914 <__mdiff+0x110>)
 800882e:	f000 f98b 	bl	8008b48 <__assert_func>
 8008832:	2301      	movs	r3, #1
 8008834:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008838:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883c:	bfa4      	itt	ge
 800883e:	4643      	movge	r3, r8
 8008840:	46a0      	movge	r8, r4
 8008842:	4630      	mov	r0, r6
 8008844:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008848:	bfa6      	itte	ge
 800884a:	461c      	movge	r4, r3
 800884c:	2500      	movge	r5, #0
 800884e:	2501      	movlt	r5, #1
 8008850:	f7ff fd40 	bl	80082d4 <_Balloc>
 8008854:	b920      	cbnz	r0, 8008860 <__mdiff+0x5c>
 8008856:	4b2e      	ldr	r3, [pc, #184]	; (8008910 <__mdiff+0x10c>)
 8008858:	4602      	mov	r2, r0
 800885a:	f240 2145 	movw	r1, #581	; 0x245
 800885e:	e7e5      	b.n	800882c <__mdiff+0x28>
 8008860:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008864:	6926      	ldr	r6, [r4, #16]
 8008866:	60c5      	str	r5, [r0, #12]
 8008868:	f104 0914 	add.w	r9, r4, #20
 800886c:	f108 0514 	add.w	r5, r8, #20
 8008870:	f100 0e14 	add.w	lr, r0, #20
 8008874:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008878:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800887c:	f108 0210 	add.w	r2, r8, #16
 8008880:	46f2      	mov	sl, lr
 8008882:	2100      	movs	r1, #0
 8008884:	f859 3b04 	ldr.w	r3, [r9], #4
 8008888:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800888c:	fa11 f88b 	uxtah	r8, r1, fp
 8008890:	b299      	uxth	r1, r3
 8008892:	0c1b      	lsrs	r3, r3, #16
 8008894:	eba8 0801 	sub.w	r8, r8, r1
 8008898:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800889c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80088a0:	fa1f f888 	uxth.w	r8, r8
 80088a4:	1419      	asrs	r1, r3, #16
 80088a6:	454e      	cmp	r6, r9
 80088a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80088ac:	f84a 3b04 	str.w	r3, [sl], #4
 80088b0:	d8e8      	bhi.n	8008884 <__mdiff+0x80>
 80088b2:	1b33      	subs	r3, r6, r4
 80088b4:	3b15      	subs	r3, #21
 80088b6:	f023 0303 	bic.w	r3, r3, #3
 80088ba:	3304      	adds	r3, #4
 80088bc:	3415      	adds	r4, #21
 80088be:	42a6      	cmp	r6, r4
 80088c0:	bf38      	it	cc
 80088c2:	2304      	movcc	r3, #4
 80088c4:	441d      	add	r5, r3
 80088c6:	4473      	add	r3, lr
 80088c8:	469e      	mov	lr, r3
 80088ca:	462e      	mov	r6, r5
 80088cc:	4566      	cmp	r6, ip
 80088ce:	d30e      	bcc.n	80088ee <__mdiff+0xea>
 80088d0:	f10c 0203 	add.w	r2, ip, #3
 80088d4:	1b52      	subs	r2, r2, r5
 80088d6:	f022 0203 	bic.w	r2, r2, #3
 80088da:	3d03      	subs	r5, #3
 80088dc:	45ac      	cmp	ip, r5
 80088de:	bf38      	it	cc
 80088e0:	2200      	movcc	r2, #0
 80088e2:	4413      	add	r3, r2
 80088e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80088e8:	b17a      	cbz	r2, 800890a <__mdiff+0x106>
 80088ea:	6107      	str	r7, [r0, #16]
 80088ec:	e7a4      	b.n	8008838 <__mdiff+0x34>
 80088ee:	f856 8b04 	ldr.w	r8, [r6], #4
 80088f2:	fa11 f288 	uxtah	r2, r1, r8
 80088f6:	1414      	asrs	r4, r2, #16
 80088f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80088fc:	b292      	uxth	r2, r2
 80088fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008902:	f84e 2b04 	str.w	r2, [lr], #4
 8008906:	1421      	asrs	r1, r4, #16
 8008908:	e7e0      	b.n	80088cc <__mdiff+0xc8>
 800890a:	3f01      	subs	r7, #1
 800890c:	e7ea      	b.n	80088e4 <__mdiff+0xe0>
 800890e:	bf00      	nop
 8008910:	08009270 	.word	0x08009270
 8008914:	08009281 	.word	0x08009281

08008918 <__d2b>:
 8008918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800891c:	460f      	mov	r7, r1
 800891e:	2101      	movs	r1, #1
 8008920:	ec59 8b10 	vmov	r8, r9, d0
 8008924:	4616      	mov	r6, r2
 8008926:	f7ff fcd5 	bl	80082d4 <_Balloc>
 800892a:	4604      	mov	r4, r0
 800892c:	b930      	cbnz	r0, 800893c <__d2b+0x24>
 800892e:	4602      	mov	r2, r0
 8008930:	4b24      	ldr	r3, [pc, #144]	; (80089c4 <__d2b+0xac>)
 8008932:	4825      	ldr	r0, [pc, #148]	; (80089c8 <__d2b+0xb0>)
 8008934:	f240 310f 	movw	r1, #783	; 0x30f
 8008938:	f000 f906 	bl	8008b48 <__assert_func>
 800893c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008940:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008944:	bb2d      	cbnz	r5, 8008992 <__d2b+0x7a>
 8008946:	9301      	str	r3, [sp, #4]
 8008948:	f1b8 0300 	subs.w	r3, r8, #0
 800894c:	d026      	beq.n	800899c <__d2b+0x84>
 800894e:	4668      	mov	r0, sp
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	f7ff fd87 	bl	8008464 <__lo0bits>
 8008956:	e9dd 1200 	ldrd	r1, r2, [sp]
 800895a:	b1e8      	cbz	r0, 8008998 <__d2b+0x80>
 800895c:	f1c0 0320 	rsb	r3, r0, #32
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	430b      	orrs	r3, r1
 8008966:	40c2      	lsrs	r2, r0
 8008968:	6163      	str	r3, [r4, #20]
 800896a:	9201      	str	r2, [sp, #4]
 800896c:	9b01      	ldr	r3, [sp, #4]
 800896e:	61a3      	str	r3, [r4, #24]
 8008970:	2b00      	cmp	r3, #0
 8008972:	bf14      	ite	ne
 8008974:	2202      	movne	r2, #2
 8008976:	2201      	moveq	r2, #1
 8008978:	6122      	str	r2, [r4, #16]
 800897a:	b1bd      	cbz	r5, 80089ac <__d2b+0x94>
 800897c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008980:	4405      	add	r5, r0
 8008982:	603d      	str	r5, [r7, #0]
 8008984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008988:	6030      	str	r0, [r6, #0]
 800898a:	4620      	mov	r0, r4
 800898c:	b003      	add	sp, #12
 800898e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008996:	e7d6      	b.n	8008946 <__d2b+0x2e>
 8008998:	6161      	str	r1, [r4, #20]
 800899a:	e7e7      	b.n	800896c <__d2b+0x54>
 800899c:	a801      	add	r0, sp, #4
 800899e:	f7ff fd61 	bl	8008464 <__lo0bits>
 80089a2:	9b01      	ldr	r3, [sp, #4]
 80089a4:	6163      	str	r3, [r4, #20]
 80089a6:	3020      	adds	r0, #32
 80089a8:	2201      	movs	r2, #1
 80089aa:	e7e5      	b.n	8008978 <__d2b+0x60>
 80089ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80089b4:	6038      	str	r0, [r7, #0]
 80089b6:	6918      	ldr	r0, [r3, #16]
 80089b8:	f7ff fd34 	bl	8008424 <__hi0bits>
 80089bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089c0:	e7e2      	b.n	8008988 <__d2b+0x70>
 80089c2:	bf00      	nop
 80089c4:	08009270 	.word	0x08009270
 80089c8:	08009281 	.word	0x08009281

080089cc <__sflush_r>:
 80089cc:	898a      	ldrh	r2, [r1, #12]
 80089ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d2:	4605      	mov	r5, r0
 80089d4:	0710      	lsls	r0, r2, #28
 80089d6:	460c      	mov	r4, r1
 80089d8:	d458      	bmi.n	8008a8c <__sflush_r+0xc0>
 80089da:	684b      	ldr	r3, [r1, #4]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	dc05      	bgt.n	80089ec <__sflush_r+0x20>
 80089e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dc02      	bgt.n	80089ec <__sflush_r+0x20>
 80089e6:	2000      	movs	r0, #0
 80089e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089ee:	2e00      	cmp	r6, #0
 80089f0:	d0f9      	beq.n	80089e6 <__sflush_r+0x1a>
 80089f2:	2300      	movs	r3, #0
 80089f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089f8:	682f      	ldr	r7, [r5, #0]
 80089fa:	6a21      	ldr	r1, [r4, #32]
 80089fc:	602b      	str	r3, [r5, #0]
 80089fe:	d032      	beq.n	8008a66 <__sflush_r+0x9a>
 8008a00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	075a      	lsls	r2, r3, #29
 8008a06:	d505      	bpl.n	8008a14 <__sflush_r+0x48>
 8008a08:	6863      	ldr	r3, [r4, #4]
 8008a0a:	1ac0      	subs	r0, r0, r3
 8008a0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a0e:	b10b      	cbz	r3, 8008a14 <__sflush_r+0x48>
 8008a10:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a12:	1ac0      	subs	r0, r0, r3
 8008a14:	2300      	movs	r3, #0
 8008a16:	4602      	mov	r2, r0
 8008a18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a1a:	6a21      	ldr	r1, [r4, #32]
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	47b0      	blx	r6
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	d106      	bne.n	8008a34 <__sflush_r+0x68>
 8008a26:	6829      	ldr	r1, [r5, #0]
 8008a28:	291d      	cmp	r1, #29
 8008a2a:	d82b      	bhi.n	8008a84 <__sflush_r+0xb8>
 8008a2c:	4a29      	ldr	r2, [pc, #164]	; (8008ad4 <__sflush_r+0x108>)
 8008a2e:	410a      	asrs	r2, r1
 8008a30:	07d6      	lsls	r6, r2, #31
 8008a32:	d427      	bmi.n	8008a84 <__sflush_r+0xb8>
 8008a34:	2200      	movs	r2, #0
 8008a36:	6062      	str	r2, [r4, #4]
 8008a38:	04d9      	lsls	r1, r3, #19
 8008a3a:	6922      	ldr	r2, [r4, #16]
 8008a3c:	6022      	str	r2, [r4, #0]
 8008a3e:	d504      	bpl.n	8008a4a <__sflush_r+0x7e>
 8008a40:	1c42      	adds	r2, r0, #1
 8008a42:	d101      	bne.n	8008a48 <__sflush_r+0x7c>
 8008a44:	682b      	ldr	r3, [r5, #0]
 8008a46:	b903      	cbnz	r3, 8008a4a <__sflush_r+0x7e>
 8008a48:	6560      	str	r0, [r4, #84]	; 0x54
 8008a4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a4c:	602f      	str	r7, [r5, #0]
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d0c9      	beq.n	80089e6 <__sflush_r+0x1a>
 8008a52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a56:	4299      	cmp	r1, r3
 8008a58:	d002      	beq.n	8008a60 <__sflush_r+0x94>
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	f7ff fb3a 	bl	80080d4 <_free_r>
 8008a60:	2000      	movs	r0, #0
 8008a62:	6360      	str	r0, [r4, #52]	; 0x34
 8008a64:	e7c0      	b.n	80089e8 <__sflush_r+0x1c>
 8008a66:	2301      	movs	r3, #1
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b0      	blx	r6
 8008a6c:	1c41      	adds	r1, r0, #1
 8008a6e:	d1c8      	bne.n	8008a02 <__sflush_r+0x36>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d0c5      	beq.n	8008a02 <__sflush_r+0x36>
 8008a76:	2b1d      	cmp	r3, #29
 8008a78:	d001      	beq.n	8008a7e <__sflush_r+0xb2>
 8008a7a:	2b16      	cmp	r3, #22
 8008a7c:	d101      	bne.n	8008a82 <__sflush_r+0xb6>
 8008a7e:	602f      	str	r7, [r5, #0]
 8008a80:	e7b1      	b.n	80089e6 <__sflush_r+0x1a>
 8008a82:	89a3      	ldrh	r3, [r4, #12]
 8008a84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	e7ad      	b.n	80089e8 <__sflush_r+0x1c>
 8008a8c:	690f      	ldr	r7, [r1, #16]
 8008a8e:	2f00      	cmp	r7, #0
 8008a90:	d0a9      	beq.n	80089e6 <__sflush_r+0x1a>
 8008a92:	0793      	lsls	r3, r2, #30
 8008a94:	680e      	ldr	r6, [r1, #0]
 8008a96:	bf08      	it	eq
 8008a98:	694b      	ldreq	r3, [r1, #20]
 8008a9a:	600f      	str	r7, [r1, #0]
 8008a9c:	bf18      	it	ne
 8008a9e:	2300      	movne	r3, #0
 8008aa0:	eba6 0807 	sub.w	r8, r6, r7
 8008aa4:	608b      	str	r3, [r1, #8]
 8008aa6:	f1b8 0f00 	cmp.w	r8, #0
 8008aaa:	dd9c      	ble.n	80089e6 <__sflush_r+0x1a>
 8008aac:	6a21      	ldr	r1, [r4, #32]
 8008aae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ab0:	4643      	mov	r3, r8
 8008ab2:	463a      	mov	r2, r7
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	47b0      	blx	r6
 8008ab8:	2800      	cmp	r0, #0
 8008aba:	dc06      	bgt.n	8008aca <__sflush_r+0xfe>
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ac2:	81a3      	strh	r3, [r4, #12]
 8008ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ac8:	e78e      	b.n	80089e8 <__sflush_r+0x1c>
 8008aca:	4407      	add	r7, r0
 8008acc:	eba8 0800 	sub.w	r8, r8, r0
 8008ad0:	e7e9      	b.n	8008aa6 <__sflush_r+0xda>
 8008ad2:	bf00      	nop
 8008ad4:	dfbffffe 	.word	0xdfbffffe

08008ad8 <_fflush_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	690b      	ldr	r3, [r1, #16]
 8008adc:	4605      	mov	r5, r0
 8008ade:	460c      	mov	r4, r1
 8008ae0:	b913      	cbnz	r3, 8008ae8 <_fflush_r+0x10>
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	bd38      	pop	{r3, r4, r5, pc}
 8008ae8:	b118      	cbz	r0, 8008af2 <_fflush_r+0x1a>
 8008aea:	6a03      	ldr	r3, [r0, #32]
 8008aec:	b90b      	cbnz	r3, 8008af2 <_fflush_r+0x1a>
 8008aee:	f7fe fb6f 	bl	80071d0 <__sinit>
 8008af2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d0f3      	beq.n	8008ae2 <_fflush_r+0xa>
 8008afa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008afc:	07d0      	lsls	r0, r2, #31
 8008afe:	d404      	bmi.n	8008b0a <_fflush_r+0x32>
 8008b00:	0599      	lsls	r1, r3, #22
 8008b02:	d402      	bmi.n	8008b0a <_fflush_r+0x32>
 8008b04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b06:	f7fe fc5a 	bl	80073be <__retarget_lock_acquire_recursive>
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	f7ff ff5d 	bl	80089cc <__sflush_r>
 8008b12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b14:	07da      	lsls	r2, r3, #31
 8008b16:	4605      	mov	r5, r0
 8008b18:	d4e4      	bmi.n	8008ae4 <_fflush_r+0xc>
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	059b      	lsls	r3, r3, #22
 8008b1e:	d4e1      	bmi.n	8008ae4 <_fflush_r+0xc>
 8008b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b22:	f7fe fc4d 	bl	80073c0 <__retarget_lock_release_recursive>
 8008b26:	e7dd      	b.n	8008ae4 <_fflush_r+0xc>

08008b28 <_sbrk_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	4d06      	ldr	r5, [pc, #24]	; (8008b44 <_sbrk_r+0x1c>)
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4604      	mov	r4, r0
 8008b30:	4608      	mov	r0, r1
 8008b32:	602b      	str	r3, [r5, #0]
 8008b34:	f7f9 fce4 	bl	8002500 <_sbrk>
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	d102      	bne.n	8008b42 <_sbrk_r+0x1a>
 8008b3c:	682b      	ldr	r3, [r5, #0]
 8008b3e:	b103      	cbz	r3, 8008b42 <_sbrk_r+0x1a>
 8008b40:	6023      	str	r3, [r4, #0]
 8008b42:	bd38      	pop	{r3, r4, r5, pc}
 8008b44:	20000760 	.word	0x20000760

08008b48 <__assert_func>:
 8008b48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b4a:	4614      	mov	r4, r2
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	4b09      	ldr	r3, [pc, #36]	; (8008b74 <__assert_func+0x2c>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4605      	mov	r5, r0
 8008b54:	68d8      	ldr	r0, [r3, #12]
 8008b56:	b14c      	cbz	r4, 8008b6c <__assert_func+0x24>
 8008b58:	4b07      	ldr	r3, [pc, #28]	; (8008b78 <__assert_func+0x30>)
 8008b5a:	9100      	str	r1, [sp, #0]
 8008b5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b60:	4906      	ldr	r1, [pc, #24]	; (8008b7c <__assert_func+0x34>)
 8008b62:	462b      	mov	r3, r5
 8008b64:	f000 f844 	bl	8008bf0 <fiprintf>
 8008b68:	f000 f854 	bl	8008c14 <abort>
 8008b6c:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <__assert_func+0x38>)
 8008b6e:	461c      	mov	r4, r3
 8008b70:	e7f3      	b.n	8008b5a <__assert_func+0x12>
 8008b72:	bf00      	nop
 8008b74:	20000060 	.word	0x20000060
 8008b78:	080093e6 	.word	0x080093e6
 8008b7c:	080093f3 	.word	0x080093f3
 8008b80:	08009421 	.word	0x08009421

08008b84 <_calloc_r>:
 8008b84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b86:	fba1 2402 	umull	r2, r4, r1, r2
 8008b8a:	b94c      	cbnz	r4, 8008ba0 <_calloc_r+0x1c>
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	9201      	str	r2, [sp, #4]
 8008b90:	f7ff fb14 	bl	80081bc <_malloc_r>
 8008b94:	9a01      	ldr	r2, [sp, #4]
 8008b96:	4605      	mov	r5, r0
 8008b98:	b930      	cbnz	r0, 8008ba8 <_calloc_r+0x24>
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	b003      	add	sp, #12
 8008b9e:	bd30      	pop	{r4, r5, pc}
 8008ba0:	220c      	movs	r2, #12
 8008ba2:	6002      	str	r2, [r0, #0]
 8008ba4:	2500      	movs	r5, #0
 8008ba6:	e7f8      	b.n	8008b9a <_calloc_r+0x16>
 8008ba8:	4621      	mov	r1, r4
 8008baa:	f7fe fb8a 	bl	80072c2 <memset>
 8008bae:	e7f4      	b.n	8008b9a <_calloc_r+0x16>

08008bb0 <__ascii_mbtowc>:
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	b901      	cbnz	r1, 8008bb6 <__ascii_mbtowc+0x6>
 8008bb4:	a901      	add	r1, sp, #4
 8008bb6:	b142      	cbz	r2, 8008bca <__ascii_mbtowc+0x1a>
 8008bb8:	b14b      	cbz	r3, 8008bce <__ascii_mbtowc+0x1e>
 8008bba:	7813      	ldrb	r3, [r2, #0]
 8008bbc:	600b      	str	r3, [r1, #0]
 8008bbe:	7812      	ldrb	r2, [r2, #0]
 8008bc0:	1e10      	subs	r0, r2, #0
 8008bc2:	bf18      	it	ne
 8008bc4:	2001      	movne	r0, #1
 8008bc6:	b002      	add	sp, #8
 8008bc8:	4770      	bx	lr
 8008bca:	4610      	mov	r0, r2
 8008bcc:	e7fb      	b.n	8008bc6 <__ascii_mbtowc+0x16>
 8008bce:	f06f 0001 	mvn.w	r0, #1
 8008bd2:	e7f8      	b.n	8008bc6 <__ascii_mbtowc+0x16>

08008bd4 <__ascii_wctomb>:
 8008bd4:	b149      	cbz	r1, 8008bea <__ascii_wctomb+0x16>
 8008bd6:	2aff      	cmp	r2, #255	; 0xff
 8008bd8:	bf85      	ittet	hi
 8008bda:	238a      	movhi	r3, #138	; 0x8a
 8008bdc:	6003      	strhi	r3, [r0, #0]
 8008bde:	700a      	strbls	r2, [r1, #0]
 8008be0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008be4:	bf98      	it	ls
 8008be6:	2001      	movls	r0, #1
 8008be8:	4770      	bx	lr
 8008bea:	4608      	mov	r0, r1
 8008bec:	4770      	bx	lr
	...

08008bf0 <fiprintf>:
 8008bf0:	b40e      	push	{r1, r2, r3}
 8008bf2:	b503      	push	{r0, r1, lr}
 8008bf4:	4601      	mov	r1, r0
 8008bf6:	ab03      	add	r3, sp, #12
 8008bf8:	4805      	ldr	r0, [pc, #20]	; (8008c10 <fiprintf+0x20>)
 8008bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfe:	6800      	ldr	r0, [r0, #0]
 8008c00:	9301      	str	r3, [sp, #4]
 8008c02:	f000 f837 	bl	8008c74 <_vfiprintf_r>
 8008c06:	b002      	add	sp, #8
 8008c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c0c:	b003      	add	sp, #12
 8008c0e:	4770      	bx	lr
 8008c10:	20000060 	.word	0x20000060

08008c14 <abort>:
 8008c14:	b508      	push	{r3, lr}
 8008c16:	2006      	movs	r0, #6
 8008c18:	f000 fa04 	bl	8009024 <raise>
 8008c1c:	2001      	movs	r0, #1
 8008c1e:	f7f9 fbf7 	bl	8002410 <_exit>

08008c22 <__sfputc_r>:
 8008c22:	6893      	ldr	r3, [r2, #8]
 8008c24:	3b01      	subs	r3, #1
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	b410      	push	{r4}
 8008c2a:	6093      	str	r3, [r2, #8]
 8008c2c:	da08      	bge.n	8008c40 <__sfputc_r+0x1e>
 8008c2e:	6994      	ldr	r4, [r2, #24]
 8008c30:	42a3      	cmp	r3, r4
 8008c32:	db01      	blt.n	8008c38 <__sfputc_r+0x16>
 8008c34:	290a      	cmp	r1, #10
 8008c36:	d103      	bne.n	8008c40 <__sfputc_r+0x1e>
 8008c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c3c:	f000 b934 	b.w	8008ea8 <__swbuf_r>
 8008c40:	6813      	ldr	r3, [r2, #0]
 8008c42:	1c58      	adds	r0, r3, #1
 8008c44:	6010      	str	r0, [r2, #0]
 8008c46:	7019      	strb	r1, [r3, #0]
 8008c48:	4608      	mov	r0, r1
 8008c4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <__sfputs_r>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	4606      	mov	r6, r0
 8008c54:	460f      	mov	r7, r1
 8008c56:	4614      	mov	r4, r2
 8008c58:	18d5      	adds	r5, r2, r3
 8008c5a:	42ac      	cmp	r4, r5
 8008c5c:	d101      	bne.n	8008c62 <__sfputs_r+0x12>
 8008c5e:	2000      	movs	r0, #0
 8008c60:	e007      	b.n	8008c72 <__sfputs_r+0x22>
 8008c62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c66:	463a      	mov	r2, r7
 8008c68:	4630      	mov	r0, r6
 8008c6a:	f7ff ffda 	bl	8008c22 <__sfputc_r>
 8008c6e:	1c43      	adds	r3, r0, #1
 8008c70:	d1f3      	bne.n	8008c5a <__sfputs_r+0xa>
 8008c72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c74 <_vfiprintf_r>:
 8008c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c78:	460d      	mov	r5, r1
 8008c7a:	b09d      	sub	sp, #116	; 0x74
 8008c7c:	4614      	mov	r4, r2
 8008c7e:	4698      	mov	r8, r3
 8008c80:	4606      	mov	r6, r0
 8008c82:	b118      	cbz	r0, 8008c8c <_vfiprintf_r+0x18>
 8008c84:	6a03      	ldr	r3, [r0, #32]
 8008c86:	b90b      	cbnz	r3, 8008c8c <_vfiprintf_r+0x18>
 8008c88:	f7fe faa2 	bl	80071d0 <__sinit>
 8008c8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c8e:	07d9      	lsls	r1, r3, #31
 8008c90:	d405      	bmi.n	8008c9e <_vfiprintf_r+0x2a>
 8008c92:	89ab      	ldrh	r3, [r5, #12]
 8008c94:	059a      	lsls	r2, r3, #22
 8008c96:	d402      	bmi.n	8008c9e <_vfiprintf_r+0x2a>
 8008c98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c9a:	f7fe fb90 	bl	80073be <__retarget_lock_acquire_recursive>
 8008c9e:	89ab      	ldrh	r3, [r5, #12]
 8008ca0:	071b      	lsls	r3, r3, #28
 8008ca2:	d501      	bpl.n	8008ca8 <_vfiprintf_r+0x34>
 8008ca4:	692b      	ldr	r3, [r5, #16]
 8008ca6:	b99b      	cbnz	r3, 8008cd0 <_vfiprintf_r+0x5c>
 8008ca8:	4629      	mov	r1, r5
 8008caa:	4630      	mov	r0, r6
 8008cac:	f000 f93a 	bl	8008f24 <__swsetup_r>
 8008cb0:	b170      	cbz	r0, 8008cd0 <_vfiprintf_r+0x5c>
 8008cb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cb4:	07dc      	lsls	r4, r3, #31
 8008cb6:	d504      	bpl.n	8008cc2 <_vfiprintf_r+0x4e>
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	b01d      	add	sp, #116	; 0x74
 8008cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc2:	89ab      	ldrh	r3, [r5, #12]
 8008cc4:	0598      	lsls	r0, r3, #22
 8008cc6:	d4f7      	bmi.n	8008cb8 <_vfiprintf_r+0x44>
 8008cc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cca:	f7fe fb79 	bl	80073c0 <__retarget_lock_release_recursive>
 8008cce:	e7f3      	b.n	8008cb8 <_vfiprintf_r+0x44>
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8008cd4:	2320      	movs	r3, #32
 8008cd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cda:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cde:	2330      	movs	r3, #48	; 0x30
 8008ce0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008e94 <_vfiprintf_r+0x220>
 8008ce4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ce8:	f04f 0901 	mov.w	r9, #1
 8008cec:	4623      	mov	r3, r4
 8008cee:	469a      	mov	sl, r3
 8008cf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cf4:	b10a      	cbz	r2, 8008cfa <_vfiprintf_r+0x86>
 8008cf6:	2a25      	cmp	r2, #37	; 0x25
 8008cf8:	d1f9      	bne.n	8008cee <_vfiprintf_r+0x7a>
 8008cfa:	ebba 0b04 	subs.w	fp, sl, r4
 8008cfe:	d00b      	beq.n	8008d18 <_vfiprintf_r+0xa4>
 8008d00:	465b      	mov	r3, fp
 8008d02:	4622      	mov	r2, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	4630      	mov	r0, r6
 8008d08:	f7ff ffa2 	bl	8008c50 <__sfputs_r>
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	f000 80a9 	beq.w	8008e64 <_vfiprintf_r+0x1f0>
 8008d12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d14:	445a      	add	r2, fp
 8008d16:	9209      	str	r2, [sp, #36]	; 0x24
 8008d18:	f89a 3000 	ldrb.w	r3, [sl]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 80a1 	beq.w	8008e64 <_vfiprintf_r+0x1f0>
 8008d22:	2300      	movs	r3, #0
 8008d24:	f04f 32ff 	mov.w	r2, #4294967295
 8008d28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d2c:	f10a 0a01 	add.w	sl, sl, #1
 8008d30:	9304      	str	r3, [sp, #16]
 8008d32:	9307      	str	r3, [sp, #28]
 8008d34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d38:	931a      	str	r3, [sp, #104]	; 0x68
 8008d3a:	4654      	mov	r4, sl
 8008d3c:	2205      	movs	r2, #5
 8008d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d42:	4854      	ldr	r0, [pc, #336]	; (8008e94 <_vfiprintf_r+0x220>)
 8008d44:	f7f7 fa6c 	bl	8000220 <memchr>
 8008d48:	9a04      	ldr	r2, [sp, #16]
 8008d4a:	b9d8      	cbnz	r0, 8008d84 <_vfiprintf_r+0x110>
 8008d4c:	06d1      	lsls	r1, r2, #27
 8008d4e:	bf44      	itt	mi
 8008d50:	2320      	movmi	r3, #32
 8008d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d56:	0713      	lsls	r3, r2, #28
 8008d58:	bf44      	itt	mi
 8008d5a:	232b      	movmi	r3, #43	; 0x2b
 8008d5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d60:	f89a 3000 	ldrb.w	r3, [sl]
 8008d64:	2b2a      	cmp	r3, #42	; 0x2a
 8008d66:	d015      	beq.n	8008d94 <_vfiprintf_r+0x120>
 8008d68:	9a07      	ldr	r2, [sp, #28]
 8008d6a:	4654      	mov	r4, sl
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	f04f 0c0a 	mov.w	ip, #10
 8008d72:	4621      	mov	r1, r4
 8008d74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d78:	3b30      	subs	r3, #48	; 0x30
 8008d7a:	2b09      	cmp	r3, #9
 8008d7c:	d94d      	bls.n	8008e1a <_vfiprintf_r+0x1a6>
 8008d7e:	b1b0      	cbz	r0, 8008dae <_vfiprintf_r+0x13a>
 8008d80:	9207      	str	r2, [sp, #28]
 8008d82:	e014      	b.n	8008dae <_vfiprintf_r+0x13a>
 8008d84:	eba0 0308 	sub.w	r3, r0, r8
 8008d88:	fa09 f303 	lsl.w	r3, r9, r3
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	9304      	str	r3, [sp, #16]
 8008d90:	46a2      	mov	sl, r4
 8008d92:	e7d2      	b.n	8008d3a <_vfiprintf_r+0xc6>
 8008d94:	9b03      	ldr	r3, [sp, #12]
 8008d96:	1d19      	adds	r1, r3, #4
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	9103      	str	r1, [sp, #12]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	bfbb      	ittet	lt
 8008da0:	425b      	neglt	r3, r3
 8008da2:	f042 0202 	orrlt.w	r2, r2, #2
 8008da6:	9307      	strge	r3, [sp, #28]
 8008da8:	9307      	strlt	r3, [sp, #28]
 8008daa:	bfb8      	it	lt
 8008dac:	9204      	strlt	r2, [sp, #16]
 8008dae:	7823      	ldrb	r3, [r4, #0]
 8008db0:	2b2e      	cmp	r3, #46	; 0x2e
 8008db2:	d10c      	bne.n	8008dce <_vfiprintf_r+0x15a>
 8008db4:	7863      	ldrb	r3, [r4, #1]
 8008db6:	2b2a      	cmp	r3, #42	; 0x2a
 8008db8:	d134      	bne.n	8008e24 <_vfiprintf_r+0x1b0>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	1d1a      	adds	r2, r3, #4
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	9203      	str	r2, [sp, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfb8      	it	lt
 8008dc6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008dca:	3402      	adds	r4, #2
 8008dcc:	9305      	str	r3, [sp, #20]
 8008dce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008ea4 <_vfiprintf_r+0x230>
 8008dd2:	7821      	ldrb	r1, [r4, #0]
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	4650      	mov	r0, sl
 8008dd8:	f7f7 fa22 	bl	8000220 <memchr>
 8008ddc:	b138      	cbz	r0, 8008dee <_vfiprintf_r+0x17a>
 8008dde:	9b04      	ldr	r3, [sp, #16]
 8008de0:	eba0 000a 	sub.w	r0, r0, sl
 8008de4:	2240      	movs	r2, #64	; 0x40
 8008de6:	4082      	lsls	r2, r0
 8008de8:	4313      	orrs	r3, r2
 8008dea:	3401      	adds	r4, #1
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df2:	4829      	ldr	r0, [pc, #164]	; (8008e98 <_vfiprintf_r+0x224>)
 8008df4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008df8:	2206      	movs	r2, #6
 8008dfa:	f7f7 fa11 	bl	8000220 <memchr>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	d03f      	beq.n	8008e82 <_vfiprintf_r+0x20e>
 8008e02:	4b26      	ldr	r3, [pc, #152]	; (8008e9c <_vfiprintf_r+0x228>)
 8008e04:	bb1b      	cbnz	r3, 8008e4e <_vfiprintf_r+0x1da>
 8008e06:	9b03      	ldr	r3, [sp, #12]
 8008e08:	3307      	adds	r3, #7
 8008e0a:	f023 0307 	bic.w	r3, r3, #7
 8008e0e:	3308      	adds	r3, #8
 8008e10:	9303      	str	r3, [sp, #12]
 8008e12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e14:	443b      	add	r3, r7
 8008e16:	9309      	str	r3, [sp, #36]	; 0x24
 8008e18:	e768      	b.n	8008cec <_vfiprintf_r+0x78>
 8008e1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e1e:	460c      	mov	r4, r1
 8008e20:	2001      	movs	r0, #1
 8008e22:	e7a6      	b.n	8008d72 <_vfiprintf_r+0xfe>
 8008e24:	2300      	movs	r3, #0
 8008e26:	3401      	adds	r4, #1
 8008e28:	9305      	str	r3, [sp, #20]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	f04f 0c0a 	mov.w	ip, #10
 8008e30:	4620      	mov	r0, r4
 8008e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e36:	3a30      	subs	r2, #48	; 0x30
 8008e38:	2a09      	cmp	r2, #9
 8008e3a:	d903      	bls.n	8008e44 <_vfiprintf_r+0x1d0>
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d0c6      	beq.n	8008dce <_vfiprintf_r+0x15a>
 8008e40:	9105      	str	r1, [sp, #20]
 8008e42:	e7c4      	b.n	8008dce <_vfiprintf_r+0x15a>
 8008e44:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e48:	4604      	mov	r4, r0
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e7f0      	b.n	8008e30 <_vfiprintf_r+0x1bc>
 8008e4e:	ab03      	add	r3, sp, #12
 8008e50:	9300      	str	r3, [sp, #0]
 8008e52:	462a      	mov	r2, r5
 8008e54:	4b12      	ldr	r3, [pc, #72]	; (8008ea0 <_vfiprintf_r+0x22c>)
 8008e56:	a904      	add	r1, sp, #16
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f7fd fd67 	bl	800692c <_printf_float>
 8008e5e:	4607      	mov	r7, r0
 8008e60:	1c78      	adds	r0, r7, #1
 8008e62:	d1d6      	bne.n	8008e12 <_vfiprintf_r+0x19e>
 8008e64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e66:	07d9      	lsls	r1, r3, #31
 8008e68:	d405      	bmi.n	8008e76 <_vfiprintf_r+0x202>
 8008e6a:	89ab      	ldrh	r3, [r5, #12]
 8008e6c:	059a      	lsls	r2, r3, #22
 8008e6e:	d402      	bmi.n	8008e76 <_vfiprintf_r+0x202>
 8008e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e72:	f7fe faa5 	bl	80073c0 <__retarget_lock_release_recursive>
 8008e76:	89ab      	ldrh	r3, [r5, #12]
 8008e78:	065b      	lsls	r3, r3, #25
 8008e7a:	f53f af1d 	bmi.w	8008cb8 <_vfiprintf_r+0x44>
 8008e7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e80:	e71c      	b.n	8008cbc <_vfiprintf_r+0x48>
 8008e82:	ab03      	add	r3, sp, #12
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	462a      	mov	r2, r5
 8008e88:	4b05      	ldr	r3, [pc, #20]	; (8008ea0 <_vfiprintf_r+0x22c>)
 8008e8a:	a904      	add	r1, sp, #16
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7fd fff1 	bl	8006e74 <_printf_i>
 8008e92:	e7e4      	b.n	8008e5e <_vfiprintf_r+0x1ea>
 8008e94:	08009523 	.word	0x08009523
 8008e98:	0800952d 	.word	0x0800952d
 8008e9c:	0800692d 	.word	0x0800692d
 8008ea0:	08008c51 	.word	0x08008c51
 8008ea4:	08009529 	.word	0x08009529

08008ea8 <__swbuf_r>:
 8008ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eaa:	460e      	mov	r6, r1
 8008eac:	4614      	mov	r4, r2
 8008eae:	4605      	mov	r5, r0
 8008eb0:	b118      	cbz	r0, 8008eba <__swbuf_r+0x12>
 8008eb2:	6a03      	ldr	r3, [r0, #32]
 8008eb4:	b90b      	cbnz	r3, 8008eba <__swbuf_r+0x12>
 8008eb6:	f7fe f98b 	bl	80071d0 <__sinit>
 8008eba:	69a3      	ldr	r3, [r4, #24]
 8008ebc:	60a3      	str	r3, [r4, #8]
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	071a      	lsls	r2, r3, #28
 8008ec2:	d525      	bpl.n	8008f10 <__swbuf_r+0x68>
 8008ec4:	6923      	ldr	r3, [r4, #16]
 8008ec6:	b31b      	cbz	r3, 8008f10 <__swbuf_r+0x68>
 8008ec8:	6823      	ldr	r3, [r4, #0]
 8008eca:	6922      	ldr	r2, [r4, #16]
 8008ecc:	1a98      	subs	r0, r3, r2
 8008ece:	6963      	ldr	r3, [r4, #20]
 8008ed0:	b2f6      	uxtb	r6, r6
 8008ed2:	4283      	cmp	r3, r0
 8008ed4:	4637      	mov	r7, r6
 8008ed6:	dc04      	bgt.n	8008ee2 <__swbuf_r+0x3a>
 8008ed8:	4621      	mov	r1, r4
 8008eda:	4628      	mov	r0, r5
 8008edc:	f7ff fdfc 	bl	8008ad8 <_fflush_r>
 8008ee0:	b9e0      	cbnz	r0, 8008f1c <__swbuf_r+0x74>
 8008ee2:	68a3      	ldr	r3, [r4, #8]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	60a3      	str	r3, [r4, #8]
 8008ee8:	6823      	ldr	r3, [r4, #0]
 8008eea:	1c5a      	adds	r2, r3, #1
 8008eec:	6022      	str	r2, [r4, #0]
 8008eee:	701e      	strb	r6, [r3, #0]
 8008ef0:	6962      	ldr	r2, [r4, #20]
 8008ef2:	1c43      	adds	r3, r0, #1
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d004      	beq.n	8008f02 <__swbuf_r+0x5a>
 8008ef8:	89a3      	ldrh	r3, [r4, #12]
 8008efa:	07db      	lsls	r3, r3, #31
 8008efc:	d506      	bpl.n	8008f0c <__swbuf_r+0x64>
 8008efe:	2e0a      	cmp	r6, #10
 8008f00:	d104      	bne.n	8008f0c <__swbuf_r+0x64>
 8008f02:	4621      	mov	r1, r4
 8008f04:	4628      	mov	r0, r5
 8008f06:	f7ff fde7 	bl	8008ad8 <_fflush_r>
 8008f0a:	b938      	cbnz	r0, 8008f1c <__swbuf_r+0x74>
 8008f0c:	4638      	mov	r0, r7
 8008f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f10:	4621      	mov	r1, r4
 8008f12:	4628      	mov	r0, r5
 8008f14:	f000 f806 	bl	8008f24 <__swsetup_r>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d0d5      	beq.n	8008ec8 <__swbuf_r+0x20>
 8008f1c:	f04f 37ff 	mov.w	r7, #4294967295
 8008f20:	e7f4      	b.n	8008f0c <__swbuf_r+0x64>
	...

08008f24 <__swsetup_r>:
 8008f24:	b538      	push	{r3, r4, r5, lr}
 8008f26:	4b2a      	ldr	r3, [pc, #168]	; (8008fd0 <__swsetup_r+0xac>)
 8008f28:	4605      	mov	r5, r0
 8008f2a:	6818      	ldr	r0, [r3, #0]
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	b118      	cbz	r0, 8008f38 <__swsetup_r+0x14>
 8008f30:	6a03      	ldr	r3, [r0, #32]
 8008f32:	b90b      	cbnz	r3, 8008f38 <__swsetup_r+0x14>
 8008f34:	f7fe f94c 	bl	80071d0 <__sinit>
 8008f38:	89a3      	ldrh	r3, [r4, #12]
 8008f3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f3e:	0718      	lsls	r0, r3, #28
 8008f40:	d422      	bmi.n	8008f88 <__swsetup_r+0x64>
 8008f42:	06d9      	lsls	r1, r3, #27
 8008f44:	d407      	bmi.n	8008f56 <__swsetup_r+0x32>
 8008f46:	2309      	movs	r3, #9
 8008f48:	602b      	str	r3, [r5, #0]
 8008f4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008f4e:	81a3      	strh	r3, [r4, #12]
 8008f50:	f04f 30ff 	mov.w	r0, #4294967295
 8008f54:	e034      	b.n	8008fc0 <__swsetup_r+0x9c>
 8008f56:	0758      	lsls	r0, r3, #29
 8008f58:	d512      	bpl.n	8008f80 <__swsetup_r+0x5c>
 8008f5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f5c:	b141      	cbz	r1, 8008f70 <__swsetup_r+0x4c>
 8008f5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f62:	4299      	cmp	r1, r3
 8008f64:	d002      	beq.n	8008f6c <__swsetup_r+0x48>
 8008f66:	4628      	mov	r0, r5
 8008f68:	f7ff f8b4 	bl	80080d4 <_free_r>
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	6363      	str	r3, [r4, #52]	; 0x34
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008f76:	81a3      	strh	r3, [r4, #12]
 8008f78:	2300      	movs	r3, #0
 8008f7a:	6063      	str	r3, [r4, #4]
 8008f7c:	6923      	ldr	r3, [r4, #16]
 8008f7e:	6023      	str	r3, [r4, #0]
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f043 0308 	orr.w	r3, r3, #8
 8008f86:	81a3      	strh	r3, [r4, #12]
 8008f88:	6923      	ldr	r3, [r4, #16]
 8008f8a:	b94b      	cbnz	r3, 8008fa0 <__swsetup_r+0x7c>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f96:	d003      	beq.n	8008fa0 <__swsetup_r+0x7c>
 8008f98:	4621      	mov	r1, r4
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f000 f884 	bl	80090a8 <__smakebuf_r>
 8008fa0:	89a0      	ldrh	r0, [r4, #12]
 8008fa2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008fa6:	f010 0301 	ands.w	r3, r0, #1
 8008faa:	d00a      	beq.n	8008fc2 <__swsetup_r+0x9e>
 8008fac:	2300      	movs	r3, #0
 8008fae:	60a3      	str	r3, [r4, #8]
 8008fb0:	6963      	ldr	r3, [r4, #20]
 8008fb2:	425b      	negs	r3, r3
 8008fb4:	61a3      	str	r3, [r4, #24]
 8008fb6:	6923      	ldr	r3, [r4, #16]
 8008fb8:	b943      	cbnz	r3, 8008fcc <__swsetup_r+0xa8>
 8008fba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008fbe:	d1c4      	bne.n	8008f4a <__swsetup_r+0x26>
 8008fc0:	bd38      	pop	{r3, r4, r5, pc}
 8008fc2:	0781      	lsls	r1, r0, #30
 8008fc4:	bf58      	it	pl
 8008fc6:	6963      	ldrpl	r3, [r4, #20]
 8008fc8:	60a3      	str	r3, [r4, #8]
 8008fca:	e7f4      	b.n	8008fb6 <__swsetup_r+0x92>
 8008fcc:	2000      	movs	r0, #0
 8008fce:	e7f7      	b.n	8008fc0 <__swsetup_r+0x9c>
 8008fd0:	20000060 	.word	0x20000060

08008fd4 <_raise_r>:
 8008fd4:	291f      	cmp	r1, #31
 8008fd6:	b538      	push	{r3, r4, r5, lr}
 8008fd8:	4604      	mov	r4, r0
 8008fda:	460d      	mov	r5, r1
 8008fdc:	d904      	bls.n	8008fe8 <_raise_r+0x14>
 8008fde:	2316      	movs	r3, #22
 8008fe0:	6003      	str	r3, [r0, #0]
 8008fe2:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe6:	bd38      	pop	{r3, r4, r5, pc}
 8008fe8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008fea:	b112      	cbz	r2, 8008ff2 <_raise_r+0x1e>
 8008fec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008ff0:	b94b      	cbnz	r3, 8009006 <_raise_r+0x32>
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f000 f830 	bl	8009058 <_getpid_r>
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	4620      	mov	r0, r4
 8008ffe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009002:	f000 b817 	b.w	8009034 <_kill_r>
 8009006:	2b01      	cmp	r3, #1
 8009008:	d00a      	beq.n	8009020 <_raise_r+0x4c>
 800900a:	1c59      	adds	r1, r3, #1
 800900c:	d103      	bne.n	8009016 <_raise_r+0x42>
 800900e:	2316      	movs	r3, #22
 8009010:	6003      	str	r3, [r0, #0]
 8009012:	2001      	movs	r0, #1
 8009014:	e7e7      	b.n	8008fe6 <_raise_r+0x12>
 8009016:	2400      	movs	r4, #0
 8009018:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800901c:	4628      	mov	r0, r5
 800901e:	4798      	blx	r3
 8009020:	2000      	movs	r0, #0
 8009022:	e7e0      	b.n	8008fe6 <_raise_r+0x12>

08009024 <raise>:
 8009024:	4b02      	ldr	r3, [pc, #8]	; (8009030 <raise+0xc>)
 8009026:	4601      	mov	r1, r0
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	f7ff bfd3 	b.w	8008fd4 <_raise_r>
 800902e:	bf00      	nop
 8009030:	20000060 	.word	0x20000060

08009034 <_kill_r>:
 8009034:	b538      	push	{r3, r4, r5, lr}
 8009036:	4d07      	ldr	r5, [pc, #28]	; (8009054 <_kill_r+0x20>)
 8009038:	2300      	movs	r3, #0
 800903a:	4604      	mov	r4, r0
 800903c:	4608      	mov	r0, r1
 800903e:	4611      	mov	r1, r2
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	f7f9 f9d5 	bl	80023f0 <_kill>
 8009046:	1c43      	adds	r3, r0, #1
 8009048:	d102      	bne.n	8009050 <_kill_r+0x1c>
 800904a:	682b      	ldr	r3, [r5, #0]
 800904c:	b103      	cbz	r3, 8009050 <_kill_r+0x1c>
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	bd38      	pop	{r3, r4, r5, pc}
 8009052:	bf00      	nop
 8009054:	20000760 	.word	0x20000760

08009058 <_getpid_r>:
 8009058:	f7f9 b9c2 	b.w	80023e0 <_getpid>

0800905c <__swhatbuf_r>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	460c      	mov	r4, r1
 8009060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009064:	2900      	cmp	r1, #0
 8009066:	b096      	sub	sp, #88	; 0x58
 8009068:	4615      	mov	r5, r2
 800906a:	461e      	mov	r6, r3
 800906c:	da0d      	bge.n	800908a <__swhatbuf_r+0x2e>
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009074:	f04f 0100 	mov.w	r1, #0
 8009078:	bf0c      	ite	eq
 800907a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800907e:	2340      	movne	r3, #64	; 0x40
 8009080:	2000      	movs	r0, #0
 8009082:	6031      	str	r1, [r6, #0]
 8009084:	602b      	str	r3, [r5, #0]
 8009086:	b016      	add	sp, #88	; 0x58
 8009088:	bd70      	pop	{r4, r5, r6, pc}
 800908a:	466a      	mov	r2, sp
 800908c:	f000 f848 	bl	8009120 <_fstat_r>
 8009090:	2800      	cmp	r0, #0
 8009092:	dbec      	blt.n	800906e <__swhatbuf_r+0x12>
 8009094:	9901      	ldr	r1, [sp, #4]
 8009096:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800909a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800909e:	4259      	negs	r1, r3
 80090a0:	4159      	adcs	r1, r3
 80090a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80090a6:	e7eb      	b.n	8009080 <__swhatbuf_r+0x24>

080090a8 <__smakebuf_r>:
 80090a8:	898b      	ldrh	r3, [r1, #12]
 80090aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80090ac:	079d      	lsls	r5, r3, #30
 80090ae:	4606      	mov	r6, r0
 80090b0:	460c      	mov	r4, r1
 80090b2:	d507      	bpl.n	80090c4 <__smakebuf_r+0x1c>
 80090b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	6123      	str	r3, [r4, #16]
 80090bc:	2301      	movs	r3, #1
 80090be:	6163      	str	r3, [r4, #20]
 80090c0:	b002      	add	sp, #8
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	ab01      	add	r3, sp, #4
 80090c6:	466a      	mov	r2, sp
 80090c8:	f7ff ffc8 	bl	800905c <__swhatbuf_r>
 80090cc:	9900      	ldr	r1, [sp, #0]
 80090ce:	4605      	mov	r5, r0
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7ff f873 	bl	80081bc <_malloc_r>
 80090d6:	b948      	cbnz	r0, 80090ec <__smakebuf_r+0x44>
 80090d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090dc:	059a      	lsls	r2, r3, #22
 80090de:	d4ef      	bmi.n	80090c0 <__smakebuf_r+0x18>
 80090e0:	f023 0303 	bic.w	r3, r3, #3
 80090e4:	f043 0302 	orr.w	r3, r3, #2
 80090e8:	81a3      	strh	r3, [r4, #12]
 80090ea:	e7e3      	b.n	80090b4 <__smakebuf_r+0xc>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	6020      	str	r0, [r4, #0]
 80090f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090f4:	81a3      	strh	r3, [r4, #12]
 80090f6:	9b00      	ldr	r3, [sp, #0]
 80090f8:	6163      	str	r3, [r4, #20]
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	6120      	str	r0, [r4, #16]
 80090fe:	b15b      	cbz	r3, 8009118 <__smakebuf_r+0x70>
 8009100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009104:	4630      	mov	r0, r6
 8009106:	f000 f81d 	bl	8009144 <_isatty_r>
 800910a:	b128      	cbz	r0, 8009118 <__smakebuf_r+0x70>
 800910c:	89a3      	ldrh	r3, [r4, #12]
 800910e:	f023 0303 	bic.w	r3, r3, #3
 8009112:	f043 0301 	orr.w	r3, r3, #1
 8009116:	81a3      	strh	r3, [r4, #12]
 8009118:	89a3      	ldrh	r3, [r4, #12]
 800911a:	431d      	orrs	r5, r3
 800911c:	81a5      	strh	r5, [r4, #12]
 800911e:	e7cf      	b.n	80090c0 <__smakebuf_r+0x18>

08009120 <_fstat_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d07      	ldr	r5, [pc, #28]	; (8009140 <_fstat_r+0x20>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	4611      	mov	r1, r2
 800912c:	602b      	str	r3, [r5, #0]
 800912e:	f7f9 f9be 	bl	80024ae <_fstat>
 8009132:	1c43      	adds	r3, r0, #1
 8009134:	d102      	bne.n	800913c <_fstat_r+0x1c>
 8009136:	682b      	ldr	r3, [r5, #0]
 8009138:	b103      	cbz	r3, 800913c <_fstat_r+0x1c>
 800913a:	6023      	str	r3, [r4, #0]
 800913c:	bd38      	pop	{r3, r4, r5, pc}
 800913e:	bf00      	nop
 8009140:	20000760 	.word	0x20000760

08009144 <_isatty_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d06      	ldr	r5, [pc, #24]	; (8009160 <_isatty_r+0x1c>)
 8009148:	2300      	movs	r3, #0
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	602b      	str	r3, [r5, #0]
 8009150:	f7f9 f9bd 	bl	80024ce <_isatty>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_isatty_r+0x1a>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_isatty_r+0x1a>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20000760 	.word	0x20000760

08009164 <_init>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	bf00      	nop
 8009168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916a:	bc08      	pop	{r3}
 800916c:	469e      	mov	lr, r3
 800916e:	4770      	bx	lr

08009170 <_fini>:
 8009170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009172:	bf00      	nop
 8009174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009176:	bc08      	pop	{r3}
 8009178:	469e      	mov	lr, r3
 800917a:	4770      	bx	lr
