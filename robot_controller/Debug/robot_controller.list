
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d378  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000056c  0800d558  0800d558  0001d558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dac4  0800dac4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dac4  0800dac4  0001dac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dacc  0800dacc  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dacc  0800dacc  0001dacc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dad0  0800dad0  0001dad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800dad4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000064c  200001d0  0800dca4  000201d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800dca4  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d06e  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004230  00000000  00000000  0003d2b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  000414e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ea  00000000  00000000  00042ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296e4  00000000  00000000  00043bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e174  00000000  00000000  0006d2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105f72  00000000  00000000  0008b41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000709c  00000000  00000000  0019138c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00198428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800d540 	.word	0x0800d540

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800d540 	.word	0x0800d540

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	; 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 0318 	add.w	r3, r7, #24
 800104a:	2238      	movs	r2, #56	; 0x38
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f008 fa25 	bl	800949e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	1d3b      	adds	r3, r7, #4
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001062:	2000      	movs	r0, #0
 8001064:	f002 f92e 	bl	80032c4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001072:	2340      	movs	r3, #64	; 0x40
 8001074:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001076:	2302      	movs	r3, #2
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800107a:	2302      	movs	r3, #2
 800107c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800107e:	2304      	movs	r3, #4
 8001080:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001082:	2355      	movs	r3, #85	; 0x55
 8001084:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800108e:	2302      	movs	r3, #2
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	4618      	mov	r0, r3
 8001098:	f002 f9c8 	bl	800342c <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010a2:	f001 f9dd 	bl	8002460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	230f      	movs	r3, #15
 80010a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	2303      	movs	r3, #3
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2104      	movs	r1, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f002 fcc6 	bl	8003a50 <HAL_RCC_ClockConfig>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d001      	beq.n	80010ce <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010ca:	f001 f9c9 	bl	8002460 <Error_Handler>
  }
}
 80010ce:	bf00      	nop
 80010d0:	3750      	adds	r7, #80	; 0x50
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	; 0x28
 80010dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
 80010ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <MX_GPIO_Init+0xd4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <MX_GPIO_Init+0xd4>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_GPIO_Init+0xd4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800110a:	4a28      	ldr	r2, [pc, #160]	; (80011ac <MX_GPIO_Init+0xd4>)
 800110c:	f043 0320 	orr.w	r3, r3, #32
 8001110:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001112:	4b26      	ldr	r3, [pc, #152]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001116:	f003 0320 	and.w	r3, r3, #32
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001122:	4a22      	ldr	r2, [pc, #136]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112a:	4b20      	ldr	r3, [pc, #128]	; (80011ac <MX_GPIO_Init+0xd4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113a:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <MX_GPIO_Init+0xd4>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001142:	4b1a      	ldr	r3, [pc, #104]	; (80011ac <MX_GPIO_Init+0xd4>)
 8001144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2123      	movs	r1, #35	; 0x23
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f002 f89d 	bl	8003294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800115a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001160:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001164:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	480f      	ldr	r0, [pc, #60]	; (80011b0 <MX_GPIO_Init+0xd8>)
 8001172:	f001 ff0d 	bl	8002f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 8001176:	2323      	movs	r3, #35	; 0x23
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f001 fefe 	bl	8002f90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2028      	movs	r0, #40	; 0x28
 800119a:	f001 fe11 	bl	8002dc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800119e:	2028      	movs	r0, #40	; 0x28
 80011a0:	f001 fe28 	bl	8002df4 <HAL_NVIC_EnableIRQ>

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000800 	.word	0x48000800

080011b4 <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b09c      	sub	sp, #112	; 0x70
 80011b8:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	2234      	movs	r2, #52	; 0x34
 80011ec:	2100      	movs	r1, #0
 80011ee:	4618      	mov	r0, r3
 80011f0:	f008 f955 	bl	800949e <memset>

  htim1.Instance = TIM1;
 80011f4:	4b57      	ldr	r3, [pc, #348]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80011f6:	4a58      	ldr	r2, [pc, #352]	; (8001358 <MX_TIM1_Init+0x1a4>)
 80011f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 80011fa:	4b56      	ldr	r3, [pc, #344]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80011fc:	4a57      	ldr	r2, [pc, #348]	; (800135c <MX_TIM1_Init+0x1a8>)
 80011fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001200:	4b54      	ldr	r3, [pc, #336]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 8001206:	4b53      	ldr	r3, [pc, #332]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001208:	2263      	movs	r2, #99	; 0x63
 800120a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120c:	4b51      	ldr	r3, [pc, #324]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001212:	4b50      	ldr	r3, [pc, #320]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001214:	2200      	movs	r2, #0
 8001216:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001218:	4b4e      	ldr	r3, [pc, #312]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800121e:	484d      	ldr	r0, [pc, #308]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001220:	f003 f8b2 	bl	8004388 <HAL_TIM_Base_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800122a:	f001 f919 	bl	8002460 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001234:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001238:	4619      	mov	r1, r3
 800123a:	4846      	ldr	r0, [pc, #280]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800123c:	f003 fef0 	bl	8005020 <HAL_TIM_ConfigClockSource>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001246:	f001 f90b 	bl	8002460 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800124a:	4842      	ldr	r0, [pc, #264]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800124c:	f003 f9dc 	bl	8004608 <HAL_TIM_PWM_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001256:	f001 f903 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001266:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800126a:	4619      	mov	r1, r3
 800126c:	4839      	ldr	r0, [pc, #228]	; (8001354 <MX_TIM1_Init+0x1a0>)
 800126e:	f004 fcb5 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001278:	f001 f8f2 	bl	8002460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127c:	2360      	movs	r3, #96	; 0x60
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001298:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	482c      	ldr	r0, [pc, #176]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80012a2:	f003 fda9 	bl	8004df8 <HAL_TIM_PWM_ConfigChannel>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012ac:	f001 f8d8 	bl	8002460 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012b4:	2204      	movs	r2, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4826      	ldr	r0, [pc, #152]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80012ba:	f003 fd9d 	bl	8004df8 <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012c4:	f001 f8cc 	bl	8002460 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012cc:	2208      	movs	r2, #8
 80012ce:	4619      	mov	r1, r3
 80012d0:	4820      	ldr	r0, [pc, #128]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80012d2:	f003 fd91 	bl	8004df8 <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012dc:	f001 f8c0 	bl	8002460 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e4:	220c      	movs	r2, #12
 80012e6:	4619      	mov	r1, r3
 80012e8:	481a      	ldr	r0, [pc, #104]	; (8001354 <MX_TIM1_Init+0x1a0>)
 80012ea:	f003 fd85 	bl	8004df8 <HAL_TIM_PWM_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80012f4:	f001 f8b4 	bl	8002460 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800130c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001310:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800131e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001328:	2300      	movs	r3, #0
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001336:	f004 fce7 	bl	8005d08 <HAL_TIMEx_ConfigBreakDeadTime>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001340:	f001 f88e 	bl	8002460 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM1_Init+0x1a0>)
 8001346:	f001 fa85 	bl	8002854 <HAL_TIM_MspPostInit>

}
 800134a:	bf00      	nop
 800134c:	3770      	adds	r7, #112	; 0x70
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200001ec 	.word	0x200001ec
 8001358:	40012c00 	.word	0x40012c00
 800135c:	0002980f 	.word	0x0002980f

08001360 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f008 f895 	bl	800949e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_TIM3_Init+0xa4>)
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <MX_TIM3_Init+0xa8>)
 8001382:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_TIM3_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_TIM3_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM3_Init+0xa4>)
 8001392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001396:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM3_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_TIM3_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a4:	2303      	movs	r3, #3
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_TIM3_Init+0xa4>)
 80013d0:	f003 fa8e 	bl	80048f0 <HAL_TIM_Encoder_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013da:	f001 f841 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_TIM3_Init+0xa4>)
 80013ec:	f004 fbf6 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013f6:	f001 f833 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000238 	.word	0x20000238
 8001408:	40000400 	.word	0x40000400

0800140c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f008 f83f 	bl	800949e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_TIM4_Init+0xa4>)
 800142c:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <MX_TIM4_Init+0xa8>)
 800142e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_TIM4_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_TIM4_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM4_Init+0xa4>)
 800143e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001442:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM4_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM4_Init+0xa4>)
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001450:	2303      	movs	r3, #3
 8001452:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001460:	230a      	movs	r3, #10
 8001462:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_TIM4_Init+0xa4>)
 800147c:	f003 fa38 	bl	80048f0 <HAL_TIM_Encoder_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001486:	f000 ffeb 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_TIM4_Init+0xa4>)
 8001498:	f004 fba0 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80014a2:	f000 ffdd 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	; 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000284 	.word	0x20000284
 80014b4:	40000800 	.word	0x40000800

080014b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08c      	sub	sp, #48	; 0x30
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014be:	f107 030c 	add.w	r3, r7, #12
 80014c2:	2224      	movs	r2, #36	; 0x24
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f007 ffe9 	bl	800949e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	463b      	mov	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014d6:	4b21      	ldr	r3, [pc, #132]	; (800155c <MX_TIM5_Init+0xa4>)
 80014d8:	4a21      	ldr	r2, [pc, #132]	; (8001560 <MX_TIM5_Init+0xa8>)
 80014da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014dc:	4b1f      	ldr	r3, [pc, #124]	; (800155c <MX_TIM5_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e2:	4b1e      	ldr	r3, [pc, #120]	; (800155c <MX_TIM5_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <MX_TIM5_Init+0xa4>)
 80014ea:	f04f 32ff 	mov.w	r2, #4294967295
 80014ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <MX_TIM5_Init+0xa4>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b19      	ldr	r3, [pc, #100]	; (800155c <MX_TIM5_Init+0xa4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014fc:	2303      	movs	r3, #3
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001504:	2301      	movs	r3, #1
 8001506:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001514:	2301      	movs	r3, #1
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	4619      	mov	r1, r3
 8001526:	480d      	ldr	r0, [pc, #52]	; (800155c <MX_TIM5_Init+0xa4>)
 8001528:	f003 f9e2 	bl	80048f0 <HAL_TIM_Encoder_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001532:	f000 ff95 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800153e:	463b      	mov	r3, r7
 8001540:	4619      	mov	r1, r3
 8001542:	4806      	ldr	r0, [pc, #24]	; (800155c <MX_TIM5_Init+0xa4>)
 8001544:	f004 fb4a 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800154e:	f000 ff87 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	3730      	adds	r7, #48	; 0x30
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200002d0 	.word	0x200002d0
 8001560:	40000c00 	.word	0x40000c00

08001564 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001574:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <MX_TIM7_Init+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 800157a:	4b13      	ldr	r3, [pc, #76]	; (80015c8 <MX_TIM7_Init+0x64>)
 800157c:	22a9      	movs	r2, #169	; 0xa9
 800157e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001588:	f24c 3250 	movw	r2, #50000	; 0xc350
 800158c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_TIM7_Init+0x64>)
 8001596:	f002 fef7 	bl	8004388 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80015a0:	f000 ff5e 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM7_Init+0x64>)
 80015b2:	f004 fb13 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015bc:	f000 ff50 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000031c 	.word	0x2000031c
 80015cc:	40001400 	.word	0x40001400

080015d0 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08c      	sub	sp, #48	; 0x30
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	2224      	movs	r2, #36	; 0x24
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f007 ff5d 	bl	800949e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	463b      	mov	r3, r7
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015ee:	4b23      	ldr	r3, [pc, #140]	; (800167c <MX_TIM8_Init+0xac>)
 80015f0:	4a23      	ldr	r2, [pc, #140]	; (8001680 <MX_TIM8_Init+0xb0>)
 80015f2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015f4:	4b21      	ldr	r3, [pc, #132]	; (800167c <MX_TIM8_Init+0xac>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <MX_TIM8_Init+0xac>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <MX_TIM8_Init+0xac>)
 8001602:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001606:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <MX_TIM8_Init+0xac>)
 800160a:	2200      	movs	r2, #0
 800160c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800160e:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_TIM8_Init+0xac>)
 8001610:	2200      	movs	r2, #0
 8001612:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <MX_TIM8_Init+0xac>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800161a:	2303      	movs	r3, #3
 800161c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001622:	2301      	movs	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800162e:	2300      	movs	r3, #0
 8001630:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001632:	2301      	movs	r3, #1
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800163e:	f107 030c 	add.w	r3, r7, #12
 8001642:	4619      	mov	r1, r3
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_TIM8_Init+0xac>)
 8001646:	f003 f953 	bl	80048f0 <HAL_TIM_Encoder_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001650:	f000 ff06 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800165c:	2300      	movs	r3, #0
 800165e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_TIM8_Init+0xac>)
 8001666:	f004 fab9 	bl	8005bdc <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001670:	f000 fef6 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3730      	adds	r7, #48	; 0x30
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20000368 	.word	0x20000368
 8001680:	40013400 	.word	0x40013400

08001684 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <MX_LPUART1_UART_Init+0x90>)
 800168c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 8001690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001694:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001696:	4b1e      	ldr	r3, [pc, #120]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 800169e:	2200      	movs	r2, #0
 80016a0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016aa:	220c      	movs	r2, #12
 80016ac:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b4:	4b16      	ldr	r3, [pc, #88]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016c0:	4b13      	ldr	r3, [pc, #76]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016c6:	4812      	ldr	r0, [pc, #72]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016c8:	f004 fbf8 	bl	8005ebc <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016d2:	f000 fec5 	bl	8002460 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016da:	f006 fc50 	bl	8007f7e <HAL_UARTEx_SetTxFifoThreshold>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016e4:	f000 febc 	bl	8002460 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	4809      	ldr	r0, [pc, #36]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016ec:	f006 fc85 	bl	8007ffa <HAL_UARTEx_SetRxFifoThreshold>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016f6:	f000 feb3 	bl	8002460 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_LPUART1_UART_Init+0x8c>)
 80016fc:	f006 fc06 	bl	8007f0c <HAL_UARTEx_DisableFifoMode>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8001706:	f000 feab 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000448 	.word	0x20000448
 8001714:	40008000 	.word	0x40008000

08001718 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800171e:	4a23      	ldr	r2, [pc, #140]	; (80017ac <MX_USART1_UART_Init+0x94>)
 8001720:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001728:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001736:	4b1c      	ldr	r3, [pc, #112]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800173e:	220c      	movs	r2, #12
 8001740:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001742:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800174a:	2200      	movs	r2, #0
 800174c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175a:	4b13      	ldr	r3, [pc, #76]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001760:	4811      	ldr	r0, [pc, #68]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001762:	f004 fbab 	bl	8005ebc <HAL_UART_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800176c:	f000 fe78 	bl	8002460 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001770:	2100      	movs	r1, #0
 8001772:	480d      	ldr	r0, [pc, #52]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001774:	f006 fc03 	bl	8007f7e <HAL_UARTEx_SetTxFifoThreshold>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800177e:	f000 fe6f 	bl	8002460 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001782:	2100      	movs	r1, #0
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001786:	f006 fc38 	bl	8007ffa <HAL_UARTEx_SetRxFifoThreshold>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001790:	f000 fe66 	bl	8002460 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_USART1_UART_Init+0x90>)
 8001796:	f006 fbb9 	bl	8007f0c <HAL_UARTEx_DisableFifoMode>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80017a0:	f000 fe5e 	bl	8002460 <Error_Handler>
  }

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200003b4 	.word	0x200003b4
 80017ac:	40013800 	.word	0x40013800

080017b0 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
	L298N_driver->current_PWM = 0;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2200      	movs	r2, #0
 80017c2:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	68ba      	ldr	r2, [r7, #8]
 80017ce:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8b3a      	ldrh	r2, [r7, #24]
 80017da:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	8c3a      	ldrh	r2, [r7, #32]
 80017e6:	831a      	strh	r2, [r3, #24]

}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <L298N_update_pwm>:


void L298N_update_pwm(L298N_driver* L298_driver, uint8_t new_pwm_count)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	70fb      	strb	r3, [r7, #3]
	L298_driver->current_PWM = new_pwm_count;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <L298N_update_pwm+0x28>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	7a1a      	ldrb	r2, [r3, #8]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	635a      	str	r2, [r3, #52]	; 0x34

}
 800181a:	e036      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2b04      	cmp	r3, #4
 8001822:	d107      	bne.n	8001834 <L298N_update_pwm+0x40>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7a19      	ldrb	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	460b      	mov	r3, r1
 8001830:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001832:	e02a      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b08      	cmp	r3, #8
 800183a:	d107      	bne.n	800184c <L298N_update_pwm+0x58>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7a19      	ldrb	r1, [r3, #8]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	460b      	mov	r3, r1
 8001848:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800184a:	e01e      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b0c      	cmp	r3, #12
 8001852:	d107      	bne.n	8001864 <L298N_update_pwm+0x70>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	7a19      	ldrb	r1, [r3, #8]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	460b      	mov	r3, r1
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001862:	e012      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b10      	cmp	r3, #16
 800186a:	d107      	bne.n	800187c <L298N_update_pwm+0x88>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7a19      	ldrb	r1, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	460b      	mov	r3, r1
 8001878:	6493      	str	r3, [r2, #72]	; 0x48
}
 800187a:	e006      	b.n	800188a <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7a19      	ldrb	r1, [r3, #8]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	460b      	mov	r3, r1
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, E_L298N_MODE l298n_mode)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	460b      	mov	r3, r1
 80018a0:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == BACKWARD)
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d110      	bne.n	80018ca <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68d8      	ldr	r0, [r3, #12]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8a1b      	ldrh	r3, [r3, #16]
 80018b0:	2201      	movs	r2, #1
 80018b2:	4619      	mov	r1, r3
 80018b4:	f001 fcee 	bl	8003294 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6958      	ldr	r0, [r3, #20]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	8b1b      	ldrh	r3, [r3, #24]
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	f001 fce6 	bl	8003294 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 80018c8:	e026      	b.n	8001918 <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == FORWARD)
 80018ca:	78fb      	ldrb	r3, [r7, #3]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d110      	bne.n	80018f2 <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68d8      	ldr	r0, [r3, #12]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	8a1b      	ldrh	r3, [r3, #16]
 80018d8:	2200      	movs	r2, #0
 80018da:	4619      	mov	r1, r3
 80018dc:	f001 fcda 	bl	8003294 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6958      	ldr	r0, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	8b1b      	ldrh	r3, [r3, #24]
 80018e8:	2201      	movs	r2, #1
 80018ea:	4619      	mov	r1, r3
 80018ec:	f001 fcd2 	bl	8003294 <HAL_GPIO_WritePin>
}
 80018f0:	e012      	b.n	8001918 <L298N_set_input_configuration+0x82>
	else if(l298n_mode == STOP)
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d10f      	bne.n	8001918 <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68d8      	ldr	r0, [r3, #12]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	8a1b      	ldrh	r3, [r3, #16]
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	f001 fcc6 	bl	8003294 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6958      	ldr	r0, [r3, #20]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8b1b      	ldrh	r3, [r3, #24]
 8001910:	2200      	movs	r2, #0
 8001912:	4619      	mov	r1, r3
 8001914:	f001 fcbe 	bl	8003294 <HAL_GPIO_WritePin>
}
 8001918:	bf00      	nop
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <init_driving_system>:
static char states_buffer[80];
static void add_state_to_states_buffer(MotorState* motor_state);


void init_driving_system(DrivingSystem* driving_system, MotorStruct* lb_motor, MotorStruct* lf_motor, MotorStruct* rb_motor, MotorStruct* rf_motor)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]

	driving_system->left_motors_lst[0] = lb_motor;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	601a      	str	r2, [r3, #0]
	driving_system->left_motors_lst[1] = lf_motor;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	605a      	str	r2, [r3, #4]
	driving_system->right_motors_lst[0] = rb_motor;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	609a      	str	r2, [r3, #8]
	driving_system->right_motors_lst[1] = rf_motor;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	60da      	str	r2, [r3, #12]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
	...

08001954 <default_init_driving_system_if>:

void default_init_driving_system_if(DrivingSystemIface* drv_system_if){
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

	drv_system_if->exe_cmd = execute_cmd;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a05      	ldr	r2, [pc, #20]	; (8001974 <default_init_driving_system_if+0x20>)
 8001960:	601a      	str	r2, [r3, #0]
	drv_system_if->send_state = send_state;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a04      	ldr	r2, [pc, #16]	; (8001978 <default_init_driving_system_if+0x24>)
 8001966:	605a      	str	r2, [r3, #4]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	0800197d 	.word	0x0800197d
 8001978:	08001b25 	.word	0x08001b25

0800197c <execute_cmd>:

void execute_cmd(DrivingSystem* driving_system, uint8_t* cmd){
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b08e      	sub	sp, #56	; 0x38
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]


	uint8_t cmd_code[] = "00";
 8001986:	4a2f      	ldr	r2, [pc, #188]	; (8001a44 <execute_cmd+0xc8>)
 8001988:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	4611      	mov	r1, r2
 8001990:	8019      	strh	r1, [r3, #0]
 8001992:	3302      	adds	r3, #2
 8001994:	0c12      	lsrs	r2, r2, #16
 8001996:	701a      	strb	r2, [r3, #0]
	uint8_t payload[] = "0000000";
 8001998:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <execute_cmd+0xcc>)
 800199a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a2:	e883 0003 	stmia.w	r3, {r0, r1}

	parse_cmd_code(cmd, cmd_code);
 80019a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019aa:	4619      	mov	r1, r3
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f000 fb5b 	bl	8002068 <parse_cmd_code>
	parse_payload(cmd, payload);
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	6838      	ldr	r0, [r7, #0]
 80019ba:	f000 fb8b 	bl	80020d4 <parse_payload>

//	uint8_t* send_state_literall = (uint8_t*)STATE_CMD_LIT;
//	uint8_t* forward_state_literall = (uint8_t*)FORWARD_CMD_LIT;


	if(cmd_code[0] == 1)
 80019be:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d103      	bne.n	80019ce <execute_cmd+0x52>
	{
		send_state(driving_system);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f8ac 	bl	8001b24 <send_state>
	}
	else{
		uint8_t msg[] = "Undefined First Cmd Literall";
		send_drv_err(msg);
	}
}
 80019cc:	e035      	b.n	8001a3a <execute_cmd+0xbe>
	}else if(cmd_code[0] == 2)
 80019ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d11a      	bne.n	8001a0c <execute_cmd+0x90>
	    float vel = 0;
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
	    sscanf(payload, "%f", &vel);
 80019dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4919      	ldr	r1, [pc, #100]	; (8001a4c <execute_cmd+0xd0>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f007 fce8 	bl	80093bc <siscanf>
		if(cmd_code[1] == 1)
 80019ec:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d103      	bne.n	80019fc <execute_cmd+0x80>
			send_state(driving_system);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f895 	bl	8001b24 <send_state>
}
 80019fa:	e01e      	b.n	8001a3a <execute_cmd+0xbe>
		}else if(cmd_code[1] == 2)
 80019fc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d11a      	bne.n	8001a3a <execute_cmd+0xbe>
			send_drv_err("Backward not implemented");
 8001a04:	4812      	ldr	r0, [pc, #72]	; (8001a50 <execute_cmd+0xd4>)
 8001a06:	f000 f829 	bl	8001a5c <send_drv_err>
}
 8001a0a:	e016      	b.n	8001a3a <execute_cmd+0xbe>
	}else if(cmd_code[0] == 3){
 8001a0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001a10:	2b03      	cmp	r3, #3
 8001a12:	d103      	bne.n	8001a1c <execute_cmd+0xa0>
		send_drv_err("PWM Mode unimplemented");
 8001a14:	480f      	ldr	r0, [pc, #60]	; (8001a54 <execute_cmd+0xd8>)
 8001a16:	f000 f821 	bl	8001a5c <send_drv_err>
}
 8001a1a:	e00e      	b.n	8001a3a <execute_cmd+0xbe>
		uint8_t msg[] = "Undefined First Cmd Literall";
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <execute_cmd+0xdc>)
 8001a1e:	f107 0408 	add.w	r4, r7, #8
 8001a22:	461d      	mov	r5, r3
 8001a24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a2c:	c407      	stmia	r4!, {r0, r1, r2}
 8001a2e:	7023      	strb	r3, [r4, #0]
		send_drv_err(msg);
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	4618      	mov	r0, r3
 8001a36:	f000 f811 	bl	8001a5c <send_drv_err>
}
 8001a3a:	bf00      	nop
 8001a3c:	3738      	adds	r7, #56	; 0x38
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bdb0      	pop	{r4, r5, r7, pc}
 8001a42:	bf00      	nop
 8001a44:	0800d590 	.word	0x0800d590
 8001a48:	0800d594 	.word	0x0800d594
 8001a4c:	0800d558 	.word	0x0800d558
 8001a50:	0800d55c 	.word	0x0800d55c
 8001a54:	0800d578 	.word	0x0800d578
 8001a58:	0800d59c 	.word	0x0800d59c

08001a5c <send_drv_err>:



void send_drv_err(char* msg){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b09c      	sub	sp, #112	; 0x70
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2264      	movs	r2, #100	; 0x64
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f007 fd16 	bl	800949e <memset>
	strcat(err_buffer, DRIVING_ERR);
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fc22 	bl	80002c0 <strlen>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f107 030c 	add.w	r3, r7, #12
 8001a84:	4413      	add	r3, r2
 8001a86:	4917      	ldr	r1, [pc, #92]	; (8001ae4 <send_drv_err+0x88>)
 8001a88:	461a      	mov	r2, r3
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	cb03      	ldmia	r3!, {r0, r1}
 8001a8e:	6010      	str	r0, [r2, #0]
 8001a90:	6051      	str	r1, [r2, #4]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	7213      	strb	r3, [r2, #8]
	strcat(err_buffer, msg);
 8001a96:	f107 030c 	add.w	r3, r7, #12
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f007 fd06 	bl	80094ae <strcat>
	strcat(err_buffer, "\n\r");
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fc0a 	bl	80002c0 <strlen>
 8001aac:	4603      	mov	r3, r0
 8001aae:	461a      	mov	r2, r3
 8001ab0:	f107 030c 	add.w	r3, r7, #12
 8001ab4:	4413      	add	r3, r2
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	; (8001ae8 <send_drv_err+0x8c>)
 8001ab8:	8811      	ldrh	r1, [r2, #0]
 8001aba:	7892      	ldrb	r2, [r2, #2]
 8001abc:	8019      	strh	r1, [r3, #0]
 8001abe:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer),STATE_SENDING_TIMEOUT);
 8001ac0:	f107 030c 	add.w	r3, r7, #12
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fbfb 	bl	80002c0 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f107 010c 	add.w	r1, r7, #12
 8001ad2:	2364      	movs	r3, #100	; 0x64
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <send_drv_err+0x90>)
 8001ad6:	f004 fa41 	bl	8005f5c <HAL_UART_Transmit>

}
 8001ada:	bf00      	nop
 8001adc:	3770      	adds	r7, #112	; 0x70
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	0800d5bc 	.word	0x0800d5bc
 8001ae8:	0800d5c8 	.word	0x0800d5c8
 8001aec:	20000448 	.word	0x20000448

08001af0 <add_state_to_states_buffer>:


static void add_state_to_states_buffer(MotorState* motor_state){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

	memset(state_str, '\0', sizeof(state_str));
 8001af8:	2214      	movs	r2, #20
 8001afa:	2100      	movs	r1, #0
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <add_state_to_states_buffer+0x2c>)
 8001afe:	f007 fcce 	bl	800949e <memset>
	str_motor_state(motor_state, state_str);
 8001b02:	4906      	ldr	r1, [pc, #24]	; (8001b1c <add_state_to_states_buffer+0x2c>)
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 f867 	bl	8001bd8 <str_motor_state>
	strcat(states_buffer, state_str);
 8001b0a:	4904      	ldr	r1, [pc, #16]	; (8001b1c <add_state_to_states_buffer+0x2c>)
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <add_state_to_states_buffer+0x30>)
 8001b0e:	f007 fcce 	bl	80094ae <strcat>

}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200004dc 	.word	0x200004dc
 8001b20:	200004f0 	.word	0x200004f0

08001b24 <send_state>:
	}

}


void send_state(DrivingSystem* driving_system){
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]


	memset(states_buffer, '\0', sizeof(states_buffer));
 8001b2c:	2250      	movs	r2, #80	; 0x50
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4815      	ldr	r0, [pc, #84]	; (8001b88 <send_state+0x64>)
 8001b32:	f007 fcb4 	bl	800949e <memset>

	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e013      	b.n	8001b64 <send_state+0x40>

		add_state_to_states_buffer(driving_system->left_motors_lst[i]->motor_state);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ffd2 	bl	8001af0 <add_state_to_states_buffer>
		add_state_to_states_buffer(driving_system->right_motors_lst[i]->motor_state);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	3202      	adds	r2, #2
 8001b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff ffc9 	bl	8001af0 <add_state_to_states_buffer>
	for(int i = 0; i < NO_OF_SIDE_MOTORS; ++i){
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	3301      	adds	r3, #1
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	dde8      	ble.n	8001b3c <send_state+0x18>
	}

	HAL_UART_Transmit(&hlpuart1,(uint8_t*) states_buffer, strlen(states_buffer),STATE_SENDING_TIMEOUT);
 8001b6a:	4807      	ldr	r0, [pc, #28]	; (8001b88 <send_state+0x64>)
 8001b6c:	f7fe fba8 	bl	80002c0 <strlen>
 8001b70:	4603      	mov	r3, r0
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	2364      	movs	r3, #100	; 0x64
 8001b76:	4904      	ldr	r1, [pc, #16]	; (8001b88 <send_state+0x64>)
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <send_state+0x68>)
 8001b7a:	f004 f9ef 	bl	8005f5c <HAL_UART_Transmit>

}
 8001b7e:	bf00      	nop
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200004f0 	.word	0x200004f0
 8001b8c:	20000448 	.word	0x20000448

08001b90 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	601a      	str	r2, [r3, #0]

}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	889a      	ldrh	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	809a      	strh	r2, [r3, #4]

}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
	...

08001bd8 <str_motor_state>:
#include <motor_features.h>
#include "motor_driver.h"
#include "timers_configuration.h"


void str_motor_state(MotorState* motor_state, char* state_buffer){
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	b087      	sub	sp, #28
 8001bdc:	af04      	add	r7, sp, #16
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]

	sprintf(state_buffer, "%d,%.2f,%.2f\n\r", motor_state->motor_id, motor_state->set_velocity, motor_state->measured_velocity);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	7c1b      	ldrb	r3, [r3, #16]
 8001be6:	461e      	mov	r6, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcd3 	bl	8000598 <__aeabi_f2d>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	460d      	mov	r5, r1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fccc 	bl	8000598 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c08:	e9cd 4500 	strd	r4, r5, [sp]
 8001c0c:	4632      	mov	r2, r6
 8001c0e:	4904      	ldr	r1, [pc, #16]	; (8001c20 <str_motor_state+0x48>)
 8001c10:	6838      	ldr	r0, [r7, #0]
 8001c12:	f007 fbb3 	bl	800937c <siprintf>
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	0800d5cc 	.word	0x0800d5cc

08001c24 <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	60da      	str	r2, [r3, #12]
	motor_struct->updater_timer_periods = CountPeriodS(updater_tim_);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fac4 	bl	80021cc <CountPeriodS>
 8001c44:	eef0 7a40 	vmov.f32	s15, s0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_struct->encoder_info = enc_inf_param_;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	615a      	str	r2, [r3, #20]
	motor_struct->pid_controller = pid_controller_;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	605a      	str	r2, [r3, #4]

}
 8001c60:	bf00      	nop
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	eef0 0a47 	vmov.f32	s1, s14
 8001c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f000 f8e4 	bl	8001e5c <pid_calculate>
 8001c94:	4603      	mov	r3, r0
 8001c96:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001c98:	897b      	ldrh	r3, [r7, #10]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f000 f9cc 	bl	8002038 <saturate_pwm>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	727b      	strb	r3, [r7, #9]
	L298N_update_pwm(motor_struct->L298N_driver, saturated_pwm_value);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	695b      	ldr	r3, [r3, #20]
 8001ca8:	7a7a      	ldrb	r2, [r7, #9]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fda1 	bl	80017f4 <L298N_update_pwm>

}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 8001ccc:	6838      	ldr	r0, [r7, #0]
 8001cce:	f7ff ff6d 	bl	8001bac <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	889a      	ldrh	r2, [r3, #4]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	88db      	ldrh	r3, [r3, #6]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 8001ce4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	dd1f      	ble.n	8001d2c <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0310 	and.w	r3, r3, #16
 8001cf8:	2b10      	cmp	r3, #16
 8001cfa:	d114      	bne.n	8001d26 <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	889b      	ldrh	r3, [r3, #4]
 8001d00:	461a      	mov	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bfb8      	it	lt
 8001d10:	425b      	neglt	r3, r3
 8001d12:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	88da      	ldrh	r2, [r3, #6]
 8001d18:	89fb      	ldrh	r3, [r7, #14]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	425b      	negs	r3, r3
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	82fb      	strh	r3, [r7, #22]
 8001d24:	e023      	b.n	8001d6e <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001d26:	8abb      	ldrh	r3, [r7, #20]
 8001d28:	82fb      	strh	r3, [r7, #22]
 8001d2a:	e020      	b.n	8001d6e <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 8001d2c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	da1c      	bge.n	8001d6e <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	d012      	beq.n	8001d6a <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	889b      	ldrh	r3, [r3, #4]
 8001d48:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	88db      	ldrh	r3, [r3, #6]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 8001d5e:	8a7a      	ldrh	r2, [r7, #18]
 8001d60:	8a3b      	ldrh	r3, [r7, #16]
 8001d62:	4413      	add	r3, r2
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	82fb      	strh	r3, [r7, #22]
 8001d68:	e001      	b.n	8001d6e <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001d6a:	8abb      	ldrh	r3, [r7, #20]
 8001d6c:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 8001d6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f000 f92c 	bl	8001fd0 <convert_to_radians>
 8001d78:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d82:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001d90:	bf00      	nop
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <set_velocity>:

void set_velocity(MotorState *motor_state, float velocity)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	ed87 0a00 	vstr	s0, [r7]
	motor_state->set_velocity = velocity;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	605a      	str	r2, [r3, #4]
}
 8001daa:	bf00      	nop
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <update_measured_velocity>:

void update_measured_velocity(MotorStruct* motor_struct)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
	MotorState *curr_motor_state = motor_struct->motor_state;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]
	float rotary_displacement_ = rotary_displacement(curr_motor_state);
 8001dc4:	68f8      	ldr	r0, [r7, #12]
 8001dc6:	f000 f810 	bl	8001dea <rotary_displacement>
 8001dca:	ed87 0a02 	vstr	s0, [r7, #8]
	curr_motor_state->measured_velocity = (float)rotary_displacement_ / motor_struct->updater_timer_periods;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	ed93 7a04 	vldr	s14, [r3, #16]
 8001dd4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	edc3 7a00 	vstr	s15, [r3]

}
 8001de2:	bf00      	nop
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]

	return motor_state->position - motor_state->last_position;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	ed93 7a02 	vldr	s14, [r3, #8]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001e02:	eeb0 0a67 	vmov.f32	s0, s15
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <pid_init>:
#include "pid_controller.h"
#include "motor_features.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6178      	str	r0, [r7, #20]
 8001e18:	ed87 0a04 	vstr	s0, [r7, #16]
 8001e1c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001e20:	ed87 1a02 	vstr	s2, [r7, #8]
 8001e24:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f04f 0200 	mov.w	r2, #0
 8001e34:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	615a      	str	r2, [r3, #20]
}
 8001e4e:	bf00      	nop
 8001e50:	371c      	adds	r7, #28
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
	...

08001e5c <pid_calculate>:
float d_term;
float pid_output;


uint8_t pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e68:	edc7 0a01 	vstr	s1, [r7, #4]

	error = setpoint - process_variable;
 8001e6c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <pid_calculate+0x15c>)
 8001e7a:	edc3 7a00 	vstr	s15, [r3]
	pid_data->total_error += error;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	ed93 7a01 	vldr	s14, [r3, #4]
 8001e84:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <pid_calculate+0x15c>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	edc3 7a01 	vstr	s15, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e9a:	4b47      	ldr	r3, [pc, #284]	; (8001fb8 <pid_calculate+0x15c>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea4:	4b45      	ldr	r3, [pc, #276]	; (8001fbc <pid_calculate+0x160>)
 8001ea6:	edc3 7a00 	vstr	s15, [r3]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	ed93 7a03 	vldr	s14, [r3, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <pid_calculate+0x164>)
 8001ebc:	edc3 7a00 	vstr	s15, [r3]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <pid_calculate+0x15c>)
 8001ec8:	edd3 6a00 	vldr	s13, [r3]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	4b3a      	ldr	r3, [pc, #232]	; (8001fc4 <pid_calculate+0x168>)
 8001edc:	edc3 7a00 	vstr	s15, [r3]

	pid_output = p_term + i_term + d_term;
 8001ee0:	4b36      	ldr	r3, [pc, #216]	; (8001fbc <pid_calculate+0x160>)
 8001ee2:	ed93 7a00 	vldr	s14, [r3]
 8001ee6:	4b36      	ldr	r3, [pc, #216]	; (8001fc0 <pid_calculate+0x164>)
 8001ee8:	edd3 7a00 	vldr	s15, [r3]
 8001eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ef0:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <pid_calculate+0x168>)
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001efa:	4b33      	ldr	r3, [pc, #204]	; (8001fc8 <pid_calculate+0x16c>)
 8001efc:	edc3 7a00 	vstr	s15, [r3]

    // Anti-windup
    if (pid_output < -pid_data->anti_windup_limit)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	425b      	negs	r3, r3
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0e:	4b2e      	ldr	r3, [pc, #184]	; (8001fc8 <pid_calculate+0x16c>)
 8001f10:	edd3 7a00 	vldr	s15, [r3]
 8001f14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1c:	dd15      	ble.n	8001f4a <pid_calculate+0xee>
    {
        pid_output = -pid_data->anti_windup_limit;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	425b      	negs	r3, r3
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <pid_calculate+0x16c>)
 8001f2e:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <pid_calculate+0x15c>)
 8001f3a:	edd3 7a00 	vldr	s15, [r3]
 8001f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	edc3 7a01 	vstr	s15, [r3, #4]
 8001f48:	e021      	b.n	8001f8e <pid_calculate+0x132>

    } else if (pid_output > pid_data->anti_windup_limit)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	ee07 3a90 	vmov	s15, r3
 8001f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f56:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <pid_calculate+0x16c>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f64:	d513      	bpl.n	8001f8e <pid_calculate+0x132>
    {
        pid_output = pid_data->anti_windup_limit;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	ee07 3a90 	vmov	s15, r3
 8001f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <pid_calculate+0x16c>)
 8001f74:	edc3 7a00 	vstr	s15, [r3]
        pid_data->total_error = pid_data->total_error - error;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f7e:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <pid_calculate+0x15c>)
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	edc3 7a01 	vstr	s15, [r3, #4]
    }


	pid_data->previous_error = error;
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <pid_calculate+0x15c>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	601a      	str	r2, [r3, #0]
	uint8_t saturated_pwm_value = saturate_pwm(pid_output);
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <pid_calculate+0x16c>)
 8001f98:	edd3 7a00 	vldr	s15, [r3]
 8001f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa0:	ee17 0a90 	vmov	r0, s15
 8001fa4:	f000 f848 	bl	8002038 <saturate_pwm>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	75fb      	strb	r3, [r7, #23]
	return saturated_pwm_value;
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000540 	.word	0x20000540
 8001fbc:	20000544 	.word	0x20000544
 8001fc0:	20000548 	.word	0x20000548
 8001fc4:	2000054c 	.word	0x2000054c
 8001fc8:	20000550 	.word	0x20000550
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <convert_to_radians>:

#include "motor_features.h"



float convert_to_radians(int32_t enc_position){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fe2:	ee17 0a90 	vmov	r0, s15
 8001fe6:	f7fe fad7 	bl	8000598 <__aeabi_f2d>
 8001fea:	a30f      	add	r3, pc, #60	; (adr r3, 8002028 <convert_to_radians+0x58>)
 8001fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff0:	f7fe fb2a 	bl	8000648 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	a30c      	add	r3, pc, #48	; (adr r3, 8002030 <convert_to_radians+0x60>)
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f7fe fc4b 	bl	800089c <__aeabi_ddiv>
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4610      	mov	r0, r2
 800200c:	4619      	mov	r1, r3
 800200e:	f7fe fe13 	bl	8000c38 <__aeabi_d2f>
 8002012:	4603      	mov	r3, r0
 8002014:	ee07 3a90 	vmov	s15, r3

}
 8002018:	eeb0 0a67 	vmov.f32	s0, s15
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	54442d18 	.word	0x54442d18
 800202c:	401921fb 	.word	0x401921fb
 8002030:	00000000 	.word	0x00000000
 8002034:	40ae6400 	.word	0x40ae6400

08002038 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]


	if (pwm_value < PWM_MIN_VALUE){
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	da02      	bge.n	800204c <saturate_pwm+0x14>
		pwm_value = (uint8_t)PWM_MIN_VALUE;
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	e004      	b.n	8002056 <saturate_pwm+0x1e>
	}else if(pwm_value > PWM_MAX_VALUE){
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b62      	cmp	r3, #98	; 0x62
 8002050:	dd01      	ble.n	8002056 <saturate_pwm+0x1e>
		pwm_value = (uint8_t)PWM_MAX_VALUE;
 8002052:	2362      	movs	r3, #98	; 0x62
 8002054:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	b2db      	uxtb	r3, r3

}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
	...

08002068 <parse_cmd_code>:

#include "parser_features.h"



void parse_cmd_code(uint8_t* cmd, uint8_t* cmd_code){
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]

	if (cmd[0] >= '0' && cmd[0] <= '9') {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b2f      	cmp	r3, #47	; 0x2f
 8002078:	d90a      	bls.n	8002090 <parse_cmd_code+0x28>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b39      	cmp	r3, #57	; 0x39
 8002080:	d806      	bhi.n	8002090 <parse_cmd_code+0x28>
		cmd_code[0] = cmd[0] - '0';
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	3b30      	subs	r3, #48	; 0x30
 8002088:	b2da      	uxtb	r2, r3
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	701a      	strb	r2, [r3, #0]
 800208e:	e002      	b.n	8002096 <parse_cmd_code+0x2e>

	}else{
		send_parsing_err("cmd[0] wrong format");
 8002090:	480e      	ldr	r0, [pc, #56]	; (80020cc <parse_cmd_code+0x64>)
 8002092:	f000 f84f 	bl	8002134 <send_parsing_err>
	}

	if (cmd[1] >= '0' && cmd[1] <= '9') {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3301      	adds	r3, #1
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b2f      	cmp	r3, #47	; 0x2f
 800209e:	d90d      	bls.n	80020bc <parse_cmd_code+0x54>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3301      	adds	r3, #1
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b39      	cmp	r3, #57	; 0x39
 80020a8:	d808      	bhi.n	80020bc <parse_cmd_code+0x54>
		cmd_code[1] = cmd[1] - '0';
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3301      	adds	r3, #1
 80020ae:	781a      	ldrb	r2, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3301      	adds	r3, #1
 80020b4:	3a30      	subs	r2, #48	; 0x30
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e003      	b.n	80020c4 <parse_cmd_code+0x5c>
	}else{
		send_parsing_err("cmd[1] wrong format");
 80020bc:	4804      	ldr	r0, [pc, #16]	; (80020d0 <parse_cmd_code+0x68>)
 80020be:	f000 f839 	bl	8002134 <send_parsing_err>
	}

}
 80020c2:	bf00      	nop
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	0800d5dc 	.word	0x0800d5dc
 80020d0:	0800d5f0 	.word	0x0800d5f0

080020d4 <parse_payload>:

void parse_payload(char* cmd, uint8_t* payload) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]

    uint8_t cmd_index = 2;
 80020de:	2302      	movs	r3, #2
 80020e0:	73fb      	strb	r3, [r7, #15]
    int i = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60bb      	str	r3, [r7, #8]

    while (cmd[cmd_index] != CMD_END_CHAR) {
 80020e6:	e014      	b.n	8002112 <parse_payload+0x3e>

    	if(i == PAYLOAD_LENGHT-1){
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b07      	cmp	r3, #7
 80020ec:	d103      	bne.n	80020f6 <parse_payload+0x22>
    		send_parsing_err(" cmd end char not received");
 80020ee:	4810      	ldr	r0, [pc, #64]	; (8002130 <parse_payload+0x5c>)
 80020f0:	f000 f820 	bl	8002134 <send_parsing_err>
    		break;
 80020f4:	e013      	b.n	800211e <parse_payload+0x4a>
    	}
        payload[i] = cmd[cmd_index];
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	441a      	add	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	440b      	add	r3, r1
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	701a      	strb	r2, [r3, #0]
        i++;
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3301      	adds	r3, #1
 800210a:	60bb      	str	r3, [r7, #8]
        cmd_index++;
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	3301      	adds	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
    while (cmd[cmd_index] != CMD_END_CHAR) {
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	4413      	add	r3, r2
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b66      	cmp	r3, #102	; 0x66
 800211c:	d1e4      	bne.n	80020e8 <parse_payload+0x14>
    }

    payload[i] = '\0';
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4413      	add	r3, r2
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0800d604 	.word	0x0800d604

08002134 <send_parsing_err>:

void send_parsing_err(char* msg){
 8002134:	b580      	push	{r7, lr}
 8002136:	b09c      	sub	sp, #112	; 0x70
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]

	char err_buffer[100];
	memset(err_buffer, '\0', sizeof(err_buffer));
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	2264      	movs	r2, #100	; 0x64
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f007 f9aa 	bl	800949e <memset>
	strcat(err_buffer, PARSING_ERR);
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe f8b6 	bl	80002c0 <strlen>
 8002154:	4603      	mov	r3, r0
 8002156:	461a      	mov	r2, r3
 8002158:	f107 030c 	add.w	r3, r7, #12
 800215c:	4413      	add	r3, r2
 800215e:	4918      	ldr	r1, [pc, #96]	; (80021c0 <send_parsing_err+0x8c>)
 8002160:	461a      	mov	r2, r3
 8002162:	460b      	mov	r3, r1
 8002164:	cb03      	ldmia	r3!, {r0, r1}
 8002166:	6010      	str	r0, [r2, #0]
 8002168:	6051      	str	r1, [r2, #4]
 800216a:	8819      	ldrh	r1, [r3, #0]
 800216c:	789b      	ldrb	r3, [r3, #2]
 800216e:	8111      	strh	r1, [r2, #8]
 8002170:	7293      	strb	r3, [r2, #10]
	strcat(err_buffer, msg);
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4618      	mov	r0, r3
 800217a:	f007 f998 	bl	80094ae <strcat>
	strcat(err_buffer, "\n\r");
 800217e:	f107 030c 	add.w	r3, r7, #12
 8002182:	4618      	mov	r0, r3
 8002184:	f7fe f89c 	bl	80002c0 <strlen>
 8002188:	4603      	mov	r3, r0
 800218a:	461a      	mov	r2, r3
 800218c:	f107 030c 	add.w	r3, r7, #12
 8002190:	4413      	add	r3, r2
 8002192:	4a0c      	ldr	r2, [pc, #48]	; (80021c4 <send_parsing_err+0x90>)
 8002194:	8811      	ldrh	r1, [r2, #0]
 8002196:	7892      	ldrb	r2, [r2, #2]
 8002198:	8019      	strh	r1, [r3, #0]
 800219a:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) err_buffer, strlen(err_buffer),100);
 800219c:	f107 030c 	add.w	r3, r7, #12
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f88d 	bl	80002c0 <strlen>
 80021a6:	4603      	mov	r3, r0
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	f107 010c 	add.w	r1, r7, #12
 80021ae:	2364      	movs	r3, #100	; 0x64
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <send_parsing_err+0x94>)
 80021b2:	f003 fed3 	bl	8005f5c <HAL_UART_Transmit>

}
 80021b6:	bf00      	nop
 80021b8:	3770      	adds	r7, #112	; 0x70
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	0800d620 	.word	0x0800d620
 80021c4:	0800d62c 	.word	0x0800d62c
 80021c8:	20000448 	.word	0x20000448

080021cc <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 80021e0:	f001 fdd4 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 80021e4:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	fb02 f303 	mul.w	r3, r2, r3
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	ee07 3a90 	vmov	s15, r3
 80021fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002204:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	ee07 3a90 	vmov	s15, r3
}
 800220e:	eeb0 0a67 	vmov.f32	s0, s15
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <main>:
void generate_stair_signal(void);
void generate_random_signal_velo(void);


int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af04      	add	r7, sp, #16

  HAL_Init();
 800221e:	f000 fcf2 	bl	8002c06 <HAL_Init>
  SystemClock_Config();
 8002222:	f7fe ff0d 	bl	8001040 <SystemClock_Config>
  MX_GPIO_Init();
 8002226:	f7fe ff57 	bl	80010d8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800222a:	f7ff fa2b 	bl	8001684 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800222e:	f7ff fa73 	bl	8001718 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8002232:	f7fe ffbf 	bl	80011b4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8002236:	f7ff f893 	bl	8001360 <MX_TIM3_Init>
  MX_TIM4_Init();
 800223a:	f7ff f8e7 	bl	800140c <MX_TIM4_Init>
  MX_TIM5_Init();
 800223e:	f7ff f93b 	bl	80014b8 <MX_TIM5_Init>
  MX_TIM7_Init();
 8002242:	f7ff f98f 	bl	8001564 <MX_TIM7_Init>
  MX_TIM8_Init();
 8002246:	f7ff f9c3 	bl	80015d0 <MX_TIM8_Init>

  init_encoder_info(&encoder_info, &htim4);
 800224a:	4935      	ldr	r1, [pc, #212]	; (8002320 <main+0x108>)
 800224c:	4835      	ldr	r0, [pc, #212]	; (8002324 <main+0x10c>)
 800224e:	f7ff fc9f 	bl	8001b90 <init_encoder_info>
  L298N_init(&L298N_lb, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 8002252:	2302      	movs	r3, #2
 8002254:	9302      	str	r3, [sp, #8]
 8002256:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800225a:	9301      	str	r3, [sp, #4]
 800225c:	2301      	movs	r3, #1
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002264:	4a30      	ldr	r2, [pc, #192]	; (8002328 <main+0x110>)
 8002266:	2100      	movs	r1, #0
 8002268:	4830      	ldr	r0, [pc, #192]	; (800232c <main+0x114>)
 800226a:	f7ff faa1 	bl	80017b0 <L298N_init>
  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 800226e:	215f      	movs	r1, #95	; 0x5f
 8002270:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 8002330 <main+0x118>
 8002274:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8002334 <main+0x11c>
 8002278:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002338 <main+0x120>
 800227c:	482f      	ldr	r0, [pc, #188]	; (800233c <main+0x124>)
 800227e:	f7ff fdc7 	bl	8001e10 <pid_init>
  init_motor(&lb_motor, &lb_motor_state, &htim7, &encoder_info, &pid_controller, &L298N_lb);
 8002282:	4b2a      	ldr	r3, [pc, #168]	; (800232c <main+0x114>)
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <main+0x124>)
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	4b26      	ldr	r3, [pc, #152]	; (8002324 <main+0x10c>)
 800228c:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <main+0x128>)
 800228e:	492d      	ldr	r1, [pc, #180]	; (8002344 <main+0x12c>)
 8002290:	482d      	ldr	r0, [pc, #180]	; (8002348 <main+0x130>)
 8002292:	f7ff fcc7 	bl	8001c24 <init_motor>

  pwm_output = 0;
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <main+0x134>)
 8002298:	2200      	movs	r2, #0
 800229a:	701a      	strb	r2, [r3, #0]
  tick = 0;
 800229c:	492c      	ldr	r1, [pc, #176]	; (8002350 <main+0x138>)
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9c1 2300 	strd	r2, r3, [r1]

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 80022aa:	4825      	ldr	r0, [pc, #148]	; (8002340 <main+0x128>)
 80022ac:	f002 f934 	bl	8004518 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 80022b0:	4828      	ldr	r0, [pc, #160]	; (8002354 <main+0x13c>)
 80022b2:	f002 f8c1 	bl	8004438 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80022b6:	2100      	movs	r1, #0
 80022b8:	481b      	ldr	r0, [pc, #108]	; (8002328 <main+0x110>)
 80022ba:	f002 fa07 	bl	80046cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80022be:	2104      	movs	r1, #4
 80022c0:	4819      	ldr	r0, [pc, #100]	; (8002328 <main+0x110>)
 80022c2:	f002 fa03 	bl	80046cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80022c6:	2108      	movs	r1, #8
 80022c8:	4817      	ldr	r0, [pc, #92]	; (8002328 <main+0x110>)
 80022ca:	f002 f9ff 	bl	80046cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80022ce:	210c      	movs	r1, #12
 80022d0:	4815      	ldr	r0, [pc, #84]	; (8002328 <main+0x110>)
 80022d2:	f002 f9fb 	bl	80046cc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80022d6:	213c      	movs	r1, #60	; 0x3c
 80022d8:	4811      	ldr	r0, [pc, #68]	; (8002320 <main+0x108>)
 80022da:	f002 fbaf 	bl	8004a3c <HAL_TIM_Encoder_Start>


  updater_timer_periods = CountPeriodS(lb_motor.motor_updater_tim);
 80022de:	4b1a      	ldr	r3, [pc, #104]	; (8002348 <main+0x130>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff72 	bl	80021cc <CountPeriodS>
 80022e8:	eef0 7a40 	vmov.f32	s15, s0
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <main+0x140>)
 80022ee:	edc3 7a00 	vstr	s15, [r3]
  L298N_set_input_configuration(&L298N_lb, FORWARD);
 80022f2:	2101      	movs	r1, #1
 80022f4:	480d      	ldr	r0, [pc, #52]	; (800232c <main+0x114>)
 80022f6:	f7ff face 	bl	8001896 <L298N_set_input_configuration>
  init_driving_system(&driving_system ,&lb_motor, &lb_motor, &lb_motor, &lb_motor);
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <main+0x130>)
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	4b12      	ldr	r3, [pc, #72]	; (8002348 <main+0x130>)
 8002300:	4a11      	ldr	r2, [pc, #68]	; (8002348 <main+0x130>)
 8002302:	4911      	ldr	r1, [pc, #68]	; (8002348 <main+0x130>)
 8002304:	4815      	ldr	r0, [pc, #84]	; (800235c <main+0x144>)
 8002306:	f7ff fb0b 	bl	8001920 <init_driving_system>
  default_init_driving_system_if(&drv_system_if);
 800230a:	4815      	ldr	r0, [pc, #84]	; (8002360 <main+0x148>)
 800230c:	f7ff fb22 	bl	8001954 <default_init_driving_system_if>

  /* USER CODE END 2 */

  HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 8002310:	2209      	movs	r2, #9
 8002312:	4914      	ldr	r1, [pc, #80]	; (8002364 <main+0x14c>)
 8002314:	4814      	ldr	r0, [pc, #80]	; (8002368 <main+0x150>)
 8002316:	f003 feaf 	bl	8006078 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
  {
//    	generate_stair_signal();
    	generate_random_signal_velo();
 800231a:	f000 f841 	bl	80023a0 <generate_random_signal_velo>
 800231e:	e7fc      	b.n	800231a <main+0x102>
 8002320:	20000284 	.word	0x20000284
 8002324:	20000554 	.word	0x20000554
 8002328:	200001ec 	.word	0x200001ec
 800232c:	2000058c 	.word	0x2000058c
 8002330:	00000000 	.word	0x00000000
 8002334:	3f3a5e35 	.word	0x3f3a5e35
 8002338:	3c9374bc 	.word	0x3c9374bc
 800233c:	20000574 	.word	0x20000574
 8002340:	2000031c 	.word	0x2000031c
 8002344:	200005a8 	.word	0x200005a8
 8002348:	2000055c 	.word	0x2000055c
 800234c:	200005e2 	.word	0x200005e2
 8002350:	200005e8 	.word	0x200005e8
 8002354:	20000368 	.word	0x20000368
 8002358:	200005d4 	.word	0x200005d4
 800235c:	200005bc 	.word	0x200005bc
 8002360:	200005cc 	.word	0x200005cc
 8002364:	200005d8 	.word	0x200005d8
 8002368:	20000448 	.word	0x20000448

0800236c <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]


	drv_system_if.exe_cmd(&driving_system, cmd_data);
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <HAL_UART_RxCpltCallback+0x24>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4906      	ldr	r1, [pc, #24]	; (8002394 <HAL_UART_RxCpltCallback+0x28>)
 800237a:	4807      	ldr	r0, [pc, #28]	; (8002398 <HAL_UART_RxCpltCallback+0x2c>)
 800237c:	4798      	blx	r3
	HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + CMD_PAYLOAD_LENGTH);
 800237e:	2209      	movs	r2, #9
 8002380:	4904      	ldr	r1, [pc, #16]	; (8002394 <HAL_UART_RxCpltCallback+0x28>)
 8002382:	4806      	ldr	r0, [pc, #24]	; (800239c <HAL_UART_RxCpltCallback+0x30>)
 8002384:	f003 fe78 	bl	8006078 <HAL_UART_Receive_IT>

}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200005cc 	.word	0x200005cc
 8002394:	200005d8 	.word	0x200005d8
 8002398:	200005bc 	.word	0x200005bc
 800239c:	20000448 	.word	0x20000448

080023a0 <generate_random_signal_velo>:
			pwm_output = 0;
		}
	}
}

void generate_random_signal_velo(void){
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0

	if(tick == 100){
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <generate_random_signal_velo+0x44>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f1a2 0164 	sub.w	r1, r2, #100	; 0x64
 80023ae:	430b      	orrs	r3, r1
 80023b0:	d113      	bne.n	80023da <generate_random_signal_velo+0x3a>

		velo +=  2;
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <generate_random_signal_velo+0x48>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	3302      	adds	r3, #2
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <generate_random_signal_velo+0x48>)
 80023bc:	701a      	strb	r2, [r3, #0]
		tick = 0;
 80023be:	4909      	ldr	r1, [pc, #36]	; (80023e4 <generate_random_signal_velo+0x44>)
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	e9c1 2300 	strd	r2, r3, [r1]
		if (velo >= 10){
 80023cc:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <generate_random_signal_velo+0x48>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	d902      	bls.n	80023da <generate_random_signal_velo+0x3a>
			velo = 0;
 80023d4:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <generate_random_signal_velo+0x48>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	200005e8 	.word	0x200005e8
 80023e8:	200005e3 	.word	0x200005e3

080023ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023ec:	b5b0      	push	{r4, r5, r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)lb_motor.motor_updater_tim->Instance) {
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d121      	bne.n	8002446 <HAL_TIM_PeriodElapsedCallback+0x5a>

    	update_motor_position(lb_motor.motor_state, lb_motor.encoder_info);
 8002402:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a12      	ldr	r2, [pc, #72]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002408:	6892      	ldr	r2, [r2, #8]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fc54 	bl	8001cba <update_motor_position>
    	update_measured_velocity(&lb_motor);
 8002412:	480f      	ldr	r0, [pc, #60]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002414:	f7ff fccf 	bl	8001db6 <update_measured_velocity>
    	set_velocity(&lb_motor_state, velo);
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	ee07 3a90 	vmov	s15, r3
 8002420:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002424:	eeb0 0a67 	vmov.f32	s0, s15
 8002428:	480b      	ldr	r0, [pc, #44]	; (8002458 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800242a:	f7ff fcb5 	bl	8001d98 <set_velocity>

    	regulate_velocity(&lb_motor);
 800242e:	4808      	ldr	r0, [pc, #32]	; (8002450 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002430:	f7ff fc1a 	bl	8001c68 <regulate_velocity>
    	tick += 1;
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	1c54      	adds	r4, r2, #1
 800243c:	f143 0500 	adc.w	r5, r3, #0
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002442:	e9c3 4500 	strd	r4, r5, [r3]
    }



//  /* USER CODE END Callback 1 */
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bdb0      	pop	{r4, r5, r7, pc}
 800244e:	bf00      	nop
 8002450:	2000055c 	.word	0x2000055c
 8002454:	200005e3 	.word	0x200005e3
 8002458:	200005a8 	.word	0x200005a8
 800245c:	200005e8 	.word	0x200005e8

08002460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002464:	b672      	cpsid	i
}
 8002466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002468:	e7fe      	b.n	8002468 <Error_Handler+0x8>
	...

0800246c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <HAL_MspInit+0x44>)
 8002474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002476:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <HAL_MspInit+0x44>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6613      	str	r3, [r2, #96]	; 0x60
 800247e:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_MspInit+0x44>)
 8002480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <HAL_MspInit+0x44>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	4a08      	ldr	r2, [pc, #32]	; (80024b0 <HAL_MspInit+0x44>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002494:	6593      	str	r3, [r2, #88]	; 0x58
 8002496:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <HAL_MspInit+0x44>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80024a2:	f000 ffb3 	bl	800340c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40021000 	.word	0x40021000

080024b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b0a0      	sub	sp, #128	; 0x80
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024cc:	f107 0318 	add.w	r3, r7, #24
 80024d0:	2254      	movs	r2, #84	; 0x54
 80024d2:	2100      	movs	r1, #0
 80024d4:	4618      	mov	r0, r3
 80024d6:	f006 ffe2 	bl	800949e <memset>
  if(huart->Instance==LPUART1)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a41      	ldr	r2, [pc, #260]	; (80025e4 <HAL_UART_MspInit+0x130>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d13f      	bne.n	8002564 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80024e4:	2320      	movs	r3, #32
 80024e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80024e8:	2300      	movs	r3, #0
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ec:	f107 0318 	add.w	r3, r7, #24
 80024f0:	4618      	mov	r0, r3
 80024f2:	f001 fcfb 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024fc:	f7ff ffb0 	bl	8002460 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002500:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_UART_MspInit+0x134>)
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	4a38      	ldr	r2, [pc, #224]	; (80025e8 <HAL_UART_MspInit+0x134>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800250c:	4b36      	ldr	r3, [pc, #216]	; (80025e8 <HAL_UART_MspInit+0x134>)
 800250e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	617b      	str	r3, [r7, #20]
 8002516:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <HAL_UART_MspInit+0x134>)
 800251a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251c:	4a32      	ldr	r2, [pc, #200]	; (80025e8 <HAL_UART_MspInit+0x134>)
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002524:	4b30      	ldr	r3, [pc, #192]	; (80025e8 <HAL_UART_MspInit+0x134>)
 8002526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002530:	230c      	movs	r3, #12
 8002532:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800253c:	2300      	movs	r3, #0
 800253e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002540:	230c      	movs	r3, #12
 8002542:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002548:	4619      	mov	r1, r3
 800254a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800254e:	f000 fd1f 	bl	8002f90 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	205b      	movs	r0, #91	; 0x5b
 8002558:	f000 fc32 	bl	8002dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800255c:	205b      	movs	r0, #91	; 0x5b
 800255e:	f000 fc49 	bl	8002df4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002562:	e03a      	b.n	80025da <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a20      	ldr	r2, [pc, #128]	; (80025ec <HAL_UART_MspInit+0x138>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d135      	bne.n	80025da <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800256e:	2301      	movs	r3, #1
 8002570:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002576:	f107 0318 	add.w	r3, r7, #24
 800257a:	4618      	mov	r0, r3
 800257c:	f001 fcb6 	bl	8003eec <HAL_RCCEx_PeriphCLKConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002586:	f7ff ff6b 	bl	8002460 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <HAL_UART_MspInit+0x134>)
 800258c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258e:	4a16      	ldr	r2, [pc, #88]	; (80025e8 <HAL_UART_MspInit+0x134>)
 8002590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002594:	6613      	str	r3, [r2, #96]	; 0x60
 8002596:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <HAL_UART_MspInit+0x134>)
 8002598:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_UART_MspInit+0x134>)
 80025a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a6:	4a10      	ldr	r2, [pc, #64]	; (80025e8 <HAL_UART_MspInit+0x134>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_UART_MspInit+0x134>)
 80025b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	60bb      	str	r3, [r7, #8]
 80025b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025ba:	2330      	movs	r3, #48	; 0x30
 80025bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025be:	2302      	movs	r3, #2
 80025c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c2:	2300      	movs	r3, #0
 80025c4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c6:	2300      	movs	r3, #0
 80025c8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ca:	2307      	movs	r3, #7
 80025cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025d2:	4619      	mov	r1, r3
 80025d4:	4806      	ldr	r0, [pc, #24]	; (80025f0 <HAL_UART_MspInit+0x13c>)
 80025d6:	f000 fcdb 	bl	8002f90 <HAL_GPIO_Init>
}
 80025da:	bf00      	nop
 80025dc:	3780      	adds	r7, #128	; 0x80
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40008000 	.word	0x40008000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	40013800 	.word	0x40013800
 80025f0:	48000800 	.word	0x48000800

080025f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_TIM_Base_MspInit+0x68>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d10c      	bne.n	8002620 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <HAL_TIM_Base_MspInit+0x6c>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	4a15      	ldr	r2, [pc, #84]	; (8002660 <HAL_TIM_Base_MspInit+0x6c>)
 800260c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002610:	6613      	str	r3, [r2, #96]	; 0x60
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <HAL_TIM_Base_MspInit+0x6c>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800261e:	e018      	b.n	8002652 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_TIM_Base_MspInit+0x70>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d113      	bne.n	8002652 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800262a:	4b0d      	ldr	r3, [pc, #52]	; (8002660 <HAL_TIM_Base_MspInit+0x6c>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <HAL_TIM_Base_MspInit+0x6c>)
 8002630:	f043 0320 	orr.w	r3, r3, #32
 8002634:	6593      	str	r3, [r2, #88]	; 0x58
 8002636:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <HAL_TIM_Base_MspInit+0x6c>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8002642:	2200      	movs	r2, #0
 8002644:	2100      	movs	r1, #0
 8002646:	2037      	movs	r0, #55	; 0x37
 8002648:	f000 fbba 	bl	8002dc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 800264c:	2037      	movs	r0, #55	; 0x37
 800264e:	f000 fbd1 	bl	8002df4 <HAL_NVIC_EnableIRQ>
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	40012c00 	.word	0x40012c00
 8002660:	40021000 	.word	0x40021000
 8002664:	40001400 	.word	0x40001400

08002668 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b090      	sub	sp, #64	; 0x40
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6c      	ldr	r2, [pc, #432]	; (8002838 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d129      	bne.n	80026de <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800268a:	4b6c      	ldr	r3, [pc, #432]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a6b      	ldr	r2, [pc, #428]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002690:	f043 0302 	orr.w	r3, r3, #2
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
 8002696:	4b69      	ldr	r3, [pc, #420]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	62bb      	str	r3, [r7, #40]	; 0x28
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	4a65      	ldr	r2, [pc, #404]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	627b      	str	r3, [r7, #36]	; 0x24
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80026ba:	2350      	movs	r3, #80	; 0x50
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026be:	2302      	movs	r3, #2
 80026c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c2:	2300      	movs	r3, #0
 80026c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c6:	2300      	movs	r3, #0
 80026c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ca:	2302      	movs	r3, #2
 80026cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026d2:	4619      	mov	r1, r3
 80026d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d8:	f000 fc5a 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026dc:	e0a7      	b.n	800282e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d12a      	bne.n	800273e <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026e8:	4b54      	ldr	r3, [pc, #336]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	4a53      	ldr	r2, [pc, #332]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026ee:	f043 0304 	orr.w	r3, r3, #4
 80026f2:	6593      	str	r3, [r2, #88]	; 0x58
 80026f4:	4b51      	ldr	r3, [pc, #324]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002700:	4b4e      	ldr	r3, [pc, #312]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002704:	4a4d      	ldr	r2, [pc, #308]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270c:	4b4b      	ldr	r3, [pc, #300]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002718:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271e:	2302      	movs	r3, #2
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002722:	2300      	movs	r3, #0
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800272a:	230a      	movs	r3, #10
 800272c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800272e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002732:	4619      	mov	r1, r3
 8002734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002738:	f000 fc2a 	bl	8002f90 <HAL_GPIO_Init>
}
 800273c:	e077      	b.n	800282e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a40      	ldr	r2, [pc, #256]	; (8002844 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d145      	bne.n	80027d4 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002748:	4b3c      	ldr	r3, [pc, #240]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	4a3b      	ldr	r2, [pc, #236]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800274e:	f043 0308 	orr.w	r3, r3, #8
 8002752:	6593      	str	r3, [r2, #88]	; 0x58
 8002754:	4b39      	ldr	r3, [pc, #228]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	61bb      	str	r3, [r7, #24]
 800275e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002760:	4b36      	ldr	r3, [pc, #216]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002764:	4a35      	ldr	r2, [pc, #212]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002766:	f043 0302 	orr.w	r3, r3, #2
 800276a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800276c:	4b33      	ldr	r3, [pc, #204]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800276e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002778:	4b30      	ldr	r3, [pc, #192]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277c:	4a2f      	ldr	r2, [pc, #188]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002790:	2304      	movs	r3, #4
 8002792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002794:	2302      	movs	r3, #2
 8002796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80027a0:	2302      	movs	r3, #2
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a8:	4619      	mov	r1, r3
 80027aa:	4827      	ldr	r0, [pc, #156]	; (8002848 <HAL_TIM_Encoder_MspInit+0x1e0>)
 80027ac:	f000 fbf0 	bl	8002f90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80027b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 80027c2:	2301      	movs	r3, #1
 80027c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ca:	4619      	mov	r1, r3
 80027cc:	481f      	ldr	r0, [pc, #124]	; (800284c <HAL_TIM_Encoder_MspInit+0x1e4>)
 80027ce:	f000 fbdf 	bl	8002f90 <HAL_GPIO_Init>
}
 80027d2:	e02c      	b.n	800282e <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <HAL_TIM_Encoder_MspInit+0x1e8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d127      	bne.n	800282e <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027de:	4b17      	ldr	r3, [pc, #92]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e2:	4a16      	ldr	r2, [pc, #88]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027e8:	6613      	str	r3, [r2, #96]	; 0x60
 80027ea:	4b14      	ldr	r3, [pc, #80]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f6:	4b11      	ldr	r3, [pc, #68]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fa:	4a10      	ldr	r2, [pc, #64]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 80027fc:	f043 0304 	orr.w	r3, r3, #4
 8002800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800280e:	23c0      	movs	r3, #192	; 0xc0
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002812:	2302      	movs	r3, #2
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002816:	2300      	movs	r3, #0
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281a:	2300      	movs	r3, #0
 800281c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800281e:	2304      	movs	r3, #4
 8002820:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002826:	4619      	mov	r1, r3
 8002828:	4808      	ldr	r0, [pc, #32]	; (800284c <HAL_TIM_Encoder_MspInit+0x1e4>)
 800282a:	f000 fbb1 	bl	8002f90 <HAL_GPIO_Init>
}
 800282e:	bf00      	nop
 8002830:	3740      	adds	r7, #64	; 0x40
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	40000400 	.word	0x40000400
 800283c:	40021000 	.word	0x40021000
 8002840:	40000800 	.word	0x40000800
 8002844:	40000c00 	.word	0x40000c00
 8002848:	48000400 	.word	0x48000400
 800284c:	48000800 	.word	0x48000800
 8002850:	40013400 	.word	0x40013400

08002854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b088      	sub	sp, #32
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 030c 	add.w	r3, r7, #12
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <HAL_TIM_MspPostInit+0x64>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d11b      	bne.n	80028ae <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002876:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_TIM_MspPostInit+0x68>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_TIM_MspPostInit+0x68>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002882:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_TIM_MspPostInit+0x68>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	f003 0304 	and.w	r3, r3, #4
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800288e:	230f      	movs	r3, #15
 8002890:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800289e:	2302      	movs	r3, #2
 80028a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a2:	f107 030c 	add.w	r3, r7, #12
 80028a6:	4619      	mov	r1, r3
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <HAL_TIM_MspPostInit+0x6c>)
 80028aa:	f000 fb71 	bl	8002f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80028ae:	bf00      	nop
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	48000800 	.word	0x48000800

080028c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b08c      	sub	sp, #48	; 0x30
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80028cc:	2300      	movs	r3, #0
 80028ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80028d4:	4b2c      	ldr	r3, [pc, #176]	; (8002988 <HAL_InitTick+0xc4>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	4a2b      	ldr	r2, [pc, #172]	; (8002988 <HAL_InitTick+0xc4>)
 80028da:	f043 0310 	orr.w	r3, r3, #16
 80028de:	6593      	str	r3, [r2, #88]	; 0x58
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_InitTick+0xc4>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 0310 	and.w	r3, r3, #16
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80028ec:	f107 020c 	add.w	r2, r7, #12
 80028f0:	f107 0310 	add.w	r3, r7, #16
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f001 fa80 	bl	8003dfc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80028fc:	f001 fa52 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8002900:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002904:	4a21      	ldr	r2, [pc, #132]	; (800298c <HAL_InitTick+0xc8>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	0c9b      	lsrs	r3, r3, #18
 800290c:	3b01      	subs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002910:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_InitTick+0xcc>)
 8002912:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_InitTick+0xd0>)
 8002914:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <HAL_InitTick+0xcc>)
 8002918:	f240 32e7 	movw	r2, #999	; 0x3e7
 800291c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800291e:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <HAL_InitTick+0xcc>)
 8002920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002922:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002924:	4b1a      	ldr	r3, [pc, #104]	; (8002990 <HAL_InitTick+0xcc>)
 8002926:	2200      	movs	r2, #0
 8002928:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_InitTick+0xcc>)
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002930:	4817      	ldr	r0, [pc, #92]	; (8002990 <HAL_InitTick+0xcc>)
 8002932:	f001 fd29 	bl	8004388 <HAL_TIM_Base_Init>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800293c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002940:	2b00      	cmp	r3, #0
 8002942:	d11b      	bne.n	800297c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002944:	4812      	ldr	r0, [pc, #72]	; (8002990 <HAL_InitTick+0xcc>)
 8002946:	f001 fde7 	bl	8004518 <HAL_TIM_Base_Start_IT>
 800294a:	4603      	mov	r3, r0
 800294c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002958:	2036      	movs	r0, #54	; 0x36
 800295a:	f000 fa4b 	bl	8002df4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b0f      	cmp	r3, #15
 8002962:	d808      	bhi.n	8002976 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002964:	2200      	movs	r2, #0
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	2036      	movs	r0, #54	; 0x36
 800296a:	f000 fa29 	bl	8002dc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800296e:	4a0a      	ldr	r2, [pc, #40]	; (8002998 <HAL_InitTick+0xd4>)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	e002      	b.n	800297c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800297c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002980:	4618      	mov	r0, r3
 8002982:	3730      	adds	r7, #48	; 0x30
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40021000 	.word	0x40021000
 800298c:	431bde83 	.word	0x431bde83
 8002990:	200005f0 	.word	0x200005f0
 8002994:	40001000 	.word	0x40001000
 8002998:	20000004 	.word	0x20000004

0800299c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029a0:	e7fe      	b.n	80029a0 <NMI_Handler+0x4>

080029a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a6:	e7fe      	b.n	80029a6 <HardFault_Handler+0x4>

080029a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029ac:	e7fe      	b.n	80029ac <MemManage_Handler+0x4>

080029ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029b2:	e7fe      	b.n	80029b2 <BusFault_Handler+0x4>

080029b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <UsageFault_Handler+0x4>

080029ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <TIM6_DAC_IRQHandler+0x10>)
 80029ce:	f002 f8c3 	bl	8004b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	200005f0 	.word	0x200005f0

080029dc <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <TIM7_DAC_IRQHandler+0x10>)
 80029e2:	f002 f8b9 	bl	8004b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	2000031c 	.word	0x2000031c

080029f0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <LPUART1_IRQHandler+0x10>)
 80029f6:	f003 fb8b 	bl	8006110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000448 	.word	0x20000448

08002a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
	return 1;
 8002a08:	2301      	movs	r3, #1
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <_kill>:

int _kill(int pid, int sig)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a1e:	f006 fd9f 	bl	8009560 <__errno>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2216      	movs	r2, #22
 8002a26:	601a      	str	r2, [r3, #0]
	return -1;
 8002a28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_exit>:

void _exit (int status)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ffe7 	bl	8002a14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a46:	e7fe      	b.n	8002a46 <_exit+0x12>

08002a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e00a      	b.n	8002a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a5a:	f3af 8000 	nop.w
 8002a5e:	4601      	mov	r1, r0
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	b2ca      	uxtb	r2, r1
 8002a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dbf0      	blt.n	8002a5a <_read+0x12>
	}

return len;
 8002a78:	687b      	ldr	r3, [r7, #4]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e009      	b.n	8002aa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	60ba      	str	r2, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbf1      	blt.n	8002a94 <_write+0x12>
	}
	return len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_close>:

int _close(int file)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_isatty>:

int _isatty(int file)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	return 1;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <_sbrk+0x5c>)
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <_sbrk+0x60>)
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b54:	f006 fd04 	bl	8009560 <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <_sbrk+0x64>)
 8002b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20020000 	.word	0x20020000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	2000063c 	.word	0x2000063c
 8002b8c:	20000820 	.word	0x20000820

08002b90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <SystemInit+0x20>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <SystemInit+0x20>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	e000ed00 	.word	0xe000ed00

08002bb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002bb6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bb8:	f7ff ffea 	bl	8002b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bbc:	480c      	ldr	r0, [pc, #48]	; (8002bf0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bbe:	490d      	ldr	r1, [pc, #52]	; (8002bf4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <LoopForever+0xe>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0a      	ldr	r2, [pc, #40]	; (8002bfc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bd4:	4c0a      	ldr	r4, [pc, #40]	; (8002c00 <LoopForever+0x16>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002be2:	f006 fcc3 	bl	800956c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002be6:	f7ff fb17 	bl	8002218 <main>

08002bea <LoopForever>:

LoopForever:
    b LoopForever
 8002bea:	e7fe      	b.n	8002bea <LoopForever>
  ldr   r0, =_estack
 8002bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf4:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002bf8:	0800dad4 	.word	0x0800dad4
  ldr r2, =_sbss
 8002bfc:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002c00:	2000081c 	.word	0x2000081c

08002c04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c04:	e7fe      	b.n	8002c04 <ADC1_2_IRQHandler>

08002c06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c10:	2003      	movs	r0, #3
 8002c12:	f000 f8ca 	bl	8002daa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c16:	200f      	movs	r0, #15
 8002c18:	f7ff fe54 	bl	80028c4 <HAL_InitTick>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	71fb      	strb	r3, [r7, #7]
 8002c26:	e001      	b.n	8002c2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c28:	f7ff fc20 	bl	800246c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c2c:	79fb      	ldrb	r3, [r7, #7]

}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c3c:	4b03      	ldr	r3, [pc, #12]	; (8002c4c <HAL_GetTick+0x14>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 }
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000640 	.word	0x20000640

08002c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c60:	4b0c      	ldr	r3, [pc, #48]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c82:	4a04      	ldr	r2, [pc, #16]	; (8002c94 <__NVIC_SetPriorityGrouping+0x44>)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	60d3      	str	r3, [r2, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	f003 0307 	and.w	r3, r3, #7
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	db0b      	blt.n	8002cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	f003 021f 	and.w	r2, r3, #31
 8002ccc:	4907      	ldr	r1, [pc, #28]	; (8002cec <__NVIC_EnableIRQ+0x38>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000e100 	.word	0xe000e100

08002cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	db0a      	blt.n	8002d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	490c      	ldr	r1, [pc, #48]	; (8002d3c <__NVIC_SetPriority+0x4c>)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	0112      	lsls	r2, r2, #4
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	440b      	add	r3, r1
 8002d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d18:	e00a      	b.n	8002d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <__NVIC_SetPriority+0x50>)
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	3b04      	subs	r3, #4
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	761a      	strb	r2, [r3, #24]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b089      	sub	sp, #36	; 0x24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f003 0307 	and.w	r3, r3, #7
 8002d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f1c3 0307 	rsb	r3, r3, #7
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	bf28      	it	cs
 8002d62:	2304      	movcs	r3, #4
 8002d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	3304      	adds	r3, #4
 8002d6a:	2b06      	cmp	r3, #6
 8002d6c:	d902      	bls.n	8002d74 <NVIC_EncodePriority+0x30>
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	3b03      	subs	r3, #3
 8002d72:	e000      	b.n	8002d76 <NVIC_EncodePriority+0x32>
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d78:	f04f 32ff 	mov.w	r2, #4294967295
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	43da      	mvns	r2, r3
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	401a      	ands	r2, r3
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43d9      	mvns	r1, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d9c:	4313      	orrs	r3, r2
         );
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3724      	adds	r7, #36	; 0x24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7ff ff4c 	bl	8002c50 <__NVIC_SetPriorityGrouping>
}
 8002db8:	bf00      	nop
 8002dba:	3708      	adds	r7, #8
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002dce:	f7ff ff63 	bl	8002c98 <__NVIC_GetPriorityGrouping>
 8002dd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	68b9      	ldr	r1, [r7, #8]
 8002dd8:	6978      	ldr	r0, [r7, #20]
 8002dda:	f7ff ffb3 	bl	8002d44 <NVIC_EncodePriority>
 8002dde:	4602      	mov	r2, r0
 8002de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff ff82 	bl	8002cf0 <__NVIC_SetPriority>
}
 8002dec:	bf00      	nop
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7ff ff56 	bl	8002cb4 <__NVIC_EnableIRQ>
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d005      	beq.n	8002e34 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2204      	movs	r2, #4
 8002e2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	73fb      	strb	r3, [r7, #15]
 8002e32:	e037      	b.n	8002ea4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 020e 	bic.w	r2, r2, #14
 8002e42:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e52:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0201 	bic.w	r2, r2, #1
 8002e62:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	f003 021f 	and.w	r2, r3, #31
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	2101      	movs	r1, #1
 8002e72:	fa01 f202 	lsl.w	r2, r1, r2
 8002e76:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e80:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e98:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ea2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2204      	movs	r2, #4
 8002ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	e047      	b.n	8002f86 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 020e 	bic.w	r2, r2, #14
 8002f04:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0201 	bic.w	r2, r2, #1
 8002f14:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f003 021f 	and.w	r2, r3, #31
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	2101      	movs	r1, #1
 8002f34:	fa01 f202 	lsl.w	r2, r1, r2
 8002f38:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f42:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00c      	beq.n	8002f66 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f64:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	4798      	blx	r3
    }
  }
  return status;
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f9e:	e15a      	b.n	8003256 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	4013      	ands	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 814c 	beq.w	8003250 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d005      	beq.n	8002fd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d130      	bne.n	8003032 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68da      	ldr	r2, [r3, #12]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003006:	2201      	movs	r2, #1
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43db      	mvns	r3, r3
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	4013      	ands	r3, r2
 8003014:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 0201 	and.w	r2, r3, #1
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b03      	cmp	r3, #3
 800303c:	d017      	beq.n	800306e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	2203      	movs	r2, #3
 800304a:	fa02 f303 	lsl.w	r3, r2, r3
 800304e:	43db      	mvns	r3, r3
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	4013      	ands	r3, r2
 8003054:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0303 	and.w	r3, r3, #3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d123      	bne.n	80030c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	08da      	lsrs	r2, r3, #3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3208      	adds	r2, #8
 8003082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003086:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	220f      	movs	r2, #15
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	08da      	lsrs	r2, r3, #3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3208      	adds	r2, #8
 80030bc:	6939      	ldr	r1, [r7, #16]
 80030be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	2203      	movs	r2, #3
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	43db      	mvns	r3, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4013      	ands	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 0203 	and.w	r2, r3, #3
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80a6 	beq.w	8003250 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003104:	4b5b      	ldr	r3, [pc, #364]	; (8003274 <HAL_GPIO_Init+0x2e4>)
 8003106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003108:	4a5a      	ldr	r2, [pc, #360]	; (8003274 <HAL_GPIO_Init+0x2e4>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6613      	str	r3, [r2, #96]	; 0x60
 8003110:	4b58      	ldr	r3, [pc, #352]	; (8003274 <HAL_GPIO_Init+0x2e4>)
 8003112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
 800311a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800311c:	4a56      	ldr	r2, [pc, #344]	; (8003278 <HAL_GPIO_Init+0x2e8>)
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	089b      	lsrs	r3, r3, #2
 8003122:	3302      	adds	r3, #2
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	220f      	movs	r2, #15
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003146:	d01f      	beq.n	8003188 <HAL_GPIO_Init+0x1f8>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a4c      	ldr	r2, [pc, #304]	; (800327c <HAL_GPIO_Init+0x2ec>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d019      	beq.n	8003184 <HAL_GPIO_Init+0x1f4>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a4b      	ldr	r2, [pc, #300]	; (8003280 <HAL_GPIO_Init+0x2f0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d013      	beq.n	8003180 <HAL_GPIO_Init+0x1f0>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a4a      	ldr	r2, [pc, #296]	; (8003284 <HAL_GPIO_Init+0x2f4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d00d      	beq.n	800317c <HAL_GPIO_Init+0x1ec>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a49      	ldr	r2, [pc, #292]	; (8003288 <HAL_GPIO_Init+0x2f8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d007      	beq.n	8003178 <HAL_GPIO_Init+0x1e8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a48      	ldr	r2, [pc, #288]	; (800328c <HAL_GPIO_Init+0x2fc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <HAL_GPIO_Init+0x1e4>
 8003170:	2305      	movs	r3, #5
 8003172:	e00a      	b.n	800318a <HAL_GPIO_Init+0x1fa>
 8003174:	2306      	movs	r3, #6
 8003176:	e008      	b.n	800318a <HAL_GPIO_Init+0x1fa>
 8003178:	2304      	movs	r3, #4
 800317a:	e006      	b.n	800318a <HAL_GPIO_Init+0x1fa>
 800317c:	2303      	movs	r3, #3
 800317e:	e004      	b.n	800318a <HAL_GPIO_Init+0x1fa>
 8003180:	2302      	movs	r3, #2
 8003182:	e002      	b.n	800318a <HAL_GPIO_Init+0x1fa>
 8003184:	2301      	movs	r3, #1
 8003186:	e000      	b.n	800318a <HAL_GPIO_Init+0x1fa>
 8003188:	2300      	movs	r3, #0
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	f002 0203 	and.w	r2, r2, #3
 8003190:	0092      	lsls	r2, r2, #2
 8003192:	4093      	lsls	r3, r2
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800319a:	4937      	ldr	r1, [pc, #220]	; (8003278 <HAL_GPIO_Init+0x2e8>)
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	089b      	lsrs	r3, r3, #2
 80031a0:	3302      	adds	r3, #2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031a8:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_GPIO_Init+0x300>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	43db      	mvns	r3, r3
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	4013      	ands	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031cc:	4a30      	ldr	r2, [pc, #192]	; (8003290 <HAL_GPIO_Init+0x300>)
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031d2:	4b2f      	ldr	r3, [pc, #188]	; (8003290 <HAL_GPIO_Init+0x300>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031f6:	4a26      	ldr	r2, [pc, #152]	; (8003290 <HAL_GPIO_Init+0x300>)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <HAL_GPIO_Init+0x300>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	43db      	mvns	r3, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4013      	ands	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003220:	4a1b      	ldr	r2, [pc, #108]	; (8003290 <HAL_GPIO_Init+0x300>)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003226:	4b1a      	ldr	r3, [pc, #104]	; (8003290 <HAL_GPIO_Init+0x300>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	43db      	mvns	r3, r3
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	4013      	ands	r3, r2
 8003234:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800324a:	4a11      	ldr	r2, [pc, #68]	; (8003290 <HAL_GPIO_Init+0x300>)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3301      	adds	r3, #1
 8003254:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	f47f ae9d 	bne.w	8002fa0 <HAL_GPIO_Init+0x10>
  }
}
 8003266:	bf00      	nop
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	40021000 	.word	0x40021000
 8003278:	40010000 	.word	0x40010000
 800327c:	48000400 	.word	0x48000400
 8003280:	48000800 	.word	0x48000800
 8003284:	48000c00 	.word	0x48000c00
 8003288:	48001000 	.word	0x48001000
 800328c:	48001400 	.word	0x48001400
 8003290:	40010400 	.word	0x40010400

08003294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]
 80032a0:	4613      	mov	r3, r2
 80032a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032a4:	787b      	ldrb	r3, [r7, #1]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80032aa:	887a      	ldrh	r2, [r7, #2]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80032b0:	e002      	b.n	80032b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d141      	bne.n	8003356 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032d2:	4b4b      	ldr	r3, [pc, #300]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032de:	d131      	bne.n	8003344 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032e0:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e6:	4a46      	ldr	r2, [pc, #280]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032f0:	4b43      	ldr	r3, [pc, #268]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032f8:	4a41      	ldr	r2, [pc, #260]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003300:	4b40      	ldr	r3, [pc, #256]	; (8003404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2232      	movs	r2, #50	; 0x32
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800330c:	fba2 2303 	umull	r2, r3, r2, r3
 8003310:	0c9b      	lsrs	r3, r3, #18
 8003312:	3301      	adds	r3, #1
 8003314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003316:	e002      	b.n	800331e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3b01      	subs	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800331e:	4b38      	ldr	r3, [pc, #224]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800332a:	d102      	bne.n	8003332 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f2      	bne.n	8003318 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003332:	4b33      	ldr	r3, [pc, #204]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800333a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800333e:	d158      	bne.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e057      	b.n	80033f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003346:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334a:	4a2d      	ldr	r2, [pc, #180]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003350:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003354:	e04d      	b.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335c:	d141      	bne.n	80033e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800335e:	4b28      	ldr	r3, [pc, #160]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003366:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800336a:	d131      	bne.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800336c:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003372:	4a23      	ldr	r2, [pc, #140]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800337c:	4b20      	ldr	r3, [pc, #128]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003384:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003386:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800338a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2232      	movs	r2, #50	; 0x32
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4a1c      	ldr	r2, [pc, #112]	; (8003408 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	0c9b      	lsrs	r3, r3, #18
 800339e:	3301      	adds	r3, #1
 80033a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033a2:	e002      	b.n	80033aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033aa:	4b15      	ldr	r3, [pc, #84]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b6:	d102      	bne.n	80033be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f2      	bne.n	80033a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033be:	4b10      	ldr	r3, [pc, #64]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ca:	d112      	bne.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e011      	b.n	80033f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80033e0:	e007      	b.n	80033f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033ea:	4a05      	ldr	r2, [pc, #20]	; (8003400 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40007000 	.word	0x40007000
 8003404:	20000000 	.word	0x20000000
 8003408:	431bde83 	.word	0x431bde83

0800340c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003410:	4b05      	ldr	r3, [pc, #20]	; (8003428 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	4a04      	ldr	r2, [pc, #16]	; (8003428 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800341a:	6093      	str	r3, [r2, #8]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40007000 	.word	0x40007000

0800342c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d101      	bne.n	800343e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e2fe      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	2b00      	cmp	r3, #0
 8003448:	d075      	beq.n	8003536 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800344a:	4b97      	ldr	r3, [pc, #604]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003454:	4b94      	ldr	r3, [pc, #592]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	2b0c      	cmp	r3, #12
 8003462:	d102      	bne.n	800346a <HAL_RCC_OscConfig+0x3e>
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b03      	cmp	r3, #3
 8003468:	d002      	beq.n	8003470 <HAL_RCC_OscConfig+0x44>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d10b      	bne.n	8003488 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003470:	4b8d      	ldr	r3, [pc, #564]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d05b      	beq.n	8003534 <HAL_RCC_OscConfig+0x108>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d157      	bne.n	8003534 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e2d9      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003490:	d106      	bne.n	80034a0 <HAL_RCC_OscConfig+0x74>
 8003492:	4b85      	ldr	r3, [pc, #532]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a84      	ldr	r2, [pc, #528]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e01d      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCC_OscConfig+0x98>
 80034aa:	4b7f      	ldr	r3, [pc, #508]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a7e      	ldr	r2, [pc, #504]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	4b7c      	ldr	r3, [pc, #496]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7b      	ldr	r2, [pc, #492]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80034bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	e00b      	b.n	80034dc <HAL_RCC_OscConfig+0xb0>
 80034c4:	4b78      	ldr	r3, [pc, #480]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a77      	ldr	r2, [pc, #476]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	4b75      	ldr	r3, [pc, #468]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a74      	ldr	r2, [pc, #464]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80034d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d013      	beq.n	800350c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7ff fba8 	bl	8002c38 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ec:	f7ff fba4 	bl	8002c38 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e29e      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034fe:	4b6a      	ldr	r3, [pc, #424]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f0      	beq.n	80034ec <HAL_RCC_OscConfig+0xc0>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7ff fb94 	bl	8002c38 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003514:	f7ff fb90 	bl	8002c38 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b64      	cmp	r3, #100	; 0x64
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e28a      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003526:	4b60      	ldr	r3, [pc, #384]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0xe8>
 8003532:	e000      	b.n	8003536 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d075      	beq.n	800362e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003542:	4b59      	ldr	r3, [pc, #356]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	f003 030c 	and.w	r3, r3, #12
 800354a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800354c:	4b56      	ldr	r3, [pc, #344]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0303 	and.w	r3, r3, #3
 8003554:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	2b0c      	cmp	r3, #12
 800355a:	d102      	bne.n	8003562 <HAL_RCC_OscConfig+0x136>
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d002      	beq.n	8003568 <HAL_RCC_OscConfig+0x13c>
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b04      	cmp	r3, #4
 8003566:	d11f      	bne.n	80035a8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003568:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d005      	beq.n	8003580 <HAL_RCC_OscConfig+0x154>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e25d      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003580:	4b49      	ldr	r3, [pc, #292]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	4946      	ldr	r1, [pc, #280]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003590:	4313      	orrs	r3, r2
 8003592:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003594:	4b45      	ldr	r3, [pc, #276]	; (80036ac <HAL_RCC_OscConfig+0x280>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff f993 	bl	80028c4 <HAL_InitTick>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d043      	beq.n	800362c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e249      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b0:	4b3d      	ldr	r3, [pc, #244]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a3c      	ldr	r2, [pc, #240]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80035b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7ff fb3c 	bl	8002c38 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c4:	f7ff fb38 	bl	8002c38 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e232      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d6:	4b34      	ldr	r3, [pc, #208]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	061b      	lsls	r3, r3, #24
 80035f0:	492d      	ldr	r1, [pc, #180]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]
 80035f6:	e01a      	b.n	800362e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f8:	4b2b      	ldr	r3, [pc, #172]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a2a      	ldr	r2, [pc, #168]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 80035fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003602:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003604:	f7ff fb18 	bl	8002c38 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800360c:	f7ff fb14 	bl	8002c38 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b02      	cmp	r3, #2
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e20e      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800361e:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1f0      	bne.n	800360c <HAL_RCC_OscConfig+0x1e0>
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800362c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	d041      	beq.n	80036be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01c      	beq.n	800367c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003642:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003648:	4a17      	ldr	r2, [pc, #92]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003652:	f7ff faf1 	bl	8002c38 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003658:	e008      	b.n	800366c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365a:	f7ff faed 	bl	8002c38 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	2b02      	cmp	r3, #2
 8003666:	d901      	bls.n	800366c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e1e7      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 800366e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ef      	beq.n	800365a <HAL_RCC_OscConfig+0x22e>
 800367a:	e020      	b.n	80036be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800367c:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 800367e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003682:	4a09      	ldr	r2, [pc, #36]	; (80036a8 <HAL_RCC_OscConfig+0x27c>)
 8003684:	f023 0301 	bic.w	r3, r3, #1
 8003688:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7ff fad4 	bl	8002c38 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003692:	e00d      	b.n	80036b0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003694:	f7ff fad0 	bl	8002c38 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d906      	bls.n	80036b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e1ca      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036b0:	4b8c      	ldr	r3, [pc, #560]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1ea      	bne.n	8003694 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80a6 	beq.w	8003818 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036cc:	2300      	movs	r3, #0
 80036ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80036d0:	4b84      	ldr	r3, [pc, #528]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80036d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d101      	bne.n	80036e0 <HAL_RCC_OscConfig+0x2b4>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <HAL_RCC_OscConfig+0x2b6>
 80036e0:	2300      	movs	r3, #0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e6:	4b7f      	ldr	r3, [pc, #508]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ea:	4a7e      	ldr	r2, [pc, #504]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80036ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6593      	str	r3, [r2, #88]	; 0x58
 80036f2:	4b7c      	ldr	r3, [pc, #496]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80036f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80036fe:	2301      	movs	r3, #1
 8003700:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003702:	4b79      	ldr	r3, [pc, #484]	; (80038e8 <HAL_RCC_OscConfig+0x4bc>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	2b00      	cmp	r3, #0
 800370c:	d118      	bne.n	8003740 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800370e:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <HAL_RCC_OscConfig+0x4bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a75      	ldr	r2, [pc, #468]	; (80038e8 <HAL_RCC_OscConfig+0x4bc>)
 8003714:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003718:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371a:	f7ff fa8d 	bl	8002c38 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7ff fa89 	bl	8002c38 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e183      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003734:	4b6c      	ldr	r3, [pc, #432]	; (80038e8 <HAL_RCC_OscConfig+0x4bc>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d0f0      	beq.n	8003722 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d108      	bne.n	800375a <HAL_RCC_OscConfig+0x32e>
 8003748:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003750:	f043 0301 	orr.w	r3, r3, #1
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003758:	e024      	b.n	80037a4 <HAL_RCC_OscConfig+0x378>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	2b05      	cmp	r3, #5
 8003760:	d110      	bne.n	8003784 <HAL_RCC_OscConfig+0x358>
 8003762:	4b60      	ldr	r3, [pc, #384]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003768:	4a5e      	ldr	r2, [pc, #376]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 800376a:	f043 0304 	orr.w	r3, r3, #4
 800376e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003772:	4b5c      	ldr	r3, [pc, #368]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003778:	4a5a      	ldr	r2, [pc, #360]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003782:	e00f      	b.n	80037a4 <HAL_RCC_OscConfig+0x378>
 8003784:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	4a56      	ldr	r2, [pc, #344]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 800378c:	f023 0301 	bic.w	r3, r3, #1
 8003790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	4a52      	ldr	r2, [pc, #328]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 800379c:	f023 0304 	bic.w	r3, r3, #4
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d016      	beq.n	80037da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7ff fa44 	bl	8002c38 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7ff fa40 	bl	8002c38 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e138      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037ca:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80037cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ed      	beq.n	80037b4 <HAL_RCC_OscConfig+0x388>
 80037d8:	e015      	b.n	8003806 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037da:	f7ff fa2d 	bl	8002c38 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7ff fa29 	bl	8002c38 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e121      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f8:	4b3a      	ldr	r3, [pc, #232]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d1ed      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003806:	7ffb      	ldrb	r3, [r7, #31]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d105      	bne.n	8003818 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380c:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 800380e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003810:	4a34      	ldr	r2, [pc, #208]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003812:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003816:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0320 	and.w	r3, r3, #32
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03c      	beq.n	800389e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d01c      	beq.n	8003866 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800382c:	4b2d      	ldr	r3, [pc, #180]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 800382e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003832:	4a2c      	ldr	r2, [pc, #176]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003834:	f043 0301 	orr.w	r3, r3, #1
 8003838:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383c:	f7ff f9fc 	bl	8002c38 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003844:	f7ff f9f8 	bl	8002c38 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e0f2      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003856:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003858:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0ef      	beq.n	8003844 <HAL_RCC_OscConfig+0x418>
 8003864:	e01b      	b.n	800389e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003866:	4b1f      	ldr	r3, [pc, #124]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800386c:	4a1d      	ldr	r2, [pc, #116]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003876:	f7ff f9df 	bl	8002c38 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800387e:	f7ff f9db 	bl	8002c38 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e0d5      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 8003892:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1ef      	bne.n	800387e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80c9 	beq.w	8003a3a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038a8:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	2b0c      	cmp	r3, #12
 80038b2:	f000 8083 	beq.w	80039bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d15e      	bne.n	800397c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a08      	ldr	r2, [pc, #32]	; (80038e4 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ca:	f7ff f9b5 	bl	8002c38 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d0:	e00c      	b.n	80038ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d2:	f7ff f9b1 	bl	8002c38 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d905      	bls.n	80038ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0ab      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
 80038e4:	40021000 	.word	0x40021000
 80038e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ec:	4b55      	ldr	r3, [pc, #340]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1ec      	bne.n	80038d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f8:	4b52      	ldr	r3, [pc, #328]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	4b52      	ldr	r3, [pc, #328]	; (8003a48 <HAL_RCC_OscConfig+0x61c>)
 80038fe:	4013      	ands	r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6a11      	ldr	r1, [r2, #32]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003908:	3a01      	subs	r2, #1
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	4311      	orrs	r1, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003912:	0212      	lsls	r2, r2, #8
 8003914:	4311      	orrs	r1, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800391a:	0852      	lsrs	r2, r2, #1
 800391c:	3a01      	subs	r2, #1
 800391e:	0552      	lsls	r2, r2, #21
 8003920:	4311      	orrs	r1, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003926:	0852      	lsrs	r2, r2, #1
 8003928:	3a01      	subs	r2, #1
 800392a:	0652      	lsls	r2, r2, #25
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003932:	06d2      	lsls	r2, r2, #27
 8003934:	430a      	orrs	r2, r1
 8003936:	4943      	ldr	r1, [pc, #268]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 8003938:	4313      	orrs	r3, r2
 800393a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800393c:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a40      	ldr	r2, [pc, #256]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 8003942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003946:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003948:	4b3e      	ldr	r3, [pc, #248]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a3d      	ldr	r2, [pc, #244]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003952:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003954:	f7ff f970 	bl	8002c38 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7ff f96c 	bl	8002c38 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e066      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396e:	4b35      	ldr	r3, [pc, #212]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x530>
 800397a:	e05e      	b.n	8003a3a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397c:	4b31      	ldr	r3, [pc, #196]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a30      	ldr	r2, [pc, #192]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 8003982:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003986:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003988:	f7ff f956 	bl	8002c38 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003990:	f7ff f952 	bl	8002c38 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e04c      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a2:	4b28      	ldr	r3, [pc, #160]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80039ae:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	4924      	ldr	r1, [pc, #144]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 80039b4:	4b25      	ldr	r3, [pc, #148]	; (8003a4c <HAL_RCC_OscConfig+0x620>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
 80039ba:	e03e      	b.n	8003a3a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e039      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80039c8:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCC_OscConfig+0x618>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	f003 0203 	and.w	r2, r3, #3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d12c      	bne.n	8003a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	3b01      	subs	r3, #1
 80039e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d123      	bne.n	8003a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d11b      	bne.n	8003a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d113      	bne.n	8003a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d109      	bne.n	8003a36 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	085b      	lsrs	r3, r3, #1
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d001      	beq.n	8003a3a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e000      	b.n	8003a3c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3720      	adds	r7, #32
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	019f800c 	.word	0x019f800c
 8003a4c:	feeefffc 	.word	0xfeeefffc

08003a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d101      	bne.n	8003a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e11e      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a68:	4b91      	ldr	r3, [pc, #580]	; (8003cb0 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d910      	bls.n	8003a98 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a76:	4b8e      	ldr	r3, [pc, #568]	; (8003cb0 <HAL_RCC_ClockConfig+0x260>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f023 020f 	bic.w	r2, r3, #15
 8003a7e:	498c      	ldr	r1, [pc, #560]	; (8003cb0 <HAL_RCC_ClockConfig+0x260>)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a86:	4b8a      	ldr	r3, [pc, #552]	; (8003cb0 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 030f 	and.w	r3, r3, #15
 8003a8e:	683a      	ldr	r2, [r7, #0]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d001      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e106      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d073      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d129      	bne.n	8003b00 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aac:	4b81      	ldr	r3, [pc, #516]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0f4      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003abc:	f000 f9d0 	bl	8003e60 <RCC_GetSysClockFreqFromPLLSource>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4a7c      	ldr	r2, [pc, #496]	; (8003cb8 <HAL_RCC_ClockConfig+0x268>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d93f      	bls.n	8003b4a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003aca:	4b7a      	ldr	r3, [pc, #488]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d009      	beq.n	8003aea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d033      	beq.n	8003b4a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d12f      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003aea:	4b72      	ldr	r3, [pc, #456]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003af2:	4a70      	ldr	r2, [pc, #448]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	617b      	str	r3, [r7, #20]
 8003afe:	e024      	b.n	8003b4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d107      	bne.n	8003b18 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b08:	4b6a      	ldr	r3, [pc, #424]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d109      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e0c6      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b18:	4b66      	ldr	r3, [pc, #408]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d101      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0be      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003b28:	f000 f8ce 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8003b2c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4a61      	ldr	r2, [pc, #388]	; (8003cb8 <HAL_RCC_ClockConfig+0x268>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d909      	bls.n	8003b4a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b36:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b3e:	4a5d      	ldr	r2, [pc, #372]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b44:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b4a:	4b5a      	ldr	r3, [pc, #360]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4957      	ldr	r1, [pc, #348]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5c:	f7ff f86c 	bl	8002c38 <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7ff f868 	bl	8002c38 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e095      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	4b4e      	ldr	r3, [pc, #312]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 020c 	and.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1eb      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d023      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d005      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	4a42      	ldr	r2, [pc, #264]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003baa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003bbc:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003bc4:	4a3b      	ldr	r2, [pc, #236]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003bc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bcc:	4b39      	ldr	r3, [pc, #228]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4936      	ldr	r1, [pc, #216]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	2b80      	cmp	r3, #128	; 0x80
 8003be4:	d105      	bne.n	8003bf2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003be6:	4b33      	ldr	r3, [pc, #204]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	4a32      	ldr	r2, [pc, #200]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bf0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf2:	4b2f      	ldr	r3, [pc, #188]	; (8003cb0 <HAL_RCC_ClockConfig+0x260>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d21d      	bcs.n	8003c3c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c00:	4b2b      	ldr	r3, [pc, #172]	; (8003cb0 <HAL_RCC_ClockConfig+0x260>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 020f 	bic.w	r2, r3, #15
 8003c08:	4929      	ldr	r1, [pc, #164]	; (8003cb0 <HAL_RCC_ClockConfig+0x260>)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c10:	f7ff f812 	bl	8002c38 <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	e00a      	b.n	8003c2e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c18:	f7ff f80e 	bl	8002c38 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e03b      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_RCC_ClockConfig+0x260>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d1ed      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4917      	ldr	r1, [pc, #92]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0308 	and.w	r3, r3, #8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d009      	beq.n	8003c7a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	490f      	ldr	r1, [pc, #60]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c7a:	f000 f825 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_RCC_ClockConfig+0x264>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	091b      	lsrs	r3, r3, #4
 8003c86:	f003 030f 	and.w	r3, r3, #15
 8003c8a:	490c      	ldr	r1, [pc, #48]	; (8003cbc <HAL_RCC_ClockConfig+0x26c>)
 8003c8c:	5ccb      	ldrb	r3, [r1, r3]
 8003c8e:	f003 031f 	and.w	r3, r3, #31
 8003c92:	fa22 f303 	lsr.w	r3, r2, r3
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <HAL_RCC_ClockConfig+0x270>)
 8003c98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_RCC_ClockConfig+0x274>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe fe10 	bl	80028c4 <HAL_InitTick>
 8003ca4:	4603      	mov	r3, r0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40022000 	.word	0x40022000
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	04c4b400 	.word	0x04c4b400
 8003cbc:	0800d63c 	.word	0x0800d63c
 8003cc0:	20000000 	.word	0x20000000
 8003cc4:	20000004 	.word	0x20000004

08003cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b087      	sub	sp, #28
 8003ccc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003cce:	4b2c      	ldr	r3, [pc, #176]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d102      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cda:	4b2a      	ldr	r3, [pc, #168]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cdc:	613b      	str	r3, [r7, #16]
 8003cde:	e047      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ce0:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 030c 	and.w	r3, r3, #12
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d102      	bne.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	e03e      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003cf2:	4b23      	ldr	r3, [pc, #140]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b0c      	cmp	r3, #12
 8003cfc:	d136      	bne.n	8003d6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cfe:	4b20      	ldr	r3, [pc, #128]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d08:	4b1d      	ldr	r3, [pc, #116]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	091b      	lsrs	r3, r3, #4
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	3301      	adds	r3, #1
 8003d14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b03      	cmp	r3, #3
 8003d1a:	d10c      	bne.n	8003d36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d1c:	4a1a      	ldr	r2, [pc, #104]	; (8003d88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	4a16      	ldr	r2, [pc, #88]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d26:	68d2      	ldr	r2, [r2, #12]
 8003d28:	0a12      	lsrs	r2, r2, #8
 8003d2a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d2e:	fb02 f303 	mul.w	r3, r2, r3
 8003d32:	617b      	str	r3, [r7, #20]
      break;
 8003d34:	e00c      	b.n	8003d50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d36:	4a13      	ldr	r2, [pc, #76]	; (8003d84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	4a10      	ldr	r2, [pc, #64]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d40:	68d2      	ldr	r2, [r2, #12]
 8003d42:	0a12      	lsrs	r2, r2, #8
 8003d44:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	617b      	str	r3, [r7, #20]
      break;
 8003d4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	0e5b      	lsrs	r3, r3, #25
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d68:	613b      	str	r3, [r7, #16]
 8003d6a:	e001      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d70:	693b      	ldr	r3, [r7, #16]
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40021000 	.word	0x40021000
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	016e3600 	.word	0x016e3600

08003d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000000 	.word	0x20000000

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4904      	ldr	r1, [pc, #16]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	0800d64c 	.word	0x0800d64c

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dd4:	f7ff ffda 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0adb      	lsrs	r3, r3, #11
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4904      	ldr	r1, [pc, #16]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	0800d64c 	.word	0x0800d64c

08003dfc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	220f      	movs	r2, #15
 8003e0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003e0c:	4b12      	ldr	r3, [pc, #72]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003e24:	4b0c      	ldr	r3, [pc, #48]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	08db      	lsrs	r3, r3, #3
 8003e36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <HAL_RCC_GetClockConfig+0x60>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 020f 	and.w	r2, r3, #15
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	601a      	str	r2, [r3, #0]
}
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40022000 	.word	0x40022000

08003e60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e66:	4b1e      	ldr	r3, [pc, #120]	; (8003ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	; (8003ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	2b03      	cmp	r3, #3
 8003e82:	d10c      	bne.n	8003e9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e84:	4a17      	ldr	r2, [pc, #92]	; (8003ee4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	4a14      	ldr	r2, [pc, #80]	; (8003ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e8e:	68d2      	ldr	r2, [r2, #12]
 8003e90:	0a12      	lsrs	r2, r2, #8
 8003e92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	617b      	str	r3, [r7, #20]
    break;
 8003e9c:	e00c      	b.n	8003eb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003e9e:	4a12      	ldr	r2, [pc, #72]	; (8003ee8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	4a0e      	ldr	r2, [pc, #56]	; (8003ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ea8:	68d2      	ldr	r2, [r2, #12]
 8003eaa:	0a12      	lsrs	r2, r2, #8
 8003eac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003eb0:	fb02 f303 	mul.w	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
    break;
 8003eb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003eb8:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	0e5b      	lsrs	r3, r3, #25
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003ed2:	687b      	ldr	r3, [r7, #4]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	016e3600 	.word	0x016e3600
 8003ee8:	00f42400 	.word	0x00f42400

08003eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ef8:	2300      	movs	r3, #0
 8003efa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8098 	beq.w	800403a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0e:	4b43      	ldr	r3, [pc, #268]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10d      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	4b40      	ldr	r3, [pc, #256]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	4a3f      	ldr	r2, [pc, #252]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f24:	6593      	str	r3, [r2, #88]	; 0x58
 8003f26:	4b3d      	ldr	r3, [pc, #244]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	60bb      	str	r3, [r7, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f32:	2301      	movs	r3, #1
 8003f34:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f36:	4b3a      	ldr	r3, [pc, #232]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a39      	ldr	r2, [pc, #228]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f42:	f7fe fe79 	bl	8002c38 <HAL_GetTick>
 8003f46:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f48:	e009      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f4a:	f7fe fe75 	bl	8002c38 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d902      	bls.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	74fb      	strb	r3, [r7, #19]
        break;
 8003f5c:	e005      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003f5e:	4b30      	ldr	r3, [pc, #192]	; (8004020 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d0ef      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d159      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f70:	4b2a      	ldr	r3, [pc, #168]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f7a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01e      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d019      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f8c:	4b23      	ldr	r3, [pc, #140]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f98:	4b20      	ldr	r3, [pc, #128]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f9e:	4a1f      	ldr	r2, [pc, #124]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fa8:	4b1c      	ldr	r3, [pc, #112]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fae:	4a1b      	ldr	r2, [pc, #108]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fb8:	4a18      	ldr	r2, [pc, #96]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d016      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fe fe35 	bl	8002c38 <HAL_GetTick>
 8003fce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd0:	e00b      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd2:	f7fe fe31 	bl	8002c38 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d902      	bls.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fe8:	e006      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fea:	4b0c      	ldr	r3, [pc, #48]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ec      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ffe:	4b07      	ldr	r3, [pc, #28]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800400c:	4903      	ldr	r1, [pc, #12]	; (800401c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004014:	e008      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004016:	7cfb      	ldrb	r3, [r7, #19]
 8004018:	74bb      	strb	r3, [r7, #18]
 800401a:	e005      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800401c:	40021000 	.word	0x40021000
 8004020:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004024:	7cfb      	ldrb	r3, [r7, #19]
 8004026:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004028:	7c7b      	ldrb	r3, [r7, #17]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d105      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402e:	4ba7      	ldr	r3, [pc, #668]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004032:	4aa6      	ldr	r2, [pc, #664]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004038:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004046:	4ba1      	ldr	r3, [pc, #644]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f023 0203 	bic.w	r2, r3, #3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	499d      	ldr	r1, [pc, #628]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004068:	4b98      	ldr	r3, [pc, #608]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f023 020c 	bic.w	r2, r3, #12
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	4995      	ldr	r1, [pc, #596]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800408a:	4b90      	ldr	r3, [pc, #576]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	498c      	ldr	r1, [pc, #560]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040ac:	4b87      	ldr	r3, [pc, #540]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	4984      	ldr	r1, [pc, #528]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ce:	4b7f      	ldr	r3, [pc, #508]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	497b      	ldr	r1, [pc, #492]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0320 	and.w	r3, r3, #32
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040f0:	4b76      	ldr	r3, [pc, #472]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	4973      	ldr	r1, [pc, #460]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004112:	4b6e      	ldr	r3, [pc, #440]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	496a      	ldr	r1, [pc, #424]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004134:	4b65      	ldr	r3, [pc, #404]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	4962      	ldr	r1, [pc, #392]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004156:	4b5d      	ldr	r3, [pc, #372]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	4959      	ldr	r1, [pc, #356]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004178:	4b54      	ldr	r3, [pc, #336]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800417e:	f023 0203 	bic.w	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	4951      	ldr	r1, [pc, #324]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800419a:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	4948      	ldr	r1, [pc, #288]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d015      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041bc:	4b43      	ldr	r3, [pc, #268]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	4940      	ldr	r1, [pc, #256]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041da:	d105      	bne.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041dc:	4b3b      	ldr	r3, [pc, #236]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4a3a      	ldr	r2, [pc, #232]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d015      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041f4:	4b35      	ldr	r3, [pc, #212]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	4932      	ldr	r1, [pc, #200]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004204:	4313      	orrs	r3, r2
 8004206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004212:	d105      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004214:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4a2c      	ldr	r2, [pc, #176]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800421e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d015      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800422c:	4b27      	ldr	r3, [pc, #156]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423a:	4924      	ldr	r1, [pc, #144]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800424c:	4b1f      	ldr	r3, [pc, #124]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	4a1e      	ldr	r2, [pc, #120]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004256:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004264:	4b19      	ldr	r3, [pc, #100]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004272:	4916      	ldr	r1, [pc, #88]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004282:	d105      	bne.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a10      	ldr	r2, [pc, #64]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d019      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800429c:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	4908      	ldr	r1, [pc, #32]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ba:	d109      	bne.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4a02      	ldr	r2, [pc, #8]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042c6:	60d3      	str	r3, [r2, #12]
 80042c8:	e002      	b.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d015      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042dc:	4b29      	ldr	r3, [pc, #164]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	4926      	ldr	r1, [pc, #152]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fa:	d105      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80042fc:	4b21      	ldr	r3, [pc, #132]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	4a20      	ldr	r2, [pc, #128]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004306:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d015      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800431a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004322:	4918      	ldr	r1, [pc, #96]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004332:	d105      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004334:	4b13      	ldr	r3, [pc, #76]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4a12      	ldr	r2, [pc, #72]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800433a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800434e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004352:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800435a:	490a      	ldr	r1, [pc, #40]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004366:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800436a:	d105      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800436c:	4b05      	ldr	r3, [pc, #20]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	4a04      	ldr	r2, [pc, #16]	; (8004384 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004372:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004376:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004378:	7cbb      	ldrb	r3, [r7, #18]
}
 800437a:	4618      	mov	r0, r3
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000

08004388 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e049      	b.n	800442e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d106      	bne.n	80043b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7fe f920 	bl	80025f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2202      	movs	r2, #2
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4619      	mov	r1, r3
 80043c6:	4610      	mov	r0, r2
 80043c8:	f000 ff68 	bl	800529c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	4618      	mov	r0, r3
 8004430:	3708      	adds	r7, #8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
	...

08004438 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b01      	cmp	r3, #1
 800444a:	d001      	beq.n	8004450 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e04c      	b.n	80044ea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a26      	ldr	r2, [pc, #152]	; (80044f8 <HAL_TIM_Base_Start+0xc0>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d022      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446a:	d01d      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a22      	ldr	r2, [pc, #136]	; (80044fc <HAL_TIM_Base_Start+0xc4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d018      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a21      	ldr	r2, [pc, #132]	; (8004500 <HAL_TIM_Base_Start+0xc8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d013      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1f      	ldr	r2, [pc, #124]	; (8004504 <HAL_TIM_Base_Start+0xcc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00e      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1e      	ldr	r2, [pc, #120]	; (8004508 <HAL_TIM_Base_Start+0xd0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d009      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_TIM_Base_Start+0xd4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d004      	beq.n	80044a8 <HAL_TIM_Base_Start+0x70>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <HAL_TIM_Base_Start+0xd8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d115      	bne.n	80044d4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689a      	ldr	r2, [r3, #8]
 80044ae:	4b19      	ldr	r3, [pc, #100]	; (8004514 <HAL_TIM_Base_Start+0xdc>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d015      	beq.n	80044e6 <HAL_TIM_Base_Start+0xae>
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044c0:	d011      	beq.n	80044e6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	e008      	b.n	80044e6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e000      	b.n	80044e8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40012c00 	.word	0x40012c00
 80044fc:	40000400 	.word	0x40000400
 8004500:	40000800 	.word	0x40000800
 8004504:	40000c00 	.word	0x40000c00
 8004508:	40013400 	.word	0x40013400
 800450c:	40014000 	.word	0x40014000
 8004510:	40015000 	.word	0x40015000
 8004514:	00010007 	.word	0x00010007

08004518 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b01      	cmp	r3, #1
 800452a:	d001      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e054      	b.n	80045da <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2202      	movs	r2, #2
 8004534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 0201 	orr.w	r2, r2, #1
 8004546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a26      	ldr	r2, [pc, #152]	; (80045e8 <HAL_TIM_Base_Start_IT+0xd0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d022      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x80>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455a:	d01d      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x80>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a22      	ldr	r2, [pc, #136]	; (80045ec <HAL_TIM_Base_Start_IT+0xd4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d018      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x80>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a21      	ldr	r2, [pc, #132]	; (80045f0 <HAL_TIM_Base_Start_IT+0xd8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x80>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a1f      	ldr	r2, [pc, #124]	; (80045f4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d00e      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x80>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a1e      	ldr	r2, [pc, #120]	; (80045f8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d009      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x80>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_TIM_Base_Start_IT+0xe4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d004      	beq.n	8004598 <HAL_TIM_Base_Start_IT+0x80>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a1b      	ldr	r2, [pc, #108]	; (8004600 <HAL_TIM_Base_Start_IT+0xe8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d115      	bne.n	80045c4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	689a      	ldr	r2, [r3, #8]
 800459e:	4b19      	ldr	r3, [pc, #100]	; (8004604 <HAL_TIM_Base_Start_IT+0xec>)
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d015      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0xbe>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b0:	d011      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f042 0201 	orr.w	r2, r2, #1
 80045c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c2:	e008      	b.n	80045d6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0201 	orr.w	r2, r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	e000      	b.n	80045d8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40013400 	.word	0x40013400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40015000 	.word	0x40015000
 8004604:	00010007 	.word	0x00010007

08004608 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e049      	b.n	80046ae <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f841 	bl	80046b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3304      	adds	r3, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4610      	mov	r0, r2
 8004648:	f000 fe28 	bl	800529c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046be:	bf00      	nop
 80046c0:	370c      	adds	r7, #12
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
	...

080046cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d109      	bne.n	80046f0 <HAL_TIM_PWM_Start+0x24>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	bf14      	ite	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2300      	moveq	r3, #0
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	e03c      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d109      	bne.n	800470a <HAL_TIM_PWM_Start+0x3e>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b01      	cmp	r3, #1
 8004700:	bf14      	ite	ne
 8004702:	2301      	movne	r3, #1
 8004704:	2300      	moveq	r3, #0
 8004706:	b2db      	uxtb	r3, r3
 8004708:	e02f      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b08      	cmp	r3, #8
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x58>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e022      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d109      	bne.n	800473e <HAL_TIM_PWM_Start+0x72>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e015      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b10      	cmp	r3, #16
 8004742:	d109      	bne.n	8004758 <HAL_TIM_PWM_Start+0x8c>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e008      	b.n	800476a <HAL_TIM_PWM_Start+0x9e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e0a6      	b.n	80048c0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0xb6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004780:	e023      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0xc6>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004790:	e01b      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xd6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047a0:	e013      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b0c      	cmp	r3, #12
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xe6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047b0:	e00b      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_PWM_Start+0xf6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047c0:	e003      	b.n	80047ca <HAL_TIM_PWM_Start+0xfe>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f001 f9dc 	bl	8005b90 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a3a      	ldr	r2, [pc, #232]	; (80048c8 <HAL_TIM_PWM_Start+0x1fc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d018      	beq.n	8004814 <HAL_TIM_PWM_Start+0x148>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a39      	ldr	r2, [pc, #228]	; (80048cc <HAL_TIM_PWM_Start+0x200>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d013      	beq.n	8004814 <HAL_TIM_PWM_Start+0x148>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a37      	ldr	r2, [pc, #220]	; (80048d0 <HAL_TIM_PWM_Start+0x204>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00e      	beq.n	8004814 <HAL_TIM_PWM_Start+0x148>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a36      	ldr	r2, [pc, #216]	; (80048d4 <HAL_TIM_PWM_Start+0x208>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_TIM_PWM_Start+0x148>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a34      	ldr	r2, [pc, #208]	; (80048d8 <HAL_TIM_PWM_Start+0x20c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_TIM_PWM_Start+0x148>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a33      	ldr	r2, [pc, #204]	; (80048dc <HAL_TIM_PWM_Start+0x210>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d101      	bne.n	8004818 <HAL_TIM_PWM_Start+0x14c>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_TIM_PWM_Start+0x14e>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a25      	ldr	r2, [pc, #148]	; (80048c8 <HAL_TIM_PWM_Start+0x1fc>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d022      	beq.n	800487e <HAL_TIM_PWM_Start+0x1b2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004840:	d01d      	beq.n	800487e <HAL_TIM_PWM_Start+0x1b2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a26      	ldr	r2, [pc, #152]	; (80048e0 <HAL_TIM_PWM_Start+0x214>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d018      	beq.n	800487e <HAL_TIM_PWM_Start+0x1b2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a24      	ldr	r2, [pc, #144]	; (80048e4 <HAL_TIM_PWM_Start+0x218>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d013      	beq.n	800487e <HAL_TIM_PWM_Start+0x1b2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <HAL_TIM_PWM_Start+0x21c>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00e      	beq.n	800487e <HAL_TIM_PWM_Start+0x1b2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a19      	ldr	r2, [pc, #100]	; (80048cc <HAL_TIM_PWM_Start+0x200>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d009      	beq.n	800487e <HAL_TIM_PWM_Start+0x1b2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <HAL_TIM_PWM_Start+0x204>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d004      	beq.n	800487e <HAL_TIM_PWM_Start+0x1b2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a18      	ldr	r2, [pc, #96]	; (80048dc <HAL_TIM_PWM_Start+0x210>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d115      	bne.n	80048aa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_TIM_PWM_Start+0x220>)
 8004886:	4013      	ands	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b06      	cmp	r3, #6
 800488e:	d015      	beq.n	80048bc <HAL_TIM_PWM_Start+0x1f0>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004896:	d011      	beq.n	80048bc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a8:	e008      	b.n	80048bc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f042 0201 	orr.w	r2, r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	e000      	b.n	80048be <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3710      	adds	r7, #16
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	40012c00 	.word	0x40012c00
 80048cc:	40013400 	.word	0x40013400
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40014400 	.word	0x40014400
 80048d8:	40014800 	.word	0x40014800
 80048dc:	40015000 	.word	0x40015000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	00010007 	.word	0x00010007

080048f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e097      	b.n	8004a34 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d106      	bne.n	800491e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7fd fea5 	bl	8002668 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2202      	movs	r2, #2
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004934:	f023 0307 	bic.w	r3, r3, #7
 8004938:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	3304      	adds	r3, #4
 8004942:	4619      	mov	r1, r3
 8004944:	4610      	mov	r0, r2
 8004946:	f000 fca9 	bl	800529c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004972:	f023 0303 	bic.w	r3, r3, #3
 8004976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	699b      	ldr	r3, [r3, #24]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	4313      	orrs	r3, r2
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004990:	f023 030c 	bic.w	r3, r3, #12
 8004994:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800499c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	4313      	orrs	r3, r2
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	011a      	lsls	r2, r3, #4
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	031b      	lsls	r3, r3, #12
 80049c0:	4313      	orrs	r3, r2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80049ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80049d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685a      	ldr	r2, [r3, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	011b      	lsls	r3, r3, #4
 80049e2:	4313      	orrs	r3, r2
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a32:	2300      	movs	r3, #0
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3718      	adds	r7, #24
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a64:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d110      	bne.n	8004a8e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a6c:	7bfb      	ldrb	r3, [r7, #15]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d102      	bne.n	8004a78 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a72:	7b7b      	ldrb	r3, [r7, #13]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d001      	beq.n	8004a7c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e069      	b.n	8004b50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a8c:	e031      	b.n	8004af2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d110      	bne.n	8004ab6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a94:	7bbb      	ldrb	r3, [r7, #14]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d102      	bne.n	8004aa0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a9a:	7b3b      	ldrb	r3, [r7, #12]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e055      	b.n	8004b50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab4:	e01d      	b.n	8004af2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d108      	bne.n	8004ace <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004abc:	7bbb      	ldrb	r3, [r7, #14]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d105      	bne.n	8004ace <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ac2:	7b7b      	ldrb	r3, [r7, #13]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d102      	bne.n	8004ace <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ac8:	7b3b      	ldrb	r3, [r7, #12]
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d001      	beq.n	8004ad2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e03e      	b.n	8004b50 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2202      	movs	r2, #2
 8004ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_TIM_Encoder_Start+0xc4>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b04      	cmp	r3, #4
 8004afc:	d008      	beq.n	8004b10 <HAL_TIM_Encoder_Start+0xd4>
 8004afe:	e00f      	b.n	8004b20 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2201      	movs	r2, #1
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 f841 	bl	8005b90 <TIM_CCxChannelCmd>
      break;
 8004b0e:	e016      	b.n	8004b3e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2201      	movs	r2, #1
 8004b16:	2104      	movs	r1, #4
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 f839 	bl	8005b90 <TIM_CCxChannelCmd>
      break;
 8004b1e:	e00e      	b.n	8004b3e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2201      	movs	r2, #1
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f001 f831 	bl	8005b90 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2201      	movs	r2, #1
 8004b34:	2104      	movs	r1, #4
 8004b36:	4618      	mov	r0, r3
 8004b38:	f001 f82a 	bl	8005b90 <TIM_CCxChannelCmd>
      break;
 8004b3c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0201 	orr.w	r2, r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d020      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f003 0302 	and.w	r3, r3, #2
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d01b      	beq.n	8004bbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0202 	mvn.w	r2, #2
 8004b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fb5c 	bl	8005260 <HAL_TIM_IC_CaptureCallback>
 8004ba8:	e005      	b.n	8004bb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fb4e 	bl	800524c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 fb5f 	bl	8005274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d020      	beq.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d01b      	beq.n	8004c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0204 	mvn.w	r2, #4
 8004bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 fb36 	bl	8005260 <HAL_TIM_IC_CaptureCallback>
 8004bf4:	e005      	b.n	8004c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fb28 	bl	800524c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fb39 	bl	8005274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	f003 0308 	and.w	r3, r3, #8
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d020      	beq.n	8004c54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f003 0308 	and.w	r3, r3, #8
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01b      	beq.n	8004c54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0208 	mvn.w	r2, #8
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2204      	movs	r2, #4
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f003 0303 	and.w	r3, r3, #3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb10 	bl	8005260 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fb02 	bl	800524c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fb13 	bl	8005274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d020      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01b      	beq.n	8004ca0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f06f 0210 	mvn.w	r2, #16
 8004c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2208      	movs	r2, #8
 8004c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	69db      	ldr	r3, [r3, #28]
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 faea 	bl	8005260 <HAL_TIM_IC_CaptureCallback>
 8004c8c:	e005      	b.n	8004c9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fadc 	bl	800524c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 faed 	bl	8005274 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00c      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d007      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0201 	mvn.w	r2, #1
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd fb94 	bl	80023ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d104      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00c      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f001 f8a9 	bl	8005e44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00c      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 f8a1 	bl	8005e58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 faa7 	bl	8005288 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f06f 0220 	mvn.w	r2, #32
 8004d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f001 f869 	bl	8005e30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00c      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f001 f875 	bl	8005e6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 f86d 	bl	8005e80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00c      	beq.n	8004dca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f001 f865 	bl	8005e94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00c      	beq.n	8004dee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f001 f85d 	bl	8005ea8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dee:	bf00      	nop
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e04:	2300      	movs	r3, #0
 8004e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d101      	bne.n	8004e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e12:	2302      	movs	r3, #2
 8004e14:	e0ff      	b.n	8005016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b14      	cmp	r3, #20
 8004e22:	f200 80f0 	bhi.w	8005006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e26:	a201      	add	r2, pc, #4	; (adr r2, 8004e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2c:	08004e81 	.word	0x08004e81
 8004e30:	08005007 	.word	0x08005007
 8004e34:	08005007 	.word	0x08005007
 8004e38:	08005007 	.word	0x08005007
 8004e3c:	08004ec1 	.word	0x08004ec1
 8004e40:	08005007 	.word	0x08005007
 8004e44:	08005007 	.word	0x08005007
 8004e48:	08005007 	.word	0x08005007
 8004e4c:	08004f03 	.word	0x08004f03
 8004e50:	08005007 	.word	0x08005007
 8004e54:	08005007 	.word	0x08005007
 8004e58:	08005007 	.word	0x08005007
 8004e5c:	08004f43 	.word	0x08004f43
 8004e60:	08005007 	.word	0x08005007
 8004e64:	08005007 	.word	0x08005007
 8004e68:	08005007 	.word	0x08005007
 8004e6c:	08004f85 	.word	0x08004f85
 8004e70:	08005007 	.word	0x08005007
 8004e74:	08005007 	.word	0x08005007
 8004e78:	08005007 	.word	0x08005007
 8004e7c:	08004fc5 	.word	0x08004fc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f000 fabc 	bl	8005404 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0208 	orr.w	r2, r2, #8
 8004e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	699a      	ldr	r2, [r3, #24]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0204 	bic.w	r2, r2, #4
 8004eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6999      	ldr	r1, [r3, #24]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	619a      	str	r2, [r3, #24]
      break;
 8004ebe:	e0a5      	b.n	800500c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68b9      	ldr	r1, [r7, #8]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fb36 	bl	8005538 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699a      	ldr	r2, [r3, #24]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6999      	ldr	r1, [r3, #24]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	619a      	str	r2, [r3, #24]
      break;
 8004f00:	e084      	b.n	800500c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68b9      	ldr	r1, [r7, #8]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fba9 	bl	8005660 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0208 	orr.w	r2, r2, #8
 8004f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69da      	ldr	r2, [r3, #28]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0204 	bic.w	r2, r2, #4
 8004f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	69d9      	ldr	r1, [r3, #28]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	61da      	str	r2, [r3, #28]
      break;
 8004f40:	e064      	b.n	800500c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68b9      	ldr	r1, [r7, #8]
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 fc1b 	bl	8005784 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69d9      	ldr	r1, [r3, #28]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	021a      	lsls	r2, r3, #8
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	61da      	str	r2, [r3, #28]
      break;
 8004f82:	e043      	b.n	800500c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fc8e 	bl	80058ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f042 0208 	orr.w	r2, r2, #8
 8004f9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f022 0204 	bic.w	r2, r2, #4
 8004fae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691a      	ldr	r2, [r3, #16]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004fc2:	e023      	b.n	800500c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fcd8 	bl	8005980 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	021a      	lsls	r2, r3, #8
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005004:	e002      	b.n	800500c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	75fb      	strb	r3, [r7, #23]
      break;
 800500a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005014:	7dfb      	ldrb	r3, [r7, #23]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3718      	adds	r7, #24
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop

08005020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d101      	bne.n	800503c <HAL_TIM_ConfigClockSource+0x1c>
 8005038:	2302      	movs	r3, #2
 800503a:	e0f6      	b.n	800522a <HAL_TIM_ConfigClockSource+0x20a>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2202      	movs	r2, #2
 8005048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800505a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800505e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a6f      	ldr	r2, [pc, #444]	; (8005234 <HAL_TIM_ConfigClockSource+0x214>)
 8005076:	4293      	cmp	r3, r2
 8005078:	f000 80c1 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 800507c:	4a6d      	ldr	r2, [pc, #436]	; (8005234 <HAL_TIM_ConfigClockSource+0x214>)
 800507e:	4293      	cmp	r3, r2
 8005080:	f200 80c6 	bhi.w	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005084:	4a6c      	ldr	r2, [pc, #432]	; (8005238 <HAL_TIM_ConfigClockSource+0x218>)
 8005086:	4293      	cmp	r3, r2
 8005088:	f000 80b9 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 800508c:	4a6a      	ldr	r2, [pc, #424]	; (8005238 <HAL_TIM_ConfigClockSource+0x218>)
 800508e:	4293      	cmp	r3, r2
 8005090:	f200 80be 	bhi.w	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005094:	4a69      	ldr	r2, [pc, #420]	; (800523c <HAL_TIM_ConfigClockSource+0x21c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	f000 80b1 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 800509c:	4a67      	ldr	r2, [pc, #412]	; (800523c <HAL_TIM_ConfigClockSource+0x21c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	f200 80b6 	bhi.w	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 80050a4:	4a66      	ldr	r2, [pc, #408]	; (8005240 <HAL_TIM_ConfigClockSource+0x220>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	f000 80a9 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 80050ac:	4a64      	ldr	r2, [pc, #400]	; (8005240 <HAL_TIM_ConfigClockSource+0x220>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	f200 80ae 	bhi.w	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 80050b4:	4a63      	ldr	r2, [pc, #396]	; (8005244 <HAL_TIM_ConfigClockSource+0x224>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	f000 80a1 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 80050bc:	4a61      	ldr	r2, [pc, #388]	; (8005244 <HAL_TIM_ConfigClockSource+0x224>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	f200 80a6 	bhi.w	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 80050c4:	4a60      	ldr	r2, [pc, #384]	; (8005248 <HAL_TIM_ConfigClockSource+0x228>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	f000 8099 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 80050cc:	4a5e      	ldr	r2, [pc, #376]	; (8005248 <HAL_TIM_ConfigClockSource+0x228>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	f200 809e 	bhi.w	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 80050d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80050d8:	f000 8091 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 80050dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80050e0:	f200 8096 	bhi.w	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 80050e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050e8:	f000 8089 	beq.w	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 80050ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f0:	f200 808e 	bhi.w	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 80050f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f8:	d03e      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x158>
 80050fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fe:	f200 8087 	bhi.w	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	f000 8086 	beq.w	8005216 <HAL_TIM_ConfigClockSource+0x1f6>
 800510a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510e:	d87f      	bhi.n	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005110:	2b70      	cmp	r3, #112	; 0x70
 8005112:	d01a      	beq.n	800514a <HAL_TIM_ConfigClockSource+0x12a>
 8005114:	2b70      	cmp	r3, #112	; 0x70
 8005116:	d87b      	bhi.n	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005118:	2b60      	cmp	r3, #96	; 0x60
 800511a:	d050      	beq.n	80051be <HAL_TIM_ConfigClockSource+0x19e>
 800511c:	2b60      	cmp	r3, #96	; 0x60
 800511e:	d877      	bhi.n	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005120:	2b50      	cmp	r3, #80	; 0x50
 8005122:	d03c      	beq.n	800519e <HAL_TIM_ConfigClockSource+0x17e>
 8005124:	2b50      	cmp	r3, #80	; 0x50
 8005126:	d873      	bhi.n	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d058      	beq.n	80051de <HAL_TIM_ConfigClockSource+0x1be>
 800512c:	2b40      	cmp	r3, #64	; 0x40
 800512e:	d86f      	bhi.n	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005130:	2b30      	cmp	r3, #48	; 0x30
 8005132:	d064      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 8005134:	2b30      	cmp	r3, #48	; 0x30
 8005136:	d86b      	bhi.n	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005138:	2b20      	cmp	r3, #32
 800513a:	d060      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 800513c:	2b20      	cmp	r3, #32
 800513e:	d867      	bhi.n	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
 8005140:	2b00      	cmp	r3, #0
 8005142:	d05c      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 8005144:	2b10      	cmp	r3, #16
 8005146:	d05a      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x1de>
 8005148:	e062      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800515a:	f000 fcf9 	bl	8005b50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800516c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	609a      	str	r2, [r3, #8]
      break;
 8005176:	e04f      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005188:	f000 fce2 	bl	8005b50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800519a:	609a      	str	r2, [r3, #8]
      break;
 800519c:	e03c      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051aa:	461a      	mov	r2, r3
 80051ac:	f000 fc54 	bl	8005a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2150      	movs	r1, #80	; 0x50
 80051b6:	4618      	mov	r0, r3
 80051b8:	f000 fcad 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 80051bc:	e02c      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051ca:	461a      	mov	r2, r3
 80051cc:	f000 fc73 	bl	8005ab6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2160      	movs	r1, #96	; 0x60
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fc9d 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 80051dc:	e01c      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051ea:	461a      	mov	r2, r3
 80051ec:	f000 fc34 	bl	8005a58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2140      	movs	r1, #64	; 0x40
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fc8d 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 80051fc:	e00c      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f000 fc84 	bl	8005b16 <TIM_ITRx_SetConfig>
      break;
 800520e:	e003      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
      break;
 8005214:	e000      	b.n	8005218 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8005216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005228:	7bfb      	ldrb	r3, [r7, #15]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	00100070 	.word	0x00100070
 8005238:	00100060 	.word	0x00100060
 800523c:	00100050 	.word	0x00100050
 8005240:	00100040 	.word	0x00100040
 8005244:	00100030 	.word	0x00100030
 8005248:	00100020 	.word	0x00100020

0800524c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800529c:	b480      	push	{r7}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a4c      	ldr	r2, [pc, #304]	; (80053e0 <TIM_Base_SetConfig+0x144>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d017      	beq.n	80052e4 <TIM_Base_SetConfig+0x48>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ba:	d013      	beq.n	80052e4 <TIM_Base_SetConfig+0x48>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a49      	ldr	r2, [pc, #292]	; (80053e4 <TIM_Base_SetConfig+0x148>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d00f      	beq.n	80052e4 <TIM_Base_SetConfig+0x48>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a48      	ldr	r2, [pc, #288]	; (80053e8 <TIM_Base_SetConfig+0x14c>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <TIM_Base_SetConfig+0x48>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a47      	ldr	r2, [pc, #284]	; (80053ec <TIM_Base_SetConfig+0x150>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_Base_SetConfig+0x48>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a46      	ldr	r2, [pc, #280]	; (80053f0 <TIM_Base_SetConfig+0x154>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_Base_SetConfig+0x48>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a45      	ldr	r2, [pc, #276]	; (80053f4 <TIM_Base_SetConfig+0x158>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d108      	bne.n	80052f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a39      	ldr	r2, [pc, #228]	; (80053e0 <TIM_Base_SetConfig+0x144>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d023      	beq.n	8005346 <TIM_Base_SetConfig+0xaa>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005304:	d01f      	beq.n	8005346 <TIM_Base_SetConfig+0xaa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a36      	ldr	r2, [pc, #216]	; (80053e4 <TIM_Base_SetConfig+0x148>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01b      	beq.n	8005346 <TIM_Base_SetConfig+0xaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a35      	ldr	r2, [pc, #212]	; (80053e8 <TIM_Base_SetConfig+0x14c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d017      	beq.n	8005346 <TIM_Base_SetConfig+0xaa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a34      	ldr	r2, [pc, #208]	; (80053ec <TIM_Base_SetConfig+0x150>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <TIM_Base_SetConfig+0xaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a33      	ldr	r2, [pc, #204]	; (80053f0 <TIM_Base_SetConfig+0x154>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00f      	beq.n	8005346 <TIM_Base_SetConfig+0xaa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a33      	ldr	r2, [pc, #204]	; (80053f8 <TIM_Base_SetConfig+0x15c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d00b      	beq.n	8005346 <TIM_Base_SetConfig+0xaa>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a32      	ldr	r2, [pc, #200]	; (80053fc <TIM_Base_SetConfig+0x160>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d007      	beq.n	8005346 <TIM_Base_SetConfig+0xaa>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a31      	ldr	r2, [pc, #196]	; (8005400 <TIM_Base_SetConfig+0x164>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d003      	beq.n	8005346 <TIM_Base_SetConfig+0xaa>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a2c      	ldr	r2, [pc, #176]	; (80053f4 <TIM_Base_SetConfig+0x158>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d108      	bne.n	8005358 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800534c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68fa      	ldr	r2, [r7, #12]
 800536a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a18      	ldr	r2, [pc, #96]	; (80053e0 <TIM_Base_SetConfig+0x144>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d013      	beq.n	80053ac <TIM_Base_SetConfig+0x110>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1a      	ldr	r2, [pc, #104]	; (80053f0 <TIM_Base_SetConfig+0x154>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00f      	beq.n	80053ac <TIM_Base_SetConfig+0x110>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1a      	ldr	r2, [pc, #104]	; (80053f8 <TIM_Base_SetConfig+0x15c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d00b      	beq.n	80053ac <TIM_Base_SetConfig+0x110>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a19      	ldr	r2, [pc, #100]	; (80053fc <TIM_Base_SetConfig+0x160>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d007      	beq.n	80053ac <TIM_Base_SetConfig+0x110>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a18      	ldr	r2, [pc, #96]	; (8005400 <TIM_Base_SetConfig+0x164>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d003      	beq.n	80053ac <TIM_Base_SetConfig+0x110>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a13      	ldr	r2, [pc, #76]	; (80053f4 <TIM_Base_SetConfig+0x158>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d103      	bne.n	80053b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	691a      	ldr	r2, [r3, #16]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d105      	bne.n	80053d2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f023 0201 	bic.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	611a      	str	r2, [r3, #16]
  }
}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40012c00 	.word	0x40012c00
 80053e4:	40000400 	.word	0x40000400
 80053e8:	40000800 	.word	0x40000800
 80053ec:	40000c00 	.word	0x40000c00
 80053f0:	40013400 	.word	0x40013400
 80053f4:	40015000 	.word	0x40015000
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400
 8005400:	40014800 	.word	0x40014800

08005404 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a1b      	ldr	r3, [r3, #32]
 8005418:	f023 0201 	bic.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0303 	bic.w	r3, r3, #3
 800543e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f023 0302 	bic.w	r3, r3, #2
 8005450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a30      	ldr	r2, [pc, #192]	; (8005520 <TIM_OC1_SetConfig+0x11c>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <TIM_OC1_SetConfig+0x88>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a2f      	ldr	r2, [pc, #188]	; (8005524 <TIM_OC1_SetConfig+0x120>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00f      	beq.n	800548c <TIM_OC1_SetConfig+0x88>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a2e      	ldr	r2, [pc, #184]	; (8005528 <TIM_OC1_SetConfig+0x124>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00b      	beq.n	800548c <TIM_OC1_SetConfig+0x88>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2d      	ldr	r2, [pc, #180]	; (800552c <TIM_OC1_SetConfig+0x128>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d007      	beq.n	800548c <TIM_OC1_SetConfig+0x88>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2c      	ldr	r2, [pc, #176]	; (8005530 <TIM_OC1_SetConfig+0x12c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d003      	beq.n	800548c <TIM_OC1_SetConfig+0x88>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a2b      	ldr	r2, [pc, #172]	; (8005534 <TIM_OC1_SetConfig+0x130>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d10c      	bne.n	80054a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0308 	bic.w	r3, r3, #8
 8005492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	697a      	ldr	r2, [r7, #20]
 800549a:	4313      	orrs	r3, r2
 800549c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 0304 	bic.w	r3, r3, #4
 80054a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <TIM_OC1_SetConfig+0x11c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d013      	beq.n	80054d6 <TIM_OC1_SetConfig+0xd2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <TIM_OC1_SetConfig+0x120>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00f      	beq.n	80054d6 <TIM_OC1_SetConfig+0xd2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <TIM_OC1_SetConfig+0x124>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d00b      	beq.n	80054d6 <TIM_OC1_SetConfig+0xd2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1a      	ldr	r2, [pc, #104]	; (800552c <TIM_OC1_SetConfig+0x128>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d007      	beq.n	80054d6 <TIM_OC1_SetConfig+0xd2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a19      	ldr	r2, [pc, #100]	; (8005530 <TIM_OC1_SetConfig+0x12c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d003      	beq.n	80054d6 <TIM_OC1_SetConfig+0xd2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a18      	ldr	r2, [pc, #96]	; (8005534 <TIM_OC1_SetConfig+0x130>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d111      	bne.n	80054fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	693a      	ldr	r2, [r7, #16]
 80054fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	697a      	ldr	r2, [r7, #20]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40013400 	.word	0x40013400
 8005528:	40014000 	.word	0x40014000
 800552c:	40014400 	.word	0x40014400
 8005530:	40014800 	.word	0x40014800
 8005534:	40015000 	.word	0x40015000

08005538 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	f023 0210 	bic.w	r2, r3, #16
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800556a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005572:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	f023 0320 	bic.w	r3, r3, #32
 8005586:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	697a      	ldr	r2, [r7, #20]
 8005590:	4313      	orrs	r3, r2
 8005592:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a2c      	ldr	r2, [pc, #176]	; (8005648 <TIM_OC2_SetConfig+0x110>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_OC2_SetConfig+0x74>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a2b      	ldr	r2, [pc, #172]	; (800564c <TIM_OC2_SetConfig+0x114>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_OC2_SetConfig+0x74>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a2a      	ldr	r2, [pc, #168]	; (8005650 <TIM_OC2_SetConfig+0x118>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d10d      	bne.n	80055c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	011b      	lsls	r3, r3, #4
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	4313      	orrs	r3, r2
 80055be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a1f      	ldr	r2, [pc, #124]	; (8005648 <TIM_OC2_SetConfig+0x110>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <TIM_OC2_SetConfig+0xc0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a1e      	ldr	r2, [pc, #120]	; (800564c <TIM_OC2_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00f      	beq.n	80055f8 <TIM_OC2_SetConfig+0xc0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a1e      	ldr	r2, [pc, #120]	; (8005654 <TIM_OC2_SetConfig+0x11c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_OC2_SetConfig+0xc0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <TIM_OC2_SetConfig+0x120>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_OC2_SetConfig+0xc0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a1c      	ldr	r2, [pc, #112]	; (800565c <TIM_OC2_SetConfig+0x124>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_OC2_SetConfig+0xc0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a17      	ldr	r2, [pc, #92]	; (8005650 <TIM_OC2_SetConfig+0x118>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d113      	bne.n	8005620 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	693a      	ldr	r2, [r7, #16]
 800561c:	4313      	orrs	r3, r2
 800561e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	621a      	str	r2, [r3, #32]
}
 800563a:	bf00      	nop
 800563c:	371c      	adds	r7, #28
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40012c00 	.word	0x40012c00
 800564c:	40013400 	.word	0x40013400
 8005650:	40015000 	.word	0x40015000
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800

08005660 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0303 	bic.w	r3, r3, #3
 800569a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2b      	ldr	r2, [pc, #172]	; (800576c <TIM_OC3_SetConfig+0x10c>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_OC3_SetConfig+0x72>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2a      	ldr	r2, [pc, #168]	; (8005770 <TIM_OC3_SetConfig+0x110>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_OC3_SetConfig+0x72>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a29      	ldr	r2, [pc, #164]	; (8005774 <TIM_OC3_SetConfig+0x114>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d10d      	bne.n	80056ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	021b      	lsls	r3, r3, #8
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1e      	ldr	r2, [pc, #120]	; (800576c <TIM_OC3_SetConfig+0x10c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d013      	beq.n	800571e <TIM_OC3_SetConfig+0xbe>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <TIM_OC3_SetConfig+0x110>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00f      	beq.n	800571e <TIM_OC3_SetConfig+0xbe>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1d      	ldr	r2, [pc, #116]	; (8005778 <TIM_OC3_SetConfig+0x118>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00b      	beq.n	800571e <TIM_OC3_SetConfig+0xbe>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1c      	ldr	r2, [pc, #112]	; (800577c <TIM_OC3_SetConfig+0x11c>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d007      	beq.n	800571e <TIM_OC3_SetConfig+0xbe>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <TIM_OC3_SetConfig+0x120>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d003      	beq.n	800571e <TIM_OC3_SetConfig+0xbe>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a16      	ldr	r2, [pc, #88]	; (8005774 <TIM_OC3_SetConfig+0x114>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d113      	bne.n	8005746 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005724:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800572c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	695b      	ldr	r3, [r3, #20]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	693a      	ldr	r2, [r7, #16]
 8005736:	4313      	orrs	r3, r2
 8005738:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685a      	ldr	r2, [r3, #4]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	621a      	str	r2, [r3, #32]
}
 8005760:	bf00      	nop
 8005762:	371c      	adds	r7, #28
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	40012c00 	.word	0x40012c00
 8005770:	40013400 	.word	0x40013400
 8005774:	40015000 	.word	0x40015000
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400
 8005780:	40014800 	.word	0x40014800

08005784 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a1b      	ldr	r3, [r3, #32]
 8005798:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	69db      	ldr	r3, [r3, #28]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	021b      	lsls	r3, r3, #8
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	031b      	lsls	r3, r3, #12
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a2c      	ldr	r2, [pc, #176]	; (8005894 <TIM_OC4_SetConfig+0x110>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d007      	beq.n	80057f8 <TIM_OC4_SetConfig+0x74>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a2b      	ldr	r2, [pc, #172]	; (8005898 <TIM_OC4_SetConfig+0x114>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d003      	beq.n	80057f8 <TIM_OC4_SetConfig+0x74>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a2a      	ldr	r2, [pc, #168]	; (800589c <TIM_OC4_SetConfig+0x118>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d10d      	bne.n	8005814 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	031b      	lsls	r3, r3, #12
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005812:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <TIM_OC4_SetConfig+0x110>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d013      	beq.n	8005844 <TIM_OC4_SetConfig+0xc0>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a1e      	ldr	r2, [pc, #120]	; (8005898 <TIM_OC4_SetConfig+0x114>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d00f      	beq.n	8005844 <TIM_OC4_SetConfig+0xc0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a1e      	ldr	r2, [pc, #120]	; (80058a0 <TIM_OC4_SetConfig+0x11c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d00b      	beq.n	8005844 <TIM_OC4_SetConfig+0xc0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1d      	ldr	r2, [pc, #116]	; (80058a4 <TIM_OC4_SetConfig+0x120>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d007      	beq.n	8005844 <TIM_OC4_SetConfig+0xc0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1c      	ldr	r2, [pc, #112]	; (80058a8 <TIM_OC4_SetConfig+0x124>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d003      	beq.n	8005844 <TIM_OC4_SetConfig+0xc0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a17      	ldr	r2, [pc, #92]	; (800589c <TIM_OC4_SetConfig+0x118>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d113      	bne.n	800586c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800584a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005852:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	019b      	lsls	r3, r3, #6
 800585a:	693a      	ldr	r2, [r7, #16]
 800585c:	4313      	orrs	r3, r2
 800585e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	019b      	lsls	r3, r3, #6
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40013400 	.word	0x40013400
 800589c:	40015000 	.word	0x40015000
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800

080058ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	041b      	lsls	r3, r3, #16
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a19      	ldr	r2, [pc, #100]	; (8005968 <TIM_OC5_SetConfig+0xbc>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <TIM_OC5_SetConfig+0x82>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a18      	ldr	r2, [pc, #96]	; (800596c <TIM_OC5_SetConfig+0xc0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d00f      	beq.n	800592e <TIM_OC5_SetConfig+0x82>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a17      	ldr	r2, [pc, #92]	; (8005970 <TIM_OC5_SetConfig+0xc4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d00b      	beq.n	800592e <TIM_OC5_SetConfig+0x82>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a16      	ldr	r2, [pc, #88]	; (8005974 <TIM_OC5_SetConfig+0xc8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d007      	beq.n	800592e <TIM_OC5_SetConfig+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a15      	ldr	r2, [pc, #84]	; (8005978 <TIM_OC5_SetConfig+0xcc>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d003      	beq.n	800592e <TIM_OC5_SetConfig+0x82>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a14      	ldr	r2, [pc, #80]	; (800597c <TIM_OC5_SetConfig+0xd0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d109      	bne.n	8005942 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005934:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	021b      	lsls	r3, r3, #8
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68fa      	ldr	r2, [r7, #12]
 800594c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	685a      	ldr	r2, [r3, #4]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	621a      	str	r2, [r3, #32]
}
 800595c:	bf00      	nop
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	40012c00 	.word	0x40012c00
 800596c:	40013400 	.word	0x40013400
 8005970:	40014000 	.word	0x40014000
 8005974:	40014400 	.word	0x40014400
 8005978:	40014800 	.word	0x40014800
 800597c:	40015000 	.word	0x40015000

08005980 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a1b      	ldr	r3, [r3, #32]
 800598e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	051b      	lsls	r3, r3, #20
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4a1a      	ldr	r2, [pc, #104]	; (8005a40 <TIM_OC6_SetConfig+0xc0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d013      	beq.n	8005a04 <TIM_OC6_SetConfig+0x84>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	4a19      	ldr	r2, [pc, #100]	; (8005a44 <TIM_OC6_SetConfig+0xc4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d00f      	beq.n	8005a04 <TIM_OC6_SetConfig+0x84>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <TIM_OC6_SetConfig+0xc8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00b      	beq.n	8005a04 <TIM_OC6_SetConfig+0x84>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <TIM_OC6_SetConfig+0xcc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d007      	beq.n	8005a04 <TIM_OC6_SetConfig+0x84>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <TIM_OC6_SetConfig+0xd0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d003      	beq.n	8005a04 <TIM_OC6_SetConfig+0x84>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a15      	ldr	r2, [pc, #84]	; (8005a54 <TIM_OC6_SetConfig+0xd4>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d109      	bne.n	8005a18 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	029b      	lsls	r3, r3, #10
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	621a      	str	r2, [r3, #32]
}
 8005a32:	bf00      	nop
 8005a34:	371c      	adds	r7, #28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40013400 	.word	0x40013400
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400
 8005a50:	40014800 	.word	0x40014800
 8005a54:	40015000 	.word	0x40015000

08005a58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	f023 0201 	bic.w	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	699b      	ldr	r3, [r3, #24]
 8005a7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	011b      	lsls	r3, r3, #4
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	f023 030a 	bic.w	r3, r3, #10
 8005a94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b087      	sub	sp, #28
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6a1b      	ldr	r3, [r3, #32]
 8005acc:	f023 0210 	bic.w	r2, r3, #16
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	031b      	lsls	r3, r3, #12
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005af2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr

08005b16 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f043 0307 	orr.w	r3, r3, #7
 8005b3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	68fa      	ldr	r2, [r7, #12]
 8005b42:	609a      	str	r2, [r3, #8]
}
 8005b44:	bf00      	nop
 8005b46:	3714      	adds	r7, #20
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b087      	sub	sp, #28
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
 8005b5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	021a      	lsls	r2, r3, #8
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	431a      	orrs	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	609a      	str	r2, [r3, #8]
}
 8005b84:	bf00      	nop
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f003 031f 	and.w	r3, r3, #31
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6a1a      	ldr	r2, [r3, #32]
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	43db      	mvns	r3, r3
 8005bb2:	401a      	ands	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a1a      	ldr	r2, [r3, #32]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	f003 031f 	and.w	r3, r3, #31
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	e074      	b.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2202      	movs	r2, #2
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a34      	ldr	r2, [pc, #208]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d009      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a33      	ldr	r2, [pc, #204]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d004      	beq.n	8005c32 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a31      	ldr	r2, [pc, #196]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d108      	bne.n	8005c44 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68fa      	ldr	r2, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a21      	ldr	r2, [pc, #132]	; (8005cec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d022      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d01d      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1f      	ldr	r2, [pc, #124]	; (8005cf8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1d      	ldr	r2, [pc, #116]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d013      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1c      	ldr	r2, [pc, #112]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a15      	ldr	r2, [pc, #84]	; (8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a18      	ldr	r2, [pc, #96]	; (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a11      	ldr	r2, [pc, #68]	; (8005cf4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d10c      	bne.n	8005ccc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40012c00 	.word	0x40012c00
 8005cf0:	40013400 	.word	0x40013400
 8005cf4:	40015000 	.word	0x40015000
 8005cf8:	40000400 	.word	0x40000400
 8005cfc:	40000800 	.word	0x40000800
 8005d00:	40000c00 	.word	0x40000c00
 8005d04:	40014000 	.word	0x40014000

08005d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e078      	b.n	8005e16 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	041b      	lsls	r3, r3, #16
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	69db      	ldr	r3, [r3, #28]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a1c      	ldr	r2, [pc, #112]	; (8005e24 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1b      	ldr	r2, [pc, #108]	; (8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d004      	beq.n	8005dca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a19      	ldr	r2, [pc, #100]	; (8005e2c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d11c      	bne.n	8005e04 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	051b      	lsls	r3, r3, #20
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3714      	adds	r7, #20
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	40012c00 	.word	0x40012c00
 8005e28:	40013400 	.word	0x40013400
 8005e2c:	40015000 	.word	0x40015000

08005e30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b083      	sub	sp, #12
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e88:	bf00      	nop
 8005e8a:	370c      	adds	r7, #12
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e9c:	bf00      	nop
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e042      	b.n	8005f54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d106      	bne.n	8005ee6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7fc fae7 	bl	80024b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2224      	movs	r2, #36	; 0x24
 8005eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 0201 	bic.w	r2, r2, #1
 8005efc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d002      	beq.n	8005f0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 ff42 	bl	8006d90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fc43 	bl	8006798 <UART_SetConfig>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e01b      	b.n	8005f54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 ffc1 	bl	8006ed4 <UART_CheckIdleState>
 8005f52:	4603      	mov	r3, r0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	; 0x28
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	2b20      	cmp	r3, #32
 8005f74:	d17b      	bne.n	800606e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d002      	beq.n	8005f82 <HAL_UART_Transmit+0x26>
 8005f7c:	88fb      	ldrh	r3, [r7, #6]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e074      	b.n	8006070 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2221      	movs	r2, #33	; 0x21
 8005f92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f96:	f7fc fe4f 	bl	8002c38 <HAL_GetTick>
 8005f9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	88fa      	ldrh	r2, [r7, #6]
 8005fa0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	88fa      	ldrh	r2, [r7, #6]
 8005fa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fb4:	d108      	bne.n	8005fc8 <HAL_UART_Transmit+0x6c>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d104      	bne.n	8005fc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	e003      	b.n	8005fd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fd0:	e030      	b.n	8006034 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2180      	movs	r1, #128	; 0x80
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f001 f823 	bl	8007028 <UART_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e03d      	b.n	8006070 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006008:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	3302      	adds	r3, #2
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e007      	b.n	8006022 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	3301      	adds	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006028:	b29b      	uxth	r3, r3
 800602a:	3b01      	subs	r3, #1
 800602c:	b29a      	uxth	r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800603a:	b29b      	uxth	r3, r3
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1c8      	bne.n	8005fd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	2200      	movs	r2, #0
 8006048:	2140      	movs	r1, #64	; 0x40
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 ffec 	bl	8007028 <UART_WaitOnFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e006      	b.n	8006070 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2220      	movs	r2, #32
 8006066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3720      	adds	r7, #32
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	; 0x28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800608c:	2b20      	cmp	r3, #32
 800608e:	d137      	bne.n	8006100 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d002      	beq.n	800609c <HAL_UART_Receive_IT+0x24>
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e030      	b.n	8006102 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a18      	ldr	r2, [pc, #96]	; (800610c <HAL_UART_Receive_IT+0x94>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d01f      	beq.n	80060f0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d018      	beq.n	80060f0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	613b      	str	r3, [r7, #16]
   return(result);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	623b      	str	r3, [r7, #32]
 80060de:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	69f9      	ldr	r1, [r7, #28]
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e6      	bne.n	80060be <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	461a      	mov	r2, r3
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f001 f804 	bl	8007104 <UART_Start_Receive_IT>
 80060fc:	4603      	mov	r3, r0
 80060fe:	e000      	b.n	8006102 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	3728      	adds	r7, #40	; 0x28
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40008000 	.word	0x40008000

08006110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b0ba      	sub	sp, #232	; 0xe8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006136:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800613a:	f640 030f 	movw	r3, #2063	; 0x80f
 800613e:	4013      	ands	r3, r2
 8006140:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006148:	2b00      	cmp	r3, #0
 800614a:	d11b      	bne.n	8006184 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800614c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d015      	beq.n	8006184 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d105      	bne.n	8006170 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006164:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d009      	beq.n	8006184 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 82e3 	beq.w	8006740 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
      }
      return;
 8006182:	e2dd      	b.n	8006740 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8123 	beq.w	80063d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800618e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006192:	4b8d      	ldr	r3, [pc, #564]	; (80063c8 <HAL_UART_IRQHandler+0x2b8>)
 8006194:	4013      	ands	r3, r2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800619a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800619e:	4b8b      	ldr	r3, [pc, #556]	; (80063cc <HAL_UART_IRQHandler+0x2bc>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8116 	beq.w	80063d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d011      	beq.n	80061d8 <HAL_UART_IRQHandler+0xc8>
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2201      	movs	r2, #1
 80061c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ce:	f043 0201 	orr.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d011      	beq.n	8006208 <HAL_UART_IRQHandler+0xf8>
 80061e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2202      	movs	r2, #2
 80061f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061fe:	f043 0204 	orr.w	r2, r3, #4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d011      	beq.n	8006238 <HAL_UART_IRQHandler+0x128>
 8006214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2204      	movs	r2, #4
 8006226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	f043 0202 	orr.w	r2, r3, #2
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d105      	bne.n	800625c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006250:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006254:	4b5c      	ldr	r3, [pc, #368]	; (80063c8 <HAL_UART_IRQHandler+0x2b8>)
 8006256:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2208      	movs	r2, #8
 8006262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800626a:	f043 0208 	orr.w	r2, r3, #8
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800627c:	2b00      	cmp	r3, #0
 800627e:	d012      	beq.n	80062a6 <HAL_UART_IRQHandler+0x196>
 8006280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00c      	beq.n	80062a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8249 	beq.w	8006744 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d013      	beq.n	80062e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d105      	bne.n	80062d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d007      	beq.n	80062e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fa:	2b40      	cmp	r3, #64	; 0x40
 80062fc:	d005      	beq.n	800630a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006302:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006306:	2b00      	cmp	r3, #0
 8006308:	d054      	beq.n	80063b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f001 f81c 	bl	8007348 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d146      	bne.n	80063ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3308      	adds	r3, #8
 8006324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006334:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800633c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	3308      	adds	r3, #8
 8006346:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800634a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800634e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006356:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006362:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1d9      	bne.n	800631e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006370:	2b00      	cmp	r3, #0
 8006372:	d017      	beq.n	80063a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800637a:	4a15      	ldr	r2, [pc, #84]	; (80063d0 <HAL_UART_IRQHandler+0x2c0>)
 800637c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006384:	4618      	mov	r0, r3
 8006386:	f7fc fd9c 	bl	8002ec2 <HAL_DMA_Abort_IT>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d019      	beq.n	80063c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800639e:	4610      	mov	r0, r2
 80063a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063a2:	e00f      	b.n	80063c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f9e1 	bl	800676c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063aa:	e00b      	b.n	80063c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f9dd 	bl	800676c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063b2:	e007      	b.n	80063c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f9d9 	bl	800676c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80063c2:	e1bf      	b.n	8006744 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c4:	bf00      	nop
    return;
 80063c6:	e1bd      	b.n	8006744 <HAL_UART_IRQHandler+0x634>
 80063c8:	10000001 	.word	0x10000001
 80063cc:	04000120 	.word	0x04000120
 80063d0:	08007415 	.word	0x08007415

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063d8:	2b01      	cmp	r3, #1
 80063da:	f040 8153 	bne.w	8006684 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e2:	f003 0310 	and.w	r3, r3, #16
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 814c 	beq.w	8006684 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f0:	f003 0310 	and.w	r3, r3, #16
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f000 8145 	beq.w	8006684 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2210      	movs	r2, #16
 8006400:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800640c:	2b40      	cmp	r3, #64	; 0x40
 800640e:	f040 80bb 	bne.w	8006588 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006420:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 818f 	beq.w	8006748 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006430:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006434:	429a      	cmp	r2, r3
 8006436:	f080 8187 	bcs.w	8006748 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006440:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 8087 	bne.w	8006566 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006460:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006464:	e853 3f00 	ldrex	r3, [r3]
 8006468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800646c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006474:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	461a      	mov	r2, r3
 800647e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006482:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006486:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800648e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800649a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1da      	bne.n	8006458 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3308      	adds	r3, #8
 80064a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80064b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064b4:	f023 0301 	bic.w	r3, r3, #1
 80064b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	3308      	adds	r3, #8
 80064c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e1      	bne.n	80064a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3308      	adds	r3, #8
 80064e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3308      	adds	r3, #8
 80064fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006502:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006504:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006508:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e3      	bne.n	80064de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2220      	movs	r2, #32
 800651a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652c:	e853 3f00 	ldrex	r3, [r3]
 8006530:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006534:	f023 0310 	bic.w	r3, r3, #16
 8006538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	461a      	mov	r2, r3
 8006542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006546:	65bb      	str	r3, [r7, #88]	; 0x58
 8006548:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800654c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800654e:	e841 2300 	strex	r3, r2, [r1]
 8006552:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1e4      	bne.n	8006524 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006560:	4618      	mov	r0, r3
 8006562:	f7fc fc55 	bl	8002e10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2202      	movs	r2, #2
 800656a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006578:	b29b      	uxth	r3, r3
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	b29b      	uxth	r3, r3
 800657e:	4619      	mov	r1, r3
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f8fd 	bl	8006780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006586:	e0df      	b.n	8006748 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006594:	b29b      	uxth	r3, r3
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80d1 	beq.w	800674c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80065aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 80cc 	beq.w	800674c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065bc:	e853 3f00 	ldrex	r3, [r3]
 80065c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	461a      	mov	r2, r3
 80065d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065d6:	647b      	str	r3, [r7, #68]	; 0x44
 80065d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e4      	bne.n	80065b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3308      	adds	r3, #8
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	623b      	str	r3, [r7, #32]
   return(result);
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	3308      	adds	r3, #8
 800660e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006612:	633a      	str	r2, [r7, #48]	; 0x30
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e1      	bne.n	80065ea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2220      	movs	r2, #32
 800662a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	60fb      	str	r3, [r7, #12]
   return(result);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0310 	bic.w	r3, r3, #16
 800664e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	461a      	mov	r2, r3
 8006658:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800665c:	61fb      	str	r3, [r7, #28]
 800665e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006660:	69b9      	ldr	r1, [r7, #24]
 8006662:	69fa      	ldr	r2, [r7, #28]
 8006664:	e841 2300 	strex	r3, r2, [r1]
 8006668:	617b      	str	r3, [r7, #20]
   return(result);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1e4      	bne.n	800663a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2202      	movs	r2, #2
 8006674:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006676:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f87f 	bl	8006780 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006682:	e063      	b.n	800674c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00e      	beq.n	80066ae <HAL_UART_IRQHandler+0x59e>
 8006690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d008      	beq.n	80066ae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80066a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fc12 	bl	8007ed0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80066ac:	e051      	b.n	8006752 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80066ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d014      	beq.n	80066e4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80066ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80066c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d008      	beq.n	80066e4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d03a      	beq.n	8006750 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	4798      	blx	r3
    }
    return;
 80066e2:	e035      	b.n	8006750 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d009      	beq.n	8006704 <HAL_UART_IRQHandler+0x5f4>
 80066f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 fe9f 	bl	8007440 <UART_EndTransmit_IT>
    return;
 8006702:	e026      	b.n	8006752 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006708:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <HAL_UART_IRQHandler+0x614>
 8006710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006714:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 fbeb 	bl	8007ef8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006722:	e016      	b.n	8006752 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d010      	beq.n	8006752 <HAL_UART_IRQHandler+0x642>
 8006730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006734:	2b00      	cmp	r3, #0
 8006736:	da0c      	bge.n	8006752 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f001 fbd3 	bl	8007ee4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800673e:	e008      	b.n	8006752 <HAL_UART_IRQHandler+0x642>
      return;
 8006740:	bf00      	nop
 8006742:	e006      	b.n	8006752 <HAL_UART_IRQHandler+0x642>
    return;
 8006744:	bf00      	nop
 8006746:	e004      	b.n	8006752 <HAL_UART_IRQHandler+0x642>
      return;
 8006748:	bf00      	nop
 800674a:	e002      	b.n	8006752 <HAL_UART_IRQHandler+0x642>
      return;
 800674c:	bf00      	nop
 800674e:	e000      	b.n	8006752 <HAL_UART_IRQHandler+0x642>
    return;
 8006750:	bf00      	nop
  }
}
 8006752:	37e8      	adds	r7, #232	; 0xe8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006760:	bf00      	nop
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800676c:	b480      	push	{r7}
 800676e:	b083      	sub	sp, #12
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	460b      	mov	r3, r1
 800678a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800679c:	b08c      	sub	sp, #48	; 0x30
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	689a      	ldr	r2, [r3, #8]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	431a      	orrs	r2, r3
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	431a      	orrs	r2, r3
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	69db      	ldr	r3, [r3, #28]
 80067bc:	4313      	orrs	r3, r2
 80067be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4baa      	ldr	r3, [pc, #680]	; (8006a70 <UART_SetConfig+0x2d8>)
 80067c8:	4013      	ands	r3, r2
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	6812      	ldr	r2, [r2, #0]
 80067ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80067d0:	430b      	orrs	r3, r1
 80067d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	699b      	ldr	r3, [r3, #24]
 80067ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a9f      	ldr	r2, [pc, #636]	; (8006a74 <UART_SetConfig+0x2dc>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d004      	beq.n	8006804 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006800:	4313      	orrs	r3, r2
 8006802:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800680e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	6812      	ldr	r2, [r2, #0]
 8006816:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006818:	430b      	orrs	r3, r1
 800681a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006822:	f023 010f 	bic.w	r1, r3, #15
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a90      	ldr	r2, [pc, #576]	; (8006a78 <UART_SetConfig+0x2e0>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d125      	bne.n	8006888 <UART_SetConfig+0xf0>
 800683c:	4b8f      	ldr	r3, [pc, #572]	; (8006a7c <UART_SetConfig+0x2e4>)
 800683e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	2b03      	cmp	r3, #3
 8006848:	d81a      	bhi.n	8006880 <UART_SetConfig+0xe8>
 800684a:	a201      	add	r2, pc, #4	; (adr r2, 8006850 <UART_SetConfig+0xb8>)
 800684c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006850:	08006861 	.word	0x08006861
 8006854:	08006871 	.word	0x08006871
 8006858:	08006869 	.word	0x08006869
 800685c:	08006879 	.word	0x08006879
 8006860:	2301      	movs	r3, #1
 8006862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006866:	e116      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006868:	2302      	movs	r3, #2
 800686a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800686e:	e112      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006870:	2304      	movs	r3, #4
 8006872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006876:	e10e      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006878:	2308      	movs	r3, #8
 800687a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800687e:	e10a      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006880:	2310      	movs	r3, #16
 8006882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006886:	e106      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a7c      	ldr	r2, [pc, #496]	; (8006a80 <UART_SetConfig+0x2e8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d138      	bne.n	8006904 <UART_SetConfig+0x16c>
 8006892:	4b7a      	ldr	r3, [pc, #488]	; (8006a7c <UART_SetConfig+0x2e4>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f003 030c 	and.w	r3, r3, #12
 800689c:	2b0c      	cmp	r3, #12
 800689e:	d82d      	bhi.n	80068fc <UART_SetConfig+0x164>
 80068a0:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <UART_SetConfig+0x110>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068dd 	.word	0x080068dd
 80068ac:	080068fd 	.word	0x080068fd
 80068b0:	080068fd 	.word	0x080068fd
 80068b4:	080068fd 	.word	0x080068fd
 80068b8:	080068ed 	.word	0x080068ed
 80068bc:	080068fd 	.word	0x080068fd
 80068c0:	080068fd 	.word	0x080068fd
 80068c4:	080068fd 	.word	0x080068fd
 80068c8:	080068e5 	.word	0x080068e5
 80068cc:	080068fd 	.word	0x080068fd
 80068d0:	080068fd 	.word	0x080068fd
 80068d4:	080068fd 	.word	0x080068fd
 80068d8:	080068f5 	.word	0x080068f5
 80068dc:	2300      	movs	r3, #0
 80068de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068e2:	e0d8      	b.n	8006a96 <UART_SetConfig+0x2fe>
 80068e4:	2302      	movs	r3, #2
 80068e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068ea:	e0d4      	b.n	8006a96 <UART_SetConfig+0x2fe>
 80068ec:	2304      	movs	r3, #4
 80068ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068f2:	e0d0      	b.n	8006a96 <UART_SetConfig+0x2fe>
 80068f4:	2308      	movs	r3, #8
 80068f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068fa:	e0cc      	b.n	8006a96 <UART_SetConfig+0x2fe>
 80068fc:	2310      	movs	r3, #16
 80068fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006902:	e0c8      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a5e      	ldr	r2, [pc, #376]	; (8006a84 <UART_SetConfig+0x2ec>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d125      	bne.n	800695a <UART_SetConfig+0x1c2>
 800690e:	4b5b      	ldr	r3, [pc, #364]	; (8006a7c <UART_SetConfig+0x2e4>)
 8006910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006914:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006918:	2b30      	cmp	r3, #48	; 0x30
 800691a:	d016      	beq.n	800694a <UART_SetConfig+0x1b2>
 800691c:	2b30      	cmp	r3, #48	; 0x30
 800691e:	d818      	bhi.n	8006952 <UART_SetConfig+0x1ba>
 8006920:	2b20      	cmp	r3, #32
 8006922:	d00a      	beq.n	800693a <UART_SetConfig+0x1a2>
 8006924:	2b20      	cmp	r3, #32
 8006926:	d814      	bhi.n	8006952 <UART_SetConfig+0x1ba>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <UART_SetConfig+0x19a>
 800692c:	2b10      	cmp	r3, #16
 800692e:	d008      	beq.n	8006942 <UART_SetConfig+0x1aa>
 8006930:	e00f      	b.n	8006952 <UART_SetConfig+0x1ba>
 8006932:	2300      	movs	r3, #0
 8006934:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006938:	e0ad      	b.n	8006a96 <UART_SetConfig+0x2fe>
 800693a:	2302      	movs	r3, #2
 800693c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006940:	e0a9      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006942:	2304      	movs	r3, #4
 8006944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006948:	e0a5      	b.n	8006a96 <UART_SetConfig+0x2fe>
 800694a:	2308      	movs	r3, #8
 800694c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006950:	e0a1      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006952:	2310      	movs	r3, #16
 8006954:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006958:	e09d      	b.n	8006a96 <UART_SetConfig+0x2fe>
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a4a      	ldr	r2, [pc, #296]	; (8006a88 <UART_SetConfig+0x2f0>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d125      	bne.n	80069b0 <UART_SetConfig+0x218>
 8006964:	4b45      	ldr	r3, [pc, #276]	; (8006a7c <UART_SetConfig+0x2e4>)
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800696e:	2bc0      	cmp	r3, #192	; 0xc0
 8006970:	d016      	beq.n	80069a0 <UART_SetConfig+0x208>
 8006972:	2bc0      	cmp	r3, #192	; 0xc0
 8006974:	d818      	bhi.n	80069a8 <UART_SetConfig+0x210>
 8006976:	2b80      	cmp	r3, #128	; 0x80
 8006978:	d00a      	beq.n	8006990 <UART_SetConfig+0x1f8>
 800697a:	2b80      	cmp	r3, #128	; 0x80
 800697c:	d814      	bhi.n	80069a8 <UART_SetConfig+0x210>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <UART_SetConfig+0x1f0>
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d008      	beq.n	8006998 <UART_SetConfig+0x200>
 8006986:	e00f      	b.n	80069a8 <UART_SetConfig+0x210>
 8006988:	2300      	movs	r3, #0
 800698a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800698e:	e082      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006990:	2302      	movs	r3, #2
 8006992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006996:	e07e      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006998:	2304      	movs	r3, #4
 800699a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800699e:	e07a      	b.n	8006a96 <UART_SetConfig+0x2fe>
 80069a0:	2308      	movs	r3, #8
 80069a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069a6:	e076      	b.n	8006a96 <UART_SetConfig+0x2fe>
 80069a8:	2310      	movs	r3, #16
 80069aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ae:	e072      	b.n	8006a96 <UART_SetConfig+0x2fe>
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a35      	ldr	r2, [pc, #212]	; (8006a8c <UART_SetConfig+0x2f4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d12a      	bne.n	8006a10 <UART_SetConfig+0x278>
 80069ba:	4b30      	ldr	r3, [pc, #192]	; (8006a7c <UART_SetConfig+0x2e4>)
 80069bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c8:	d01a      	beq.n	8006a00 <UART_SetConfig+0x268>
 80069ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ce:	d81b      	bhi.n	8006a08 <UART_SetConfig+0x270>
 80069d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069d4:	d00c      	beq.n	80069f0 <UART_SetConfig+0x258>
 80069d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069da:	d815      	bhi.n	8006a08 <UART_SetConfig+0x270>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <UART_SetConfig+0x250>
 80069e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069e4:	d008      	beq.n	80069f8 <UART_SetConfig+0x260>
 80069e6:	e00f      	b.n	8006a08 <UART_SetConfig+0x270>
 80069e8:	2300      	movs	r3, #0
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ee:	e052      	b.n	8006a96 <UART_SetConfig+0x2fe>
 80069f0:	2302      	movs	r3, #2
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069f6:	e04e      	b.n	8006a96 <UART_SetConfig+0x2fe>
 80069f8:	2304      	movs	r3, #4
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fe:	e04a      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006a00:	2308      	movs	r3, #8
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a06:	e046      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006a08:	2310      	movs	r3, #16
 8006a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a0e:	e042      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a17      	ldr	r2, [pc, #92]	; (8006a74 <UART_SetConfig+0x2dc>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d13a      	bne.n	8006a90 <UART_SetConfig+0x2f8>
 8006a1a:	4b18      	ldr	r3, [pc, #96]	; (8006a7c <UART_SetConfig+0x2e4>)
 8006a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a28:	d01a      	beq.n	8006a60 <UART_SetConfig+0x2c8>
 8006a2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a2e:	d81b      	bhi.n	8006a68 <UART_SetConfig+0x2d0>
 8006a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a34:	d00c      	beq.n	8006a50 <UART_SetConfig+0x2b8>
 8006a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a3a:	d815      	bhi.n	8006a68 <UART_SetConfig+0x2d0>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <UART_SetConfig+0x2b0>
 8006a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a44:	d008      	beq.n	8006a58 <UART_SetConfig+0x2c0>
 8006a46:	e00f      	b.n	8006a68 <UART_SetConfig+0x2d0>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4e:	e022      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006a50:	2302      	movs	r3, #2
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a56:	e01e      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006a58:	2304      	movs	r3, #4
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5e:	e01a      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006a60:	2308      	movs	r3, #8
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a66:	e016      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006a68:	2310      	movs	r3, #16
 8006a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a6e:	e012      	b.n	8006a96 <UART_SetConfig+0x2fe>
 8006a70:	cfff69f3 	.word	0xcfff69f3
 8006a74:	40008000 	.word	0x40008000
 8006a78:	40013800 	.word	0x40013800
 8006a7c:	40021000 	.word	0x40021000
 8006a80:	40004400 	.word	0x40004400
 8006a84:	40004800 	.word	0x40004800
 8006a88:	40004c00 	.word	0x40004c00
 8006a8c:	40005000 	.word	0x40005000
 8006a90:	2310      	movs	r3, #16
 8006a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4aae      	ldr	r2, [pc, #696]	; (8006d54 <UART_SetConfig+0x5bc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	f040 8097 	bne.w	8006bd0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006aa6:	2b08      	cmp	r3, #8
 8006aa8:	d823      	bhi.n	8006af2 <UART_SetConfig+0x35a>
 8006aaa:	a201      	add	r2, pc, #4	; (adr r2, 8006ab0 <UART_SetConfig+0x318>)
 8006aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab0:	08006ad5 	.word	0x08006ad5
 8006ab4:	08006af3 	.word	0x08006af3
 8006ab8:	08006add 	.word	0x08006add
 8006abc:	08006af3 	.word	0x08006af3
 8006ac0:	08006ae3 	.word	0x08006ae3
 8006ac4:	08006af3 	.word	0x08006af3
 8006ac8:	08006af3 	.word	0x08006af3
 8006acc:	08006af3 	.word	0x08006af3
 8006ad0:	08006aeb 	.word	0x08006aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ad4:	f7fd f966 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8006ad8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ada:	e010      	b.n	8006afe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006adc:	4b9e      	ldr	r3, [pc, #632]	; (8006d58 <UART_SetConfig+0x5c0>)
 8006ade:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ae0:	e00d      	b.n	8006afe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae2:	f7fd f8f1 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8006ae6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ae8:	e009      	b.n	8006afe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006af0:	e005      	b.n	8006afe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006af2:	2300      	movs	r3, #0
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006afc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 8130 	beq.w	8006d66 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b0a:	4a94      	ldr	r2, [pc, #592]	; (8006d5c <UART_SetConfig+0x5c4>)
 8006b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b10:	461a      	mov	r2, r3
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b18:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	685a      	ldr	r2, [r3, #4]
 8006b1e:	4613      	mov	r3, r2
 8006b20:	005b      	lsls	r3, r3, #1
 8006b22:	4413      	add	r3, r2
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d305      	bcc.n	8006b36 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006b30:	69ba      	ldr	r2, [r7, #24]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d903      	bls.n	8006b3e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006b3c:	e113      	b.n	8006d66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	2200      	movs	r2, #0
 8006b42:	60bb      	str	r3, [r7, #8]
 8006b44:	60fa      	str	r2, [r7, #12]
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4a:	4a84      	ldr	r2, [pc, #528]	; (8006d5c <UART_SetConfig+0x5c4>)
 8006b4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	2200      	movs	r2, #0
 8006b54:	603b      	str	r3, [r7, #0]
 8006b56:	607a      	str	r2, [r7, #4]
 8006b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b5c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006b60:	f7fa f8ba 	bl	8000cd8 <__aeabi_uldivmod>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	4610      	mov	r0, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	020b      	lsls	r3, r1, #8
 8006b76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006b7a:	0202      	lsls	r2, r0, #8
 8006b7c:	6979      	ldr	r1, [r7, #20]
 8006b7e:	6849      	ldr	r1, [r1, #4]
 8006b80:	0849      	lsrs	r1, r1, #1
 8006b82:	2000      	movs	r0, #0
 8006b84:	460c      	mov	r4, r1
 8006b86:	4605      	mov	r5, r0
 8006b88:	eb12 0804 	adds.w	r8, r2, r4
 8006b8c:	eb43 0905 	adc.w	r9, r3, r5
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	469a      	mov	sl, r3
 8006b98:	4693      	mov	fp, r2
 8006b9a:	4652      	mov	r2, sl
 8006b9c:	465b      	mov	r3, fp
 8006b9e:	4640      	mov	r0, r8
 8006ba0:	4649      	mov	r1, r9
 8006ba2:	f7fa f899 	bl	8000cd8 <__aeabi_uldivmod>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	4613      	mov	r3, r2
 8006bac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb4:	d308      	bcc.n	8006bc8 <UART_SetConfig+0x430>
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bbc:	d204      	bcs.n	8006bc8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	6a3a      	ldr	r2, [r7, #32]
 8006bc4:	60da      	str	r2, [r3, #12]
 8006bc6:	e0ce      	b.n	8006d66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006bce:	e0ca      	b.n	8006d66 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bd8:	d166      	bne.n	8006ca8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006bda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006bde:	2b08      	cmp	r3, #8
 8006be0:	d827      	bhi.n	8006c32 <UART_SetConfig+0x49a>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <UART_SetConfig+0x450>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c0d 	.word	0x08006c0d
 8006bec:	08006c15 	.word	0x08006c15
 8006bf0:	08006c1d 	.word	0x08006c1d
 8006bf4:	08006c33 	.word	0x08006c33
 8006bf8:	08006c23 	.word	0x08006c23
 8006bfc:	08006c33 	.word	0x08006c33
 8006c00:	08006c33 	.word	0x08006c33
 8006c04:	08006c33 	.word	0x08006c33
 8006c08:	08006c2b 	.word	0x08006c2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c0c:	f7fd f8ca 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8006c10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c12:	e014      	b.n	8006c3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c14:	f7fd f8dc 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8006c18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c1a:	e010      	b.n	8006c3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c1c:	4b4e      	ldr	r3, [pc, #312]	; (8006d58 <UART_SetConfig+0x5c0>)
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c20:	e00d      	b.n	8006c3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c22:	f7fd f851 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8006c26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c28:	e009      	b.n	8006c3e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c30:	e005      	b.n	8006c3e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 8090 	beq.w	8006d66 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	4a44      	ldr	r2, [pc, #272]	; (8006d5c <UART_SetConfig+0x5c4>)
 8006c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c58:	005a      	lsls	r2, r3, #1
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	085b      	lsrs	r3, r3, #1
 8006c60:	441a      	add	r2, r3
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	2b0f      	cmp	r3, #15
 8006c70:	d916      	bls.n	8006ca0 <UART_SetConfig+0x508>
 8006c72:	6a3b      	ldr	r3, [r7, #32]
 8006c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c78:	d212      	bcs.n	8006ca0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f023 030f 	bic.w	r3, r3, #15
 8006c82:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	085b      	lsrs	r3, r3, #1
 8006c88:	b29b      	uxth	r3, r3
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	8bfb      	ldrh	r3, [r7, #30]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	8bfa      	ldrh	r2, [r7, #30]
 8006c9c:	60da      	str	r2, [r3, #12]
 8006c9e:	e062      	b.n	8006d66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ca6:	e05e      	b.n	8006d66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ca8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d828      	bhi.n	8006d02 <UART_SetConfig+0x56a>
 8006cb0:	a201      	add	r2, pc, #4	; (adr r2, 8006cb8 <UART_SetConfig+0x520>)
 8006cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb6:	bf00      	nop
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006ce5 	.word	0x08006ce5
 8006cc0:	08006ced 	.word	0x08006ced
 8006cc4:	08006d03 	.word	0x08006d03
 8006cc8:	08006cf3 	.word	0x08006cf3
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006d03 	.word	0x08006d03
 8006cd4:	08006d03 	.word	0x08006d03
 8006cd8:	08006cfb 	.word	0x08006cfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cdc:	f7fd f862 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8006ce0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ce2:	e014      	b.n	8006d0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ce4:	f7fd f874 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8006ce8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cea:	e010      	b.n	8006d0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cec:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <UART_SetConfig+0x5c0>)
 8006cee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cf0:	e00d      	b.n	8006d0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cf2:	f7fc ffe9 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8006cf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cf8:	e009      	b.n	8006d0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d00:	e005      	b.n	8006d0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006d02:	2300      	movs	r3, #0
 8006d04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d06:	2301      	movs	r3, #1
 8006d08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d028      	beq.n	8006d66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d18:	4a10      	ldr	r2, [pc, #64]	; (8006d5c <UART_SetConfig+0x5c4>)
 8006d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	fbb3 f2f2 	udiv	r2, r3, r2
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	085b      	lsrs	r3, r3, #1
 8006d2c:	441a      	add	r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	d910      	bls.n	8006d60 <UART_SetConfig+0x5c8>
 8006d3e:	6a3b      	ldr	r3, [r7, #32]
 8006d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d44:	d20c      	bcs.n	8006d60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60da      	str	r2, [r3, #12]
 8006d50:	e009      	b.n	8006d66 <UART_SetConfig+0x5ce>
 8006d52:	bf00      	nop
 8006d54:	40008000 	.word	0x40008000
 8006d58:	00f42400 	.word	0x00f42400
 8006d5c:	0800d654 	.word	0x0800d654
      }
      else
      {
        ret = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2201      	movs	r2, #1
 8006d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006d82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3730      	adds	r7, #48	; 0x30
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006d90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00a      	beq.n	8006dba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbe:	f003 0301 	and.w	r3, r3, #1
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de0:	f003 0302 	and.w	r3, r3, #2
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d00a      	beq.n	8006dfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e02:	f003 0304 	and.w	r3, r3, #4
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e24:	f003 0310 	and.w	r3, r3, #16
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00a      	beq.n	8006e42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	430a      	orrs	r2, r1
 8006e40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	f003 0320 	and.w	r3, r3, #32
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d00a      	beq.n	8006e64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01a      	beq.n	8006ea6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e8e:	d10a      	bne.n	8006ea6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	430a      	orrs	r2, r1
 8006ea4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	605a      	str	r2, [r3, #4]
  }
}
 8006ec8:	bf00      	nop
 8006eca:	370c      	adds	r7, #12
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b098      	sub	sp, #96	; 0x60
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ee4:	f7fb fea8 	bl	8002c38 <HAL_GetTick>
 8006ee8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0308 	and.w	r3, r3, #8
 8006ef4:	2b08      	cmp	r3, #8
 8006ef6:	d12f      	bne.n	8006f58 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ef8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f00:	2200      	movs	r2, #0
 8006f02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 f88e 	bl	8007028 <UART_WaitOnFlagUntilTimeout>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d022      	beq.n	8006f58 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f26:	653b      	str	r3, [r7, #80]	; 0x50
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f30:	647b      	str	r3, [r7, #68]	; 0x44
 8006f32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e6      	bne.n	8006f12 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e063      	b.n	8007020 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d149      	bne.n	8006ffa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f857 	bl	8007028 <UART_WaitOnFlagUntilTimeout>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d03c      	beq.n	8006ffa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9e:	633b      	str	r3, [r7, #48]	; 0x30
 8006fa0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e6      	bne.n	8006f80 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	e853 3f00 	ldrex	r3, [r3]
 8006fc0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f023 0301 	bic.w	r3, r3, #1
 8006fc8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fd2:	61fa      	str	r2, [r7, #28]
 8006fd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd6:	69b9      	ldr	r1, [r7, #24]
 8006fd8:	69fa      	ldr	r2, [r7, #28]
 8006fda:	e841 2300 	strex	r3, r2, [r1]
 8006fde:	617b      	str	r3, [r7, #20]
   return(result);
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1e5      	bne.n	8006fb2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e012      	b.n	8007020 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2220      	movs	r2, #32
 8006ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3758      	adds	r7, #88	; 0x58
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	603b      	str	r3, [r7, #0]
 8007034:	4613      	mov	r3, r2
 8007036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007038:	e04f      	b.n	80070da <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007040:	d04b      	beq.n	80070da <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007042:	f7fb fdf9 	bl	8002c38 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	429a      	cmp	r2, r3
 8007050:	d302      	bcc.n	8007058 <UART_WaitOnFlagUntilTimeout+0x30>
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e04e      	b.n	80070fa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b00      	cmp	r3, #0
 8007068:	d037      	beq.n	80070da <UART_WaitOnFlagUntilTimeout+0xb2>
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b80      	cmp	r3, #128	; 0x80
 800706e:	d034      	beq.n	80070da <UART_WaitOnFlagUntilTimeout+0xb2>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2b40      	cmp	r3, #64	; 0x40
 8007074:	d031      	beq.n	80070da <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69db      	ldr	r3, [r3, #28]
 800707c:	f003 0308 	and.w	r3, r3, #8
 8007080:	2b08      	cmp	r3, #8
 8007082:	d110      	bne.n	80070a6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2208      	movs	r2, #8
 800708a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f95b 	bl	8007348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2208      	movs	r2, #8
 8007096:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e029      	b.n	80070fa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070b4:	d111      	bne.n	80070da <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f000 f941 	bl	8007348 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e00f      	b.n	80070fa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69da      	ldr	r2, [r3, #28]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	4013      	ands	r3, r2
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	bf0c      	ite	eq
 80070ea:	2301      	moveq	r3, #1
 80070ec:	2300      	movne	r3, #0
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	461a      	mov	r2, r3
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d0a0      	beq.n	800703a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007104:	b480      	push	{r7}
 8007106:	b0a3      	sub	sp, #140	; 0x8c
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	4613      	mov	r3, r2
 8007110:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	88fa      	ldrh	r2, [r7, #6]
 8007124:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2200      	movs	r2, #0
 800712c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007136:	d10e      	bne.n	8007156 <UART_Start_Receive_IT+0x52>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d105      	bne.n	800714c <UART_Start_Receive_IT+0x48>
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007146:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800714a:	e02d      	b.n	80071a8 <UART_Start_Receive_IT+0xa4>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	22ff      	movs	r2, #255	; 0xff
 8007150:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007154:	e028      	b.n	80071a8 <UART_Start_Receive_IT+0xa4>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10d      	bne.n	800717a <UART_Start_Receive_IT+0x76>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <UART_Start_Receive_IT+0x6c>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	22ff      	movs	r2, #255	; 0xff
 800716a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800716e:	e01b      	b.n	80071a8 <UART_Start_Receive_IT+0xa4>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	227f      	movs	r2, #127	; 0x7f
 8007174:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007178:	e016      	b.n	80071a8 <UART_Start_Receive_IT+0xa4>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007182:	d10d      	bne.n	80071a0 <UART_Start_Receive_IT+0x9c>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d104      	bne.n	8007196 <UART_Start_Receive_IT+0x92>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	227f      	movs	r2, #127	; 0x7f
 8007190:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007194:	e008      	b.n	80071a8 <UART_Start_Receive_IT+0xa4>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	223f      	movs	r2, #63	; 0x3f
 800719a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800719e:	e003      	b.n	80071a8 <UART_Start_Receive_IT+0xa4>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2222      	movs	r2, #34	; 0x22
 80071b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	3308      	adds	r3, #8
 80071be:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071c2:	e853 3f00 	ldrex	r3, [r3]
 80071c6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80071c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071ca:	f043 0301 	orr.w	r3, r3, #1
 80071ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	3308      	adds	r3, #8
 80071d8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80071dc:	673a      	str	r2, [r7, #112]	; 0x70
 80071de:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80071e2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80071e4:	e841 2300 	strex	r3, r2, [r1]
 80071e8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80071ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d1e3      	bne.n	80071b8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071f8:	d14f      	bne.n	800729a <UART_Start_Receive_IT+0x196>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007200:	88fa      	ldrh	r2, [r7, #6]
 8007202:	429a      	cmp	r2, r3
 8007204:	d349      	bcc.n	800729a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800720e:	d107      	bne.n	8007220 <UART_Start_Receive_IT+0x11c>
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	691b      	ldr	r3, [r3, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d103      	bne.n	8007220 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4a47      	ldr	r2, [pc, #284]	; (8007338 <UART_Start_Receive_IT+0x234>)
 800721c:	675a      	str	r2, [r3, #116]	; 0x74
 800721e:	e002      	b.n	8007226 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a46      	ldr	r2, [pc, #280]	; (800733c <UART_Start_Receive_IT+0x238>)
 8007224:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01a      	beq.n	8007264 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007236:	e853 3f00 	ldrex	r3, [r3]
 800723a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800723c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800723e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007242:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007250:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007252:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007256:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007258:	e841 2300 	strex	r3, r2, [r1]
 800725c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800725e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007260:	2b00      	cmp	r3, #0
 8007262:	d1e4      	bne.n	800722e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3308      	adds	r3, #8
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800727a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3308      	adds	r3, #8
 8007282:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007284:	64ba      	str	r2, [r7, #72]	; 0x48
 8007286:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800728a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e5      	bne.n	8007264 <UART_Start_Receive_IT+0x160>
 8007298:	e046      	b.n	8007328 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	689b      	ldr	r3, [r3, #8]
 800729e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072a2:	d107      	bne.n	80072b4 <UART_Start_Receive_IT+0x1b0>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d103      	bne.n	80072b4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4a24      	ldr	r2, [pc, #144]	; (8007340 <UART_Start_Receive_IT+0x23c>)
 80072b0:	675a      	str	r2, [r3, #116]	; 0x74
 80072b2:	e002      	b.n	80072ba <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4a23      	ldr	r2, [pc, #140]	; (8007344 <UART_Start_Receive_IT+0x240>)
 80072b8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d019      	beq.n	80072f6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80072d6:	677b      	str	r3, [r7, #116]	; 0x74
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	461a      	mov	r2, r3
 80072de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072e0:	637b      	str	r3, [r7, #52]	; 0x34
 80072e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e6      	bne.n	80072c2 <UART_Start_Receive_IT+0x1be>
 80072f4:	e018      	b.n	8007328 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	613b      	str	r3, [r7, #16]
   return(result);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f043 0320 	orr.w	r3, r3, #32
 800730a:	67bb      	str	r3, [r7, #120]	; 0x78
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	461a      	mov	r2, r3
 8007312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007314:	623b      	str	r3, [r7, #32]
 8007316:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007318:	69f9      	ldr	r1, [r7, #28]
 800731a:	6a3a      	ldr	r2, [r7, #32]
 800731c:	e841 2300 	strex	r3, r2, [r1]
 8007320:	61bb      	str	r3, [r7, #24]
   return(result);
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d1e6      	bne.n	80072f6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	378c      	adds	r7, #140	; 0x8c
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	08007b69 	.word	0x08007b69
 800733c:	08007809 	.word	0x08007809
 8007340:	08007651 	.word	0x08007651
 8007344:	08007499 	.word	0x08007499

08007348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007348:	b480      	push	{r7}
 800734a:	b095      	sub	sp, #84	; 0x54
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	e853 3f00 	ldrex	r3, [r3]
 800735c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800735e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007360:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	461a      	mov	r2, r3
 800736c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800736e:	643b      	str	r3, [r7, #64]	; 0x40
 8007370:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800737c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e6      	bne.n	8007350 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3308      	adds	r3, #8
 8007388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	61fb      	str	r3, [r7, #28]
   return(result);
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007398:	f023 0301 	bic.w	r3, r3, #1
 800739c:	64bb      	str	r3, [r7, #72]	; 0x48
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3308      	adds	r3, #8
 80073a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ae:	e841 2300 	strex	r3, r2, [r1]
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d1e3      	bne.n	8007382 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d118      	bne.n	80073f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	e853 3f00 	ldrex	r3, [r3]
 80073ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	f023 0310 	bic.w	r3, r3, #16
 80073d6:	647b      	str	r3, [r7, #68]	; 0x44
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	461a      	mov	r2, r3
 80073de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e4:	6979      	ldr	r1, [r7, #20]
 80073e6:	69ba      	ldr	r2, [r7, #24]
 80073e8:	e841 2300 	strex	r3, r2, [r1]
 80073ec:	613b      	str	r3, [r7, #16]
   return(result);
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d1e6      	bne.n	80073c2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007408:	bf00      	nop
 800740a:	3754      	adds	r7, #84	; 0x54
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007420:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2200      	movs	r2, #0
 8007426:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff f99a 	bl	800676c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007438:	bf00      	nop
 800743a:	3710      	adds	r7, #16
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	e853 3f00 	ldrex	r3, [r3]
 8007454:	60bb      	str	r3, [r7, #8]
   return(result);
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	69fb      	ldr	r3, [r7, #28]
 8007466:	61bb      	str	r3, [r7, #24]
 8007468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746a:	6979      	ldr	r1, [r7, #20]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	e841 2300 	strex	r3, r2, [r1]
 8007472:	613b      	str	r3, [r7, #16]
   return(result);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1e6      	bne.n	8007448 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2220      	movs	r2, #32
 800747e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff f965 	bl	8006758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748e:	bf00      	nop
 8007490:	3720      	adds	r7, #32
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
	...

08007498 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b09c      	sub	sp, #112	; 0x70
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80074b0:	2b22      	cmp	r3, #34	; 0x22
 80074b2:	f040 80be 	bne.w	8007632 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80074c4:	b2d9      	uxtb	r1, r3
 80074c6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d0:	400a      	ands	r2, r1
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074da:	1c5a      	adds	r2, r3, #1
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	3b01      	subs	r3, #1
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f040 80a1 	bne.w	8007642 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007508:	e853 3f00 	ldrex	r3, [r3]
 800750c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800750e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007514:	66bb      	str	r3, [r7, #104]	; 0x68
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800751e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007520:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007522:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007524:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007526:	e841 2300 	strex	r3, r2, [r1]
 800752a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800752c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800752e:	2b00      	cmp	r3, #0
 8007530:	d1e6      	bne.n	8007500 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3308      	adds	r3, #8
 8007538:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	667b      	str	r3, [r7, #100]	; 0x64
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3308      	adds	r3, #8
 8007550:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007552:	647a      	str	r2, [r7, #68]	; 0x44
 8007554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e5      	bne.n	8007532 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2220      	movs	r2, #32
 800756a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a33      	ldr	r2, [pc, #204]	; (800764c <UART_RxISR_8BIT+0x1b4>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d01f      	beq.n	80075c4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d018      	beq.n	80075c4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759a:	e853 3f00 	ldrex	r3, [r3]
 800759e:	623b      	str	r3, [r7, #32]
   return(result);
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075a6:	663b      	str	r3, [r7, #96]	; 0x60
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	461a      	mov	r2, r3
 80075ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075b0:	633b      	str	r3, [r7, #48]	; 0x30
 80075b2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80075b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e6      	bne.n	8007592 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d12e      	bne.n	800762a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	60fb      	str	r3, [r7, #12]
   return(result);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0310 	bic.w	r3, r3, #16
 80075e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	461a      	mov	r2, r3
 80075ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075f0:	61fb      	str	r3, [r7, #28]
 80075f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f4:	69b9      	ldr	r1, [r7, #24]
 80075f6:	69fa      	ldr	r2, [r7, #28]
 80075f8:	e841 2300 	strex	r3, r2, [r1]
 80075fc:	617b      	str	r3, [r7, #20]
   return(result);
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1e6      	bne.n	80075d2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f003 0310 	and.w	r3, r3, #16
 800760e:	2b10      	cmp	r3, #16
 8007610:	d103      	bne.n	800761a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2210      	movs	r2, #16
 8007618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff f8ac 	bl	8006780 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007628:	e00b      	b.n	8007642 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7fa fe9e 	bl	800236c <HAL_UART_RxCpltCallback>
}
 8007630:	e007      	b.n	8007642 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	699a      	ldr	r2, [r3, #24]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f042 0208 	orr.w	r2, r2, #8
 8007640:	619a      	str	r2, [r3, #24]
}
 8007642:	bf00      	nop
 8007644:	3770      	adds	r7, #112	; 0x70
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	40008000 	.word	0x40008000

08007650 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b09c      	sub	sp, #112	; 0x70
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800765e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007668:	2b22      	cmp	r3, #34	; 0x22
 800766a:	f040 80be 	bne.w	80077ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800767e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007682:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007686:	4013      	ands	r3, r2
 8007688:	b29a      	uxth	r2, r3
 800768a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800768c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007692:	1c9a      	adds	r2, r3, #2
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800769e:	b29b      	uxth	r3, r3
 80076a0:	3b01      	subs	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f040 80a1 	bne.w	80077fa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80076c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076cc:	667b      	str	r3, [r7, #100]	; 0x64
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	461a      	mov	r2, r3
 80076d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80076d6:	657b      	str	r3, [r7, #84]	; 0x54
 80076d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80076dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e6      	bne.n	80076b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	3308      	adds	r3, #8
 80076f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f4:	e853 3f00 	ldrex	r3, [r3]
 80076f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	f023 0301 	bic.w	r3, r3, #1
 8007700:	663b      	str	r3, [r7, #96]	; 0x60
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3308      	adds	r3, #8
 8007708:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800770a:	643a      	str	r2, [r7, #64]	; 0x40
 800770c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800770e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007710:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007712:	e841 2300 	strex	r3, r2, [r1]
 8007716:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771a:	2b00      	cmp	r3, #0
 800771c:	d1e5      	bne.n	80076ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2220      	movs	r2, #32
 8007722:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a33      	ldr	r2, [pc, #204]	; (8007804 <UART_RxISR_16BIT+0x1b4>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d01f      	beq.n	800777c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d018      	beq.n	800777c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	e853 3f00 	ldrex	r3, [r3]
 8007756:	61fb      	str	r3, [r7, #28]
   return(result);
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800775e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	461a      	mov	r2, r3
 8007766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800776a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800776e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007770:	e841 2300 	strex	r3, r2, [r1]
 8007774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007778:	2b00      	cmp	r3, #0
 800777a:	d1e6      	bne.n	800774a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007780:	2b01      	cmp	r3, #1
 8007782:	d12e      	bne.n	80077e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	e853 3f00 	ldrex	r3, [r3]
 8007796:	60bb      	str	r3, [r7, #8]
   return(result);
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	f023 0310 	bic.w	r3, r3, #16
 800779e:	65bb      	str	r3, [r7, #88]	; 0x58
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80077a8:	61bb      	str	r3, [r7, #24]
 80077aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ac:	6979      	ldr	r1, [r7, #20]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	e841 2300 	strex	r3, r2, [r1]
 80077b4:	613b      	str	r3, [r7, #16]
   return(result);
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e6      	bne.n	800778a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f003 0310 	and.w	r3, r3, #16
 80077c6:	2b10      	cmp	r3, #16
 80077c8:	d103      	bne.n	80077d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2210      	movs	r2, #16
 80077d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fe ffd0 	bl	8006780 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077e0:	e00b      	b.n	80077fa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fa fdc2 	bl	800236c <HAL_UART_RxCpltCallback>
}
 80077e8:	e007      	b.n	80077fa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	699a      	ldr	r2, [r3, #24]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 0208 	orr.w	r2, r2, #8
 80077f8:	619a      	str	r2, [r3, #24]
}
 80077fa:	bf00      	nop
 80077fc:	3770      	adds	r7, #112	; 0x70
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40008000 	.word	0x40008000

08007808 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b0ac      	sub	sp, #176	; 0xb0
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007816:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800783e:	2b22      	cmp	r3, #34	; 0x22
 8007840:	f040 8182 	bne.w	8007b48 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800784a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800784e:	e125      	b.n	8007a9c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800785a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800785e:	b2d9      	uxtb	r1, r3
 8007860:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007864:	b2da      	uxtb	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786a:	400a      	ands	r2, r1
 800786c:	b2d2      	uxtb	r2, r2
 800786e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007874:	1c5a      	adds	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007880:	b29b      	uxth	r3, r3
 8007882:	3b01      	subs	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	69db      	ldr	r3, [r3, #28]
 8007892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007896:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d053      	beq.n	800794a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80078a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078a6:	f003 0301 	and.w	r3, r3, #1
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d011      	beq.n	80078d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80078ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80078b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00b      	beq.n	80078d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2201      	movs	r2, #1
 80078c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c8:	f043 0201 	orr.w	r2, r3, #1
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80078d6:	f003 0302 	and.w	r3, r3, #2
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d011      	beq.n	8007902 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80078de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d00b      	beq.n	8007902 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2202      	movs	r2, #2
 80078f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078f8:	f043 0204 	orr.w	r2, r3, #4
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b00      	cmp	r3, #0
 800790c:	d011      	beq.n	8007932 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800790e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007912:	f003 0301 	and.w	r3, r3, #1
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00b      	beq.n	8007932 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2204      	movs	r2, #4
 8007920:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007928:	f043 0202 	orr.w	r2, r3, #2
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007938:	2b00      	cmp	r3, #0
 800793a:	d006      	beq.n	800794a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7fe ff15 	bl	800676c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007950:	b29b      	uxth	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	f040 80a2 	bne.w	8007a9c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800796c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800797a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800797c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007980:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e4      	bne.n	8007958 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800799e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80079b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80079bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80079c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e1      	bne.n	800798e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2200      	movs	r2, #0
 80079dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a5f      	ldr	r2, [pc, #380]	; (8007b60 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d021      	beq.n	8007a2c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d01a      	beq.n	8007a2c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079fe:	e853 3f00 	ldrex	r3, [r3]
 8007a02:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	461a      	mov	r2, r3
 8007a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007a18:	657b      	str	r3, [r7, #84]	; 0x54
 8007a1a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a1e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a20:	e841 2300 	strex	r3, r2, [r1]
 8007a24:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d1e4      	bne.n	80079f6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d130      	bne.n	8007a96 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	f023 0310 	bic.w	r3, r3, #16
 8007a4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007a5e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a62:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a64:	e841 2300 	strex	r3, r2, [r1]
 8007a68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e4      	bne.n	8007a3a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	69db      	ldr	r3, [r3, #28]
 8007a76:	f003 0310 	and.w	r3, r3, #16
 8007a7a:	2b10      	cmp	r3, #16
 8007a7c:	d103      	bne.n	8007a86 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2210      	movs	r2, #16
 8007a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f7fe fe76 	bl	8006780 <HAL_UARTEx_RxEventCallback>
 8007a94:	e002      	b.n	8007a9c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7fa fc68 	bl	800236c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a9c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d006      	beq.n	8007ab2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007aa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007aa8:	f003 0320 	and.w	r3, r3, #32
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	f47f aecf 	bne.w	8007850 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ab8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007abc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d049      	beq.n	8007b58 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007aca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d242      	bcs.n	8007b58 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	3308      	adds	r3, #8
 8007ad8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3308      	adds	r3, #8
 8007af2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007af6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007af8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007afc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007afe:	e841 2300 	strex	r3, r2, [r1]
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1e3      	bne.n	8007ad2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a15      	ldr	r2, [pc, #84]	; (8007b64 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007b0e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	e853 3f00 	ldrex	r3, [r3]
 8007b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	f043 0320 	orr.w	r3, r3, #32
 8007b24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	6979      	ldr	r1, [r7, #20]
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e4      	bne.n	8007b10 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b46:	e007      	b.n	8007b58 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	699a      	ldr	r2, [r3, #24]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f042 0208 	orr.w	r2, r2, #8
 8007b56:	619a      	str	r2, [r3, #24]
}
 8007b58:	bf00      	nop
 8007b5a:	37b0      	adds	r7, #176	; 0xb0
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	40008000 	.word	0x40008000
 8007b64:	08007499 	.word	0x08007499

08007b68 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b0ae      	sub	sp, #184	; 0xb8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b76:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69db      	ldr	r3, [r3, #28]
 8007b80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b9e:	2b22      	cmp	r3, #34	; 0x22
 8007ba0:	f040 8186 	bne.w	8007eb0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007baa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bae:	e129      	b.n	8007e04 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007bc2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007bc6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007bca:	4013      	ands	r3, r2
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd8:	1c9a      	adds	r2, r3, #2
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007bfa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007bfe:	f003 0307 	and.w	r3, r3, #7
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d053      	beq.n	8007cae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c0a:	f003 0301 	and.w	r3, r3, #1
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d011      	beq.n	8007c36 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00b      	beq.n	8007c36 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2201      	movs	r2, #1
 8007c24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2c:	f043 0201 	orr.w	r2, r3, #1
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c36:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d011      	beq.n	8007c66 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007c42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c46:	f003 0301 	and.w	r3, r3, #1
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00b      	beq.n	8007c66 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2202      	movs	r2, #2
 8007c54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5c:	f043 0204 	orr.w	r2, r3, #4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007c6a:	f003 0304 	and.w	r3, r3, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d011      	beq.n	8007c96 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007c72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007c76:	f003 0301 	and.w	r3, r3, #1
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00b      	beq.n	8007c96 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	2204      	movs	r2, #4
 8007c84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8c:	f043 0202 	orr.w	r2, r3, #2
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d006      	beq.n	8007cae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fe fd63 	bl	800676c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f040 80a4 	bne.w	8007e04 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cde:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ce2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ce6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e2      	bne.n	8007cbc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3308      	adds	r3, #8
 8007cfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d00:	e853 3f00 	ldrex	r3, [r3]
 8007d04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007d1e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d20:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d22:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d26:	e841 2300 	strex	r3, r2, [r1]
 8007d2a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1e1      	bne.n	8007cf6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2220      	movs	r2, #32
 8007d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2200      	movs	r2, #0
 8007d44:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a5f      	ldr	r2, [pc, #380]	; (8007ec8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d021      	beq.n	8007d94 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d01a      	beq.n	8007d94 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e4      	bne.n	8007d5e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d130      	bne.n	8007dfe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db2:	f023 0310 	bic.w	r3, r3, #16
 8007db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007dc4:	647b      	str	r3, [r7, #68]	; 0x44
 8007dc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e4      	bne.n	8007da2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69db      	ldr	r3, [r3, #28]
 8007dde:	f003 0310 	and.w	r3, r3, #16
 8007de2:	2b10      	cmp	r3, #16
 8007de4:	d103      	bne.n	8007dee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2210      	movs	r2, #16
 8007dec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007df4:	4619      	mov	r1, r3
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f7fe fcc2 	bl	8006780 <HAL_UARTEx_RxEventCallback>
 8007dfc:	e002      	b.n	8007e04 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7fa fab4 	bl	800236c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e04:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d006      	beq.n	8007e1a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	f47f aecb 	bne.w	8007bb0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e20:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e24:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d049      	beq.n	8007ec0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e32:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d242      	bcs.n	8007ec0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	e853 3f00 	ldrex	r3, [r3]
 8007e48:	623b      	str	r3, [r7, #32]
   return(result);
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3308      	adds	r3, #8
 8007e5a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8007e5e:	633a      	str	r2, [r7, #48]	; 0x30
 8007e60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e66:	e841 2300 	strex	r3, r2, [r1]
 8007e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1e3      	bne.n	8007e3a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a15      	ldr	r2, [pc, #84]	; (8007ecc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007e76:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f043 0320 	orr.w	r3, r3, #32
 8007e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	461a      	mov	r2, r3
 8007e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e9a:	61fb      	str	r3, [r7, #28]
 8007e9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9e:	69b9      	ldr	r1, [r7, #24]
 8007ea0:	69fa      	ldr	r2, [r7, #28]
 8007ea2:	e841 2300 	strex	r3, r2, [r1]
 8007ea6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d1e4      	bne.n	8007e78 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007eae:	e007      	b.n	8007ec0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f042 0208 	orr.w	r2, r2, #8
 8007ebe:	619a      	str	r2, [r3, #24]
}
 8007ec0:	bf00      	nop
 8007ec2:	37b8      	adds	r7, #184	; 0xb8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	40008000 	.word	0x40008000
 8007ecc:	08007651 	.word	0x08007651

08007ed0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_UARTEx_DisableFifoMode+0x16>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e027      	b.n	8007f72 <HAL_UARTEx_DisableFifoMode+0x66>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2224      	movs	r2, #36	; 0x24
 8007f2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f022 0201 	bic.w	r2, r2, #1
 8007f48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007f50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2220      	movs	r2, #32
 8007f64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007f70:	2300      	movs	r3, #0
}
 8007f72:	4618      	mov	r0, r3
 8007f74:	3714      	adds	r7, #20
 8007f76:	46bd      	mov	sp, r7
 8007f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7c:	4770      	bx	lr

08007f7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e02d      	b.n	8007ff2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2224      	movs	r2, #36	; 0x24
 8007fa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0201 	bic.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f850 	bl	8008078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2220      	movs	r2, #32
 8007fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800800a:	2b01      	cmp	r3, #1
 800800c:	d101      	bne.n	8008012 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800800e:	2302      	movs	r3, #2
 8008010:	e02d      	b.n	800806e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2201      	movs	r2, #1
 8008016:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2224      	movs	r2, #36	; 0x24
 800801e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f022 0201 	bic.w	r2, r2, #1
 8008038:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	683a      	ldr	r2, [r7, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f812 	bl	8008078 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
	...

08008078 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008084:	2b00      	cmp	r3, #0
 8008086:	d108      	bne.n	800809a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008098:	e031      	b.n	80080fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800809a:	2308      	movs	r3, #8
 800809c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800809e:	2308      	movs	r3, #8
 80080a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	0e5b      	lsrs	r3, r3, #25
 80080aa:	b2db      	uxtb	r3, r3
 80080ac:	f003 0307 	and.w	r3, r3, #7
 80080b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	0f5b      	lsrs	r3, r3, #29
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	f003 0307 	and.w	r3, r3, #7
 80080c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	7b3a      	ldrb	r2, [r7, #12]
 80080c6:	4911      	ldr	r1, [pc, #68]	; (800810c <UARTEx_SetNbDataToProcess+0x94>)
 80080c8:	5c8a      	ldrb	r2, [r1, r2]
 80080ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80080ce:	7b3a      	ldrb	r2, [r7, #12]
 80080d0:	490f      	ldr	r1, [pc, #60]	; (8008110 <UARTEx_SetNbDataToProcess+0x98>)
 80080d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80080d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80080d8:	b29a      	uxth	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080e0:	7bfb      	ldrb	r3, [r7, #15]
 80080e2:	7b7a      	ldrb	r2, [r7, #13]
 80080e4:	4909      	ldr	r1, [pc, #36]	; (800810c <UARTEx_SetNbDataToProcess+0x94>)
 80080e6:	5c8a      	ldrb	r2, [r1, r2]
 80080e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80080ec:	7b7a      	ldrb	r2, [r7, #13]
 80080ee:	4908      	ldr	r1, [pc, #32]	; (8008110 <UARTEx_SetNbDataToProcess+0x98>)
 80080f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80080f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80080fe:	bf00      	nop
 8008100:	3714      	adds	r7, #20
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	0800d66c 	.word	0x0800d66c
 8008110:	0800d674 	.word	0x0800d674

08008114 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b08a      	sub	sp, #40	; 0x28
 8008118:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800811a:	2300      	movs	r3, #0
 800811c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800811e:	4b7d      	ldr	r3, [pc, #500]	; (8008314 <xTaskIncrementTick+0x200>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	f040 80ec 	bne.w	8008300 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008128:	4b7b      	ldr	r3, [pc, #492]	; (8008318 <xTaskIncrementTick+0x204>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3301      	adds	r3, #1
 800812e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008130:	4a79      	ldr	r2, [pc, #484]	; (8008318 <xTaskIncrementTick+0x204>)
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008136:	6a3b      	ldr	r3, [r7, #32]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d120      	bne.n	800817e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800813c:	4b77      	ldr	r3, [pc, #476]	; (800831c <xTaskIncrementTick+0x208>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814a:	f383 8811 	msr	BASEPRI, r3
 800814e:	f3bf 8f6f 	isb	sy
 8008152:	f3bf 8f4f 	dsb	sy
 8008156:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8008158:	bf00      	nop
 800815a:	e7fe      	b.n	800815a <xTaskIncrementTick+0x46>
 800815c:	4b6f      	ldr	r3, [pc, #444]	; (800831c <xTaskIncrementTick+0x208>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	61fb      	str	r3, [r7, #28]
 8008162:	4b6f      	ldr	r3, [pc, #444]	; (8008320 <xTaskIncrementTick+0x20c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a6d      	ldr	r2, [pc, #436]	; (800831c <xTaskIncrementTick+0x208>)
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	4a6d      	ldr	r2, [pc, #436]	; (8008320 <xTaskIncrementTick+0x20c>)
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	6013      	str	r3, [r2, #0]
 8008170:	4b6c      	ldr	r3, [pc, #432]	; (8008324 <xTaskIncrementTick+0x210>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3301      	adds	r3, #1
 8008176:	4a6b      	ldr	r2, [pc, #428]	; (8008324 <xTaskIncrementTick+0x210>)
 8008178:	6013      	str	r3, [r2, #0]
 800817a:	f000 f93d 	bl	80083f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800817e:	4b6a      	ldr	r3, [pc, #424]	; (8008328 <xTaskIncrementTick+0x214>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6a3a      	ldr	r2, [r7, #32]
 8008184:	429a      	cmp	r2, r3
 8008186:	f0c0 80a6 	bcc.w	80082d6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800818a:	4b64      	ldr	r3, [pc, #400]	; (800831c <xTaskIncrementTick+0x208>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d104      	bne.n	800819e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008194:	4b64      	ldr	r3, [pc, #400]	; (8008328 <xTaskIncrementTick+0x214>)
 8008196:	f04f 32ff 	mov.w	r2, #4294967295
 800819a:	601a      	str	r2, [r3, #0]
                    break;
 800819c:	e09b      	b.n	80082d6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800819e:	4b5f      	ldr	r3, [pc, #380]	; (800831c <xTaskIncrementTick+0x208>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	68db      	ldr	r3, [r3, #12]
 80081a6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80081ae:	6a3a      	ldr	r2, [r7, #32]
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d203      	bcs.n	80081be <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80081b6:	4a5c      	ldr	r2, [pc, #368]	; (8008328 <xTaskIncrementTick+0x214>)
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80081bc:	e08b      	b.n	80082d6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	695b      	ldr	r3, [r3, #20]
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	68d2      	ldr	r2, [r2, #12]
 80081cc:	609a      	str	r2, [r3, #8]
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	6892      	ldr	r2, [r2, #8]
 80081d6:	605a      	str	r2, [r3, #4]
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	685a      	ldr	r2, [r3, #4]
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	3304      	adds	r3, #4
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d103      	bne.n	80081ec <xTaskIncrementTick+0xd8>
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	68da      	ldr	r2, [r3, #12]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	605a      	str	r2, [r3, #4]
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	2200      	movs	r2, #0
 80081f0:	615a      	str	r2, [r3, #20]
 80081f2:	693b      	ldr	r3, [r7, #16]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	1e5a      	subs	r2, r3, #1
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80081fc:	69bb      	ldr	r3, [r7, #24]
 80081fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01e      	beq.n	8008242 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008204:	69bb      	ldr	r3, [r7, #24]
 8008206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008208:	60fb      	str	r3, [r7, #12]
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	6a12      	ldr	r2, [r2, #32]
 8008212:	609a      	str	r2, [r3, #8]
 8008214:	69bb      	ldr	r3, [r7, #24]
 8008216:	6a1b      	ldr	r3, [r3, #32]
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	69d2      	ldr	r2, [r2, #28]
 800821c:	605a      	str	r2, [r3, #4]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	3318      	adds	r3, #24
 8008226:	429a      	cmp	r2, r3
 8008228:	d103      	bne.n	8008232 <xTaskIncrementTick+0x11e>
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	6a1a      	ldr	r2, [r3, #32]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	605a      	str	r2, [r3, #4]
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2200      	movs	r2, #0
 8008236:	629a      	str	r2, [r3, #40]	; 0x28
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	1e5a      	subs	r2, r3, #1
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008246:	2201      	movs	r2, #1
 8008248:	409a      	lsls	r2, r3
 800824a:	4b38      	ldr	r3, [pc, #224]	; (800832c <xTaskIncrementTick+0x218>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4313      	orrs	r3, r2
 8008250:	4a36      	ldr	r2, [pc, #216]	; (800832c <xTaskIncrementTick+0x218>)
 8008252:	6013      	str	r3, [r2, #0]
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	4935      	ldr	r1, [pc, #212]	; (8008330 <xTaskIncrementTick+0x21c>)
 800825a:	4613      	mov	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	4413      	add	r3, r2
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	3304      	adds	r3, #4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	60bb      	str	r3, [r7, #8]
 800826a:	69bb      	ldr	r3, [r7, #24]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	609a      	str	r2, [r3, #8]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	69bb      	ldr	r3, [r7, #24]
 8008276:	60da      	str	r2, [r3, #12]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	69ba      	ldr	r2, [r7, #24]
 800827e:	3204      	adds	r2, #4
 8008280:	605a      	str	r2, [r3, #4]
 8008282:	69bb      	ldr	r3, [r7, #24]
 8008284:	1d1a      	adds	r2, r3, #4
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	609a      	str	r2, [r3, #8]
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800828e:	4613      	mov	r3, r2
 8008290:	009b      	lsls	r3, r3, #2
 8008292:	4413      	add	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	4a26      	ldr	r2, [pc, #152]	; (8008330 <xTaskIncrementTick+0x21c>)
 8008298:	441a      	add	r2, r3
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	615a      	str	r2, [r3, #20]
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a2:	4923      	ldr	r1, [pc, #140]	; (8008330 <xTaskIncrementTick+0x21c>)
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	1c59      	adds	r1, r3, #1
 80082b2:	481f      	ldr	r0, [pc, #124]	; (8008330 <xTaskIncrementTick+0x21c>)
 80082b4:	4613      	mov	r3, r2
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	4403      	add	r3, r0
 80082be:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c4:	4b1b      	ldr	r3, [pc, #108]	; (8008334 <xTaskIncrementTick+0x220>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ca:	429a      	cmp	r2, r3
 80082cc:	f67f af5d 	bls.w	800818a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80082d0:	2301      	movs	r3, #1
 80082d2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082d4:	e759      	b.n	800818a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80082d6:	4b17      	ldr	r3, [pc, #92]	; (8008334 <xTaskIncrementTick+0x220>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082dc:	4914      	ldr	r1, [pc, #80]	; (8008330 <xTaskIncrementTick+0x21c>)
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d901      	bls.n	80082f2 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80082ee:	2301      	movs	r3, #1
 80082f0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80082f2:	4b11      	ldr	r3, [pc, #68]	; (8008338 <xTaskIncrementTick+0x224>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80082fa:	2301      	movs	r3, #1
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
 80082fe:	e004      	b.n	800830a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008300:	4b0e      	ldr	r3, [pc, #56]	; (800833c <xTaskIncrementTick+0x228>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	3301      	adds	r3, #1
 8008306:	4a0d      	ldr	r2, [pc, #52]	; (800833c <xTaskIncrementTick+0x228>)
 8008308:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800830c:	4618      	mov	r0, r3
 800830e:	3728      	adds	r7, #40	; 0x28
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	200006cc 	.word	0x200006cc
 8008318:	200006b4 	.word	0x200006b4
 800831c:	200006ac 	.word	0x200006ac
 8008320:	200006b0 	.word	0x200006b0
 8008324:	200006c4 	.word	0x200006c4
 8008328:	200006c8 	.word	0x200006c8
 800832c:	200006b8 	.word	0x200006b8
 8008330:	20000648 	.word	0x20000648
 8008334:	20000644 	.word	0x20000644
 8008338:	200006c0 	.word	0x200006c0
 800833c:	200006bc 	.word	0x200006bc

08008340 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008346:	4b27      	ldr	r3, [pc, #156]	; (80083e4 <vTaskSwitchContext+0xa4>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800834e:	4b26      	ldr	r3, [pc, #152]	; (80083e8 <vTaskSwitchContext+0xa8>)
 8008350:	2201      	movs	r2, #1
 8008352:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008354:	e03f      	b.n	80083d6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8008356:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <vTaskSwitchContext+0xa8>)
 8008358:	2200      	movs	r2, #0
 800835a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800835c:	4b23      	ldr	r3, [pc, #140]	; (80083ec <vTaskSwitchContext+0xac>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	fab3 f383 	clz	r3, r3
 8008368:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800836a:	7afb      	ldrb	r3, [r7, #11]
 800836c:	f1c3 031f 	rsb	r3, r3, #31
 8008370:	617b      	str	r3, [r7, #20]
 8008372:	491f      	ldr	r1, [pc, #124]	; (80083f0 <vTaskSwitchContext+0xb0>)
 8008374:	697a      	ldr	r2, [r7, #20]
 8008376:	4613      	mov	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4413      	add	r3, r2
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	440b      	add	r3, r1
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d10a      	bne.n	800839c <vTaskSwitchContext+0x5c>
        __asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	607b      	str	r3, [r7, #4]
    }
 8008398:	bf00      	nop
 800839a:	e7fe      	b.n	800839a <vTaskSwitchContext+0x5a>
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	4613      	mov	r3, r2
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	4413      	add	r3, r2
 80083a4:	009b      	lsls	r3, r3, #2
 80083a6:	4a12      	ldr	r2, [pc, #72]	; (80083f0 <vTaskSwitchContext+0xb0>)
 80083a8:	4413      	add	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	605a      	str	r2, [r3, #4]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	3308      	adds	r3, #8
 80083be:	429a      	cmp	r2, r3
 80083c0:	d104      	bne.n	80083cc <vTaskSwitchContext+0x8c>
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	605a      	str	r2, [r3, #4]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	4a08      	ldr	r2, [pc, #32]	; (80083f4 <vTaskSwitchContext+0xb4>)
 80083d4:	6013      	str	r3, [r2, #0]
}
 80083d6:	bf00      	nop
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	200006cc 	.word	0x200006cc
 80083e8:	200006c0 	.word	0x200006c0
 80083ec:	200006b8 	.word	0x200006b8
 80083f0:	20000648 	.word	0x20000648
 80083f4:	20000644 	.word	0x20000644

080083f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083fc:	4b0a      	ldr	r3, [pc, #40]	; (8008428 <prvResetNextTaskUnblockTime+0x30>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d104      	bne.n	8008410 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8008406:	4b09      	ldr	r3, [pc, #36]	; (800842c <prvResetNextTaskUnblockTime+0x34>)
 8008408:	f04f 32ff 	mov.w	r2, #4294967295
 800840c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800840e:	e005      	b.n	800841c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008410:	4b05      	ldr	r3, [pc, #20]	; (8008428 <prvResetNextTaskUnblockTime+0x30>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a04      	ldr	r2, [pc, #16]	; (800842c <prvResetNextTaskUnblockTime+0x34>)
 800841a:	6013      	str	r3, [r2, #0]
}
 800841c:	bf00      	nop
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	200006ac 	.word	0x200006ac
 800842c:	200006c8 	.word	0x200006c8

08008430 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008430:	4b07      	ldr	r3, [pc, #28]	; (8008450 <pxCurrentTCBConst2>)
 8008432:	6819      	ldr	r1, [r3, #0]
 8008434:	6808      	ldr	r0, [r1, #0]
 8008436:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843a:	f380 8809 	msr	PSP, r0
 800843e:	f3bf 8f6f 	isb	sy
 8008442:	f04f 0000 	mov.w	r0, #0
 8008446:	f380 8811 	msr	BASEPRI, r0
 800844a:	4770      	bx	lr
 800844c:	f3af 8000 	nop.w

08008450 <pxCurrentTCBConst2>:
 8008450:	20000644 	.word	0x20000644
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
	...

08008460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008460:	f3ef 8009 	mrs	r0, PSP
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <pxCurrentTCBConst>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	f01e 0f10 	tst.w	lr, #16
 8008470:	bf08      	it	eq
 8008472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847a:	6010      	str	r0, [r2, #0]
 800847c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008484:	f380 8811 	msr	BASEPRI, r0
 8008488:	f3bf 8f4f 	dsb	sy
 800848c:	f3bf 8f6f 	isb	sy
 8008490:	f7ff ff56 	bl	8008340 <vTaskSwitchContext>
 8008494:	f04f 0000 	mov.w	r0, #0
 8008498:	f380 8811 	msr	BASEPRI, r0
 800849c:	bc09      	pop	{r0, r3}
 800849e:	6819      	ldr	r1, [r3, #0]
 80084a0:	6808      	ldr	r0, [r1, #0]
 80084a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084a6:	f01e 0f10 	tst.w	lr, #16
 80084aa:	bf08      	it	eq
 80084ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084b0:	f380 8809 	msr	PSP, r0
 80084b4:	f3bf 8f6f 	isb	sy
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	f3af 8000 	nop.w

080084c0 <pxCurrentTCBConst>:
 80084c0:	20000644 	.word	0x20000644
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop

080084c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
        __asm volatile
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	607b      	str	r3, [r7, #4]
    }
 80084e0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80084e2:	f7ff fe17 	bl	8008114 <xTaskIncrementTick>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <SysTick_Handler+0x40>)
 80084ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	2300      	movs	r3, #0
 80084f6:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80084fe:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	e000ed04 	.word	0xe000ed04

0800850c <__cvt>:
 800850c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	ec55 4b10 	vmov	r4, r5, d0
 8008514:	2d00      	cmp	r5, #0
 8008516:	460e      	mov	r6, r1
 8008518:	4619      	mov	r1, r3
 800851a:	462b      	mov	r3, r5
 800851c:	bfbb      	ittet	lt
 800851e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008522:	461d      	movlt	r5, r3
 8008524:	2300      	movge	r3, #0
 8008526:	232d      	movlt	r3, #45	; 0x2d
 8008528:	700b      	strb	r3, [r1, #0]
 800852a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800852c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008530:	4691      	mov	r9, r2
 8008532:	f023 0820 	bic.w	r8, r3, #32
 8008536:	bfbc      	itt	lt
 8008538:	4622      	movlt	r2, r4
 800853a:	4614      	movlt	r4, r2
 800853c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008540:	d005      	beq.n	800854e <__cvt+0x42>
 8008542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008546:	d100      	bne.n	800854a <__cvt+0x3e>
 8008548:	3601      	adds	r6, #1
 800854a:	2102      	movs	r1, #2
 800854c:	e000      	b.n	8008550 <__cvt+0x44>
 800854e:	2103      	movs	r1, #3
 8008550:	ab03      	add	r3, sp, #12
 8008552:	9301      	str	r3, [sp, #4]
 8008554:	ab02      	add	r3, sp, #8
 8008556:	9300      	str	r3, [sp, #0]
 8008558:	ec45 4b10 	vmov	d0, r4, r5
 800855c:	4653      	mov	r3, sl
 800855e:	4632      	mov	r2, r6
 8008560:	f001 f8ca 	bl	80096f8 <_dtoa_r>
 8008564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008568:	4607      	mov	r7, r0
 800856a:	d102      	bne.n	8008572 <__cvt+0x66>
 800856c:	f019 0f01 	tst.w	r9, #1
 8008570:	d022      	beq.n	80085b8 <__cvt+0xac>
 8008572:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008576:	eb07 0906 	add.w	r9, r7, r6
 800857a:	d110      	bne.n	800859e <__cvt+0x92>
 800857c:	783b      	ldrb	r3, [r7, #0]
 800857e:	2b30      	cmp	r3, #48	; 0x30
 8008580:	d10a      	bne.n	8008598 <__cvt+0x8c>
 8008582:	2200      	movs	r2, #0
 8008584:	2300      	movs	r3, #0
 8008586:	4620      	mov	r0, r4
 8008588:	4629      	mov	r1, r5
 800858a:	f7f8 fac5 	bl	8000b18 <__aeabi_dcmpeq>
 800858e:	b918      	cbnz	r0, 8008598 <__cvt+0x8c>
 8008590:	f1c6 0601 	rsb	r6, r6, #1
 8008594:	f8ca 6000 	str.w	r6, [sl]
 8008598:	f8da 3000 	ldr.w	r3, [sl]
 800859c:	4499      	add	r9, r3
 800859e:	2200      	movs	r2, #0
 80085a0:	2300      	movs	r3, #0
 80085a2:	4620      	mov	r0, r4
 80085a4:	4629      	mov	r1, r5
 80085a6:	f7f8 fab7 	bl	8000b18 <__aeabi_dcmpeq>
 80085aa:	b108      	cbz	r0, 80085b0 <__cvt+0xa4>
 80085ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80085b0:	2230      	movs	r2, #48	; 0x30
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	454b      	cmp	r3, r9
 80085b6:	d307      	bcc.n	80085c8 <__cvt+0xbc>
 80085b8:	9b03      	ldr	r3, [sp, #12]
 80085ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80085bc:	1bdb      	subs	r3, r3, r7
 80085be:	4638      	mov	r0, r7
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	b004      	add	sp, #16
 80085c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c8:	1c59      	adds	r1, r3, #1
 80085ca:	9103      	str	r1, [sp, #12]
 80085cc:	701a      	strb	r2, [r3, #0]
 80085ce:	e7f0      	b.n	80085b2 <__cvt+0xa6>

080085d0 <__exponent>:
 80085d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085d2:	4603      	mov	r3, r0
 80085d4:	2900      	cmp	r1, #0
 80085d6:	bfb8      	it	lt
 80085d8:	4249      	neglt	r1, r1
 80085da:	f803 2b02 	strb.w	r2, [r3], #2
 80085de:	bfb4      	ite	lt
 80085e0:	222d      	movlt	r2, #45	; 0x2d
 80085e2:	222b      	movge	r2, #43	; 0x2b
 80085e4:	2909      	cmp	r1, #9
 80085e6:	7042      	strb	r2, [r0, #1]
 80085e8:	dd2a      	ble.n	8008640 <__exponent+0x70>
 80085ea:	f10d 0207 	add.w	r2, sp, #7
 80085ee:	4617      	mov	r7, r2
 80085f0:	260a      	movs	r6, #10
 80085f2:	4694      	mov	ip, r2
 80085f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80085f8:	fb06 1415 	mls	r4, r6, r5, r1
 80085fc:	3430      	adds	r4, #48	; 0x30
 80085fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008602:	460c      	mov	r4, r1
 8008604:	2c63      	cmp	r4, #99	; 0x63
 8008606:	f102 32ff 	add.w	r2, r2, #4294967295
 800860a:	4629      	mov	r1, r5
 800860c:	dcf1      	bgt.n	80085f2 <__exponent+0x22>
 800860e:	3130      	adds	r1, #48	; 0x30
 8008610:	f1ac 0402 	sub.w	r4, ip, #2
 8008614:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008618:	1c41      	adds	r1, r0, #1
 800861a:	4622      	mov	r2, r4
 800861c:	42ba      	cmp	r2, r7
 800861e:	d30a      	bcc.n	8008636 <__exponent+0x66>
 8008620:	f10d 0209 	add.w	r2, sp, #9
 8008624:	eba2 020c 	sub.w	r2, r2, ip
 8008628:	42bc      	cmp	r4, r7
 800862a:	bf88      	it	hi
 800862c:	2200      	movhi	r2, #0
 800862e:	4413      	add	r3, r2
 8008630:	1a18      	subs	r0, r3, r0
 8008632:	b003      	add	sp, #12
 8008634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008636:	f812 5b01 	ldrb.w	r5, [r2], #1
 800863a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800863e:	e7ed      	b.n	800861c <__exponent+0x4c>
 8008640:	2330      	movs	r3, #48	; 0x30
 8008642:	3130      	adds	r1, #48	; 0x30
 8008644:	7083      	strb	r3, [r0, #2]
 8008646:	70c1      	strb	r1, [r0, #3]
 8008648:	1d03      	adds	r3, r0, #4
 800864a:	e7f1      	b.n	8008630 <__exponent+0x60>

0800864c <_printf_float>:
 800864c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008650:	ed2d 8b02 	vpush	{d8}
 8008654:	b08d      	sub	sp, #52	; 0x34
 8008656:	460c      	mov	r4, r1
 8008658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800865c:	4616      	mov	r6, r2
 800865e:	461f      	mov	r7, r3
 8008660:	4605      	mov	r5, r0
 8008662:	f000 ff33 	bl	80094cc <_localeconv_r>
 8008666:	f8d0 a000 	ldr.w	sl, [r0]
 800866a:	4650      	mov	r0, sl
 800866c:	f7f7 fe28 	bl	80002c0 <strlen>
 8008670:	2300      	movs	r3, #0
 8008672:	930a      	str	r3, [sp, #40]	; 0x28
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	9305      	str	r3, [sp, #20]
 8008678:	f8d8 3000 	ldr.w	r3, [r8]
 800867c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008680:	3307      	adds	r3, #7
 8008682:	f023 0307 	bic.w	r3, r3, #7
 8008686:	f103 0208 	add.w	r2, r3, #8
 800868a:	f8c8 2000 	str.w	r2, [r8]
 800868e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008692:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008696:	9307      	str	r3, [sp, #28]
 8008698:	f8cd 8018 	str.w	r8, [sp, #24]
 800869c:	ee08 0a10 	vmov	s16, r0
 80086a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80086a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086a8:	4b9e      	ldr	r3, [pc, #632]	; (8008924 <_printf_float+0x2d8>)
 80086aa:	f04f 32ff 	mov.w	r2, #4294967295
 80086ae:	f7f8 fa65 	bl	8000b7c <__aeabi_dcmpun>
 80086b2:	bb88      	cbnz	r0, 8008718 <_printf_float+0xcc>
 80086b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086b8:	4b9a      	ldr	r3, [pc, #616]	; (8008924 <_printf_float+0x2d8>)
 80086ba:	f04f 32ff 	mov.w	r2, #4294967295
 80086be:	f7f8 fa3f 	bl	8000b40 <__aeabi_dcmple>
 80086c2:	bb48      	cbnz	r0, 8008718 <_printf_float+0xcc>
 80086c4:	2200      	movs	r2, #0
 80086c6:	2300      	movs	r3, #0
 80086c8:	4640      	mov	r0, r8
 80086ca:	4649      	mov	r1, r9
 80086cc:	f7f8 fa2e 	bl	8000b2c <__aeabi_dcmplt>
 80086d0:	b110      	cbz	r0, 80086d8 <_printf_float+0x8c>
 80086d2:	232d      	movs	r3, #45	; 0x2d
 80086d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086d8:	4a93      	ldr	r2, [pc, #588]	; (8008928 <_printf_float+0x2dc>)
 80086da:	4b94      	ldr	r3, [pc, #592]	; (800892c <_printf_float+0x2e0>)
 80086dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086e0:	bf94      	ite	ls
 80086e2:	4690      	movls	r8, r2
 80086e4:	4698      	movhi	r8, r3
 80086e6:	2303      	movs	r3, #3
 80086e8:	6123      	str	r3, [r4, #16]
 80086ea:	9b05      	ldr	r3, [sp, #20]
 80086ec:	f023 0304 	bic.w	r3, r3, #4
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	f04f 0900 	mov.w	r9, #0
 80086f6:	9700      	str	r7, [sp, #0]
 80086f8:	4633      	mov	r3, r6
 80086fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80086fc:	4621      	mov	r1, r4
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 f9da 	bl	8008ab8 <_printf_common>
 8008704:	3001      	adds	r0, #1
 8008706:	f040 8090 	bne.w	800882a <_printf_float+0x1de>
 800870a:	f04f 30ff 	mov.w	r0, #4294967295
 800870e:	b00d      	add	sp, #52	; 0x34
 8008710:	ecbd 8b02 	vpop	{d8}
 8008714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008718:	4642      	mov	r2, r8
 800871a:	464b      	mov	r3, r9
 800871c:	4640      	mov	r0, r8
 800871e:	4649      	mov	r1, r9
 8008720:	f7f8 fa2c 	bl	8000b7c <__aeabi_dcmpun>
 8008724:	b140      	cbz	r0, 8008738 <_printf_float+0xec>
 8008726:	464b      	mov	r3, r9
 8008728:	2b00      	cmp	r3, #0
 800872a:	bfbc      	itt	lt
 800872c:	232d      	movlt	r3, #45	; 0x2d
 800872e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008732:	4a7f      	ldr	r2, [pc, #508]	; (8008930 <_printf_float+0x2e4>)
 8008734:	4b7f      	ldr	r3, [pc, #508]	; (8008934 <_printf_float+0x2e8>)
 8008736:	e7d1      	b.n	80086dc <_printf_float+0x90>
 8008738:	6863      	ldr	r3, [r4, #4]
 800873a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800873e:	9206      	str	r2, [sp, #24]
 8008740:	1c5a      	adds	r2, r3, #1
 8008742:	d13f      	bne.n	80087c4 <_printf_float+0x178>
 8008744:	2306      	movs	r3, #6
 8008746:	6063      	str	r3, [r4, #4]
 8008748:	9b05      	ldr	r3, [sp, #20]
 800874a:	6861      	ldr	r1, [r4, #4]
 800874c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008750:	2300      	movs	r3, #0
 8008752:	9303      	str	r3, [sp, #12]
 8008754:	ab0a      	add	r3, sp, #40	; 0x28
 8008756:	e9cd b301 	strd	fp, r3, [sp, #4]
 800875a:	ab09      	add	r3, sp, #36	; 0x24
 800875c:	ec49 8b10 	vmov	d0, r8, r9
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	6022      	str	r2, [r4, #0]
 8008764:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008768:	4628      	mov	r0, r5
 800876a:	f7ff fecf 	bl	800850c <__cvt>
 800876e:	9b06      	ldr	r3, [sp, #24]
 8008770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008772:	2b47      	cmp	r3, #71	; 0x47
 8008774:	4680      	mov	r8, r0
 8008776:	d108      	bne.n	800878a <_printf_float+0x13e>
 8008778:	1cc8      	adds	r0, r1, #3
 800877a:	db02      	blt.n	8008782 <_printf_float+0x136>
 800877c:	6863      	ldr	r3, [r4, #4]
 800877e:	4299      	cmp	r1, r3
 8008780:	dd41      	ble.n	8008806 <_printf_float+0x1ba>
 8008782:	f1ab 0302 	sub.w	r3, fp, #2
 8008786:	fa5f fb83 	uxtb.w	fp, r3
 800878a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800878e:	d820      	bhi.n	80087d2 <_printf_float+0x186>
 8008790:	3901      	subs	r1, #1
 8008792:	465a      	mov	r2, fp
 8008794:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008798:	9109      	str	r1, [sp, #36]	; 0x24
 800879a:	f7ff ff19 	bl	80085d0 <__exponent>
 800879e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087a0:	1813      	adds	r3, r2, r0
 80087a2:	2a01      	cmp	r2, #1
 80087a4:	4681      	mov	r9, r0
 80087a6:	6123      	str	r3, [r4, #16]
 80087a8:	dc02      	bgt.n	80087b0 <_printf_float+0x164>
 80087aa:	6822      	ldr	r2, [r4, #0]
 80087ac:	07d2      	lsls	r2, r2, #31
 80087ae:	d501      	bpl.n	80087b4 <_printf_float+0x168>
 80087b0:	3301      	adds	r3, #1
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d09c      	beq.n	80086f6 <_printf_float+0xaa>
 80087bc:	232d      	movs	r3, #45	; 0x2d
 80087be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087c2:	e798      	b.n	80086f6 <_printf_float+0xaa>
 80087c4:	9a06      	ldr	r2, [sp, #24]
 80087c6:	2a47      	cmp	r2, #71	; 0x47
 80087c8:	d1be      	bne.n	8008748 <_printf_float+0xfc>
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1bc      	bne.n	8008748 <_printf_float+0xfc>
 80087ce:	2301      	movs	r3, #1
 80087d0:	e7b9      	b.n	8008746 <_printf_float+0xfa>
 80087d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087d6:	d118      	bne.n	800880a <_printf_float+0x1be>
 80087d8:	2900      	cmp	r1, #0
 80087da:	6863      	ldr	r3, [r4, #4]
 80087dc:	dd0b      	ble.n	80087f6 <_printf_float+0x1aa>
 80087de:	6121      	str	r1, [r4, #16]
 80087e0:	b913      	cbnz	r3, 80087e8 <_printf_float+0x19c>
 80087e2:	6822      	ldr	r2, [r4, #0]
 80087e4:	07d0      	lsls	r0, r2, #31
 80087e6:	d502      	bpl.n	80087ee <_printf_float+0x1a2>
 80087e8:	3301      	adds	r3, #1
 80087ea:	440b      	add	r3, r1
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80087f0:	f04f 0900 	mov.w	r9, #0
 80087f4:	e7de      	b.n	80087b4 <_printf_float+0x168>
 80087f6:	b913      	cbnz	r3, 80087fe <_printf_float+0x1b2>
 80087f8:	6822      	ldr	r2, [r4, #0]
 80087fa:	07d2      	lsls	r2, r2, #31
 80087fc:	d501      	bpl.n	8008802 <_printf_float+0x1b6>
 80087fe:	3302      	adds	r3, #2
 8008800:	e7f4      	b.n	80087ec <_printf_float+0x1a0>
 8008802:	2301      	movs	r3, #1
 8008804:	e7f2      	b.n	80087ec <_printf_float+0x1a0>
 8008806:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800880a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800880c:	4299      	cmp	r1, r3
 800880e:	db05      	blt.n	800881c <_printf_float+0x1d0>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	6121      	str	r1, [r4, #16]
 8008814:	07d8      	lsls	r0, r3, #31
 8008816:	d5ea      	bpl.n	80087ee <_printf_float+0x1a2>
 8008818:	1c4b      	adds	r3, r1, #1
 800881a:	e7e7      	b.n	80087ec <_printf_float+0x1a0>
 800881c:	2900      	cmp	r1, #0
 800881e:	bfd4      	ite	le
 8008820:	f1c1 0202 	rsble	r2, r1, #2
 8008824:	2201      	movgt	r2, #1
 8008826:	4413      	add	r3, r2
 8008828:	e7e0      	b.n	80087ec <_printf_float+0x1a0>
 800882a:	6823      	ldr	r3, [r4, #0]
 800882c:	055a      	lsls	r2, r3, #21
 800882e:	d407      	bmi.n	8008840 <_printf_float+0x1f4>
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	4642      	mov	r2, r8
 8008834:	4631      	mov	r1, r6
 8008836:	4628      	mov	r0, r5
 8008838:	47b8      	blx	r7
 800883a:	3001      	adds	r0, #1
 800883c:	d12c      	bne.n	8008898 <_printf_float+0x24c>
 800883e:	e764      	b.n	800870a <_printf_float+0xbe>
 8008840:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008844:	f240 80e0 	bls.w	8008a08 <_printf_float+0x3bc>
 8008848:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800884c:	2200      	movs	r2, #0
 800884e:	2300      	movs	r3, #0
 8008850:	f7f8 f962 	bl	8000b18 <__aeabi_dcmpeq>
 8008854:	2800      	cmp	r0, #0
 8008856:	d034      	beq.n	80088c2 <_printf_float+0x276>
 8008858:	4a37      	ldr	r2, [pc, #220]	; (8008938 <_printf_float+0x2ec>)
 800885a:	2301      	movs	r3, #1
 800885c:	4631      	mov	r1, r6
 800885e:	4628      	mov	r0, r5
 8008860:	47b8      	blx	r7
 8008862:	3001      	adds	r0, #1
 8008864:	f43f af51 	beq.w	800870a <_printf_float+0xbe>
 8008868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800886c:	429a      	cmp	r2, r3
 800886e:	db02      	blt.n	8008876 <_printf_float+0x22a>
 8008870:	6823      	ldr	r3, [r4, #0]
 8008872:	07d8      	lsls	r0, r3, #31
 8008874:	d510      	bpl.n	8008898 <_printf_float+0x24c>
 8008876:	ee18 3a10 	vmov	r3, s16
 800887a:	4652      	mov	r2, sl
 800887c:	4631      	mov	r1, r6
 800887e:	4628      	mov	r0, r5
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	f43f af41 	beq.w	800870a <_printf_float+0xbe>
 8008888:	f04f 0800 	mov.w	r8, #0
 800888c:	f104 091a 	add.w	r9, r4, #26
 8008890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008892:	3b01      	subs	r3, #1
 8008894:	4543      	cmp	r3, r8
 8008896:	dc09      	bgt.n	80088ac <_printf_float+0x260>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	079b      	lsls	r3, r3, #30
 800889c:	f100 8107 	bmi.w	8008aae <_printf_float+0x462>
 80088a0:	68e0      	ldr	r0, [r4, #12]
 80088a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a4:	4298      	cmp	r0, r3
 80088a6:	bfb8      	it	lt
 80088a8:	4618      	movlt	r0, r3
 80088aa:	e730      	b.n	800870e <_printf_float+0xc2>
 80088ac:	2301      	movs	r3, #1
 80088ae:	464a      	mov	r2, r9
 80088b0:	4631      	mov	r1, r6
 80088b2:	4628      	mov	r0, r5
 80088b4:	47b8      	blx	r7
 80088b6:	3001      	adds	r0, #1
 80088b8:	f43f af27 	beq.w	800870a <_printf_float+0xbe>
 80088bc:	f108 0801 	add.w	r8, r8, #1
 80088c0:	e7e6      	b.n	8008890 <_printf_float+0x244>
 80088c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dc39      	bgt.n	800893c <_printf_float+0x2f0>
 80088c8:	4a1b      	ldr	r2, [pc, #108]	; (8008938 <_printf_float+0x2ec>)
 80088ca:	2301      	movs	r3, #1
 80088cc:	4631      	mov	r1, r6
 80088ce:	4628      	mov	r0, r5
 80088d0:	47b8      	blx	r7
 80088d2:	3001      	adds	r0, #1
 80088d4:	f43f af19 	beq.w	800870a <_printf_float+0xbe>
 80088d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80088dc:	4313      	orrs	r3, r2
 80088de:	d102      	bne.n	80088e6 <_printf_float+0x29a>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	07d9      	lsls	r1, r3, #31
 80088e4:	d5d8      	bpl.n	8008898 <_printf_float+0x24c>
 80088e6:	ee18 3a10 	vmov	r3, s16
 80088ea:	4652      	mov	r2, sl
 80088ec:	4631      	mov	r1, r6
 80088ee:	4628      	mov	r0, r5
 80088f0:	47b8      	blx	r7
 80088f2:	3001      	adds	r0, #1
 80088f4:	f43f af09 	beq.w	800870a <_printf_float+0xbe>
 80088f8:	f04f 0900 	mov.w	r9, #0
 80088fc:	f104 0a1a 	add.w	sl, r4, #26
 8008900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008902:	425b      	negs	r3, r3
 8008904:	454b      	cmp	r3, r9
 8008906:	dc01      	bgt.n	800890c <_printf_float+0x2c0>
 8008908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890a:	e792      	b.n	8008832 <_printf_float+0x1e6>
 800890c:	2301      	movs	r3, #1
 800890e:	4652      	mov	r2, sl
 8008910:	4631      	mov	r1, r6
 8008912:	4628      	mov	r0, r5
 8008914:	47b8      	blx	r7
 8008916:	3001      	adds	r0, #1
 8008918:	f43f aef7 	beq.w	800870a <_printf_float+0xbe>
 800891c:	f109 0901 	add.w	r9, r9, #1
 8008920:	e7ee      	b.n	8008900 <_printf_float+0x2b4>
 8008922:	bf00      	nop
 8008924:	7fefffff 	.word	0x7fefffff
 8008928:	0800d67c 	.word	0x0800d67c
 800892c:	0800d680 	.word	0x0800d680
 8008930:	0800d684 	.word	0x0800d684
 8008934:	0800d688 	.word	0x0800d688
 8008938:	0800da18 	.word	0x0800da18
 800893c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800893e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008940:	429a      	cmp	r2, r3
 8008942:	bfa8      	it	ge
 8008944:	461a      	movge	r2, r3
 8008946:	2a00      	cmp	r2, #0
 8008948:	4691      	mov	r9, r2
 800894a:	dc37      	bgt.n	80089bc <_printf_float+0x370>
 800894c:	f04f 0b00 	mov.w	fp, #0
 8008950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008954:	f104 021a 	add.w	r2, r4, #26
 8008958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800895a:	9305      	str	r3, [sp, #20]
 800895c:	eba3 0309 	sub.w	r3, r3, r9
 8008960:	455b      	cmp	r3, fp
 8008962:	dc33      	bgt.n	80089cc <_printf_float+0x380>
 8008964:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008968:	429a      	cmp	r2, r3
 800896a:	db3b      	blt.n	80089e4 <_printf_float+0x398>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	07da      	lsls	r2, r3, #31
 8008970:	d438      	bmi.n	80089e4 <_printf_float+0x398>
 8008972:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008976:	eba2 0903 	sub.w	r9, r2, r3
 800897a:	9b05      	ldr	r3, [sp, #20]
 800897c:	1ad2      	subs	r2, r2, r3
 800897e:	4591      	cmp	r9, r2
 8008980:	bfa8      	it	ge
 8008982:	4691      	movge	r9, r2
 8008984:	f1b9 0f00 	cmp.w	r9, #0
 8008988:	dc35      	bgt.n	80089f6 <_printf_float+0x3aa>
 800898a:	f04f 0800 	mov.w	r8, #0
 800898e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008992:	f104 0a1a 	add.w	sl, r4, #26
 8008996:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	eba3 0309 	sub.w	r3, r3, r9
 80089a0:	4543      	cmp	r3, r8
 80089a2:	f77f af79 	ble.w	8008898 <_printf_float+0x24c>
 80089a6:	2301      	movs	r3, #1
 80089a8:	4652      	mov	r2, sl
 80089aa:	4631      	mov	r1, r6
 80089ac:	4628      	mov	r0, r5
 80089ae:	47b8      	blx	r7
 80089b0:	3001      	adds	r0, #1
 80089b2:	f43f aeaa 	beq.w	800870a <_printf_float+0xbe>
 80089b6:	f108 0801 	add.w	r8, r8, #1
 80089ba:	e7ec      	b.n	8008996 <_printf_float+0x34a>
 80089bc:	4613      	mov	r3, r2
 80089be:	4631      	mov	r1, r6
 80089c0:	4642      	mov	r2, r8
 80089c2:	4628      	mov	r0, r5
 80089c4:	47b8      	blx	r7
 80089c6:	3001      	adds	r0, #1
 80089c8:	d1c0      	bne.n	800894c <_printf_float+0x300>
 80089ca:	e69e      	b.n	800870a <_printf_float+0xbe>
 80089cc:	2301      	movs	r3, #1
 80089ce:	4631      	mov	r1, r6
 80089d0:	4628      	mov	r0, r5
 80089d2:	9205      	str	r2, [sp, #20]
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f ae97 	beq.w	800870a <_printf_float+0xbe>
 80089dc:	9a05      	ldr	r2, [sp, #20]
 80089de:	f10b 0b01 	add.w	fp, fp, #1
 80089e2:	e7b9      	b.n	8008958 <_printf_float+0x30c>
 80089e4:	ee18 3a10 	vmov	r3, s16
 80089e8:	4652      	mov	r2, sl
 80089ea:	4631      	mov	r1, r6
 80089ec:	4628      	mov	r0, r5
 80089ee:	47b8      	blx	r7
 80089f0:	3001      	adds	r0, #1
 80089f2:	d1be      	bne.n	8008972 <_printf_float+0x326>
 80089f4:	e689      	b.n	800870a <_printf_float+0xbe>
 80089f6:	9a05      	ldr	r2, [sp, #20]
 80089f8:	464b      	mov	r3, r9
 80089fa:	4442      	add	r2, r8
 80089fc:	4631      	mov	r1, r6
 80089fe:	4628      	mov	r0, r5
 8008a00:	47b8      	blx	r7
 8008a02:	3001      	adds	r0, #1
 8008a04:	d1c1      	bne.n	800898a <_printf_float+0x33e>
 8008a06:	e680      	b.n	800870a <_printf_float+0xbe>
 8008a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a0a:	2a01      	cmp	r2, #1
 8008a0c:	dc01      	bgt.n	8008a12 <_printf_float+0x3c6>
 8008a0e:	07db      	lsls	r3, r3, #31
 8008a10:	d53a      	bpl.n	8008a88 <_printf_float+0x43c>
 8008a12:	2301      	movs	r3, #1
 8008a14:	4642      	mov	r2, r8
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f43f ae74 	beq.w	800870a <_printf_float+0xbe>
 8008a22:	ee18 3a10 	vmov	r3, s16
 8008a26:	4652      	mov	r2, sl
 8008a28:	4631      	mov	r1, r6
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	47b8      	blx	r7
 8008a2e:	3001      	adds	r0, #1
 8008a30:	f43f ae6b 	beq.w	800870a <_printf_float+0xbe>
 8008a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008a40:	f7f8 f86a 	bl	8000b18 <__aeabi_dcmpeq>
 8008a44:	b9d8      	cbnz	r0, 8008a7e <_printf_float+0x432>
 8008a46:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008a4a:	f108 0201 	add.w	r2, r8, #1
 8008a4e:	4631      	mov	r1, r6
 8008a50:	4628      	mov	r0, r5
 8008a52:	47b8      	blx	r7
 8008a54:	3001      	adds	r0, #1
 8008a56:	d10e      	bne.n	8008a76 <_printf_float+0x42a>
 8008a58:	e657      	b.n	800870a <_printf_float+0xbe>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	4652      	mov	r2, sl
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	f43f ae50 	beq.w	800870a <_printf_float+0xbe>
 8008a6a:	f108 0801 	add.w	r8, r8, #1
 8008a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a70:	3b01      	subs	r3, #1
 8008a72:	4543      	cmp	r3, r8
 8008a74:	dcf1      	bgt.n	8008a5a <_printf_float+0x40e>
 8008a76:	464b      	mov	r3, r9
 8008a78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a7c:	e6da      	b.n	8008834 <_printf_float+0x1e8>
 8008a7e:	f04f 0800 	mov.w	r8, #0
 8008a82:	f104 0a1a 	add.w	sl, r4, #26
 8008a86:	e7f2      	b.n	8008a6e <_printf_float+0x422>
 8008a88:	2301      	movs	r3, #1
 8008a8a:	4642      	mov	r2, r8
 8008a8c:	e7df      	b.n	8008a4e <_printf_float+0x402>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	464a      	mov	r2, r9
 8008a92:	4631      	mov	r1, r6
 8008a94:	4628      	mov	r0, r5
 8008a96:	47b8      	blx	r7
 8008a98:	3001      	adds	r0, #1
 8008a9a:	f43f ae36 	beq.w	800870a <_printf_float+0xbe>
 8008a9e:	f108 0801 	add.w	r8, r8, #1
 8008aa2:	68e3      	ldr	r3, [r4, #12]
 8008aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008aa6:	1a5b      	subs	r3, r3, r1
 8008aa8:	4543      	cmp	r3, r8
 8008aaa:	dcf0      	bgt.n	8008a8e <_printf_float+0x442>
 8008aac:	e6f8      	b.n	80088a0 <_printf_float+0x254>
 8008aae:	f04f 0800 	mov.w	r8, #0
 8008ab2:	f104 0919 	add.w	r9, r4, #25
 8008ab6:	e7f4      	b.n	8008aa2 <_printf_float+0x456>

08008ab8 <_printf_common>:
 8008ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008abc:	4616      	mov	r6, r2
 8008abe:	4699      	mov	r9, r3
 8008ac0:	688a      	ldr	r2, [r1, #8]
 8008ac2:	690b      	ldr	r3, [r1, #16]
 8008ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	bfb8      	it	lt
 8008acc:	4613      	movlt	r3, r2
 8008ace:	6033      	str	r3, [r6, #0]
 8008ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ad4:	4607      	mov	r7, r0
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	b10a      	cbz	r2, 8008ade <_printf_common+0x26>
 8008ada:	3301      	adds	r3, #1
 8008adc:	6033      	str	r3, [r6, #0]
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	0699      	lsls	r1, r3, #26
 8008ae2:	bf42      	ittt	mi
 8008ae4:	6833      	ldrmi	r3, [r6, #0]
 8008ae6:	3302      	addmi	r3, #2
 8008ae8:	6033      	strmi	r3, [r6, #0]
 8008aea:	6825      	ldr	r5, [r4, #0]
 8008aec:	f015 0506 	ands.w	r5, r5, #6
 8008af0:	d106      	bne.n	8008b00 <_printf_common+0x48>
 8008af2:	f104 0a19 	add.w	sl, r4, #25
 8008af6:	68e3      	ldr	r3, [r4, #12]
 8008af8:	6832      	ldr	r2, [r6, #0]
 8008afa:	1a9b      	subs	r3, r3, r2
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	dc26      	bgt.n	8008b4e <_printf_common+0x96>
 8008b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b04:	1e13      	subs	r3, r2, #0
 8008b06:	6822      	ldr	r2, [r4, #0]
 8008b08:	bf18      	it	ne
 8008b0a:	2301      	movne	r3, #1
 8008b0c:	0692      	lsls	r2, r2, #26
 8008b0e:	d42b      	bmi.n	8008b68 <_printf_common+0xb0>
 8008b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b14:	4649      	mov	r1, r9
 8008b16:	4638      	mov	r0, r7
 8008b18:	47c0      	blx	r8
 8008b1a:	3001      	adds	r0, #1
 8008b1c:	d01e      	beq.n	8008b5c <_printf_common+0xa4>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	6922      	ldr	r2, [r4, #16]
 8008b22:	f003 0306 	and.w	r3, r3, #6
 8008b26:	2b04      	cmp	r3, #4
 8008b28:	bf02      	ittt	eq
 8008b2a:	68e5      	ldreq	r5, [r4, #12]
 8008b2c:	6833      	ldreq	r3, [r6, #0]
 8008b2e:	1aed      	subeq	r5, r5, r3
 8008b30:	68a3      	ldr	r3, [r4, #8]
 8008b32:	bf0c      	ite	eq
 8008b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b38:	2500      	movne	r5, #0
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	bfc4      	itt	gt
 8008b3e:	1a9b      	subgt	r3, r3, r2
 8008b40:	18ed      	addgt	r5, r5, r3
 8008b42:	2600      	movs	r6, #0
 8008b44:	341a      	adds	r4, #26
 8008b46:	42b5      	cmp	r5, r6
 8008b48:	d11a      	bne.n	8008b80 <_printf_common+0xc8>
 8008b4a:	2000      	movs	r0, #0
 8008b4c:	e008      	b.n	8008b60 <_printf_common+0xa8>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4652      	mov	r2, sl
 8008b52:	4649      	mov	r1, r9
 8008b54:	4638      	mov	r0, r7
 8008b56:	47c0      	blx	r8
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d103      	bne.n	8008b64 <_printf_common+0xac>
 8008b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b64:	3501      	adds	r5, #1
 8008b66:	e7c6      	b.n	8008af6 <_printf_common+0x3e>
 8008b68:	18e1      	adds	r1, r4, r3
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	2030      	movs	r0, #48	; 0x30
 8008b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b72:	4422      	add	r2, r4
 8008b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b7c:	3302      	adds	r3, #2
 8008b7e:	e7c7      	b.n	8008b10 <_printf_common+0x58>
 8008b80:	2301      	movs	r3, #1
 8008b82:	4622      	mov	r2, r4
 8008b84:	4649      	mov	r1, r9
 8008b86:	4638      	mov	r0, r7
 8008b88:	47c0      	blx	r8
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	d0e6      	beq.n	8008b5c <_printf_common+0xa4>
 8008b8e:	3601      	adds	r6, #1
 8008b90:	e7d9      	b.n	8008b46 <_printf_common+0x8e>
	...

08008b94 <_printf_i>:
 8008b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	7e0f      	ldrb	r7, [r1, #24]
 8008b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b9c:	2f78      	cmp	r7, #120	; 0x78
 8008b9e:	4691      	mov	r9, r2
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	469a      	mov	sl, r3
 8008ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008baa:	d807      	bhi.n	8008bbc <_printf_i+0x28>
 8008bac:	2f62      	cmp	r7, #98	; 0x62
 8008bae:	d80a      	bhi.n	8008bc6 <_printf_i+0x32>
 8008bb0:	2f00      	cmp	r7, #0
 8008bb2:	f000 80d4 	beq.w	8008d5e <_printf_i+0x1ca>
 8008bb6:	2f58      	cmp	r7, #88	; 0x58
 8008bb8:	f000 80c0 	beq.w	8008d3c <_printf_i+0x1a8>
 8008bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008bc4:	e03a      	b.n	8008c3c <_printf_i+0xa8>
 8008bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008bca:	2b15      	cmp	r3, #21
 8008bcc:	d8f6      	bhi.n	8008bbc <_printf_i+0x28>
 8008bce:	a101      	add	r1, pc, #4	; (adr r1, 8008bd4 <_printf_i+0x40>)
 8008bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bd4:	08008c2d 	.word	0x08008c2d
 8008bd8:	08008c41 	.word	0x08008c41
 8008bdc:	08008bbd 	.word	0x08008bbd
 8008be0:	08008bbd 	.word	0x08008bbd
 8008be4:	08008bbd 	.word	0x08008bbd
 8008be8:	08008bbd 	.word	0x08008bbd
 8008bec:	08008c41 	.word	0x08008c41
 8008bf0:	08008bbd 	.word	0x08008bbd
 8008bf4:	08008bbd 	.word	0x08008bbd
 8008bf8:	08008bbd 	.word	0x08008bbd
 8008bfc:	08008bbd 	.word	0x08008bbd
 8008c00:	08008d45 	.word	0x08008d45
 8008c04:	08008c6d 	.word	0x08008c6d
 8008c08:	08008cff 	.word	0x08008cff
 8008c0c:	08008bbd 	.word	0x08008bbd
 8008c10:	08008bbd 	.word	0x08008bbd
 8008c14:	08008d67 	.word	0x08008d67
 8008c18:	08008bbd 	.word	0x08008bbd
 8008c1c:	08008c6d 	.word	0x08008c6d
 8008c20:	08008bbd 	.word	0x08008bbd
 8008c24:	08008bbd 	.word	0x08008bbd
 8008c28:	08008d07 	.word	0x08008d07
 8008c2c:	682b      	ldr	r3, [r5, #0]
 8008c2e:	1d1a      	adds	r2, r3, #4
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	602a      	str	r2, [r5, #0]
 8008c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e09f      	b.n	8008d80 <_printf_i+0x1ec>
 8008c40:	6820      	ldr	r0, [r4, #0]
 8008c42:	682b      	ldr	r3, [r5, #0]
 8008c44:	0607      	lsls	r7, r0, #24
 8008c46:	f103 0104 	add.w	r1, r3, #4
 8008c4a:	6029      	str	r1, [r5, #0]
 8008c4c:	d501      	bpl.n	8008c52 <_printf_i+0xbe>
 8008c4e:	681e      	ldr	r6, [r3, #0]
 8008c50:	e003      	b.n	8008c5a <_printf_i+0xc6>
 8008c52:	0646      	lsls	r6, r0, #25
 8008c54:	d5fb      	bpl.n	8008c4e <_printf_i+0xba>
 8008c56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008c5a:	2e00      	cmp	r6, #0
 8008c5c:	da03      	bge.n	8008c66 <_printf_i+0xd2>
 8008c5e:	232d      	movs	r3, #45	; 0x2d
 8008c60:	4276      	negs	r6, r6
 8008c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c66:	485a      	ldr	r0, [pc, #360]	; (8008dd0 <_printf_i+0x23c>)
 8008c68:	230a      	movs	r3, #10
 8008c6a:	e012      	b.n	8008c92 <_printf_i+0xfe>
 8008c6c:	682b      	ldr	r3, [r5, #0]
 8008c6e:	6820      	ldr	r0, [r4, #0]
 8008c70:	1d19      	adds	r1, r3, #4
 8008c72:	6029      	str	r1, [r5, #0]
 8008c74:	0605      	lsls	r5, r0, #24
 8008c76:	d501      	bpl.n	8008c7c <_printf_i+0xe8>
 8008c78:	681e      	ldr	r6, [r3, #0]
 8008c7a:	e002      	b.n	8008c82 <_printf_i+0xee>
 8008c7c:	0641      	lsls	r1, r0, #25
 8008c7e:	d5fb      	bpl.n	8008c78 <_printf_i+0xe4>
 8008c80:	881e      	ldrh	r6, [r3, #0]
 8008c82:	4853      	ldr	r0, [pc, #332]	; (8008dd0 <_printf_i+0x23c>)
 8008c84:	2f6f      	cmp	r7, #111	; 0x6f
 8008c86:	bf0c      	ite	eq
 8008c88:	2308      	moveq	r3, #8
 8008c8a:	230a      	movne	r3, #10
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c92:	6865      	ldr	r5, [r4, #4]
 8008c94:	60a5      	str	r5, [r4, #8]
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	bfa2      	ittt	ge
 8008c9a:	6821      	ldrge	r1, [r4, #0]
 8008c9c:	f021 0104 	bicge.w	r1, r1, #4
 8008ca0:	6021      	strge	r1, [r4, #0]
 8008ca2:	b90e      	cbnz	r6, 8008ca8 <_printf_i+0x114>
 8008ca4:	2d00      	cmp	r5, #0
 8008ca6:	d04b      	beq.n	8008d40 <_printf_i+0x1ac>
 8008ca8:	4615      	mov	r5, r2
 8008caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8008cae:	fb03 6711 	mls	r7, r3, r1, r6
 8008cb2:	5dc7      	ldrb	r7, [r0, r7]
 8008cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008cb8:	4637      	mov	r7, r6
 8008cba:	42bb      	cmp	r3, r7
 8008cbc:	460e      	mov	r6, r1
 8008cbe:	d9f4      	bls.n	8008caa <_printf_i+0x116>
 8008cc0:	2b08      	cmp	r3, #8
 8008cc2:	d10b      	bne.n	8008cdc <_printf_i+0x148>
 8008cc4:	6823      	ldr	r3, [r4, #0]
 8008cc6:	07de      	lsls	r6, r3, #31
 8008cc8:	d508      	bpl.n	8008cdc <_printf_i+0x148>
 8008cca:	6923      	ldr	r3, [r4, #16]
 8008ccc:	6861      	ldr	r1, [r4, #4]
 8008cce:	4299      	cmp	r1, r3
 8008cd0:	bfde      	ittt	le
 8008cd2:	2330      	movle	r3, #48	; 0x30
 8008cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cdc:	1b52      	subs	r2, r2, r5
 8008cde:	6122      	str	r2, [r4, #16]
 8008ce0:	f8cd a000 	str.w	sl, [sp]
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	aa03      	add	r2, sp, #12
 8008ce8:	4621      	mov	r1, r4
 8008cea:	4640      	mov	r0, r8
 8008cec:	f7ff fee4 	bl	8008ab8 <_printf_common>
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d14a      	bne.n	8008d8a <_printf_i+0x1f6>
 8008cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf8:	b004      	add	sp, #16
 8008cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	f043 0320 	orr.w	r3, r3, #32
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	4833      	ldr	r0, [pc, #204]	; (8008dd4 <_printf_i+0x240>)
 8008d08:	2778      	movs	r7, #120	; 0x78
 8008d0a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	6829      	ldr	r1, [r5, #0]
 8008d12:	061f      	lsls	r7, r3, #24
 8008d14:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d18:	d402      	bmi.n	8008d20 <_printf_i+0x18c>
 8008d1a:	065f      	lsls	r7, r3, #25
 8008d1c:	bf48      	it	mi
 8008d1e:	b2b6      	uxthmi	r6, r6
 8008d20:	07df      	lsls	r7, r3, #31
 8008d22:	bf48      	it	mi
 8008d24:	f043 0320 	orrmi.w	r3, r3, #32
 8008d28:	6029      	str	r1, [r5, #0]
 8008d2a:	bf48      	it	mi
 8008d2c:	6023      	strmi	r3, [r4, #0]
 8008d2e:	b91e      	cbnz	r6, 8008d38 <_printf_i+0x1a4>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	f023 0320 	bic.w	r3, r3, #32
 8008d36:	6023      	str	r3, [r4, #0]
 8008d38:	2310      	movs	r3, #16
 8008d3a:	e7a7      	b.n	8008c8c <_printf_i+0xf8>
 8008d3c:	4824      	ldr	r0, [pc, #144]	; (8008dd0 <_printf_i+0x23c>)
 8008d3e:	e7e4      	b.n	8008d0a <_printf_i+0x176>
 8008d40:	4615      	mov	r5, r2
 8008d42:	e7bd      	b.n	8008cc0 <_printf_i+0x12c>
 8008d44:	682b      	ldr	r3, [r5, #0]
 8008d46:	6826      	ldr	r6, [r4, #0]
 8008d48:	6961      	ldr	r1, [r4, #20]
 8008d4a:	1d18      	adds	r0, r3, #4
 8008d4c:	6028      	str	r0, [r5, #0]
 8008d4e:	0635      	lsls	r5, r6, #24
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	d501      	bpl.n	8008d58 <_printf_i+0x1c4>
 8008d54:	6019      	str	r1, [r3, #0]
 8008d56:	e002      	b.n	8008d5e <_printf_i+0x1ca>
 8008d58:	0670      	lsls	r0, r6, #25
 8008d5a:	d5fb      	bpl.n	8008d54 <_printf_i+0x1c0>
 8008d5c:	8019      	strh	r1, [r3, #0]
 8008d5e:	2300      	movs	r3, #0
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	4615      	mov	r5, r2
 8008d64:	e7bc      	b.n	8008ce0 <_printf_i+0x14c>
 8008d66:	682b      	ldr	r3, [r5, #0]
 8008d68:	1d1a      	adds	r2, r3, #4
 8008d6a:	602a      	str	r2, [r5, #0]
 8008d6c:	681d      	ldr	r5, [r3, #0]
 8008d6e:	6862      	ldr	r2, [r4, #4]
 8008d70:	2100      	movs	r1, #0
 8008d72:	4628      	mov	r0, r5
 8008d74:	f7f7 fa54 	bl	8000220 <memchr>
 8008d78:	b108      	cbz	r0, 8008d7e <_printf_i+0x1ea>
 8008d7a:	1b40      	subs	r0, r0, r5
 8008d7c:	6060      	str	r0, [r4, #4]
 8008d7e:	6863      	ldr	r3, [r4, #4]
 8008d80:	6123      	str	r3, [r4, #16]
 8008d82:	2300      	movs	r3, #0
 8008d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d88:	e7aa      	b.n	8008ce0 <_printf_i+0x14c>
 8008d8a:	6923      	ldr	r3, [r4, #16]
 8008d8c:	462a      	mov	r2, r5
 8008d8e:	4649      	mov	r1, r9
 8008d90:	4640      	mov	r0, r8
 8008d92:	47d0      	blx	sl
 8008d94:	3001      	adds	r0, #1
 8008d96:	d0ad      	beq.n	8008cf4 <_printf_i+0x160>
 8008d98:	6823      	ldr	r3, [r4, #0]
 8008d9a:	079b      	lsls	r3, r3, #30
 8008d9c:	d413      	bmi.n	8008dc6 <_printf_i+0x232>
 8008d9e:	68e0      	ldr	r0, [r4, #12]
 8008da0:	9b03      	ldr	r3, [sp, #12]
 8008da2:	4298      	cmp	r0, r3
 8008da4:	bfb8      	it	lt
 8008da6:	4618      	movlt	r0, r3
 8008da8:	e7a6      	b.n	8008cf8 <_printf_i+0x164>
 8008daa:	2301      	movs	r3, #1
 8008dac:	4632      	mov	r2, r6
 8008dae:	4649      	mov	r1, r9
 8008db0:	4640      	mov	r0, r8
 8008db2:	47d0      	blx	sl
 8008db4:	3001      	adds	r0, #1
 8008db6:	d09d      	beq.n	8008cf4 <_printf_i+0x160>
 8008db8:	3501      	adds	r5, #1
 8008dba:	68e3      	ldr	r3, [r4, #12]
 8008dbc:	9903      	ldr	r1, [sp, #12]
 8008dbe:	1a5b      	subs	r3, r3, r1
 8008dc0:	42ab      	cmp	r3, r5
 8008dc2:	dcf2      	bgt.n	8008daa <_printf_i+0x216>
 8008dc4:	e7eb      	b.n	8008d9e <_printf_i+0x20a>
 8008dc6:	2500      	movs	r5, #0
 8008dc8:	f104 0619 	add.w	r6, r4, #25
 8008dcc:	e7f5      	b.n	8008dba <_printf_i+0x226>
 8008dce:	bf00      	nop
 8008dd0:	0800d68c 	.word	0x0800d68c
 8008dd4:	0800d69d 	.word	0x0800d69d

08008dd8 <_scanf_float>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	b087      	sub	sp, #28
 8008dde:	4617      	mov	r7, r2
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	688b      	ldr	r3, [r1, #8]
 8008de4:	1e5a      	subs	r2, r3, #1
 8008de6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008dea:	bf83      	ittte	hi
 8008dec:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008df0:	195b      	addhi	r3, r3, r5
 8008df2:	9302      	strhi	r3, [sp, #8]
 8008df4:	2300      	movls	r3, #0
 8008df6:	bf86      	itte	hi
 8008df8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008dfc:	608b      	strhi	r3, [r1, #8]
 8008dfe:	9302      	strls	r3, [sp, #8]
 8008e00:	680b      	ldr	r3, [r1, #0]
 8008e02:	468b      	mov	fp, r1
 8008e04:	2500      	movs	r5, #0
 8008e06:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008e0a:	f84b 3b1c 	str.w	r3, [fp], #28
 8008e0e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008e12:	4680      	mov	r8, r0
 8008e14:	460c      	mov	r4, r1
 8008e16:	465e      	mov	r6, fp
 8008e18:	46aa      	mov	sl, r5
 8008e1a:	46a9      	mov	r9, r5
 8008e1c:	9501      	str	r5, [sp, #4]
 8008e1e:	68a2      	ldr	r2, [r4, #8]
 8008e20:	b152      	cbz	r2, 8008e38 <_scanf_float+0x60>
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	2b4e      	cmp	r3, #78	; 0x4e
 8008e28:	d864      	bhi.n	8008ef4 <_scanf_float+0x11c>
 8008e2a:	2b40      	cmp	r3, #64	; 0x40
 8008e2c:	d83c      	bhi.n	8008ea8 <_scanf_float+0xd0>
 8008e2e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e32:	b2c8      	uxtb	r0, r1
 8008e34:	280e      	cmp	r0, #14
 8008e36:	d93a      	bls.n	8008eae <_scanf_float+0xd6>
 8008e38:	f1b9 0f00 	cmp.w	r9, #0
 8008e3c:	d003      	beq.n	8008e46 <_scanf_float+0x6e>
 8008e3e:	6823      	ldr	r3, [r4, #0]
 8008e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e44:	6023      	str	r3, [r4, #0]
 8008e46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e4a:	f1ba 0f01 	cmp.w	sl, #1
 8008e4e:	f200 8113 	bhi.w	8009078 <_scanf_float+0x2a0>
 8008e52:	455e      	cmp	r6, fp
 8008e54:	f200 8105 	bhi.w	8009062 <_scanf_float+0x28a>
 8008e58:	2501      	movs	r5, #1
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	b007      	add	sp, #28
 8008e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e62:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e66:	2a0d      	cmp	r2, #13
 8008e68:	d8e6      	bhi.n	8008e38 <_scanf_float+0x60>
 8008e6a:	a101      	add	r1, pc, #4	; (adr r1, 8008e70 <_scanf_float+0x98>)
 8008e6c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e70:	08008faf 	.word	0x08008faf
 8008e74:	08008e39 	.word	0x08008e39
 8008e78:	08008e39 	.word	0x08008e39
 8008e7c:	08008e39 	.word	0x08008e39
 8008e80:	0800900f 	.word	0x0800900f
 8008e84:	08008fe7 	.word	0x08008fe7
 8008e88:	08008e39 	.word	0x08008e39
 8008e8c:	08008e39 	.word	0x08008e39
 8008e90:	08008fbd 	.word	0x08008fbd
 8008e94:	08008e39 	.word	0x08008e39
 8008e98:	08008e39 	.word	0x08008e39
 8008e9c:	08008e39 	.word	0x08008e39
 8008ea0:	08008e39 	.word	0x08008e39
 8008ea4:	08008f75 	.word	0x08008f75
 8008ea8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008eac:	e7db      	b.n	8008e66 <_scanf_float+0x8e>
 8008eae:	290e      	cmp	r1, #14
 8008eb0:	d8c2      	bhi.n	8008e38 <_scanf_float+0x60>
 8008eb2:	a001      	add	r0, pc, #4	; (adr r0, 8008eb8 <_scanf_float+0xe0>)
 8008eb4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008eb8:	08008f67 	.word	0x08008f67
 8008ebc:	08008e39 	.word	0x08008e39
 8008ec0:	08008f67 	.word	0x08008f67
 8008ec4:	08008ffb 	.word	0x08008ffb
 8008ec8:	08008e39 	.word	0x08008e39
 8008ecc:	08008f15 	.word	0x08008f15
 8008ed0:	08008f51 	.word	0x08008f51
 8008ed4:	08008f51 	.word	0x08008f51
 8008ed8:	08008f51 	.word	0x08008f51
 8008edc:	08008f51 	.word	0x08008f51
 8008ee0:	08008f51 	.word	0x08008f51
 8008ee4:	08008f51 	.word	0x08008f51
 8008ee8:	08008f51 	.word	0x08008f51
 8008eec:	08008f51 	.word	0x08008f51
 8008ef0:	08008f51 	.word	0x08008f51
 8008ef4:	2b6e      	cmp	r3, #110	; 0x6e
 8008ef6:	d809      	bhi.n	8008f0c <_scanf_float+0x134>
 8008ef8:	2b60      	cmp	r3, #96	; 0x60
 8008efa:	d8b2      	bhi.n	8008e62 <_scanf_float+0x8a>
 8008efc:	2b54      	cmp	r3, #84	; 0x54
 8008efe:	d077      	beq.n	8008ff0 <_scanf_float+0x218>
 8008f00:	2b59      	cmp	r3, #89	; 0x59
 8008f02:	d199      	bne.n	8008e38 <_scanf_float+0x60>
 8008f04:	2d07      	cmp	r5, #7
 8008f06:	d197      	bne.n	8008e38 <_scanf_float+0x60>
 8008f08:	2508      	movs	r5, #8
 8008f0a:	e029      	b.n	8008f60 <_scanf_float+0x188>
 8008f0c:	2b74      	cmp	r3, #116	; 0x74
 8008f0e:	d06f      	beq.n	8008ff0 <_scanf_float+0x218>
 8008f10:	2b79      	cmp	r3, #121	; 0x79
 8008f12:	e7f6      	b.n	8008f02 <_scanf_float+0x12a>
 8008f14:	6821      	ldr	r1, [r4, #0]
 8008f16:	05c8      	lsls	r0, r1, #23
 8008f18:	d51a      	bpl.n	8008f50 <_scanf_float+0x178>
 8008f1a:	9b02      	ldr	r3, [sp, #8]
 8008f1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008f20:	6021      	str	r1, [r4, #0]
 8008f22:	f109 0901 	add.w	r9, r9, #1
 8008f26:	b11b      	cbz	r3, 8008f30 <_scanf_float+0x158>
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	3201      	adds	r2, #1
 8008f2c:	9302      	str	r3, [sp, #8]
 8008f2e:	60a2      	str	r2, [r4, #8]
 8008f30:	68a3      	ldr	r3, [r4, #8]
 8008f32:	3b01      	subs	r3, #1
 8008f34:	60a3      	str	r3, [r4, #8]
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	607b      	str	r3, [r7, #4]
 8008f44:	f340 8084 	ble.w	8009050 <_scanf_float+0x278>
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	603b      	str	r3, [r7, #0]
 8008f4e:	e766      	b.n	8008e1e <_scanf_float+0x46>
 8008f50:	eb1a 0f05 	cmn.w	sl, r5
 8008f54:	f47f af70 	bne.w	8008e38 <_scanf_float+0x60>
 8008f58:	6822      	ldr	r2, [r4, #0]
 8008f5a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f5e:	6022      	str	r2, [r4, #0]
 8008f60:	f806 3b01 	strb.w	r3, [r6], #1
 8008f64:	e7e4      	b.n	8008f30 <_scanf_float+0x158>
 8008f66:	6822      	ldr	r2, [r4, #0]
 8008f68:	0610      	lsls	r0, r2, #24
 8008f6a:	f57f af65 	bpl.w	8008e38 <_scanf_float+0x60>
 8008f6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f72:	e7f4      	b.n	8008f5e <_scanf_float+0x186>
 8008f74:	f1ba 0f00 	cmp.w	sl, #0
 8008f78:	d10e      	bne.n	8008f98 <_scanf_float+0x1c0>
 8008f7a:	f1b9 0f00 	cmp.w	r9, #0
 8008f7e:	d10e      	bne.n	8008f9e <_scanf_float+0x1c6>
 8008f80:	6822      	ldr	r2, [r4, #0]
 8008f82:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f86:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f8a:	d108      	bne.n	8008f9e <_scanf_float+0x1c6>
 8008f8c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f90:	6022      	str	r2, [r4, #0]
 8008f92:	f04f 0a01 	mov.w	sl, #1
 8008f96:	e7e3      	b.n	8008f60 <_scanf_float+0x188>
 8008f98:	f1ba 0f02 	cmp.w	sl, #2
 8008f9c:	d055      	beq.n	800904a <_scanf_float+0x272>
 8008f9e:	2d01      	cmp	r5, #1
 8008fa0:	d002      	beq.n	8008fa8 <_scanf_float+0x1d0>
 8008fa2:	2d04      	cmp	r5, #4
 8008fa4:	f47f af48 	bne.w	8008e38 <_scanf_float+0x60>
 8008fa8:	3501      	adds	r5, #1
 8008faa:	b2ed      	uxtb	r5, r5
 8008fac:	e7d8      	b.n	8008f60 <_scanf_float+0x188>
 8008fae:	f1ba 0f01 	cmp.w	sl, #1
 8008fb2:	f47f af41 	bne.w	8008e38 <_scanf_float+0x60>
 8008fb6:	f04f 0a02 	mov.w	sl, #2
 8008fba:	e7d1      	b.n	8008f60 <_scanf_float+0x188>
 8008fbc:	b97d      	cbnz	r5, 8008fde <_scanf_float+0x206>
 8008fbe:	f1b9 0f00 	cmp.w	r9, #0
 8008fc2:	f47f af3c 	bne.w	8008e3e <_scanf_float+0x66>
 8008fc6:	6822      	ldr	r2, [r4, #0]
 8008fc8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fcc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fd0:	f47f af39 	bne.w	8008e46 <_scanf_float+0x6e>
 8008fd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fd8:	6022      	str	r2, [r4, #0]
 8008fda:	2501      	movs	r5, #1
 8008fdc:	e7c0      	b.n	8008f60 <_scanf_float+0x188>
 8008fde:	2d03      	cmp	r5, #3
 8008fe0:	d0e2      	beq.n	8008fa8 <_scanf_float+0x1d0>
 8008fe2:	2d05      	cmp	r5, #5
 8008fe4:	e7de      	b.n	8008fa4 <_scanf_float+0x1cc>
 8008fe6:	2d02      	cmp	r5, #2
 8008fe8:	f47f af26 	bne.w	8008e38 <_scanf_float+0x60>
 8008fec:	2503      	movs	r5, #3
 8008fee:	e7b7      	b.n	8008f60 <_scanf_float+0x188>
 8008ff0:	2d06      	cmp	r5, #6
 8008ff2:	f47f af21 	bne.w	8008e38 <_scanf_float+0x60>
 8008ff6:	2507      	movs	r5, #7
 8008ff8:	e7b2      	b.n	8008f60 <_scanf_float+0x188>
 8008ffa:	6822      	ldr	r2, [r4, #0]
 8008ffc:	0591      	lsls	r1, r2, #22
 8008ffe:	f57f af1b 	bpl.w	8008e38 <_scanf_float+0x60>
 8009002:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009006:	6022      	str	r2, [r4, #0]
 8009008:	f8cd 9004 	str.w	r9, [sp, #4]
 800900c:	e7a8      	b.n	8008f60 <_scanf_float+0x188>
 800900e:	6822      	ldr	r2, [r4, #0]
 8009010:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009014:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009018:	d006      	beq.n	8009028 <_scanf_float+0x250>
 800901a:	0550      	lsls	r0, r2, #21
 800901c:	f57f af0c 	bpl.w	8008e38 <_scanf_float+0x60>
 8009020:	f1b9 0f00 	cmp.w	r9, #0
 8009024:	f43f af0f 	beq.w	8008e46 <_scanf_float+0x6e>
 8009028:	0591      	lsls	r1, r2, #22
 800902a:	bf58      	it	pl
 800902c:	9901      	ldrpl	r1, [sp, #4]
 800902e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009032:	bf58      	it	pl
 8009034:	eba9 0101 	subpl.w	r1, r9, r1
 8009038:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800903c:	bf58      	it	pl
 800903e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009042:	6022      	str	r2, [r4, #0]
 8009044:	f04f 0900 	mov.w	r9, #0
 8009048:	e78a      	b.n	8008f60 <_scanf_float+0x188>
 800904a:	f04f 0a03 	mov.w	sl, #3
 800904e:	e787      	b.n	8008f60 <_scanf_float+0x188>
 8009050:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009054:	4639      	mov	r1, r7
 8009056:	4640      	mov	r0, r8
 8009058:	4798      	blx	r3
 800905a:	2800      	cmp	r0, #0
 800905c:	f43f aedf 	beq.w	8008e1e <_scanf_float+0x46>
 8009060:	e6ea      	b.n	8008e38 <_scanf_float+0x60>
 8009062:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009066:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800906a:	463a      	mov	r2, r7
 800906c:	4640      	mov	r0, r8
 800906e:	4798      	blx	r3
 8009070:	6923      	ldr	r3, [r4, #16]
 8009072:	3b01      	subs	r3, #1
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	e6ec      	b.n	8008e52 <_scanf_float+0x7a>
 8009078:	1e6b      	subs	r3, r5, #1
 800907a:	2b06      	cmp	r3, #6
 800907c:	d825      	bhi.n	80090ca <_scanf_float+0x2f2>
 800907e:	2d02      	cmp	r5, #2
 8009080:	d836      	bhi.n	80090f0 <_scanf_float+0x318>
 8009082:	455e      	cmp	r6, fp
 8009084:	f67f aee8 	bls.w	8008e58 <_scanf_float+0x80>
 8009088:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800908c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009090:	463a      	mov	r2, r7
 8009092:	4640      	mov	r0, r8
 8009094:	4798      	blx	r3
 8009096:	6923      	ldr	r3, [r4, #16]
 8009098:	3b01      	subs	r3, #1
 800909a:	6123      	str	r3, [r4, #16]
 800909c:	e7f1      	b.n	8009082 <_scanf_float+0x2aa>
 800909e:	9802      	ldr	r0, [sp, #8]
 80090a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090a4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80090a8:	9002      	str	r0, [sp, #8]
 80090aa:	463a      	mov	r2, r7
 80090ac:	4640      	mov	r0, r8
 80090ae:	4798      	blx	r3
 80090b0:	6923      	ldr	r3, [r4, #16]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	6123      	str	r3, [r4, #16]
 80090b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ba:	fa5f fa8a 	uxtb.w	sl, sl
 80090be:	f1ba 0f02 	cmp.w	sl, #2
 80090c2:	d1ec      	bne.n	800909e <_scanf_float+0x2c6>
 80090c4:	3d03      	subs	r5, #3
 80090c6:	b2ed      	uxtb	r5, r5
 80090c8:	1b76      	subs	r6, r6, r5
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	05da      	lsls	r2, r3, #23
 80090ce:	d52f      	bpl.n	8009130 <_scanf_float+0x358>
 80090d0:	055b      	lsls	r3, r3, #21
 80090d2:	d510      	bpl.n	80090f6 <_scanf_float+0x31e>
 80090d4:	455e      	cmp	r6, fp
 80090d6:	f67f aebf 	bls.w	8008e58 <_scanf_float+0x80>
 80090da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090e2:	463a      	mov	r2, r7
 80090e4:	4640      	mov	r0, r8
 80090e6:	4798      	blx	r3
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	6123      	str	r3, [r4, #16]
 80090ee:	e7f1      	b.n	80090d4 <_scanf_float+0x2fc>
 80090f0:	46aa      	mov	sl, r5
 80090f2:	9602      	str	r6, [sp, #8]
 80090f4:	e7df      	b.n	80090b6 <_scanf_float+0x2de>
 80090f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090fa:	6923      	ldr	r3, [r4, #16]
 80090fc:	2965      	cmp	r1, #101	; 0x65
 80090fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8009102:	f106 35ff 	add.w	r5, r6, #4294967295
 8009106:	6123      	str	r3, [r4, #16]
 8009108:	d00c      	beq.n	8009124 <_scanf_float+0x34c>
 800910a:	2945      	cmp	r1, #69	; 0x45
 800910c:	d00a      	beq.n	8009124 <_scanf_float+0x34c>
 800910e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009112:	463a      	mov	r2, r7
 8009114:	4640      	mov	r0, r8
 8009116:	4798      	blx	r3
 8009118:	6923      	ldr	r3, [r4, #16]
 800911a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800911e:	3b01      	subs	r3, #1
 8009120:	1eb5      	subs	r5, r6, #2
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009128:	463a      	mov	r2, r7
 800912a:	4640      	mov	r0, r8
 800912c:	4798      	blx	r3
 800912e:	462e      	mov	r6, r5
 8009130:	6825      	ldr	r5, [r4, #0]
 8009132:	f015 0510 	ands.w	r5, r5, #16
 8009136:	d158      	bne.n	80091ea <_scanf_float+0x412>
 8009138:	7035      	strb	r5, [r6, #0]
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009144:	d11c      	bne.n	8009180 <_scanf_float+0x3a8>
 8009146:	9b01      	ldr	r3, [sp, #4]
 8009148:	454b      	cmp	r3, r9
 800914a:	eba3 0209 	sub.w	r2, r3, r9
 800914e:	d124      	bne.n	800919a <_scanf_float+0x3c2>
 8009150:	2200      	movs	r2, #0
 8009152:	4659      	mov	r1, fp
 8009154:	4640      	mov	r0, r8
 8009156:	f002 fc7b 	bl	800ba50 <_strtod_r>
 800915a:	9b03      	ldr	r3, [sp, #12]
 800915c:	6821      	ldr	r1, [r4, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f011 0f02 	tst.w	r1, #2
 8009164:	ec57 6b10 	vmov	r6, r7, d0
 8009168:	f103 0204 	add.w	r2, r3, #4
 800916c:	d020      	beq.n	80091b0 <_scanf_float+0x3d8>
 800916e:	9903      	ldr	r1, [sp, #12]
 8009170:	600a      	str	r2, [r1, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	e9c3 6700 	strd	r6, r7, [r3]
 8009178:	68e3      	ldr	r3, [r4, #12]
 800917a:	3301      	adds	r3, #1
 800917c:	60e3      	str	r3, [r4, #12]
 800917e:	e66c      	b.n	8008e5a <_scanf_float+0x82>
 8009180:	9b04      	ldr	r3, [sp, #16]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0e4      	beq.n	8009150 <_scanf_float+0x378>
 8009186:	9905      	ldr	r1, [sp, #20]
 8009188:	230a      	movs	r3, #10
 800918a:	462a      	mov	r2, r5
 800918c:	3101      	adds	r1, #1
 800918e:	4640      	mov	r0, r8
 8009190:	f002 fce6 	bl	800bb60 <_strtol_r>
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	9e05      	ldr	r6, [sp, #20]
 8009198:	1ac2      	subs	r2, r0, r3
 800919a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800919e:	429e      	cmp	r6, r3
 80091a0:	bf28      	it	cs
 80091a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80091a6:	4912      	ldr	r1, [pc, #72]	; (80091f0 <_scanf_float+0x418>)
 80091a8:	4630      	mov	r0, r6
 80091aa:	f000 f8e7 	bl	800937c <siprintf>
 80091ae:	e7cf      	b.n	8009150 <_scanf_float+0x378>
 80091b0:	f011 0f04 	tst.w	r1, #4
 80091b4:	9903      	ldr	r1, [sp, #12]
 80091b6:	600a      	str	r2, [r1, #0]
 80091b8:	d1db      	bne.n	8009172 <_scanf_float+0x39a>
 80091ba:	f8d3 8000 	ldr.w	r8, [r3]
 80091be:	ee10 2a10 	vmov	r2, s0
 80091c2:	ee10 0a10 	vmov	r0, s0
 80091c6:	463b      	mov	r3, r7
 80091c8:	4639      	mov	r1, r7
 80091ca:	f7f7 fcd7 	bl	8000b7c <__aeabi_dcmpun>
 80091ce:	b128      	cbz	r0, 80091dc <_scanf_float+0x404>
 80091d0:	4808      	ldr	r0, [pc, #32]	; (80091f4 <_scanf_float+0x41c>)
 80091d2:	f000 fa01 	bl	80095d8 <nanf>
 80091d6:	ed88 0a00 	vstr	s0, [r8]
 80091da:	e7cd      	b.n	8009178 <_scanf_float+0x3a0>
 80091dc:	4630      	mov	r0, r6
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 fd2a 	bl	8000c38 <__aeabi_d2f>
 80091e4:	f8c8 0000 	str.w	r0, [r8]
 80091e8:	e7c6      	b.n	8009178 <_scanf_float+0x3a0>
 80091ea:	2500      	movs	r5, #0
 80091ec:	e635      	b.n	8008e5a <_scanf_float+0x82>
 80091ee:	bf00      	nop
 80091f0:	0800d6ae 	.word	0x0800d6ae
 80091f4:	0800da60 	.word	0x0800da60

080091f8 <std>:
 80091f8:	2300      	movs	r3, #0
 80091fa:	b510      	push	{r4, lr}
 80091fc:	4604      	mov	r4, r0
 80091fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009206:	6083      	str	r3, [r0, #8]
 8009208:	8181      	strh	r1, [r0, #12]
 800920a:	6643      	str	r3, [r0, #100]	; 0x64
 800920c:	81c2      	strh	r2, [r0, #14]
 800920e:	6183      	str	r3, [r0, #24]
 8009210:	4619      	mov	r1, r3
 8009212:	2208      	movs	r2, #8
 8009214:	305c      	adds	r0, #92	; 0x5c
 8009216:	f000 f942 	bl	800949e <memset>
 800921a:	4b0d      	ldr	r3, [pc, #52]	; (8009250 <std+0x58>)
 800921c:	6263      	str	r3, [r4, #36]	; 0x24
 800921e:	4b0d      	ldr	r3, [pc, #52]	; (8009254 <std+0x5c>)
 8009220:	62a3      	str	r3, [r4, #40]	; 0x28
 8009222:	4b0d      	ldr	r3, [pc, #52]	; (8009258 <std+0x60>)
 8009224:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009226:	4b0d      	ldr	r3, [pc, #52]	; (800925c <std+0x64>)
 8009228:	6323      	str	r3, [r4, #48]	; 0x30
 800922a:	4b0d      	ldr	r3, [pc, #52]	; (8009260 <std+0x68>)
 800922c:	6224      	str	r4, [r4, #32]
 800922e:	429c      	cmp	r4, r3
 8009230:	d006      	beq.n	8009240 <std+0x48>
 8009232:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009236:	4294      	cmp	r4, r2
 8009238:	d002      	beq.n	8009240 <std+0x48>
 800923a:	33d0      	adds	r3, #208	; 0xd0
 800923c:	429c      	cmp	r4, r3
 800923e:	d105      	bne.n	800924c <std+0x54>
 8009240:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009248:	f000 b9b4 	b.w	80095b4 <__retarget_lock_init_recursive>
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop
 8009250:	08009415 	.word	0x08009415
 8009254:	0800943b 	.word	0x0800943b
 8009258:	08009473 	.word	0x08009473
 800925c:	08009497 	.word	0x08009497
 8009260:	200006d0 	.word	0x200006d0

08009264 <stdio_exit_handler>:
 8009264:	4a02      	ldr	r2, [pc, #8]	; (8009270 <stdio_exit_handler+0xc>)
 8009266:	4903      	ldr	r1, [pc, #12]	; (8009274 <stdio_exit_handler+0x10>)
 8009268:	4803      	ldr	r0, [pc, #12]	; (8009278 <stdio_exit_handler+0x14>)
 800926a:	f000 b869 	b.w	8009340 <_fwalk_sglue>
 800926e:	bf00      	nop
 8009270:	20000008 	.word	0x20000008
 8009274:	0800c561 	.word	0x0800c561
 8009278:	20000014 	.word	0x20000014

0800927c <cleanup_stdio>:
 800927c:	6841      	ldr	r1, [r0, #4]
 800927e:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <cleanup_stdio+0x34>)
 8009280:	4299      	cmp	r1, r3
 8009282:	b510      	push	{r4, lr}
 8009284:	4604      	mov	r4, r0
 8009286:	d001      	beq.n	800928c <cleanup_stdio+0x10>
 8009288:	f003 f96a 	bl	800c560 <_fflush_r>
 800928c:	68a1      	ldr	r1, [r4, #8]
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <cleanup_stdio+0x38>)
 8009290:	4299      	cmp	r1, r3
 8009292:	d002      	beq.n	800929a <cleanup_stdio+0x1e>
 8009294:	4620      	mov	r0, r4
 8009296:	f003 f963 	bl	800c560 <_fflush_r>
 800929a:	68e1      	ldr	r1, [r4, #12]
 800929c:	4b06      	ldr	r3, [pc, #24]	; (80092b8 <cleanup_stdio+0x3c>)
 800929e:	4299      	cmp	r1, r3
 80092a0:	d004      	beq.n	80092ac <cleanup_stdio+0x30>
 80092a2:	4620      	mov	r0, r4
 80092a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092a8:	f003 b95a 	b.w	800c560 <_fflush_r>
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop
 80092b0:	200006d0 	.word	0x200006d0
 80092b4:	20000738 	.word	0x20000738
 80092b8:	200007a0 	.word	0x200007a0

080092bc <global_stdio_init.part.0>:
 80092bc:	b510      	push	{r4, lr}
 80092be:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <global_stdio_init.part.0+0x30>)
 80092c0:	4c0b      	ldr	r4, [pc, #44]	; (80092f0 <global_stdio_init.part.0+0x34>)
 80092c2:	4a0c      	ldr	r2, [pc, #48]	; (80092f4 <global_stdio_init.part.0+0x38>)
 80092c4:	601a      	str	r2, [r3, #0]
 80092c6:	4620      	mov	r0, r4
 80092c8:	2200      	movs	r2, #0
 80092ca:	2104      	movs	r1, #4
 80092cc:	f7ff ff94 	bl	80091f8 <std>
 80092d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80092d4:	2201      	movs	r2, #1
 80092d6:	2109      	movs	r1, #9
 80092d8:	f7ff ff8e 	bl	80091f8 <std>
 80092dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80092e0:	2202      	movs	r2, #2
 80092e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e6:	2112      	movs	r1, #18
 80092e8:	f7ff bf86 	b.w	80091f8 <std>
 80092ec:	20000808 	.word	0x20000808
 80092f0:	200006d0 	.word	0x200006d0
 80092f4:	08009265 	.word	0x08009265

080092f8 <__sfp_lock_acquire>:
 80092f8:	4801      	ldr	r0, [pc, #4]	; (8009300 <__sfp_lock_acquire+0x8>)
 80092fa:	f000 b95c 	b.w	80095b6 <__retarget_lock_acquire_recursive>
 80092fe:	bf00      	nop
 8009300:	20000811 	.word	0x20000811

08009304 <__sfp_lock_release>:
 8009304:	4801      	ldr	r0, [pc, #4]	; (800930c <__sfp_lock_release+0x8>)
 8009306:	f000 b957 	b.w	80095b8 <__retarget_lock_release_recursive>
 800930a:	bf00      	nop
 800930c:	20000811 	.word	0x20000811

08009310 <__sinit>:
 8009310:	b510      	push	{r4, lr}
 8009312:	4604      	mov	r4, r0
 8009314:	f7ff fff0 	bl	80092f8 <__sfp_lock_acquire>
 8009318:	6a23      	ldr	r3, [r4, #32]
 800931a:	b11b      	cbz	r3, 8009324 <__sinit+0x14>
 800931c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009320:	f7ff bff0 	b.w	8009304 <__sfp_lock_release>
 8009324:	4b04      	ldr	r3, [pc, #16]	; (8009338 <__sinit+0x28>)
 8009326:	6223      	str	r3, [r4, #32]
 8009328:	4b04      	ldr	r3, [pc, #16]	; (800933c <__sinit+0x2c>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1f5      	bne.n	800931c <__sinit+0xc>
 8009330:	f7ff ffc4 	bl	80092bc <global_stdio_init.part.0>
 8009334:	e7f2      	b.n	800931c <__sinit+0xc>
 8009336:	bf00      	nop
 8009338:	0800927d 	.word	0x0800927d
 800933c:	20000808 	.word	0x20000808

08009340 <_fwalk_sglue>:
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	4607      	mov	r7, r0
 8009346:	4688      	mov	r8, r1
 8009348:	4614      	mov	r4, r2
 800934a:	2600      	movs	r6, #0
 800934c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009350:	f1b9 0901 	subs.w	r9, r9, #1
 8009354:	d505      	bpl.n	8009362 <_fwalk_sglue+0x22>
 8009356:	6824      	ldr	r4, [r4, #0]
 8009358:	2c00      	cmp	r4, #0
 800935a:	d1f7      	bne.n	800934c <_fwalk_sglue+0xc>
 800935c:	4630      	mov	r0, r6
 800935e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009362:	89ab      	ldrh	r3, [r5, #12]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d907      	bls.n	8009378 <_fwalk_sglue+0x38>
 8009368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800936c:	3301      	adds	r3, #1
 800936e:	d003      	beq.n	8009378 <_fwalk_sglue+0x38>
 8009370:	4629      	mov	r1, r5
 8009372:	4638      	mov	r0, r7
 8009374:	47c0      	blx	r8
 8009376:	4306      	orrs	r6, r0
 8009378:	3568      	adds	r5, #104	; 0x68
 800937a:	e7e9      	b.n	8009350 <_fwalk_sglue+0x10>

0800937c <siprintf>:
 800937c:	b40e      	push	{r1, r2, r3}
 800937e:	b500      	push	{lr}
 8009380:	b09c      	sub	sp, #112	; 0x70
 8009382:	ab1d      	add	r3, sp, #116	; 0x74
 8009384:	9002      	str	r0, [sp, #8]
 8009386:	9006      	str	r0, [sp, #24]
 8009388:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800938c:	4809      	ldr	r0, [pc, #36]	; (80093b4 <siprintf+0x38>)
 800938e:	9107      	str	r1, [sp, #28]
 8009390:	9104      	str	r1, [sp, #16]
 8009392:	4909      	ldr	r1, [pc, #36]	; (80093b8 <siprintf+0x3c>)
 8009394:	f853 2b04 	ldr.w	r2, [r3], #4
 8009398:	9105      	str	r1, [sp, #20]
 800939a:	6800      	ldr	r0, [r0, #0]
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	a902      	add	r1, sp, #8
 80093a0:	f002 fc3a 	bl	800bc18 <_svfiprintf_r>
 80093a4:	9b02      	ldr	r3, [sp, #8]
 80093a6:	2200      	movs	r2, #0
 80093a8:	701a      	strb	r2, [r3, #0]
 80093aa:	b01c      	add	sp, #112	; 0x70
 80093ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b0:	b003      	add	sp, #12
 80093b2:	4770      	bx	lr
 80093b4:	20000060 	.word	0x20000060
 80093b8:	ffff0208 	.word	0xffff0208

080093bc <siscanf>:
 80093bc:	b40e      	push	{r1, r2, r3}
 80093be:	b510      	push	{r4, lr}
 80093c0:	b09f      	sub	sp, #124	; 0x7c
 80093c2:	ac21      	add	r4, sp, #132	; 0x84
 80093c4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80093c8:	f854 2b04 	ldr.w	r2, [r4], #4
 80093cc:	9201      	str	r2, [sp, #4]
 80093ce:	f8ad 101c 	strh.w	r1, [sp, #28]
 80093d2:	9004      	str	r0, [sp, #16]
 80093d4:	9008      	str	r0, [sp, #32]
 80093d6:	f7f6 ff73 	bl	80002c0 <strlen>
 80093da:	4b0c      	ldr	r3, [pc, #48]	; (800940c <siscanf+0x50>)
 80093dc:	9005      	str	r0, [sp, #20]
 80093de:	9009      	str	r0, [sp, #36]	; 0x24
 80093e0:	930d      	str	r3, [sp, #52]	; 0x34
 80093e2:	480b      	ldr	r0, [pc, #44]	; (8009410 <siscanf+0x54>)
 80093e4:	9a01      	ldr	r2, [sp, #4]
 80093e6:	6800      	ldr	r0, [r0, #0]
 80093e8:	9403      	str	r4, [sp, #12]
 80093ea:	2300      	movs	r3, #0
 80093ec:	9311      	str	r3, [sp, #68]	; 0x44
 80093ee:	9316      	str	r3, [sp, #88]	; 0x58
 80093f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80093f8:	a904      	add	r1, sp, #16
 80093fa:	4623      	mov	r3, r4
 80093fc:	f002 fd64 	bl	800bec8 <__ssvfiscanf_r>
 8009400:	b01f      	add	sp, #124	; 0x7c
 8009402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009406:	b003      	add	sp, #12
 8009408:	4770      	bx	lr
 800940a:	bf00      	nop
 800940c:	08009437 	.word	0x08009437
 8009410:	20000060 	.word	0x20000060

08009414 <__sread>:
 8009414:	b510      	push	{r4, lr}
 8009416:	460c      	mov	r4, r1
 8009418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800941c:	f000 f87c 	bl	8009518 <_read_r>
 8009420:	2800      	cmp	r0, #0
 8009422:	bfab      	itete	ge
 8009424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009426:	89a3      	ldrhlt	r3, [r4, #12]
 8009428:	181b      	addge	r3, r3, r0
 800942a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800942e:	bfac      	ite	ge
 8009430:	6563      	strge	r3, [r4, #84]	; 0x54
 8009432:	81a3      	strhlt	r3, [r4, #12]
 8009434:	bd10      	pop	{r4, pc}

08009436 <__seofread>:
 8009436:	2000      	movs	r0, #0
 8009438:	4770      	bx	lr

0800943a <__swrite>:
 800943a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800943e:	461f      	mov	r7, r3
 8009440:	898b      	ldrh	r3, [r1, #12]
 8009442:	05db      	lsls	r3, r3, #23
 8009444:	4605      	mov	r5, r0
 8009446:	460c      	mov	r4, r1
 8009448:	4616      	mov	r6, r2
 800944a:	d505      	bpl.n	8009458 <__swrite+0x1e>
 800944c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009450:	2302      	movs	r3, #2
 8009452:	2200      	movs	r2, #0
 8009454:	f000 f84e 	bl	80094f4 <_lseek_r>
 8009458:	89a3      	ldrh	r3, [r4, #12]
 800945a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800945e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009462:	81a3      	strh	r3, [r4, #12]
 8009464:	4632      	mov	r2, r6
 8009466:	463b      	mov	r3, r7
 8009468:	4628      	mov	r0, r5
 800946a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800946e:	f000 b865 	b.w	800953c <_write_r>

08009472 <__sseek>:
 8009472:	b510      	push	{r4, lr}
 8009474:	460c      	mov	r4, r1
 8009476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947a:	f000 f83b 	bl	80094f4 <_lseek_r>
 800947e:	1c43      	adds	r3, r0, #1
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	bf15      	itete	ne
 8009484:	6560      	strne	r0, [r4, #84]	; 0x54
 8009486:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800948a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800948e:	81a3      	strheq	r3, [r4, #12]
 8009490:	bf18      	it	ne
 8009492:	81a3      	strhne	r3, [r4, #12]
 8009494:	bd10      	pop	{r4, pc}

08009496 <__sclose>:
 8009496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949a:	f000 b81b 	b.w	80094d4 <_close_r>

0800949e <memset>:
 800949e:	4402      	add	r2, r0
 80094a0:	4603      	mov	r3, r0
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d100      	bne.n	80094a8 <memset+0xa>
 80094a6:	4770      	bx	lr
 80094a8:	f803 1b01 	strb.w	r1, [r3], #1
 80094ac:	e7f9      	b.n	80094a2 <memset+0x4>

080094ae <strcat>:
 80094ae:	b510      	push	{r4, lr}
 80094b0:	4602      	mov	r2, r0
 80094b2:	7814      	ldrb	r4, [r2, #0]
 80094b4:	4613      	mov	r3, r2
 80094b6:	3201      	adds	r2, #1
 80094b8:	2c00      	cmp	r4, #0
 80094ba:	d1fa      	bne.n	80094b2 <strcat+0x4>
 80094bc:	3b01      	subs	r3, #1
 80094be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094c6:	2a00      	cmp	r2, #0
 80094c8:	d1f9      	bne.n	80094be <strcat+0x10>
 80094ca:	bd10      	pop	{r4, pc}

080094cc <_localeconv_r>:
 80094cc:	4800      	ldr	r0, [pc, #0]	; (80094d0 <_localeconv_r+0x4>)
 80094ce:	4770      	bx	lr
 80094d0:	20000154 	.word	0x20000154

080094d4 <_close_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d06      	ldr	r5, [pc, #24]	; (80094f0 <_close_r+0x1c>)
 80094d8:	2300      	movs	r3, #0
 80094da:	4604      	mov	r4, r0
 80094dc:	4608      	mov	r0, r1
 80094de:	602b      	str	r3, [r5, #0]
 80094e0:	f7f9 faeb 	bl	8002aba <_close>
 80094e4:	1c43      	adds	r3, r0, #1
 80094e6:	d102      	bne.n	80094ee <_close_r+0x1a>
 80094e8:	682b      	ldr	r3, [r5, #0]
 80094ea:	b103      	cbz	r3, 80094ee <_close_r+0x1a>
 80094ec:	6023      	str	r3, [r4, #0]
 80094ee:	bd38      	pop	{r3, r4, r5, pc}
 80094f0:	2000080c 	.word	0x2000080c

080094f4 <_lseek_r>:
 80094f4:	b538      	push	{r3, r4, r5, lr}
 80094f6:	4d07      	ldr	r5, [pc, #28]	; (8009514 <_lseek_r+0x20>)
 80094f8:	4604      	mov	r4, r0
 80094fa:	4608      	mov	r0, r1
 80094fc:	4611      	mov	r1, r2
 80094fe:	2200      	movs	r2, #0
 8009500:	602a      	str	r2, [r5, #0]
 8009502:	461a      	mov	r2, r3
 8009504:	f7f9 fb00 	bl	8002b08 <_lseek>
 8009508:	1c43      	adds	r3, r0, #1
 800950a:	d102      	bne.n	8009512 <_lseek_r+0x1e>
 800950c:	682b      	ldr	r3, [r5, #0]
 800950e:	b103      	cbz	r3, 8009512 <_lseek_r+0x1e>
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	bd38      	pop	{r3, r4, r5, pc}
 8009514:	2000080c 	.word	0x2000080c

08009518 <_read_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4d07      	ldr	r5, [pc, #28]	; (8009538 <_read_r+0x20>)
 800951c:	4604      	mov	r4, r0
 800951e:	4608      	mov	r0, r1
 8009520:	4611      	mov	r1, r2
 8009522:	2200      	movs	r2, #0
 8009524:	602a      	str	r2, [r5, #0]
 8009526:	461a      	mov	r2, r3
 8009528:	f7f9 fa8e 	bl	8002a48 <_read>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_read_r+0x1e>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	b103      	cbz	r3, 8009536 <_read_r+0x1e>
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	2000080c 	.word	0x2000080c

0800953c <_write_r>:
 800953c:	b538      	push	{r3, r4, r5, lr}
 800953e:	4d07      	ldr	r5, [pc, #28]	; (800955c <_write_r+0x20>)
 8009540:	4604      	mov	r4, r0
 8009542:	4608      	mov	r0, r1
 8009544:	4611      	mov	r1, r2
 8009546:	2200      	movs	r2, #0
 8009548:	602a      	str	r2, [r5, #0]
 800954a:	461a      	mov	r2, r3
 800954c:	f7f9 fa99 	bl	8002a82 <_write>
 8009550:	1c43      	adds	r3, r0, #1
 8009552:	d102      	bne.n	800955a <_write_r+0x1e>
 8009554:	682b      	ldr	r3, [r5, #0]
 8009556:	b103      	cbz	r3, 800955a <_write_r+0x1e>
 8009558:	6023      	str	r3, [r4, #0]
 800955a:	bd38      	pop	{r3, r4, r5, pc}
 800955c:	2000080c 	.word	0x2000080c

08009560 <__errno>:
 8009560:	4b01      	ldr	r3, [pc, #4]	; (8009568 <__errno+0x8>)
 8009562:	6818      	ldr	r0, [r3, #0]
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	20000060 	.word	0x20000060

0800956c <__libc_init_array>:
 800956c:	b570      	push	{r4, r5, r6, lr}
 800956e:	4d0d      	ldr	r5, [pc, #52]	; (80095a4 <__libc_init_array+0x38>)
 8009570:	4c0d      	ldr	r4, [pc, #52]	; (80095a8 <__libc_init_array+0x3c>)
 8009572:	1b64      	subs	r4, r4, r5
 8009574:	10a4      	asrs	r4, r4, #2
 8009576:	2600      	movs	r6, #0
 8009578:	42a6      	cmp	r6, r4
 800957a:	d109      	bne.n	8009590 <__libc_init_array+0x24>
 800957c:	4d0b      	ldr	r5, [pc, #44]	; (80095ac <__libc_init_array+0x40>)
 800957e:	4c0c      	ldr	r4, [pc, #48]	; (80095b0 <__libc_init_array+0x44>)
 8009580:	f003 ffde 	bl	800d540 <_init>
 8009584:	1b64      	subs	r4, r4, r5
 8009586:	10a4      	asrs	r4, r4, #2
 8009588:	2600      	movs	r6, #0
 800958a:	42a6      	cmp	r6, r4
 800958c:	d105      	bne.n	800959a <__libc_init_array+0x2e>
 800958e:	bd70      	pop	{r4, r5, r6, pc}
 8009590:	f855 3b04 	ldr.w	r3, [r5], #4
 8009594:	4798      	blx	r3
 8009596:	3601      	adds	r6, #1
 8009598:	e7ee      	b.n	8009578 <__libc_init_array+0xc>
 800959a:	f855 3b04 	ldr.w	r3, [r5], #4
 800959e:	4798      	blx	r3
 80095a0:	3601      	adds	r6, #1
 80095a2:	e7f2      	b.n	800958a <__libc_init_array+0x1e>
 80095a4:	0800dacc 	.word	0x0800dacc
 80095a8:	0800dacc 	.word	0x0800dacc
 80095ac:	0800dacc 	.word	0x0800dacc
 80095b0:	0800dad0 	.word	0x0800dad0

080095b4 <__retarget_lock_init_recursive>:
 80095b4:	4770      	bx	lr

080095b6 <__retarget_lock_acquire_recursive>:
 80095b6:	4770      	bx	lr

080095b8 <__retarget_lock_release_recursive>:
 80095b8:	4770      	bx	lr

080095ba <memcpy>:
 80095ba:	440a      	add	r2, r1
 80095bc:	4291      	cmp	r1, r2
 80095be:	f100 33ff 	add.w	r3, r0, #4294967295
 80095c2:	d100      	bne.n	80095c6 <memcpy+0xc>
 80095c4:	4770      	bx	lr
 80095c6:	b510      	push	{r4, lr}
 80095c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095d0:	4291      	cmp	r1, r2
 80095d2:	d1f9      	bne.n	80095c8 <memcpy+0xe>
 80095d4:	bd10      	pop	{r4, pc}
	...

080095d8 <nanf>:
 80095d8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80095e0 <nanf+0x8>
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	7fc00000 	.word	0x7fc00000

080095e4 <quorem>:
 80095e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095e8:	6903      	ldr	r3, [r0, #16]
 80095ea:	690c      	ldr	r4, [r1, #16]
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	4607      	mov	r7, r0
 80095f0:	db7e      	blt.n	80096f0 <quorem+0x10c>
 80095f2:	3c01      	subs	r4, #1
 80095f4:	f101 0814 	add.w	r8, r1, #20
 80095f8:	f100 0514 	add.w	r5, r0, #20
 80095fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009600:	9301      	str	r3, [sp, #4]
 8009602:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009606:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800960a:	3301      	adds	r3, #1
 800960c:	429a      	cmp	r2, r3
 800960e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009612:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009616:	fbb2 f6f3 	udiv	r6, r2, r3
 800961a:	d331      	bcc.n	8009680 <quorem+0x9c>
 800961c:	f04f 0e00 	mov.w	lr, #0
 8009620:	4640      	mov	r0, r8
 8009622:	46ac      	mov	ip, r5
 8009624:	46f2      	mov	sl, lr
 8009626:	f850 2b04 	ldr.w	r2, [r0], #4
 800962a:	b293      	uxth	r3, r2
 800962c:	fb06 e303 	mla	r3, r6, r3, lr
 8009630:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009634:	0c1a      	lsrs	r2, r3, #16
 8009636:	b29b      	uxth	r3, r3
 8009638:	ebaa 0303 	sub.w	r3, sl, r3
 800963c:	f8dc a000 	ldr.w	sl, [ip]
 8009640:	fa13 f38a 	uxtah	r3, r3, sl
 8009644:	fb06 220e 	mla	r2, r6, lr, r2
 8009648:	9300      	str	r3, [sp, #0]
 800964a:	9b00      	ldr	r3, [sp, #0]
 800964c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009650:	b292      	uxth	r2, r2
 8009652:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009656:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800965a:	f8bd 3000 	ldrh.w	r3, [sp]
 800965e:	4581      	cmp	r9, r0
 8009660:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009664:	f84c 3b04 	str.w	r3, [ip], #4
 8009668:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800966c:	d2db      	bcs.n	8009626 <quorem+0x42>
 800966e:	f855 300b 	ldr.w	r3, [r5, fp]
 8009672:	b92b      	cbnz	r3, 8009680 <quorem+0x9c>
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	3b04      	subs	r3, #4
 8009678:	429d      	cmp	r5, r3
 800967a:	461a      	mov	r2, r3
 800967c:	d32c      	bcc.n	80096d8 <quorem+0xf4>
 800967e:	613c      	str	r4, [r7, #16]
 8009680:	4638      	mov	r0, r7
 8009682:	f001 f9f1 	bl	800aa68 <__mcmp>
 8009686:	2800      	cmp	r0, #0
 8009688:	db22      	blt.n	80096d0 <quorem+0xec>
 800968a:	3601      	adds	r6, #1
 800968c:	4629      	mov	r1, r5
 800968e:	2000      	movs	r0, #0
 8009690:	f858 2b04 	ldr.w	r2, [r8], #4
 8009694:	f8d1 c000 	ldr.w	ip, [r1]
 8009698:	b293      	uxth	r3, r2
 800969a:	1ac3      	subs	r3, r0, r3
 800969c:	0c12      	lsrs	r2, r2, #16
 800969e:	fa13 f38c 	uxtah	r3, r3, ip
 80096a2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80096a6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80096aa:	b29b      	uxth	r3, r3
 80096ac:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096b0:	45c1      	cmp	r9, r8
 80096b2:	f841 3b04 	str.w	r3, [r1], #4
 80096b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096ba:	d2e9      	bcs.n	8009690 <quorem+0xac>
 80096bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096c4:	b922      	cbnz	r2, 80096d0 <quorem+0xec>
 80096c6:	3b04      	subs	r3, #4
 80096c8:	429d      	cmp	r5, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	d30a      	bcc.n	80096e4 <quorem+0x100>
 80096ce:	613c      	str	r4, [r7, #16]
 80096d0:	4630      	mov	r0, r6
 80096d2:	b003      	add	sp, #12
 80096d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096d8:	6812      	ldr	r2, [r2, #0]
 80096da:	3b04      	subs	r3, #4
 80096dc:	2a00      	cmp	r2, #0
 80096de:	d1ce      	bne.n	800967e <quorem+0x9a>
 80096e0:	3c01      	subs	r4, #1
 80096e2:	e7c9      	b.n	8009678 <quorem+0x94>
 80096e4:	6812      	ldr	r2, [r2, #0]
 80096e6:	3b04      	subs	r3, #4
 80096e8:	2a00      	cmp	r2, #0
 80096ea:	d1f0      	bne.n	80096ce <quorem+0xea>
 80096ec:	3c01      	subs	r4, #1
 80096ee:	e7eb      	b.n	80096c8 <quorem+0xe4>
 80096f0:	2000      	movs	r0, #0
 80096f2:	e7ee      	b.n	80096d2 <quorem+0xee>
 80096f4:	0000      	movs	r0, r0
	...

080096f8 <_dtoa_r>:
 80096f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096fc:	ed2d 8b04 	vpush	{d8-d9}
 8009700:	69c5      	ldr	r5, [r0, #28]
 8009702:	b093      	sub	sp, #76	; 0x4c
 8009704:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009708:	ec57 6b10 	vmov	r6, r7, d0
 800970c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009710:	9107      	str	r1, [sp, #28]
 8009712:	4604      	mov	r4, r0
 8009714:	920a      	str	r2, [sp, #40]	; 0x28
 8009716:	930d      	str	r3, [sp, #52]	; 0x34
 8009718:	b975      	cbnz	r5, 8009738 <_dtoa_r+0x40>
 800971a:	2010      	movs	r0, #16
 800971c:	f000 fe2a 	bl	800a374 <malloc>
 8009720:	4602      	mov	r2, r0
 8009722:	61e0      	str	r0, [r4, #28]
 8009724:	b920      	cbnz	r0, 8009730 <_dtoa_r+0x38>
 8009726:	4bae      	ldr	r3, [pc, #696]	; (80099e0 <_dtoa_r+0x2e8>)
 8009728:	21ef      	movs	r1, #239	; 0xef
 800972a:	48ae      	ldr	r0, [pc, #696]	; (80099e4 <_dtoa_r+0x2ec>)
 800972c:	f002 fff8 	bl	800c720 <__assert_func>
 8009730:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009734:	6005      	str	r5, [r0, #0]
 8009736:	60c5      	str	r5, [r0, #12]
 8009738:	69e3      	ldr	r3, [r4, #28]
 800973a:	6819      	ldr	r1, [r3, #0]
 800973c:	b151      	cbz	r1, 8009754 <_dtoa_r+0x5c>
 800973e:	685a      	ldr	r2, [r3, #4]
 8009740:	604a      	str	r2, [r1, #4]
 8009742:	2301      	movs	r3, #1
 8009744:	4093      	lsls	r3, r2
 8009746:	608b      	str	r3, [r1, #8]
 8009748:	4620      	mov	r0, r4
 800974a:	f000 ff07 	bl	800a55c <_Bfree>
 800974e:	69e3      	ldr	r3, [r4, #28]
 8009750:	2200      	movs	r2, #0
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	1e3b      	subs	r3, r7, #0
 8009756:	bfbb      	ittet	lt
 8009758:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800975c:	9303      	strlt	r3, [sp, #12]
 800975e:	2300      	movge	r3, #0
 8009760:	2201      	movlt	r2, #1
 8009762:	bfac      	ite	ge
 8009764:	f8c8 3000 	strge.w	r3, [r8]
 8009768:	f8c8 2000 	strlt.w	r2, [r8]
 800976c:	4b9e      	ldr	r3, [pc, #632]	; (80099e8 <_dtoa_r+0x2f0>)
 800976e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009772:	ea33 0308 	bics.w	r3, r3, r8
 8009776:	d11b      	bne.n	80097b0 <_dtoa_r+0xb8>
 8009778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800977a:	f242 730f 	movw	r3, #9999	; 0x270f
 800977e:	6013      	str	r3, [r2, #0]
 8009780:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009784:	4333      	orrs	r3, r6
 8009786:	f000 8593 	beq.w	800a2b0 <_dtoa_r+0xbb8>
 800978a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800978c:	b963      	cbnz	r3, 80097a8 <_dtoa_r+0xb0>
 800978e:	4b97      	ldr	r3, [pc, #604]	; (80099ec <_dtoa_r+0x2f4>)
 8009790:	e027      	b.n	80097e2 <_dtoa_r+0xea>
 8009792:	4b97      	ldr	r3, [pc, #604]	; (80099f0 <_dtoa_r+0x2f8>)
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	3308      	adds	r3, #8
 8009798:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800979a:	6013      	str	r3, [r2, #0]
 800979c:	9800      	ldr	r0, [sp, #0]
 800979e:	b013      	add	sp, #76	; 0x4c
 80097a0:	ecbd 8b04 	vpop	{d8-d9}
 80097a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a8:	4b90      	ldr	r3, [pc, #576]	; (80099ec <_dtoa_r+0x2f4>)
 80097aa:	9300      	str	r3, [sp, #0]
 80097ac:	3303      	adds	r3, #3
 80097ae:	e7f3      	b.n	8009798 <_dtoa_r+0xa0>
 80097b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097b4:	2200      	movs	r2, #0
 80097b6:	ec51 0b17 	vmov	r0, r1, d7
 80097ba:	eeb0 8a47 	vmov.f32	s16, s14
 80097be:	eef0 8a67 	vmov.f32	s17, s15
 80097c2:	2300      	movs	r3, #0
 80097c4:	f7f7 f9a8 	bl	8000b18 <__aeabi_dcmpeq>
 80097c8:	4681      	mov	r9, r0
 80097ca:	b160      	cbz	r0, 80097e6 <_dtoa_r+0xee>
 80097cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097ce:	2301      	movs	r3, #1
 80097d0:	6013      	str	r3, [r2, #0]
 80097d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	f000 8568 	beq.w	800a2aa <_dtoa_r+0xbb2>
 80097da:	4b86      	ldr	r3, [pc, #536]	; (80099f4 <_dtoa_r+0x2fc>)
 80097dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	3b01      	subs	r3, #1
 80097e2:	9300      	str	r3, [sp, #0]
 80097e4:	e7da      	b.n	800979c <_dtoa_r+0xa4>
 80097e6:	aa10      	add	r2, sp, #64	; 0x40
 80097e8:	a911      	add	r1, sp, #68	; 0x44
 80097ea:	4620      	mov	r0, r4
 80097ec:	eeb0 0a48 	vmov.f32	s0, s16
 80097f0:	eef0 0a68 	vmov.f32	s1, s17
 80097f4:	f001 fa4e 	bl	800ac94 <__d2b>
 80097f8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80097fc:	4682      	mov	sl, r0
 80097fe:	2d00      	cmp	r5, #0
 8009800:	d07f      	beq.n	8009902 <_dtoa_r+0x20a>
 8009802:	ee18 3a90 	vmov	r3, s17
 8009806:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800980a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800980e:	ec51 0b18 	vmov	r0, r1, d8
 8009812:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009816:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800981a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800981e:	4619      	mov	r1, r3
 8009820:	2200      	movs	r2, #0
 8009822:	4b75      	ldr	r3, [pc, #468]	; (80099f8 <_dtoa_r+0x300>)
 8009824:	f7f6 fd58 	bl	80002d8 <__aeabi_dsub>
 8009828:	a367      	add	r3, pc, #412	; (adr r3, 80099c8 <_dtoa_r+0x2d0>)
 800982a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800982e:	f7f6 ff0b 	bl	8000648 <__aeabi_dmul>
 8009832:	a367      	add	r3, pc, #412	; (adr r3, 80099d0 <_dtoa_r+0x2d8>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f7f6 fd50 	bl	80002dc <__adddf3>
 800983c:	4606      	mov	r6, r0
 800983e:	4628      	mov	r0, r5
 8009840:	460f      	mov	r7, r1
 8009842:	f7f6 fe97 	bl	8000574 <__aeabi_i2d>
 8009846:	a364      	add	r3, pc, #400	; (adr r3, 80099d8 <_dtoa_r+0x2e0>)
 8009848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984c:	f7f6 fefc 	bl	8000648 <__aeabi_dmul>
 8009850:	4602      	mov	r2, r0
 8009852:	460b      	mov	r3, r1
 8009854:	4630      	mov	r0, r6
 8009856:	4639      	mov	r1, r7
 8009858:	f7f6 fd40 	bl	80002dc <__adddf3>
 800985c:	4606      	mov	r6, r0
 800985e:	460f      	mov	r7, r1
 8009860:	f7f7 f9a2 	bl	8000ba8 <__aeabi_d2iz>
 8009864:	2200      	movs	r2, #0
 8009866:	4683      	mov	fp, r0
 8009868:	2300      	movs	r3, #0
 800986a:	4630      	mov	r0, r6
 800986c:	4639      	mov	r1, r7
 800986e:	f7f7 f95d 	bl	8000b2c <__aeabi_dcmplt>
 8009872:	b148      	cbz	r0, 8009888 <_dtoa_r+0x190>
 8009874:	4658      	mov	r0, fp
 8009876:	f7f6 fe7d 	bl	8000574 <__aeabi_i2d>
 800987a:	4632      	mov	r2, r6
 800987c:	463b      	mov	r3, r7
 800987e:	f7f7 f94b 	bl	8000b18 <__aeabi_dcmpeq>
 8009882:	b908      	cbnz	r0, 8009888 <_dtoa_r+0x190>
 8009884:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009888:	f1bb 0f16 	cmp.w	fp, #22
 800988c:	d857      	bhi.n	800993e <_dtoa_r+0x246>
 800988e:	4b5b      	ldr	r3, [pc, #364]	; (80099fc <_dtoa_r+0x304>)
 8009890:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009898:	ec51 0b18 	vmov	r0, r1, d8
 800989c:	f7f7 f946 	bl	8000b2c <__aeabi_dcmplt>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d04e      	beq.n	8009942 <_dtoa_r+0x24a>
 80098a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80098a8:	2300      	movs	r3, #0
 80098aa:	930c      	str	r3, [sp, #48]	; 0x30
 80098ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80098ae:	1b5b      	subs	r3, r3, r5
 80098b0:	1e5a      	subs	r2, r3, #1
 80098b2:	bf45      	ittet	mi
 80098b4:	f1c3 0301 	rsbmi	r3, r3, #1
 80098b8:	9305      	strmi	r3, [sp, #20]
 80098ba:	2300      	movpl	r3, #0
 80098bc:	2300      	movmi	r3, #0
 80098be:	9206      	str	r2, [sp, #24]
 80098c0:	bf54      	ite	pl
 80098c2:	9305      	strpl	r3, [sp, #20]
 80098c4:	9306      	strmi	r3, [sp, #24]
 80098c6:	f1bb 0f00 	cmp.w	fp, #0
 80098ca:	db3c      	blt.n	8009946 <_dtoa_r+0x24e>
 80098cc:	9b06      	ldr	r3, [sp, #24]
 80098ce:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80098d2:	445b      	add	r3, fp
 80098d4:	9306      	str	r3, [sp, #24]
 80098d6:	2300      	movs	r3, #0
 80098d8:	9308      	str	r3, [sp, #32]
 80098da:	9b07      	ldr	r3, [sp, #28]
 80098dc:	2b09      	cmp	r3, #9
 80098de:	d868      	bhi.n	80099b2 <_dtoa_r+0x2ba>
 80098e0:	2b05      	cmp	r3, #5
 80098e2:	bfc4      	itt	gt
 80098e4:	3b04      	subgt	r3, #4
 80098e6:	9307      	strgt	r3, [sp, #28]
 80098e8:	9b07      	ldr	r3, [sp, #28]
 80098ea:	f1a3 0302 	sub.w	r3, r3, #2
 80098ee:	bfcc      	ite	gt
 80098f0:	2500      	movgt	r5, #0
 80098f2:	2501      	movle	r5, #1
 80098f4:	2b03      	cmp	r3, #3
 80098f6:	f200 8085 	bhi.w	8009a04 <_dtoa_r+0x30c>
 80098fa:	e8df f003 	tbb	[pc, r3]
 80098fe:	3b2e      	.short	0x3b2e
 8009900:	5839      	.short	0x5839
 8009902:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009906:	441d      	add	r5, r3
 8009908:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800990c:	2b20      	cmp	r3, #32
 800990e:	bfc1      	itttt	gt
 8009910:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009914:	fa08 f803 	lslgt.w	r8, r8, r3
 8009918:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800991c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009920:	bfd6      	itet	le
 8009922:	f1c3 0320 	rsble	r3, r3, #32
 8009926:	ea48 0003 	orrgt.w	r0, r8, r3
 800992a:	fa06 f003 	lslle.w	r0, r6, r3
 800992e:	f7f6 fe11 	bl	8000554 <__aeabi_ui2d>
 8009932:	2201      	movs	r2, #1
 8009934:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009938:	3d01      	subs	r5, #1
 800993a:	920e      	str	r2, [sp, #56]	; 0x38
 800993c:	e76f      	b.n	800981e <_dtoa_r+0x126>
 800993e:	2301      	movs	r3, #1
 8009940:	e7b3      	b.n	80098aa <_dtoa_r+0x1b2>
 8009942:	900c      	str	r0, [sp, #48]	; 0x30
 8009944:	e7b2      	b.n	80098ac <_dtoa_r+0x1b4>
 8009946:	9b05      	ldr	r3, [sp, #20]
 8009948:	eba3 030b 	sub.w	r3, r3, fp
 800994c:	9305      	str	r3, [sp, #20]
 800994e:	f1cb 0300 	rsb	r3, fp, #0
 8009952:	9308      	str	r3, [sp, #32]
 8009954:	2300      	movs	r3, #0
 8009956:	930b      	str	r3, [sp, #44]	; 0x2c
 8009958:	e7bf      	b.n	80098da <_dtoa_r+0x1e2>
 800995a:	2300      	movs	r3, #0
 800995c:	9309      	str	r3, [sp, #36]	; 0x24
 800995e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009960:	2b00      	cmp	r3, #0
 8009962:	dc52      	bgt.n	8009a0a <_dtoa_r+0x312>
 8009964:	2301      	movs	r3, #1
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	461a      	mov	r2, r3
 800996c:	920a      	str	r2, [sp, #40]	; 0x28
 800996e:	e00b      	b.n	8009988 <_dtoa_r+0x290>
 8009970:	2301      	movs	r3, #1
 8009972:	e7f3      	b.n	800995c <_dtoa_r+0x264>
 8009974:	2300      	movs	r3, #0
 8009976:	9309      	str	r3, [sp, #36]	; 0x24
 8009978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800997a:	445b      	add	r3, fp
 800997c:	9301      	str	r3, [sp, #4]
 800997e:	3301      	adds	r3, #1
 8009980:	2b01      	cmp	r3, #1
 8009982:	9304      	str	r3, [sp, #16]
 8009984:	bfb8      	it	lt
 8009986:	2301      	movlt	r3, #1
 8009988:	69e0      	ldr	r0, [r4, #28]
 800998a:	2100      	movs	r1, #0
 800998c:	2204      	movs	r2, #4
 800998e:	f102 0614 	add.w	r6, r2, #20
 8009992:	429e      	cmp	r6, r3
 8009994:	d93d      	bls.n	8009a12 <_dtoa_r+0x31a>
 8009996:	6041      	str	r1, [r0, #4]
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fd9f 	bl	800a4dc <_Balloc>
 800999e:	9000      	str	r0, [sp, #0]
 80099a0:	2800      	cmp	r0, #0
 80099a2:	d139      	bne.n	8009a18 <_dtoa_r+0x320>
 80099a4:	4b16      	ldr	r3, [pc, #88]	; (8009a00 <_dtoa_r+0x308>)
 80099a6:	4602      	mov	r2, r0
 80099a8:	f240 11af 	movw	r1, #431	; 0x1af
 80099ac:	e6bd      	b.n	800972a <_dtoa_r+0x32>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e7e1      	b.n	8009976 <_dtoa_r+0x27e>
 80099b2:	2501      	movs	r5, #1
 80099b4:	2300      	movs	r3, #0
 80099b6:	9307      	str	r3, [sp, #28]
 80099b8:	9509      	str	r5, [sp, #36]	; 0x24
 80099ba:	f04f 33ff 	mov.w	r3, #4294967295
 80099be:	9301      	str	r3, [sp, #4]
 80099c0:	9304      	str	r3, [sp, #16]
 80099c2:	2200      	movs	r2, #0
 80099c4:	2312      	movs	r3, #18
 80099c6:	e7d1      	b.n	800996c <_dtoa_r+0x274>
 80099c8:	636f4361 	.word	0x636f4361
 80099cc:	3fd287a7 	.word	0x3fd287a7
 80099d0:	8b60c8b3 	.word	0x8b60c8b3
 80099d4:	3fc68a28 	.word	0x3fc68a28
 80099d8:	509f79fb 	.word	0x509f79fb
 80099dc:	3fd34413 	.word	0x3fd34413
 80099e0:	0800d6c0 	.word	0x0800d6c0
 80099e4:	0800d6d7 	.word	0x0800d6d7
 80099e8:	7ff00000 	.word	0x7ff00000
 80099ec:	0800d6bc 	.word	0x0800d6bc
 80099f0:	0800d6b3 	.word	0x0800d6b3
 80099f4:	0800da19 	.word	0x0800da19
 80099f8:	3ff80000 	.word	0x3ff80000
 80099fc:	0800d7c8 	.word	0x0800d7c8
 8009a00:	0800d72f 	.word	0x0800d72f
 8009a04:	2301      	movs	r3, #1
 8009a06:	9309      	str	r3, [sp, #36]	; 0x24
 8009a08:	e7d7      	b.n	80099ba <_dtoa_r+0x2c2>
 8009a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a0c:	9301      	str	r3, [sp, #4]
 8009a0e:	9304      	str	r3, [sp, #16]
 8009a10:	e7ba      	b.n	8009988 <_dtoa_r+0x290>
 8009a12:	3101      	adds	r1, #1
 8009a14:	0052      	lsls	r2, r2, #1
 8009a16:	e7ba      	b.n	800998e <_dtoa_r+0x296>
 8009a18:	69e3      	ldr	r3, [r4, #28]
 8009a1a:	9a00      	ldr	r2, [sp, #0]
 8009a1c:	601a      	str	r2, [r3, #0]
 8009a1e:	9b04      	ldr	r3, [sp, #16]
 8009a20:	2b0e      	cmp	r3, #14
 8009a22:	f200 80a8 	bhi.w	8009b76 <_dtoa_r+0x47e>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	f000 80a5 	beq.w	8009b76 <_dtoa_r+0x47e>
 8009a2c:	f1bb 0f00 	cmp.w	fp, #0
 8009a30:	dd38      	ble.n	8009aa4 <_dtoa_r+0x3ac>
 8009a32:	4bc0      	ldr	r3, [pc, #768]	; (8009d34 <_dtoa_r+0x63c>)
 8009a34:	f00b 020f 	and.w	r2, fp, #15
 8009a38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a3c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009a40:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009a44:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009a48:	d019      	beq.n	8009a7e <_dtoa_r+0x386>
 8009a4a:	4bbb      	ldr	r3, [pc, #748]	; (8009d38 <_dtoa_r+0x640>)
 8009a4c:	ec51 0b18 	vmov	r0, r1, d8
 8009a50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a54:	f7f6 ff22 	bl	800089c <__aeabi_ddiv>
 8009a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a5c:	f008 080f 	and.w	r8, r8, #15
 8009a60:	2503      	movs	r5, #3
 8009a62:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009d38 <_dtoa_r+0x640>
 8009a66:	f1b8 0f00 	cmp.w	r8, #0
 8009a6a:	d10a      	bne.n	8009a82 <_dtoa_r+0x38a>
 8009a6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a70:	4632      	mov	r2, r6
 8009a72:	463b      	mov	r3, r7
 8009a74:	f7f6 ff12 	bl	800089c <__aeabi_ddiv>
 8009a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a7c:	e02b      	b.n	8009ad6 <_dtoa_r+0x3de>
 8009a7e:	2502      	movs	r5, #2
 8009a80:	e7ef      	b.n	8009a62 <_dtoa_r+0x36a>
 8009a82:	f018 0f01 	tst.w	r8, #1
 8009a86:	d008      	beq.n	8009a9a <_dtoa_r+0x3a2>
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009a90:	f7f6 fdda 	bl	8000648 <__aeabi_dmul>
 8009a94:	3501      	adds	r5, #1
 8009a96:	4606      	mov	r6, r0
 8009a98:	460f      	mov	r7, r1
 8009a9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009a9e:	f109 0908 	add.w	r9, r9, #8
 8009aa2:	e7e0      	b.n	8009a66 <_dtoa_r+0x36e>
 8009aa4:	f000 809f 	beq.w	8009be6 <_dtoa_r+0x4ee>
 8009aa8:	f1cb 0600 	rsb	r6, fp, #0
 8009aac:	4ba1      	ldr	r3, [pc, #644]	; (8009d34 <_dtoa_r+0x63c>)
 8009aae:	4fa2      	ldr	r7, [pc, #648]	; (8009d38 <_dtoa_r+0x640>)
 8009ab0:	f006 020f 	and.w	r2, r6, #15
 8009ab4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	ec51 0b18 	vmov	r0, r1, d8
 8009ac0:	f7f6 fdc2 	bl	8000648 <__aeabi_dmul>
 8009ac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ac8:	1136      	asrs	r6, r6, #4
 8009aca:	2300      	movs	r3, #0
 8009acc:	2502      	movs	r5, #2
 8009ace:	2e00      	cmp	r6, #0
 8009ad0:	d17e      	bne.n	8009bd0 <_dtoa_r+0x4d8>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1d0      	bne.n	8009a78 <_dtoa_r+0x380>
 8009ad6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009ad8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8084 	beq.w	8009bea <_dtoa_r+0x4f2>
 8009ae2:	4b96      	ldr	r3, [pc, #600]	; (8009d3c <_dtoa_r+0x644>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	4640      	mov	r0, r8
 8009ae8:	4649      	mov	r1, r9
 8009aea:	f7f7 f81f 	bl	8000b2c <__aeabi_dcmplt>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d07b      	beq.n	8009bea <_dtoa_r+0x4f2>
 8009af2:	9b04      	ldr	r3, [sp, #16]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d078      	beq.n	8009bea <_dtoa_r+0x4f2>
 8009af8:	9b01      	ldr	r3, [sp, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dd39      	ble.n	8009b72 <_dtoa_r+0x47a>
 8009afe:	4b90      	ldr	r3, [pc, #576]	; (8009d40 <_dtoa_r+0x648>)
 8009b00:	2200      	movs	r2, #0
 8009b02:	4640      	mov	r0, r8
 8009b04:	4649      	mov	r1, r9
 8009b06:	f7f6 fd9f 	bl	8000648 <__aeabi_dmul>
 8009b0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b0e:	9e01      	ldr	r6, [sp, #4]
 8009b10:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009b14:	3501      	adds	r5, #1
 8009b16:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009b1a:	4628      	mov	r0, r5
 8009b1c:	f7f6 fd2a 	bl	8000574 <__aeabi_i2d>
 8009b20:	4642      	mov	r2, r8
 8009b22:	464b      	mov	r3, r9
 8009b24:	f7f6 fd90 	bl	8000648 <__aeabi_dmul>
 8009b28:	4b86      	ldr	r3, [pc, #536]	; (8009d44 <_dtoa_r+0x64c>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f7f6 fbd6 	bl	80002dc <__adddf3>
 8009b30:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009b34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b38:	9303      	str	r3, [sp, #12]
 8009b3a:	2e00      	cmp	r6, #0
 8009b3c:	d158      	bne.n	8009bf0 <_dtoa_r+0x4f8>
 8009b3e:	4b82      	ldr	r3, [pc, #520]	; (8009d48 <_dtoa_r+0x650>)
 8009b40:	2200      	movs	r2, #0
 8009b42:	4640      	mov	r0, r8
 8009b44:	4649      	mov	r1, r9
 8009b46:	f7f6 fbc7 	bl	80002d8 <__aeabi_dsub>
 8009b4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b4e:	4680      	mov	r8, r0
 8009b50:	4689      	mov	r9, r1
 8009b52:	f7f7 f809 	bl	8000b68 <__aeabi_dcmpgt>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	f040 8296 	bne.w	800a088 <_dtoa_r+0x990>
 8009b5c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009b60:	4640      	mov	r0, r8
 8009b62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b66:	4649      	mov	r1, r9
 8009b68:	f7f6 ffe0 	bl	8000b2c <__aeabi_dcmplt>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	f040 8289 	bne.w	800a084 <_dtoa_r+0x98c>
 8009b72:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009b76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	f2c0 814e 	blt.w	8009e1a <_dtoa_r+0x722>
 8009b7e:	f1bb 0f0e 	cmp.w	fp, #14
 8009b82:	f300 814a 	bgt.w	8009e1a <_dtoa_r+0x722>
 8009b86:	4b6b      	ldr	r3, [pc, #428]	; (8009d34 <_dtoa_r+0x63c>)
 8009b88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009b8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f280 80dc 	bge.w	8009d50 <_dtoa_r+0x658>
 8009b98:	9b04      	ldr	r3, [sp, #16]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f300 80d8 	bgt.w	8009d50 <_dtoa_r+0x658>
 8009ba0:	f040 826f 	bne.w	800a082 <_dtoa_r+0x98a>
 8009ba4:	4b68      	ldr	r3, [pc, #416]	; (8009d48 <_dtoa_r+0x650>)
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	4640      	mov	r0, r8
 8009baa:	4649      	mov	r1, r9
 8009bac:	f7f6 fd4c 	bl	8000648 <__aeabi_dmul>
 8009bb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bb4:	f7f6 ffce 	bl	8000b54 <__aeabi_dcmpge>
 8009bb8:	9e04      	ldr	r6, [sp, #16]
 8009bba:	4637      	mov	r7, r6
 8009bbc:	2800      	cmp	r0, #0
 8009bbe:	f040 8245 	bne.w	800a04c <_dtoa_r+0x954>
 8009bc2:	9d00      	ldr	r5, [sp, #0]
 8009bc4:	2331      	movs	r3, #49	; 0x31
 8009bc6:	f805 3b01 	strb.w	r3, [r5], #1
 8009bca:	f10b 0b01 	add.w	fp, fp, #1
 8009bce:	e241      	b.n	800a054 <_dtoa_r+0x95c>
 8009bd0:	07f2      	lsls	r2, r6, #31
 8009bd2:	d505      	bpl.n	8009be0 <_dtoa_r+0x4e8>
 8009bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bd8:	f7f6 fd36 	bl	8000648 <__aeabi_dmul>
 8009bdc:	3501      	adds	r5, #1
 8009bde:	2301      	movs	r3, #1
 8009be0:	1076      	asrs	r6, r6, #1
 8009be2:	3708      	adds	r7, #8
 8009be4:	e773      	b.n	8009ace <_dtoa_r+0x3d6>
 8009be6:	2502      	movs	r5, #2
 8009be8:	e775      	b.n	8009ad6 <_dtoa_r+0x3de>
 8009bea:	9e04      	ldr	r6, [sp, #16]
 8009bec:	465f      	mov	r7, fp
 8009bee:	e792      	b.n	8009b16 <_dtoa_r+0x41e>
 8009bf0:	9900      	ldr	r1, [sp, #0]
 8009bf2:	4b50      	ldr	r3, [pc, #320]	; (8009d34 <_dtoa_r+0x63c>)
 8009bf4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009bf8:	4431      	add	r1, r6
 8009bfa:	9102      	str	r1, [sp, #8]
 8009bfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bfe:	eeb0 9a47 	vmov.f32	s18, s14
 8009c02:	eef0 9a67 	vmov.f32	s19, s15
 8009c06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c0e:	2900      	cmp	r1, #0
 8009c10:	d044      	beq.n	8009c9c <_dtoa_r+0x5a4>
 8009c12:	494e      	ldr	r1, [pc, #312]	; (8009d4c <_dtoa_r+0x654>)
 8009c14:	2000      	movs	r0, #0
 8009c16:	f7f6 fe41 	bl	800089c <__aeabi_ddiv>
 8009c1a:	ec53 2b19 	vmov	r2, r3, d9
 8009c1e:	f7f6 fb5b 	bl	80002d8 <__aeabi_dsub>
 8009c22:	9d00      	ldr	r5, [sp, #0]
 8009c24:	ec41 0b19 	vmov	d9, r0, r1
 8009c28:	4649      	mov	r1, r9
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	f7f6 ffbc 	bl	8000ba8 <__aeabi_d2iz>
 8009c30:	4606      	mov	r6, r0
 8009c32:	f7f6 fc9f 	bl	8000574 <__aeabi_i2d>
 8009c36:	4602      	mov	r2, r0
 8009c38:	460b      	mov	r3, r1
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	f7f6 fb4b 	bl	80002d8 <__aeabi_dsub>
 8009c42:	3630      	adds	r6, #48	; 0x30
 8009c44:	f805 6b01 	strb.w	r6, [r5], #1
 8009c48:	ec53 2b19 	vmov	r2, r3, d9
 8009c4c:	4680      	mov	r8, r0
 8009c4e:	4689      	mov	r9, r1
 8009c50:	f7f6 ff6c 	bl	8000b2c <__aeabi_dcmplt>
 8009c54:	2800      	cmp	r0, #0
 8009c56:	d164      	bne.n	8009d22 <_dtoa_r+0x62a>
 8009c58:	4642      	mov	r2, r8
 8009c5a:	464b      	mov	r3, r9
 8009c5c:	4937      	ldr	r1, [pc, #220]	; (8009d3c <_dtoa_r+0x644>)
 8009c5e:	2000      	movs	r0, #0
 8009c60:	f7f6 fb3a 	bl	80002d8 <__aeabi_dsub>
 8009c64:	ec53 2b19 	vmov	r2, r3, d9
 8009c68:	f7f6 ff60 	bl	8000b2c <__aeabi_dcmplt>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	f040 80b6 	bne.w	8009dde <_dtoa_r+0x6e6>
 8009c72:	9b02      	ldr	r3, [sp, #8]
 8009c74:	429d      	cmp	r5, r3
 8009c76:	f43f af7c 	beq.w	8009b72 <_dtoa_r+0x47a>
 8009c7a:	4b31      	ldr	r3, [pc, #196]	; (8009d40 <_dtoa_r+0x648>)
 8009c7c:	ec51 0b19 	vmov	r0, r1, d9
 8009c80:	2200      	movs	r2, #0
 8009c82:	f7f6 fce1 	bl	8000648 <__aeabi_dmul>
 8009c86:	4b2e      	ldr	r3, [pc, #184]	; (8009d40 <_dtoa_r+0x648>)
 8009c88:	ec41 0b19 	vmov	d9, r0, r1
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	4640      	mov	r0, r8
 8009c90:	4649      	mov	r1, r9
 8009c92:	f7f6 fcd9 	bl	8000648 <__aeabi_dmul>
 8009c96:	4680      	mov	r8, r0
 8009c98:	4689      	mov	r9, r1
 8009c9a:	e7c5      	b.n	8009c28 <_dtoa_r+0x530>
 8009c9c:	ec51 0b17 	vmov	r0, r1, d7
 8009ca0:	f7f6 fcd2 	bl	8000648 <__aeabi_dmul>
 8009ca4:	9b02      	ldr	r3, [sp, #8]
 8009ca6:	9d00      	ldr	r5, [sp, #0]
 8009ca8:	930f      	str	r3, [sp, #60]	; 0x3c
 8009caa:	ec41 0b19 	vmov	d9, r0, r1
 8009cae:	4649      	mov	r1, r9
 8009cb0:	4640      	mov	r0, r8
 8009cb2:	f7f6 ff79 	bl	8000ba8 <__aeabi_d2iz>
 8009cb6:	4606      	mov	r6, r0
 8009cb8:	f7f6 fc5c 	bl	8000574 <__aeabi_i2d>
 8009cbc:	3630      	adds	r6, #48	; 0x30
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	f7f6 fb07 	bl	80002d8 <__aeabi_dsub>
 8009cca:	f805 6b01 	strb.w	r6, [r5], #1
 8009cce:	9b02      	ldr	r3, [sp, #8]
 8009cd0:	429d      	cmp	r5, r3
 8009cd2:	4680      	mov	r8, r0
 8009cd4:	4689      	mov	r9, r1
 8009cd6:	f04f 0200 	mov.w	r2, #0
 8009cda:	d124      	bne.n	8009d26 <_dtoa_r+0x62e>
 8009cdc:	4b1b      	ldr	r3, [pc, #108]	; (8009d4c <_dtoa_r+0x654>)
 8009cde:	ec51 0b19 	vmov	r0, r1, d9
 8009ce2:	f7f6 fafb 	bl	80002dc <__adddf3>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	460b      	mov	r3, r1
 8009cea:	4640      	mov	r0, r8
 8009cec:	4649      	mov	r1, r9
 8009cee:	f7f6 ff3b 	bl	8000b68 <__aeabi_dcmpgt>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d173      	bne.n	8009dde <_dtoa_r+0x6e6>
 8009cf6:	ec53 2b19 	vmov	r2, r3, d9
 8009cfa:	4914      	ldr	r1, [pc, #80]	; (8009d4c <_dtoa_r+0x654>)
 8009cfc:	2000      	movs	r0, #0
 8009cfe:	f7f6 faeb 	bl	80002d8 <__aeabi_dsub>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	4640      	mov	r0, r8
 8009d08:	4649      	mov	r1, r9
 8009d0a:	f7f6 ff0f 	bl	8000b2c <__aeabi_dcmplt>
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f43f af2f 	beq.w	8009b72 <_dtoa_r+0x47a>
 8009d14:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d16:	1e6b      	subs	r3, r5, #1
 8009d18:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009d1e:	2b30      	cmp	r3, #48	; 0x30
 8009d20:	d0f8      	beq.n	8009d14 <_dtoa_r+0x61c>
 8009d22:	46bb      	mov	fp, r7
 8009d24:	e04a      	b.n	8009dbc <_dtoa_r+0x6c4>
 8009d26:	4b06      	ldr	r3, [pc, #24]	; (8009d40 <_dtoa_r+0x648>)
 8009d28:	f7f6 fc8e 	bl	8000648 <__aeabi_dmul>
 8009d2c:	4680      	mov	r8, r0
 8009d2e:	4689      	mov	r9, r1
 8009d30:	e7bd      	b.n	8009cae <_dtoa_r+0x5b6>
 8009d32:	bf00      	nop
 8009d34:	0800d7c8 	.word	0x0800d7c8
 8009d38:	0800d7a0 	.word	0x0800d7a0
 8009d3c:	3ff00000 	.word	0x3ff00000
 8009d40:	40240000 	.word	0x40240000
 8009d44:	401c0000 	.word	0x401c0000
 8009d48:	40140000 	.word	0x40140000
 8009d4c:	3fe00000 	.word	0x3fe00000
 8009d50:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009d54:	9d00      	ldr	r5, [sp, #0]
 8009d56:	4642      	mov	r2, r8
 8009d58:	464b      	mov	r3, r9
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	4639      	mov	r1, r7
 8009d5e:	f7f6 fd9d 	bl	800089c <__aeabi_ddiv>
 8009d62:	f7f6 ff21 	bl	8000ba8 <__aeabi_d2iz>
 8009d66:	9001      	str	r0, [sp, #4]
 8009d68:	f7f6 fc04 	bl	8000574 <__aeabi_i2d>
 8009d6c:	4642      	mov	r2, r8
 8009d6e:	464b      	mov	r3, r9
 8009d70:	f7f6 fc6a 	bl	8000648 <__aeabi_dmul>
 8009d74:	4602      	mov	r2, r0
 8009d76:	460b      	mov	r3, r1
 8009d78:	4630      	mov	r0, r6
 8009d7a:	4639      	mov	r1, r7
 8009d7c:	f7f6 faac 	bl	80002d8 <__aeabi_dsub>
 8009d80:	9e01      	ldr	r6, [sp, #4]
 8009d82:	9f04      	ldr	r7, [sp, #16]
 8009d84:	3630      	adds	r6, #48	; 0x30
 8009d86:	f805 6b01 	strb.w	r6, [r5], #1
 8009d8a:	9e00      	ldr	r6, [sp, #0]
 8009d8c:	1bae      	subs	r6, r5, r6
 8009d8e:	42b7      	cmp	r7, r6
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	d134      	bne.n	8009e00 <_dtoa_r+0x708>
 8009d96:	f7f6 faa1 	bl	80002dc <__adddf3>
 8009d9a:	4642      	mov	r2, r8
 8009d9c:	464b      	mov	r3, r9
 8009d9e:	4606      	mov	r6, r0
 8009da0:	460f      	mov	r7, r1
 8009da2:	f7f6 fee1 	bl	8000b68 <__aeabi_dcmpgt>
 8009da6:	b9c8      	cbnz	r0, 8009ddc <_dtoa_r+0x6e4>
 8009da8:	4642      	mov	r2, r8
 8009daa:	464b      	mov	r3, r9
 8009dac:	4630      	mov	r0, r6
 8009dae:	4639      	mov	r1, r7
 8009db0:	f7f6 feb2 	bl	8000b18 <__aeabi_dcmpeq>
 8009db4:	b110      	cbz	r0, 8009dbc <_dtoa_r+0x6c4>
 8009db6:	9b01      	ldr	r3, [sp, #4]
 8009db8:	07db      	lsls	r3, r3, #31
 8009dba:	d40f      	bmi.n	8009ddc <_dtoa_r+0x6e4>
 8009dbc:	4651      	mov	r1, sl
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f000 fbcc 	bl	800a55c <_Bfree>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009dc8:	702b      	strb	r3, [r5, #0]
 8009dca:	f10b 0301 	add.w	r3, fp, #1
 8009dce:	6013      	str	r3, [r2, #0]
 8009dd0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	f43f ace2 	beq.w	800979c <_dtoa_r+0xa4>
 8009dd8:	601d      	str	r5, [r3, #0]
 8009dda:	e4df      	b.n	800979c <_dtoa_r+0xa4>
 8009ddc:	465f      	mov	r7, fp
 8009dde:	462b      	mov	r3, r5
 8009de0:	461d      	mov	r5, r3
 8009de2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009de6:	2a39      	cmp	r2, #57	; 0x39
 8009de8:	d106      	bne.n	8009df8 <_dtoa_r+0x700>
 8009dea:	9a00      	ldr	r2, [sp, #0]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d1f7      	bne.n	8009de0 <_dtoa_r+0x6e8>
 8009df0:	9900      	ldr	r1, [sp, #0]
 8009df2:	2230      	movs	r2, #48	; 0x30
 8009df4:	3701      	adds	r7, #1
 8009df6:	700a      	strb	r2, [r1, #0]
 8009df8:	781a      	ldrb	r2, [r3, #0]
 8009dfa:	3201      	adds	r2, #1
 8009dfc:	701a      	strb	r2, [r3, #0]
 8009dfe:	e790      	b.n	8009d22 <_dtoa_r+0x62a>
 8009e00:	4ba3      	ldr	r3, [pc, #652]	; (800a090 <_dtoa_r+0x998>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	f7f6 fc20 	bl	8000648 <__aeabi_dmul>
 8009e08:	2200      	movs	r2, #0
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	460f      	mov	r7, r1
 8009e10:	f7f6 fe82 	bl	8000b18 <__aeabi_dcmpeq>
 8009e14:	2800      	cmp	r0, #0
 8009e16:	d09e      	beq.n	8009d56 <_dtoa_r+0x65e>
 8009e18:	e7d0      	b.n	8009dbc <_dtoa_r+0x6c4>
 8009e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e1c:	2a00      	cmp	r2, #0
 8009e1e:	f000 80ca 	beq.w	8009fb6 <_dtoa_r+0x8be>
 8009e22:	9a07      	ldr	r2, [sp, #28]
 8009e24:	2a01      	cmp	r2, #1
 8009e26:	f300 80ad 	bgt.w	8009f84 <_dtoa_r+0x88c>
 8009e2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e2c:	2a00      	cmp	r2, #0
 8009e2e:	f000 80a5 	beq.w	8009f7c <_dtoa_r+0x884>
 8009e32:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009e36:	9e08      	ldr	r6, [sp, #32]
 8009e38:	9d05      	ldr	r5, [sp, #20]
 8009e3a:	9a05      	ldr	r2, [sp, #20]
 8009e3c:	441a      	add	r2, r3
 8009e3e:	9205      	str	r2, [sp, #20]
 8009e40:	9a06      	ldr	r2, [sp, #24]
 8009e42:	2101      	movs	r1, #1
 8009e44:	441a      	add	r2, r3
 8009e46:	4620      	mov	r0, r4
 8009e48:	9206      	str	r2, [sp, #24]
 8009e4a:	f000 fc87 	bl	800a75c <__i2b>
 8009e4e:	4607      	mov	r7, r0
 8009e50:	b165      	cbz	r5, 8009e6c <_dtoa_r+0x774>
 8009e52:	9b06      	ldr	r3, [sp, #24]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dd09      	ble.n	8009e6c <_dtoa_r+0x774>
 8009e58:	42ab      	cmp	r3, r5
 8009e5a:	9a05      	ldr	r2, [sp, #20]
 8009e5c:	bfa8      	it	ge
 8009e5e:	462b      	movge	r3, r5
 8009e60:	1ad2      	subs	r2, r2, r3
 8009e62:	9205      	str	r2, [sp, #20]
 8009e64:	9a06      	ldr	r2, [sp, #24]
 8009e66:	1aed      	subs	r5, r5, r3
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	9306      	str	r3, [sp, #24]
 8009e6c:	9b08      	ldr	r3, [sp, #32]
 8009e6e:	b1f3      	cbz	r3, 8009eae <_dtoa_r+0x7b6>
 8009e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f000 80a3 	beq.w	8009fbe <_dtoa_r+0x8c6>
 8009e78:	2e00      	cmp	r6, #0
 8009e7a:	dd10      	ble.n	8009e9e <_dtoa_r+0x7a6>
 8009e7c:	4639      	mov	r1, r7
 8009e7e:	4632      	mov	r2, r6
 8009e80:	4620      	mov	r0, r4
 8009e82:	f000 fd2b 	bl	800a8dc <__pow5mult>
 8009e86:	4652      	mov	r2, sl
 8009e88:	4601      	mov	r1, r0
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f000 fc7b 	bl	800a788 <__multiply>
 8009e92:	4651      	mov	r1, sl
 8009e94:	4680      	mov	r8, r0
 8009e96:	4620      	mov	r0, r4
 8009e98:	f000 fb60 	bl	800a55c <_Bfree>
 8009e9c:	46c2      	mov	sl, r8
 8009e9e:	9b08      	ldr	r3, [sp, #32]
 8009ea0:	1b9a      	subs	r2, r3, r6
 8009ea2:	d004      	beq.n	8009eae <_dtoa_r+0x7b6>
 8009ea4:	4651      	mov	r1, sl
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f000 fd18 	bl	800a8dc <__pow5mult>
 8009eac:	4682      	mov	sl, r0
 8009eae:	2101      	movs	r1, #1
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f000 fc53 	bl	800a75c <__i2b>
 8009eb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	4606      	mov	r6, r0
 8009ebc:	f340 8081 	ble.w	8009fc2 <_dtoa_r+0x8ca>
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	4601      	mov	r1, r0
 8009ec4:	4620      	mov	r0, r4
 8009ec6:	f000 fd09 	bl	800a8dc <__pow5mult>
 8009eca:	9b07      	ldr	r3, [sp, #28]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	4606      	mov	r6, r0
 8009ed0:	dd7a      	ble.n	8009fc8 <_dtoa_r+0x8d0>
 8009ed2:	f04f 0800 	mov.w	r8, #0
 8009ed6:	6933      	ldr	r3, [r6, #16]
 8009ed8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009edc:	6918      	ldr	r0, [r3, #16]
 8009ede:	f000 fbef 	bl	800a6c0 <__hi0bits>
 8009ee2:	f1c0 0020 	rsb	r0, r0, #32
 8009ee6:	9b06      	ldr	r3, [sp, #24]
 8009ee8:	4418      	add	r0, r3
 8009eea:	f010 001f 	ands.w	r0, r0, #31
 8009eee:	f000 8094 	beq.w	800a01a <_dtoa_r+0x922>
 8009ef2:	f1c0 0320 	rsb	r3, r0, #32
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	f340 8085 	ble.w	800a006 <_dtoa_r+0x90e>
 8009efc:	9b05      	ldr	r3, [sp, #20]
 8009efe:	f1c0 001c 	rsb	r0, r0, #28
 8009f02:	4403      	add	r3, r0
 8009f04:	9305      	str	r3, [sp, #20]
 8009f06:	9b06      	ldr	r3, [sp, #24]
 8009f08:	4403      	add	r3, r0
 8009f0a:	4405      	add	r5, r0
 8009f0c:	9306      	str	r3, [sp, #24]
 8009f0e:	9b05      	ldr	r3, [sp, #20]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	dd05      	ble.n	8009f20 <_dtoa_r+0x828>
 8009f14:	4651      	mov	r1, sl
 8009f16:	461a      	mov	r2, r3
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 fd39 	bl	800a990 <__lshift>
 8009f1e:	4682      	mov	sl, r0
 8009f20:	9b06      	ldr	r3, [sp, #24]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	dd05      	ble.n	8009f32 <_dtoa_r+0x83a>
 8009f26:	4631      	mov	r1, r6
 8009f28:	461a      	mov	r2, r3
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f000 fd30 	bl	800a990 <__lshift>
 8009f30:	4606      	mov	r6, r0
 8009f32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d072      	beq.n	800a01e <_dtoa_r+0x926>
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	f000 fd94 	bl	800aa68 <__mcmp>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	da6c      	bge.n	800a01e <_dtoa_r+0x926>
 8009f44:	2300      	movs	r3, #0
 8009f46:	4651      	mov	r1, sl
 8009f48:	220a      	movs	r2, #10
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	f000 fb28 	bl	800a5a0 <__multadd>
 8009f50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009f56:	4682      	mov	sl, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f000 81b0 	beq.w	800a2be <_dtoa_r+0xbc6>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	4639      	mov	r1, r7
 8009f62:	220a      	movs	r2, #10
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 fb1b 	bl	800a5a0 <__multadd>
 8009f6a:	9b01      	ldr	r3, [sp, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	4607      	mov	r7, r0
 8009f70:	f300 8096 	bgt.w	800a0a0 <_dtoa_r+0x9a8>
 8009f74:	9b07      	ldr	r3, [sp, #28]
 8009f76:	2b02      	cmp	r3, #2
 8009f78:	dc59      	bgt.n	800a02e <_dtoa_r+0x936>
 8009f7a:	e091      	b.n	800a0a0 <_dtoa_r+0x9a8>
 8009f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009f82:	e758      	b.n	8009e36 <_dtoa_r+0x73e>
 8009f84:	9b04      	ldr	r3, [sp, #16]
 8009f86:	1e5e      	subs	r6, r3, #1
 8009f88:	9b08      	ldr	r3, [sp, #32]
 8009f8a:	42b3      	cmp	r3, r6
 8009f8c:	bfbf      	itttt	lt
 8009f8e:	9b08      	ldrlt	r3, [sp, #32]
 8009f90:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009f92:	9608      	strlt	r6, [sp, #32]
 8009f94:	1af3      	sublt	r3, r6, r3
 8009f96:	bfb4      	ite	lt
 8009f98:	18d2      	addlt	r2, r2, r3
 8009f9a:	1b9e      	subge	r6, r3, r6
 8009f9c:	9b04      	ldr	r3, [sp, #16]
 8009f9e:	bfbc      	itt	lt
 8009fa0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009fa2:	2600      	movlt	r6, #0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	bfb7      	itett	lt
 8009fa8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009fac:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009fb0:	1a9d      	sublt	r5, r3, r2
 8009fb2:	2300      	movlt	r3, #0
 8009fb4:	e741      	b.n	8009e3a <_dtoa_r+0x742>
 8009fb6:	9e08      	ldr	r6, [sp, #32]
 8009fb8:	9d05      	ldr	r5, [sp, #20]
 8009fba:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009fbc:	e748      	b.n	8009e50 <_dtoa_r+0x758>
 8009fbe:	9a08      	ldr	r2, [sp, #32]
 8009fc0:	e770      	b.n	8009ea4 <_dtoa_r+0x7ac>
 8009fc2:	9b07      	ldr	r3, [sp, #28]
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	dc19      	bgt.n	8009ffc <_dtoa_r+0x904>
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	b9bb      	cbnz	r3, 8009ffc <_dtoa_r+0x904>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009fd2:	b99b      	cbnz	r3, 8009ffc <_dtoa_r+0x904>
 8009fd4:	9b03      	ldr	r3, [sp, #12]
 8009fd6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009fda:	0d1b      	lsrs	r3, r3, #20
 8009fdc:	051b      	lsls	r3, r3, #20
 8009fde:	b183      	cbz	r3, 800a002 <_dtoa_r+0x90a>
 8009fe0:	9b05      	ldr	r3, [sp, #20]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	9305      	str	r3, [sp, #20]
 8009fe6:	9b06      	ldr	r3, [sp, #24]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	9306      	str	r3, [sp, #24]
 8009fec:	f04f 0801 	mov.w	r8, #1
 8009ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	f47f af6f 	bne.w	8009ed6 <_dtoa_r+0x7de>
 8009ff8:	2001      	movs	r0, #1
 8009ffa:	e774      	b.n	8009ee6 <_dtoa_r+0x7ee>
 8009ffc:	f04f 0800 	mov.w	r8, #0
 800a000:	e7f6      	b.n	8009ff0 <_dtoa_r+0x8f8>
 800a002:	4698      	mov	r8, r3
 800a004:	e7f4      	b.n	8009ff0 <_dtoa_r+0x8f8>
 800a006:	d082      	beq.n	8009f0e <_dtoa_r+0x816>
 800a008:	9a05      	ldr	r2, [sp, #20]
 800a00a:	331c      	adds	r3, #28
 800a00c:	441a      	add	r2, r3
 800a00e:	9205      	str	r2, [sp, #20]
 800a010:	9a06      	ldr	r2, [sp, #24]
 800a012:	441a      	add	r2, r3
 800a014:	441d      	add	r5, r3
 800a016:	9206      	str	r2, [sp, #24]
 800a018:	e779      	b.n	8009f0e <_dtoa_r+0x816>
 800a01a:	4603      	mov	r3, r0
 800a01c:	e7f4      	b.n	800a008 <_dtoa_r+0x910>
 800a01e:	9b04      	ldr	r3, [sp, #16]
 800a020:	2b00      	cmp	r3, #0
 800a022:	dc37      	bgt.n	800a094 <_dtoa_r+0x99c>
 800a024:	9b07      	ldr	r3, [sp, #28]
 800a026:	2b02      	cmp	r3, #2
 800a028:	dd34      	ble.n	800a094 <_dtoa_r+0x99c>
 800a02a:	9b04      	ldr	r3, [sp, #16]
 800a02c:	9301      	str	r3, [sp, #4]
 800a02e:	9b01      	ldr	r3, [sp, #4]
 800a030:	b963      	cbnz	r3, 800a04c <_dtoa_r+0x954>
 800a032:	4631      	mov	r1, r6
 800a034:	2205      	movs	r2, #5
 800a036:	4620      	mov	r0, r4
 800a038:	f000 fab2 	bl	800a5a0 <__multadd>
 800a03c:	4601      	mov	r1, r0
 800a03e:	4606      	mov	r6, r0
 800a040:	4650      	mov	r0, sl
 800a042:	f000 fd11 	bl	800aa68 <__mcmp>
 800a046:	2800      	cmp	r0, #0
 800a048:	f73f adbb 	bgt.w	8009bc2 <_dtoa_r+0x4ca>
 800a04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a04e:	9d00      	ldr	r5, [sp, #0]
 800a050:	ea6f 0b03 	mvn.w	fp, r3
 800a054:	f04f 0800 	mov.w	r8, #0
 800a058:	4631      	mov	r1, r6
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 fa7e 	bl	800a55c <_Bfree>
 800a060:	2f00      	cmp	r7, #0
 800a062:	f43f aeab 	beq.w	8009dbc <_dtoa_r+0x6c4>
 800a066:	f1b8 0f00 	cmp.w	r8, #0
 800a06a:	d005      	beq.n	800a078 <_dtoa_r+0x980>
 800a06c:	45b8      	cmp	r8, r7
 800a06e:	d003      	beq.n	800a078 <_dtoa_r+0x980>
 800a070:	4641      	mov	r1, r8
 800a072:	4620      	mov	r0, r4
 800a074:	f000 fa72 	bl	800a55c <_Bfree>
 800a078:	4639      	mov	r1, r7
 800a07a:	4620      	mov	r0, r4
 800a07c:	f000 fa6e 	bl	800a55c <_Bfree>
 800a080:	e69c      	b.n	8009dbc <_dtoa_r+0x6c4>
 800a082:	2600      	movs	r6, #0
 800a084:	4637      	mov	r7, r6
 800a086:	e7e1      	b.n	800a04c <_dtoa_r+0x954>
 800a088:	46bb      	mov	fp, r7
 800a08a:	4637      	mov	r7, r6
 800a08c:	e599      	b.n	8009bc2 <_dtoa_r+0x4ca>
 800a08e:	bf00      	nop
 800a090:	40240000 	.word	0x40240000
 800a094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a096:	2b00      	cmp	r3, #0
 800a098:	f000 80c8 	beq.w	800a22c <_dtoa_r+0xb34>
 800a09c:	9b04      	ldr	r3, [sp, #16]
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	2d00      	cmp	r5, #0
 800a0a2:	dd05      	ble.n	800a0b0 <_dtoa_r+0x9b8>
 800a0a4:	4639      	mov	r1, r7
 800a0a6:	462a      	mov	r2, r5
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 fc71 	bl	800a990 <__lshift>
 800a0ae:	4607      	mov	r7, r0
 800a0b0:	f1b8 0f00 	cmp.w	r8, #0
 800a0b4:	d05b      	beq.n	800a16e <_dtoa_r+0xa76>
 800a0b6:	6879      	ldr	r1, [r7, #4]
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	f000 fa0f 	bl	800a4dc <_Balloc>
 800a0be:	4605      	mov	r5, r0
 800a0c0:	b928      	cbnz	r0, 800a0ce <_dtoa_r+0x9d6>
 800a0c2:	4b83      	ldr	r3, [pc, #524]	; (800a2d0 <_dtoa_r+0xbd8>)
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a0ca:	f7ff bb2e 	b.w	800972a <_dtoa_r+0x32>
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	3202      	adds	r2, #2
 800a0d2:	0092      	lsls	r2, r2, #2
 800a0d4:	f107 010c 	add.w	r1, r7, #12
 800a0d8:	300c      	adds	r0, #12
 800a0da:	f7ff fa6e 	bl	80095ba <memcpy>
 800a0de:	2201      	movs	r2, #1
 800a0e0:	4629      	mov	r1, r5
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	f000 fc54 	bl	800a990 <__lshift>
 800a0e8:	9b00      	ldr	r3, [sp, #0]
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	9304      	str	r3, [sp, #16]
 800a0ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0f2:	4413      	add	r3, r2
 800a0f4:	9308      	str	r3, [sp, #32]
 800a0f6:	9b02      	ldr	r3, [sp, #8]
 800a0f8:	f003 0301 	and.w	r3, r3, #1
 800a0fc:	46b8      	mov	r8, r7
 800a0fe:	9306      	str	r3, [sp, #24]
 800a100:	4607      	mov	r7, r0
 800a102:	9b04      	ldr	r3, [sp, #16]
 800a104:	4631      	mov	r1, r6
 800a106:	3b01      	subs	r3, #1
 800a108:	4650      	mov	r0, sl
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	f7ff fa6a 	bl	80095e4 <quorem>
 800a110:	4641      	mov	r1, r8
 800a112:	9002      	str	r0, [sp, #8]
 800a114:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a118:	4650      	mov	r0, sl
 800a11a:	f000 fca5 	bl	800aa68 <__mcmp>
 800a11e:	463a      	mov	r2, r7
 800a120:	9005      	str	r0, [sp, #20]
 800a122:	4631      	mov	r1, r6
 800a124:	4620      	mov	r0, r4
 800a126:	f000 fcbb 	bl	800aaa0 <__mdiff>
 800a12a:	68c2      	ldr	r2, [r0, #12]
 800a12c:	4605      	mov	r5, r0
 800a12e:	bb02      	cbnz	r2, 800a172 <_dtoa_r+0xa7a>
 800a130:	4601      	mov	r1, r0
 800a132:	4650      	mov	r0, sl
 800a134:	f000 fc98 	bl	800aa68 <__mcmp>
 800a138:	4602      	mov	r2, r0
 800a13a:	4629      	mov	r1, r5
 800a13c:	4620      	mov	r0, r4
 800a13e:	9209      	str	r2, [sp, #36]	; 0x24
 800a140:	f000 fa0c 	bl	800a55c <_Bfree>
 800a144:	9b07      	ldr	r3, [sp, #28]
 800a146:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a148:	9d04      	ldr	r5, [sp, #16]
 800a14a:	ea43 0102 	orr.w	r1, r3, r2
 800a14e:	9b06      	ldr	r3, [sp, #24]
 800a150:	4319      	orrs	r1, r3
 800a152:	d110      	bne.n	800a176 <_dtoa_r+0xa7e>
 800a154:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a158:	d029      	beq.n	800a1ae <_dtoa_r+0xab6>
 800a15a:	9b05      	ldr	r3, [sp, #20]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	dd02      	ble.n	800a166 <_dtoa_r+0xa6e>
 800a160:	9b02      	ldr	r3, [sp, #8]
 800a162:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a166:	9b01      	ldr	r3, [sp, #4]
 800a168:	f883 9000 	strb.w	r9, [r3]
 800a16c:	e774      	b.n	800a058 <_dtoa_r+0x960>
 800a16e:	4638      	mov	r0, r7
 800a170:	e7ba      	b.n	800a0e8 <_dtoa_r+0x9f0>
 800a172:	2201      	movs	r2, #1
 800a174:	e7e1      	b.n	800a13a <_dtoa_r+0xa42>
 800a176:	9b05      	ldr	r3, [sp, #20]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	db04      	blt.n	800a186 <_dtoa_r+0xa8e>
 800a17c:	9907      	ldr	r1, [sp, #28]
 800a17e:	430b      	orrs	r3, r1
 800a180:	9906      	ldr	r1, [sp, #24]
 800a182:	430b      	orrs	r3, r1
 800a184:	d120      	bne.n	800a1c8 <_dtoa_r+0xad0>
 800a186:	2a00      	cmp	r2, #0
 800a188:	dded      	ble.n	800a166 <_dtoa_r+0xa6e>
 800a18a:	4651      	mov	r1, sl
 800a18c:	2201      	movs	r2, #1
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 fbfe 	bl	800a990 <__lshift>
 800a194:	4631      	mov	r1, r6
 800a196:	4682      	mov	sl, r0
 800a198:	f000 fc66 	bl	800aa68 <__mcmp>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	dc03      	bgt.n	800a1a8 <_dtoa_r+0xab0>
 800a1a0:	d1e1      	bne.n	800a166 <_dtoa_r+0xa6e>
 800a1a2:	f019 0f01 	tst.w	r9, #1
 800a1a6:	d0de      	beq.n	800a166 <_dtoa_r+0xa6e>
 800a1a8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a1ac:	d1d8      	bne.n	800a160 <_dtoa_r+0xa68>
 800a1ae:	9a01      	ldr	r2, [sp, #4]
 800a1b0:	2339      	movs	r3, #57	; 0x39
 800a1b2:	7013      	strb	r3, [r2, #0]
 800a1b4:	462b      	mov	r3, r5
 800a1b6:	461d      	mov	r5, r3
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a1be:	2a39      	cmp	r2, #57	; 0x39
 800a1c0:	d06c      	beq.n	800a29c <_dtoa_r+0xba4>
 800a1c2:	3201      	adds	r2, #1
 800a1c4:	701a      	strb	r2, [r3, #0]
 800a1c6:	e747      	b.n	800a058 <_dtoa_r+0x960>
 800a1c8:	2a00      	cmp	r2, #0
 800a1ca:	dd07      	ble.n	800a1dc <_dtoa_r+0xae4>
 800a1cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a1d0:	d0ed      	beq.n	800a1ae <_dtoa_r+0xab6>
 800a1d2:	9a01      	ldr	r2, [sp, #4]
 800a1d4:	f109 0301 	add.w	r3, r9, #1
 800a1d8:	7013      	strb	r3, [r2, #0]
 800a1da:	e73d      	b.n	800a058 <_dtoa_r+0x960>
 800a1dc:	9b04      	ldr	r3, [sp, #16]
 800a1de:	9a08      	ldr	r2, [sp, #32]
 800a1e0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d043      	beq.n	800a270 <_dtoa_r+0xb78>
 800a1e8:	4651      	mov	r1, sl
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	220a      	movs	r2, #10
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	f000 f9d6 	bl	800a5a0 <__multadd>
 800a1f4:	45b8      	cmp	r8, r7
 800a1f6:	4682      	mov	sl, r0
 800a1f8:	f04f 0300 	mov.w	r3, #0
 800a1fc:	f04f 020a 	mov.w	r2, #10
 800a200:	4641      	mov	r1, r8
 800a202:	4620      	mov	r0, r4
 800a204:	d107      	bne.n	800a216 <_dtoa_r+0xb1e>
 800a206:	f000 f9cb 	bl	800a5a0 <__multadd>
 800a20a:	4680      	mov	r8, r0
 800a20c:	4607      	mov	r7, r0
 800a20e:	9b04      	ldr	r3, [sp, #16]
 800a210:	3301      	adds	r3, #1
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	e775      	b.n	800a102 <_dtoa_r+0xa0a>
 800a216:	f000 f9c3 	bl	800a5a0 <__multadd>
 800a21a:	4639      	mov	r1, r7
 800a21c:	4680      	mov	r8, r0
 800a21e:	2300      	movs	r3, #0
 800a220:	220a      	movs	r2, #10
 800a222:	4620      	mov	r0, r4
 800a224:	f000 f9bc 	bl	800a5a0 <__multadd>
 800a228:	4607      	mov	r7, r0
 800a22a:	e7f0      	b.n	800a20e <_dtoa_r+0xb16>
 800a22c:	9b04      	ldr	r3, [sp, #16]
 800a22e:	9301      	str	r3, [sp, #4]
 800a230:	9d00      	ldr	r5, [sp, #0]
 800a232:	4631      	mov	r1, r6
 800a234:	4650      	mov	r0, sl
 800a236:	f7ff f9d5 	bl	80095e4 <quorem>
 800a23a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a23e:	9b00      	ldr	r3, [sp, #0]
 800a240:	f805 9b01 	strb.w	r9, [r5], #1
 800a244:	1aea      	subs	r2, r5, r3
 800a246:	9b01      	ldr	r3, [sp, #4]
 800a248:	4293      	cmp	r3, r2
 800a24a:	dd07      	ble.n	800a25c <_dtoa_r+0xb64>
 800a24c:	4651      	mov	r1, sl
 800a24e:	2300      	movs	r3, #0
 800a250:	220a      	movs	r2, #10
 800a252:	4620      	mov	r0, r4
 800a254:	f000 f9a4 	bl	800a5a0 <__multadd>
 800a258:	4682      	mov	sl, r0
 800a25a:	e7ea      	b.n	800a232 <_dtoa_r+0xb3a>
 800a25c:	9b01      	ldr	r3, [sp, #4]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	bfc8      	it	gt
 800a262:	461d      	movgt	r5, r3
 800a264:	9b00      	ldr	r3, [sp, #0]
 800a266:	bfd8      	it	le
 800a268:	2501      	movle	r5, #1
 800a26a:	441d      	add	r5, r3
 800a26c:	f04f 0800 	mov.w	r8, #0
 800a270:	4651      	mov	r1, sl
 800a272:	2201      	movs	r2, #1
 800a274:	4620      	mov	r0, r4
 800a276:	f000 fb8b 	bl	800a990 <__lshift>
 800a27a:	4631      	mov	r1, r6
 800a27c:	4682      	mov	sl, r0
 800a27e:	f000 fbf3 	bl	800aa68 <__mcmp>
 800a282:	2800      	cmp	r0, #0
 800a284:	dc96      	bgt.n	800a1b4 <_dtoa_r+0xabc>
 800a286:	d102      	bne.n	800a28e <_dtoa_r+0xb96>
 800a288:	f019 0f01 	tst.w	r9, #1
 800a28c:	d192      	bne.n	800a1b4 <_dtoa_r+0xabc>
 800a28e:	462b      	mov	r3, r5
 800a290:	461d      	mov	r5, r3
 800a292:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a296:	2a30      	cmp	r2, #48	; 0x30
 800a298:	d0fa      	beq.n	800a290 <_dtoa_r+0xb98>
 800a29a:	e6dd      	b.n	800a058 <_dtoa_r+0x960>
 800a29c:	9a00      	ldr	r2, [sp, #0]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d189      	bne.n	800a1b6 <_dtoa_r+0xabe>
 800a2a2:	f10b 0b01 	add.w	fp, fp, #1
 800a2a6:	2331      	movs	r3, #49	; 0x31
 800a2a8:	e796      	b.n	800a1d8 <_dtoa_r+0xae0>
 800a2aa:	4b0a      	ldr	r3, [pc, #40]	; (800a2d4 <_dtoa_r+0xbdc>)
 800a2ac:	f7ff ba99 	b.w	80097e2 <_dtoa_r+0xea>
 800a2b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	f47f aa6d 	bne.w	8009792 <_dtoa_r+0x9a>
 800a2b8:	4b07      	ldr	r3, [pc, #28]	; (800a2d8 <_dtoa_r+0xbe0>)
 800a2ba:	f7ff ba92 	b.w	80097e2 <_dtoa_r+0xea>
 800a2be:	9b01      	ldr	r3, [sp, #4]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	dcb5      	bgt.n	800a230 <_dtoa_r+0xb38>
 800a2c4:	9b07      	ldr	r3, [sp, #28]
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	f73f aeb1 	bgt.w	800a02e <_dtoa_r+0x936>
 800a2cc:	e7b0      	b.n	800a230 <_dtoa_r+0xb38>
 800a2ce:	bf00      	nop
 800a2d0:	0800d72f 	.word	0x0800d72f
 800a2d4:	0800da18 	.word	0x0800da18
 800a2d8:	0800d6b3 	.word	0x0800d6b3

0800a2dc <_free_r>:
 800a2dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a2de:	2900      	cmp	r1, #0
 800a2e0:	d044      	beq.n	800a36c <_free_r+0x90>
 800a2e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2e6:	9001      	str	r0, [sp, #4]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f1a1 0404 	sub.w	r4, r1, #4
 800a2ee:	bfb8      	it	lt
 800a2f0:	18e4      	addlt	r4, r4, r3
 800a2f2:	f000 f8e7 	bl	800a4c4 <__malloc_lock>
 800a2f6:	4a1e      	ldr	r2, [pc, #120]	; (800a370 <_free_r+0x94>)
 800a2f8:	9801      	ldr	r0, [sp, #4]
 800a2fa:	6813      	ldr	r3, [r2, #0]
 800a2fc:	b933      	cbnz	r3, 800a30c <_free_r+0x30>
 800a2fe:	6063      	str	r3, [r4, #4]
 800a300:	6014      	str	r4, [r2, #0]
 800a302:	b003      	add	sp, #12
 800a304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a308:	f000 b8e2 	b.w	800a4d0 <__malloc_unlock>
 800a30c:	42a3      	cmp	r3, r4
 800a30e:	d908      	bls.n	800a322 <_free_r+0x46>
 800a310:	6825      	ldr	r5, [r4, #0]
 800a312:	1961      	adds	r1, r4, r5
 800a314:	428b      	cmp	r3, r1
 800a316:	bf01      	itttt	eq
 800a318:	6819      	ldreq	r1, [r3, #0]
 800a31a:	685b      	ldreq	r3, [r3, #4]
 800a31c:	1949      	addeq	r1, r1, r5
 800a31e:	6021      	streq	r1, [r4, #0]
 800a320:	e7ed      	b.n	800a2fe <_free_r+0x22>
 800a322:	461a      	mov	r2, r3
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	b10b      	cbz	r3, 800a32c <_free_r+0x50>
 800a328:	42a3      	cmp	r3, r4
 800a32a:	d9fa      	bls.n	800a322 <_free_r+0x46>
 800a32c:	6811      	ldr	r1, [r2, #0]
 800a32e:	1855      	adds	r5, r2, r1
 800a330:	42a5      	cmp	r5, r4
 800a332:	d10b      	bne.n	800a34c <_free_r+0x70>
 800a334:	6824      	ldr	r4, [r4, #0]
 800a336:	4421      	add	r1, r4
 800a338:	1854      	adds	r4, r2, r1
 800a33a:	42a3      	cmp	r3, r4
 800a33c:	6011      	str	r1, [r2, #0]
 800a33e:	d1e0      	bne.n	800a302 <_free_r+0x26>
 800a340:	681c      	ldr	r4, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	6053      	str	r3, [r2, #4]
 800a346:	440c      	add	r4, r1
 800a348:	6014      	str	r4, [r2, #0]
 800a34a:	e7da      	b.n	800a302 <_free_r+0x26>
 800a34c:	d902      	bls.n	800a354 <_free_r+0x78>
 800a34e:	230c      	movs	r3, #12
 800a350:	6003      	str	r3, [r0, #0]
 800a352:	e7d6      	b.n	800a302 <_free_r+0x26>
 800a354:	6825      	ldr	r5, [r4, #0]
 800a356:	1961      	adds	r1, r4, r5
 800a358:	428b      	cmp	r3, r1
 800a35a:	bf04      	itt	eq
 800a35c:	6819      	ldreq	r1, [r3, #0]
 800a35e:	685b      	ldreq	r3, [r3, #4]
 800a360:	6063      	str	r3, [r4, #4]
 800a362:	bf04      	itt	eq
 800a364:	1949      	addeq	r1, r1, r5
 800a366:	6021      	streq	r1, [r4, #0]
 800a368:	6054      	str	r4, [r2, #4]
 800a36a:	e7ca      	b.n	800a302 <_free_r+0x26>
 800a36c:	b003      	add	sp, #12
 800a36e:	bd30      	pop	{r4, r5, pc}
 800a370:	20000814 	.word	0x20000814

0800a374 <malloc>:
 800a374:	4b02      	ldr	r3, [pc, #8]	; (800a380 <malloc+0xc>)
 800a376:	4601      	mov	r1, r0
 800a378:	6818      	ldr	r0, [r3, #0]
 800a37a:	f000 b823 	b.w	800a3c4 <_malloc_r>
 800a37e:	bf00      	nop
 800a380:	20000060 	.word	0x20000060

0800a384 <sbrk_aligned>:
 800a384:	b570      	push	{r4, r5, r6, lr}
 800a386:	4e0e      	ldr	r6, [pc, #56]	; (800a3c0 <sbrk_aligned+0x3c>)
 800a388:	460c      	mov	r4, r1
 800a38a:	6831      	ldr	r1, [r6, #0]
 800a38c:	4605      	mov	r5, r0
 800a38e:	b911      	cbnz	r1, 800a396 <sbrk_aligned+0x12>
 800a390:	f002 f9ae 	bl	800c6f0 <_sbrk_r>
 800a394:	6030      	str	r0, [r6, #0]
 800a396:	4621      	mov	r1, r4
 800a398:	4628      	mov	r0, r5
 800a39a:	f002 f9a9 	bl	800c6f0 <_sbrk_r>
 800a39e:	1c43      	adds	r3, r0, #1
 800a3a0:	d00a      	beq.n	800a3b8 <sbrk_aligned+0x34>
 800a3a2:	1cc4      	adds	r4, r0, #3
 800a3a4:	f024 0403 	bic.w	r4, r4, #3
 800a3a8:	42a0      	cmp	r0, r4
 800a3aa:	d007      	beq.n	800a3bc <sbrk_aligned+0x38>
 800a3ac:	1a21      	subs	r1, r4, r0
 800a3ae:	4628      	mov	r0, r5
 800a3b0:	f002 f99e 	bl	800c6f0 <_sbrk_r>
 800a3b4:	3001      	adds	r0, #1
 800a3b6:	d101      	bne.n	800a3bc <sbrk_aligned+0x38>
 800a3b8:	f04f 34ff 	mov.w	r4, #4294967295
 800a3bc:	4620      	mov	r0, r4
 800a3be:	bd70      	pop	{r4, r5, r6, pc}
 800a3c0:	20000818 	.word	0x20000818

0800a3c4 <_malloc_r>:
 800a3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c8:	1ccd      	adds	r5, r1, #3
 800a3ca:	f025 0503 	bic.w	r5, r5, #3
 800a3ce:	3508      	adds	r5, #8
 800a3d0:	2d0c      	cmp	r5, #12
 800a3d2:	bf38      	it	cc
 800a3d4:	250c      	movcc	r5, #12
 800a3d6:	2d00      	cmp	r5, #0
 800a3d8:	4607      	mov	r7, r0
 800a3da:	db01      	blt.n	800a3e0 <_malloc_r+0x1c>
 800a3dc:	42a9      	cmp	r1, r5
 800a3de:	d905      	bls.n	800a3ec <_malloc_r+0x28>
 800a3e0:	230c      	movs	r3, #12
 800a3e2:	603b      	str	r3, [r7, #0]
 800a3e4:	2600      	movs	r6, #0
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a4c0 <_malloc_r+0xfc>
 800a3f0:	f000 f868 	bl	800a4c4 <__malloc_lock>
 800a3f4:	f8d8 3000 	ldr.w	r3, [r8]
 800a3f8:	461c      	mov	r4, r3
 800a3fa:	bb5c      	cbnz	r4, 800a454 <_malloc_r+0x90>
 800a3fc:	4629      	mov	r1, r5
 800a3fe:	4638      	mov	r0, r7
 800a400:	f7ff ffc0 	bl	800a384 <sbrk_aligned>
 800a404:	1c43      	adds	r3, r0, #1
 800a406:	4604      	mov	r4, r0
 800a408:	d155      	bne.n	800a4b6 <_malloc_r+0xf2>
 800a40a:	f8d8 4000 	ldr.w	r4, [r8]
 800a40e:	4626      	mov	r6, r4
 800a410:	2e00      	cmp	r6, #0
 800a412:	d145      	bne.n	800a4a0 <_malloc_r+0xdc>
 800a414:	2c00      	cmp	r4, #0
 800a416:	d048      	beq.n	800a4aa <_malloc_r+0xe6>
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	4631      	mov	r1, r6
 800a41c:	4638      	mov	r0, r7
 800a41e:	eb04 0903 	add.w	r9, r4, r3
 800a422:	f002 f965 	bl	800c6f0 <_sbrk_r>
 800a426:	4581      	cmp	r9, r0
 800a428:	d13f      	bne.n	800a4aa <_malloc_r+0xe6>
 800a42a:	6821      	ldr	r1, [r4, #0]
 800a42c:	1a6d      	subs	r5, r5, r1
 800a42e:	4629      	mov	r1, r5
 800a430:	4638      	mov	r0, r7
 800a432:	f7ff ffa7 	bl	800a384 <sbrk_aligned>
 800a436:	3001      	adds	r0, #1
 800a438:	d037      	beq.n	800a4aa <_malloc_r+0xe6>
 800a43a:	6823      	ldr	r3, [r4, #0]
 800a43c:	442b      	add	r3, r5
 800a43e:	6023      	str	r3, [r4, #0]
 800a440:	f8d8 3000 	ldr.w	r3, [r8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d038      	beq.n	800a4ba <_malloc_r+0xf6>
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	42a2      	cmp	r2, r4
 800a44c:	d12b      	bne.n	800a4a6 <_malloc_r+0xe2>
 800a44e:	2200      	movs	r2, #0
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	e00f      	b.n	800a474 <_malloc_r+0xb0>
 800a454:	6822      	ldr	r2, [r4, #0]
 800a456:	1b52      	subs	r2, r2, r5
 800a458:	d41f      	bmi.n	800a49a <_malloc_r+0xd6>
 800a45a:	2a0b      	cmp	r2, #11
 800a45c:	d917      	bls.n	800a48e <_malloc_r+0xca>
 800a45e:	1961      	adds	r1, r4, r5
 800a460:	42a3      	cmp	r3, r4
 800a462:	6025      	str	r5, [r4, #0]
 800a464:	bf18      	it	ne
 800a466:	6059      	strne	r1, [r3, #4]
 800a468:	6863      	ldr	r3, [r4, #4]
 800a46a:	bf08      	it	eq
 800a46c:	f8c8 1000 	streq.w	r1, [r8]
 800a470:	5162      	str	r2, [r4, r5]
 800a472:	604b      	str	r3, [r1, #4]
 800a474:	4638      	mov	r0, r7
 800a476:	f104 060b 	add.w	r6, r4, #11
 800a47a:	f000 f829 	bl	800a4d0 <__malloc_unlock>
 800a47e:	f026 0607 	bic.w	r6, r6, #7
 800a482:	1d23      	adds	r3, r4, #4
 800a484:	1af2      	subs	r2, r6, r3
 800a486:	d0ae      	beq.n	800a3e6 <_malloc_r+0x22>
 800a488:	1b9b      	subs	r3, r3, r6
 800a48a:	50a3      	str	r3, [r4, r2]
 800a48c:	e7ab      	b.n	800a3e6 <_malloc_r+0x22>
 800a48e:	42a3      	cmp	r3, r4
 800a490:	6862      	ldr	r2, [r4, #4]
 800a492:	d1dd      	bne.n	800a450 <_malloc_r+0x8c>
 800a494:	f8c8 2000 	str.w	r2, [r8]
 800a498:	e7ec      	b.n	800a474 <_malloc_r+0xb0>
 800a49a:	4623      	mov	r3, r4
 800a49c:	6864      	ldr	r4, [r4, #4]
 800a49e:	e7ac      	b.n	800a3fa <_malloc_r+0x36>
 800a4a0:	4634      	mov	r4, r6
 800a4a2:	6876      	ldr	r6, [r6, #4]
 800a4a4:	e7b4      	b.n	800a410 <_malloc_r+0x4c>
 800a4a6:	4613      	mov	r3, r2
 800a4a8:	e7cc      	b.n	800a444 <_malloc_r+0x80>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	603b      	str	r3, [r7, #0]
 800a4ae:	4638      	mov	r0, r7
 800a4b0:	f000 f80e 	bl	800a4d0 <__malloc_unlock>
 800a4b4:	e797      	b.n	800a3e6 <_malloc_r+0x22>
 800a4b6:	6025      	str	r5, [r4, #0]
 800a4b8:	e7dc      	b.n	800a474 <_malloc_r+0xb0>
 800a4ba:	605b      	str	r3, [r3, #4]
 800a4bc:	deff      	udf	#255	; 0xff
 800a4be:	bf00      	nop
 800a4c0:	20000814 	.word	0x20000814

0800a4c4 <__malloc_lock>:
 800a4c4:	4801      	ldr	r0, [pc, #4]	; (800a4cc <__malloc_lock+0x8>)
 800a4c6:	f7ff b876 	b.w	80095b6 <__retarget_lock_acquire_recursive>
 800a4ca:	bf00      	nop
 800a4cc:	20000810 	.word	0x20000810

0800a4d0 <__malloc_unlock>:
 800a4d0:	4801      	ldr	r0, [pc, #4]	; (800a4d8 <__malloc_unlock+0x8>)
 800a4d2:	f7ff b871 	b.w	80095b8 <__retarget_lock_release_recursive>
 800a4d6:	bf00      	nop
 800a4d8:	20000810 	.word	0x20000810

0800a4dc <_Balloc>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	69c6      	ldr	r6, [r0, #28]
 800a4e0:	4604      	mov	r4, r0
 800a4e2:	460d      	mov	r5, r1
 800a4e4:	b976      	cbnz	r6, 800a504 <_Balloc+0x28>
 800a4e6:	2010      	movs	r0, #16
 800a4e8:	f7ff ff44 	bl	800a374 <malloc>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	61e0      	str	r0, [r4, #28]
 800a4f0:	b920      	cbnz	r0, 800a4fc <_Balloc+0x20>
 800a4f2:	4b18      	ldr	r3, [pc, #96]	; (800a554 <_Balloc+0x78>)
 800a4f4:	4818      	ldr	r0, [pc, #96]	; (800a558 <_Balloc+0x7c>)
 800a4f6:	216b      	movs	r1, #107	; 0x6b
 800a4f8:	f002 f912 	bl	800c720 <__assert_func>
 800a4fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a500:	6006      	str	r6, [r0, #0]
 800a502:	60c6      	str	r6, [r0, #12]
 800a504:	69e6      	ldr	r6, [r4, #28]
 800a506:	68f3      	ldr	r3, [r6, #12]
 800a508:	b183      	cbz	r3, 800a52c <_Balloc+0x50>
 800a50a:	69e3      	ldr	r3, [r4, #28]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a512:	b9b8      	cbnz	r0, 800a544 <_Balloc+0x68>
 800a514:	2101      	movs	r1, #1
 800a516:	fa01 f605 	lsl.w	r6, r1, r5
 800a51a:	1d72      	adds	r2, r6, #5
 800a51c:	0092      	lsls	r2, r2, #2
 800a51e:	4620      	mov	r0, r4
 800a520:	f002 f91c 	bl	800c75c <_calloc_r>
 800a524:	b160      	cbz	r0, 800a540 <_Balloc+0x64>
 800a526:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a52a:	e00e      	b.n	800a54a <_Balloc+0x6e>
 800a52c:	2221      	movs	r2, #33	; 0x21
 800a52e:	2104      	movs	r1, #4
 800a530:	4620      	mov	r0, r4
 800a532:	f002 f913 	bl	800c75c <_calloc_r>
 800a536:	69e3      	ldr	r3, [r4, #28]
 800a538:	60f0      	str	r0, [r6, #12]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1e4      	bne.n	800a50a <_Balloc+0x2e>
 800a540:	2000      	movs	r0, #0
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	6802      	ldr	r2, [r0, #0]
 800a546:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a54a:	2300      	movs	r3, #0
 800a54c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a550:	e7f7      	b.n	800a542 <_Balloc+0x66>
 800a552:	bf00      	nop
 800a554:	0800d6c0 	.word	0x0800d6c0
 800a558:	0800d740 	.word	0x0800d740

0800a55c <_Bfree>:
 800a55c:	b570      	push	{r4, r5, r6, lr}
 800a55e:	69c6      	ldr	r6, [r0, #28]
 800a560:	4605      	mov	r5, r0
 800a562:	460c      	mov	r4, r1
 800a564:	b976      	cbnz	r6, 800a584 <_Bfree+0x28>
 800a566:	2010      	movs	r0, #16
 800a568:	f7ff ff04 	bl	800a374 <malloc>
 800a56c:	4602      	mov	r2, r0
 800a56e:	61e8      	str	r0, [r5, #28]
 800a570:	b920      	cbnz	r0, 800a57c <_Bfree+0x20>
 800a572:	4b09      	ldr	r3, [pc, #36]	; (800a598 <_Bfree+0x3c>)
 800a574:	4809      	ldr	r0, [pc, #36]	; (800a59c <_Bfree+0x40>)
 800a576:	218f      	movs	r1, #143	; 0x8f
 800a578:	f002 f8d2 	bl	800c720 <__assert_func>
 800a57c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a580:	6006      	str	r6, [r0, #0]
 800a582:	60c6      	str	r6, [r0, #12]
 800a584:	b13c      	cbz	r4, 800a596 <_Bfree+0x3a>
 800a586:	69eb      	ldr	r3, [r5, #28]
 800a588:	6862      	ldr	r2, [r4, #4]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a590:	6021      	str	r1, [r4, #0]
 800a592:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a596:	bd70      	pop	{r4, r5, r6, pc}
 800a598:	0800d6c0 	.word	0x0800d6c0
 800a59c:	0800d740 	.word	0x0800d740

0800a5a0 <__multadd>:
 800a5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a4:	690d      	ldr	r5, [r1, #16]
 800a5a6:	4607      	mov	r7, r0
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	461e      	mov	r6, r3
 800a5ac:	f101 0c14 	add.w	ip, r1, #20
 800a5b0:	2000      	movs	r0, #0
 800a5b2:	f8dc 3000 	ldr.w	r3, [ip]
 800a5b6:	b299      	uxth	r1, r3
 800a5b8:	fb02 6101 	mla	r1, r2, r1, r6
 800a5bc:	0c1e      	lsrs	r6, r3, #16
 800a5be:	0c0b      	lsrs	r3, r1, #16
 800a5c0:	fb02 3306 	mla	r3, r2, r6, r3
 800a5c4:	b289      	uxth	r1, r1
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5cc:	4285      	cmp	r5, r0
 800a5ce:	f84c 1b04 	str.w	r1, [ip], #4
 800a5d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5d6:	dcec      	bgt.n	800a5b2 <__multadd+0x12>
 800a5d8:	b30e      	cbz	r6, 800a61e <__multadd+0x7e>
 800a5da:	68a3      	ldr	r3, [r4, #8]
 800a5dc:	42ab      	cmp	r3, r5
 800a5de:	dc19      	bgt.n	800a614 <__multadd+0x74>
 800a5e0:	6861      	ldr	r1, [r4, #4]
 800a5e2:	4638      	mov	r0, r7
 800a5e4:	3101      	adds	r1, #1
 800a5e6:	f7ff ff79 	bl	800a4dc <_Balloc>
 800a5ea:	4680      	mov	r8, r0
 800a5ec:	b928      	cbnz	r0, 800a5fa <__multadd+0x5a>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	4b0c      	ldr	r3, [pc, #48]	; (800a624 <__multadd+0x84>)
 800a5f2:	480d      	ldr	r0, [pc, #52]	; (800a628 <__multadd+0x88>)
 800a5f4:	21ba      	movs	r1, #186	; 0xba
 800a5f6:	f002 f893 	bl	800c720 <__assert_func>
 800a5fa:	6922      	ldr	r2, [r4, #16]
 800a5fc:	3202      	adds	r2, #2
 800a5fe:	f104 010c 	add.w	r1, r4, #12
 800a602:	0092      	lsls	r2, r2, #2
 800a604:	300c      	adds	r0, #12
 800a606:	f7fe ffd8 	bl	80095ba <memcpy>
 800a60a:	4621      	mov	r1, r4
 800a60c:	4638      	mov	r0, r7
 800a60e:	f7ff ffa5 	bl	800a55c <_Bfree>
 800a612:	4644      	mov	r4, r8
 800a614:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a618:	3501      	adds	r5, #1
 800a61a:	615e      	str	r6, [r3, #20]
 800a61c:	6125      	str	r5, [r4, #16]
 800a61e:	4620      	mov	r0, r4
 800a620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a624:	0800d72f 	.word	0x0800d72f
 800a628:	0800d740 	.word	0x0800d740

0800a62c <__s2b>:
 800a62c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a630:	460c      	mov	r4, r1
 800a632:	4615      	mov	r5, r2
 800a634:	461f      	mov	r7, r3
 800a636:	2209      	movs	r2, #9
 800a638:	3308      	adds	r3, #8
 800a63a:	4606      	mov	r6, r0
 800a63c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a640:	2100      	movs	r1, #0
 800a642:	2201      	movs	r2, #1
 800a644:	429a      	cmp	r2, r3
 800a646:	db09      	blt.n	800a65c <__s2b+0x30>
 800a648:	4630      	mov	r0, r6
 800a64a:	f7ff ff47 	bl	800a4dc <_Balloc>
 800a64e:	b940      	cbnz	r0, 800a662 <__s2b+0x36>
 800a650:	4602      	mov	r2, r0
 800a652:	4b19      	ldr	r3, [pc, #100]	; (800a6b8 <__s2b+0x8c>)
 800a654:	4819      	ldr	r0, [pc, #100]	; (800a6bc <__s2b+0x90>)
 800a656:	21d3      	movs	r1, #211	; 0xd3
 800a658:	f002 f862 	bl	800c720 <__assert_func>
 800a65c:	0052      	lsls	r2, r2, #1
 800a65e:	3101      	adds	r1, #1
 800a660:	e7f0      	b.n	800a644 <__s2b+0x18>
 800a662:	9b08      	ldr	r3, [sp, #32]
 800a664:	6143      	str	r3, [r0, #20]
 800a666:	2d09      	cmp	r5, #9
 800a668:	f04f 0301 	mov.w	r3, #1
 800a66c:	6103      	str	r3, [r0, #16]
 800a66e:	dd16      	ble.n	800a69e <__s2b+0x72>
 800a670:	f104 0909 	add.w	r9, r4, #9
 800a674:	46c8      	mov	r8, r9
 800a676:	442c      	add	r4, r5
 800a678:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a67c:	4601      	mov	r1, r0
 800a67e:	3b30      	subs	r3, #48	; 0x30
 800a680:	220a      	movs	r2, #10
 800a682:	4630      	mov	r0, r6
 800a684:	f7ff ff8c 	bl	800a5a0 <__multadd>
 800a688:	45a0      	cmp	r8, r4
 800a68a:	d1f5      	bne.n	800a678 <__s2b+0x4c>
 800a68c:	f1a5 0408 	sub.w	r4, r5, #8
 800a690:	444c      	add	r4, r9
 800a692:	1b2d      	subs	r5, r5, r4
 800a694:	1963      	adds	r3, r4, r5
 800a696:	42bb      	cmp	r3, r7
 800a698:	db04      	blt.n	800a6a4 <__s2b+0x78>
 800a69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a69e:	340a      	adds	r4, #10
 800a6a0:	2509      	movs	r5, #9
 800a6a2:	e7f6      	b.n	800a692 <__s2b+0x66>
 800a6a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6a8:	4601      	mov	r1, r0
 800a6aa:	3b30      	subs	r3, #48	; 0x30
 800a6ac:	220a      	movs	r2, #10
 800a6ae:	4630      	mov	r0, r6
 800a6b0:	f7ff ff76 	bl	800a5a0 <__multadd>
 800a6b4:	e7ee      	b.n	800a694 <__s2b+0x68>
 800a6b6:	bf00      	nop
 800a6b8:	0800d72f 	.word	0x0800d72f
 800a6bc:	0800d740 	.word	0x0800d740

0800a6c0 <__hi0bits>:
 800a6c0:	0c03      	lsrs	r3, r0, #16
 800a6c2:	041b      	lsls	r3, r3, #16
 800a6c4:	b9d3      	cbnz	r3, 800a6fc <__hi0bits+0x3c>
 800a6c6:	0400      	lsls	r0, r0, #16
 800a6c8:	2310      	movs	r3, #16
 800a6ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a6ce:	bf04      	itt	eq
 800a6d0:	0200      	lsleq	r0, r0, #8
 800a6d2:	3308      	addeq	r3, #8
 800a6d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a6d8:	bf04      	itt	eq
 800a6da:	0100      	lsleq	r0, r0, #4
 800a6dc:	3304      	addeq	r3, #4
 800a6de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a6e2:	bf04      	itt	eq
 800a6e4:	0080      	lsleq	r0, r0, #2
 800a6e6:	3302      	addeq	r3, #2
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	db05      	blt.n	800a6f8 <__hi0bits+0x38>
 800a6ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a6f0:	f103 0301 	add.w	r3, r3, #1
 800a6f4:	bf08      	it	eq
 800a6f6:	2320      	moveq	r3, #32
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	4770      	bx	lr
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	e7e4      	b.n	800a6ca <__hi0bits+0xa>

0800a700 <__lo0bits>:
 800a700:	6803      	ldr	r3, [r0, #0]
 800a702:	f013 0207 	ands.w	r2, r3, #7
 800a706:	d00c      	beq.n	800a722 <__lo0bits+0x22>
 800a708:	07d9      	lsls	r1, r3, #31
 800a70a:	d422      	bmi.n	800a752 <__lo0bits+0x52>
 800a70c:	079a      	lsls	r2, r3, #30
 800a70e:	bf49      	itett	mi
 800a710:	085b      	lsrmi	r3, r3, #1
 800a712:	089b      	lsrpl	r3, r3, #2
 800a714:	6003      	strmi	r3, [r0, #0]
 800a716:	2201      	movmi	r2, #1
 800a718:	bf5c      	itt	pl
 800a71a:	6003      	strpl	r3, [r0, #0]
 800a71c:	2202      	movpl	r2, #2
 800a71e:	4610      	mov	r0, r2
 800a720:	4770      	bx	lr
 800a722:	b299      	uxth	r1, r3
 800a724:	b909      	cbnz	r1, 800a72a <__lo0bits+0x2a>
 800a726:	0c1b      	lsrs	r3, r3, #16
 800a728:	2210      	movs	r2, #16
 800a72a:	b2d9      	uxtb	r1, r3
 800a72c:	b909      	cbnz	r1, 800a732 <__lo0bits+0x32>
 800a72e:	3208      	adds	r2, #8
 800a730:	0a1b      	lsrs	r3, r3, #8
 800a732:	0719      	lsls	r1, r3, #28
 800a734:	bf04      	itt	eq
 800a736:	091b      	lsreq	r3, r3, #4
 800a738:	3204      	addeq	r2, #4
 800a73a:	0799      	lsls	r1, r3, #30
 800a73c:	bf04      	itt	eq
 800a73e:	089b      	lsreq	r3, r3, #2
 800a740:	3202      	addeq	r2, #2
 800a742:	07d9      	lsls	r1, r3, #31
 800a744:	d403      	bmi.n	800a74e <__lo0bits+0x4e>
 800a746:	085b      	lsrs	r3, r3, #1
 800a748:	f102 0201 	add.w	r2, r2, #1
 800a74c:	d003      	beq.n	800a756 <__lo0bits+0x56>
 800a74e:	6003      	str	r3, [r0, #0]
 800a750:	e7e5      	b.n	800a71e <__lo0bits+0x1e>
 800a752:	2200      	movs	r2, #0
 800a754:	e7e3      	b.n	800a71e <__lo0bits+0x1e>
 800a756:	2220      	movs	r2, #32
 800a758:	e7e1      	b.n	800a71e <__lo0bits+0x1e>
	...

0800a75c <__i2b>:
 800a75c:	b510      	push	{r4, lr}
 800a75e:	460c      	mov	r4, r1
 800a760:	2101      	movs	r1, #1
 800a762:	f7ff febb 	bl	800a4dc <_Balloc>
 800a766:	4602      	mov	r2, r0
 800a768:	b928      	cbnz	r0, 800a776 <__i2b+0x1a>
 800a76a:	4b05      	ldr	r3, [pc, #20]	; (800a780 <__i2b+0x24>)
 800a76c:	4805      	ldr	r0, [pc, #20]	; (800a784 <__i2b+0x28>)
 800a76e:	f240 1145 	movw	r1, #325	; 0x145
 800a772:	f001 ffd5 	bl	800c720 <__assert_func>
 800a776:	2301      	movs	r3, #1
 800a778:	6144      	str	r4, [r0, #20]
 800a77a:	6103      	str	r3, [r0, #16]
 800a77c:	bd10      	pop	{r4, pc}
 800a77e:	bf00      	nop
 800a780:	0800d72f 	.word	0x0800d72f
 800a784:	0800d740 	.word	0x0800d740

0800a788 <__multiply>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	4691      	mov	r9, r2
 800a78e:	690a      	ldr	r2, [r1, #16]
 800a790:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a794:	429a      	cmp	r2, r3
 800a796:	bfb8      	it	lt
 800a798:	460b      	movlt	r3, r1
 800a79a:	460c      	mov	r4, r1
 800a79c:	bfbc      	itt	lt
 800a79e:	464c      	movlt	r4, r9
 800a7a0:	4699      	movlt	r9, r3
 800a7a2:	6927      	ldr	r7, [r4, #16]
 800a7a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a7a8:	68a3      	ldr	r3, [r4, #8]
 800a7aa:	6861      	ldr	r1, [r4, #4]
 800a7ac:	eb07 060a 	add.w	r6, r7, sl
 800a7b0:	42b3      	cmp	r3, r6
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	bfb8      	it	lt
 800a7b6:	3101      	addlt	r1, #1
 800a7b8:	f7ff fe90 	bl	800a4dc <_Balloc>
 800a7bc:	b930      	cbnz	r0, 800a7cc <__multiply+0x44>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	4b44      	ldr	r3, [pc, #272]	; (800a8d4 <__multiply+0x14c>)
 800a7c2:	4845      	ldr	r0, [pc, #276]	; (800a8d8 <__multiply+0x150>)
 800a7c4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a7c8:	f001 ffaa 	bl	800c720 <__assert_func>
 800a7cc:	f100 0514 	add.w	r5, r0, #20
 800a7d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7d4:	462b      	mov	r3, r5
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	4543      	cmp	r3, r8
 800a7da:	d321      	bcc.n	800a820 <__multiply+0x98>
 800a7dc:	f104 0314 	add.w	r3, r4, #20
 800a7e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a7e4:	f109 0314 	add.w	r3, r9, #20
 800a7e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a7ec:	9202      	str	r2, [sp, #8]
 800a7ee:	1b3a      	subs	r2, r7, r4
 800a7f0:	3a15      	subs	r2, #21
 800a7f2:	f022 0203 	bic.w	r2, r2, #3
 800a7f6:	3204      	adds	r2, #4
 800a7f8:	f104 0115 	add.w	r1, r4, #21
 800a7fc:	428f      	cmp	r7, r1
 800a7fe:	bf38      	it	cc
 800a800:	2204      	movcc	r2, #4
 800a802:	9201      	str	r2, [sp, #4]
 800a804:	9a02      	ldr	r2, [sp, #8]
 800a806:	9303      	str	r3, [sp, #12]
 800a808:	429a      	cmp	r2, r3
 800a80a:	d80c      	bhi.n	800a826 <__multiply+0x9e>
 800a80c:	2e00      	cmp	r6, #0
 800a80e:	dd03      	ble.n	800a818 <__multiply+0x90>
 800a810:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a814:	2b00      	cmp	r3, #0
 800a816:	d05b      	beq.n	800a8d0 <__multiply+0x148>
 800a818:	6106      	str	r6, [r0, #16]
 800a81a:	b005      	add	sp, #20
 800a81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a820:	f843 2b04 	str.w	r2, [r3], #4
 800a824:	e7d8      	b.n	800a7d8 <__multiply+0x50>
 800a826:	f8b3 a000 	ldrh.w	sl, [r3]
 800a82a:	f1ba 0f00 	cmp.w	sl, #0
 800a82e:	d024      	beq.n	800a87a <__multiply+0xf2>
 800a830:	f104 0e14 	add.w	lr, r4, #20
 800a834:	46a9      	mov	r9, r5
 800a836:	f04f 0c00 	mov.w	ip, #0
 800a83a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a83e:	f8d9 1000 	ldr.w	r1, [r9]
 800a842:	fa1f fb82 	uxth.w	fp, r2
 800a846:	b289      	uxth	r1, r1
 800a848:	fb0a 110b 	mla	r1, sl, fp, r1
 800a84c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a850:	f8d9 2000 	ldr.w	r2, [r9]
 800a854:	4461      	add	r1, ip
 800a856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a85a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a85e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a862:	b289      	uxth	r1, r1
 800a864:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a868:	4577      	cmp	r7, lr
 800a86a:	f849 1b04 	str.w	r1, [r9], #4
 800a86e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a872:	d8e2      	bhi.n	800a83a <__multiply+0xb2>
 800a874:	9a01      	ldr	r2, [sp, #4]
 800a876:	f845 c002 	str.w	ip, [r5, r2]
 800a87a:	9a03      	ldr	r2, [sp, #12]
 800a87c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a880:	3304      	adds	r3, #4
 800a882:	f1b9 0f00 	cmp.w	r9, #0
 800a886:	d021      	beq.n	800a8cc <__multiply+0x144>
 800a888:	6829      	ldr	r1, [r5, #0]
 800a88a:	f104 0c14 	add.w	ip, r4, #20
 800a88e:	46ae      	mov	lr, r5
 800a890:	f04f 0a00 	mov.w	sl, #0
 800a894:	f8bc b000 	ldrh.w	fp, [ip]
 800a898:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a89c:	fb09 220b 	mla	r2, r9, fp, r2
 800a8a0:	4452      	add	r2, sl
 800a8a2:	b289      	uxth	r1, r1
 800a8a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8a8:	f84e 1b04 	str.w	r1, [lr], #4
 800a8ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a8b0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8b4:	f8be 1000 	ldrh.w	r1, [lr]
 800a8b8:	fb09 110a 	mla	r1, r9, sl, r1
 800a8bc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a8c0:	4567      	cmp	r7, ip
 800a8c2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a8c6:	d8e5      	bhi.n	800a894 <__multiply+0x10c>
 800a8c8:	9a01      	ldr	r2, [sp, #4]
 800a8ca:	50a9      	str	r1, [r5, r2]
 800a8cc:	3504      	adds	r5, #4
 800a8ce:	e799      	b.n	800a804 <__multiply+0x7c>
 800a8d0:	3e01      	subs	r6, #1
 800a8d2:	e79b      	b.n	800a80c <__multiply+0x84>
 800a8d4:	0800d72f 	.word	0x0800d72f
 800a8d8:	0800d740 	.word	0x0800d740

0800a8dc <__pow5mult>:
 800a8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8e0:	4615      	mov	r5, r2
 800a8e2:	f012 0203 	ands.w	r2, r2, #3
 800a8e6:	4606      	mov	r6, r0
 800a8e8:	460f      	mov	r7, r1
 800a8ea:	d007      	beq.n	800a8fc <__pow5mult+0x20>
 800a8ec:	4c25      	ldr	r4, [pc, #148]	; (800a984 <__pow5mult+0xa8>)
 800a8ee:	3a01      	subs	r2, #1
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8f6:	f7ff fe53 	bl	800a5a0 <__multadd>
 800a8fa:	4607      	mov	r7, r0
 800a8fc:	10ad      	asrs	r5, r5, #2
 800a8fe:	d03d      	beq.n	800a97c <__pow5mult+0xa0>
 800a900:	69f4      	ldr	r4, [r6, #28]
 800a902:	b97c      	cbnz	r4, 800a924 <__pow5mult+0x48>
 800a904:	2010      	movs	r0, #16
 800a906:	f7ff fd35 	bl	800a374 <malloc>
 800a90a:	4602      	mov	r2, r0
 800a90c:	61f0      	str	r0, [r6, #28]
 800a90e:	b928      	cbnz	r0, 800a91c <__pow5mult+0x40>
 800a910:	4b1d      	ldr	r3, [pc, #116]	; (800a988 <__pow5mult+0xac>)
 800a912:	481e      	ldr	r0, [pc, #120]	; (800a98c <__pow5mult+0xb0>)
 800a914:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a918:	f001 ff02 	bl	800c720 <__assert_func>
 800a91c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a920:	6004      	str	r4, [r0, #0]
 800a922:	60c4      	str	r4, [r0, #12]
 800a924:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a92c:	b94c      	cbnz	r4, 800a942 <__pow5mult+0x66>
 800a92e:	f240 2171 	movw	r1, #625	; 0x271
 800a932:	4630      	mov	r0, r6
 800a934:	f7ff ff12 	bl	800a75c <__i2b>
 800a938:	2300      	movs	r3, #0
 800a93a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a93e:	4604      	mov	r4, r0
 800a940:	6003      	str	r3, [r0, #0]
 800a942:	f04f 0900 	mov.w	r9, #0
 800a946:	07eb      	lsls	r3, r5, #31
 800a948:	d50a      	bpl.n	800a960 <__pow5mult+0x84>
 800a94a:	4639      	mov	r1, r7
 800a94c:	4622      	mov	r2, r4
 800a94e:	4630      	mov	r0, r6
 800a950:	f7ff ff1a 	bl	800a788 <__multiply>
 800a954:	4639      	mov	r1, r7
 800a956:	4680      	mov	r8, r0
 800a958:	4630      	mov	r0, r6
 800a95a:	f7ff fdff 	bl	800a55c <_Bfree>
 800a95e:	4647      	mov	r7, r8
 800a960:	106d      	asrs	r5, r5, #1
 800a962:	d00b      	beq.n	800a97c <__pow5mult+0xa0>
 800a964:	6820      	ldr	r0, [r4, #0]
 800a966:	b938      	cbnz	r0, 800a978 <__pow5mult+0x9c>
 800a968:	4622      	mov	r2, r4
 800a96a:	4621      	mov	r1, r4
 800a96c:	4630      	mov	r0, r6
 800a96e:	f7ff ff0b 	bl	800a788 <__multiply>
 800a972:	6020      	str	r0, [r4, #0]
 800a974:	f8c0 9000 	str.w	r9, [r0]
 800a978:	4604      	mov	r4, r0
 800a97a:	e7e4      	b.n	800a946 <__pow5mult+0x6a>
 800a97c:	4638      	mov	r0, r7
 800a97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a982:	bf00      	nop
 800a984:	0800d890 	.word	0x0800d890
 800a988:	0800d6c0 	.word	0x0800d6c0
 800a98c:	0800d740 	.word	0x0800d740

0800a990 <__lshift>:
 800a990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a994:	460c      	mov	r4, r1
 800a996:	6849      	ldr	r1, [r1, #4]
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a99e:	68a3      	ldr	r3, [r4, #8]
 800a9a0:	4607      	mov	r7, r0
 800a9a2:	4691      	mov	r9, r2
 800a9a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9a8:	f108 0601 	add.w	r6, r8, #1
 800a9ac:	42b3      	cmp	r3, r6
 800a9ae:	db0b      	blt.n	800a9c8 <__lshift+0x38>
 800a9b0:	4638      	mov	r0, r7
 800a9b2:	f7ff fd93 	bl	800a4dc <_Balloc>
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	b948      	cbnz	r0, 800a9ce <__lshift+0x3e>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	4b28      	ldr	r3, [pc, #160]	; (800aa60 <__lshift+0xd0>)
 800a9be:	4829      	ldr	r0, [pc, #164]	; (800aa64 <__lshift+0xd4>)
 800a9c0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a9c4:	f001 feac 	bl	800c720 <__assert_func>
 800a9c8:	3101      	adds	r1, #1
 800a9ca:	005b      	lsls	r3, r3, #1
 800a9cc:	e7ee      	b.n	800a9ac <__lshift+0x1c>
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	f100 0114 	add.w	r1, r0, #20
 800a9d4:	f100 0210 	add.w	r2, r0, #16
 800a9d8:	4618      	mov	r0, r3
 800a9da:	4553      	cmp	r3, sl
 800a9dc:	db33      	blt.n	800aa46 <__lshift+0xb6>
 800a9de:	6920      	ldr	r0, [r4, #16]
 800a9e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9e4:	f104 0314 	add.w	r3, r4, #20
 800a9e8:	f019 091f 	ands.w	r9, r9, #31
 800a9ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9f4:	d02b      	beq.n	800aa4e <__lshift+0xbe>
 800a9f6:	f1c9 0e20 	rsb	lr, r9, #32
 800a9fa:	468a      	mov	sl, r1
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	6818      	ldr	r0, [r3, #0]
 800aa00:	fa00 f009 	lsl.w	r0, r0, r9
 800aa04:	4310      	orrs	r0, r2
 800aa06:	f84a 0b04 	str.w	r0, [sl], #4
 800aa0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa0e:	459c      	cmp	ip, r3
 800aa10:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa14:	d8f3      	bhi.n	800a9fe <__lshift+0x6e>
 800aa16:	ebac 0304 	sub.w	r3, ip, r4
 800aa1a:	3b15      	subs	r3, #21
 800aa1c:	f023 0303 	bic.w	r3, r3, #3
 800aa20:	3304      	adds	r3, #4
 800aa22:	f104 0015 	add.w	r0, r4, #21
 800aa26:	4584      	cmp	ip, r0
 800aa28:	bf38      	it	cc
 800aa2a:	2304      	movcc	r3, #4
 800aa2c:	50ca      	str	r2, [r1, r3]
 800aa2e:	b10a      	cbz	r2, 800aa34 <__lshift+0xa4>
 800aa30:	f108 0602 	add.w	r6, r8, #2
 800aa34:	3e01      	subs	r6, #1
 800aa36:	4638      	mov	r0, r7
 800aa38:	612e      	str	r6, [r5, #16]
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	f7ff fd8e 	bl	800a55c <_Bfree>
 800aa40:	4628      	mov	r0, r5
 800aa42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa46:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	e7c5      	b.n	800a9da <__lshift+0x4a>
 800aa4e:	3904      	subs	r1, #4
 800aa50:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa54:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa58:	459c      	cmp	ip, r3
 800aa5a:	d8f9      	bhi.n	800aa50 <__lshift+0xc0>
 800aa5c:	e7ea      	b.n	800aa34 <__lshift+0xa4>
 800aa5e:	bf00      	nop
 800aa60:	0800d72f 	.word	0x0800d72f
 800aa64:	0800d740 	.word	0x0800d740

0800aa68 <__mcmp>:
 800aa68:	b530      	push	{r4, r5, lr}
 800aa6a:	6902      	ldr	r2, [r0, #16]
 800aa6c:	690c      	ldr	r4, [r1, #16]
 800aa6e:	1b12      	subs	r2, r2, r4
 800aa70:	d10e      	bne.n	800aa90 <__mcmp+0x28>
 800aa72:	f100 0314 	add.w	r3, r0, #20
 800aa76:	3114      	adds	r1, #20
 800aa78:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aa7c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aa80:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aa84:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aa88:	42a5      	cmp	r5, r4
 800aa8a:	d003      	beq.n	800aa94 <__mcmp+0x2c>
 800aa8c:	d305      	bcc.n	800aa9a <__mcmp+0x32>
 800aa8e:	2201      	movs	r2, #1
 800aa90:	4610      	mov	r0, r2
 800aa92:	bd30      	pop	{r4, r5, pc}
 800aa94:	4283      	cmp	r3, r0
 800aa96:	d3f3      	bcc.n	800aa80 <__mcmp+0x18>
 800aa98:	e7fa      	b.n	800aa90 <__mcmp+0x28>
 800aa9a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa9e:	e7f7      	b.n	800aa90 <__mcmp+0x28>

0800aaa0 <__mdiff>:
 800aaa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	4606      	mov	r6, r0
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	4620      	mov	r0, r4
 800aaac:	4690      	mov	r8, r2
 800aaae:	f7ff ffdb 	bl	800aa68 <__mcmp>
 800aab2:	1e05      	subs	r5, r0, #0
 800aab4:	d110      	bne.n	800aad8 <__mdiff+0x38>
 800aab6:	4629      	mov	r1, r5
 800aab8:	4630      	mov	r0, r6
 800aaba:	f7ff fd0f 	bl	800a4dc <_Balloc>
 800aabe:	b930      	cbnz	r0, 800aace <__mdiff+0x2e>
 800aac0:	4b3a      	ldr	r3, [pc, #232]	; (800abac <__mdiff+0x10c>)
 800aac2:	4602      	mov	r2, r0
 800aac4:	f240 2137 	movw	r1, #567	; 0x237
 800aac8:	4839      	ldr	r0, [pc, #228]	; (800abb0 <__mdiff+0x110>)
 800aaca:	f001 fe29 	bl	800c720 <__assert_func>
 800aace:	2301      	movs	r3, #1
 800aad0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aad4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad8:	bfa4      	itt	ge
 800aada:	4643      	movge	r3, r8
 800aadc:	46a0      	movge	r8, r4
 800aade:	4630      	mov	r0, r6
 800aae0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aae4:	bfa6      	itte	ge
 800aae6:	461c      	movge	r4, r3
 800aae8:	2500      	movge	r5, #0
 800aaea:	2501      	movlt	r5, #1
 800aaec:	f7ff fcf6 	bl	800a4dc <_Balloc>
 800aaf0:	b920      	cbnz	r0, 800aafc <__mdiff+0x5c>
 800aaf2:	4b2e      	ldr	r3, [pc, #184]	; (800abac <__mdiff+0x10c>)
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	f240 2145 	movw	r1, #581	; 0x245
 800aafa:	e7e5      	b.n	800aac8 <__mdiff+0x28>
 800aafc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ab00:	6926      	ldr	r6, [r4, #16]
 800ab02:	60c5      	str	r5, [r0, #12]
 800ab04:	f104 0914 	add.w	r9, r4, #20
 800ab08:	f108 0514 	add.w	r5, r8, #20
 800ab0c:	f100 0e14 	add.w	lr, r0, #20
 800ab10:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ab14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab18:	f108 0210 	add.w	r2, r8, #16
 800ab1c:	46f2      	mov	sl, lr
 800ab1e:	2100      	movs	r1, #0
 800ab20:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab24:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab28:	fa11 f88b 	uxtah	r8, r1, fp
 800ab2c:	b299      	uxth	r1, r3
 800ab2e:	0c1b      	lsrs	r3, r3, #16
 800ab30:	eba8 0801 	sub.w	r8, r8, r1
 800ab34:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab38:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab3c:	fa1f f888 	uxth.w	r8, r8
 800ab40:	1419      	asrs	r1, r3, #16
 800ab42:	454e      	cmp	r6, r9
 800ab44:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab48:	f84a 3b04 	str.w	r3, [sl], #4
 800ab4c:	d8e8      	bhi.n	800ab20 <__mdiff+0x80>
 800ab4e:	1b33      	subs	r3, r6, r4
 800ab50:	3b15      	subs	r3, #21
 800ab52:	f023 0303 	bic.w	r3, r3, #3
 800ab56:	3304      	adds	r3, #4
 800ab58:	3415      	adds	r4, #21
 800ab5a:	42a6      	cmp	r6, r4
 800ab5c:	bf38      	it	cc
 800ab5e:	2304      	movcc	r3, #4
 800ab60:	441d      	add	r5, r3
 800ab62:	4473      	add	r3, lr
 800ab64:	469e      	mov	lr, r3
 800ab66:	462e      	mov	r6, r5
 800ab68:	4566      	cmp	r6, ip
 800ab6a:	d30e      	bcc.n	800ab8a <__mdiff+0xea>
 800ab6c:	f10c 0203 	add.w	r2, ip, #3
 800ab70:	1b52      	subs	r2, r2, r5
 800ab72:	f022 0203 	bic.w	r2, r2, #3
 800ab76:	3d03      	subs	r5, #3
 800ab78:	45ac      	cmp	ip, r5
 800ab7a:	bf38      	it	cc
 800ab7c:	2200      	movcc	r2, #0
 800ab7e:	4413      	add	r3, r2
 800ab80:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ab84:	b17a      	cbz	r2, 800aba6 <__mdiff+0x106>
 800ab86:	6107      	str	r7, [r0, #16]
 800ab88:	e7a4      	b.n	800aad4 <__mdiff+0x34>
 800ab8a:	f856 8b04 	ldr.w	r8, [r6], #4
 800ab8e:	fa11 f288 	uxtah	r2, r1, r8
 800ab92:	1414      	asrs	r4, r2, #16
 800ab94:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ab98:	b292      	uxth	r2, r2
 800ab9a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ab9e:	f84e 2b04 	str.w	r2, [lr], #4
 800aba2:	1421      	asrs	r1, r4, #16
 800aba4:	e7e0      	b.n	800ab68 <__mdiff+0xc8>
 800aba6:	3f01      	subs	r7, #1
 800aba8:	e7ea      	b.n	800ab80 <__mdiff+0xe0>
 800abaa:	bf00      	nop
 800abac:	0800d72f 	.word	0x0800d72f
 800abb0:	0800d740 	.word	0x0800d740

0800abb4 <__ulp>:
 800abb4:	b082      	sub	sp, #8
 800abb6:	ed8d 0b00 	vstr	d0, [sp]
 800abba:	9a01      	ldr	r2, [sp, #4]
 800abbc:	4b0f      	ldr	r3, [pc, #60]	; (800abfc <__ulp+0x48>)
 800abbe:	4013      	ands	r3, r2
 800abc0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	dc08      	bgt.n	800abda <__ulp+0x26>
 800abc8:	425b      	negs	r3, r3
 800abca:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800abce:	ea4f 5223 	mov.w	r2, r3, asr #20
 800abd2:	da04      	bge.n	800abde <__ulp+0x2a>
 800abd4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800abd8:	4113      	asrs	r3, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	e008      	b.n	800abf0 <__ulp+0x3c>
 800abde:	f1a2 0314 	sub.w	r3, r2, #20
 800abe2:	2b1e      	cmp	r3, #30
 800abe4:	bfda      	itte	le
 800abe6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800abea:	40da      	lsrle	r2, r3
 800abec:	2201      	movgt	r2, #1
 800abee:	2300      	movs	r3, #0
 800abf0:	4619      	mov	r1, r3
 800abf2:	4610      	mov	r0, r2
 800abf4:	ec41 0b10 	vmov	d0, r0, r1
 800abf8:	b002      	add	sp, #8
 800abfa:	4770      	bx	lr
 800abfc:	7ff00000 	.word	0x7ff00000

0800ac00 <__b2d>:
 800ac00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac04:	6906      	ldr	r6, [r0, #16]
 800ac06:	f100 0814 	add.w	r8, r0, #20
 800ac0a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ac0e:	1f37      	subs	r7, r6, #4
 800ac10:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac14:	4610      	mov	r0, r2
 800ac16:	f7ff fd53 	bl	800a6c0 <__hi0bits>
 800ac1a:	f1c0 0320 	rsb	r3, r0, #32
 800ac1e:	280a      	cmp	r0, #10
 800ac20:	600b      	str	r3, [r1, #0]
 800ac22:	491b      	ldr	r1, [pc, #108]	; (800ac90 <__b2d+0x90>)
 800ac24:	dc15      	bgt.n	800ac52 <__b2d+0x52>
 800ac26:	f1c0 0c0b 	rsb	ip, r0, #11
 800ac2a:	fa22 f30c 	lsr.w	r3, r2, ip
 800ac2e:	45b8      	cmp	r8, r7
 800ac30:	ea43 0501 	orr.w	r5, r3, r1
 800ac34:	bf34      	ite	cc
 800ac36:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac3a:	2300      	movcs	r3, #0
 800ac3c:	3015      	adds	r0, #21
 800ac3e:	fa02 f000 	lsl.w	r0, r2, r0
 800ac42:	fa23 f30c 	lsr.w	r3, r3, ip
 800ac46:	4303      	orrs	r3, r0
 800ac48:	461c      	mov	r4, r3
 800ac4a:	ec45 4b10 	vmov	d0, r4, r5
 800ac4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac52:	45b8      	cmp	r8, r7
 800ac54:	bf3a      	itte	cc
 800ac56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac5a:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac5e:	2300      	movcs	r3, #0
 800ac60:	380b      	subs	r0, #11
 800ac62:	d012      	beq.n	800ac8a <__b2d+0x8a>
 800ac64:	f1c0 0120 	rsb	r1, r0, #32
 800ac68:	fa23 f401 	lsr.w	r4, r3, r1
 800ac6c:	4082      	lsls	r2, r0
 800ac6e:	4322      	orrs	r2, r4
 800ac70:	4547      	cmp	r7, r8
 800ac72:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800ac76:	bf8c      	ite	hi
 800ac78:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac7c:	2200      	movls	r2, #0
 800ac7e:	4083      	lsls	r3, r0
 800ac80:	40ca      	lsrs	r2, r1
 800ac82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac86:	4313      	orrs	r3, r2
 800ac88:	e7de      	b.n	800ac48 <__b2d+0x48>
 800ac8a:	ea42 0501 	orr.w	r5, r2, r1
 800ac8e:	e7db      	b.n	800ac48 <__b2d+0x48>
 800ac90:	3ff00000 	.word	0x3ff00000

0800ac94 <__d2b>:
 800ac94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac98:	460f      	mov	r7, r1
 800ac9a:	2101      	movs	r1, #1
 800ac9c:	ec59 8b10 	vmov	r8, r9, d0
 800aca0:	4616      	mov	r6, r2
 800aca2:	f7ff fc1b 	bl	800a4dc <_Balloc>
 800aca6:	4604      	mov	r4, r0
 800aca8:	b930      	cbnz	r0, 800acb8 <__d2b+0x24>
 800acaa:	4602      	mov	r2, r0
 800acac:	4b24      	ldr	r3, [pc, #144]	; (800ad40 <__d2b+0xac>)
 800acae:	4825      	ldr	r0, [pc, #148]	; (800ad44 <__d2b+0xb0>)
 800acb0:	f240 310f 	movw	r1, #783	; 0x30f
 800acb4:	f001 fd34 	bl	800c720 <__assert_func>
 800acb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acbc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acc0:	bb2d      	cbnz	r5, 800ad0e <__d2b+0x7a>
 800acc2:	9301      	str	r3, [sp, #4]
 800acc4:	f1b8 0300 	subs.w	r3, r8, #0
 800acc8:	d026      	beq.n	800ad18 <__d2b+0x84>
 800acca:	4668      	mov	r0, sp
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	f7ff fd17 	bl	800a700 <__lo0bits>
 800acd2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acd6:	b1e8      	cbz	r0, 800ad14 <__d2b+0x80>
 800acd8:	f1c0 0320 	rsb	r3, r0, #32
 800acdc:	fa02 f303 	lsl.w	r3, r2, r3
 800ace0:	430b      	orrs	r3, r1
 800ace2:	40c2      	lsrs	r2, r0
 800ace4:	6163      	str	r3, [r4, #20]
 800ace6:	9201      	str	r2, [sp, #4]
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	61a3      	str	r3, [r4, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	bf14      	ite	ne
 800acf0:	2202      	movne	r2, #2
 800acf2:	2201      	moveq	r2, #1
 800acf4:	6122      	str	r2, [r4, #16]
 800acf6:	b1bd      	cbz	r5, 800ad28 <__d2b+0x94>
 800acf8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800acfc:	4405      	add	r5, r0
 800acfe:	603d      	str	r5, [r7, #0]
 800ad00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad04:	6030      	str	r0, [r6, #0]
 800ad06:	4620      	mov	r0, r4
 800ad08:	b003      	add	sp, #12
 800ad0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad12:	e7d6      	b.n	800acc2 <__d2b+0x2e>
 800ad14:	6161      	str	r1, [r4, #20]
 800ad16:	e7e7      	b.n	800ace8 <__d2b+0x54>
 800ad18:	a801      	add	r0, sp, #4
 800ad1a:	f7ff fcf1 	bl	800a700 <__lo0bits>
 800ad1e:	9b01      	ldr	r3, [sp, #4]
 800ad20:	6163      	str	r3, [r4, #20]
 800ad22:	3020      	adds	r0, #32
 800ad24:	2201      	movs	r2, #1
 800ad26:	e7e5      	b.n	800acf4 <__d2b+0x60>
 800ad28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad30:	6038      	str	r0, [r7, #0]
 800ad32:	6918      	ldr	r0, [r3, #16]
 800ad34:	f7ff fcc4 	bl	800a6c0 <__hi0bits>
 800ad38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad3c:	e7e2      	b.n	800ad04 <__d2b+0x70>
 800ad3e:	bf00      	nop
 800ad40:	0800d72f 	.word	0x0800d72f
 800ad44:	0800d740 	.word	0x0800d740

0800ad48 <__ratio>:
 800ad48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad4c:	4688      	mov	r8, r1
 800ad4e:	4669      	mov	r1, sp
 800ad50:	4681      	mov	r9, r0
 800ad52:	f7ff ff55 	bl	800ac00 <__b2d>
 800ad56:	a901      	add	r1, sp, #4
 800ad58:	4640      	mov	r0, r8
 800ad5a:	ec55 4b10 	vmov	r4, r5, d0
 800ad5e:	f7ff ff4f 	bl	800ac00 <__b2d>
 800ad62:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ad66:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ad6a:	eba3 0c02 	sub.w	ip, r3, r2
 800ad6e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ad72:	1a9b      	subs	r3, r3, r2
 800ad74:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ad78:	ec51 0b10 	vmov	r0, r1, d0
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	bfd6      	itet	le
 800ad80:	460a      	movle	r2, r1
 800ad82:	462a      	movgt	r2, r5
 800ad84:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad88:	468b      	mov	fp, r1
 800ad8a:	462f      	mov	r7, r5
 800ad8c:	bfd4      	ite	le
 800ad8e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ad92:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad96:	4620      	mov	r0, r4
 800ad98:	ee10 2a10 	vmov	r2, s0
 800ad9c:	465b      	mov	r3, fp
 800ad9e:	4639      	mov	r1, r7
 800ada0:	f7f5 fd7c 	bl	800089c <__aeabi_ddiv>
 800ada4:	ec41 0b10 	vmov	d0, r0, r1
 800ada8:	b003      	add	sp, #12
 800adaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800adae <__copybits>:
 800adae:	3901      	subs	r1, #1
 800adb0:	b570      	push	{r4, r5, r6, lr}
 800adb2:	1149      	asrs	r1, r1, #5
 800adb4:	6914      	ldr	r4, [r2, #16]
 800adb6:	3101      	adds	r1, #1
 800adb8:	f102 0314 	add.w	r3, r2, #20
 800adbc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800adc0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800adc4:	1f05      	subs	r5, r0, #4
 800adc6:	42a3      	cmp	r3, r4
 800adc8:	d30c      	bcc.n	800ade4 <__copybits+0x36>
 800adca:	1aa3      	subs	r3, r4, r2
 800adcc:	3b11      	subs	r3, #17
 800adce:	f023 0303 	bic.w	r3, r3, #3
 800add2:	3211      	adds	r2, #17
 800add4:	42a2      	cmp	r2, r4
 800add6:	bf88      	it	hi
 800add8:	2300      	movhi	r3, #0
 800adda:	4418      	add	r0, r3
 800addc:	2300      	movs	r3, #0
 800adde:	4288      	cmp	r0, r1
 800ade0:	d305      	bcc.n	800adee <__copybits+0x40>
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	f853 6b04 	ldr.w	r6, [r3], #4
 800ade8:	f845 6f04 	str.w	r6, [r5, #4]!
 800adec:	e7eb      	b.n	800adc6 <__copybits+0x18>
 800adee:	f840 3b04 	str.w	r3, [r0], #4
 800adf2:	e7f4      	b.n	800adde <__copybits+0x30>

0800adf4 <__any_on>:
 800adf4:	f100 0214 	add.w	r2, r0, #20
 800adf8:	6900      	ldr	r0, [r0, #16]
 800adfa:	114b      	asrs	r3, r1, #5
 800adfc:	4298      	cmp	r0, r3
 800adfe:	b510      	push	{r4, lr}
 800ae00:	db11      	blt.n	800ae26 <__any_on+0x32>
 800ae02:	dd0a      	ble.n	800ae1a <__any_on+0x26>
 800ae04:	f011 011f 	ands.w	r1, r1, #31
 800ae08:	d007      	beq.n	800ae1a <__any_on+0x26>
 800ae0a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ae0e:	fa24 f001 	lsr.w	r0, r4, r1
 800ae12:	fa00 f101 	lsl.w	r1, r0, r1
 800ae16:	428c      	cmp	r4, r1
 800ae18:	d10b      	bne.n	800ae32 <__any_on+0x3e>
 800ae1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d803      	bhi.n	800ae2a <__any_on+0x36>
 800ae22:	2000      	movs	r0, #0
 800ae24:	bd10      	pop	{r4, pc}
 800ae26:	4603      	mov	r3, r0
 800ae28:	e7f7      	b.n	800ae1a <__any_on+0x26>
 800ae2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae2e:	2900      	cmp	r1, #0
 800ae30:	d0f5      	beq.n	800ae1e <__any_on+0x2a>
 800ae32:	2001      	movs	r0, #1
 800ae34:	e7f6      	b.n	800ae24 <__any_on+0x30>

0800ae36 <sulp>:
 800ae36:	b570      	push	{r4, r5, r6, lr}
 800ae38:	4604      	mov	r4, r0
 800ae3a:	460d      	mov	r5, r1
 800ae3c:	ec45 4b10 	vmov	d0, r4, r5
 800ae40:	4616      	mov	r6, r2
 800ae42:	f7ff feb7 	bl	800abb4 <__ulp>
 800ae46:	ec51 0b10 	vmov	r0, r1, d0
 800ae4a:	b17e      	cbz	r6, 800ae6c <sulp+0x36>
 800ae4c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae50:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	dd09      	ble.n	800ae6c <sulp+0x36>
 800ae58:	051b      	lsls	r3, r3, #20
 800ae5a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ae5e:	2400      	movs	r4, #0
 800ae60:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ae64:	4622      	mov	r2, r4
 800ae66:	462b      	mov	r3, r5
 800ae68:	f7f5 fbee 	bl	8000648 <__aeabi_dmul>
 800ae6c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ae70 <_strtod_l>:
 800ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	ed2d 8b02 	vpush	{d8}
 800ae78:	b09b      	sub	sp, #108	; 0x6c
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	9213      	str	r2, [sp, #76]	; 0x4c
 800ae7e:	2200      	movs	r2, #0
 800ae80:	9216      	str	r2, [sp, #88]	; 0x58
 800ae82:	460d      	mov	r5, r1
 800ae84:	f04f 0800 	mov.w	r8, #0
 800ae88:	f04f 0900 	mov.w	r9, #0
 800ae8c:	460a      	mov	r2, r1
 800ae8e:	9215      	str	r2, [sp, #84]	; 0x54
 800ae90:	7811      	ldrb	r1, [r2, #0]
 800ae92:	292b      	cmp	r1, #43	; 0x2b
 800ae94:	d04c      	beq.n	800af30 <_strtod_l+0xc0>
 800ae96:	d83a      	bhi.n	800af0e <_strtod_l+0x9e>
 800ae98:	290d      	cmp	r1, #13
 800ae9a:	d834      	bhi.n	800af06 <_strtod_l+0x96>
 800ae9c:	2908      	cmp	r1, #8
 800ae9e:	d834      	bhi.n	800af0a <_strtod_l+0x9a>
 800aea0:	2900      	cmp	r1, #0
 800aea2:	d03d      	beq.n	800af20 <_strtod_l+0xb0>
 800aea4:	2200      	movs	r2, #0
 800aea6:	920a      	str	r2, [sp, #40]	; 0x28
 800aea8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800aeaa:	7832      	ldrb	r2, [r6, #0]
 800aeac:	2a30      	cmp	r2, #48	; 0x30
 800aeae:	f040 80b4 	bne.w	800b01a <_strtod_l+0x1aa>
 800aeb2:	7872      	ldrb	r2, [r6, #1]
 800aeb4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800aeb8:	2a58      	cmp	r2, #88	; 0x58
 800aeba:	d170      	bne.n	800af9e <_strtod_l+0x12e>
 800aebc:	9302      	str	r3, [sp, #8]
 800aebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aec0:	9301      	str	r3, [sp, #4]
 800aec2:	ab16      	add	r3, sp, #88	; 0x58
 800aec4:	9300      	str	r3, [sp, #0]
 800aec6:	4a8e      	ldr	r2, [pc, #568]	; (800b100 <_strtod_l+0x290>)
 800aec8:	ab17      	add	r3, sp, #92	; 0x5c
 800aeca:	a915      	add	r1, sp, #84	; 0x54
 800aecc:	4620      	mov	r0, r4
 800aece:	f001 fcc3 	bl	800c858 <__gethex>
 800aed2:	f010 070f 	ands.w	r7, r0, #15
 800aed6:	4605      	mov	r5, r0
 800aed8:	d005      	beq.n	800aee6 <_strtod_l+0x76>
 800aeda:	2f06      	cmp	r7, #6
 800aedc:	d12a      	bne.n	800af34 <_strtod_l+0xc4>
 800aede:	3601      	adds	r6, #1
 800aee0:	2300      	movs	r3, #0
 800aee2:	9615      	str	r6, [sp, #84]	; 0x54
 800aee4:	930a      	str	r3, [sp, #40]	; 0x28
 800aee6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	f040 857f 	bne.w	800b9ec <_strtod_l+0xb7c>
 800aeee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef0:	b1db      	cbz	r3, 800af2a <_strtod_l+0xba>
 800aef2:	4642      	mov	r2, r8
 800aef4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aef8:	ec43 2b10 	vmov	d0, r2, r3
 800aefc:	b01b      	add	sp, #108	; 0x6c
 800aefe:	ecbd 8b02 	vpop	{d8}
 800af02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af06:	2920      	cmp	r1, #32
 800af08:	d1cc      	bne.n	800aea4 <_strtod_l+0x34>
 800af0a:	3201      	adds	r2, #1
 800af0c:	e7bf      	b.n	800ae8e <_strtod_l+0x1e>
 800af0e:	292d      	cmp	r1, #45	; 0x2d
 800af10:	d1c8      	bne.n	800aea4 <_strtod_l+0x34>
 800af12:	2101      	movs	r1, #1
 800af14:	910a      	str	r1, [sp, #40]	; 0x28
 800af16:	1c51      	adds	r1, r2, #1
 800af18:	9115      	str	r1, [sp, #84]	; 0x54
 800af1a:	7852      	ldrb	r2, [r2, #1]
 800af1c:	2a00      	cmp	r2, #0
 800af1e:	d1c3      	bne.n	800aea8 <_strtod_l+0x38>
 800af20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800af22:	9515      	str	r5, [sp, #84]	; 0x54
 800af24:	2b00      	cmp	r3, #0
 800af26:	f040 855f 	bne.w	800b9e8 <_strtod_l+0xb78>
 800af2a:	4642      	mov	r2, r8
 800af2c:	464b      	mov	r3, r9
 800af2e:	e7e3      	b.n	800aef8 <_strtod_l+0x88>
 800af30:	2100      	movs	r1, #0
 800af32:	e7ef      	b.n	800af14 <_strtod_l+0xa4>
 800af34:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800af36:	b13a      	cbz	r2, 800af48 <_strtod_l+0xd8>
 800af38:	2135      	movs	r1, #53	; 0x35
 800af3a:	a818      	add	r0, sp, #96	; 0x60
 800af3c:	f7ff ff37 	bl	800adae <__copybits>
 800af40:	9916      	ldr	r1, [sp, #88]	; 0x58
 800af42:	4620      	mov	r0, r4
 800af44:	f7ff fb0a 	bl	800a55c <_Bfree>
 800af48:	3f01      	subs	r7, #1
 800af4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af4c:	2f04      	cmp	r7, #4
 800af4e:	d806      	bhi.n	800af5e <_strtod_l+0xee>
 800af50:	e8df f007 	tbb	[pc, r7]
 800af54:	201d0314 	.word	0x201d0314
 800af58:	14          	.byte	0x14
 800af59:	00          	.byte	0x00
 800af5a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800af5e:	05e9      	lsls	r1, r5, #23
 800af60:	bf48      	it	mi
 800af62:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800af66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af6a:	0d1b      	lsrs	r3, r3, #20
 800af6c:	051b      	lsls	r3, r3, #20
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1b9      	bne.n	800aee6 <_strtod_l+0x76>
 800af72:	f7fe faf5 	bl	8009560 <__errno>
 800af76:	2322      	movs	r3, #34	; 0x22
 800af78:	6003      	str	r3, [r0, #0]
 800af7a:	e7b4      	b.n	800aee6 <_strtod_l+0x76>
 800af7c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800af80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800af84:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800af88:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800af8c:	e7e7      	b.n	800af5e <_strtod_l+0xee>
 800af8e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b108 <_strtod_l+0x298>
 800af92:	e7e4      	b.n	800af5e <_strtod_l+0xee>
 800af94:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800af98:	f04f 38ff 	mov.w	r8, #4294967295
 800af9c:	e7df      	b.n	800af5e <_strtod_l+0xee>
 800af9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	9215      	str	r2, [sp, #84]	; 0x54
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	2b30      	cmp	r3, #48	; 0x30
 800afa8:	d0f9      	beq.n	800af9e <_strtod_l+0x12e>
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d09b      	beq.n	800aee6 <_strtod_l+0x76>
 800afae:	2301      	movs	r3, #1
 800afb0:	f04f 0a00 	mov.w	sl, #0
 800afb4:	9304      	str	r3, [sp, #16]
 800afb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afb8:	930b      	str	r3, [sp, #44]	; 0x2c
 800afba:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800afbe:	46d3      	mov	fp, sl
 800afc0:	220a      	movs	r2, #10
 800afc2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800afc4:	7806      	ldrb	r6, [r0, #0]
 800afc6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800afca:	b2d9      	uxtb	r1, r3
 800afcc:	2909      	cmp	r1, #9
 800afce:	d926      	bls.n	800b01e <_strtod_l+0x1ae>
 800afd0:	494c      	ldr	r1, [pc, #304]	; (800b104 <_strtod_l+0x294>)
 800afd2:	2201      	movs	r2, #1
 800afd4:	f001 fb79 	bl	800c6ca <strncmp>
 800afd8:	2800      	cmp	r0, #0
 800afda:	d030      	beq.n	800b03e <_strtod_l+0x1ce>
 800afdc:	2000      	movs	r0, #0
 800afde:	4632      	mov	r2, r6
 800afe0:	9005      	str	r0, [sp, #20]
 800afe2:	465e      	mov	r6, fp
 800afe4:	4603      	mov	r3, r0
 800afe6:	2a65      	cmp	r2, #101	; 0x65
 800afe8:	d001      	beq.n	800afee <_strtod_l+0x17e>
 800afea:	2a45      	cmp	r2, #69	; 0x45
 800afec:	d113      	bne.n	800b016 <_strtod_l+0x1a6>
 800afee:	b91e      	cbnz	r6, 800aff8 <_strtod_l+0x188>
 800aff0:	9a04      	ldr	r2, [sp, #16]
 800aff2:	4302      	orrs	r2, r0
 800aff4:	d094      	beq.n	800af20 <_strtod_l+0xb0>
 800aff6:	2600      	movs	r6, #0
 800aff8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800affa:	1c6a      	adds	r2, r5, #1
 800affc:	9215      	str	r2, [sp, #84]	; 0x54
 800affe:	786a      	ldrb	r2, [r5, #1]
 800b000:	2a2b      	cmp	r2, #43	; 0x2b
 800b002:	d074      	beq.n	800b0ee <_strtod_l+0x27e>
 800b004:	2a2d      	cmp	r2, #45	; 0x2d
 800b006:	d078      	beq.n	800b0fa <_strtod_l+0x28a>
 800b008:	f04f 0c00 	mov.w	ip, #0
 800b00c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b010:	2909      	cmp	r1, #9
 800b012:	d97f      	bls.n	800b114 <_strtod_l+0x2a4>
 800b014:	9515      	str	r5, [sp, #84]	; 0x54
 800b016:	2700      	movs	r7, #0
 800b018:	e09e      	b.n	800b158 <_strtod_l+0x2e8>
 800b01a:	2300      	movs	r3, #0
 800b01c:	e7c8      	b.n	800afb0 <_strtod_l+0x140>
 800b01e:	f1bb 0f08 	cmp.w	fp, #8
 800b022:	bfd8      	it	le
 800b024:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b026:	f100 0001 	add.w	r0, r0, #1
 800b02a:	bfda      	itte	le
 800b02c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b030:	9309      	strle	r3, [sp, #36]	; 0x24
 800b032:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b036:	f10b 0b01 	add.w	fp, fp, #1
 800b03a:	9015      	str	r0, [sp, #84]	; 0x54
 800b03c:	e7c1      	b.n	800afc2 <_strtod_l+0x152>
 800b03e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b040:	1c5a      	adds	r2, r3, #1
 800b042:	9215      	str	r2, [sp, #84]	; 0x54
 800b044:	785a      	ldrb	r2, [r3, #1]
 800b046:	f1bb 0f00 	cmp.w	fp, #0
 800b04a:	d037      	beq.n	800b0bc <_strtod_l+0x24c>
 800b04c:	9005      	str	r0, [sp, #20]
 800b04e:	465e      	mov	r6, fp
 800b050:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b054:	2b09      	cmp	r3, #9
 800b056:	d912      	bls.n	800b07e <_strtod_l+0x20e>
 800b058:	2301      	movs	r3, #1
 800b05a:	e7c4      	b.n	800afe6 <_strtod_l+0x176>
 800b05c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b05e:	1c5a      	adds	r2, r3, #1
 800b060:	9215      	str	r2, [sp, #84]	; 0x54
 800b062:	785a      	ldrb	r2, [r3, #1]
 800b064:	3001      	adds	r0, #1
 800b066:	2a30      	cmp	r2, #48	; 0x30
 800b068:	d0f8      	beq.n	800b05c <_strtod_l+0x1ec>
 800b06a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b06e:	2b08      	cmp	r3, #8
 800b070:	f200 84c1 	bhi.w	800b9f6 <_strtod_l+0xb86>
 800b074:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b076:	9005      	str	r0, [sp, #20]
 800b078:	2000      	movs	r0, #0
 800b07a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b07c:	4606      	mov	r6, r0
 800b07e:	3a30      	subs	r2, #48	; 0x30
 800b080:	f100 0301 	add.w	r3, r0, #1
 800b084:	d014      	beq.n	800b0b0 <_strtod_l+0x240>
 800b086:	9905      	ldr	r1, [sp, #20]
 800b088:	4419      	add	r1, r3
 800b08a:	9105      	str	r1, [sp, #20]
 800b08c:	4633      	mov	r3, r6
 800b08e:	eb00 0c06 	add.w	ip, r0, r6
 800b092:	210a      	movs	r1, #10
 800b094:	4563      	cmp	r3, ip
 800b096:	d113      	bne.n	800b0c0 <_strtod_l+0x250>
 800b098:	1833      	adds	r3, r6, r0
 800b09a:	2b08      	cmp	r3, #8
 800b09c:	f106 0601 	add.w	r6, r6, #1
 800b0a0:	4406      	add	r6, r0
 800b0a2:	dc1a      	bgt.n	800b0da <_strtod_l+0x26a>
 800b0a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b0a6:	230a      	movs	r3, #10
 800b0a8:	fb03 2301 	mla	r3, r3, r1, r2
 800b0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b0b2:	1c51      	adds	r1, r2, #1
 800b0b4:	9115      	str	r1, [sp, #84]	; 0x54
 800b0b6:	7852      	ldrb	r2, [r2, #1]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	e7c9      	b.n	800b050 <_strtod_l+0x1e0>
 800b0bc:	4658      	mov	r0, fp
 800b0be:	e7d2      	b.n	800b066 <_strtod_l+0x1f6>
 800b0c0:	2b08      	cmp	r3, #8
 800b0c2:	f103 0301 	add.w	r3, r3, #1
 800b0c6:	dc03      	bgt.n	800b0d0 <_strtod_l+0x260>
 800b0c8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b0ca:	434f      	muls	r7, r1
 800b0cc:	9709      	str	r7, [sp, #36]	; 0x24
 800b0ce:	e7e1      	b.n	800b094 <_strtod_l+0x224>
 800b0d0:	2b10      	cmp	r3, #16
 800b0d2:	bfd8      	it	le
 800b0d4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b0d8:	e7dc      	b.n	800b094 <_strtod_l+0x224>
 800b0da:	2e10      	cmp	r6, #16
 800b0dc:	bfdc      	itt	le
 800b0de:	230a      	movle	r3, #10
 800b0e0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b0e4:	e7e3      	b.n	800b0ae <_strtod_l+0x23e>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	9305      	str	r3, [sp, #20]
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e780      	b.n	800aff0 <_strtod_l+0x180>
 800b0ee:	f04f 0c00 	mov.w	ip, #0
 800b0f2:	1caa      	adds	r2, r5, #2
 800b0f4:	9215      	str	r2, [sp, #84]	; 0x54
 800b0f6:	78aa      	ldrb	r2, [r5, #2]
 800b0f8:	e788      	b.n	800b00c <_strtod_l+0x19c>
 800b0fa:	f04f 0c01 	mov.w	ip, #1
 800b0fe:	e7f8      	b.n	800b0f2 <_strtod_l+0x282>
 800b100:	0800d8a0 	.word	0x0800d8a0
 800b104:	0800d89c 	.word	0x0800d89c
 800b108:	7ff00000 	.word	0x7ff00000
 800b10c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b10e:	1c51      	adds	r1, r2, #1
 800b110:	9115      	str	r1, [sp, #84]	; 0x54
 800b112:	7852      	ldrb	r2, [r2, #1]
 800b114:	2a30      	cmp	r2, #48	; 0x30
 800b116:	d0f9      	beq.n	800b10c <_strtod_l+0x29c>
 800b118:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b11c:	2908      	cmp	r1, #8
 800b11e:	f63f af7a 	bhi.w	800b016 <_strtod_l+0x1a6>
 800b122:	3a30      	subs	r2, #48	; 0x30
 800b124:	9208      	str	r2, [sp, #32]
 800b126:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b128:	920c      	str	r2, [sp, #48]	; 0x30
 800b12a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b12c:	1c57      	adds	r7, r2, #1
 800b12e:	9715      	str	r7, [sp, #84]	; 0x54
 800b130:	7852      	ldrb	r2, [r2, #1]
 800b132:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b136:	f1be 0f09 	cmp.w	lr, #9
 800b13a:	d938      	bls.n	800b1ae <_strtod_l+0x33e>
 800b13c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b13e:	1a7f      	subs	r7, r7, r1
 800b140:	2f08      	cmp	r7, #8
 800b142:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b146:	dc03      	bgt.n	800b150 <_strtod_l+0x2e0>
 800b148:	9908      	ldr	r1, [sp, #32]
 800b14a:	428f      	cmp	r7, r1
 800b14c:	bfa8      	it	ge
 800b14e:	460f      	movge	r7, r1
 800b150:	f1bc 0f00 	cmp.w	ip, #0
 800b154:	d000      	beq.n	800b158 <_strtod_l+0x2e8>
 800b156:	427f      	negs	r7, r7
 800b158:	2e00      	cmp	r6, #0
 800b15a:	d14f      	bne.n	800b1fc <_strtod_l+0x38c>
 800b15c:	9904      	ldr	r1, [sp, #16]
 800b15e:	4301      	orrs	r1, r0
 800b160:	f47f aec1 	bne.w	800aee6 <_strtod_l+0x76>
 800b164:	2b00      	cmp	r3, #0
 800b166:	f47f aedb 	bne.w	800af20 <_strtod_l+0xb0>
 800b16a:	2a69      	cmp	r2, #105	; 0x69
 800b16c:	d029      	beq.n	800b1c2 <_strtod_l+0x352>
 800b16e:	dc26      	bgt.n	800b1be <_strtod_l+0x34e>
 800b170:	2a49      	cmp	r2, #73	; 0x49
 800b172:	d026      	beq.n	800b1c2 <_strtod_l+0x352>
 800b174:	2a4e      	cmp	r2, #78	; 0x4e
 800b176:	f47f aed3 	bne.w	800af20 <_strtod_l+0xb0>
 800b17a:	499b      	ldr	r1, [pc, #620]	; (800b3e8 <_strtod_l+0x578>)
 800b17c:	a815      	add	r0, sp, #84	; 0x54
 800b17e:	f001 fdab 	bl	800ccd8 <__match>
 800b182:	2800      	cmp	r0, #0
 800b184:	f43f aecc 	beq.w	800af20 <_strtod_l+0xb0>
 800b188:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b18a:	781b      	ldrb	r3, [r3, #0]
 800b18c:	2b28      	cmp	r3, #40	; 0x28
 800b18e:	d12f      	bne.n	800b1f0 <_strtod_l+0x380>
 800b190:	4996      	ldr	r1, [pc, #600]	; (800b3ec <_strtod_l+0x57c>)
 800b192:	aa18      	add	r2, sp, #96	; 0x60
 800b194:	a815      	add	r0, sp, #84	; 0x54
 800b196:	f001 fdb3 	bl	800cd00 <__hexnan>
 800b19a:	2805      	cmp	r0, #5
 800b19c:	d128      	bne.n	800b1f0 <_strtod_l+0x380>
 800b19e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b1a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b1a4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b1a8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b1ac:	e69b      	b.n	800aee6 <_strtod_l+0x76>
 800b1ae:	9f08      	ldr	r7, [sp, #32]
 800b1b0:	210a      	movs	r1, #10
 800b1b2:	fb01 2107 	mla	r1, r1, r7, r2
 800b1b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b1ba:	9208      	str	r2, [sp, #32]
 800b1bc:	e7b5      	b.n	800b12a <_strtod_l+0x2ba>
 800b1be:	2a6e      	cmp	r2, #110	; 0x6e
 800b1c0:	e7d9      	b.n	800b176 <_strtod_l+0x306>
 800b1c2:	498b      	ldr	r1, [pc, #556]	; (800b3f0 <_strtod_l+0x580>)
 800b1c4:	a815      	add	r0, sp, #84	; 0x54
 800b1c6:	f001 fd87 	bl	800ccd8 <__match>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	f43f aea8 	beq.w	800af20 <_strtod_l+0xb0>
 800b1d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1d2:	4988      	ldr	r1, [pc, #544]	; (800b3f4 <_strtod_l+0x584>)
 800b1d4:	3b01      	subs	r3, #1
 800b1d6:	a815      	add	r0, sp, #84	; 0x54
 800b1d8:	9315      	str	r3, [sp, #84]	; 0x54
 800b1da:	f001 fd7d 	bl	800ccd8 <__match>
 800b1de:	b910      	cbnz	r0, 800b1e6 <_strtod_l+0x376>
 800b1e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	9315      	str	r3, [sp, #84]	; 0x54
 800b1e6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b404 <_strtod_l+0x594>
 800b1ea:	f04f 0800 	mov.w	r8, #0
 800b1ee:	e67a      	b.n	800aee6 <_strtod_l+0x76>
 800b1f0:	4881      	ldr	r0, [pc, #516]	; (800b3f8 <_strtod_l+0x588>)
 800b1f2:	f001 fa8d 	bl	800c710 <nan>
 800b1f6:	ec59 8b10 	vmov	r8, r9, d0
 800b1fa:	e674      	b.n	800aee6 <_strtod_l+0x76>
 800b1fc:	9b05      	ldr	r3, [sp, #20]
 800b1fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b200:	1afb      	subs	r3, r7, r3
 800b202:	f1bb 0f00 	cmp.w	fp, #0
 800b206:	bf08      	it	eq
 800b208:	46b3      	moveq	fp, r6
 800b20a:	2e10      	cmp	r6, #16
 800b20c:	9308      	str	r3, [sp, #32]
 800b20e:	4635      	mov	r5, r6
 800b210:	bfa8      	it	ge
 800b212:	2510      	movge	r5, #16
 800b214:	f7f5 f99e 	bl	8000554 <__aeabi_ui2d>
 800b218:	2e09      	cmp	r6, #9
 800b21a:	4680      	mov	r8, r0
 800b21c:	4689      	mov	r9, r1
 800b21e:	dd13      	ble.n	800b248 <_strtod_l+0x3d8>
 800b220:	4b76      	ldr	r3, [pc, #472]	; (800b3fc <_strtod_l+0x58c>)
 800b222:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b226:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b22a:	f7f5 fa0d 	bl	8000648 <__aeabi_dmul>
 800b22e:	4680      	mov	r8, r0
 800b230:	4650      	mov	r0, sl
 800b232:	4689      	mov	r9, r1
 800b234:	f7f5 f98e 	bl	8000554 <__aeabi_ui2d>
 800b238:	4602      	mov	r2, r0
 800b23a:	460b      	mov	r3, r1
 800b23c:	4640      	mov	r0, r8
 800b23e:	4649      	mov	r1, r9
 800b240:	f7f5 f84c 	bl	80002dc <__adddf3>
 800b244:	4680      	mov	r8, r0
 800b246:	4689      	mov	r9, r1
 800b248:	2e0f      	cmp	r6, #15
 800b24a:	dc38      	bgt.n	800b2be <_strtod_l+0x44e>
 800b24c:	9b08      	ldr	r3, [sp, #32]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	f43f ae49 	beq.w	800aee6 <_strtod_l+0x76>
 800b254:	dd24      	ble.n	800b2a0 <_strtod_l+0x430>
 800b256:	2b16      	cmp	r3, #22
 800b258:	dc0b      	bgt.n	800b272 <_strtod_l+0x402>
 800b25a:	4968      	ldr	r1, [pc, #416]	; (800b3fc <_strtod_l+0x58c>)
 800b25c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b260:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b264:	4642      	mov	r2, r8
 800b266:	464b      	mov	r3, r9
 800b268:	f7f5 f9ee 	bl	8000648 <__aeabi_dmul>
 800b26c:	4680      	mov	r8, r0
 800b26e:	4689      	mov	r9, r1
 800b270:	e639      	b.n	800aee6 <_strtod_l+0x76>
 800b272:	9a08      	ldr	r2, [sp, #32]
 800b274:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b278:	4293      	cmp	r3, r2
 800b27a:	db20      	blt.n	800b2be <_strtod_l+0x44e>
 800b27c:	4c5f      	ldr	r4, [pc, #380]	; (800b3fc <_strtod_l+0x58c>)
 800b27e:	f1c6 060f 	rsb	r6, r6, #15
 800b282:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b286:	4642      	mov	r2, r8
 800b288:	464b      	mov	r3, r9
 800b28a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b28e:	f7f5 f9db 	bl	8000648 <__aeabi_dmul>
 800b292:	9b08      	ldr	r3, [sp, #32]
 800b294:	1b9e      	subs	r6, r3, r6
 800b296:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b29a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b29e:	e7e3      	b.n	800b268 <_strtod_l+0x3f8>
 800b2a0:	9b08      	ldr	r3, [sp, #32]
 800b2a2:	3316      	adds	r3, #22
 800b2a4:	db0b      	blt.n	800b2be <_strtod_l+0x44e>
 800b2a6:	9b05      	ldr	r3, [sp, #20]
 800b2a8:	1bdf      	subs	r7, r3, r7
 800b2aa:	4b54      	ldr	r3, [pc, #336]	; (800b3fc <_strtod_l+0x58c>)
 800b2ac:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2b4:	4640      	mov	r0, r8
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	f7f5 faf0 	bl	800089c <__aeabi_ddiv>
 800b2bc:	e7d6      	b.n	800b26c <_strtod_l+0x3fc>
 800b2be:	9b08      	ldr	r3, [sp, #32]
 800b2c0:	1b75      	subs	r5, r6, r5
 800b2c2:	441d      	add	r5, r3
 800b2c4:	2d00      	cmp	r5, #0
 800b2c6:	dd70      	ble.n	800b3aa <_strtod_l+0x53a>
 800b2c8:	f015 030f 	ands.w	r3, r5, #15
 800b2cc:	d00a      	beq.n	800b2e4 <_strtod_l+0x474>
 800b2ce:	494b      	ldr	r1, [pc, #300]	; (800b3fc <_strtod_l+0x58c>)
 800b2d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2d4:	4642      	mov	r2, r8
 800b2d6:	464b      	mov	r3, r9
 800b2d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2dc:	f7f5 f9b4 	bl	8000648 <__aeabi_dmul>
 800b2e0:	4680      	mov	r8, r0
 800b2e2:	4689      	mov	r9, r1
 800b2e4:	f035 050f 	bics.w	r5, r5, #15
 800b2e8:	d04d      	beq.n	800b386 <_strtod_l+0x516>
 800b2ea:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b2ee:	dd22      	ble.n	800b336 <_strtod_l+0x4c6>
 800b2f0:	2500      	movs	r5, #0
 800b2f2:	46ab      	mov	fp, r5
 800b2f4:	9509      	str	r5, [sp, #36]	; 0x24
 800b2f6:	9505      	str	r5, [sp, #20]
 800b2f8:	2322      	movs	r3, #34	; 0x22
 800b2fa:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b404 <_strtod_l+0x594>
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	f04f 0800 	mov.w	r8, #0
 800b304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b306:	2b00      	cmp	r3, #0
 800b308:	f43f aded 	beq.w	800aee6 <_strtod_l+0x76>
 800b30c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b30e:	4620      	mov	r0, r4
 800b310:	f7ff f924 	bl	800a55c <_Bfree>
 800b314:	9905      	ldr	r1, [sp, #20]
 800b316:	4620      	mov	r0, r4
 800b318:	f7ff f920 	bl	800a55c <_Bfree>
 800b31c:	4659      	mov	r1, fp
 800b31e:	4620      	mov	r0, r4
 800b320:	f7ff f91c 	bl	800a55c <_Bfree>
 800b324:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b326:	4620      	mov	r0, r4
 800b328:	f7ff f918 	bl	800a55c <_Bfree>
 800b32c:	4629      	mov	r1, r5
 800b32e:	4620      	mov	r0, r4
 800b330:	f7ff f914 	bl	800a55c <_Bfree>
 800b334:	e5d7      	b.n	800aee6 <_strtod_l+0x76>
 800b336:	4b32      	ldr	r3, [pc, #200]	; (800b400 <_strtod_l+0x590>)
 800b338:	9304      	str	r3, [sp, #16]
 800b33a:	2300      	movs	r3, #0
 800b33c:	112d      	asrs	r5, r5, #4
 800b33e:	4640      	mov	r0, r8
 800b340:	4649      	mov	r1, r9
 800b342:	469a      	mov	sl, r3
 800b344:	2d01      	cmp	r5, #1
 800b346:	dc21      	bgt.n	800b38c <_strtod_l+0x51c>
 800b348:	b10b      	cbz	r3, 800b34e <_strtod_l+0x4de>
 800b34a:	4680      	mov	r8, r0
 800b34c:	4689      	mov	r9, r1
 800b34e:	492c      	ldr	r1, [pc, #176]	; (800b400 <_strtod_l+0x590>)
 800b350:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b354:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b358:	4642      	mov	r2, r8
 800b35a:	464b      	mov	r3, r9
 800b35c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b360:	f7f5 f972 	bl	8000648 <__aeabi_dmul>
 800b364:	4b27      	ldr	r3, [pc, #156]	; (800b404 <_strtod_l+0x594>)
 800b366:	460a      	mov	r2, r1
 800b368:	400b      	ands	r3, r1
 800b36a:	4927      	ldr	r1, [pc, #156]	; (800b408 <_strtod_l+0x598>)
 800b36c:	428b      	cmp	r3, r1
 800b36e:	4680      	mov	r8, r0
 800b370:	d8be      	bhi.n	800b2f0 <_strtod_l+0x480>
 800b372:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b376:	428b      	cmp	r3, r1
 800b378:	bf86      	itte	hi
 800b37a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b40c <_strtod_l+0x59c>
 800b37e:	f04f 38ff 	movhi.w	r8, #4294967295
 800b382:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b386:	2300      	movs	r3, #0
 800b388:	9304      	str	r3, [sp, #16]
 800b38a:	e07b      	b.n	800b484 <_strtod_l+0x614>
 800b38c:	07ea      	lsls	r2, r5, #31
 800b38e:	d505      	bpl.n	800b39c <_strtod_l+0x52c>
 800b390:	9b04      	ldr	r3, [sp, #16]
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f5 f957 	bl	8000648 <__aeabi_dmul>
 800b39a:	2301      	movs	r3, #1
 800b39c:	9a04      	ldr	r2, [sp, #16]
 800b39e:	3208      	adds	r2, #8
 800b3a0:	f10a 0a01 	add.w	sl, sl, #1
 800b3a4:	106d      	asrs	r5, r5, #1
 800b3a6:	9204      	str	r2, [sp, #16]
 800b3a8:	e7cc      	b.n	800b344 <_strtod_l+0x4d4>
 800b3aa:	d0ec      	beq.n	800b386 <_strtod_l+0x516>
 800b3ac:	426d      	negs	r5, r5
 800b3ae:	f015 020f 	ands.w	r2, r5, #15
 800b3b2:	d00a      	beq.n	800b3ca <_strtod_l+0x55a>
 800b3b4:	4b11      	ldr	r3, [pc, #68]	; (800b3fc <_strtod_l+0x58c>)
 800b3b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	4649      	mov	r1, r9
 800b3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c2:	f7f5 fa6b 	bl	800089c <__aeabi_ddiv>
 800b3c6:	4680      	mov	r8, r0
 800b3c8:	4689      	mov	r9, r1
 800b3ca:	112d      	asrs	r5, r5, #4
 800b3cc:	d0db      	beq.n	800b386 <_strtod_l+0x516>
 800b3ce:	2d1f      	cmp	r5, #31
 800b3d0:	dd1e      	ble.n	800b410 <_strtod_l+0x5a0>
 800b3d2:	2500      	movs	r5, #0
 800b3d4:	46ab      	mov	fp, r5
 800b3d6:	9509      	str	r5, [sp, #36]	; 0x24
 800b3d8:	9505      	str	r5, [sp, #20]
 800b3da:	2322      	movs	r3, #34	; 0x22
 800b3dc:	f04f 0800 	mov.w	r8, #0
 800b3e0:	f04f 0900 	mov.w	r9, #0
 800b3e4:	6023      	str	r3, [r4, #0]
 800b3e6:	e78d      	b.n	800b304 <_strtod_l+0x494>
 800b3e8:	0800d689 	.word	0x0800d689
 800b3ec:	0800d8b4 	.word	0x0800d8b4
 800b3f0:	0800d681 	.word	0x0800d681
 800b3f4:	0800d6b6 	.word	0x0800d6b6
 800b3f8:	0800da60 	.word	0x0800da60
 800b3fc:	0800d7c8 	.word	0x0800d7c8
 800b400:	0800d7a0 	.word	0x0800d7a0
 800b404:	7ff00000 	.word	0x7ff00000
 800b408:	7ca00000 	.word	0x7ca00000
 800b40c:	7fefffff 	.word	0x7fefffff
 800b410:	f015 0310 	ands.w	r3, r5, #16
 800b414:	bf18      	it	ne
 800b416:	236a      	movne	r3, #106	; 0x6a
 800b418:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b7bc <_strtod_l+0x94c>
 800b41c:	9304      	str	r3, [sp, #16]
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	2300      	movs	r3, #0
 800b424:	07ea      	lsls	r2, r5, #31
 800b426:	d504      	bpl.n	800b432 <_strtod_l+0x5c2>
 800b428:	e9da 2300 	ldrd	r2, r3, [sl]
 800b42c:	f7f5 f90c 	bl	8000648 <__aeabi_dmul>
 800b430:	2301      	movs	r3, #1
 800b432:	106d      	asrs	r5, r5, #1
 800b434:	f10a 0a08 	add.w	sl, sl, #8
 800b438:	d1f4      	bne.n	800b424 <_strtod_l+0x5b4>
 800b43a:	b10b      	cbz	r3, 800b440 <_strtod_l+0x5d0>
 800b43c:	4680      	mov	r8, r0
 800b43e:	4689      	mov	r9, r1
 800b440:	9b04      	ldr	r3, [sp, #16]
 800b442:	b1bb      	cbz	r3, 800b474 <_strtod_l+0x604>
 800b444:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b448:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	4649      	mov	r1, r9
 800b450:	dd10      	ble.n	800b474 <_strtod_l+0x604>
 800b452:	2b1f      	cmp	r3, #31
 800b454:	f340 811e 	ble.w	800b694 <_strtod_l+0x824>
 800b458:	2b34      	cmp	r3, #52	; 0x34
 800b45a:	bfde      	ittt	le
 800b45c:	f04f 33ff 	movle.w	r3, #4294967295
 800b460:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b464:	4093      	lslle	r3, r2
 800b466:	f04f 0800 	mov.w	r8, #0
 800b46a:	bfcc      	ite	gt
 800b46c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b470:	ea03 0901 	andle.w	r9, r3, r1
 800b474:	2200      	movs	r2, #0
 800b476:	2300      	movs	r3, #0
 800b478:	4640      	mov	r0, r8
 800b47a:	4649      	mov	r1, r9
 800b47c:	f7f5 fb4c 	bl	8000b18 <__aeabi_dcmpeq>
 800b480:	2800      	cmp	r0, #0
 800b482:	d1a6      	bne.n	800b3d2 <_strtod_l+0x562>
 800b484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b486:	9300      	str	r3, [sp, #0]
 800b488:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b48a:	4633      	mov	r3, r6
 800b48c:	465a      	mov	r2, fp
 800b48e:	4620      	mov	r0, r4
 800b490:	f7ff f8cc 	bl	800a62c <__s2b>
 800b494:	9009      	str	r0, [sp, #36]	; 0x24
 800b496:	2800      	cmp	r0, #0
 800b498:	f43f af2a 	beq.w	800b2f0 <_strtod_l+0x480>
 800b49c:	9a08      	ldr	r2, [sp, #32]
 800b49e:	9b05      	ldr	r3, [sp, #20]
 800b4a0:	2a00      	cmp	r2, #0
 800b4a2:	eba3 0307 	sub.w	r3, r3, r7
 800b4a6:	bfa8      	it	ge
 800b4a8:	2300      	movge	r3, #0
 800b4aa:	930c      	str	r3, [sp, #48]	; 0x30
 800b4ac:	2500      	movs	r5, #0
 800b4ae:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b4b2:	9312      	str	r3, [sp, #72]	; 0x48
 800b4b4:	46ab      	mov	fp, r5
 800b4b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b8:	4620      	mov	r0, r4
 800b4ba:	6859      	ldr	r1, [r3, #4]
 800b4bc:	f7ff f80e 	bl	800a4dc <_Balloc>
 800b4c0:	9005      	str	r0, [sp, #20]
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	f43f af18 	beq.w	800b2f8 <_strtod_l+0x488>
 800b4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ca:	691a      	ldr	r2, [r3, #16]
 800b4cc:	3202      	adds	r2, #2
 800b4ce:	f103 010c 	add.w	r1, r3, #12
 800b4d2:	0092      	lsls	r2, r2, #2
 800b4d4:	300c      	adds	r0, #12
 800b4d6:	f7fe f870 	bl	80095ba <memcpy>
 800b4da:	ec49 8b10 	vmov	d0, r8, r9
 800b4de:	aa18      	add	r2, sp, #96	; 0x60
 800b4e0:	a917      	add	r1, sp, #92	; 0x5c
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7ff fbd6 	bl	800ac94 <__d2b>
 800b4e8:	ec49 8b18 	vmov	d8, r8, r9
 800b4ec:	9016      	str	r0, [sp, #88]	; 0x58
 800b4ee:	2800      	cmp	r0, #0
 800b4f0:	f43f af02 	beq.w	800b2f8 <_strtod_l+0x488>
 800b4f4:	2101      	movs	r1, #1
 800b4f6:	4620      	mov	r0, r4
 800b4f8:	f7ff f930 	bl	800a75c <__i2b>
 800b4fc:	4683      	mov	fp, r0
 800b4fe:	2800      	cmp	r0, #0
 800b500:	f43f aefa 	beq.w	800b2f8 <_strtod_l+0x488>
 800b504:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b506:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b508:	2e00      	cmp	r6, #0
 800b50a:	bfab      	itete	ge
 800b50c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b50e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b510:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b512:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b516:	bfac      	ite	ge
 800b518:	eb06 0a03 	addge.w	sl, r6, r3
 800b51c:	1b9f      	sublt	r7, r3, r6
 800b51e:	9b04      	ldr	r3, [sp, #16]
 800b520:	1af6      	subs	r6, r6, r3
 800b522:	4416      	add	r6, r2
 800b524:	4ba0      	ldr	r3, [pc, #640]	; (800b7a8 <_strtod_l+0x938>)
 800b526:	3e01      	subs	r6, #1
 800b528:	429e      	cmp	r6, r3
 800b52a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b52e:	f280 80c4 	bge.w	800b6ba <_strtod_l+0x84a>
 800b532:	1b9b      	subs	r3, r3, r6
 800b534:	2b1f      	cmp	r3, #31
 800b536:	eba2 0203 	sub.w	r2, r2, r3
 800b53a:	f04f 0101 	mov.w	r1, #1
 800b53e:	f300 80b0 	bgt.w	800b6a2 <_strtod_l+0x832>
 800b542:	fa01 f303 	lsl.w	r3, r1, r3
 800b546:	930e      	str	r3, [sp, #56]	; 0x38
 800b548:	2300      	movs	r3, #0
 800b54a:	930d      	str	r3, [sp, #52]	; 0x34
 800b54c:	eb0a 0602 	add.w	r6, sl, r2
 800b550:	9b04      	ldr	r3, [sp, #16]
 800b552:	45b2      	cmp	sl, r6
 800b554:	4417      	add	r7, r2
 800b556:	441f      	add	r7, r3
 800b558:	4653      	mov	r3, sl
 800b55a:	bfa8      	it	ge
 800b55c:	4633      	movge	r3, r6
 800b55e:	42bb      	cmp	r3, r7
 800b560:	bfa8      	it	ge
 800b562:	463b      	movge	r3, r7
 800b564:	2b00      	cmp	r3, #0
 800b566:	bfc2      	ittt	gt
 800b568:	1af6      	subgt	r6, r6, r3
 800b56a:	1aff      	subgt	r7, r7, r3
 800b56c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b572:	2b00      	cmp	r3, #0
 800b574:	dd17      	ble.n	800b5a6 <_strtod_l+0x736>
 800b576:	4659      	mov	r1, fp
 800b578:	461a      	mov	r2, r3
 800b57a:	4620      	mov	r0, r4
 800b57c:	f7ff f9ae 	bl	800a8dc <__pow5mult>
 800b580:	4683      	mov	fp, r0
 800b582:	2800      	cmp	r0, #0
 800b584:	f43f aeb8 	beq.w	800b2f8 <_strtod_l+0x488>
 800b588:	4601      	mov	r1, r0
 800b58a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b58c:	4620      	mov	r0, r4
 800b58e:	f7ff f8fb 	bl	800a788 <__multiply>
 800b592:	900b      	str	r0, [sp, #44]	; 0x2c
 800b594:	2800      	cmp	r0, #0
 800b596:	f43f aeaf 	beq.w	800b2f8 <_strtod_l+0x488>
 800b59a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b59c:	4620      	mov	r0, r4
 800b59e:	f7fe ffdd 	bl	800a55c <_Bfree>
 800b5a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5a4:	9316      	str	r3, [sp, #88]	; 0x58
 800b5a6:	2e00      	cmp	r6, #0
 800b5a8:	f300 808c 	bgt.w	800b6c4 <_strtod_l+0x854>
 800b5ac:	9b08      	ldr	r3, [sp, #32]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	dd08      	ble.n	800b5c4 <_strtod_l+0x754>
 800b5b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5b4:	9905      	ldr	r1, [sp, #20]
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7ff f990 	bl	800a8dc <__pow5mult>
 800b5bc:	9005      	str	r0, [sp, #20]
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	f43f ae9a 	beq.w	800b2f8 <_strtod_l+0x488>
 800b5c4:	2f00      	cmp	r7, #0
 800b5c6:	dd08      	ble.n	800b5da <_strtod_l+0x76a>
 800b5c8:	9905      	ldr	r1, [sp, #20]
 800b5ca:	463a      	mov	r2, r7
 800b5cc:	4620      	mov	r0, r4
 800b5ce:	f7ff f9df 	bl	800a990 <__lshift>
 800b5d2:	9005      	str	r0, [sp, #20]
 800b5d4:	2800      	cmp	r0, #0
 800b5d6:	f43f ae8f 	beq.w	800b2f8 <_strtod_l+0x488>
 800b5da:	f1ba 0f00 	cmp.w	sl, #0
 800b5de:	dd08      	ble.n	800b5f2 <_strtod_l+0x782>
 800b5e0:	4659      	mov	r1, fp
 800b5e2:	4652      	mov	r2, sl
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f7ff f9d3 	bl	800a990 <__lshift>
 800b5ea:	4683      	mov	fp, r0
 800b5ec:	2800      	cmp	r0, #0
 800b5ee:	f43f ae83 	beq.w	800b2f8 <_strtod_l+0x488>
 800b5f2:	9a05      	ldr	r2, [sp, #20]
 800b5f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5f6:	4620      	mov	r0, r4
 800b5f8:	f7ff fa52 	bl	800aaa0 <__mdiff>
 800b5fc:	4605      	mov	r5, r0
 800b5fe:	2800      	cmp	r0, #0
 800b600:	f43f ae7a 	beq.w	800b2f8 <_strtod_l+0x488>
 800b604:	68c3      	ldr	r3, [r0, #12]
 800b606:	930b      	str	r3, [sp, #44]	; 0x2c
 800b608:	2300      	movs	r3, #0
 800b60a:	60c3      	str	r3, [r0, #12]
 800b60c:	4659      	mov	r1, fp
 800b60e:	f7ff fa2b 	bl	800aa68 <__mcmp>
 800b612:	2800      	cmp	r0, #0
 800b614:	da60      	bge.n	800b6d8 <_strtod_l+0x868>
 800b616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b618:	ea53 0308 	orrs.w	r3, r3, r8
 800b61c:	f040 8084 	bne.w	800b728 <_strtod_l+0x8b8>
 800b620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b624:	2b00      	cmp	r3, #0
 800b626:	d17f      	bne.n	800b728 <_strtod_l+0x8b8>
 800b628:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b62c:	0d1b      	lsrs	r3, r3, #20
 800b62e:	051b      	lsls	r3, r3, #20
 800b630:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b634:	d978      	bls.n	800b728 <_strtod_l+0x8b8>
 800b636:	696b      	ldr	r3, [r5, #20]
 800b638:	b913      	cbnz	r3, 800b640 <_strtod_l+0x7d0>
 800b63a:	692b      	ldr	r3, [r5, #16]
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	dd73      	ble.n	800b728 <_strtod_l+0x8b8>
 800b640:	4629      	mov	r1, r5
 800b642:	2201      	movs	r2, #1
 800b644:	4620      	mov	r0, r4
 800b646:	f7ff f9a3 	bl	800a990 <__lshift>
 800b64a:	4659      	mov	r1, fp
 800b64c:	4605      	mov	r5, r0
 800b64e:	f7ff fa0b 	bl	800aa68 <__mcmp>
 800b652:	2800      	cmp	r0, #0
 800b654:	dd68      	ble.n	800b728 <_strtod_l+0x8b8>
 800b656:	9904      	ldr	r1, [sp, #16]
 800b658:	4a54      	ldr	r2, [pc, #336]	; (800b7ac <_strtod_l+0x93c>)
 800b65a:	464b      	mov	r3, r9
 800b65c:	2900      	cmp	r1, #0
 800b65e:	f000 8084 	beq.w	800b76a <_strtod_l+0x8fa>
 800b662:	ea02 0109 	and.w	r1, r2, r9
 800b666:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b66a:	dc7e      	bgt.n	800b76a <_strtod_l+0x8fa>
 800b66c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b670:	f77f aeb3 	ble.w	800b3da <_strtod_l+0x56a>
 800b674:	4b4e      	ldr	r3, [pc, #312]	; (800b7b0 <_strtod_l+0x940>)
 800b676:	4640      	mov	r0, r8
 800b678:	4649      	mov	r1, r9
 800b67a:	2200      	movs	r2, #0
 800b67c:	f7f4 ffe4 	bl	8000648 <__aeabi_dmul>
 800b680:	4b4a      	ldr	r3, [pc, #296]	; (800b7ac <_strtod_l+0x93c>)
 800b682:	400b      	ands	r3, r1
 800b684:	4680      	mov	r8, r0
 800b686:	4689      	mov	r9, r1
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f47f ae3f 	bne.w	800b30c <_strtod_l+0x49c>
 800b68e:	2322      	movs	r3, #34	; 0x22
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	e63b      	b.n	800b30c <_strtod_l+0x49c>
 800b694:	f04f 32ff 	mov.w	r2, #4294967295
 800b698:	fa02 f303 	lsl.w	r3, r2, r3
 800b69c:	ea03 0808 	and.w	r8, r3, r8
 800b6a0:	e6e8      	b.n	800b474 <_strtod_l+0x604>
 800b6a2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b6a6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b6aa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b6ae:	36e2      	adds	r6, #226	; 0xe2
 800b6b0:	fa01 f306 	lsl.w	r3, r1, r6
 800b6b4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b6b8:	e748      	b.n	800b54c <_strtod_l+0x6dc>
 800b6ba:	2100      	movs	r1, #0
 800b6bc:	2301      	movs	r3, #1
 800b6be:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b6c2:	e743      	b.n	800b54c <_strtod_l+0x6dc>
 800b6c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b6c6:	4632      	mov	r2, r6
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f7ff f961 	bl	800a990 <__lshift>
 800b6ce:	9016      	str	r0, [sp, #88]	; 0x58
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	f47f af6b 	bne.w	800b5ac <_strtod_l+0x73c>
 800b6d6:	e60f      	b.n	800b2f8 <_strtod_l+0x488>
 800b6d8:	46ca      	mov	sl, r9
 800b6da:	d171      	bne.n	800b7c0 <_strtod_l+0x950>
 800b6dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b6de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6e2:	b352      	cbz	r2, 800b73a <_strtod_l+0x8ca>
 800b6e4:	4a33      	ldr	r2, [pc, #204]	; (800b7b4 <_strtod_l+0x944>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d12a      	bne.n	800b740 <_strtod_l+0x8d0>
 800b6ea:	9b04      	ldr	r3, [sp, #16]
 800b6ec:	4641      	mov	r1, r8
 800b6ee:	b1fb      	cbz	r3, 800b730 <_strtod_l+0x8c0>
 800b6f0:	4b2e      	ldr	r3, [pc, #184]	; (800b7ac <_strtod_l+0x93c>)
 800b6f2:	ea09 0303 	and.w	r3, r9, r3
 800b6f6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b6fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b6fe:	d81a      	bhi.n	800b736 <_strtod_l+0x8c6>
 800b700:	0d1b      	lsrs	r3, r3, #20
 800b702:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b706:	fa02 f303 	lsl.w	r3, r2, r3
 800b70a:	4299      	cmp	r1, r3
 800b70c:	d118      	bne.n	800b740 <_strtod_l+0x8d0>
 800b70e:	4b2a      	ldr	r3, [pc, #168]	; (800b7b8 <_strtod_l+0x948>)
 800b710:	459a      	cmp	sl, r3
 800b712:	d102      	bne.n	800b71a <_strtod_l+0x8aa>
 800b714:	3101      	adds	r1, #1
 800b716:	f43f adef 	beq.w	800b2f8 <_strtod_l+0x488>
 800b71a:	4b24      	ldr	r3, [pc, #144]	; (800b7ac <_strtod_l+0x93c>)
 800b71c:	ea0a 0303 	and.w	r3, sl, r3
 800b720:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b724:	f04f 0800 	mov.w	r8, #0
 800b728:	9b04      	ldr	r3, [sp, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d1a2      	bne.n	800b674 <_strtod_l+0x804>
 800b72e:	e5ed      	b.n	800b30c <_strtod_l+0x49c>
 800b730:	f04f 33ff 	mov.w	r3, #4294967295
 800b734:	e7e9      	b.n	800b70a <_strtod_l+0x89a>
 800b736:	4613      	mov	r3, r2
 800b738:	e7e7      	b.n	800b70a <_strtod_l+0x89a>
 800b73a:	ea53 0308 	orrs.w	r3, r3, r8
 800b73e:	d08a      	beq.n	800b656 <_strtod_l+0x7e6>
 800b740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b742:	b1e3      	cbz	r3, 800b77e <_strtod_l+0x90e>
 800b744:	ea13 0f0a 	tst.w	r3, sl
 800b748:	d0ee      	beq.n	800b728 <_strtod_l+0x8b8>
 800b74a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b74c:	9a04      	ldr	r2, [sp, #16]
 800b74e:	4640      	mov	r0, r8
 800b750:	4649      	mov	r1, r9
 800b752:	b1c3      	cbz	r3, 800b786 <_strtod_l+0x916>
 800b754:	f7ff fb6f 	bl	800ae36 <sulp>
 800b758:	4602      	mov	r2, r0
 800b75a:	460b      	mov	r3, r1
 800b75c:	ec51 0b18 	vmov	r0, r1, d8
 800b760:	f7f4 fdbc 	bl	80002dc <__adddf3>
 800b764:	4680      	mov	r8, r0
 800b766:	4689      	mov	r9, r1
 800b768:	e7de      	b.n	800b728 <_strtod_l+0x8b8>
 800b76a:	4013      	ands	r3, r2
 800b76c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b770:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b774:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b778:	f04f 38ff 	mov.w	r8, #4294967295
 800b77c:	e7d4      	b.n	800b728 <_strtod_l+0x8b8>
 800b77e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b780:	ea13 0f08 	tst.w	r3, r8
 800b784:	e7e0      	b.n	800b748 <_strtod_l+0x8d8>
 800b786:	f7ff fb56 	bl	800ae36 <sulp>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	ec51 0b18 	vmov	r0, r1, d8
 800b792:	f7f4 fda1 	bl	80002d8 <__aeabi_dsub>
 800b796:	2200      	movs	r2, #0
 800b798:	2300      	movs	r3, #0
 800b79a:	4680      	mov	r8, r0
 800b79c:	4689      	mov	r9, r1
 800b79e:	f7f5 f9bb 	bl	8000b18 <__aeabi_dcmpeq>
 800b7a2:	2800      	cmp	r0, #0
 800b7a4:	d0c0      	beq.n	800b728 <_strtod_l+0x8b8>
 800b7a6:	e618      	b.n	800b3da <_strtod_l+0x56a>
 800b7a8:	fffffc02 	.word	0xfffffc02
 800b7ac:	7ff00000 	.word	0x7ff00000
 800b7b0:	39500000 	.word	0x39500000
 800b7b4:	000fffff 	.word	0x000fffff
 800b7b8:	7fefffff 	.word	0x7fefffff
 800b7bc:	0800d8c8 	.word	0x0800d8c8
 800b7c0:	4659      	mov	r1, fp
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f7ff fac0 	bl	800ad48 <__ratio>
 800b7c8:	ec57 6b10 	vmov	r6, r7, d0
 800b7cc:	ee10 0a10 	vmov	r0, s0
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b7d6:	4639      	mov	r1, r7
 800b7d8:	f7f5 f9b2 	bl	8000b40 <__aeabi_dcmple>
 800b7dc:	2800      	cmp	r0, #0
 800b7de:	d071      	beq.n	800b8c4 <_strtod_l+0xa54>
 800b7e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d17c      	bne.n	800b8e0 <_strtod_l+0xa70>
 800b7e6:	f1b8 0f00 	cmp.w	r8, #0
 800b7ea:	d15a      	bne.n	800b8a2 <_strtod_l+0xa32>
 800b7ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d15d      	bne.n	800b8b0 <_strtod_l+0xa40>
 800b7f4:	4b90      	ldr	r3, [pc, #576]	; (800ba38 <_strtod_l+0xbc8>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	4639      	mov	r1, r7
 800b7fc:	f7f5 f996 	bl	8000b2c <__aeabi_dcmplt>
 800b800:	2800      	cmp	r0, #0
 800b802:	d15c      	bne.n	800b8be <_strtod_l+0xa4e>
 800b804:	4630      	mov	r0, r6
 800b806:	4639      	mov	r1, r7
 800b808:	4b8c      	ldr	r3, [pc, #560]	; (800ba3c <_strtod_l+0xbcc>)
 800b80a:	2200      	movs	r2, #0
 800b80c:	f7f4 ff1c 	bl	8000648 <__aeabi_dmul>
 800b810:	4606      	mov	r6, r0
 800b812:	460f      	mov	r7, r1
 800b814:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b818:	9606      	str	r6, [sp, #24]
 800b81a:	9307      	str	r3, [sp, #28]
 800b81c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b820:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b824:	4b86      	ldr	r3, [pc, #536]	; (800ba40 <_strtod_l+0xbd0>)
 800b826:	ea0a 0303 	and.w	r3, sl, r3
 800b82a:	930d      	str	r3, [sp, #52]	; 0x34
 800b82c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b82e:	4b85      	ldr	r3, [pc, #532]	; (800ba44 <_strtod_l+0xbd4>)
 800b830:	429a      	cmp	r2, r3
 800b832:	f040 8090 	bne.w	800b956 <_strtod_l+0xae6>
 800b836:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b83a:	ec49 8b10 	vmov	d0, r8, r9
 800b83e:	f7ff f9b9 	bl	800abb4 <__ulp>
 800b842:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b846:	ec51 0b10 	vmov	r0, r1, d0
 800b84a:	f7f4 fefd 	bl	8000648 <__aeabi_dmul>
 800b84e:	4642      	mov	r2, r8
 800b850:	464b      	mov	r3, r9
 800b852:	f7f4 fd43 	bl	80002dc <__adddf3>
 800b856:	460b      	mov	r3, r1
 800b858:	4979      	ldr	r1, [pc, #484]	; (800ba40 <_strtod_l+0xbd0>)
 800b85a:	4a7b      	ldr	r2, [pc, #492]	; (800ba48 <_strtod_l+0xbd8>)
 800b85c:	4019      	ands	r1, r3
 800b85e:	4291      	cmp	r1, r2
 800b860:	4680      	mov	r8, r0
 800b862:	d944      	bls.n	800b8ee <_strtod_l+0xa7e>
 800b864:	ee18 2a90 	vmov	r2, s17
 800b868:	4b78      	ldr	r3, [pc, #480]	; (800ba4c <_strtod_l+0xbdc>)
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d104      	bne.n	800b878 <_strtod_l+0xa08>
 800b86e:	ee18 3a10 	vmov	r3, s16
 800b872:	3301      	adds	r3, #1
 800b874:	f43f ad40 	beq.w	800b2f8 <_strtod_l+0x488>
 800b878:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ba4c <_strtod_l+0xbdc>
 800b87c:	f04f 38ff 	mov.w	r8, #4294967295
 800b880:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b882:	4620      	mov	r0, r4
 800b884:	f7fe fe6a 	bl	800a55c <_Bfree>
 800b888:	9905      	ldr	r1, [sp, #20]
 800b88a:	4620      	mov	r0, r4
 800b88c:	f7fe fe66 	bl	800a55c <_Bfree>
 800b890:	4659      	mov	r1, fp
 800b892:	4620      	mov	r0, r4
 800b894:	f7fe fe62 	bl	800a55c <_Bfree>
 800b898:	4629      	mov	r1, r5
 800b89a:	4620      	mov	r0, r4
 800b89c:	f7fe fe5e 	bl	800a55c <_Bfree>
 800b8a0:	e609      	b.n	800b4b6 <_strtod_l+0x646>
 800b8a2:	f1b8 0f01 	cmp.w	r8, #1
 800b8a6:	d103      	bne.n	800b8b0 <_strtod_l+0xa40>
 800b8a8:	f1b9 0f00 	cmp.w	r9, #0
 800b8ac:	f43f ad95 	beq.w	800b3da <_strtod_l+0x56a>
 800b8b0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ba08 <_strtod_l+0xb98>
 800b8b4:	4f60      	ldr	r7, [pc, #384]	; (800ba38 <_strtod_l+0xbc8>)
 800b8b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8ba:	2600      	movs	r6, #0
 800b8bc:	e7ae      	b.n	800b81c <_strtod_l+0x9ac>
 800b8be:	4f5f      	ldr	r7, [pc, #380]	; (800ba3c <_strtod_l+0xbcc>)
 800b8c0:	2600      	movs	r6, #0
 800b8c2:	e7a7      	b.n	800b814 <_strtod_l+0x9a4>
 800b8c4:	4b5d      	ldr	r3, [pc, #372]	; (800ba3c <_strtod_l+0xbcc>)
 800b8c6:	4630      	mov	r0, r6
 800b8c8:	4639      	mov	r1, r7
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	f7f4 febc 	bl	8000648 <__aeabi_dmul>
 800b8d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460f      	mov	r7, r1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d09c      	beq.n	800b814 <_strtod_l+0x9a4>
 800b8da:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b8de:	e79d      	b.n	800b81c <_strtod_l+0x9ac>
 800b8e0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ba10 <_strtod_l+0xba0>
 800b8e4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8e8:	ec57 6b17 	vmov	r6, r7, d7
 800b8ec:	e796      	b.n	800b81c <_strtod_l+0x9ac>
 800b8ee:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b8f2:	9b04      	ldr	r3, [sp, #16]
 800b8f4:	46ca      	mov	sl, r9
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1c2      	bne.n	800b880 <_strtod_l+0xa10>
 800b8fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b900:	0d1b      	lsrs	r3, r3, #20
 800b902:	051b      	lsls	r3, r3, #20
 800b904:	429a      	cmp	r2, r3
 800b906:	d1bb      	bne.n	800b880 <_strtod_l+0xa10>
 800b908:	4630      	mov	r0, r6
 800b90a:	4639      	mov	r1, r7
 800b90c:	f7f5 f9fc 	bl	8000d08 <__aeabi_d2lz>
 800b910:	f7f4 fe6c 	bl	80005ec <__aeabi_l2d>
 800b914:	4602      	mov	r2, r0
 800b916:	460b      	mov	r3, r1
 800b918:	4630      	mov	r0, r6
 800b91a:	4639      	mov	r1, r7
 800b91c:	f7f4 fcdc 	bl	80002d8 <__aeabi_dsub>
 800b920:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b922:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b926:	ea43 0308 	orr.w	r3, r3, r8
 800b92a:	4313      	orrs	r3, r2
 800b92c:	4606      	mov	r6, r0
 800b92e:	460f      	mov	r7, r1
 800b930:	d054      	beq.n	800b9dc <_strtod_l+0xb6c>
 800b932:	a339      	add	r3, pc, #228	; (adr r3, 800ba18 <_strtod_l+0xba8>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f7f5 f8f8 	bl	8000b2c <__aeabi_dcmplt>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	f47f ace5 	bne.w	800b30c <_strtod_l+0x49c>
 800b942:	a337      	add	r3, pc, #220	; (adr r3, 800ba20 <_strtod_l+0xbb0>)
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	4630      	mov	r0, r6
 800b94a:	4639      	mov	r1, r7
 800b94c:	f7f5 f90c 	bl	8000b68 <__aeabi_dcmpgt>
 800b950:	2800      	cmp	r0, #0
 800b952:	d095      	beq.n	800b880 <_strtod_l+0xa10>
 800b954:	e4da      	b.n	800b30c <_strtod_l+0x49c>
 800b956:	9b04      	ldr	r3, [sp, #16]
 800b958:	b333      	cbz	r3, 800b9a8 <_strtod_l+0xb38>
 800b95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b95c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b960:	d822      	bhi.n	800b9a8 <_strtod_l+0xb38>
 800b962:	a331      	add	r3, pc, #196	; (adr r3, 800ba28 <_strtod_l+0xbb8>)
 800b964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b968:	4630      	mov	r0, r6
 800b96a:	4639      	mov	r1, r7
 800b96c:	f7f5 f8e8 	bl	8000b40 <__aeabi_dcmple>
 800b970:	b1a0      	cbz	r0, 800b99c <_strtod_l+0xb2c>
 800b972:	4639      	mov	r1, r7
 800b974:	4630      	mov	r0, r6
 800b976:	f7f5 f93f 	bl	8000bf8 <__aeabi_d2uiz>
 800b97a:	2801      	cmp	r0, #1
 800b97c:	bf38      	it	cc
 800b97e:	2001      	movcc	r0, #1
 800b980:	f7f4 fde8 	bl	8000554 <__aeabi_ui2d>
 800b984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b986:	4606      	mov	r6, r0
 800b988:	460f      	mov	r7, r1
 800b98a:	bb23      	cbnz	r3, 800b9d6 <_strtod_l+0xb66>
 800b98c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b990:	9010      	str	r0, [sp, #64]	; 0x40
 800b992:	9311      	str	r3, [sp, #68]	; 0x44
 800b994:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b998:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b99c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b99e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b9a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b9a4:	1a9b      	subs	r3, r3, r2
 800b9a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b9a8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800b9b0:	eef0 0a68 	vmov.f32	s1, s17
 800b9b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b9b8:	f7ff f8fc 	bl	800abb4 <__ulp>
 800b9bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b9c0:	ec53 2b10 	vmov	r2, r3, d0
 800b9c4:	f7f4 fe40 	bl	8000648 <__aeabi_dmul>
 800b9c8:	ec53 2b18 	vmov	r2, r3, d8
 800b9cc:	f7f4 fc86 	bl	80002dc <__adddf3>
 800b9d0:	4680      	mov	r8, r0
 800b9d2:	4689      	mov	r9, r1
 800b9d4:	e78d      	b.n	800b8f2 <_strtod_l+0xa82>
 800b9d6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b9da:	e7db      	b.n	800b994 <_strtod_l+0xb24>
 800b9dc:	a314      	add	r3, pc, #80	; (adr r3, 800ba30 <_strtod_l+0xbc0>)
 800b9de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e2:	f7f5 f8a3 	bl	8000b2c <__aeabi_dcmplt>
 800b9e6:	e7b3      	b.n	800b950 <_strtod_l+0xae0>
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	930a      	str	r3, [sp, #40]	; 0x28
 800b9ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b9ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9f0:	6013      	str	r3, [r2, #0]
 800b9f2:	f7ff ba7c 	b.w	800aeee <_strtod_l+0x7e>
 800b9f6:	2a65      	cmp	r2, #101	; 0x65
 800b9f8:	f43f ab75 	beq.w	800b0e6 <_strtod_l+0x276>
 800b9fc:	2a45      	cmp	r2, #69	; 0x45
 800b9fe:	f43f ab72 	beq.w	800b0e6 <_strtod_l+0x276>
 800ba02:	2301      	movs	r3, #1
 800ba04:	f7ff bbaa 	b.w	800b15c <_strtod_l+0x2ec>
 800ba08:	00000000 	.word	0x00000000
 800ba0c:	bff00000 	.word	0xbff00000
 800ba10:	00000000 	.word	0x00000000
 800ba14:	3ff00000 	.word	0x3ff00000
 800ba18:	94a03595 	.word	0x94a03595
 800ba1c:	3fdfffff 	.word	0x3fdfffff
 800ba20:	35afe535 	.word	0x35afe535
 800ba24:	3fe00000 	.word	0x3fe00000
 800ba28:	ffc00000 	.word	0xffc00000
 800ba2c:	41dfffff 	.word	0x41dfffff
 800ba30:	94a03595 	.word	0x94a03595
 800ba34:	3fcfffff 	.word	0x3fcfffff
 800ba38:	3ff00000 	.word	0x3ff00000
 800ba3c:	3fe00000 	.word	0x3fe00000
 800ba40:	7ff00000 	.word	0x7ff00000
 800ba44:	7fe00000 	.word	0x7fe00000
 800ba48:	7c9fffff 	.word	0x7c9fffff
 800ba4c:	7fefffff 	.word	0x7fefffff

0800ba50 <_strtod_r>:
 800ba50:	4b01      	ldr	r3, [pc, #4]	; (800ba58 <_strtod_r+0x8>)
 800ba52:	f7ff ba0d 	b.w	800ae70 <_strtod_l>
 800ba56:	bf00      	nop
 800ba58:	20000064 	.word	0x20000064

0800ba5c <_strtol_l.constprop.0>:
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba62:	d001      	beq.n	800ba68 <_strtol_l.constprop.0+0xc>
 800ba64:	2b24      	cmp	r3, #36	; 0x24
 800ba66:	d906      	bls.n	800ba76 <_strtol_l.constprop.0+0x1a>
 800ba68:	f7fd fd7a 	bl	8009560 <__errno>
 800ba6c:	2316      	movs	r3, #22
 800ba6e:	6003      	str	r3, [r0, #0]
 800ba70:	2000      	movs	r0, #0
 800ba72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bb5c <_strtol_l.constprop.0+0x100>
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	462e      	mov	r6, r5
 800ba7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800ba86:	f017 0708 	ands.w	r7, r7, #8
 800ba8a:	d1f7      	bne.n	800ba7c <_strtol_l.constprop.0+0x20>
 800ba8c:	2c2d      	cmp	r4, #45	; 0x2d
 800ba8e:	d132      	bne.n	800baf6 <_strtol_l.constprop.0+0x9a>
 800ba90:	782c      	ldrb	r4, [r5, #0]
 800ba92:	2701      	movs	r7, #1
 800ba94:	1cb5      	adds	r5, r6, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d05b      	beq.n	800bb52 <_strtol_l.constprop.0+0xf6>
 800ba9a:	2b10      	cmp	r3, #16
 800ba9c:	d109      	bne.n	800bab2 <_strtol_l.constprop.0+0x56>
 800ba9e:	2c30      	cmp	r4, #48	; 0x30
 800baa0:	d107      	bne.n	800bab2 <_strtol_l.constprop.0+0x56>
 800baa2:	782c      	ldrb	r4, [r5, #0]
 800baa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800baa8:	2c58      	cmp	r4, #88	; 0x58
 800baaa:	d14d      	bne.n	800bb48 <_strtol_l.constprop.0+0xec>
 800baac:	786c      	ldrb	r4, [r5, #1]
 800baae:	2310      	movs	r3, #16
 800bab0:	3502      	adds	r5, #2
 800bab2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bab6:	f108 38ff 	add.w	r8, r8, #4294967295
 800baba:	f04f 0e00 	mov.w	lr, #0
 800babe:	fbb8 f9f3 	udiv	r9, r8, r3
 800bac2:	4676      	mov	r6, lr
 800bac4:	fb03 8a19 	mls	sl, r3, r9, r8
 800bac8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bacc:	f1bc 0f09 	cmp.w	ip, #9
 800bad0:	d816      	bhi.n	800bb00 <_strtol_l.constprop.0+0xa4>
 800bad2:	4664      	mov	r4, ip
 800bad4:	42a3      	cmp	r3, r4
 800bad6:	dd24      	ble.n	800bb22 <_strtol_l.constprop.0+0xc6>
 800bad8:	f1be 3fff 	cmp.w	lr, #4294967295
 800badc:	d008      	beq.n	800baf0 <_strtol_l.constprop.0+0x94>
 800bade:	45b1      	cmp	r9, r6
 800bae0:	d31c      	bcc.n	800bb1c <_strtol_l.constprop.0+0xc0>
 800bae2:	d101      	bne.n	800bae8 <_strtol_l.constprop.0+0x8c>
 800bae4:	45a2      	cmp	sl, r4
 800bae6:	db19      	blt.n	800bb1c <_strtol_l.constprop.0+0xc0>
 800bae8:	fb06 4603 	mla	r6, r6, r3, r4
 800baec:	f04f 0e01 	mov.w	lr, #1
 800baf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800baf4:	e7e8      	b.n	800bac8 <_strtol_l.constprop.0+0x6c>
 800baf6:	2c2b      	cmp	r4, #43	; 0x2b
 800baf8:	bf04      	itt	eq
 800bafa:	782c      	ldrbeq	r4, [r5, #0]
 800bafc:	1cb5      	addeq	r5, r6, #2
 800bafe:	e7ca      	b.n	800ba96 <_strtol_l.constprop.0+0x3a>
 800bb00:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bb04:	f1bc 0f19 	cmp.w	ip, #25
 800bb08:	d801      	bhi.n	800bb0e <_strtol_l.constprop.0+0xb2>
 800bb0a:	3c37      	subs	r4, #55	; 0x37
 800bb0c:	e7e2      	b.n	800bad4 <_strtol_l.constprop.0+0x78>
 800bb0e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bb12:	f1bc 0f19 	cmp.w	ip, #25
 800bb16:	d804      	bhi.n	800bb22 <_strtol_l.constprop.0+0xc6>
 800bb18:	3c57      	subs	r4, #87	; 0x57
 800bb1a:	e7db      	b.n	800bad4 <_strtol_l.constprop.0+0x78>
 800bb1c:	f04f 3eff 	mov.w	lr, #4294967295
 800bb20:	e7e6      	b.n	800baf0 <_strtol_l.constprop.0+0x94>
 800bb22:	f1be 3fff 	cmp.w	lr, #4294967295
 800bb26:	d105      	bne.n	800bb34 <_strtol_l.constprop.0+0xd8>
 800bb28:	2322      	movs	r3, #34	; 0x22
 800bb2a:	6003      	str	r3, [r0, #0]
 800bb2c:	4646      	mov	r6, r8
 800bb2e:	b942      	cbnz	r2, 800bb42 <_strtol_l.constprop.0+0xe6>
 800bb30:	4630      	mov	r0, r6
 800bb32:	e79e      	b.n	800ba72 <_strtol_l.constprop.0+0x16>
 800bb34:	b107      	cbz	r7, 800bb38 <_strtol_l.constprop.0+0xdc>
 800bb36:	4276      	negs	r6, r6
 800bb38:	2a00      	cmp	r2, #0
 800bb3a:	d0f9      	beq.n	800bb30 <_strtol_l.constprop.0+0xd4>
 800bb3c:	f1be 0f00 	cmp.w	lr, #0
 800bb40:	d000      	beq.n	800bb44 <_strtol_l.constprop.0+0xe8>
 800bb42:	1e69      	subs	r1, r5, #1
 800bb44:	6011      	str	r1, [r2, #0]
 800bb46:	e7f3      	b.n	800bb30 <_strtol_l.constprop.0+0xd4>
 800bb48:	2430      	movs	r4, #48	; 0x30
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d1b1      	bne.n	800bab2 <_strtol_l.constprop.0+0x56>
 800bb4e:	2308      	movs	r3, #8
 800bb50:	e7af      	b.n	800bab2 <_strtol_l.constprop.0+0x56>
 800bb52:	2c30      	cmp	r4, #48	; 0x30
 800bb54:	d0a5      	beq.n	800baa2 <_strtol_l.constprop.0+0x46>
 800bb56:	230a      	movs	r3, #10
 800bb58:	e7ab      	b.n	800bab2 <_strtol_l.constprop.0+0x56>
 800bb5a:	bf00      	nop
 800bb5c:	0800d8f1 	.word	0x0800d8f1

0800bb60 <_strtol_r>:
 800bb60:	f7ff bf7c 	b.w	800ba5c <_strtol_l.constprop.0>

0800bb64 <__ssputs_r>:
 800bb64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb68:	688e      	ldr	r6, [r1, #8]
 800bb6a:	461f      	mov	r7, r3
 800bb6c:	42be      	cmp	r6, r7
 800bb6e:	680b      	ldr	r3, [r1, #0]
 800bb70:	4682      	mov	sl, r0
 800bb72:	460c      	mov	r4, r1
 800bb74:	4690      	mov	r8, r2
 800bb76:	d82c      	bhi.n	800bbd2 <__ssputs_r+0x6e>
 800bb78:	898a      	ldrh	r2, [r1, #12]
 800bb7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bb7e:	d026      	beq.n	800bbce <__ssputs_r+0x6a>
 800bb80:	6965      	ldr	r5, [r4, #20]
 800bb82:	6909      	ldr	r1, [r1, #16]
 800bb84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb88:	eba3 0901 	sub.w	r9, r3, r1
 800bb8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb90:	1c7b      	adds	r3, r7, #1
 800bb92:	444b      	add	r3, r9
 800bb94:	106d      	asrs	r5, r5, #1
 800bb96:	429d      	cmp	r5, r3
 800bb98:	bf38      	it	cc
 800bb9a:	461d      	movcc	r5, r3
 800bb9c:	0553      	lsls	r3, r2, #21
 800bb9e:	d527      	bpl.n	800bbf0 <__ssputs_r+0x8c>
 800bba0:	4629      	mov	r1, r5
 800bba2:	f7fe fc0f 	bl	800a3c4 <_malloc_r>
 800bba6:	4606      	mov	r6, r0
 800bba8:	b360      	cbz	r0, 800bc04 <__ssputs_r+0xa0>
 800bbaa:	6921      	ldr	r1, [r4, #16]
 800bbac:	464a      	mov	r2, r9
 800bbae:	f7fd fd04 	bl	80095ba <memcpy>
 800bbb2:	89a3      	ldrh	r3, [r4, #12]
 800bbb4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bbb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbbc:	81a3      	strh	r3, [r4, #12]
 800bbbe:	6126      	str	r6, [r4, #16]
 800bbc0:	6165      	str	r5, [r4, #20]
 800bbc2:	444e      	add	r6, r9
 800bbc4:	eba5 0509 	sub.w	r5, r5, r9
 800bbc8:	6026      	str	r6, [r4, #0]
 800bbca:	60a5      	str	r5, [r4, #8]
 800bbcc:	463e      	mov	r6, r7
 800bbce:	42be      	cmp	r6, r7
 800bbd0:	d900      	bls.n	800bbd4 <__ssputs_r+0x70>
 800bbd2:	463e      	mov	r6, r7
 800bbd4:	6820      	ldr	r0, [r4, #0]
 800bbd6:	4632      	mov	r2, r6
 800bbd8:	4641      	mov	r1, r8
 800bbda:	f000 fd5c 	bl	800c696 <memmove>
 800bbde:	68a3      	ldr	r3, [r4, #8]
 800bbe0:	1b9b      	subs	r3, r3, r6
 800bbe2:	60a3      	str	r3, [r4, #8]
 800bbe4:	6823      	ldr	r3, [r4, #0]
 800bbe6:	4433      	add	r3, r6
 800bbe8:	6023      	str	r3, [r4, #0]
 800bbea:	2000      	movs	r0, #0
 800bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf0:	462a      	mov	r2, r5
 800bbf2:	f001 f932 	bl	800ce5a <_realloc_r>
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	d1e0      	bne.n	800bbbe <__ssputs_r+0x5a>
 800bbfc:	6921      	ldr	r1, [r4, #16]
 800bbfe:	4650      	mov	r0, sl
 800bc00:	f7fe fb6c 	bl	800a2dc <_free_r>
 800bc04:	230c      	movs	r3, #12
 800bc06:	f8ca 3000 	str.w	r3, [sl]
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc10:	81a3      	strh	r3, [r4, #12]
 800bc12:	f04f 30ff 	mov.w	r0, #4294967295
 800bc16:	e7e9      	b.n	800bbec <__ssputs_r+0x88>

0800bc18 <_svfiprintf_r>:
 800bc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc1c:	4698      	mov	r8, r3
 800bc1e:	898b      	ldrh	r3, [r1, #12]
 800bc20:	061b      	lsls	r3, r3, #24
 800bc22:	b09d      	sub	sp, #116	; 0x74
 800bc24:	4607      	mov	r7, r0
 800bc26:	460d      	mov	r5, r1
 800bc28:	4614      	mov	r4, r2
 800bc2a:	d50e      	bpl.n	800bc4a <_svfiprintf_r+0x32>
 800bc2c:	690b      	ldr	r3, [r1, #16]
 800bc2e:	b963      	cbnz	r3, 800bc4a <_svfiprintf_r+0x32>
 800bc30:	2140      	movs	r1, #64	; 0x40
 800bc32:	f7fe fbc7 	bl	800a3c4 <_malloc_r>
 800bc36:	6028      	str	r0, [r5, #0]
 800bc38:	6128      	str	r0, [r5, #16]
 800bc3a:	b920      	cbnz	r0, 800bc46 <_svfiprintf_r+0x2e>
 800bc3c:	230c      	movs	r3, #12
 800bc3e:	603b      	str	r3, [r7, #0]
 800bc40:	f04f 30ff 	mov.w	r0, #4294967295
 800bc44:	e0d0      	b.n	800bde8 <_svfiprintf_r+0x1d0>
 800bc46:	2340      	movs	r3, #64	; 0x40
 800bc48:	616b      	str	r3, [r5, #20]
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	9309      	str	r3, [sp, #36]	; 0x24
 800bc4e:	2320      	movs	r3, #32
 800bc50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc54:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc58:	2330      	movs	r3, #48	; 0x30
 800bc5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800be00 <_svfiprintf_r+0x1e8>
 800bc5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc62:	f04f 0901 	mov.w	r9, #1
 800bc66:	4623      	mov	r3, r4
 800bc68:	469a      	mov	sl, r3
 800bc6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc6e:	b10a      	cbz	r2, 800bc74 <_svfiprintf_r+0x5c>
 800bc70:	2a25      	cmp	r2, #37	; 0x25
 800bc72:	d1f9      	bne.n	800bc68 <_svfiprintf_r+0x50>
 800bc74:	ebba 0b04 	subs.w	fp, sl, r4
 800bc78:	d00b      	beq.n	800bc92 <_svfiprintf_r+0x7a>
 800bc7a:	465b      	mov	r3, fp
 800bc7c:	4622      	mov	r2, r4
 800bc7e:	4629      	mov	r1, r5
 800bc80:	4638      	mov	r0, r7
 800bc82:	f7ff ff6f 	bl	800bb64 <__ssputs_r>
 800bc86:	3001      	adds	r0, #1
 800bc88:	f000 80a9 	beq.w	800bdde <_svfiprintf_r+0x1c6>
 800bc8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc8e:	445a      	add	r2, fp
 800bc90:	9209      	str	r2, [sp, #36]	; 0x24
 800bc92:	f89a 3000 	ldrb.w	r3, [sl]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	f000 80a1 	beq.w	800bdde <_svfiprintf_r+0x1c6>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bca2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bca6:	f10a 0a01 	add.w	sl, sl, #1
 800bcaa:	9304      	str	r3, [sp, #16]
 800bcac:	9307      	str	r3, [sp, #28]
 800bcae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcb2:	931a      	str	r3, [sp, #104]	; 0x68
 800bcb4:	4654      	mov	r4, sl
 800bcb6:	2205      	movs	r2, #5
 800bcb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcbc:	4850      	ldr	r0, [pc, #320]	; (800be00 <_svfiprintf_r+0x1e8>)
 800bcbe:	f7f4 faaf 	bl	8000220 <memchr>
 800bcc2:	9a04      	ldr	r2, [sp, #16]
 800bcc4:	b9d8      	cbnz	r0, 800bcfe <_svfiprintf_r+0xe6>
 800bcc6:	06d0      	lsls	r0, r2, #27
 800bcc8:	bf44      	itt	mi
 800bcca:	2320      	movmi	r3, #32
 800bccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcd0:	0711      	lsls	r1, r2, #28
 800bcd2:	bf44      	itt	mi
 800bcd4:	232b      	movmi	r3, #43	; 0x2b
 800bcd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bcda:	f89a 3000 	ldrb.w	r3, [sl]
 800bcde:	2b2a      	cmp	r3, #42	; 0x2a
 800bce0:	d015      	beq.n	800bd0e <_svfiprintf_r+0xf6>
 800bce2:	9a07      	ldr	r2, [sp, #28]
 800bce4:	4654      	mov	r4, sl
 800bce6:	2000      	movs	r0, #0
 800bce8:	f04f 0c0a 	mov.w	ip, #10
 800bcec:	4621      	mov	r1, r4
 800bcee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcf2:	3b30      	subs	r3, #48	; 0x30
 800bcf4:	2b09      	cmp	r3, #9
 800bcf6:	d94d      	bls.n	800bd94 <_svfiprintf_r+0x17c>
 800bcf8:	b1b0      	cbz	r0, 800bd28 <_svfiprintf_r+0x110>
 800bcfa:	9207      	str	r2, [sp, #28]
 800bcfc:	e014      	b.n	800bd28 <_svfiprintf_r+0x110>
 800bcfe:	eba0 0308 	sub.w	r3, r0, r8
 800bd02:	fa09 f303 	lsl.w	r3, r9, r3
 800bd06:	4313      	orrs	r3, r2
 800bd08:	9304      	str	r3, [sp, #16]
 800bd0a:	46a2      	mov	sl, r4
 800bd0c:	e7d2      	b.n	800bcb4 <_svfiprintf_r+0x9c>
 800bd0e:	9b03      	ldr	r3, [sp, #12]
 800bd10:	1d19      	adds	r1, r3, #4
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	9103      	str	r1, [sp, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	bfbb      	ittet	lt
 800bd1a:	425b      	neglt	r3, r3
 800bd1c:	f042 0202 	orrlt.w	r2, r2, #2
 800bd20:	9307      	strge	r3, [sp, #28]
 800bd22:	9307      	strlt	r3, [sp, #28]
 800bd24:	bfb8      	it	lt
 800bd26:	9204      	strlt	r2, [sp, #16]
 800bd28:	7823      	ldrb	r3, [r4, #0]
 800bd2a:	2b2e      	cmp	r3, #46	; 0x2e
 800bd2c:	d10c      	bne.n	800bd48 <_svfiprintf_r+0x130>
 800bd2e:	7863      	ldrb	r3, [r4, #1]
 800bd30:	2b2a      	cmp	r3, #42	; 0x2a
 800bd32:	d134      	bne.n	800bd9e <_svfiprintf_r+0x186>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	1d1a      	adds	r2, r3, #4
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	9203      	str	r2, [sp, #12]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	bfb8      	it	lt
 800bd40:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd44:	3402      	adds	r4, #2
 800bd46:	9305      	str	r3, [sp, #20]
 800bd48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800be10 <_svfiprintf_r+0x1f8>
 800bd4c:	7821      	ldrb	r1, [r4, #0]
 800bd4e:	2203      	movs	r2, #3
 800bd50:	4650      	mov	r0, sl
 800bd52:	f7f4 fa65 	bl	8000220 <memchr>
 800bd56:	b138      	cbz	r0, 800bd68 <_svfiprintf_r+0x150>
 800bd58:	9b04      	ldr	r3, [sp, #16]
 800bd5a:	eba0 000a 	sub.w	r0, r0, sl
 800bd5e:	2240      	movs	r2, #64	; 0x40
 800bd60:	4082      	lsls	r2, r0
 800bd62:	4313      	orrs	r3, r2
 800bd64:	3401      	adds	r4, #1
 800bd66:	9304      	str	r3, [sp, #16]
 800bd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd6c:	4825      	ldr	r0, [pc, #148]	; (800be04 <_svfiprintf_r+0x1ec>)
 800bd6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd72:	2206      	movs	r2, #6
 800bd74:	f7f4 fa54 	bl	8000220 <memchr>
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d038      	beq.n	800bdee <_svfiprintf_r+0x1d6>
 800bd7c:	4b22      	ldr	r3, [pc, #136]	; (800be08 <_svfiprintf_r+0x1f0>)
 800bd7e:	bb1b      	cbnz	r3, 800bdc8 <_svfiprintf_r+0x1b0>
 800bd80:	9b03      	ldr	r3, [sp, #12]
 800bd82:	3307      	adds	r3, #7
 800bd84:	f023 0307 	bic.w	r3, r3, #7
 800bd88:	3308      	adds	r3, #8
 800bd8a:	9303      	str	r3, [sp, #12]
 800bd8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd8e:	4433      	add	r3, r6
 800bd90:	9309      	str	r3, [sp, #36]	; 0x24
 800bd92:	e768      	b.n	800bc66 <_svfiprintf_r+0x4e>
 800bd94:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd98:	460c      	mov	r4, r1
 800bd9a:	2001      	movs	r0, #1
 800bd9c:	e7a6      	b.n	800bcec <_svfiprintf_r+0xd4>
 800bd9e:	2300      	movs	r3, #0
 800bda0:	3401      	adds	r4, #1
 800bda2:	9305      	str	r3, [sp, #20]
 800bda4:	4619      	mov	r1, r3
 800bda6:	f04f 0c0a 	mov.w	ip, #10
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdb0:	3a30      	subs	r2, #48	; 0x30
 800bdb2:	2a09      	cmp	r2, #9
 800bdb4:	d903      	bls.n	800bdbe <_svfiprintf_r+0x1a6>
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d0c6      	beq.n	800bd48 <_svfiprintf_r+0x130>
 800bdba:	9105      	str	r1, [sp, #20]
 800bdbc:	e7c4      	b.n	800bd48 <_svfiprintf_r+0x130>
 800bdbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e7f0      	b.n	800bdaa <_svfiprintf_r+0x192>
 800bdc8:	ab03      	add	r3, sp, #12
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	462a      	mov	r2, r5
 800bdce:	4b0f      	ldr	r3, [pc, #60]	; (800be0c <_svfiprintf_r+0x1f4>)
 800bdd0:	a904      	add	r1, sp, #16
 800bdd2:	4638      	mov	r0, r7
 800bdd4:	f7fc fc3a 	bl	800864c <_printf_float>
 800bdd8:	1c42      	adds	r2, r0, #1
 800bdda:	4606      	mov	r6, r0
 800bddc:	d1d6      	bne.n	800bd8c <_svfiprintf_r+0x174>
 800bdde:	89ab      	ldrh	r3, [r5, #12]
 800bde0:	065b      	lsls	r3, r3, #25
 800bde2:	f53f af2d 	bmi.w	800bc40 <_svfiprintf_r+0x28>
 800bde6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bde8:	b01d      	add	sp, #116	; 0x74
 800bdea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdee:	ab03      	add	r3, sp, #12
 800bdf0:	9300      	str	r3, [sp, #0]
 800bdf2:	462a      	mov	r2, r5
 800bdf4:	4b05      	ldr	r3, [pc, #20]	; (800be0c <_svfiprintf_r+0x1f4>)
 800bdf6:	a904      	add	r1, sp, #16
 800bdf8:	4638      	mov	r0, r7
 800bdfa:	f7fc fecb 	bl	8008b94 <_printf_i>
 800bdfe:	e7eb      	b.n	800bdd8 <_svfiprintf_r+0x1c0>
 800be00:	0800d9f1 	.word	0x0800d9f1
 800be04:	0800d9fb 	.word	0x0800d9fb
 800be08:	0800864d 	.word	0x0800864d
 800be0c:	0800bb65 	.word	0x0800bb65
 800be10:	0800d9f7 	.word	0x0800d9f7

0800be14 <_sungetc_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	1c4b      	adds	r3, r1, #1
 800be18:	4614      	mov	r4, r2
 800be1a:	d103      	bne.n	800be24 <_sungetc_r+0x10>
 800be1c:	f04f 35ff 	mov.w	r5, #4294967295
 800be20:	4628      	mov	r0, r5
 800be22:	bd38      	pop	{r3, r4, r5, pc}
 800be24:	8993      	ldrh	r3, [r2, #12]
 800be26:	f023 0320 	bic.w	r3, r3, #32
 800be2a:	8193      	strh	r3, [r2, #12]
 800be2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800be2e:	6852      	ldr	r2, [r2, #4]
 800be30:	b2cd      	uxtb	r5, r1
 800be32:	b18b      	cbz	r3, 800be58 <_sungetc_r+0x44>
 800be34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800be36:	4293      	cmp	r3, r2
 800be38:	dd08      	ble.n	800be4c <_sungetc_r+0x38>
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	1e5a      	subs	r2, r3, #1
 800be3e:	6022      	str	r2, [r4, #0]
 800be40:	f803 5c01 	strb.w	r5, [r3, #-1]
 800be44:	6863      	ldr	r3, [r4, #4]
 800be46:	3301      	adds	r3, #1
 800be48:	6063      	str	r3, [r4, #4]
 800be4a:	e7e9      	b.n	800be20 <_sungetc_r+0xc>
 800be4c:	4621      	mov	r1, r4
 800be4e:	f000 fbe8 	bl	800c622 <__submore>
 800be52:	2800      	cmp	r0, #0
 800be54:	d0f1      	beq.n	800be3a <_sungetc_r+0x26>
 800be56:	e7e1      	b.n	800be1c <_sungetc_r+0x8>
 800be58:	6921      	ldr	r1, [r4, #16]
 800be5a:	6823      	ldr	r3, [r4, #0]
 800be5c:	b151      	cbz	r1, 800be74 <_sungetc_r+0x60>
 800be5e:	4299      	cmp	r1, r3
 800be60:	d208      	bcs.n	800be74 <_sungetc_r+0x60>
 800be62:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800be66:	42a9      	cmp	r1, r5
 800be68:	d104      	bne.n	800be74 <_sungetc_r+0x60>
 800be6a:	3b01      	subs	r3, #1
 800be6c:	3201      	adds	r2, #1
 800be6e:	6023      	str	r3, [r4, #0]
 800be70:	6062      	str	r2, [r4, #4]
 800be72:	e7d5      	b.n	800be20 <_sungetc_r+0xc>
 800be74:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800be78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be7c:	6363      	str	r3, [r4, #52]	; 0x34
 800be7e:	2303      	movs	r3, #3
 800be80:	63a3      	str	r3, [r4, #56]	; 0x38
 800be82:	4623      	mov	r3, r4
 800be84:	f803 5f46 	strb.w	r5, [r3, #70]!
 800be88:	6023      	str	r3, [r4, #0]
 800be8a:	2301      	movs	r3, #1
 800be8c:	e7dc      	b.n	800be48 <_sungetc_r+0x34>

0800be8e <__ssrefill_r>:
 800be8e:	b510      	push	{r4, lr}
 800be90:	460c      	mov	r4, r1
 800be92:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800be94:	b169      	cbz	r1, 800beb2 <__ssrefill_r+0x24>
 800be96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be9a:	4299      	cmp	r1, r3
 800be9c:	d001      	beq.n	800bea2 <__ssrefill_r+0x14>
 800be9e:	f7fe fa1d 	bl	800a2dc <_free_r>
 800bea2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bea4:	6063      	str	r3, [r4, #4]
 800bea6:	2000      	movs	r0, #0
 800bea8:	6360      	str	r0, [r4, #52]	; 0x34
 800beaa:	b113      	cbz	r3, 800beb2 <__ssrefill_r+0x24>
 800beac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800beae:	6023      	str	r3, [r4, #0]
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	6923      	ldr	r3, [r4, #16]
 800beb4:	6023      	str	r3, [r4, #0]
 800beb6:	2300      	movs	r3, #0
 800beb8:	6063      	str	r3, [r4, #4]
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f043 0320 	orr.w	r3, r3, #32
 800bec0:	81a3      	strh	r3, [r4, #12]
 800bec2:	f04f 30ff 	mov.w	r0, #4294967295
 800bec6:	e7f3      	b.n	800beb0 <__ssrefill_r+0x22>

0800bec8 <__ssvfiscanf_r>:
 800bec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800becc:	460c      	mov	r4, r1
 800bece:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800bed2:	2100      	movs	r1, #0
 800bed4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bed8:	49a6      	ldr	r1, [pc, #664]	; (800c174 <__ssvfiscanf_r+0x2ac>)
 800beda:	91a0      	str	r1, [sp, #640]	; 0x280
 800bedc:	f10d 0804 	add.w	r8, sp, #4
 800bee0:	49a5      	ldr	r1, [pc, #660]	; (800c178 <__ssvfiscanf_r+0x2b0>)
 800bee2:	4fa6      	ldr	r7, [pc, #664]	; (800c17c <__ssvfiscanf_r+0x2b4>)
 800bee4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800c180 <__ssvfiscanf_r+0x2b8>
 800bee8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800beec:	4606      	mov	r6, r0
 800beee:	91a1      	str	r1, [sp, #644]	; 0x284
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	7813      	ldrb	r3, [r2, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	f000 815a 	beq.w	800c1ae <__ssvfiscanf_r+0x2e6>
 800befa:	5cf9      	ldrb	r1, [r7, r3]
 800befc:	f011 0108 	ands.w	r1, r1, #8
 800bf00:	f102 0501 	add.w	r5, r2, #1
 800bf04:	d019      	beq.n	800bf3a <__ssvfiscanf_r+0x72>
 800bf06:	6863      	ldr	r3, [r4, #4]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	dd0f      	ble.n	800bf2c <__ssvfiscanf_r+0x64>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	781a      	ldrb	r2, [r3, #0]
 800bf10:	5cba      	ldrb	r2, [r7, r2]
 800bf12:	0712      	lsls	r2, r2, #28
 800bf14:	d401      	bmi.n	800bf1a <__ssvfiscanf_r+0x52>
 800bf16:	462a      	mov	r2, r5
 800bf18:	e7eb      	b.n	800bef2 <__ssvfiscanf_r+0x2a>
 800bf1a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bf1c:	3201      	adds	r2, #1
 800bf1e:	9245      	str	r2, [sp, #276]	; 0x114
 800bf20:	6862      	ldr	r2, [r4, #4]
 800bf22:	3301      	adds	r3, #1
 800bf24:	3a01      	subs	r2, #1
 800bf26:	6062      	str	r2, [r4, #4]
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	e7ec      	b.n	800bf06 <__ssvfiscanf_r+0x3e>
 800bf2c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf2e:	4621      	mov	r1, r4
 800bf30:	4630      	mov	r0, r6
 800bf32:	4798      	blx	r3
 800bf34:	2800      	cmp	r0, #0
 800bf36:	d0e9      	beq.n	800bf0c <__ssvfiscanf_r+0x44>
 800bf38:	e7ed      	b.n	800bf16 <__ssvfiscanf_r+0x4e>
 800bf3a:	2b25      	cmp	r3, #37	; 0x25
 800bf3c:	d012      	beq.n	800bf64 <__ssvfiscanf_r+0x9c>
 800bf3e:	469a      	mov	sl, r3
 800bf40:	6863      	ldr	r3, [r4, #4]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f340 8091 	ble.w	800c06a <__ssvfiscanf_r+0x1a2>
 800bf48:	6822      	ldr	r2, [r4, #0]
 800bf4a:	7813      	ldrb	r3, [r2, #0]
 800bf4c:	4553      	cmp	r3, sl
 800bf4e:	f040 812e 	bne.w	800c1ae <__ssvfiscanf_r+0x2e6>
 800bf52:	6863      	ldr	r3, [r4, #4]
 800bf54:	3b01      	subs	r3, #1
 800bf56:	6063      	str	r3, [r4, #4]
 800bf58:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bf5a:	3201      	adds	r2, #1
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	6022      	str	r2, [r4, #0]
 800bf60:	9345      	str	r3, [sp, #276]	; 0x114
 800bf62:	e7d8      	b.n	800bf16 <__ssvfiscanf_r+0x4e>
 800bf64:	9141      	str	r1, [sp, #260]	; 0x104
 800bf66:	9143      	str	r1, [sp, #268]	; 0x10c
 800bf68:	7853      	ldrb	r3, [r2, #1]
 800bf6a:	2b2a      	cmp	r3, #42	; 0x2a
 800bf6c:	bf02      	ittt	eq
 800bf6e:	2310      	moveq	r3, #16
 800bf70:	1c95      	addeq	r5, r2, #2
 800bf72:	9341      	streq	r3, [sp, #260]	; 0x104
 800bf74:	220a      	movs	r2, #10
 800bf76:	46aa      	mov	sl, r5
 800bf78:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800bf7c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bf80:	2b09      	cmp	r3, #9
 800bf82:	d91c      	bls.n	800bfbe <__ssvfiscanf_r+0xf6>
 800bf84:	487e      	ldr	r0, [pc, #504]	; (800c180 <__ssvfiscanf_r+0x2b8>)
 800bf86:	2203      	movs	r2, #3
 800bf88:	f7f4 f94a 	bl	8000220 <memchr>
 800bf8c:	b138      	cbz	r0, 800bf9e <__ssvfiscanf_r+0xd6>
 800bf8e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bf90:	eba0 0009 	sub.w	r0, r0, r9
 800bf94:	2301      	movs	r3, #1
 800bf96:	4083      	lsls	r3, r0
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	9341      	str	r3, [sp, #260]	; 0x104
 800bf9c:	4655      	mov	r5, sl
 800bf9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bfa2:	2b78      	cmp	r3, #120	; 0x78
 800bfa4:	d806      	bhi.n	800bfb4 <__ssvfiscanf_r+0xec>
 800bfa6:	2b57      	cmp	r3, #87	; 0x57
 800bfa8:	d810      	bhi.n	800bfcc <__ssvfiscanf_r+0x104>
 800bfaa:	2b25      	cmp	r3, #37	; 0x25
 800bfac:	d0c7      	beq.n	800bf3e <__ssvfiscanf_r+0x76>
 800bfae:	d857      	bhi.n	800c060 <__ssvfiscanf_r+0x198>
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d065      	beq.n	800c080 <__ssvfiscanf_r+0x1b8>
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	9347      	str	r3, [sp, #284]	; 0x11c
 800bfb8:	230a      	movs	r3, #10
 800bfba:	9342      	str	r3, [sp, #264]	; 0x108
 800bfbc:	e076      	b.n	800c0ac <__ssvfiscanf_r+0x1e4>
 800bfbe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bfc0:	fb02 1103 	mla	r1, r2, r3, r1
 800bfc4:	3930      	subs	r1, #48	; 0x30
 800bfc6:	9143      	str	r1, [sp, #268]	; 0x10c
 800bfc8:	4655      	mov	r5, sl
 800bfca:	e7d4      	b.n	800bf76 <__ssvfiscanf_r+0xae>
 800bfcc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bfd0:	2a20      	cmp	r2, #32
 800bfd2:	d8ef      	bhi.n	800bfb4 <__ssvfiscanf_r+0xec>
 800bfd4:	a101      	add	r1, pc, #4	; (adr r1, 800bfdc <__ssvfiscanf_r+0x114>)
 800bfd6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bfda:	bf00      	nop
 800bfdc:	0800c08f 	.word	0x0800c08f
 800bfe0:	0800bfb5 	.word	0x0800bfb5
 800bfe4:	0800bfb5 	.word	0x0800bfb5
 800bfe8:	0800c0ed 	.word	0x0800c0ed
 800bfec:	0800bfb5 	.word	0x0800bfb5
 800bff0:	0800bfb5 	.word	0x0800bfb5
 800bff4:	0800bfb5 	.word	0x0800bfb5
 800bff8:	0800bfb5 	.word	0x0800bfb5
 800bffc:	0800bfb5 	.word	0x0800bfb5
 800c000:	0800bfb5 	.word	0x0800bfb5
 800c004:	0800bfb5 	.word	0x0800bfb5
 800c008:	0800c103 	.word	0x0800c103
 800c00c:	0800c0e9 	.word	0x0800c0e9
 800c010:	0800c067 	.word	0x0800c067
 800c014:	0800c067 	.word	0x0800c067
 800c018:	0800c067 	.word	0x0800c067
 800c01c:	0800bfb5 	.word	0x0800bfb5
 800c020:	0800c0a5 	.word	0x0800c0a5
 800c024:	0800bfb5 	.word	0x0800bfb5
 800c028:	0800bfb5 	.word	0x0800bfb5
 800c02c:	0800bfb5 	.word	0x0800bfb5
 800c030:	0800bfb5 	.word	0x0800bfb5
 800c034:	0800c113 	.word	0x0800c113
 800c038:	0800c0e1 	.word	0x0800c0e1
 800c03c:	0800c087 	.word	0x0800c087
 800c040:	0800bfb5 	.word	0x0800bfb5
 800c044:	0800bfb5 	.word	0x0800bfb5
 800c048:	0800c10f 	.word	0x0800c10f
 800c04c:	0800bfb5 	.word	0x0800bfb5
 800c050:	0800c0e9 	.word	0x0800c0e9
 800c054:	0800bfb5 	.word	0x0800bfb5
 800c058:	0800bfb5 	.word	0x0800bfb5
 800c05c:	0800c08f 	.word	0x0800c08f
 800c060:	3b45      	subs	r3, #69	; 0x45
 800c062:	2b02      	cmp	r3, #2
 800c064:	d8a6      	bhi.n	800bfb4 <__ssvfiscanf_r+0xec>
 800c066:	2305      	movs	r3, #5
 800c068:	e01f      	b.n	800c0aa <__ssvfiscanf_r+0x1e2>
 800c06a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c06c:	4621      	mov	r1, r4
 800c06e:	4630      	mov	r0, r6
 800c070:	4798      	blx	r3
 800c072:	2800      	cmp	r0, #0
 800c074:	f43f af68 	beq.w	800bf48 <__ssvfiscanf_r+0x80>
 800c078:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c07a:	2800      	cmp	r0, #0
 800c07c:	f040 808d 	bne.w	800c19a <__ssvfiscanf_r+0x2d2>
 800c080:	f04f 30ff 	mov.w	r0, #4294967295
 800c084:	e08f      	b.n	800c1a6 <__ssvfiscanf_r+0x2de>
 800c086:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c088:	f042 0220 	orr.w	r2, r2, #32
 800c08c:	9241      	str	r2, [sp, #260]	; 0x104
 800c08e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800c090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c094:	9241      	str	r2, [sp, #260]	; 0x104
 800c096:	2210      	movs	r2, #16
 800c098:	2b6f      	cmp	r3, #111	; 0x6f
 800c09a:	9242      	str	r2, [sp, #264]	; 0x108
 800c09c:	bf34      	ite	cc
 800c09e:	2303      	movcc	r3, #3
 800c0a0:	2304      	movcs	r3, #4
 800c0a2:	e002      	b.n	800c0aa <__ssvfiscanf_r+0x1e2>
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	9342      	str	r3, [sp, #264]	; 0x108
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	9347      	str	r3, [sp, #284]	; 0x11c
 800c0ac:	6863      	ldr	r3, [r4, #4]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	dd3d      	ble.n	800c12e <__ssvfiscanf_r+0x266>
 800c0b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c0b4:	0659      	lsls	r1, r3, #25
 800c0b6:	d404      	bmi.n	800c0c2 <__ssvfiscanf_r+0x1fa>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	781a      	ldrb	r2, [r3, #0]
 800c0bc:	5cba      	ldrb	r2, [r7, r2]
 800c0be:	0712      	lsls	r2, r2, #28
 800c0c0:	d43c      	bmi.n	800c13c <__ssvfiscanf_r+0x274>
 800c0c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	dc4b      	bgt.n	800c160 <__ssvfiscanf_r+0x298>
 800c0c8:	466b      	mov	r3, sp
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	a941      	add	r1, sp, #260	; 0x104
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f000 f872 	bl	800c1b8 <_scanf_chars>
 800c0d4:	2801      	cmp	r0, #1
 800c0d6:	d06a      	beq.n	800c1ae <__ssvfiscanf_r+0x2e6>
 800c0d8:	2802      	cmp	r0, #2
 800c0da:	f47f af1c 	bne.w	800bf16 <__ssvfiscanf_r+0x4e>
 800c0de:	e7cb      	b.n	800c078 <__ssvfiscanf_r+0x1b0>
 800c0e0:	2308      	movs	r3, #8
 800c0e2:	9342      	str	r3, [sp, #264]	; 0x108
 800c0e4:	2304      	movs	r3, #4
 800c0e6:	e7e0      	b.n	800c0aa <__ssvfiscanf_r+0x1e2>
 800c0e8:	220a      	movs	r2, #10
 800c0ea:	e7d5      	b.n	800c098 <__ssvfiscanf_r+0x1d0>
 800c0ec:	4629      	mov	r1, r5
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	f000 fa5e 	bl	800c5b0 <__sccl>
 800c0f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0fa:	9341      	str	r3, [sp, #260]	; 0x104
 800c0fc:	4605      	mov	r5, r0
 800c0fe:	2301      	movs	r3, #1
 800c100:	e7d3      	b.n	800c0aa <__ssvfiscanf_r+0x1e2>
 800c102:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800c104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c108:	9341      	str	r3, [sp, #260]	; 0x104
 800c10a:	2300      	movs	r3, #0
 800c10c:	e7cd      	b.n	800c0aa <__ssvfiscanf_r+0x1e2>
 800c10e:	2302      	movs	r3, #2
 800c110:	e7cb      	b.n	800c0aa <__ssvfiscanf_r+0x1e2>
 800c112:	9841      	ldr	r0, [sp, #260]	; 0x104
 800c114:	06c3      	lsls	r3, r0, #27
 800c116:	f53f aefe 	bmi.w	800bf16 <__ssvfiscanf_r+0x4e>
 800c11a:	9b00      	ldr	r3, [sp, #0]
 800c11c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c11e:	1d19      	adds	r1, r3, #4
 800c120:	9100      	str	r1, [sp, #0]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	07c0      	lsls	r0, r0, #31
 800c126:	bf4c      	ite	mi
 800c128:	801a      	strhmi	r2, [r3, #0]
 800c12a:	601a      	strpl	r2, [r3, #0]
 800c12c:	e6f3      	b.n	800bf16 <__ssvfiscanf_r+0x4e>
 800c12e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c130:	4621      	mov	r1, r4
 800c132:	4630      	mov	r0, r6
 800c134:	4798      	blx	r3
 800c136:	2800      	cmp	r0, #0
 800c138:	d0bb      	beq.n	800c0b2 <__ssvfiscanf_r+0x1ea>
 800c13a:	e79d      	b.n	800c078 <__ssvfiscanf_r+0x1b0>
 800c13c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800c13e:	3201      	adds	r2, #1
 800c140:	9245      	str	r2, [sp, #276]	; 0x114
 800c142:	6862      	ldr	r2, [r4, #4]
 800c144:	3a01      	subs	r2, #1
 800c146:	2a00      	cmp	r2, #0
 800c148:	6062      	str	r2, [r4, #4]
 800c14a:	dd02      	ble.n	800c152 <__ssvfiscanf_r+0x28a>
 800c14c:	3301      	adds	r3, #1
 800c14e:	6023      	str	r3, [r4, #0]
 800c150:	e7b2      	b.n	800c0b8 <__ssvfiscanf_r+0x1f0>
 800c152:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800c154:	4621      	mov	r1, r4
 800c156:	4630      	mov	r0, r6
 800c158:	4798      	blx	r3
 800c15a:	2800      	cmp	r0, #0
 800c15c:	d0ac      	beq.n	800c0b8 <__ssvfiscanf_r+0x1f0>
 800c15e:	e78b      	b.n	800c078 <__ssvfiscanf_r+0x1b0>
 800c160:	2b04      	cmp	r3, #4
 800c162:	dc0f      	bgt.n	800c184 <__ssvfiscanf_r+0x2bc>
 800c164:	466b      	mov	r3, sp
 800c166:	4622      	mov	r2, r4
 800c168:	a941      	add	r1, sp, #260	; 0x104
 800c16a:	4630      	mov	r0, r6
 800c16c:	f000 f87e 	bl	800c26c <_scanf_i>
 800c170:	e7b0      	b.n	800c0d4 <__ssvfiscanf_r+0x20c>
 800c172:	bf00      	nop
 800c174:	0800be15 	.word	0x0800be15
 800c178:	0800be8f 	.word	0x0800be8f
 800c17c:	0800d8f1 	.word	0x0800d8f1
 800c180:	0800d9f7 	.word	0x0800d9f7
 800c184:	4b0b      	ldr	r3, [pc, #44]	; (800c1b4 <__ssvfiscanf_r+0x2ec>)
 800c186:	2b00      	cmp	r3, #0
 800c188:	f43f aec5 	beq.w	800bf16 <__ssvfiscanf_r+0x4e>
 800c18c:	466b      	mov	r3, sp
 800c18e:	4622      	mov	r2, r4
 800c190:	a941      	add	r1, sp, #260	; 0x104
 800c192:	4630      	mov	r0, r6
 800c194:	f7fc fe20 	bl	8008dd8 <_scanf_float>
 800c198:	e79c      	b.n	800c0d4 <__ssvfiscanf_r+0x20c>
 800c19a:	89a3      	ldrh	r3, [r4, #12]
 800c19c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c1a0:	bf18      	it	ne
 800c1a2:	f04f 30ff 	movne.w	r0, #4294967295
 800c1a6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c1aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ae:	9844      	ldr	r0, [sp, #272]	; 0x110
 800c1b0:	e7f9      	b.n	800c1a6 <__ssvfiscanf_r+0x2de>
 800c1b2:	bf00      	nop
 800c1b4:	08008dd9 	.word	0x08008dd9

0800c1b8 <_scanf_chars>:
 800c1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1bc:	4615      	mov	r5, r2
 800c1be:	688a      	ldr	r2, [r1, #8]
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	b932      	cbnz	r2, 800c1d4 <_scanf_chars+0x1c>
 800c1c6:	698a      	ldr	r2, [r1, #24]
 800c1c8:	2a00      	cmp	r2, #0
 800c1ca:	bf0c      	ite	eq
 800c1cc:	2201      	moveq	r2, #1
 800c1ce:	f04f 32ff 	movne.w	r2, #4294967295
 800c1d2:	608a      	str	r2, [r1, #8]
 800c1d4:	6822      	ldr	r2, [r4, #0]
 800c1d6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800c268 <_scanf_chars+0xb0>
 800c1da:	06d1      	lsls	r1, r2, #27
 800c1dc:	bf5f      	itttt	pl
 800c1de:	681a      	ldrpl	r2, [r3, #0]
 800c1e0:	1d11      	addpl	r1, r2, #4
 800c1e2:	6019      	strpl	r1, [r3, #0]
 800c1e4:	6816      	ldrpl	r6, [r2, #0]
 800c1e6:	2700      	movs	r7, #0
 800c1e8:	69a0      	ldr	r0, [r4, #24]
 800c1ea:	b188      	cbz	r0, 800c210 <_scanf_chars+0x58>
 800c1ec:	2801      	cmp	r0, #1
 800c1ee:	d107      	bne.n	800c200 <_scanf_chars+0x48>
 800c1f0:	682a      	ldr	r2, [r5, #0]
 800c1f2:	7811      	ldrb	r1, [r2, #0]
 800c1f4:	6962      	ldr	r2, [r4, #20]
 800c1f6:	5c52      	ldrb	r2, [r2, r1]
 800c1f8:	b952      	cbnz	r2, 800c210 <_scanf_chars+0x58>
 800c1fa:	2f00      	cmp	r7, #0
 800c1fc:	d031      	beq.n	800c262 <_scanf_chars+0xaa>
 800c1fe:	e022      	b.n	800c246 <_scanf_chars+0x8e>
 800c200:	2802      	cmp	r0, #2
 800c202:	d120      	bne.n	800c246 <_scanf_chars+0x8e>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c20c:	071b      	lsls	r3, r3, #28
 800c20e:	d41a      	bmi.n	800c246 <_scanf_chars+0x8e>
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	06da      	lsls	r2, r3, #27
 800c214:	bf5e      	ittt	pl
 800c216:	682b      	ldrpl	r3, [r5, #0]
 800c218:	781b      	ldrbpl	r3, [r3, #0]
 800c21a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c21e:	682a      	ldr	r2, [r5, #0]
 800c220:	686b      	ldr	r3, [r5, #4]
 800c222:	3201      	adds	r2, #1
 800c224:	602a      	str	r2, [r5, #0]
 800c226:	68a2      	ldr	r2, [r4, #8]
 800c228:	3b01      	subs	r3, #1
 800c22a:	3a01      	subs	r2, #1
 800c22c:	606b      	str	r3, [r5, #4]
 800c22e:	3701      	adds	r7, #1
 800c230:	60a2      	str	r2, [r4, #8]
 800c232:	b142      	cbz	r2, 800c246 <_scanf_chars+0x8e>
 800c234:	2b00      	cmp	r3, #0
 800c236:	dcd7      	bgt.n	800c1e8 <_scanf_chars+0x30>
 800c238:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c23c:	4629      	mov	r1, r5
 800c23e:	4640      	mov	r0, r8
 800c240:	4798      	blx	r3
 800c242:	2800      	cmp	r0, #0
 800c244:	d0d0      	beq.n	800c1e8 <_scanf_chars+0x30>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	f013 0310 	ands.w	r3, r3, #16
 800c24c:	d105      	bne.n	800c25a <_scanf_chars+0xa2>
 800c24e:	68e2      	ldr	r2, [r4, #12]
 800c250:	3201      	adds	r2, #1
 800c252:	60e2      	str	r2, [r4, #12]
 800c254:	69a2      	ldr	r2, [r4, #24]
 800c256:	b102      	cbz	r2, 800c25a <_scanf_chars+0xa2>
 800c258:	7033      	strb	r3, [r6, #0]
 800c25a:	6923      	ldr	r3, [r4, #16]
 800c25c:	443b      	add	r3, r7
 800c25e:	6123      	str	r3, [r4, #16]
 800c260:	2000      	movs	r0, #0
 800c262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c266:	bf00      	nop
 800c268:	0800d8f1 	.word	0x0800d8f1

0800c26c <_scanf_i>:
 800c26c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c270:	4698      	mov	r8, r3
 800c272:	4b74      	ldr	r3, [pc, #464]	; (800c444 <_scanf_i+0x1d8>)
 800c274:	460c      	mov	r4, r1
 800c276:	4682      	mov	sl, r0
 800c278:	4616      	mov	r6, r2
 800c27a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c27e:	b087      	sub	sp, #28
 800c280:	ab03      	add	r3, sp, #12
 800c282:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c286:	4b70      	ldr	r3, [pc, #448]	; (800c448 <_scanf_i+0x1dc>)
 800c288:	69a1      	ldr	r1, [r4, #24]
 800c28a:	4a70      	ldr	r2, [pc, #448]	; (800c44c <_scanf_i+0x1e0>)
 800c28c:	2903      	cmp	r1, #3
 800c28e:	bf18      	it	ne
 800c290:	461a      	movne	r2, r3
 800c292:	68a3      	ldr	r3, [r4, #8]
 800c294:	9201      	str	r2, [sp, #4]
 800c296:	1e5a      	subs	r2, r3, #1
 800c298:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c29c:	bf88      	it	hi
 800c29e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c2a2:	4627      	mov	r7, r4
 800c2a4:	bf82      	ittt	hi
 800c2a6:	eb03 0905 	addhi.w	r9, r3, r5
 800c2aa:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c2ae:	60a3      	strhi	r3, [r4, #8]
 800c2b0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c2b4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c2b8:	bf98      	it	ls
 800c2ba:	f04f 0900 	movls.w	r9, #0
 800c2be:	6023      	str	r3, [r4, #0]
 800c2c0:	463d      	mov	r5, r7
 800c2c2:	f04f 0b00 	mov.w	fp, #0
 800c2c6:	6831      	ldr	r1, [r6, #0]
 800c2c8:	ab03      	add	r3, sp, #12
 800c2ca:	7809      	ldrb	r1, [r1, #0]
 800c2cc:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c2d0:	2202      	movs	r2, #2
 800c2d2:	f7f3 ffa5 	bl	8000220 <memchr>
 800c2d6:	b328      	cbz	r0, 800c324 <_scanf_i+0xb8>
 800c2d8:	f1bb 0f01 	cmp.w	fp, #1
 800c2dc:	d159      	bne.n	800c392 <_scanf_i+0x126>
 800c2de:	6862      	ldr	r2, [r4, #4]
 800c2e0:	b92a      	cbnz	r2, 800c2ee <_scanf_i+0x82>
 800c2e2:	6822      	ldr	r2, [r4, #0]
 800c2e4:	2308      	movs	r3, #8
 800c2e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2ea:	6063      	str	r3, [r4, #4]
 800c2ec:	6022      	str	r2, [r4, #0]
 800c2ee:	6822      	ldr	r2, [r4, #0]
 800c2f0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c2f4:	6022      	str	r2, [r4, #0]
 800c2f6:	68a2      	ldr	r2, [r4, #8]
 800c2f8:	1e51      	subs	r1, r2, #1
 800c2fa:	60a1      	str	r1, [r4, #8]
 800c2fc:	b192      	cbz	r2, 800c324 <_scanf_i+0xb8>
 800c2fe:	6832      	ldr	r2, [r6, #0]
 800c300:	1c51      	adds	r1, r2, #1
 800c302:	6031      	str	r1, [r6, #0]
 800c304:	7812      	ldrb	r2, [r2, #0]
 800c306:	f805 2b01 	strb.w	r2, [r5], #1
 800c30a:	6872      	ldr	r2, [r6, #4]
 800c30c:	3a01      	subs	r2, #1
 800c30e:	2a00      	cmp	r2, #0
 800c310:	6072      	str	r2, [r6, #4]
 800c312:	dc07      	bgt.n	800c324 <_scanf_i+0xb8>
 800c314:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c318:	4631      	mov	r1, r6
 800c31a:	4650      	mov	r0, sl
 800c31c:	4790      	blx	r2
 800c31e:	2800      	cmp	r0, #0
 800c320:	f040 8085 	bne.w	800c42e <_scanf_i+0x1c2>
 800c324:	f10b 0b01 	add.w	fp, fp, #1
 800c328:	f1bb 0f03 	cmp.w	fp, #3
 800c32c:	d1cb      	bne.n	800c2c6 <_scanf_i+0x5a>
 800c32e:	6863      	ldr	r3, [r4, #4]
 800c330:	b90b      	cbnz	r3, 800c336 <_scanf_i+0xca>
 800c332:	230a      	movs	r3, #10
 800c334:	6063      	str	r3, [r4, #4]
 800c336:	6863      	ldr	r3, [r4, #4]
 800c338:	4945      	ldr	r1, [pc, #276]	; (800c450 <_scanf_i+0x1e4>)
 800c33a:	6960      	ldr	r0, [r4, #20]
 800c33c:	1ac9      	subs	r1, r1, r3
 800c33e:	f000 f937 	bl	800c5b0 <__sccl>
 800c342:	f04f 0b00 	mov.w	fp, #0
 800c346:	68a3      	ldr	r3, [r4, #8]
 800c348:	6822      	ldr	r2, [r4, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d03d      	beq.n	800c3ca <_scanf_i+0x15e>
 800c34e:	6831      	ldr	r1, [r6, #0]
 800c350:	6960      	ldr	r0, [r4, #20]
 800c352:	f891 c000 	ldrb.w	ip, [r1]
 800c356:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d035      	beq.n	800c3ca <_scanf_i+0x15e>
 800c35e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c362:	d124      	bne.n	800c3ae <_scanf_i+0x142>
 800c364:	0510      	lsls	r0, r2, #20
 800c366:	d522      	bpl.n	800c3ae <_scanf_i+0x142>
 800c368:	f10b 0b01 	add.w	fp, fp, #1
 800c36c:	f1b9 0f00 	cmp.w	r9, #0
 800c370:	d003      	beq.n	800c37a <_scanf_i+0x10e>
 800c372:	3301      	adds	r3, #1
 800c374:	f109 39ff 	add.w	r9, r9, #4294967295
 800c378:	60a3      	str	r3, [r4, #8]
 800c37a:	6873      	ldr	r3, [r6, #4]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	6073      	str	r3, [r6, #4]
 800c382:	dd1b      	ble.n	800c3bc <_scanf_i+0x150>
 800c384:	6833      	ldr	r3, [r6, #0]
 800c386:	3301      	adds	r3, #1
 800c388:	6033      	str	r3, [r6, #0]
 800c38a:	68a3      	ldr	r3, [r4, #8]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	60a3      	str	r3, [r4, #8]
 800c390:	e7d9      	b.n	800c346 <_scanf_i+0xda>
 800c392:	f1bb 0f02 	cmp.w	fp, #2
 800c396:	d1ae      	bne.n	800c2f6 <_scanf_i+0x8a>
 800c398:	6822      	ldr	r2, [r4, #0]
 800c39a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c39e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c3a2:	d1bf      	bne.n	800c324 <_scanf_i+0xb8>
 800c3a4:	2310      	movs	r3, #16
 800c3a6:	6063      	str	r3, [r4, #4]
 800c3a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3ac:	e7a2      	b.n	800c2f4 <_scanf_i+0x88>
 800c3ae:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c3b2:	6022      	str	r2, [r4, #0]
 800c3b4:	780b      	ldrb	r3, [r1, #0]
 800c3b6:	f805 3b01 	strb.w	r3, [r5], #1
 800c3ba:	e7de      	b.n	800c37a <_scanf_i+0x10e>
 800c3bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	4650      	mov	r0, sl
 800c3c4:	4798      	blx	r3
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	d0df      	beq.n	800c38a <_scanf_i+0x11e>
 800c3ca:	6823      	ldr	r3, [r4, #0]
 800c3cc:	05d9      	lsls	r1, r3, #23
 800c3ce:	d50d      	bpl.n	800c3ec <_scanf_i+0x180>
 800c3d0:	42bd      	cmp	r5, r7
 800c3d2:	d909      	bls.n	800c3e8 <_scanf_i+0x17c>
 800c3d4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c3d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3dc:	4632      	mov	r2, r6
 800c3de:	4650      	mov	r0, sl
 800c3e0:	4798      	blx	r3
 800c3e2:	f105 39ff 	add.w	r9, r5, #4294967295
 800c3e6:	464d      	mov	r5, r9
 800c3e8:	42bd      	cmp	r5, r7
 800c3ea:	d028      	beq.n	800c43e <_scanf_i+0x1d2>
 800c3ec:	6822      	ldr	r2, [r4, #0]
 800c3ee:	f012 0210 	ands.w	r2, r2, #16
 800c3f2:	d113      	bne.n	800c41c <_scanf_i+0x1b0>
 800c3f4:	702a      	strb	r2, [r5, #0]
 800c3f6:	6863      	ldr	r3, [r4, #4]
 800c3f8:	9e01      	ldr	r6, [sp, #4]
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	4650      	mov	r0, sl
 800c3fe:	47b0      	blx	r6
 800c400:	f8d8 3000 	ldr.w	r3, [r8]
 800c404:	6821      	ldr	r1, [r4, #0]
 800c406:	1d1a      	adds	r2, r3, #4
 800c408:	f8c8 2000 	str.w	r2, [r8]
 800c40c:	f011 0f20 	tst.w	r1, #32
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	d00f      	beq.n	800c434 <_scanf_i+0x1c8>
 800c414:	6018      	str	r0, [r3, #0]
 800c416:	68e3      	ldr	r3, [r4, #12]
 800c418:	3301      	adds	r3, #1
 800c41a:	60e3      	str	r3, [r4, #12]
 800c41c:	6923      	ldr	r3, [r4, #16]
 800c41e:	1bed      	subs	r5, r5, r7
 800c420:	445d      	add	r5, fp
 800c422:	442b      	add	r3, r5
 800c424:	6123      	str	r3, [r4, #16]
 800c426:	2000      	movs	r0, #0
 800c428:	b007      	add	sp, #28
 800c42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42e:	f04f 0b00 	mov.w	fp, #0
 800c432:	e7ca      	b.n	800c3ca <_scanf_i+0x15e>
 800c434:	07ca      	lsls	r2, r1, #31
 800c436:	bf4c      	ite	mi
 800c438:	8018      	strhmi	r0, [r3, #0]
 800c43a:	6018      	strpl	r0, [r3, #0]
 800c43c:	e7eb      	b.n	800c416 <_scanf_i+0x1aa>
 800c43e:	2001      	movs	r0, #1
 800c440:	e7f2      	b.n	800c428 <_scanf_i+0x1bc>
 800c442:	bf00      	nop
 800c444:	0800d630 	.word	0x0800d630
 800c448:	0800cf9d 	.word	0x0800cf9d
 800c44c:	0800bb61 	.word	0x0800bb61
 800c450:	0800da12 	.word	0x0800da12

0800c454 <__sflush_r>:
 800c454:	898a      	ldrh	r2, [r1, #12]
 800c456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c45a:	4605      	mov	r5, r0
 800c45c:	0710      	lsls	r0, r2, #28
 800c45e:	460c      	mov	r4, r1
 800c460:	d458      	bmi.n	800c514 <__sflush_r+0xc0>
 800c462:	684b      	ldr	r3, [r1, #4]
 800c464:	2b00      	cmp	r3, #0
 800c466:	dc05      	bgt.n	800c474 <__sflush_r+0x20>
 800c468:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dc02      	bgt.n	800c474 <__sflush_r+0x20>
 800c46e:	2000      	movs	r0, #0
 800c470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c474:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c476:	2e00      	cmp	r6, #0
 800c478:	d0f9      	beq.n	800c46e <__sflush_r+0x1a>
 800c47a:	2300      	movs	r3, #0
 800c47c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c480:	682f      	ldr	r7, [r5, #0]
 800c482:	6a21      	ldr	r1, [r4, #32]
 800c484:	602b      	str	r3, [r5, #0]
 800c486:	d032      	beq.n	800c4ee <__sflush_r+0x9a>
 800c488:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	075a      	lsls	r2, r3, #29
 800c48e:	d505      	bpl.n	800c49c <__sflush_r+0x48>
 800c490:	6863      	ldr	r3, [r4, #4]
 800c492:	1ac0      	subs	r0, r0, r3
 800c494:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c496:	b10b      	cbz	r3, 800c49c <__sflush_r+0x48>
 800c498:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c49a:	1ac0      	subs	r0, r0, r3
 800c49c:	2300      	movs	r3, #0
 800c49e:	4602      	mov	r2, r0
 800c4a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c4a2:	6a21      	ldr	r1, [r4, #32]
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	47b0      	blx	r6
 800c4a8:	1c43      	adds	r3, r0, #1
 800c4aa:	89a3      	ldrh	r3, [r4, #12]
 800c4ac:	d106      	bne.n	800c4bc <__sflush_r+0x68>
 800c4ae:	6829      	ldr	r1, [r5, #0]
 800c4b0:	291d      	cmp	r1, #29
 800c4b2:	d82b      	bhi.n	800c50c <__sflush_r+0xb8>
 800c4b4:	4a29      	ldr	r2, [pc, #164]	; (800c55c <__sflush_r+0x108>)
 800c4b6:	410a      	asrs	r2, r1
 800c4b8:	07d6      	lsls	r6, r2, #31
 800c4ba:	d427      	bmi.n	800c50c <__sflush_r+0xb8>
 800c4bc:	2200      	movs	r2, #0
 800c4be:	6062      	str	r2, [r4, #4]
 800c4c0:	04d9      	lsls	r1, r3, #19
 800c4c2:	6922      	ldr	r2, [r4, #16]
 800c4c4:	6022      	str	r2, [r4, #0]
 800c4c6:	d504      	bpl.n	800c4d2 <__sflush_r+0x7e>
 800c4c8:	1c42      	adds	r2, r0, #1
 800c4ca:	d101      	bne.n	800c4d0 <__sflush_r+0x7c>
 800c4cc:	682b      	ldr	r3, [r5, #0]
 800c4ce:	b903      	cbnz	r3, 800c4d2 <__sflush_r+0x7e>
 800c4d0:	6560      	str	r0, [r4, #84]	; 0x54
 800c4d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4d4:	602f      	str	r7, [r5, #0]
 800c4d6:	2900      	cmp	r1, #0
 800c4d8:	d0c9      	beq.n	800c46e <__sflush_r+0x1a>
 800c4da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4de:	4299      	cmp	r1, r3
 800c4e0:	d002      	beq.n	800c4e8 <__sflush_r+0x94>
 800c4e2:	4628      	mov	r0, r5
 800c4e4:	f7fd fefa 	bl	800a2dc <_free_r>
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	6360      	str	r0, [r4, #52]	; 0x34
 800c4ec:	e7c0      	b.n	800c470 <__sflush_r+0x1c>
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	4628      	mov	r0, r5
 800c4f2:	47b0      	blx	r6
 800c4f4:	1c41      	adds	r1, r0, #1
 800c4f6:	d1c8      	bne.n	800c48a <__sflush_r+0x36>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d0c5      	beq.n	800c48a <__sflush_r+0x36>
 800c4fe:	2b1d      	cmp	r3, #29
 800c500:	d001      	beq.n	800c506 <__sflush_r+0xb2>
 800c502:	2b16      	cmp	r3, #22
 800c504:	d101      	bne.n	800c50a <__sflush_r+0xb6>
 800c506:	602f      	str	r7, [r5, #0]
 800c508:	e7b1      	b.n	800c46e <__sflush_r+0x1a>
 800c50a:	89a3      	ldrh	r3, [r4, #12]
 800c50c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c510:	81a3      	strh	r3, [r4, #12]
 800c512:	e7ad      	b.n	800c470 <__sflush_r+0x1c>
 800c514:	690f      	ldr	r7, [r1, #16]
 800c516:	2f00      	cmp	r7, #0
 800c518:	d0a9      	beq.n	800c46e <__sflush_r+0x1a>
 800c51a:	0793      	lsls	r3, r2, #30
 800c51c:	680e      	ldr	r6, [r1, #0]
 800c51e:	bf08      	it	eq
 800c520:	694b      	ldreq	r3, [r1, #20]
 800c522:	600f      	str	r7, [r1, #0]
 800c524:	bf18      	it	ne
 800c526:	2300      	movne	r3, #0
 800c528:	eba6 0807 	sub.w	r8, r6, r7
 800c52c:	608b      	str	r3, [r1, #8]
 800c52e:	f1b8 0f00 	cmp.w	r8, #0
 800c532:	dd9c      	ble.n	800c46e <__sflush_r+0x1a>
 800c534:	6a21      	ldr	r1, [r4, #32]
 800c536:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c538:	4643      	mov	r3, r8
 800c53a:	463a      	mov	r2, r7
 800c53c:	4628      	mov	r0, r5
 800c53e:	47b0      	blx	r6
 800c540:	2800      	cmp	r0, #0
 800c542:	dc06      	bgt.n	800c552 <__sflush_r+0xfe>
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c54a:	81a3      	strh	r3, [r4, #12]
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295
 800c550:	e78e      	b.n	800c470 <__sflush_r+0x1c>
 800c552:	4407      	add	r7, r0
 800c554:	eba8 0800 	sub.w	r8, r8, r0
 800c558:	e7e9      	b.n	800c52e <__sflush_r+0xda>
 800c55a:	bf00      	nop
 800c55c:	dfbffffe 	.word	0xdfbffffe

0800c560 <_fflush_r>:
 800c560:	b538      	push	{r3, r4, r5, lr}
 800c562:	690b      	ldr	r3, [r1, #16]
 800c564:	4605      	mov	r5, r0
 800c566:	460c      	mov	r4, r1
 800c568:	b913      	cbnz	r3, 800c570 <_fflush_r+0x10>
 800c56a:	2500      	movs	r5, #0
 800c56c:	4628      	mov	r0, r5
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	b118      	cbz	r0, 800c57a <_fflush_r+0x1a>
 800c572:	6a03      	ldr	r3, [r0, #32]
 800c574:	b90b      	cbnz	r3, 800c57a <_fflush_r+0x1a>
 800c576:	f7fc fecb 	bl	8009310 <__sinit>
 800c57a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d0f3      	beq.n	800c56a <_fflush_r+0xa>
 800c582:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c584:	07d0      	lsls	r0, r2, #31
 800c586:	d404      	bmi.n	800c592 <_fflush_r+0x32>
 800c588:	0599      	lsls	r1, r3, #22
 800c58a:	d402      	bmi.n	800c592 <_fflush_r+0x32>
 800c58c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c58e:	f7fd f812 	bl	80095b6 <__retarget_lock_acquire_recursive>
 800c592:	4628      	mov	r0, r5
 800c594:	4621      	mov	r1, r4
 800c596:	f7ff ff5d 	bl	800c454 <__sflush_r>
 800c59a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c59c:	07da      	lsls	r2, r3, #31
 800c59e:	4605      	mov	r5, r0
 800c5a0:	d4e4      	bmi.n	800c56c <_fflush_r+0xc>
 800c5a2:	89a3      	ldrh	r3, [r4, #12]
 800c5a4:	059b      	lsls	r3, r3, #22
 800c5a6:	d4e1      	bmi.n	800c56c <_fflush_r+0xc>
 800c5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5aa:	f7fd f805 	bl	80095b8 <__retarget_lock_release_recursive>
 800c5ae:	e7dd      	b.n	800c56c <_fflush_r+0xc>

0800c5b0 <__sccl>:
 800c5b0:	b570      	push	{r4, r5, r6, lr}
 800c5b2:	780b      	ldrb	r3, [r1, #0]
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	2b5e      	cmp	r3, #94	; 0x5e
 800c5b8:	bf0b      	itete	eq
 800c5ba:	784b      	ldrbeq	r3, [r1, #1]
 800c5bc:	1c4a      	addne	r2, r1, #1
 800c5be:	1c8a      	addeq	r2, r1, #2
 800c5c0:	2100      	movne	r1, #0
 800c5c2:	bf08      	it	eq
 800c5c4:	2101      	moveq	r1, #1
 800c5c6:	3801      	subs	r0, #1
 800c5c8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c5cc:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c5d0:	42a8      	cmp	r0, r5
 800c5d2:	d1fb      	bne.n	800c5cc <__sccl+0x1c>
 800c5d4:	b90b      	cbnz	r3, 800c5da <__sccl+0x2a>
 800c5d6:	1e50      	subs	r0, r2, #1
 800c5d8:	bd70      	pop	{r4, r5, r6, pc}
 800c5da:	f081 0101 	eor.w	r1, r1, #1
 800c5de:	54e1      	strb	r1, [r4, r3]
 800c5e0:	4610      	mov	r0, r2
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c5e8:	2d2d      	cmp	r5, #45	; 0x2d
 800c5ea:	d005      	beq.n	800c5f8 <__sccl+0x48>
 800c5ec:	2d5d      	cmp	r5, #93	; 0x5d
 800c5ee:	d016      	beq.n	800c61e <__sccl+0x6e>
 800c5f0:	2d00      	cmp	r5, #0
 800c5f2:	d0f1      	beq.n	800c5d8 <__sccl+0x28>
 800c5f4:	462b      	mov	r3, r5
 800c5f6:	e7f2      	b.n	800c5de <__sccl+0x2e>
 800c5f8:	7846      	ldrb	r6, [r0, #1]
 800c5fa:	2e5d      	cmp	r6, #93	; 0x5d
 800c5fc:	d0fa      	beq.n	800c5f4 <__sccl+0x44>
 800c5fe:	42b3      	cmp	r3, r6
 800c600:	dcf8      	bgt.n	800c5f4 <__sccl+0x44>
 800c602:	3002      	adds	r0, #2
 800c604:	461a      	mov	r2, r3
 800c606:	3201      	adds	r2, #1
 800c608:	4296      	cmp	r6, r2
 800c60a:	54a1      	strb	r1, [r4, r2]
 800c60c:	dcfb      	bgt.n	800c606 <__sccl+0x56>
 800c60e:	1af2      	subs	r2, r6, r3
 800c610:	3a01      	subs	r2, #1
 800c612:	1c5d      	adds	r5, r3, #1
 800c614:	42b3      	cmp	r3, r6
 800c616:	bfa8      	it	ge
 800c618:	2200      	movge	r2, #0
 800c61a:	18ab      	adds	r3, r5, r2
 800c61c:	e7e1      	b.n	800c5e2 <__sccl+0x32>
 800c61e:	4610      	mov	r0, r2
 800c620:	e7da      	b.n	800c5d8 <__sccl+0x28>

0800c622 <__submore>:
 800c622:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c626:	460c      	mov	r4, r1
 800c628:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c62a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c62e:	4299      	cmp	r1, r3
 800c630:	d11d      	bne.n	800c66e <__submore+0x4c>
 800c632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c636:	f7fd fec5 	bl	800a3c4 <_malloc_r>
 800c63a:	b918      	cbnz	r0, 800c644 <__submore+0x22>
 800c63c:	f04f 30ff 	mov.w	r0, #4294967295
 800c640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c648:	63a3      	str	r3, [r4, #56]	; 0x38
 800c64a:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c64e:	6360      	str	r0, [r4, #52]	; 0x34
 800c650:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c654:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c658:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c65c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c660:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c664:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c668:	6020      	str	r0, [r4, #0]
 800c66a:	2000      	movs	r0, #0
 800c66c:	e7e8      	b.n	800c640 <__submore+0x1e>
 800c66e:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c670:	0077      	lsls	r7, r6, #1
 800c672:	463a      	mov	r2, r7
 800c674:	f000 fbf1 	bl	800ce5a <_realloc_r>
 800c678:	4605      	mov	r5, r0
 800c67a:	2800      	cmp	r0, #0
 800c67c:	d0de      	beq.n	800c63c <__submore+0x1a>
 800c67e:	eb00 0806 	add.w	r8, r0, r6
 800c682:	4601      	mov	r1, r0
 800c684:	4632      	mov	r2, r6
 800c686:	4640      	mov	r0, r8
 800c688:	f7fc ff97 	bl	80095ba <memcpy>
 800c68c:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c690:	f8c4 8000 	str.w	r8, [r4]
 800c694:	e7e9      	b.n	800c66a <__submore+0x48>

0800c696 <memmove>:
 800c696:	4288      	cmp	r0, r1
 800c698:	b510      	push	{r4, lr}
 800c69a:	eb01 0402 	add.w	r4, r1, r2
 800c69e:	d902      	bls.n	800c6a6 <memmove+0x10>
 800c6a0:	4284      	cmp	r4, r0
 800c6a2:	4623      	mov	r3, r4
 800c6a4:	d807      	bhi.n	800c6b6 <memmove+0x20>
 800c6a6:	1e43      	subs	r3, r0, #1
 800c6a8:	42a1      	cmp	r1, r4
 800c6aa:	d008      	beq.n	800c6be <memmove+0x28>
 800c6ac:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6b0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6b4:	e7f8      	b.n	800c6a8 <memmove+0x12>
 800c6b6:	4402      	add	r2, r0
 800c6b8:	4601      	mov	r1, r0
 800c6ba:	428a      	cmp	r2, r1
 800c6bc:	d100      	bne.n	800c6c0 <memmove+0x2a>
 800c6be:	bd10      	pop	{r4, pc}
 800c6c0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6c4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6c8:	e7f7      	b.n	800c6ba <memmove+0x24>

0800c6ca <strncmp>:
 800c6ca:	b510      	push	{r4, lr}
 800c6cc:	b16a      	cbz	r2, 800c6ea <strncmp+0x20>
 800c6ce:	3901      	subs	r1, #1
 800c6d0:	1884      	adds	r4, r0, r2
 800c6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c6da:	429a      	cmp	r2, r3
 800c6dc:	d103      	bne.n	800c6e6 <strncmp+0x1c>
 800c6de:	42a0      	cmp	r0, r4
 800c6e0:	d001      	beq.n	800c6e6 <strncmp+0x1c>
 800c6e2:	2a00      	cmp	r2, #0
 800c6e4:	d1f5      	bne.n	800c6d2 <strncmp+0x8>
 800c6e6:	1ad0      	subs	r0, r2, r3
 800c6e8:	bd10      	pop	{r4, pc}
 800c6ea:	4610      	mov	r0, r2
 800c6ec:	e7fc      	b.n	800c6e8 <strncmp+0x1e>
	...

0800c6f0 <_sbrk_r>:
 800c6f0:	b538      	push	{r3, r4, r5, lr}
 800c6f2:	4d06      	ldr	r5, [pc, #24]	; (800c70c <_sbrk_r+0x1c>)
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	4604      	mov	r4, r0
 800c6f8:	4608      	mov	r0, r1
 800c6fa:	602b      	str	r3, [r5, #0]
 800c6fc:	f7f6 fa12 	bl	8002b24 <_sbrk>
 800c700:	1c43      	adds	r3, r0, #1
 800c702:	d102      	bne.n	800c70a <_sbrk_r+0x1a>
 800c704:	682b      	ldr	r3, [r5, #0]
 800c706:	b103      	cbz	r3, 800c70a <_sbrk_r+0x1a>
 800c708:	6023      	str	r3, [r4, #0]
 800c70a:	bd38      	pop	{r3, r4, r5, pc}
 800c70c:	2000080c 	.word	0x2000080c

0800c710 <nan>:
 800c710:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c718 <nan+0x8>
 800c714:	4770      	bx	lr
 800c716:	bf00      	nop
 800c718:	00000000 	.word	0x00000000
 800c71c:	7ff80000 	.word	0x7ff80000

0800c720 <__assert_func>:
 800c720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c722:	4614      	mov	r4, r2
 800c724:	461a      	mov	r2, r3
 800c726:	4b09      	ldr	r3, [pc, #36]	; (800c74c <__assert_func+0x2c>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	4605      	mov	r5, r0
 800c72c:	68d8      	ldr	r0, [r3, #12]
 800c72e:	b14c      	cbz	r4, 800c744 <__assert_func+0x24>
 800c730:	4b07      	ldr	r3, [pc, #28]	; (800c750 <__assert_func+0x30>)
 800c732:	9100      	str	r1, [sp, #0]
 800c734:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c738:	4906      	ldr	r1, [pc, #24]	; (800c754 <__assert_func+0x34>)
 800c73a:	462b      	mov	r3, r5
 800c73c:	f000 fc3e 	bl	800cfbc <fiprintf>
 800c740:	f000 fc4e 	bl	800cfe0 <abort>
 800c744:	4b04      	ldr	r3, [pc, #16]	; (800c758 <__assert_func+0x38>)
 800c746:	461c      	mov	r4, r3
 800c748:	e7f3      	b.n	800c732 <__assert_func+0x12>
 800c74a:	bf00      	nop
 800c74c:	20000060 	.word	0x20000060
 800c750:	0800da25 	.word	0x0800da25
 800c754:	0800da32 	.word	0x0800da32
 800c758:	0800da60 	.word	0x0800da60

0800c75c <_calloc_r>:
 800c75c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c75e:	fba1 2402 	umull	r2, r4, r1, r2
 800c762:	b94c      	cbnz	r4, 800c778 <_calloc_r+0x1c>
 800c764:	4611      	mov	r1, r2
 800c766:	9201      	str	r2, [sp, #4]
 800c768:	f7fd fe2c 	bl	800a3c4 <_malloc_r>
 800c76c:	9a01      	ldr	r2, [sp, #4]
 800c76e:	4605      	mov	r5, r0
 800c770:	b930      	cbnz	r0, 800c780 <_calloc_r+0x24>
 800c772:	4628      	mov	r0, r5
 800c774:	b003      	add	sp, #12
 800c776:	bd30      	pop	{r4, r5, pc}
 800c778:	220c      	movs	r2, #12
 800c77a:	6002      	str	r2, [r0, #0]
 800c77c:	2500      	movs	r5, #0
 800c77e:	e7f8      	b.n	800c772 <_calloc_r+0x16>
 800c780:	4621      	mov	r1, r4
 800c782:	f7fc fe8c 	bl	800949e <memset>
 800c786:	e7f4      	b.n	800c772 <_calloc_r+0x16>

0800c788 <rshift>:
 800c788:	6903      	ldr	r3, [r0, #16]
 800c78a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c78e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c792:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c796:	f100 0414 	add.w	r4, r0, #20
 800c79a:	dd45      	ble.n	800c828 <rshift+0xa0>
 800c79c:	f011 011f 	ands.w	r1, r1, #31
 800c7a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7a8:	d10c      	bne.n	800c7c4 <rshift+0x3c>
 800c7aa:	f100 0710 	add.w	r7, r0, #16
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	42b1      	cmp	r1, r6
 800c7b2:	d334      	bcc.n	800c81e <rshift+0x96>
 800c7b4:	1a9b      	subs	r3, r3, r2
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	1eea      	subs	r2, r5, #3
 800c7ba:	4296      	cmp	r6, r2
 800c7bc:	bf38      	it	cc
 800c7be:	2300      	movcc	r3, #0
 800c7c0:	4423      	add	r3, r4
 800c7c2:	e015      	b.n	800c7f0 <rshift+0x68>
 800c7c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c7c8:	f1c1 0820 	rsb	r8, r1, #32
 800c7cc:	40cf      	lsrs	r7, r1
 800c7ce:	f105 0e04 	add.w	lr, r5, #4
 800c7d2:	46a1      	mov	r9, r4
 800c7d4:	4576      	cmp	r6, lr
 800c7d6:	46f4      	mov	ip, lr
 800c7d8:	d815      	bhi.n	800c806 <rshift+0x7e>
 800c7da:	1a9a      	subs	r2, r3, r2
 800c7dc:	0092      	lsls	r2, r2, #2
 800c7de:	3a04      	subs	r2, #4
 800c7e0:	3501      	adds	r5, #1
 800c7e2:	42ae      	cmp	r6, r5
 800c7e4:	bf38      	it	cc
 800c7e6:	2200      	movcc	r2, #0
 800c7e8:	18a3      	adds	r3, r4, r2
 800c7ea:	50a7      	str	r7, [r4, r2]
 800c7ec:	b107      	cbz	r7, 800c7f0 <rshift+0x68>
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	1b1a      	subs	r2, r3, r4
 800c7f2:	42a3      	cmp	r3, r4
 800c7f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c7f8:	bf08      	it	eq
 800c7fa:	2300      	moveq	r3, #0
 800c7fc:	6102      	str	r2, [r0, #16]
 800c7fe:	bf08      	it	eq
 800c800:	6143      	streq	r3, [r0, #20]
 800c802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c806:	f8dc c000 	ldr.w	ip, [ip]
 800c80a:	fa0c fc08 	lsl.w	ip, ip, r8
 800c80e:	ea4c 0707 	orr.w	r7, ip, r7
 800c812:	f849 7b04 	str.w	r7, [r9], #4
 800c816:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c81a:	40cf      	lsrs	r7, r1
 800c81c:	e7da      	b.n	800c7d4 <rshift+0x4c>
 800c81e:	f851 cb04 	ldr.w	ip, [r1], #4
 800c822:	f847 cf04 	str.w	ip, [r7, #4]!
 800c826:	e7c3      	b.n	800c7b0 <rshift+0x28>
 800c828:	4623      	mov	r3, r4
 800c82a:	e7e1      	b.n	800c7f0 <rshift+0x68>

0800c82c <__hexdig_fun>:
 800c82c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c830:	2b09      	cmp	r3, #9
 800c832:	d802      	bhi.n	800c83a <__hexdig_fun+0xe>
 800c834:	3820      	subs	r0, #32
 800c836:	b2c0      	uxtb	r0, r0
 800c838:	4770      	bx	lr
 800c83a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c83e:	2b05      	cmp	r3, #5
 800c840:	d801      	bhi.n	800c846 <__hexdig_fun+0x1a>
 800c842:	3847      	subs	r0, #71	; 0x47
 800c844:	e7f7      	b.n	800c836 <__hexdig_fun+0xa>
 800c846:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c84a:	2b05      	cmp	r3, #5
 800c84c:	d801      	bhi.n	800c852 <__hexdig_fun+0x26>
 800c84e:	3827      	subs	r0, #39	; 0x27
 800c850:	e7f1      	b.n	800c836 <__hexdig_fun+0xa>
 800c852:	2000      	movs	r0, #0
 800c854:	4770      	bx	lr
	...

0800c858 <__gethex>:
 800c858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c85c:	4617      	mov	r7, r2
 800c85e:	680a      	ldr	r2, [r1, #0]
 800c860:	b085      	sub	sp, #20
 800c862:	f102 0b02 	add.w	fp, r2, #2
 800c866:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c86a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c86e:	4681      	mov	r9, r0
 800c870:	468a      	mov	sl, r1
 800c872:	9302      	str	r3, [sp, #8]
 800c874:	32fe      	adds	r2, #254	; 0xfe
 800c876:	eb02 030b 	add.w	r3, r2, fp
 800c87a:	46d8      	mov	r8, fp
 800c87c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c880:	9301      	str	r3, [sp, #4]
 800c882:	2830      	cmp	r0, #48	; 0x30
 800c884:	d0f7      	beq.n	800c876 <__gethex+0x1e>
 800c886:	f7ff ffd1 	bl	800c82c <__hexdig_fun>
 800c88a:	4604      	mov	r4, r0
 800c88c:	2800      	cmp	r0, #0
 800c88e:	d138      	bne.n	800c902 <__gethex+0xaa>
 800c890:	49a7      	ldr	r1, [pc, #668]	; (800cb30 <__gethex+0x2d8>)
 800c892:	2201      	movs	r2, #1
 800c894:	4640      	mov	r0, r8
 800c896:	f7ff ff18 	bl	800c6ca <strncmp>
 800c89a:	4606      	mov	r6, r0
 800c89c:	2800      	cmp	r0, #0
 800c89e:	d169      	bne.n	800c974 <__gethex+0x11c>
 800c8a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c8a4:	465d      	mov	r5, fp
 800c8a6:	f7ff ffc1 	bl	800c82c <__hexdig_fun>
 800c8aa:	2800      	cmp	r0, #0
 800c8ac:	d064      	beq.n	800c978 <__gethex+0x120>
 800c8ae:	465a      	mov	r2, fp
 800c8b0:	7810      	ldrb	r0, [r2, #0]
 800c8b2:	2830      	cmp	r0, #48	; 0x30
 800c8b4:	4690      	mov	r8, r2
 800c8b6:	f102 0201 	add.w	r2, r2, #1
 800c8ba:	d0f9      	beq.n	800c8b0 <__gethex+0x58>
 800c8bc:	f7ff ffb6 	bl	800c82c <__hexdig_fun>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	fab0 f480 	clz	r4, r0
 800c8c6:	0964      	lsrs	r4, r4, #5
 800c8c8:	465e      	mov	r6, fp
 800c8ca:	9301      	str	r3, [sp, #4]
 800c8cc:	4642      	mov	r2, r8
 800c8ce:	4615      	mov	r5, r2
 800c8d0:	3201      	adds	r2, #1
 800c8d2:	7828      	ldrb	r0, [r5, #0]
 800c8d4:	f7ff ffaa 	bl	800c82c <__hexdig_fun>
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d1f8      	bne.n	800c8ce <__gethex+0x76>
 800c8dc:	4994      	ldr	r1, [pc, #592]	; (800cb30 <__gethex+0x2d8>)
 800c8de:	2201      	movs	r2, #1
 800c8e0:	4628      	mov	r0, r5
 800c8e2:	f7ff fef2 	bl	800c6ca <strncmp>
 800c8e6:	b978      	cbnz	r0, 800c908 <__gethex+0xb0>
 800c8e8:	b946      	cbnz	r6, 800c8fc <__gethex+0xa4>
 800c8ea:	1c6e      	adds	r6, r5, #1
 800c8ec:	4632      	mov	r2, r6
 800c8ee:	4615      	mov	r5, r2
 800c8f0:	3201      	adds	r2, #1
 800c8f2:	7828      	ldrb	r0, [r5, #0]
 800c8f4:	f7ff ff9a 	bl	800c82c <__hexdig_fun>
 800c8f8:	2800      	cmp	r0, #0
 800c8fa:	d1f8      	bne.n	800c8ee <__gethex+0x96>
 800c8fc:	1b73      	subs	r3, r6, r5
 800c8fe:	009e      	lsls	r6, r3, #2
 800c900:	e004      	b.n	800c90c <__gethex+0xb4>
 800c902:	2400      	movs	r4, #0
 800c904:	4626      	mov	r6, r4
 800c906:	e7e1      	b.n	800c8cc <__gethex+0x74>
 800c908:	2e00      	cmp	r6, #0
 800c90a:	d1f7      	bne.n	800c8fc <__gethex+0xa4>
 800c90c:	782b      	ldrb	r3, [r5, #0]
 800c90e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c912:	2b50      	cmp	r3, #80	; 0x50
 800c914:	d13d      	bne.n	800c992 <__gethex+0x13a>
 800c916:	786b      	ldrb	r3, [r5, #1]
 800c918:	2b2b      	cmp	r3, #43	; 0x2b
 800c91a:	d02f      	beq.n	800c97c <__gethex+0x124>
 800c91c:	2b2d      	cmp	r3, #45	; 0x2d
 800c91e:	d031      	beq.n	800c984 <__gethex+0x12c>
 800c920:	1c69      	adds	r1, r5, #1
 800c922:	f04f 0b00 	mov.w	fp, #0
 800c926:	7808      	ldrb	r0, [r1, #0]
 800c928:	f7ff ff80 	bl	800c82c <__hexdig_fun>
 800c92c:	1e42      	subs	r2, r0, #1
 800c92e:	b2d2      	uxtb	r2, r2
 800c930:	2a18      	cmp	r2, #24
 800c932:	d82e      	bhi.n	800c992 <__gethex+0x13a>
 800c934:	f1a0 0210 	sub.w	r2, r0, #16
 800c938:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c93c:	f7ff ff76 	bl	800c82c <__hexdig_fun>
 800c940:	f100 3cff 	add.w	ip, r0, #4294967295
 800c944:	fa5f fc8c 	uxtb.w	ip, ip
 800c948:	f1bc 0f18 	cmp.w	ip, #24
 800c94c:	d91d      	bls.n	800c98a <__gethex+0x132>
 800c94e:	f1bb 0f00 	cmp.w	fp, #0
 800c952:	d000      	beq.n	800c956 <__gethex+0xfe>
 800c954:	4252      	negs	r2, r2
 800c956:	4416      	add	r6, r2
 800c958:	f8ca 1000 	str.w	r1, [sl]
 800c95c:	b1dc      	cbz	r4, 800c996 <__gethex+0x13e>
 800c95e:	9b01      	ldr	r3, [sp, #4]
 800c960:	2b00      	cmp	r3, #0
 800c962:	bf14      	ite	ne
 800c964:	f04f 0800 	movne.w	r8, #0
 800c968:	f04f 0806 	moveq.w	r8, #6
 800c96c:	4640      	mov	r0, r8
 800c96e:	b005      	add	sp, #20
 800c970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c974:	4645      	mov	r5, r8
 800c976:	4626      	mov	r6, r4
 800c978:	2401      	movs	r4, #1
 800c97a:	e7c7      	b.n	800c90c <__gethex+0xb4>
 800c97c:	f04f 0b00 	mov.w	fp, #0
 800c980:	1ca9      	adds	r1, r5, #2
 800c982:	e7d0      	b.n	800c926 <__gethex+0xce>
 800c984:	f04f 0b01 	mov.w	fp, #1
 800c988:	e7fa      	b.n	800c980 <__gethex+0x128>
 800c98a:	230a      	movs	r3, #10
 800c98c:	fb03 0002 	mla	r0, r3, r2, r0
 800c990:	e7d0      	b.n	800c934 <__gethex+0xdc>
 800c992:	4629      	mov	r1, r5
 800c994:	e7e0      	b.n	800c958 <__gethex+0x100>
 800c996:	eba5 0308 	sub.w	r3, r5, r8
 800c99a:	3b01      	subs	r3, #1
 800c99c:	4621      	mov	r1, r4
 800c99e:	2b07      	cmp	r3, #7
 800c9a0:	dc0a      	bgt.n	800c9b8 <__gethex+0x160>
 800c9a2:	4648      	mov	r0, r9
 800c9a4:	f7fd fd9a 	bl	800a4dc <_Balloc>
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	b940      	cbnz	r0, 800c9be <__gethex+0x166>
 800c9ac:	4b61      	ldr	r3, [pc, #388]	; (800cb34 <__gethex+0x2dc>)
 800c9ae:	4602      	mov	r2, r0
 800c9b0:	21e4      	movs	r1, #228	; 0xe4
 800c9b2:	4861      	ldr	r0, [pc, #388]	; (800cb38 <__gethex+0x2e0>)
 800c9b4:	f7ff feb4 	bl	800c720 <__assert_func>
 800c9b8:	3101      	adds	r1, #1
 800c9ba:	105b      	asrs	r3, r3, #1
 800c9bc:	e7ef      	b.n	800c99e <__gethex+0x146>
 800c9be:	f100 0a14 	add.w	sl, r0, #20
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	495a      	ldr	r1, [pc, #360]	; (800cb30 <__gethex+0x2d8>)
 800c9c6:	f8cd a004 	str.w	sl, [sp, #4]
 800c9ca:	469b      	mov	fp, r3
 800c9cc:	45a8      	cmp	r8, r5
 800c9ce:	d342      	bcc.n	800ca56 <__gethex+0x1fe>
 800c9d0:	9801      	ldr	r0, [sp, #4]
 800c9d2:	f840 bb04 	str.w	fp, [r0], #4
 800c9d6:	eba0 000a 	sub.w	r0, r0, sl
 800c9da:	1080      	asrs	r0, r0, #2
 800c9dc:	6120      	str	r0, [r4, #16]
 800c9de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c9e2:	4658      	mov	r0, fp
 800c9e4:	f7fd fe6c 	bl	800a6c0 <__hi0bits>
 800c9e8:	683d      	ldr	r5, [r7, #0]
 800c9ea:	eba8 0000 	sub.w	r0, r8, r0
 800c9ee:	42a8      	cmp	r0, r5
 800c9f0:	dd59      	ble.n	800caa6 <__gethex+0x24e>
 800c9f2:	eba0 0805 	sub.w	r8, r0, r5
 800c9f6:	4641      	mov	r1, r8
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	f7fe f9fb 	bl	800adf4 <__any_on>
 800c9fe:	4683      	mov	fp, r0
 800ca00:	b1b8      	cbz	r0, 800ca32 <__gethex+0x1da>
 800ca02:	f108 33ff 	add.w	r3, r8, #4294967295
 800ca06:	1159      	asrs	r1, r3, #5
 800ca08:	f003 021f 	and.w	r2, r3, #31
 800ca0c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ca10:	f04f 0b01 	mov.w	fp, #1
 800ca14:	fa0b f202 	lsl.w	r2, fp, r2
 800ca18:	420a      	tst	r2, r1
 800ca1a:	d00a      	beq.n	800ca32 <__gethex+0x1da>
 800ca1c:	455b      	cmp	r3, fp
 800ca1e:	dd06      	ble.n	800ca2e <__gethex+0x1d6>
 800ca20:	f1a8 0102 	sub.w	r1, r8, #2
 800ca24:	4620      	mov	r0, r4
 800ca26:	f7fe f9e5 	bl	800adf4 <__any_on>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d138      	bne.n	800caa0 <__gethex+0x248>
 800ca2e:	f04f 0b02 	mov.w	fp, #2
 800ca32:	4641      	mov	r1, r8
 800ca34:	4620      	mov	r0, r4
 800ca36:	f7ff fea7 	bl	800c788 <rshift>
 800ca3a:	4446      	add	r6, r8
 800ca3c:	68bb      	ldr	r3, [r7, #8]
 800ca3e:	42b3      	cmp	r3, r6
 800ca40:	da41      	bge.n	800cac6 <__gethex+0x26e>
 800ca42:	4621      	mov	r1, r4
 800ca44:	4648      	mov	r0, r9
 800ca46:	f7fd fd89 	bl	800a55c <_Bfree>
 800ca4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ca54:	e78a      	b.n	800c96c <__gethex+0x114>
 800ca56:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ca5a:	2a2e      	cmp	r2, #46	; 0x2e
 800ca5c:	d014      	beq.n	800ca88 <__gethex+0x230>
 800ca5e:	2b20      	cmp	r3, #32
 800ca60:	d106      	bne.n	800ca70 <__gethex+0x218>
 800ca62:	9b01      	ldr	r3, [sp, #4]
 800ca64:	f843 bb04 	str.w	fp, [r3], #4
 800ca68:	f04f 0b00 	mov.w	fp, #0
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	465b      	mov	r3, fp
 800ca70:	7828      	ldrb	r0, [r5, #0]
 800ca72:	9303      	str	r3, [sp, #12]
 800ca74:	f7ff feda 	bl	800c82c <__hexdig_fun>
 800ca78:	9b03      	ldr	r3, [sp, #12]
 800ca7a:	f000 000f 	and.w	r0, r0, #15
 800ca7e:	4098      	lsls	r0, r3
 800ca80:	ea4b 0b00 	orr.w	fp, fp, r0
 800ca84:	3304      	adds	r3, #4
 800ca86:	e7a1      	b.n	800c9cc <__gethex+0x174>
 800ca88:	45a8      	cmp	r8, r5
 800ca8a:	d8e8      	bhi.n	800ca5e <__gethex+0x206>
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	4628      	mov	r0, r5
 800ca90:	9303      	str	r3, [sp, #12]
 800ca92:	f7ff fe1a 	bl	800c6ca <strncmp>
 800ca96:	4926      	ldr	r1, [pc, #152]	; (800cb30 <__gethex+0x2d8>)
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	2800      	cmp	r0, #0
 800ca9c:	d1df      	bne.n	800ca5e <__gethex+0x206>
 800ca9e:	e795      	b.n	800c9cc <__gethex+0x174>
 800caa0:	f04f 0b03 	mov.w	fp, #3
 800caa4:	e7c5      	b.n	800ca32 <__gethex+0x1da>
 800caa6:	da0b      	bge.n	800cac0 <__gethex+0x268>
 800caa8:	eba5 0800 	sub.w	r8, r5, r0
 800caac:	4621      	mov	r1, r4
 800caae:	4642      	mov	r2, r8
 800cab0:	4648      	mov	r0, r9
 800cab2:	f7fd ff6d 	bl	800a990 <__lshift>
 800cab6:	eba6 0608 	sub.w	r6, r6, r8
 800caba:	4604      	mov	r4, r0
 800cabc:	f100 0a14 	add.w	sl, r0, #20
 800cac0:	f04f 0b00 	mov.w	fp, #0
 800cac4:	e7ba      	b.n	800ca3c <__gethex+0x1e4>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	42b3      	cmp	r3, r6
 800caca:	dd73      	ble.n	800cbb4 <__gethex+0x35c>
 800cacc:	1b9e      	subs	r6, r3, r6
 800cace:	42b5      	cmp	r5, r6
 800cad0:	dc34      	bgt.n	800cb3c <__gethex+0x2e4>
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2b02      	cmp	r3, #2
 800cad6:	d023      	beq.n	800cb20 <__gethex+0x2c8>
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d025      	beq.n	800cb28 <__gethex+0x2d0>
 800cadc:	2b01      	cmp	r3, #1
 800cade:	d115      	bne.n	800cb0c <__gethex+0x2b4>
 800cae0:	42b5      	cmp	r5, r6
 800cae2:	d113      	bne.n	800cb0c <__gethex+0x2b4>
 800cae4:	2d01      	cmp	r5, #1
 800cae6:	d10b      	bne.n	800cb00 <__gethex+0x2a8>
 800cae8:	9a02      	ldr	r2, [sp, #8]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6013      	str	r3, [r2, #0]
 800caee:	2301      	movs	r3, #1
 800caf0:	6123      	str	r3, [r4, #16]
 800caf2:	f8ca 3000 	str.w	r3, [sl]
 800caf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800caf8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cafc:	601c      	str	r4, [r3, #0]
 800cafe:	e735      	b.n	800c96c <__gethex+0x114>
 800cb00:	1e69      	subs	r1, r5, #1
 800cb02:	4620      	mov	r0, r4
 800cb04:	f7fe f976 	bl	800adf4 <__any_on>
 800cb08:	2800      	cmp	r0, #0
 800cb0a:	d1ed      	bne.n	800cae8 <__gethex+0x290>
 800cb0c:	4621      	mov	r1, r4
 800cb0e:	4648      	mov	r0, r9
 800cb10:	f7fd fd24 	bl	800a55c <_Bfree>
 800cb14:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb16:	2300      	movs	r3, #0
 800cb18:	6013      	str	r3, [r2, #0]
 800cb1a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cb1e:	e725      	b.n	800c96c <__gethex+0x114>
 800cb20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d1f2      	bne.n	800cb0c <__gethex+0x2b4>
 800cb26:	e7df      	b.n	800cae8 <__gethex+0x290>
 800cb28:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1dc      	bne.n	800cae8 <__gethex+0x290>
 800cb2e:	e7ed      	b.n	800cb0c <__gethex+0x2b4>
 800cb30:	0800d89c 	.word	0x0800d89c
 800cb34:	0800d72f 	.word	0x0800d72f
 800cb38:	0800da61 	.word	0x0800da61
 800cb3c:	f106 38ff 	add.w	r8, r6, #4294967295
 800cb40:	f1bb 0f00 	cmp.w	fp, #0
 800cb44:	d133      	bne.n	800cbae <__gethex+0x356>
 800cb46:	f1b8 0f00 	cmp.w	r8, #0
 800cb4a:	d004      	beq.n	800cb56 <__gethex+0x2fe>
 800cb4c:	4641      	mov	r1, r8
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f7fe f950 	bl	800adf4 <__any_on>
 800cb54:	4683      	mov	fp, r0
 800cb56:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cb60:	f008 081f 	and.w	r8, r8, #31
 800cb64:	fa03 f308 	lsl.w	r3, r3, r8
 800cb68:	4213      	tst	r3, r2
 800cb6a:	4631      	mov	r1, r6
 800cb6c:	4620      	mov	r0, r4
 800cb6e:	bf18      	it	ne
 800cb70:	f04b 0b02 	orrne.w	fp, fp, #2
 800cb74:	1bad      	subs	r5, r5, r6
 800cb76:	f7ff fe07 	bl	800c788 <rshift>
 800cb7a:	687e      	ldr	r6, [r7, #4]
 800cb7c:	f04f 0802 	mov.w	r8, #2
 800cb80:	f1bb 0f00 	cmp.w	fp, #0
 800cb84:	d04a      	beq.n	800cc1c <__gethex+0x3c4>
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b02      	cmp	r3, #2
 800cb8a:	d016      	beq.n	800cbba <__gethex+0x362>
 800cb8c:	2b03      	cmp	r3, #3
 800cb8e:	d018      	beq.n	800cbc2 <__gethex+0x36a>
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d109      	bne.n	800cba8 <__gethex+0x350>
 800cb94:	f01b 0f02 	tst.w	fp, #2
 800cb98:	d006      	beq.n	800cba8 <__gethex+0x350>
 800cb9a:	f8da 3000 	ldr.w	r3, [sl]
 800cb9e:	ea4b 0b03 	orr.w	fp, fp, r3
 800cba2:	f01b 0f01 	tst.w	fp, #1
 800cba6:	d10f      	bne.n	800cbc8 <__gethex+0x370>
 800cba8:	f048 0810 	orr.w	r8, r8, #16
 800cbac:	e036      	b.n	800cc1c <__gethex+0x3c4>
 800cbae:	f04f 0b01 	mov.w	fp, #1
 800cbb2:	e7d0      	b.n	800cb56 <__gethex+0x2fe>
 800cbb4:	f04f 0801 	mov.w	r8, #1
 800cbb8:	e7e2      	b.n	800cb80 <__gethex+0x328>
 800cbba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbbc:	f1c3 0301 	rsb	r3, r3, #1
 800cbc0:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d0ef      	beq.n	800cba8 <__gethex+0x350>
 800cbc8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cbcc:	f104 0214 	add.w	r2, r4, #20
 800cbd0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cbd4:	9301      	str	r3, [sp, #4]
 800cbd6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cbda:	2300      	movs	r3, #0
 800cbdc:	4694      	mov	ip, r2
 800cbde:	f852 1b04 	ldr.w	r1, [r2], #4
 800cbe2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cbe6:	d01e      	beq.n	800cc26 <__gethex+0x3ce>
 800cbe8:	3101      	adds	r1, #1
 800cbea:	f8cc 1000 	str.w	r1, [ip]
 800cbee:	f1b8 0f02 	cmp.w	r8, #2
 800cbf2:	f104 0214 	add.w	r2, r4, #20
 800cbf6:	d13d      	bne.n	800cc74 <__gethex+0x41c>
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	42ab      	cmp	r3, r5
 800cbfe:	d10b      	bne.n	800cc18 <__gethex+0x3c0>
 800cc00:	1169      	asrs	r1, r5, #5
 800cc02:	2301      	movs	r3, #1
 800cc04:	f005 051f 	and.w	r5, r5, #31
 800cc08:	fa03 f505 	lsl.w	r5, r3, r5
 800cc0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc10:	421d      	tst	r5, r3
 800cc12:	bf18      	it	ne
 800cc14:	f04f 0801 	movne.w	r8, #1
 800cc18:	f048 0820 	orr.w	r8, r8, #32
 800cc1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc1e:	601c      	str	r4, [r3, #0]
 800cc20:	9b02      	ldr	r3, [sp, #8]
 800cc22:	601e      	str	r6, [r3, #0]
 800cc24:	e6a2      	b.n	800c96c <__gethex+0x114>
 800cc26:	4290      	cmp	r0, r2
 800cc28:	f842 3c04 	str.w	r3, [r2, #-4]
 800cc2c:	d8d6      	bhi.n	800cbdc <__gethex+0x384>
 800cc2e:	68a2      	ldr	r2, [r4, #8]
 800cc30:	4593      	cmp	fp, r2
 800cc32:	db17      	blt.n	800cc64 <__gethex+0x40c>
 800cc34:	6861      	ldr	r1, [r4, #4]
 800cc36:	4648      	mov	r0, r9
 800cc38:	3101      	adds	r1, #1
 800cc3a:	f7fd fc4f 	bl	800a4dc <_Balloc>
 800cc3e:	4682      	mov	sl, r0
 800cc40:	b918      	cbnz	r0, 800cc4a <__gethex+0x3f2>
 800cc42:	4b1b      	ldr	r3, [pc, #108]	; (800ccb0 <__gethex+0x458>)
 800cc44:	4602      	mov	r2, r0
 800cc46:	2184      	movs	r1, #132	; 0x84
 800cc48:	e6b3      	b.n	800c9b2 <__gethex+0x15a>
 800cc4a:	6922      	ldr	r2, [r4, #16]
 800cc4c:	3202      	adds	r2, #2
 800cc4e:	f104 010c 	add.w	r1, r4, #12
 800cc52:	0092      	lsls	r2, r2, #2
 800cc54:	300c      	adds	r0, #12
 800cc56:	f7fc fcb0 	bl	80095ba <memcpy>
 800cc5a:	4621      	mov	r1, r4
 800cc5c:	4648      	mov	r0, r9
 800cc5e:	f7fd fc7d 	bl	800a55c <_Bfree>
 800cc62:	4654      	mov	r4, sl
 800cc64:	6922      	ldr	r2, [r4, #16]
 800cc66:	1c51      	adds	r1, r2, #1
 800cc68:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cc6c:	6121      	str	r1, [r4, #16]
 800cc6e:	2101      	movs	r1, #1
 800cc70:	6151      	str	r1, [r2, #20]
 800cc72:	e7bc      	b.n	800cbee <__gethex+0x396>
 800cc74:	6921      	ldr	r1, [r4, #16]
 800cc76:	4559      	cmp	r1, fp
 800cc78:	dd0b      	ble.n	800cc92 <__gethex+0x43a>
 800cc7a:	2101      	movs	r1, #1
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f7ff fd83 	bl	800c788 <rshift>
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	3601      	adds	r6, #1
 800cc86:	42b3      	cmp	r3, r6
 800cc88:	f6ff aedb 	blt.w	800ca42 <__gethex+0x1ea>
 800cc8c:	f04f 0801 	mov.w	r8, #1
 800cc90:	e7c2      	b.n	800cc18 <__gethex+0x3c0>
 800cc92:	f015 051f 	ands.w	r5, r5, #31
 800cc96:	d0f9      	beq.n	800cc8c <__gethex+0x434>
 800cc98:	9b01      	ldr	r3, [sp, #4]
 800cc9a:	441a      	add	r2, r3
 800cc9c:	f1c5 0520 	rsb	r5, r5, #32
 800cca0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cca4:	f7fd fd0c 	bl	800a6c0 <__hi0bits>
 800cca8:	42a8      	cmp	r0, r5
 800ccaa:	dbe6      	blt.n	800cc7a <__gethex+0x422>
 800ccac:	e7ee      	b.n	800cc8c <__gethex+0x434>
 800ccae:	bf00      	nop
 800ccb0:	0800d72f 	.word	0x0800d72f

0800ccb4 <L_shift>:
 800ccb4:	f1c2 0208 	rsb	r2, r2, #8
 800ccb8:	0092      	lsls	r2, r2, #2
 800ccba:	b570      	push	{r4, r5, r6, lr}
 800ccbc:	f1c2 0620 	rsb	r6, r2, #32
 800ccc0:	6843      	ldr	r3, [r0, #4]
 800ccc2:	6804      	ldr	r4, [r0, #0]
 800ccc4:	fa03 f506 	lsl.w	r5, r3, r6
 800ccc8:	432c      	orrs	r4, r5
 800ccca:	40d3      	lsrs	r3, r2
 800cccc:	6004      	str	r4, [r0, #0]
 800ccce:	f840 3f04 	str.w	r3, [r0, #4]!
 800ccd2:	4288      	cmp	r0, r1
 800ccd4:	d3f4      	bcc.n	800ccc0 <L_shift+0xc>
 800ccd6:	bd70      	pop	{r4, r5, r6, pc}

0800ccd8 <__match>:
 800ccd8:	b530      	push	{r4, r5, lr}
 800ccda:	6803      	ldr	r3, [r0, #0]
 800ccdc:	3301      	adds	r3, #1
 800ccde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cce2:	b914      	cbnz	r4, 800ccea <__match+0x12>
 800cce4:	6003      	str	r3, [r0, #0]
 800cce6:	2001      	movs	r0, #1
 800cce8:	bd30      	pop	{r4, r5, pc}
 800ccea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ccf2:	2d19      	cmp	r5, #25
 800ccf4:	bf98      	it	ls
 800ccf6:	3220      	addls	r2, #32
 800ccf8:	42a2      	cmp	r2, r4
 800ccfa:	d0f0      	beq.n	800ccde <__match+0x6>
 800ccfc:	2000      	movs	r0, #0
 800ccfe:	e7f3      	b.n	800cce8 <__match+0x10>

0800cd00 <__hexnan>:
 800cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd04:	680b      	ldr	r3, [r1, #0]
 800cd06:	6801      	ldr	r1, [r0, #0]
 800cd08:	115e      	asrs	r6, r3, #5
 800cd0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd0e:	f013 031f 	ands.w	r3, r3, #31
 800cd12:	b087      	sub	sp, #28
 800cd14:	bf18      	it	ne
 800cd16:	3604      	addne	r6, #4
 800cd18:	2500      	movs	r5, #0
 800cd1a:	1f37      	subs	r7, r6, #4
 800cd1c:	4682      	mov	sl, r0
 800cd1e:	4690      	mov	r8, r2
 800cd20:	9301      	str	r3, [sp, #4]
 800cd22:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd26:	46b9      	mov	r9, r7
 800cd28:	463c      	mov	r4, r7
 800cd2a:	9502      	str	r5, [sp, #8]
 800cd2c:	46ab      	mov	fp, r5
 800cd2e:	784a      	ldrb	r2, [r1, #1]
 800cd30:	1c4b      	adds	r3, r1, #1
 800cd32:	9303      	str	r3, [sp, #12]
 800cd34:	b342      	cbz	r2, 800cd88 <__hexnan+0x88>
 800cd36:	4610      	mov	r0, r2
 800cd38:	9105      	str	r1, [sp, #20]
 800cd3a:	9204      	str	r2, [sp, #16]
 800cd3c:	f7ff fd76 	bl	800c82c <__hexdig_fun>
 800cd40:	2800      	cmp	r0, #0
 800cd42:	d14f      	bne.n	800cde4 <__hexnan+0xe4>
 800cd44:	9a04      	ldr	r2, [sp, #16]
 800cd46:	9905      	ldr	r1, [sp, #20]
 800cd48:	2a20      	cmp	r2, #32
 800cd4a:	d818      	bhi.n	800cd7e <__hexnan+0x7e>
 800cd4c:	9b02      	ldr	r3, [sp, #8]
 800cd4e:	459b      	cmp	fp, r3
 800cd50:	dd13      	ble.n	800cd7a <__hexnan+0x7a>
 800cd52:	454c      	cmp	r4, r9
 800cd54:	d206      	bcs.n	800cd64 <__hexnan+0x64>
 800cd56:	2d07      	cmp	r5, #7
 800cd58:	dc04      	bgt.n	800cd64 <__hexnan+0x64>
 800cd5a:	462a      	mov	r2, r5
 800cd5c:	4649      	mov	r1, r9
 800cd5e:	4620      	mov	r0, r4
 800cd60:	f7ff ffa8 	bl	800ccb4 <L_shift>
 800cd64:	4544      	cmp	r4, r8
 800cd66:	d950      	bls.n	800ce0a <__hexnan+0x10a>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	f1a4 0904 	sub.w	r9, r4, #4
 800cd6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800cd72:	f8cd b008 	str.w	fp, [sp, #8]
 800cd76:	464c      	mov	r4, r9
 800cd78:	461d      	mov	r5, r3
 800cd7a:	9903      	ldr	r1, [sp, #12]
 800cd7c:	e7d7      	b.n	800cd2e <__hexnan+0x2e>
 800cd7e:	2a29      	cmp	r2, #41	; 0x29
 800cd80:	d155      	bne.n	800ce2e <__hexnan+0x12e>
 800cd82:	3102      	adds	r1, #2
 800cd84:	f8ca 1000 	str.w	r1, [sl]
 800cd88:	f1bb 0f00 	cmp.w	fp, #0
 800cd8c:	d04f      	beq.n	800ce2e <__hexnan+0x12e>
 800cd8e:	454c      	cmp	r4, r9
 800cd90:	d206      	bcs.n	800cda0 <__hexnan+0xa0>
 800cd92:	2d07      	cmp	r5, #7
 800cd94:	dc04      	bgt.n	800cda0 <__hexnan+0xa0>
 800cd96:	462a      	mov	r2, r5
 800cd98:	4649      	mov	r1, r9
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f7ff ff8a 	bl	800ccb4 <L_shift>
 800cda0:	4544      	cmp	r4, r8
 800cda2:	d934      	bls.n	800ce0e <__hexnan+0x10e>
 800cda4:	f1a8 0204 	sub.w	r2, r8, #4
 800cda8:	4623      	mov	r3, r4
 800cdaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800cdae:	f842 1f04 	str.w	r1, [r2, #4]!
 800cdb2:	429f      	cmp	r7, r3
 800cdb4:	d2f9      	bcs.n	800cdaa <__hexnan+0xaa>
 800cdb6:	1b3b      	subs	r3, r7, r4
 800cdb8:	f023 0303 	bic.w	r3, r3, #3
 800cdbc:	3304      	adds	r3, #4
 800cdbe:	3e03      	subs	r6, #3
 800cdc0:	3401      	adds	r4, #1
 800cdc2:	42a6      	cmp	r6, r4
 800cdc4:	bf38      	it	cc
 800cdc6:	2304      	movcc	r3, #4
 800cdc8:	4443      	add	r3, r8
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f843 2b04 	str.w	r2, [r3], #4
 800cdd0:	429f      	cmp	r7, r3
 800cdd2:	d2fb      	bcs.n	800cdcc <__hexnan+0xcc>
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	b91b      	cbnz	r3, 800cde0 <__hexnan+0xe0>
 800cdd8:	4547      	cmp	r7, r8
 800cdda:	d126      	bne.n	800ce2a <__hexnan+0x12a>
 800cddc:	2301      	movs	r3, #1
 800cdde:	603b      	str	r3, [r7, #0]
 800cde0:	2005      	movs	r0, #5
 800cde2:	e025      	b.n	800ce30 <__hexnan+0x130>
 800cde4:	3501      	adds	r5, #1
 800cde6:	2d08      	cmp	r5, #8
 800cde8:	f10b 0b01 	add.w	fp, fp, #1
 800cdec:	dd06      	ble.n	800cdfc <__hexnan+0xfc>
 800cdee:	4544      	cmp	r4, r8
 800cdf0:	d9c3      	bls.n	800cd7a <__hexnan+0x7a>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdf8:	2501      	movs	r5, #1
 800cdfa:	3c04      	subs	r4, #4
 800cdfc:	6822      	ldr	r2, [r4, #0]
 800cdfe:	f000 000f 	and.w	r0, r0, #15
 800ce02:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ce06:	6020      	str	r0, [r4, #0]
 800ce08:	e7b7      	b.n	800cd7a <__hexnan+0x7a>
 800ce0a:	2508      	movs	r5, #8
 800ce0c:	e7b5      	b.n	800cd7a <__hexnan+0x7a>
 800ce0e:	9b01      	ldr	r3, [sp, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d0df      	beq.n	800cdd4 <__hexnan+0xd4>
 800ce14:	f1c3 0320 	rsb	r3, r3, #32
 800ce18:	f04f 32ff 	mov.w	r2, #4294967295
 800ce1c:	40da      	lsrs	r2, r3
 800ce1e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ce22:	4013      	ands	r3, r2
 800ce24:	f846 3c04 	str.w	r3, [r6, #-4]
 800ce28:	e7d4      	b.n	800cdd4 <__hexnan+0xd4>
 800ce2a:	3f04      	subs	r7, #4
 800ce2c:	e7d2      	b.n	800cdd4 <__hexnan+0xd4>
 800ce2e:	2004      	movs	r0, #4
 800ce30:	b007      	add	sp, #28
 800ce32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce36 <__ascii_mbtowc>:
 800ce36:	b082      	sub	sp, #8
 800ce38:	b901      	cbnz	r1, 800ce3c <__ascii_mbtowc+0x6>
 800ce3a:	a901      	add	r1, sp, #4
 800ce3c:	b142      	cbz	r2, 800ce50 <__ascii_mbtowc+0x1a>
 800ce3e:	b14b      	cbz	r3, 800ce54 <__ascii_mbtowc+0x1e>
 800ce40:	7813      	ldrb	r3, [r2, #0]
 800ce42:	600b      	str	r3, [r1, #0]
 800ce44:	7812      	ldrb	r2, [r2, #0]
 800ce46:	1e10      	subs	r0, r2, #0
 800ce48:	bf18      	it	ne
 800ce4a:	2001      	movne	r0, #1
 800ce4c:	b002      	add	sp, #8
 800ce4e:	4770      	bx	lr
 800ce50:	4610      	mov	r0, r2
 800ce52:	e7fb      	b.n	800ce4c <__ascii_mbtowc+0x16>
 800ce54:	f06f 0001 	mvn.w	r0, #1
 800ce58:	e7f8      	b.n	800ce4c <__ascii_mbtowc+0x16>

0800ce5a <_realloc_r>:
 800ce5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5e:	4680      	mov	r8, r0
 800ce60:	4614      	mov	r4, r2
 800ce62:	460e      	mov	r6, r1
 800ce64:	b921      	cbnz	r1, 800ce70 <_realloc_r+0x16>
 800ce66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce6a:	4611      	mov	r1, r2
 800ce6c:	f7fd baaa 	b.w	800a3c4 <_malloc_r>
 800ce70:	b92a      	cbnz	r2, 800ce7e <_realloc_r+0x24>
 800ce72:	f7fd fa33 	bl	800a2dc <_free_r>
 800ce76:	4625      	mov	r5, r4
 800ce78:	4628      	mov	r0, r5
 800ce7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce7e:	f000 f8b6 	bl	800cfee <_malloc_usable_size_r>
 800ce82:	4284      	cmp	r4, r0
 800ce84:	4607      	mov	r7, r0
 800ce86:	d802      	bhi.n	800ce8e <_realloc_r+0x34>
 800ce88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce8c:	d812      	bhi.n	800ceb4 <_realloc_r+0x5a>
 800ce8e:	4621      	mov	r1, r4
 800ce90:	4640      	mov	r0, r8
 800ce92:	f7fd fa97 	bl	800a3c4 <_malloc_r>
 800ce96:	4605      	mov	r5, r0
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d0ed      	beq.n	800ce78 <_realloc_r+0x1e>
 800ce9c:	42bc      	cmp	r4, r7
 800ce9e:	4622      	mov	r2, r4
 800cea0:	4631      	mov	r1, r6
 800cea2:	bf28      	it	cs
 800cea4:	463a      	movcs	r2, r7
 800cea6:	f7fc fb88 	bl	80095ba <memcpy>
 800ceaa:	4631      	mov	r1, r6
 800ceac:	4640      	mov	r0, r8
 800ceae:	f7fd fa15 	bl	800a2dc <_free_r>
 800ceb2:	e7e1      	b.n	800ce78 <_realloc_r+0x1e>
 800ceb4:	4635      	mov	r5, r6
 800ceb6:	e7df      	b.n	800ce78 <_realloc_r+0x1e>

0800ceb8 <_strtoul_l.constprop.0>:
 800ceb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cebc:	4f36      	ldr	r7, [pc, #216]	; (800cf98 <_strtoul_l.constprop.0+0xe0>)
 800cebe:	4686      	mov	lr, r0
 800cec0:	460d      	mov	r5, r1
 800cec2:	4628      	mov	r0, r5
 800cec4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cec8:	5d3e      	ldrb	r6, [r7, r4]
 800ceca:	f016 0608 	ands.w	r6, r6, #8
 800cece:	d1f8      	bne.n	800cec2 <_strtoul_l.constprop.0+0xa>
 800ced0:	2c2d      	cmp	r4, #45	; 0x2d
 800ced2:	d130      	bne.n	800cf36 <_strtoul_l.constprop.0+0x7e>
 800ced4:	782c      	ldrb	r4, [r5, #0]
 800ced6:	2601      	movs	r6, #1
 800ced8:	1c85      	adds	r5, r0, #2
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d057      	beq.n	800cf8e <_strtoul_l.constprop.0+0xd6>
 800cede:	2b10      	cmp	r3, #16
 800cee0:	d109      	bne.n	800cef6 <_strtoul_l.constprop.0+0x3e>
 800cee2:	2c30      	cmp	r4, #48	; 0x30
 800cee4:	d107      	bne.n	800cef6 <_strtoul_l.constprop.0+0x3e>
 800cee6:	7828      	ldrb	r0, [r5, #0]
 800cee8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ceec:	2858      	cmp	r0, #88	; 0x58
 800ceee:	d149      	bne.n	800cf84 <_strtoul_l.constprop.0+0xcc>
 800cef0:	786c      	ldrb	r4, [r5, #1]
 800cef2:	2310      	movs	r3, #16
 800cef4:	3502      	adds	r5, #2
 800cef6:	f04f 38ff 	mov.w	r8, #4294967295
 800cefa:	2700      	movs	r7, #0
 800cefc:	fbb8 f8f3 	udiv	r8, r8, r3
 800cf00:	fb03 f908 	mul.w	r9, r3, r8
 800cf04:	ea6f 0909 	mvn.w	r9, r9
 800cf08:	4638      	mov	r0, r7
 800cf0a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cf0e:	f1bc 0f09 	cmp.w	ip, #9
 800cf12:	d815      	bhi.n	800cf40 <_strtoul_l.constprop.0+0x88>
 800cf14:	4664      	mov	r4, ip
 800cf16:	42a3      	cmp	r3, r4
 800cf18:	dd23      	ble.n	800cf62 <_strtoul_l.constprop.0+0xaa>
 800cf1a:	f1b7 3fff 	cmp.w	r7, #4294967295
 800cf1e:	d007      	beq.n	800cf30 <_strtoul_l.constprop.0+0x78>
 800cf20:	4580      	cmp	r8, r0
 800cf22:	d31b      	bcc.n	800cf5c <_strtoul_l.constprop.0+0xa4>
 800cf24:	d101      	bne.n	800cf2a <_strtoul_l.constprop.0+0x72>
 800cf26:	45a1      	cmp	r9, r4
 800cf28:	db18      	blt.n	800cf5c <_strtoul_l.constprop.0+0xa4>
 800cf2a:	fb00 4003 	mla	r0, r0, r3, r4
 800cf2e:	2701      	movs	r7, #1
 800cf30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf34:	e7e9      	b.n	800cf0a <_strtoul_l.constprop.0+0x52>
 800cf36:	2c2b      	cmp	r4, #43	; 0x2b
 800cf38:	bf04      	itt	eq
 800cf3a:	782c      	ldrbeq	r4, [r5, #0]
 800cf3c:	1c85      	addeq	r5, r0, #2
 800cf3e:	e7cc      	b.n	800ceda <_strtoul_l.constprop.0+0x22>
 800cf40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cf44:	f1bc 0f19 	cmp.w	ip, #25
 800cf48:	d801      	bhi.n	800cf4e <_strtoul_l.constprop.0+0x96>
 800cf4a:	3c37      	subs	r4, #55	; 0x37
 800cf4c:	e7e3      	b.n	800cf16 <_strtoul_l.constprop.0+0x5e>
 800cf4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cf52:	f1bc 0f19 	cmp.w	ip, #25
 800cf56:	d804      	bhi.n	800cf62 <_strtoul_l.constprop.0+0xaa>
 800cf58:	3c57      	subs	r4, #87	; 0x57
 800cf5a:	e7dc      	b.n	800cf16 <_strtoul_l.constprop.0+0x5e>
 800cf5c:	f04f 37ff 	mov.w	r7, #4294967295
 800cf60:	e7e6      	b.n	800cf30 <_strtoul_l.constprop.0+0x78>
 800cf62:	1c7b      	adds	r3, r7, #1
 800cf64:	d106      	bne.n	800cf74 <_strtoul_l.constprop.0+0xbc>
 800cf66:	2322      	movs	r3, #34	; 0x22
 800cf68:	f8ce 3000 	str.w	r3, [lr]
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	b932      	cbnz	r2, 800cf7e <_strtoul_l.constprop.0+0xc6>
 800cf70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf74:	b106      	cbz	r6, 800cf78 <_strtoul_l.constprop.0+0xc0>
 800cf76:	4240      	negs	r0, r0
 800cf78:	2a00      	cmp	r2, #0
 800cf7a:	d0f9      	beq.n	800cf70 <_strtoul_l.constprop.0+0xb8>
 800cf7c:	b107      	cbz	r7, 800cf80 <_strtoul_l.constprop.0+0xc8>
 800cf7e:	1e69      	subs	r1, r5, #1
 800cf80:	6011      	str	r1, [r2, #0]
 800cf82:	e7f5      	b.n	800cf70 <_strtoul_l.constprop.0+0xb8>
 800cf84:	2430      	movs	r4, #48	; 0x30
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d1b5      	bne.n	800cef6 <_strtoul_l.constprop.0+0x3e>
 800cf8a:	2308      	movs	r3, #8
 800cf8c:	e7b3      	b.n	800cef6 <_strtoul_l.constprop.0+0x3e>
 800cf8e:	2c30      	cmp	r4, #48	; 0x30
 800cf90:	d0a9      	beq.n	800cee6 <_strtoul_l.constprop.0+0x2e>
 800cf92:	230a      	movs	r3, #10
 800cf94:	e7af      	b.n	800cef6 <_strtoul_l.constprop.0+0x3e>
 800cf96:	bf00      	nop
 800cf98:	0800d8f1 	.word	0x0800d8f1

0800cf9c <_strtoul_r>:
 800cf9c:	f7ff bf8c 	b.w	800ceb8 <_strtoul_l.constprop.0>

0800cfa0 <__ascii_wctomb>:
 800cfa0:	b149      	cbz	r1, 800cfb6 <__ascii_wctomb+0x16>
 800cfa2:	2aff      	cmp	r2, #255	; 0xff
 800cfa4:	bf85      	ittet	hi
 800cfa6:	238a      	movhi	r3, #138	; 0x8a
 800cfa8:	6003      	strhi	r3, [r0, #0]
 800cfaa:	700a      	strbls	r2, [r1, #0]
 800cfac:	f04f 30ff 	movhi.w	r0, #4294967295
 800cfb0:	bf98      	it	ls
 800cfb2:	2001      	movls	r0, #1
 800cfb4:	4770      	bx	lr
 800cfb6:	4608      	mov	r0, r1
 800cfb8:	4770      	bx	lr
	...

0800cfbc <fiprintf>:
 800cfbc:	b40e      	push	{r1, r2, r3}
 800cfbe:	b503      	push	{r0, r1, lr}
 800cfc0:	4601      	mov	r1, r0
 800cfc2:	ab03      	add	r3, sp, #12
 800cfc4:	4805      	ldr	r0, [pc, #20]	; (800cfdc <fiprintf+0x20>)
 800cfc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfca:	6800      	ldr	r0, [r0, #0]
 800cfcc:	9301      	str	r3, [sp, #4]
 800cfce:	f000 f83f 	bl	800d050 <_vfiprintf_r>
 800cfd2:	b002      	add	sp, #8
 800cfd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cfd8:	b003      	add	sp, #12
 800cfda:	4770      	bx	lr
 800cfdc:	20000060 	.word	0x20000060

0800cfe0 <abort>:
 800cfe0:	b508      	push	{r3, lr}
 800cfe2:	2006      	movs	r0, #6
 800cfe4:	f000 fa0c 	bl	800d400 <raise>
 800cfe8:	2001      	movs	r0, #1
 800cfea:	f7f5 fd23 	bl	8002a34 <_exit>

0800cfee <_malloc_usable_size_r>:
 800cfee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cff2:	1f18      	subs	r0, r3, #4
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	bfbc      	itt	lt
 800cff8:	580b      	ldrlt	r3, [r1, r0]
 800cffa:	18c0      	addlt	r0, r0, r3
 800cffc:	4770      	bx	lr

0800cffe <__sfputc_r>:
 800cffe:	6893      	ldr	r3, [r2, #8]
 800d000:	3b01      	subs	r3, #1
 800d002:	2b00      	cmp	r3, #0
 800d004:	b410      	push	{r4}
 800d006:	6093      	str	r3, [r2, #8]
 800d008:	da08      	bge.n	800d01c <__sfputc_r+0x1e>
 800d00a:	6994      	ldr	r4, [r2, #24]
 800d00c:	42a3      	cmp	r3, r4
 800d00e:	db01      	blt.n	800d014 <__sfputc_r+0x16>
 800d010:	290a      	cmp	r1, #10
 800d012:	d103      	bne.n	800d01c <__sfputc_r+0x1e>
 800d014:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d018:	f000 b934 	b.w	800d284 <__swbuf_r>
 800d01c:	6813      	ldr	r3, [r2, #0]
 800d01e:	1c58      	adds	r0, r3, #1
 800d020:	6010      	str	r0, [r2, #0]
 800d022:	7019      	strb	r1, [r3, #0]
 800d024:	4608      	mov	r0, r1
 800d026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <__sfputs_r>:
 800d02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d02e:	4606      	mov	r6, r0
 800d030:	460f      	mov	r7, r1
 800d032:	4614      	mov	r4, r2
 800d034:	18d5      	adds	r5, r2, r3
 800d036:	42ac      	cmp	r4, r5
 800d038:	d101      	bne.n	800d03e <__sfputs_r+0x12>
 800d03a:	2000      	movs	r0, #0
 800d03c:	e007      	b.n	800d04e <__sfputs_r+0x22>
 800d03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d042:	463a      	mov	r2, r7
 800d044:	4630      	mov	r0, r6
 800d046:	f7ff ffda 	bl	800cffe <__sfputc_r>
 800d04a:	1c43      	adds	r3, r0, #1
 800d04c:	d1f3      	bne.n	800d036 <__sfputs_r+0xa>
 800d04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d050 <_vfiprintf_r>:
 800d050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d054:	460d      	mov	r5, r1
 800d056:	b09d      	sub	sp, #116	; 0x74
 800d058:	4614      	mov	r4, r2
 800d05a:	4698      	mov	r8, r3
 800d05c:	4606      	mov	r6, r0
 800d05e:	b118      	cbz	r0, 800d068 <_vfiprintf_r+0x18>
 800d060:	6a03      	ldr	r3, [r0, #32]
 800d062:	b90b      	cbnz	r3, 800d068 <_vfiprintf_r+0x18>
 800d064:	f7fc f954 	bl	8009310 <__sinit>
 800d068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d06a:	07d9      	lsls	r1, r3, #31
 800d06c:	d405      	bmi.n	800d07a <_vfiprintf_r+0x2a>
 800d06e:	89ab      	ldrh	r3, [r5, #12]
 800d070:	059a      	lsls	r2, r3, #22
 800d072:	d402      	bmi.n	800d07a <_vfiprintf_r+0x2a>
 800d074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d076:	f7fc fa9e 	bl	80095b6 <__retarget_lock_acquire_recursive>
 800d07a:	89ab      	ldrh	r3, [r5, #12]
 800d07c:	071b      	lsls	r3, r3, #28
 800d07e:	d501      	bpl.n	800d084 <_vfiprintf_r+0x34>
 800d080:	692b      	ldr	r3, [r5, #16]
 800d082:	b99b      	cbnz	r3, 800d0ac <_vfiprintf_r+0x5c>
 800d084:	4629      	mov	r1, r5
 800d086:	4630      	mov	r0, r6
 800d088:	f000 f93a 	bl	800d300 <__swsetup_r>
 800d08c:	b170      	cbz	r0, 800d0ac <_vfiprintf_r+0x5c>
 800d08e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d090:	07dc      	lsls	r4, r3, #31
 800d092:	d504      	bpl.n	800d09e <_vfiprintf_r+0x4e>
 800d094:	f04f 30ff 	mov.w	r0, #4294967295
 800d098:	b01d      	add	sp, #116	; 0x74
 800d09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09e:	89ab      	ldrh	r3, [r5, #12]
 800d0a0:	0598      	lsls	r0, r3, #22
 800d0a2:	d4f7      	bmi.n	800d094 <_vfiprintf_r+0x44>
 800d0a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0a6:	f7fc fa87 	bl	80095b8 <__retarget_lock_release_recursive>
 800d0aa:	e7f3      	b.n	800d094 <_vfiprintf_r+0x44>
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d0b0:	2320      	movs	r3, #32
 800d0b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0ba:	2330      	movs	r3, #48	; 0x30
 800d0bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d270 <_vfiprintf_r+0x220>
 800d0c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0c4:	f04f 0901 	mov.w	r9, #1
 800d0c8:	4623      	mov	r3, r4
 800d0ca:	469a      	mov	sl, r3
 800d0cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0d0:	b10a      	cbz	r2, 800d0d6 <_vfiprintf_r+0x86>
 800d0d2:	2a25      	cmp	r2, #37	; 0x25
 800d0d4:	d1f9      	bne.n	800d0ca <_vfiprintf_r+0x7a>
 800d0d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d0da:	d00b      	beq.n	800d0f4 <_vfiprintf_r+0xa4>
 800d0dc:	465b      	mov	r3, fp
 800d0de:	4622      	mov	r2, r4
 800d0e0:	4629      	mov	r1, r5
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	f7ff ffa2 	bl	800d02c <__sfputs_r>
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	f000 80a9 	beq.w	800d240 <_vfiprintf_r+0x1f0>
 800d0ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d0f0:	445a      	add	r2, fp
 800d0f2:	9209      	str	r2, [sp, #36]	; 0x24
 800d0f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	f000 80a1 	beq.w	800d240 <_vfiprintf_r+0x1f0>
 800d0fe:	2300      	movs	r3, #0
 800d100:	f04f 32ff 	mov.w	r2, #4294967295
 800d104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d108:	f10a 0a01 	add.w	sl, sl, #1
 800d10c:	9304      	str	r3, [sp, #16]
 800d10e:	9307      	str	r3, [sp, #28]
 800d110:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d114:	931a      	str	r3, [sp, #104]	; 0x68
 800d116:	4654      	mov	r4, sl
 800d118:	2205      	movs	r2, #5
 800d11a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d11e:	4854      	ldr	r0, [pc, #336]	; (800d270 <_vfiprintf_r+0x220>)
 800d120:	f7f3 f87e 	bl	8000220 <memchr>
 800d124:	9a04      	ldr	r2, [sp, #16]
 800d126:	b9d8      	cbnz	r0, 800d160 <_vfiprintf_r+0x110>
 800d128:	06d1      	lsls	r1, r2, #27
 800d12a:	bf44      	itt	mi
 800d12c:	2320      	movmi	r3, #32
 800d12e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d132:	0713      	lsls	r3, r2, #28
 800d134:	bf44      	itt	mi
 800d136:	232b      	movmi	r3, #43	; 0x2b
 800d138:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d13c:	f89a 3000 	ldrb.w	r3, [sl]
 800d140:	2b2a      	cmp	r3, #42	; 0x2a
 800d142:	d015      	beq.n	800d170 <_vfiprintf_r+0x120>
 800d144:	9a07      	ldr	r2, [sp, #28]
 800d146:	4654      	mov	r4, sl
 800d148:	2000      	movs	r0, #0
 800d14a:	f04f 0c0a 	mov.w	ip, #10
 800d14e:	4621      	mov	r1, r4
 800d150:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d154:	3b30      	subs	r3, #48	; 0x30
 800d156:	2b09      	cmp	r3, #9
 800d158:	d94d      	bls.n	800d1f6 <_vfiprintf_r+0x1a6>
 800d15a:	b1b0      	cbz	r0, 800d18a <_vfiprintf_r+0x13a>
 800d15c:	9207      	str	r2, [sp, #28]
 800d15e:	e014      	b.n	800d18a <_vfiprintf_r+0x13a>
 800d160:	eba0 0308 	sub.w	r3, r0, r8
 800d164:	fa09 f303 	lsl.w	r3, r9, r3
 800d168:	4313      	orrs	r3, r2
 800d16a:	9304      	str	r3, [sp, #16]
 800d16c:	46a2      	mov	sl, r4
 800d16e:	e7d2      	b.n	800d116 <_vfiprintf_r+0xc6>
 800d170:	9b03      	ldr	r3, [sp, #12]
 800d172:	1d19      	adds	r1, r3, #4
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	9103      	str	r1, [sp, #12]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	bfbb      	ittet	lt
 800d17c:	425b      	neglt	r3, r3
 800d17e:	f042 0202 	orrlt.w	r2, r2, #2
 800d182:	9307      	strge	r3, [sp, #28]
 800d184:	9307      	strlt	r3, [sp, #28]
 800d186:	bfb8      	it	lt
 800d188:	9204      	strlt	r2, [sp, #16]
 800d18a:	7823      	ldrb	r3, [r4, #0]
 800d18c:	2b2e      	cmp	r3, #46	; 0x2e
 800d18e:	d10c      	bne.n	800d1aa <_vfiprintf_r+0x15a>
 800d190:	7863      	ldrb	r3, [r4, #1]
 800d192:	2b2a      	cmp	r3, #42	; 0x2a
 800d194:	d134      	bne.n	800d200 <_vfiprintf_r+0x1b0>
 800d196:	9b03      	ldr	r3, [sp, #12]
 800d198:	1d1a      	adds	r2, r3, #4
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	9203      	str	r2, [sp, #12]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	bfb8      	it	lt
 800d1a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1a6:	3402      	adds	r4, #2
 800d1a8:	9305      	str	r3, [sp, #20]
 800d1aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d280 <_vfiprintf_r+0x230>
 800d1ae:	7821      	ldrb	r1, [r4, #0]
 800d1b0:	2203      	movs	r2, #3
 800d1b2:	4650      	mov	r0, sl
 800d1b4:	f7f3 f834 	bl	8000220 <memchr>
 800d1b8:	b138      	cbz	r0, 800d1ca <_vfiprintf_r+0x17a>
 800d1ba:	9b04      	ldr	r3, [sp, #16]
 800d1bc:	eba0 000a 	sub.w	r0, r0, sl
 800d1c0:	2240      	movs	r2, #64	; 0x40
 800d1c2:	4082      	lsls	r2, r0
 800d1c4:	4313      	orrs	r3, r2
 800d1c6:	3401      	adds	r4, #1
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1ce:	4829      	ldr	r0, [pc, #164]	; (800d274 <_vfiprintf_r+0x224>)
 800d1d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1d4:	2206      	movs	r2, #6
 800d1d6:	f7f3 f823 	bl	8000220 <memchr>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	d03f      	beq.n	800d25e <_vfiprintf_r+0x20e>
 800d1de:	4b26      	ldr	r3, [pc, #152]	; (800d278 <_vfiprintf_r+0x228>)
 800d1e0:	bb1b      	cbnz	r3, 800d22a <_vfiprintf_r+0x1da>
 800d1e2:	9b03      	ldr	r3, [sp, #12]
 800d1e4:	3307      	adds	r3, #7
 800d1e6:	f023 0307 	bic.w	r3, r3, #7
 800d1ea:	3308      	adds	r3, #8
 800d1ec:	9303      	str	r3, [sp, #12]
 800d1ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1f0:	443b      	add	r3, r7
 800d1f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d1f4:	e768      	b.n	800d0c8 <_vfiprintf_r+0x78>
 800d1f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d1fa:	460c      	mov	r4, r1
 800d1fc:	2001      	movs	r0, #1
 800d1fe:	e7a6      	b.n	800d14e <_vfiprintf_r+0xfe>
 800d200:	2300      	movs	r3, #0
 800d202:	3401      	adds	r4, #1
 800d204:	9305      	str	r3, [sp, #20]
 800d206:	4619      	mov	r1, r3
 800d208:	f04f 0c0a 	mov.w	ip, #10
 800d20c:	4620      	mov	r0, r4
 800d20e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d212:	3a30      	subs	r2, #48	; 0x30
 800d214:	2a09      	cmp	r2, #9
 800d216:	d903      	bls.n	800d220 <_vfiprintf_r+0x1d0>
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d0c6      	beq.n	800d1aa <_vfiprintf_r+0x15a>
 800d21c:	9105      	str	r1, [sp, #20]
 800d21e:	e7c4      	b.n	800d1aa <_vfiprintf_r+0x15a>
 800d220:	fb0c 2101 	mla	r1, ip, r1, r2
 800d224:	4604      	mov	r4, r0
 800d226:	2301      	movs	r3, #1
 800d228:	e7f0      	b.n	800d20c <_vfiprintf_r+0x1bc>
 800d22a:	ab03      	add	r3, sp, #12
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	462a      	mov	r2, r5
 800d230:	4b12      	ldr	r3, [pc, #72]	; (800d27c <_vfiprintf_r+0x22c>)
 800d232:	a904      	add	r1, sp, #16
 800d234:	4630      	mov	r0, r6
 800d236:	f7fb fa09 	bl	800864c <_printf_float>
 800d23a:	4607      	mov	r7, r0
 800d23c:	1c78      	adds	r0, r7, #1
 800d23e:	d1d6      	bne.n	800d1ee <_vfiprintf_r+0x19e>
 800d240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d242:	07d9      	lsls	r1, r3, #31
 800d244:	d405      	bmi.n	800d252 <_vfiprintf_r+0x202>
 800d246:	89ab      	ldrh	r3, [r5, #12]
 800d248:	059a      	lsls	r2, r3, #22
 800d24a:	d402      	bmi.n	800d252 <_vfiprintf_r+0x202>
 800d24c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d24e:	f7fc f9b3 	bl	80095b8 <__retarget_lock_release_recursive>
 800d252:	89ab      	ldrh	r3, [r5, #12]
 800d254:	065b      	lsls	r3, r3, #25
 800d256:	f53f af1d 	bmi.w	800d094 <_vfiprintf_r+0x44>
 800d25a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d25c:	e71c      	b.n	800d098 <_vfiprintf_r+0x48>
 800d25e:	ab03      	add	r3, sp, #12
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	462a      	mov	r2, r5
 800d264:	4b05      	ldr	r3, [pc, #20]	; (800d27c <_vfiprintf_r+0x22c>)
 800d266:	a904      	add	r1, sp, #16
 800d268:	4630      	mov	r0, r6
 800d26a:	f7fb fc93 	bl	8008b94 <_printf_i>
 800d26e:	e7e4      	b.n	800d23a <_vfiprintf_r+0x1ea>
 800d270:	0800d9f1 	.word	0x0800d9f1
 800d274:	0800d9fb 	.word	0x0800d9fb
 800d278:	0800864d 	.word	0x0800864d
 800d27c:	0800d02d 	.word	0x0800d02d
 800d280:	0800d9f7 	.word	0x0800d9f7

0800d284 <__swbuf_r>:
 800d284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d286:	460e      	mov	r6, r1
 800d288:	4614      	mov	r4, r2
 800d28a:	4605      	mov	r5, r0
 800d28c:	b118      	cbz	r0, 800d296 <__swbuf_r+0x12>
 800d28e:	6a03      	ldr	r3, [r0, #32]
 800d290:	b90b      	cbnz	r3, 800d296 <__swbuf_r+0x12>
 800d292:	f7fc f83d 	bl	8009310 <__sinit>
 800d296:	69a3      	ldr	r3, [r4, #24]
 800d298:	60a3      	str	r3, [r4, #8]
 800d29a:	89a3      	ldrh	r3, [r4, #12]
 800d29c:	071a      	lsls	r2, r3, #28
 800d29e:	d525      	bpl.n	800d2ec <__swbuf_r+0x68>
 800d2a0:	6923      	ldr	r3, [r4, #16]
 800d2a2:	b31b      	cbz	r3, 800d2ec <__swbuf_r+0x68>
 800d2a4:	6823      	ldr	r3, [r4, #0]
 800d2a6:	6922      	ldr	r2, [r4, #16]
 800d2a8:	1a98      	subs	r0, r3, r2
 800d2aa:	6963      	ldr	r3, [r4, #20]
 800d2ac:	b2f6      	uxtb	r6, r6
 800d2ae:	4283      	cmp	r3, r0
 800d2b0:	4637      	mov	r7, r6
 800d2b2:	dc04      	bgt.n	800d2be <__swbuf_r+0x3a>
 800d2b4:	4621      	mov	r1, r4
 800d2b6:	4628      	mov	r0, r5
 800d2b8:	f7ff f952 	bl	800c560 <_fflush_r>
 800d2bc:	b9e0      	cbnz	r0, 800d2f8 <__swbuf_r+0x74>
 800d2be:	68a3      	ldr	r3, [r4, #8]
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	60a3      	str	r3, [r4, #8]
 800d2c4:	6823      	ldr	r3, [r4, #0]
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	6022      	str	r2, [r4, #0]
 800d2ca:	701e      	strb	r6, [r3, #0]
 800d2cc:	6962      	ldr	r2, [r4, #20]
 800d2ce:	1c43      	adds	r3, r0, #1
 800d2d0:	429a      	cmp	r2, r3
 800d2d2:	d004      	beq.n	800d2de <__swbuf_r+0x5a>
 800d2d4:	89a3      	ldrh	r3, [r4, #12]
 800d2d6:	07db      	lsls	r3, r3, #31
 800d2d8:	d506      	bpl.n	800d2e8 <__swbuf_r+0x64>
 800d2da:	2e0a      	cmp	r6, #10
 800d2dc:	d104      	bne.n	800d2e8 <__swbuf_r+0x64>
 800d2de:	4621      	mov	r1, r4
 800d2e0:	4628      	mov	r0, r5
 800d2e2:	f7ff f93d 	bl	800c560 <_fflush_r>
 800d2e6:	b938      	cbnz	r0, 800d2f8 <__swbuf_r+0x74>
 800d2e8:	4638      	mov	r0, r7
 800d2ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4628      	mov	r0, r5
 800d2f0:	f000 f806 	bl	800d300 <__swsetup_r>
 800d2f4:	2800      	cmp	r0, #0
 800d2f6:	d0d5      	beq.n	800d2a4 <__swbuf_r+0x20>
 800d2f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d2fc:	e7f4      	b.n	800d2e8 <__swbuf_r+0x64>
	...

0800d300 <__swsetup_r>:
 800d300:	b538      	push	{r3, r4, r5, lr}
 800d302:	4b2a      	ldr	r3, [pc, #168]	; (800d3ac <__swsetup_r+0xac>)
 800d304:	4605      	mov	r5, r0
 800d306:	6818      	ldr	r0, [r3, #0]
 800d308:	460c      	mov	r4, r1
 800d30a:	b118      	cbz	r0, 800d314 <__swsetup_r+0x14>
 800d30c:	6a03      	ldr	r3, [r0, #32]
 800d30e:	b90b      	cbnz	r3, 800d314 <__swsetup_r+0x14>
 800d310:	f7fb fffe 	bl	8009310 <__sinit>
 800d314:	89a3      	ldrh	r3, [r4, #12]
 800d316:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d31a:	0718      	lsls	r0, r3, #28
 800d31c:	d422      	bmi.n	800d364 <__swsetup_r+0x64>
 800d31e:	06d9      	lsls	r1, r3, #27
 800d320:	d407      	bmi.n	800d332 <__swsetup_r+0x32>
 800d322:	2309      	movs	r3, #9
 800d324:	602b      	str	r3, [r5, #0]
 800d326:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d32a:	81a3      	strh	r3, [r4, #12]
 800d32c:	f04f 30ff 	mov.w	r0, #4294967295
 800d330:	e034      	b.n	800d39c <__swsetup_r+0x9c>
 800d332:	0758      	lsls	r0, r3, #29
 800d334:	d512      	bpl.n	800d35c <__swsetup_r+0x5c>
 800d336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d338:	b141      	cbz	r1, 800d34c <__swsetup_r+0x4c>
 800d33a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d33e:	4299      	cmp	r1, r3
 800d340:	d002      	beq.n	800d348 <__swsetup_r+0x48>
 800d342:	4628      	mov	r0, r5
 800d344:	f7fc ffca 	bl	800a2dc <_free_r>
 800d348:	2300      	movs	r3, #0
 800d34a:	6363      	str	r3, [r4, #52]	; 0x34
 800d34c:	89a3      	ldrh	r3, [r4, #12]
 800d34e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d352:	81a3      	strh	r3, [r4, #12]
 800d354:	2300      	movs	r3, #0
 800d356:	6063      	str	r3, [r4, #4]
 800d358:	6923      	ldr	r3, [r4, #16]
 800d35a:	6023      	str	r3, [r4, #0]
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f043 0308 	orr.w	r3, r3, #8
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	6923      	ldr	r3, [r4, #16]
 800d366:	b94b      	cbnz	r3, 800d37c <__swsetup_r+0x7c>
 800d368:	89a3      	ldrh	r3, [r4, #12]
 800d36a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d36e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d372:	d003      	beq.n	800d37c <__swsetup_r+0x7c>
 800d374:	4621      	mov	r1, r4
 800d376:	4628      	mov	r0, r5
 800d378:	f000 f884 	bl	800d484 <__smakebuf_r>
 800d37c:	89a0      	ldrh	r0, [r4, #12]
 800d37e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d382:	f010 0301 	ands.w	r3, r0, #1
 800d386:	d00a      	beq.n	800d39e <__swsetup_r+0x9e>
 800d388:	2300      	movs	r3, #0
 800d38a:	60a3      	str	r3, [r4, #8]
 800d38c:	6963      	ldr	r3, [r4, #20]
 800d38e:	425b      	negs	r3, r3
 800d390:	61a3      	str	r3, [r4, #24]
 800d392:	6923      	ldr	r3, [r4, #16]
 800d394:	b943      	cbnz	r3, 800d3a8 <__swsetup_r+0xa8>
 800d396:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d39a:	d1c4      	bne.n	800d326 <__swsetup_r+0x26>
 800d39c:	bd38      	pop	{r3, r4, r5, pc}
 800d39e:	0781      	lsls	r1, r0, #30
 800d3a0:	bf58      	it	pl
 800d3a2:	6963      	ldrpl	r3, [r4, #20]
 800d3a4:	60a3      	str	r3, [r4, #8]
 800d3a6:	e7f4      	b.n	800d392 <__swsetup_r+0x92>
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	e7f7      	b.n	800d39c <__swsetup_r+0x9c>
 800d3ac:	20000060 	.word	0x20000060

0800d3b0 <_raise_r>:
 800d3b0:	291f      	cmp	r1, #31
 800d3b2:	b538      	push	{r3, r4, r5, lr}
 800d3b4:	4604      	mov	r4, r0
 800d3b6:	460d      	mov	r5, r1
 800d3b8:	d904      	bls.n	800d3c4 <_raise_r+0x14>
 800d3ba:	2316      	movs	r3, #22
 800d3bc:	6003      	str	r3, [r0, #0]
 800d3be:	f04f 30ff 	mov.w	r0, #4294967295
 800d3c2:	bd38      	pop	{r3, r4, r5, pc}
 800d3c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d3c6:	b112      	cbz	r2, 800d3ce <_raise_r+0x1e>
 800d3c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3cc:	b94b      	cbnz	r3, 800d3e2 <_raise_r+0x32>
 800d3ce:	4620      	mov	r0, r4
 800d3d0:	f000 f830 	bl	800d434 <_getpid_r>
 800d3d4:	462a      	mov	r2, r5
 800d3d6:	4601      	mov	r1, r0
 800d3d8:	4620      	mov	r0, r4
 800d3da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3de:	f000 b817 	b.w	800d410 <_kill_r>
 800d3e2:	2b01      	cmp	r3, #1
 800d3e4:	d00a      	beq.n	800d3fc <_raise_r+0x4c>
 800d3e6:	1c59      	adds	r1, r3, #1
 800d3e8:	d103      	bne.n	800d3f2 <_raise_r+0x42>
 800d3ea:	2316      	movs	r3, #22
 800d3ec:	6003      	str	r3, [r0, #0]
 800d3ee:	2001      	movs	r0, #1
 800d3f0:	e7e7      	b.n	800d3c2 <_raise_r+0x12>
 800d3f2:	2400      	movs	r4, #0
 800d3f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d3f8:	4628      	mov	r0, r5
 800d3fa:	4798      	blx	r3
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	e7e0      	b.n	800d3c2 <_raise_r+0x12>

0800d400 <raise>:
 800d400:	4b02      	ldr	r3, [pc, #8]	; (800d40c <raise+0xc>)
 800d402:	4601      	mov	r1, r0
 800d404:	6818      	ldr	r0, [r3, #0]
 800d406:	f7ff bfd3 	b.w	800d3b0 <_raise_r>
 800d40a:	bf00      	nop
 800d40c:	20000060 	.word	0x20000060

0800d410 <_kill_r>:
 800d410:	b538      	push	{r3, r4, r5, lr}
 800d412:	4d07      	ldr	r5, [pc, #28]	; (800d430 <_kill_r+0x20>)
 800d414:	2300      	movs	r3, #0
 800d416:	4604      	mov	r4, r0
 800d418:	4608      	mov	r0, r1
 800d41a:	4611      	mov	r1, r2
 800d41c:	602b      	str	r3, [r5, #0]
 800d41e:	f7f5 faf9 	bl	8002a14 <_kill>
 800d422:	1c43      	adds	r3, r0, #1
 800d424:	d102      	bne.n	800d42c <_kill_r+0x1c>
 800d426:	682b      	ldr	r3, [r5, #0]
 800d428:	b103      	cbz	r3, 800d42c <_kill_r+0x1c>
 800d42a:	6023      	str	r3, [r4, #0]
 800d42c:	bd38      	pop	{r3, r4, r5, pc}
 800d42e:	bf00      	nop
 800d430:	2000080c 	.word	0x2000080c

0800d434 <_getpid_r>:
 800d434:	f7f5 bae6 	b.w	8002a04 <_getpid>

0800d438 <__swhatbuf_r>:
 800d438:	b570      	push	{r4, r5, r6, lr}
 800d43a:	460c      	mov	r4, r1
 800d43c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d440:	2900      	cmp	r1, #0
 800d442:	b096      	sub	sp, #88	; 0x58
 800d444:	4615      	mov	r5, r2
 800d446:	461e      	mov	r6, r3
 800d448:	da0d      	bge.n	800d466 <__swhatbuf_r+0x2e>
 800d44a:	89a3      	ldrh	r3, [r4, #12]
 800d44c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d450:	f04f 0100 	mov.w	r1, #0
 800d454:	bf0c      	ite	eq
 800d456:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d45a:	2340      	movne	r3, #64	; 0x40
 800d45c:	2000      	movs	r0, #0
 800d45e:	6031      	str	r1, [r6, #0]
 800d460:	602b      	str	r3, [r5, #0]
 800d462:	b016      	add	sp, #88	; 0x58
 800d464:	bd70      	pop	{r4, r5, r6, pc}
 800d466:	466a      	mov	r2, sp
 800d468:	f000 f848 	bl	800d4fc <_fstat_r>
 800d46c:	2800      	cmp	r0, #0
 800d46e:	dbec      	blt.n	800d44a <__swhatbuf_r+0x12>
 800d470:	9901      	ldr	r1, [sp, #4]
 800d472:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d476:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d47a:	4259      	negs	r1, r3
 800d47c:	4159      	adcs	r1, r3
 800d47e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d482:	e7eb      	b.n	800d45c <__swhatbuf_r+0x24>

0800d484 <__smakebuf_r>:
 800d484:	898b      	ldrh	r3, [r1, #12]
 800d486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d488:	079d      	lsls	r5, r3, #30
 800d48a:	4606      	mov	r6, r0
 800d48c:	460c      	mov	r4, r1
 800d48e:	d507      	bpl.n	800d4a0 <__smakebuf_r+0x1c>
 800d490:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d494:	6023      	str	r3, [r4, #0]
 800d496:	6123      	str	r3, [r4, #16]
 800d498:	2301      	movs	r3, #1
 800d49a:	6163      	str	r3, [r4, #20]
 800d49c:	b002      	add	sp, #8
 800d49e:	bd70      	pop	{r4, r5, r6, pc}
 800d4a0:	ab01      	add	r3, sp, #4
 800d4a2:	466a      	mov	r2, sp
 800d4a4:	f7ff ffc8 	bl	800d438 <__swhatbuf_r>
 800d4a8:	9900      	ldr	r1, [sp, #0]
 800d4aa:	4605      	mov	r5, r0
 800d4ac:	4630      	mov	r0, r6
 800d4ae:	f7fc ff89 	bl	800a3c4 <_malloc_r>
 800d4b2:	b948      	cbnz	r0, 800d4c8 <__smakebuf_r+0x44>
 800d4b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4b8:	059a      	lsls	r2, r3, #22
 800d4ba:	d4ef      	bmi.n	800d49c <__smakebuf_r+0x18>
 800d4bc:	f023 0303 	bic.w	r3, r3, #3
 800d4c0:	f043 0302 	orr.w	r3, r3, #2
 800d4c4:	81a3      	strh	r3, [r4, #12]
 800d4c6:	e7e3      	b.n	800d490 <__smakebuf_r+0xc>
 800d4c8:	89a3      	ldrh	r3, [r4, #12]
 800d4ca:	6020      	str	r0, [r4, #0]
 800d4cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4d0:	81a3      	strh	r3, [r4, #12]
 800d4d2:	9b00      	ldr	r3, [sp, #0]
 800d4d4:	6163      	str	r3, [r4, #20]
 800d4d6:	9b01      	ldr	r3, [sp, #4]
 800d4d8:	6120      	str	r0, [r4, #16]
 800d4da:	b15b      	cbz	r3, 800d4f4 <__smakebuf_r+0x70>
 800d4dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	f000 f81d 	bl	800d520 <_isatty_r>
 800d4e6:	b128      	cbz	r0, 800d4f4 <__smakebuf_r+0x70>
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	f023 0303 	bic.w	r3, r3, #3
 800d4ee:	f043 0301 	orr.w	r3, r3, #1
 800d4f2:	81a3      	strh	r3, [r4, #12]
 800d4f4:	89a3      	ldrh	r3, [r4, #12]
 800d4f6:	431d      	orrs	r5, r3
 800d4f8:	81a5      	strh	r5, [r4, #12]
 800d4fa:	e7cf      	b.n	800d49c <__smakebuf_r+0x18>

0800d4fc <_fstat_r>:
 800d4fc:	b538      	push	{r3, r4, r5, lr}
 800d4fe:	4d07      	ldr	r5, [pc, #28]	; (800d51c <_fstat_r+0x20>)
 800d500:	2300      	movs	r3, #0
 800d502:	4604      	mov	r4, r0
 800d504:	4608      	mov	r0, r1
 800d506:	4611      	mov	r1, r2
 800d508:	602b      	str	r3, [r5, #0]
 800d50a:	f7f5 fae2 	bl	8002ad2 <_fstat>
 800d50e:	1c43      	adds	r3, r0, #1
 800d510:	d102      	bne.n	800d518 <_fstat_r+0x1c>
 800d512:	682b      	ldr	r3, [r5, #0]
 800d514:	b103      	cbz	r3, 800d518 <_fstat_r+0x1c>
 800d516:	6023      	str	r3, [r4, #0]
 800d518:	bd38      	pop	{r3, r4, r5, pc}
 800d51a:	bf00      	nop
 800d51c:	2000080c 	.word	0x2000080c

0800d520 <_isatty_r>:
 800d520:	b538      	push	{r3, r4, r5, lr}
 800d522:	4d06      	ldr	r5, [pc, #24]	; (800d53c <_isatty_r+0x1c>)
 800d524:	2300      	movs	r3, #0
 800d526:	4604      	mov	r4, r0
 800d528:	4608      	mov	r0, r1
 800d52a:	602b      	str	r3, [r5, #0]
 800d52c:	f7f5 fae1 	bl	8002af2 <_isatty>
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d102      	bne.n	800d53a <_isatty_r+0x1a>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	b103      	cbz	r3, 800d53a <_isatty_r+0x1a>
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	bd38      	pop	{r3, r4, r5, pc}
 800d53c:	2000080c 	.word	0x2000080c

0800d540 <_init>:
 800d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d542:	bf00      	nop
 800d544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d546:	bc08      	pop	{r3}
 800d548:	469e      	mov	lr, r3
 800d54a:	4770      	bx	lr

0800d54c <_fini>:
 800d54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d54e:	bf00      	nop
 800d550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d552:	bc08      	pop	{r3}
 800d554:	469e      	mov	lr, r3
 800d556:	4770      	bx	lr
