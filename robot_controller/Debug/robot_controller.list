
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024c0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080026a0  080026a0  000126a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026b8  080026b8  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080026b8  080026b8  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026b8  080026b8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026bc  080026bc  000126bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080026c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dc0  20000008  080026c8  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012dc8  080026c8  00022dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b92  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001334  00000000  00000000  00026bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00027f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005b0  00000000  00000000  00028558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024784  00000000  00000000  00028b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a58  00000000  00000000  0004d28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee752  00000000  00000000  00054ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143436  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018b0  00000000  00000000  00143488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000008 	.word	0x20000008
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002688 	.word	0x08002688

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000000c 	.word	0x2000000c
 800021c:	08002688 	.word	0x08002688

08000220 <vApplicationStackOverflowHook>:
#include "task.h"

static void prvSetupHardware(void);

void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800022a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800022e:	f383 8811 	msr	BASEPRI, r3
 8000232:	f3bf 8f6f 	isb	sy
 8000236:	f3bf 8f4f 	dsb	sy
 800023a:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800023c:	bf00      	nop

	/* Run time stack overflow checking is performed if
	configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected. */
	taskDISABLE_INTERRUPTS();
	for( ;; );
 800023e:	e7fe      	b.n	800023e <vApplicationStackOverflowHook+0x1e>

08000240 <main>:
}


int main(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0

	// Hardware configuration
	prvSetupHardware();
 8000244:	f000 f803 	bl	800024e <prvSetupHardware>
	// Creating tasks
	// ..
	// ..

	// Start the scheduler
	vTaskStartScheduler(); // should never return
 8000248:	f000 fd72 	bl	8000d30 <vTaskStartScheduler>

	// Will only get here if there was not enough heap space

	while(1);
 800024c:	e7fe      	b.n	800024c <main+0xc>

0800024e <prvSetupHardware>:

	return 0;
}

static void prvSetupHardware(void)
{
 800024e:	b480      	push	{r7}
 8000250:	af00      	add	r7, sp, #0
	// It's place to hardware configuration, like e.g. clock external source
}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr

0800025c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000260:	e7fe      	b.n	8000260 <NMI_Handler+0x4>

08000262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000262:	b480      	push	{r7}
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000266:	e7fe      	b.n	8000266 <HardFault_Handler+0x4>

08000268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800026c:	e7fe      	b.n	800026c <MemManage_Handler+0x4>

0800026e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800026e:	b480      	push	{r7}
 8000270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000272:	e7fe      	b.n	8000272 <BusFault_Handler+0x4>

08000274 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000278:	e7fe      	b.n	8000278 <UsageFault_Handler+0x4>

0800027a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800027e:	bf00      	nop
 8000280:	46bd      	mov	sp, r7
 8000282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000286:	4770      	bx	lr

08000288 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800028c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000290:	f000 f83e 	bl	8000310 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <SystemInit+0x20>)
 800029e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002a2:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x20>)
 80002a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002ac:	bf00      	nop
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80002c0:	f7ff ffea 	bl	8000298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002ea:	f002 f993 	bl	8002614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80002ee:	f7ff ffa7 	bl	8000240 <main>

080002f2 <LoopForever>:

LoopForever:
    b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000300:	080026c0 	.word	0x080026c0
  ldr r2, =_sbss
 8000304:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000308:	20012dc8 	.word	0x20012dc8

0800030c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC1_2_IRQHandler>
	...

08000310 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800031c:	695a      	ldr	r2, [r3, #20]
 800031e:	88fb      	ldrh	r3, [r7, #6]
 8000320:	4013      	ands	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	d006      	beq.n	8000334 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000326:	4a05      	ldr	r2, [pc, #20]	; (800033c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000328:	88fb      	ldrh	r3, [r7, #6]
 800032a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800032c:	88fb      	ldrh	r3, [r7, #6]
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f806 	bl	8000340 <HAL_GPIO_EXTI_Callback>
  }
}
 8000334:	bf00      	nop
 8000336:	3708      	adds	r7, #8
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	40010400 	.word	0x40010400

08000340 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	4603      	mov	r3, r0
 8000348:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr

08000356 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000356:	b480      	push	{r7}
 8000358:	b083      	sub	sp, #12
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f103 0208 	add.w	r2, r3, #8
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	f04f 32ff 	mov.w	r2, #4294967295
 800036e:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f103 0208 	add.w	r2, r3, #8
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	f103 0208 	add.w	r2, r3, #8
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800038a:	bf00      	nop
 800038c:	370c      	adds	r7, #12
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr

08000396 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000396:	b480      	push	{r7}
 8000398:	b083      	sub	sp, #12
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003c6:	d103      	bne.n	80003d0 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	e00c      	b.n	80003ea <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3308      	adds	r3, #8
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	e002      	b.n	80003de <vListInsert+0x2e>
 80003d8:	68fb      	ldr	r3, [r7, #12]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	60fb      	str	r3, [r7, #12]
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	68ba      	ldr	r2, [r7, #8]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d2f6      	bcs.n	80003d8 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	685a      	ldr	r2, [r3, #4]
 80003ee:	683b      	ldr	r3, [r7, #0]
 80003f0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	68fa      	ldr	r2, [r7, #12]
 80003fe:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	683a      	ldr	r2, [r7, #0]
 8000404:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	1c5a      	adds	r2, r3, #1
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	601a      	str	r2, [r3, #0]
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000422:	b480      	push	{r7}
 8000424:	b085      	sub	sp, #20
 8000426:	af00      	add	r7, sp, #0
 8000428:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	687a      	ldr	r2, [r7, #4]
 8000436:	6892      	ldr	r2, [r2, #8]
 8000438:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	689b      	ldr	r3, [r3, #8]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	6852      	ldr	r2, [r2, #4]
 8000442:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	429a      	cmp	r2, r3
 800044c:	d103      	bne.n	8000456 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2200      	movs	r2, #0
 800045a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800045c:	68fb      	ldr	r3, [r7, #12]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	1e5a      	subs	r2, r3, #1
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	681b      	ldr	r3, [r3, #0]
}
 800046a:	4618      	mov	r0, r3
 800046c:	3714      	adds	r7, #20
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
	...

08000478 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
 8000480:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8000482:	2301      	movs	r3, #1
 8000484:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d10a      	bne.n	80004a6 <xQueueGenericReset+0x2e>
        __asm volatile
 8000490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000494:	f383 8811 	msr	BASEPRI, r3
 8000498:	f3bf 8f6f 	isb	sy
 800049c:	f3bf 8f4f 	dsb	sy
 80004a0:	60fb      	str	r3, [r7, #12]
    }
 80004a2:	bf00      	nop
 80004a4:	e7fe      	b.n	80004a4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d05d      	beq.n	8000568 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 80004ac:	693b      	ldr	r3, [r7, #16]
 80004ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d059      	beq.n	8000568 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80004b4:	693b      	ldr	r3, [r7, #16]
 80004b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004b8:	693b      	ldr	r3, [r7, #16]
 80004ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004bc:	2100      	movs	r1, #0
 80004be:	fba3 2302 	umull	r2, r3, r3, r2
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d000      	beq.n	80004c8 <xQueueGenericReset+0x50>
 80004c6:	2101      	movs	r1, #1
 80004c8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d14c      	bne.n	8000568 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80004ce:	f001 fdfb 	bl	80020c8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004da:	6939      	ldr	r1, [r7, #16]
 80004dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80004de:	fb01 f303 	mul.w	r3, r1, r3
 80004e2:	441a      	add	r2, r3
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	2200      	movs	r2, #0
 80004ec:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004fe:	3b01      	subs	r3, #1
 8000500:	6939      	ldr	r1, [r7, #16]
 8000502:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000504:	fb01 f303 	mul.w	r3, r1, r3
 8000508:	441a      	add	r2, r3
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800050e:	693b      	ldr	r3, [r7, #16]
 8000510:	22ff      	movs	r2, #255	; 0xff
 8000512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8000516:	693b      	ldr	r3, [r7, #16]
 8000518:	22ff      	movs	r2, #255	; 0xff
 800051a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d114      	bne.n	800054e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000524:	693b      	ldr	r3, [r7, #16]
 8000526:	691b      	ldr	r3, [r3, #16]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d01a      	beq.n	8000562 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800052c:	693b      	ldr	r3, [r7, #16]
 800052e:	3310      	adds	r3, #16
 8000530:	4618      	mov	r0, r3
 8000532:	f000 ff69 	bl	8001408 <xTaskRemoveFromEventList>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d012      	beq.n	8000562 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <xQueueGenericReset+0x11c>)
 800053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	f3bf 8f4f 	dsb	sy
 8000548:	f3bf 8f6f 	isb	sy
 800054c:	e009      	b.n	8000562 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800054e:	693b      	ldr	r3, [r7, #16]
 8000550:	3310      	adds	r3, #16
 8000552:	4618      	mov	r0, r3
 8000554:	f7ff feff 	bl	8000356 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000558:	693b      	ldr	r3, [r7, #16]
 800055a:	3324      	adds	r3, #36	; 0x24
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff fefa 	bl	8000356 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8000562:	f001 fde1 	bl	8002128 <vPortExitCritical>
 8000566:	e001      	b.n	800056c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8000568:	2300      	movs	r3, #0
 800056a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d10a      	bne.n	8000588 <xQueueGenericReset+0x110>
        __asm volatile
 8000572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000576:	f383 8811 	msr	BASEPRI, r3
 800057a:	f3bf 8f6f 	isb	sy
 800057e:	f3bf 8f4f 	dsb	sy
 8000582:	60bb      	str	r3, [r7, #8]
    }
 8000584:	bf00      	nop
 8000586:	e7fe      	b.n	8000586 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8000588:	697b      	ldr	r3, [r7, #20]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3718      	adds	r7, #24
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	e000ed04 	.word	0xe000ed04

08000598 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af02      	add	r7, sp, #8
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	4613      	mov	r3, r2
 80005a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d02e      	beq.n	800060e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80005b0:	2100      	movs	r1, #0
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	fba3 2302 	umull	r2, r3, r3, r2
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d000      	beq.n	80005c0 <xQueueGenericCreate+0x28>
 80005be:	2101      	movs	r1, #1
 80005c0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d123      	bne.n	800060e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80005ce:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80005d2:	d81c      	bhi.n	800060e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	68ba      	ldr	r2, [r7, #8]
 80005d8:	fb02 f303 	mul.w	r3, r2, r3
 80005dc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80005de:	69bb      	ldr	r3, [r7, #24]
 80005e0:	3350      	adds	r3, #80	; 0x50
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fe4a 	bl	800227c <pvPortMalloc>
 80005e8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d01c      	beq.n	800062a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3350      	adds	r3, #80	; 0x50
 80005f8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80005fa:	79fa      	ldrb	r2, [r7, #7]
 80005fc:	69fb      	ldr	r3, [r7, #28]
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4613      	mov	r3, r2
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	68b9      	ldr	r1, [r7, #8]
 8000606:	68f8      	ldr	r0, [r7, #12]
 8000608:	f000 f814 	bl	8000634 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800060c:	e00d      	b.n	800062a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800060e:	69fb      	ldr	r3, [r7, #28]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d10a      	bne.n	800062a <xQueueGenericCreate+0x92>
        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	613b      	str	r3, [r7, #16]
    }
 8000626:	bf00      	nop
 8000628:	e7fe      	b.n	8000628 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800062a:	69fb      	ldr	r3, [r7, #28]
    }
 800062c:	4618      	mov	r0, r3
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	607a      	str	r2, [r7, #4]
 8000640:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d103      	bne.n	8000650 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000648:	69bb      	ldr	r3, [r7, #24]
 800064a:	69ba      	ldr	r2, [r7, #24]
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	e002      	b.n	8000656 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000650:	69bb      	ldr	r3, [r7, #24]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8000656:	69bb      	ldr	r3, [r7, #24]
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8000662:	2101      	movs	r1, #1
 8000664:	69b8      	ldr	r0, [r7, #24]
 8000666:	f7ff ff07 	bl	8000478 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	78fa      	ldrb	r2, [r7, #3]
 800066e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8000672:	bf00      	nop
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b08c      	sub	sp, #48	; 0x30
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000688:	2300      	movs	r3, #0
 800068a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000692:	2b00      	cmp	r3, #0
 8000694:	d10a      	bne.n	80006ac <xQueueReceive+0x30>
        __asm volatile
 8000696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800069a:	f383 8811 	msr	BASEPRI, r3
 800069e:	f3bf 8f6f 	isb	sy
 80006a2:	f3bf 8f4f 	dsb	sy
 80006a6:	623b      	str	r3, [r7, #32]
    }
 80006a8:	bf00      	nop
 80006aa:	e7fe      	b.n	80006aa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d103      	bne.n	80006ba <xQueueReceive+0x3e>
 80006b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <xQueueReceive+0x42>
 80006ba:	2301      	movs	r3, #1
 80006bc:	e000      	b.n	80006c0 <xQueueReceive+0x44>
 80006be:	2300      	movs	r3, #0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d10a      	bne.n	80006da <xQueueReceive+0x5e>
        __asm volatile
 80006c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c8:	f383 8811 	msr	BASEPRI, r3
 80006cc:	f3bf 8f6f 	isb	sy
 80006d0:	f3bf 8f4f 	dsb	sy
 80006d4:	61fb      	str	r3, [r7, #28]
    }
 80006d6:	bf00      	nop
 80006d8:	e7fe      	b.n	80006d8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80006da:	f001 f8a5 	bl	8001828 <xTaskGetSchedulerState>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d102      	bne.n	80006ea <xQueueReceive+0x6e>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d101      	bne.n	80006ee <xQueueReceive+0x72>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e000      	b.n	80006f0 <xQueueReceive+0x74>
 80006ee:	2300      	movs	r3, #0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d10a      	bne.n	800070a <xQueueReceive+0x8e>
        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	61bb      	str	r3, [r7, #24]
    }
 8000706:	bf00      	nop
 8000708:	e7fe      	b.n	8000708 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800070a:	f001 fcdd 	bl	80020c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800070e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000712:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000716:	2b00      	cmp	r3, #0
 8000718:	d01f      	beq.n	800075a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800071a:	68b9      	ldr	r1, [r7, #8]
 800071c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800071e:	f000 f88d 	bl	800083c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000728:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800072a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800072c:	691b      	ldr	r3, [r3, #16]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00f      	beq.n	8000752 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000734:	3310      	adds	r3, #16
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fe66 	bl	8001408 <xTaskRemoveFromEventList>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8000742:	4b3d      	ldr	r3, [pc, #244]	; (8000838 <xQueueReceive+0x1bc>)
 8000744:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	f3bf 8f4f 	dsb	sy
 800074e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8000752:	f001 fce9 	bl	8002128 <vPortExitCritical>
                return pdPASS;
 8000756:	2301      	movs	r3, #1
 8000758:	e069      	b.n	800082e <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d103      	bne.n	8000768 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000760:	f001 fce2 	bl	8002128 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8000764:	2300      	movs	r3, #0
 8000766:	e062      	b.n	800082e <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8000768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800076a:	2b00      	cmp	r3, #0
 800076c:	d106      	bne.n	800077c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4618      	mov	r0, r3
 8000774:	f000 ff1e 	bl	80015b4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800077c:	f001 fcd4 	bl	8002128 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000780:	f000 fb28 	bl	8000dd4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000784:	f001 fca0 	bl	80020c8 <vPortEnterCritical>
 8000788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800078a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800078e:	b25b      	sxtb	r3, r3
 8000790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000794:	d103      	bne.n	800079e <xQueueReceive+0x122>
 8000796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000798:	2200      	movs	r2, #0
 800079a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800079e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80007a4:	b25b      	sxtb	r3, r3
 80007a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007aa:	d103      	bne.n	80007b4 <xQueueReceive+0x138>
 80007ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ae:	2200      	movs	r2, #0
 80007b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80007b4:	f001 fcb8 	bl	8002128 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80007b8:	1d3a      	adds	r2, r7, #4
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4611      	mov	r1, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 ff0d 	bl	80015e0 <xTaskCheckForTimeOut>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d123      	bne.n	8000814 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80007cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007ce:	f000 f8ad 	bl	800092c <prvIsQueueEmpty>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d017      	beq.n	8000808 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80007d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007da:	3324      	adds	r3, #36	; 0x24
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	4611      	mov	r1, r2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fda7 	bl	8001334 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80007e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007e8:	f000 f84e 	bl	8000888 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80007ec:	f000 fb00 	bl	8000df0 <xTaskResumeAll>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d189      	bne.n	800070a <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <xQueueReceive+0x1bc>)
 80007f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	f3bf 8f4f 	dsb	sy
 8000802:	f3bf 8f6f 	isb	sy
 8000806:	e780      	b.n	800070a <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8000808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800080a:	f000 f83d 	bl	8000888 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800080e:	f000 faef 	bl	8000df0 <xTaskResumeAll>
 8000812:	e77a      	b.n	800070a <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8000814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000816:	f000 f837 	bl	8000888 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800081a:	f000 fae9 	bl	8000df0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800081e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000820:	f000 f884 	bl	800092c <prvIsQueueEmpty>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	f43f af6f 	beq.w	800070a <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800082c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800082e:	4618      	mov	r0, r3
 8000830:	3730      	adds	r7, #48	; 0x30
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	e000ed04 	.word	0xe000ed04

0800083c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	2b00      	cmp	r3, #0
 800084c:	d018      	beq.n	8000880 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68da      	ldr	r2, [r3, #12]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	441a      	add	r2, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68da      	ldr	r2, [r3, #12]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	429a      	cmp	r2, r3
 8000866:	d303      	bcc.n	8000870 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	68d9      	ldr	r1, [r3, #12]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	461a      	mov	r2, r3
 800087a:	6838      	ldr	r0, [r7, #0]
 800087c:	f001 feee 	bl	800265c <memcpy>
    }
}
 8000880:	bf00      	nop
 8000882:	3708      	adds	r7, #8
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8000890:	f001 fc1a 	bl	80020c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800089a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800089c:	e011      	b.n	80008c2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d012      	beq.n	80008cc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3324      	adds	r3, #36	; 0x24
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 fdac 	bl	8001408 <xTaskRemoveFromEventList>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80008b6:	f000 fef9 	bl	80016ac <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	3b01      	subs	r3, #1
 80008be:	b2db      	uxtb	r3, r3
 80008c0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80008c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	dce9      	bgt.n	800089e <prvUnlockQueue+0x16>
 80008ca:	e000      	b.n	80008ce <prvUnlockQueue+0x46>
                    break;
 80008cc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	22ff      	movs	r2, #255	; 0xff
 80008d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80008d6:	f001 fc27 	bl	8002128 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80008da:	f001 fbf5 	bl	80020c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80008e4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80008e6:	e011      	b.n	800090c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	691b      	ldr	r3, [r3, #16]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d012      	beq.n	8000916 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3310      	adds	r3, #16
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fd87 	bl	8001408 <xTaskRemoveFromEventList>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8000900:	f000 fed4 	bl	80016ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8000904:	7bbb      	ldrb	r3, [r7, #14]
 8000906:	3b01      	subs	r3, #1
 8000908:	b2db      	uxtb	r3, r3
 800090a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800090c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000910:	2b00      	cmp	r3, #0
 8000912:	dce9      	bgt.n	80008e8 <prvUnlockQueue+0x60>
 8000914:	e000      	b.n	8000918 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8000916:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	22ff      	movs	r2, #255	; 0xff
 800091c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8000920:	f001 fc02 	bl	8002128 <vPortExitCritical>
}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8000934:	f001 fbc8 	bl	80020c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8000940:	2301      	movs	r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	e001      	b.n	800094a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800094a:	f001 fbed 	bl	8002128 <vPortExitCritical>

    return xReturn;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	4618      	mov	r0, r3
 8000952:	3710      	adds	r7, #16
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000958:	b480      	push	{r7}
 800095a:	b087      	sub	sp, #28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d10a      	bne.n	8000982 <vQueueAddToRegistry+0x2a>
        __asm volatile
 800096c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000970:	f383 8811 	msr	BASEPRI, r3
 8000974:	f3bf 8f6f 	isb	sy
 8000978:	f3bf 8f4f 	dsb	sy
 800097c:	60fb      	str	r3, [r7, #12]
    }
 800097e:	bf00      	nop
 8000980:	e7fe      	b.n	8000980 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d024      	beq.n	80009d2 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000988:	2300      	movs	r3, #0
 800098a:	617b      	str	r3, [r7, #20]
 800098c:	e01e      	b.n	80009cc <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800098e:	4a18      	ldr	r2, [pc, #96]	; (80009f0 <vQueueAddToRegistry+0x98>)
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	00db      	lsls	r3, r3, #3
 8000994:	4413      	add	r3, r2
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	429a      	cmp	r2, r3
 800099c:	d105      	bne.n	80009aa <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	00db      	lsls	r3, r3, #3
 80009a2:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <vQueueAddToRegistry+0x98>)
 80009a4:	4413      	add	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
                    break;
 80009a8:	e013      	b.n	80009d2 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d10a      	bne.n	80009c6 <vQueueAddToRegistry+0x6e>
 80009b0:	4a0f      	ldr	r2, [pc, #60]	; (80009f0 <vQueueAddToRegistry+0x98>)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d104      	bne.n	80009c6 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	4a0b      	ldr	r2, [pc, #44]	; (80009f0 <vQueueAddToRegistry+0x98>)
 80009c2:	4413      	add	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	2b07      	cmp	r3, #7
 80009d0:	d9dd      	bls.n	800098e <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d005      	beq.n	80009e4 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	683a      	ldr	r2, [r7, #0]
 80009dc:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	687a      	ldr	r2, [r7, #4]
 80009e2:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80009e4:	bf00      	nop
 80009e6:	371c      	adds	r7, #28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	20000024 	.word	0x20000024

080009f4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8000a04:	f001 fb60 	bl	80020c8 <vPortEnterCritical>
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000a0e:	b25b      	sxtb	r3, r3
 8000a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a14:	d103      	bne.n	8000a1e <vQueueWaitForMessageRestricted+0x2a>
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a24:	b25b      	sxtb	r3, r3
 8000a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2a:	d103      	bne.n	8000a34 <vQueueWaitForMessageRestricted+0x40>
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000a34:	f001 fb78 	bl	8002128 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d106      	bne.n	8000a4e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3324      	adds	r3, #36	; 0x24
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	68b9      	ldr	r1, [r7, #8]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fc97 	bl	800137c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8000a4e:	6978      	ldr	r0, [r7, #20]
 8000a50:	f7ff ff1a 	bl	8000888 <prvUnlockQueue>
    }
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fc03 	bl	800227c <pvPortMalloc>
 8000a76:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d013      	beq.n	8000aa6 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000a7e:	2058      	movs	r0, #88	; 0x58
 8000a80:	f001 fbfc 	bl	800227c <pvPortMalloc>
 8000a84:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d008      	beq.n	8000a9e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000a8c:	2258      	movs	r2, #88	; 0x58
 8000a8e:	2100      	movs	r1, #0
 8000a90:	69f8      	ldr	r0, [r7, #28]
 8000a92:	f001 fdf1 	bl	8002678 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	697a      	ldr	r2, [r7, #20]
 8000a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a9c:	e005      	b.n	8000aaa <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8000a9e:	6978      	ldr	r0, [r7, #20]
 8000aa0:	f001 fca6 	bl	80023f0 <vPortFree>
 8000aa4:	e001      	b.n	8000aaa <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d013      	beq.n	8000ad8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000ab0:	88fa      	ldrh	r2, [r7, #6]
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	9303      	str	r3, [sp, #12]
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	9302      	str	r3, [sp, #8]
 8000aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000abc:	9301      	str	r3, [sp, #4]
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	9300      	str	r3, [sp, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	68b9      	ldr	r1, [r7, #8]
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f000 f80e 	bl	8000ae8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8000acc:	69f8      	ldr	r0, [r7, #28]
 8000ace:	f000 f899 	bl	8000c04 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	61bb      	str	r3, [r7, #24]
 8000ad6:	e002      	b.n	8000ade <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8000adc:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8000ade:	69bb      	ldr	r3, [r7, #24]
    }
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
 8000af4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000af8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	461a      	mov	r2, r3
 8000b00:	21a5      	movs	r1, #165	; 0xa5
 8000b02:	f001 fdb9 	bl	8002678 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b10:	3b01      	subs	r3, #1
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	4413      	add	r3, r2
 8000b16:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	f023 0307 	bic.w	r3, r3, #7
 8000b1e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d00a      	beq.n	8000b40 <prvInitialiseNewTask+0x58>
        __asm volatile
 8000b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b2e:	f383 8811 	msr	BASEPRI, r3
 8000b32:	f3bf 8f6f 	isb	sy
 8000b36:	f3bf 8f4f 	dsb	sy
 8000b3a:	617b      	str	r3, [r7, #20]
    }
 8000b3c:	bf00      	nop
 8000b3e:	e7fe      	b.n	8000b3e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d01e      	beq.n	8000b84 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	e012      	b.n	8000b72 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000b4c:	68ba      	ldr	r2, [r7, #8]
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	4413      	add	r3, r2
 8000b52:	7819      	ldrb	r1, [r3, #0]
 8000b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	4413      	add	r3, r2
 8000b5a:	3334      	adds	r3, #52	; 0x34
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8000b60:	68ba      	ldr	r2, [r7, #8]
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	4413      	add	r3, r2
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d006      	beq.n	8000b7a <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000b6c:	69fb      	ldr	r3, [r7, #28]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	2b09      	cmp	r3, #9
 8000b76:	d9e9      	bls.n	8000b4c <prvInitialiseNewTask+0x64>
 8000b78:	e000      	b.n	8000b7c <prvInitialiseNewTask+0x94>
            {
                break;
 8000b7a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b7e:	2200      	movs	r2, #0
 8000b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8000b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b86:	2b04      	cmp	r3, #4
 8000b88:	d90a      	bls.n	8000ba0 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8000b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b8e:	f383 8811 	msr	BASEPRI, r3
 8000b92:	f3bf 8f6f 	isb	sy
 8000b96:	f3bf 8f4f 	dsb	sy
 8000b9a:	613b      	str	r3, [r7, #16]
    }
 8000b9c:	bf00      	nop
 8000b9e:	e7fe      	b.n	8000b9e <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d901      	bls.n	8000baa <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8000baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000bb4:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bb8:	3304      	adds	r3, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fbeb 	bl	8000396 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc2:	3318      	adds	r3, #24
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fbe6 	bl	8000396 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bce:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd2:	f1c3 0205 	rsb	r2, r3, #5
 8000bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bd8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	68f9      	ldr	r1, [r7, #12]
 8000be4:	69b8      	ldr	r0, [r7, #24]
 8000be6:	f001 f941 	bl	8001e6c <pxPortInitialiseStack>
 8000bea:	4602      	mov	r2, r0
 8000bec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bee:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8000bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d002      	beq.n	8000bfc <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000bfa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000bfc:	bf00      	nop
 8000bfe:	3720      	adds	r7, #32
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8000c0c:	f001 fa5c 	bl	80020c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8000c10:	4b40      	ldr	r3, [pc, #256]	; (8000d14 <prvAddNewTaskToReadyList+0x110>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	3301      	adds	r3, #1
 8000c16:	4a3f      	ldr	r2, [pc, #252]	; (8000d14 <prvAddNewTaskToReadyList+0x110>)
 8000c18:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8000c1a:	4b3f      	ldr	r3, [pc, #252]	; (8000d18 <prvAddNewTaskToReadyList+0x114>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d109      	bne.n	8000c36 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8000c22:	4a3d      	ldr	r2, [pc, #244]	; (8000d18 <prvAddNewTaskToReadyList+0x114>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000c28:	4b3a      	ldr	r3, [pc, #232]	; (8000d14 <prvAddNewTaskToReadyList+0x110>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d110      	bne.n	8000c52 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8000c30:	f000 fd60 	bl	80016f4 <prvInitialiseTaskLists>
 8000c34:	e00d      	b.n	8000c52 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8000c36:	4b39      	ldr	r3, [pc, #228]	; (8000d1c <prvAddNewTaskToReadyList+0x118>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d109      	bne.n	8000c52 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <prvAddNewTaskToReadyList+0x114>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d802      	bhi.n	8000c52 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8000c4c:	4a32      	ldr	r2, [pc, #200]	; (8000d18 <prvAddNewTaskToReadyList+0x114>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8000c52:	4b33      	ldr	r3, [pc, #204]	; (8000d20 <prvAddNewTaskToReadyList+0x11c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	3301      	adds	r3, #1
 8000c58:	4a31      	ldr	r2, [pc, #196]	; (8000d20 <prvAddNewTaskToReadyList+0x11c>)
 8000c5a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <prvAddNewTaskToReadyList+0x11c>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c68:	2201      	movs	r2, #1
 8000c6a:	409a      	lsls	r2, r3
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <prvAddNewTaskToReadyList+0x120>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	4a2c      	ldr	r2, [pc, #176]	; (8000d24 <prvAddNewTaskToReadyList+0x120>)
 8000c74:	6013      	str	r3, [r2, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7a:	492b      	ldr	r1, [pc, #172]	; (8000d28 <prvAddNewTaskToReadyList+0x124>)
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	3304      	adds	r3, #4
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	3204      	adds	r2, #4
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	1d1a      	adds	r2, r3, #4
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cb0:	4613      	mov	r3, r2
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	4413      	add	r3, r2
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <prvAddNewTaskToReadyList+0x124>)
 8000cba:	441a      	add	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	615a      	str	r2, [r3, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cc4:	4918      	ldr	r1, [pc, #96]	; (8000d28 <prvAddNewTaskToReadyList+0x124>)
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	4413      	add	r3, r2
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	440b      	add	r3, r1
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	1c59      	adds	r1, r3, #1
 8000cd4:	4814      	ldr	r0, [pc, #80]	; (8000d28 <prvAddNewTaskToReadyList+0x124>)
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	4413      	add	r3, r2
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	4403      	add	r3, r0
 8000ce0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8000ce2:	f001 fa21 	bl	8002128 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8000ce6:	4b0d      	ldr	r3, [pc, #52]	; (8000d1c <prvAddNewTaskToReadyList+0x118>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00e      	beq.n	8000d0c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <prvAddNewTaskToReadyList+0x114>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d207      	bcs.n	8000d0c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8000cfc:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <prvAddNewTaskToReadyList+0x128>)
 8000cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	f3bf 8f4f 	dsb	sy
 8000d08:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2000013c 	.word	0x2000013c
 8000d18:	20000064 	.word	0x20000064
 8000d1c:	20000148 	.word	0x20000148
 8000d20:	20000158 	.word	0x20000158
 8000d24:	20000144 	.word	0x20000144
 8000d28:	20000068 	.word	0x20000068
 8000d2c:	e000ed04 	.word	0xe000ed04

08000d30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8000d36:	4b20      	ldr	r3, [pc, #128]	; (8000db8 <vTaskStartScheduler+0x88>)
 8000d38:	9301      	str	r3, [sp, #4]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	2300      	movs	r3, #0
 8000d40:	2282      	movs	r2, #130	; 0x82
 8000d42:	491e      	ldr	r1, [pc, #120]	; (8000dbc <vTaskStartScheduler+0x8c>)
 8000d44:	481e      	ldr	r0, [pc, #120]	; (8000dc0 <vTaskStartScheduler+0x90>)
 8000d46:	f7ff fe89 	bl	8000a5c <xTaskCreate>
 8000d4a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d102      	bne.n	8000d58 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8000d52:	f000 fe07 	bl	8001964 <xTimerCreateTimerTask>
 8000d56:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d116      	bne.n	8000d8c <vTaskStartScheduler+0x5c>
        __asm volatile
 8000d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d62:	f383 8811 	msr	BASEPRI, r3
 8000d66:	f3bf 8f6f 	isb	sy
 8000d6a:	f3bf 8f4f 	dsb	sy
 8000d6e:	60bb      	str	r3, [r7, #8]
    }
 8000d70:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <vTaskStartScheduler+0x94>)
 8000d74:	f04f 32ff 	mov.w	r2, #4294967295
 8000d78:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <vTaskStartScheduler+0x98>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <vTaskStartScheduler+0x9c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8000d86:	f001 f8fd 	bl	8001f84 <xPortStartScheduler>
 8000d8a:	e00e      	b.n	8000daa <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d92:	d10a      	bne.n	8000daa <vTaskStartScheduler+0x7a>
        __asm volatile
 8000d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000d98:	f383 8811 	msr	BASEPRI, r3
 8000d9c:	f3bf 8f6f 	isb	sy
 8000da0:	f3bf 8f4f 	dsb	sy
 8000da4:	607b      	str	r3, [r7, #4]
    }
 8000da6:	bf00      	nop
 8000da8:	e7fe      	b.n	8000da8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <vTaskStartScheduler+0xa0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
}
 8000dae:	bf00      	nop
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000160 	.word	0x20000160
 8000dbc:	080026a0 	.word	0x080026a0
 8000dc0:	080016c5 	.word	0x080016c5
 8000dc4:	2000015c 	.word	0x2000015c
 8000dc8:	20000148 	.word	0x20000148
 8000dcc:	20000140 	.word	0x20000140
 8000dd0:	20000000 	.word	0x20000000

08000dd4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8000dd8:	4b04      	ldr	r3, [pc, #16]	; (8000dec <vTaskSuspendAll+0x18>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	4a03      	ldr	r2, [pc, #12]	; (8000dec <vTaskSuspendAll+0x18>)
 8000de0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8000de2:	bf00      	nop
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	20000164 	.word	0x20000164

08000df0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b088      	sub	sp, #32
 8000df4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8000dfe:	4b71      	ldr	r3, [pc, #452]	; (8000fc4 <xTaskResumeAll+0x1d4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10a      	bne.n	8000e1c <xTaskResumeAll+0x2c>
        __asm volatile
 8000e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e0a:	f383 8811 	msr	BASEPRI, r3
 8000e0e:	f3bf 8f6f 	isb	sy
 8000e12:	f3bf 8f4f 	dsb	sy
 8000e16:	607b      	str	r3, [r7, #4]
    }
 8000e18:	bf00      	nop
 8000e1a:	e7fe      	b.n	8000e1a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8000e1c:	f001 f954 	bl	80020c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8000e20:	4b68      	ldr	r3, [pc, #416]	; (8000fc4 <xTaskResumeAll+0x1d4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	4a67      	ldr	r2, [pc, #412]	; (8000fc4 <xTaskResumeAll+0x1d4>)
 8000e28:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e2a:	4b66      	ldr	r3, [pc, #408]	; (8000fc4 <xTaskResumeAll+0x1d4>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 80c0 	bne.w	8000fb4 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000e34:	4b64      	ldr	r3, [pc, #400]	; (8000fc8 <xTaskResumeAll+0x1d8>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80bb 	beq.w	8000fb4 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000e3e:	e08a      	b.n	8000f56 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000e40:	4b62      	ldr	r3, [pc, #392]	; (8000fcc <xTaskResumeAll+0x1dc>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e4c:	613b      	str	r3, [r7, #16]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	69db      	ldr	r3, [r3, #28]
 8000e52:	69fa      	ldr	r2, [r7, #28]
 8000e54:	6a12      	ldr	r2, [r2, #32]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	69fa      	ldr	r2, [r7, #28]
 8000e5e:	69d2      	ldr	r2, [r2, #28]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	3318      	adds	r3, #24
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d103      	bne.n	8000e76 <xTaskResumeAll+0x86>
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	6a1a      	ldr	r2, [r3, #32]
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	1e5a      	subs	r2, r3, #1
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	69fa      	ldr	r2, [r7, #28]
 8000e92:	68d2      	ldr	r2, [r2, #12]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	69fa      	ldr	r2, [r7, #28]
 8000e9c:	6892      	ldr	r2, [r2, #8]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	3304      	adds	r3, #4
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d103      	bne.n	8000eb4 <xTaskResumeAll+0xc4>
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	68da      	ldr	r2, [r3, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	615a      	str	r2, [r3, #20]
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	1e5a      	subs	r2, r3, #1
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ec8:	2201      	movs	r2, #1
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	4b40      	ldr	r3, [pc, #256]	; (8000fd0 <xTaskResumeAll+0x1e0>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	4a3f      	ldr	r2, [pc, #252]	; (8000fd0 <xTaskResumeAll+0x1e0>)
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eda:	493e      	ldr	r1, [pc, #248]	; (8000fd4 <xTaskResumeAll+0x1e4>)
 8000edc:	4613      	mov	r3, r2
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	4413      	add	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	440b      	add	r3, r1
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	689a      	ldr	r2, [r3, #8]
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	69fa      	ldr	r2, [r7, #28]
 8000f00:	3204      	adds	r2, #4
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	1d1a      	adds	r2, r3, #4
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4a2e      	ldr	r2, [pc, #184]	; (8000fd4 <xTaskResumeAll+0x1e4>)
 8000f1a:	441a      	add	r2, r3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	615a      	str	r2, [r3, #20]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f24:	492b      	ldr	r1, [pc, #172]	; (8000fd4 <xTaskResumeAll+0x1e4>)
 8000f26:	4613      	mov	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	440b      	add	r3, r1
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	1c59      	adds	r1, r3, #1
 8000f34:	4827      	ldr	r0, [pc, #156]	; (8000fd4 <xTaskResumeAll+0x1e4>)
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4403      	add	r3, r0
 8000f40:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <xTaskResumeAll+0x1e8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d302      	bcc.n	8000f56 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <xTaskResumeAll+0x1ec>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <xTaskResumeAll+0x1dc>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f47f af70 	bne.w	8000e40 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8000f66:	f000 fc43 	bl	80017f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <xTaskResumeAll+0x1f0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d010      	beq.n	8000f98 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8000f76:	f000 f847 	bl	8001008 <xTaskIncrementTick>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <xTaskResumeAll+0x1ec>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f1      	bne.n	8000f76 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8000f92:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <xTaskResumeAll+0x1f0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <xTaskResumeAll+0x1ec>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d009      	beq.n	8000fb4 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <xTaskResumeAll+0x1f4>)
 8000fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	f3bf 8f4f 	dsb	sy
 8000fb0:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8000fb4:	f001 f8b8 	bl	8002128 <vPortExitCritical>

    return xAlreadyYielded;
 8000fb8:	69bb      	ldr	r3, [r7, #24]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3720      	adds	r7, #32
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000164 	.word	0x20000164
 8000fc8:	2000013c 	.word	0x2000013c
 8000fcc:	200000fc 	.word	0x200000fc
 8000fd0:	20000144 	.word	0x20000144
 8000fd4:	20000068 	.word	0x20000068
 8000fd8:	20000064 	.word	0x20000064
 8000fdc:	20000150 	.word	0x20000150
 8000fe0:	2000014c 	.word	0x2000014c
 8000fe4:	e000ed04 	.word	0xe000ed04

08000fe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8000fee:	4b05      	ldr	r3, [pc, #20]	; (8001004 <xTaskGetTickCount+0x1c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8000ff4:	687b      	ldr	r3, [r7, #4]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000140 	.word	0x20000140

08001008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b08a      	sub	sp, #40	; 0x28
 800100c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800100e:	2300      	movs	r3, #0
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001012:	4b7d      	ldr	r3, [pc, #500]	; (8001208 <xTaskIncrementTick+0x200>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f040 80ec 	bne.w	80011f4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800101c:	4b7b      	ldr	r3, [pc, #492]	; (800120c <xTaskIncrementTick+0x204>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001024:	4a79      	ldr	r2, [pc, #484]	; (800120c <xTaskIncrementTick+0x204>)
 8001026:	6a3b      	ldr	r3, [r7, #32]
 8001028:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800102a:	6a3b      	ldr	r3, [r7, #32]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d120      	bne.n	8001072 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001030:	4b77      	ldr	r3, [pc, #476]	; (8001210 <xTaskIncrementTick+0x208>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00a      	beq.n	8001050 <xTaskIncrementTick+0x48>
        __asm volatile
 800103a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800103e:	f383 8811 	msr	BASEPRI, r3
 8001042:	f3bf 8f6f 	isb	sy
 8001046:	f3bf 8f4f 	dsb	sy
 800104a:	607b      	str	r3, [r7, #4]
    }
 800104c:	bf00      	nop
 800104e:	e7fe      	b.n	800104e <xTaskIncrementTick+0x46>
 8001050:	4b6f      	ldr	r3, [pc, #444]	; (8001210 <xTaskIncrementTick+0x208>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61fb      	str	r3, [r7, #28]
 8001056:	4b6f      	ldr	r3, [pc, #444]	; (8001214 <xTaskIncrementTick+0x20c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a6d      	ldr	r2, [pc, #436]	; (8001210 <xTaskIncrementTick+0x208>)
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	4a6d      	ldr	r2, [pc, #436]	; (8001214 <xTaskIncrementTick+0x20c>)
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b6c      	ldr	r3, [pc, #432]	; (8001218 <xTaskIncrementTick+0x210>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	4a6b      	ldr	r2, [pc, #428]	; (8001218 <xTaskIncrementTick+0x210>)
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	f000 fbbf 	bl	80017f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001072:	4b6a      	ldr	r3, [pc, #424]	; (800121c <xTaskIncrementTick+0x214>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	6a3a      	ldr	r2, [r7, #32]
 8001078:	429a      	cmp	r2, r3
 800107a:	f0c0 80a6 	bcc.w	80011ca <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800107e:	4b64      	ldr	r3, [pc, #400]	; (8001210 <xTaskIncrementTick+0x208>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d104      	bne.n	8001092 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001088:	4b64      	ldr	r3, [pc, #400]	; (800121c <xTaskIncrementTick+0x214>)
 800108a:	f04f 32ff 	mov.w	r2, #4294967295
 800108e:	601a      	str	r2, [r3, #0]
                    break;
 8001090:	e09b      	b.n	80011ca <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001092:	4b5f      	ldr	r3, [pc, #380]	; (8001210 <xTaskIncrementTick+0x208>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80010a2:	6a3a      	ldr	r2, [r7, #32]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d203      	bcs.n	80010b2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80010aa:	4a5c      	ldr	r2, [pc, #368]	; (800121c <xTaskIncrementTick+0x214>)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80010b0:	e08b      	b.n	80011ca <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	68d2      	ldr	r2, [r2, #12]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	6892      	ldr	r2, [r2, #8]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	3304      	adds	r3, #4
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d103      	bne.n	80010e0 <xTaskIncrementTick+0xd8>
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2200      	movs	r2, #0
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	1e5a      	subs	r2, r3, #1
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d01e      	beq.n	8001136 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	6a12      	ldr	r2, [r2, #32]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	69d2      	ldr	r2, [r2, #28]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	3318      	adds	r3, #24
 800111a:	429a      	cmp	r2, r3
 800111c:	d103      	bne.n	8001126 <xTaskIncrementTick+0x11e>
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	6a1a      	ldr	r2, [r3, #32]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2200      	movs	r2, #0
 800112a:	629a      	str	r2, [r3, #40]	; 0x28
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	1e5a      	subs	r2, r3, #1
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	2201      	movs	r2, #1
 800113c:	409a      	lsls	r2, r3
 800113e:	4b38      	ldr	r3, [pc, #224]	; (8001220 <xTaskIncrementTick+0x218>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4313      	orrs	r3, r2
 8001144:	4a36      	ldr	r2, [pc, #216]	; (8001220 <xTaskIncrementTick+0x218>)
 8001146:	6013      	str	r3, [r2, #0]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800114c:	4935      	ldr	r1, [pc, #212]	; (8001224 <xTaskIncrementTick+0x21c>)
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	3304      	adds	r3, #4
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	69bb      	ldr	r3, [r7, #24]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	3204      	adds	r2, #4
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	1d1a      	adds	r2, r3, #4
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001182:	4613      	mov	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	4413      	add	r3, r2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4a26      	ldr	r2, [pc, #152]	; (8001224 <xTaskIncrementTick+0x21c>)
 800118c:	441a      	add	r2, r3
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	615a      	str	r2, [r3, #20]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001196:	4923      	ldr	r1, [pc, #140]	; (8001224 <xTaskIncrementTick+0x21c>)
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1c59      	adds	r1, r3, #1
 80011a6:	481f      	ldr	r0, [pc, #124]	; (8001224 <xTaskIncrementTick+0x21c>)
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4403      	add	r3, r0
 80011b2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <xTaskIncrementTick+0x220>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	429a      	cmp	r2, r3
 80011c0:	f67f af5d 	bls.w	800107e <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80011c4:	2301      	movs	r3, #1
 80011c6:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80011c8:	e759      	b.n	800107e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <xTaskIncrementTick+0x220>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011d0:	4914      	ldr	r1, [pc, #80]	; (8001224 <xTaskIncrementTick+0x21c>)
 80011d2:	4613      	mov	r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d901      	bls.n	80011e6 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 80011e2:	2301      	movs	r3, #1
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <xTaskIncrementTick+0x224>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d007      	beq.n	80011fe <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
 80011f2:	e004      	b.n	80011fe <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <xTaskIncrementTick+0x228>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	3301      	adds	r3, #1
 80011fa:	4a0d      	ldr	r2, [pc, #52]	; (8001230 <xTaskIncrementTick+0x228>)
 80011fc:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80011fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001200:	4618      	mov	r0, r3
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000164 	.word	0x20000164
 800120c:	20000140 	.word	0x20000140
 8001210:	200000f4 	.word	0x200000f4
 8001214:	200000f8 	.word	0x200000f8
 8001218:	20000154 	.word	0x20000154
 800121c:	2000015c 	.word	0x2000015c
 8001220:	20000144 	.word	0x20000144
 8001224:	20000068 	.word	0x20000068
 8001228:	20000064 	.word	0x20000064
 800122c:	20000150 	.word	0x20000150
 8001230:	2000014c 	.word	0x2000014c

08001234 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <vTaskSwitchContext+0xec>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001242:	4b38      	ldr	r3, [pc, #224]	; (8001324 <vTaskSwitchContext+0xf0>)
 8001244:	2201      	movs	r2, #1
 8001246:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8001248:	e066      	b.n	8001318 <vTaskSwitchContext+0xe4>
        xYieldPending = pdFALSE;
 800124a:	4b36      	ldr	r3, [pc, #216]	; (8001324 <vTaskSwitchContext+0xf0>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
        taskCHECK_FOR_STACK_OVERFLOW();
 8001250:	4b35      	ldr	r3, [pc, #212]	; (8001328 <vTaskSwitchContext+0xf4>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	61fb      	str	r3, [r7, #28]
 8001258:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800125c:	61bb      	str	r3, [r7, #24]
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	429a      	cmp	r2, r3
 8001266:	d111      	bne.n	800128c <vTaskSwitchContext+0x58>
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	3304      	adds	r3, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	429a      	cmp	r2, r3
 8001272:	d10b      	bne.n	800128c <vTaskSwitchContext+0x58>
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	3308      	adds	r3, #8
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	429a      	cmp	r2, r3
 800127e:	d105      	bne.n	800128c <vTaskSwitchContext+0x58>
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	330c      	adds	r3, #12
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	429a      	cmp	r2, r3
 800128a:	d008      	beq.n	800129e <vTaskSwitchContext+0x6a>
 800128c:	4b26      	ldr	r3, [pc, #152]	; (8001328 <vTaskSwitchContext+0xf4>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4b25      	ldr	r3, [pc, #148]	; (8001328 <vTaskSwitchContext+0xf4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3334      	adds	r3, #52	; 0x34
 8001296:	4619      	mov	r1, r3
 8001298:	4610      	mov	r0, r2
 800129a:	f7fe ffc1 	bl	8000220 <vApplicationStackOverflowHook>
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800129e:	4b23      	ldr	r3, [pc, #140]	; (800132c <vTaskSwitchContext+0xf8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80012ac:	7afb      	ldrb	r3, [r7, #11]
 80012ae:	f1c3 031f 	rsb	r3, r3, #31
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	491e      	ldr	r1, [pc, #120]	; (8001330 <vTaskSwitchContext+0xfc>)
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	440b      	add	r3, r1
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10a      	bne.n	80012de <vTaskSwitchContext+0xaa>
        __asm volatile
 80012c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012cc:	f383 8811 	msr	BASEPRI, r3
 80012d0:	f3bf 8f6f 	isb	sy
 80012d4:	f3bf 8f4f 	dsb	sy
 80012d8:	607b      	str	r3, [r7, #4]
    }
 80012da:	bf00      	nop
 80012dc:	e7fe      	b.n	80012dc <vTaskSwitchContext+0xa8>
 80012de:	697a      	ldr	r2, [r7, #20]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4a11      	ldr	r2, [pc, #68]	; (8001330 <vTaskSwitchContext+0xfc>)
 80012ea:	4413      	add	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	3308      	adds	r3, #8
 8001300:	429a      	cmp	r2, r3
 8001302:	d104      	bne.n	800130e <vTaskSwitchContext+0xda>
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	685a      	ldr	r2, [r3, #4]
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4a04      	ldr	r2, [pc, #16]	; (8001328 <vTaskSwitchContext+0xf4>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	3720      	adds	r7, #32
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000164 	.word	0x20000164
 8001324:	20000150 	.word	0x20000150
 8001328:	20000064 	.word	0x20000064
 800132c:	20000144 	.word	0x20000144
 8001330:	20000068 	.word	0x20000068

08001334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d10a      	bne.n	800135a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8001344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001348:	f383 8811 	msr	BASEPRI, r3
 800134c:	f3bf 8f6f 	isb	sy
 8001350:	f3bf 8f4f 	dsb	sy
 8001354:	60fb      	str	r3, [r7, #12]
    }
 8001356:	bf00      	nop
 8001358:	e7fe      	b.n	8001358 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800135a:	4b07      	ldr	r3, [pc, #28]	; (8001378 <vTaskPlaceOnEventList+0x44>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	3318      	adds	r3, #24
 8001360:	4619      	mov	r1, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff f824 	bl	80003b0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001368:	2101      	movs	r1, #1
 800136a:	6838      	ldr	r0, [r7, #0]
 800136c:	f000 fa7a 	bl	8001864 <prvAddCurrentTaskToDelayedList>
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20000064 	.word	0x20000064

0800137c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10a      	bne.n	80013a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001392:	f383 8811 	msr	BASEPRI, r3
 8001396:	f3bf 8f6f 	isb	sy
 800139a:	f3bf 8f4f 	dsb	sy
 800139e:	613b      	str	r3, [r7, #16]
    }
 80013a0:	bf00      	nop
 80013a2:	e7fe      	b.n	80013a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <vTaskPlaceOnEventListRestricted+0x88>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	61da      	str	r2, [r3, #28]
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <vTaskPlaceOnEventListRestricted+0x88>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	6892      	ldr	r2, [r2, #8]
 80013ba:	621a      	str	r2, [r3, #32]
 80013bc:	4b11      	ldr	r3, [pc, #68]	; (8001404 <vTaskPlaceOnEventListRestricted+0x88>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	3218      	adds	r2, #24
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <vTaskPlaceOnEventListRestricted+0x88>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f103 0218 	add.w	r2, r3, #24
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	4b0b      	ldr	r3, [pc, #44]	; (8001404 <vTaskPlaceOnEventListRestricted+0x88>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d002      	beq.n	80013f2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80013ec:	f04f 33ff 	mov.w	r3, #4294967295
 80013f0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f000 fa35 	bl	8001864 <prvAddCurrentTaskToDelayedList>
    }
 80013fa:	bf00      	nop
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000064 	.word	0x20000064

08001408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001408:	b480      	push	{r7}
 800140a:	b08b      	sub	sp, #44	; 0x2c
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8001418:	6a3b      	ldr	r3, [r7, #32]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10a      	bne.n	8001434 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800141e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001422:	f383 8811 	msr	BASEPRI, r3
 8001426:	f3bf 8f6f 	isb	sy
 800142a:	f3bf 8f4f 	dsb	sy
 800142e:	60fb      	str	r3, [r7, #12]
    }
 8001430:	bf00      	nop
 8001432:	e7fe      	b.n	8001432 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001438:	61fb      	str	r3, [r7, #28]
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	69db      	ldr	r3, [r3, #28]
 800143e:	6a3a      	ldr	r2, [r7, #32]
 8001440:	6a12      	ldr	r2, [r2, #32]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	6a3b      	ldr	r3, [r7, #32]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	6a3a      	ldr	r2, [r7, #32]
 800144a:	69d2      	ldr	r2, [r2, #28]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	3318      	adds	r3, #24
 8001456:	429a      	cmp	r2, r3
 8001458:	d103      	bne.n	8001462 <xTaskRemoveFromEventList+0x5a>
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	6a3b      	ldr	r3, [r7, #32]
 8001464:	2200      	movs	r2, #0
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	1e5a      	subs	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001472:	4b4a      	ldr	r3, [pc, #296]	; (800159c <xTaskRemoveFromEventList+0x194>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d15e      	bne.n	8001538 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800147a:	6a3b      	ldr	r3, [r7, #32]
 800147c:	695b      	ldr	r3, [r3, #20]
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	6a3a      	ldr	r2, [r7, #32]
 8001486:	68d2      	ldr	r2, [r2, #12]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	6a3b      	ldr	r3, [r7, #32]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	6a3a      	ldr	r2, [r7, #32]
 8001490:	6892      	ldr	r2, [r2, #8]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	3304      	adds	r3, #4
 800149c:	429a      	cmp	r2, r3
 800149e:	d103      	bne.n	80014a8 <xTaskRemoveFromEventList+0xa0>
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	1e5a      	subs	r2, r3, #1
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014bc:	2201      	movs	r2, #1
 80014be:	409a      	lsls	r2, r3
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <xTaskRemoveFromEventList+0x198>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	4a36      	ldr	r2, [pc, #216]	; (80015a0 <xTaskRemoveFromEventList+0x198>)
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	6a3b      	ldr	r3, [r7, #32]
 80014cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014ce:	4935      	ldr	r1, [pc, #212]	; (80015a4 <xTaskRemoveFromEventList+0x19c>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	440b      	add	r3, r1
 80014da:	3304      	adds	r3, #4
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	6a3b      	ldr	r3, [r7, #32]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	6a3a      	ldr	r2, [r7, #32]
 80014f4:	3204      	adds	r2, #4
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	1d1a      	adds	r2, r3, #4
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	6a3b      	ldr	r3, [r7, #32]
 8001502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	4a25      	ldr	r2, [pc, #148]	; (80015a4 <xTaskRemoveFromEventList+0x19c>)
 800150e:	441a      	add	r2, r3
 8001510:	6a3b      	ldr	r3, [r7, #32]
 8001512:	615a      	str	r2, [r3, #20]
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001518:	4922      	ldr	r1, [pc, #136]	; (80015a4 <xTaskRemoveFromEventList+0x19c>)
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	1c59      	adds	r1, r3, #1
 8001528:	481e      	ldr	r0, [pc, #120]	; (80015a4 <xTaskRemoveFromEventList+0x19c>)
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4403      	add	r3, r0
 8001534:	6019      	str	r1, [r3, #0]
 8001536:	e01b      	b.n	8001570 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <xTaskRemoveFromEventList+0x1a0>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	6a3b      	ldr	r3, [r7, #32]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	61da      	str	r2, [r3, #28]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	6a3b      	ldr	r3, [r7, #32]
 800154a:	621a      	str	r2, [r3, #32]
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	6a3a      	ldr	r2, [r7, #32]
 8001552:	3218      	adds	r2, #24
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	f103 0218 	add.w	r2, r3, #24
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	6a3b      	ldr	r3, [r7, #32]
 8001562:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <xTaskRemoveFromEventList+0x1a0>)
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <xTaskRemoveFromEventList+0x1a0>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	4a0e      	ldr	r2, [pc, #56]	; (80015a8 <xTaskRemoveFromEventList+0x1a0>)
 800156e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001574:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <xTaskRemoveFromEventList+0x1a4>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157a:	429a      	cmp	r2, r3
 800157c:	d905      	bls.n	800158a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800157e:	2301      	movs	r3, #1
 8001580:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <xTaskRemoveFromEventList+0x1a8>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	e001      	b.n	800158e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001590:	4618      	mov	r0, r3
 8001592:	372c      	adds	r7, #44	; 0x2c
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	20000164 	.word	0x20000164
 80015a0:	20000144 	.word	0x20000144
 80015a4:	20000068 	.word	0x20000068
 80015a8:	200000fc 	.word	0x200000fc
 80015ac:	20000064 	.word	0x20000064
 80015b0:	20000150 	.word	0x20000150

080015b4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80015bc:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <vTaskInternalSetTimeOutState+0x24>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <vTaskInternalSetTimeOutState+0x28>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	605a      	str	r2, [r3, #4]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	20000154 	.word	0x20000154
 80015dc:	20000140 	.word	0x20000140

080015e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10a      	bne.n	8001606 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80015f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015f4:	f383 8811 	msr	BASEPRI, r3
 80015f8:	f3bf 8f6f 	isb	sy
 80015fc:	f3bf 8f4f 	dsb	sy
 8001600:	613b      	str	r3, [r7, #16]
    }
 8001602:	bf00      	nop
 8001604:	e7fe      	b.n	8001604 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d10a      	bne.n	8001622 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800160c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001610:	f383 8811 	msr	BASEPRI, r3
 8001614:	f3bf 8f6f 	isb	sy
 8001618:	f3bf 8f4f 	dsb	sy
 800161c:	60fb      	str	r3, [r7, #12]
    }
 800161e:	bf00      	nop
 8001620:	e7fe      	b.n	8001620 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8001622:	f000 fd51 	bl	80020c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8001626:	4b1f      	ldr	r3, [pc, #124]	; (80016a4 <xTaskCheckForTimeOut+0xc4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800163e:	d102      	bne.n	8001646 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
 8001644:	e026      	b.n	8001694 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <xTaskCheckForTimeOut+0xc8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d00a      	beq.n	8001668 <xTaskCheckForTimeOut+0x88>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	429a      	cmp	r2, r3
 800165a:	d305      	bcc.n	8001668 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800165c:	2301      	movs	r3, #1
 800165e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	e015      	b.n	8001694 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	429a      	cmp	r2, r3
 8001670:	d20b      	bcs.n	800168a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	1ad2      	subs	r2, r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ff98 	bl	80015b4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
 8001688:	e004      	b.n	8001694 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8001690:	2301      	movs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8001694:	f000 fd48 	bl	8002128 <vPortExitCritical>

    return xReturn;
 8001698:	69fb      	ldr	r3, [r7, #28]
}
 800169a:	4618      	mov	r0, r3
 800169c:	3720      	adds	r7, #32
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000140 	.word	0x20000140
 80016a8:	20000154 	.word	0x20000154

080016ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <vTaskMissedYield+0x14>)
 80016b2:	2201      	movs	r2, #1
 80016b4:	601a      	str	r2, [r3, #0]
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20000150 	.word	0x20000150

080016c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80016cc:	f000 f852 	bl	8001774 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <prvIdleTask+0x28>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d9f9      	bls.n	80016cc <prvIdleTask+0x8>
            {
                taskYIELD();
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <prvIdleTask+0x2c>)
 80016da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	f3bf 8f4f 	dsb	sy
 80016e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80016e8:	e7f0      	b.n	80016cc <prvIdleTask+0x8>
 80016ea:	bf00      	nop
 80016ec:	20000068 	.word	0x20000068
 80016f0:	e000ed04 	.word	0xe000ed04

080016f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016fa:	2300      	movs	r3, #0
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	e00c      	b.n	800171a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4a12      	ldr	r2, [pc, #72]	; (8001754 <prvInitialiseTaskLists+0x60>)
 800170c:	4413      	add	r3, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe fe21 	bl	8000356 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	3301      	adds	r3, #1
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b04      	cmp	r3, #4
 800171e:	d9ef      	bls.n	8001700 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <prvInitialiseTaskLists+0x64>)
 8001722:	f7fe fe18 	bl	8000356 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8001726:	480d      	ldr	r0, [pc, #52]	; (800175c <prvInitialiseTaskLists+0x68>)
 8001728:	f7fe fe15 	bl	8000356 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800172c:	480c      	ldr	r0, [pc, #48]	; (8001760 <prvInitialiseTaskLists+0x6c>)
 800172e:	f7fe fe12 	bl	8000356 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8001732:	480c      	ldr	r0, [pc, #48]	; (8001764 <prvInitialiseTaskLists+0x70>)
 8001734:	f7fe fe0f 	bl	8000356 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8001738:	480b      	ldr	r0, [pc, #44]	; (8001768 <prvInitialiseTaskLists+0x74>)
 800173a:	f7fe fe0c 	bl	8000356 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <prvInitialiseTaskLists+0x78>)
 8001740:	4a05      	ldr	r2, [pc, #20]	; (8001758 <prvInitialiseTaskLists+0x64>)
 8001742:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001744:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <prvInitialiseTaskLists+0x7c>)
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <prvInitialiseTaskLists+0x68>)
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000068 	.word	0x20000068
 8001758:	200000cc 	.word	0x200000cc
 800175c:	200000e0 	.word	0x200000e0
 8001760:	200000fc 	.word	0x200000fc
 8001764:	20000110 	.word	0x20000110
 8001768:	20000128 	.word	0x20000128
 800176c:	200000f4 	.word	0x200000f4
 8001770:	200000f8 	.word	0x200000f8

08001774 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800177a:	e019      	b.n	80017b0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800177c:	f000 fca4 	bl	80020c8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001780:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <prvCheckTasksWaitingTermination+0x50>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3304      	adds	r3, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe48 	bl	8000422 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <prvCheckTasksWaitingTermination+0x54>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3b01      	subs	r3, #1
 8001798:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <prvCheckTasksWaitingTermination+0x54>)
 800179a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <prvCheckTasksWaitingTermination+0x58>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <prvCheckTasksWaitingTermination+0x58>)
 80017a4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80017a6:	f000 fcbf 	bl	8002128 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f810 	bl	80017d0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <prvCheckTasksWaitingTermination+0x58>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1e1      	bne.n	800177c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000110 	.word	0x20000110
 80017c8:	2000013c 	.word	0x2000013c
 80017cc:	20000124 	.word	0x20000124

080017d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4618      	mov	r0, r3
 80017de:	f000 fe07 	bl	80023f0 <vPortFree>
            vPortFree( pxTCB );
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fe04 	bl	80023f0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80017e8:	bf00      	nop
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017f4:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <prvResetNextTaskUnblockTime+0x30>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d104      	bne.n	8001808 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <prvResetNextTaskUnblockTime+0x34>)
 8001800:	f04f 32ff 	mov.w	r2, #4294967295
 8001804:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001806:	e005      	b.n	8001814 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <prvResetNextTaskUnblockTime+0x30>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <prvResetNextTaskUnblockTime+0x34>)
 8001812:	6013      	str	r3, [r2, #0]
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200000f4 	.word	0x200000f4
 8001824:	2000015c 	.word	0x2000015c

08001828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <xTaskGetSchedulerState+0x34>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8001836:	2301      	movs	r3, #1
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	e008      	b.n	800184e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <xTaskGetSchedulerState+0x38>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d102      	bne.n	800184a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8001844:	2302      	movs	r3, #2
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	e001      	b.n	800184e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800184a:	2300      	movs	r3, #0
 800184c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800184e:	687b      	ldr	r3, [r7, #4]
    }
 8001850:	4618      	mov	r0, r3
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	20000148 	.word	0x20000148
 8001860:	20000164 	.word	0x20000164

08001864 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800186e:	4b36      	ldr	r3, [pc, #216]	; (8001948 <prvAddCurrentTaskToDelayedList+0xe4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001874:	4b35      	ldr	r3, [pc, #212]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3304      	adds	r3, #4
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fdd1 	bl	8000422 <uxListRemove>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10b      	bne.n	800189e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8001886:	4b31      	ldr	r3, [pc, #196]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	2201      	movs	r2, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	4b2e      	ldr	r3, [pc, #184]	; (8001950 <prvAddCurrentTaskToDelayedList+0xec>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4013      	ands	r3, r2
 800189a:	4a2d      	ldr	r2, [pc, #180]	; (8001950 <prvAddCurrentTaskToDelayedList+0xec>)
 800189c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d124      	bne.n	80018f0 <prvAddCurrentTaskToDelayedList+0x8c>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d021      	beq.n	80018f0 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <prvAddCurrentTaskToDelayedList+0xf0>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b26      	ldr	r3, [pc, #152]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	6892      	ldr	r2, [r2, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	4b21      	ldr	r3, [pc, #132]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	3204      	adds	r2, #4
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	4b1e      	ldr	r3, [pc, #120]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	1d1a      	adds	r2, r3, #4
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a1d      	ldr	r2, [pc, #116]	; (8001954 <prvAddCurrentTaskToDelayedList+0xf0>)
 80018e0:	615a      	str	r2, [r3, #20]
 80018e2:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <prvAddCurrentTaskToDelayedList+0xf0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <prvAddCurrentTaskToDelayedList+0xf0>)
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80018ee:	e026      	b.n	800193e <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	429a      	cmp	r2, r3
 8001906:	d209      	bcs.n	800191c <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001908:	4b13      	ldr	r3, [pc, #76]	; (8001958 <prvAddCurrentTaskToDelayedList+0xf4>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	3304      	adds	r3, #4
 8001912:	4619      	mov	r1, r3
 8001914:	4610      	mov	r0, r2
 8001916:	f7fe fd4b 	bl	80003b0 <vListInsert>
}
 800191a:	e010      	b.n	800193e <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <prvAddCurrentTaskToDelayedList+0xf8>)
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <prvAddCurrentTaskToDelayedList+0xe8>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3304      	adds	r3, #4
 8001926:	4619      	mov	r1, r3
 8001928:	4610      	mov	r0, r2
 800192a:	f7fe fd41 	bl	80003b0 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <prvAddCurrentTaskToDelayedList+0xfc>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	429a      	cmp	r2, r3
 8001936:	d202      	bcs.n	800193e <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8001938:	4a09      	ldr	r2, [pc, #36]	; (8001960 <prvAddCurrentTaskToDelayedList+0xfc>)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6013      	str	r3, [r2, #0]
}
 800193e:	bf00      	nop
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000140 	.word	0x20000140
 800194c:	20000064 	.word	0x20000064
 8001950:	20000144 	.word	0x20000144
 8001954:	20000128 	.word	0x20000128
 8001958:	200000f8 	.word	0x200000f8
 800195c:	200000f4 	.word	0x200000f4
 8001960:	2000015c 	.word	0x2000015c

08001964 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800196e:	f000 fa47 	bl	8001e00 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <xTimerCreateTimerTask+0x54>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <xTimerCreateTimerTask+0x58>)
 800197c:	9301      	str	r3, [sp, #4]
 800197e:	2302      	movs	r3, #2
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	2300      	movs	r3, #0
 8001984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001988:	490d      	ldr	r1, [pc, #52]	; (80019c0 <xTimerCreateTimerTask+0x5c>)
 800198a:	480e      	ldr	r0, [pc, #56]	; (80019c4 <xTimerCreateTimerTask+0x60>)
 800198c:	f7ff f866 	bl	8000a5c <xTaskCreate>
 8001990:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d10a      	bne.n	80019ae <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8001998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199c:	f383 8811 	msr	BASEPRI, r3
 80019a0:	f3bf 8f6f 	isb	sy
 80019a4:	f3bf 8f4f 	dsb	sy
 80019a8:	603b      	str	r3, [r7, #0]
    }
 80019aa:	bf00      	nop
 80019ac:	e7fe      	b.n	80019ac <xTimerCreateTimerTask+0x48>
        return xReturn;
 80019ae:	687b      	ldr	r3, [r7, #4]
    }
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000198 	.word	0x20000198
 80019bc:	2000019c 	.word	0x2000019c
 80019c0:	080026a8 	.word	0x080026a8
 80019c4:	08001a6d 	.word	0x08001a6d

080019c8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80019d4:	e008      	b.n	80019e8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	68ba      	ldr	r2, [r7, #8]
 80019dc:	4413      	add	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	699a      	ldr	r2, [r3, #24]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	18d1      	adds	r1, r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f8dd 	bl	8001bb4 <prvInsertTimerInActiveList>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1ea      	bne.n	80019d6 <prvReloadTimer+0xe>
        }
    }
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <prvProcessExpiredTimer+0x5c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3304      	adds	r3, #4
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fcfc 	bl	8000422 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a30:	f003 0304 	and.w	r3, r3, #4
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f7ff ffc3 	bl	80019c8 <prvReloadTimer>
 8001a42:	e008      	b.n	8001a56 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	4798      	blx	r3
    }
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000190 	.word	0x20000190

08001a6c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f857 	bl	8001b2c <prvGetNextExpireTime>
 8001a7e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	4619      	mov	r1, r3
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f000 f803 	bl	8001a90 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8001a8a:	f000 f8d5 	bl	8001c38 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8001a8e:	e7f1      	b.n	8001a74 <prvTimerTask+0x8>

08001a90 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8001a9a:	f7ff f99b 	bl	8000dd4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f866 	bl	8001b74 <prvSampleTimeNow>
 8001aa8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d130      	bne.n	8001b12 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10a      	bne.n	8001acc <prvProcessTimerOrBlockTask+0x3c>
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d806      	bhi.n	8001acc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8001abe:	f7ff f997 	bl	8000df0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8001ac2:	68f9      	ldr	r1, [r7, #12]
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff ffa1 	bl	8001a0c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8001aca:	e024      	b.n	8001b16 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <prvProcessTimerOrBlockTask+0x90>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <prvProcessTimerOrBlockTask+0x50>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <prvProcessTimerOrBlockTask+0x52>
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8001ae4:	4b0f      	ldr	r3, [pc, #60]	; (8001b24 <prvProcessTimerOrBlockTask+0x94>)
 8001ae6:	6818      	ldr	r0, [r3, #0]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7fe ff7f 	bl	80009f4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8001af6:	f7ff f97b 	bl	8000df0 <xTaskResumeAll>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10a      	bne.n	8001b16 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <prvProcessTimerOrBlockTask+0x98>)
 8001b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f3bf 8f4f 	dsb	sy
 8001b0c:	f3bf 8f6f 	isb	sy
    }
 8001b10:	e001      	b.n	8001b16 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8001b12:	f7ff f96d 	bl	8000df0 <xTaskResumeAll>
    }
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000194 	.word	0x20000194
 8001b24:	20000198 	.word	0x20000198
 8001b28:	e000ed04 	.word	0xe000ed04

08001b2c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8001b34:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <prvGetNextExpireTime+0x44>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <prvGetNextExpireTime+0x16>
 8001b3e:	2201      	movs	r2, #1
 8001b40:	e000      	b.n	8001b44 <prvGetNextExpireTime+0x18>
 8001b42:	2200      	movs	r2, #0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001b50:	4b07      	ldr	r3, [pc, #28]	; (8001b70 <prvGetNextExpireTime+0x44>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e001      	b.n	8001b60 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8001b60:	68fb      	ldr	r3, [r7, #12]
    }
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	20000190 	.word	0x20000190

08001b74 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8001b7c:	f7ff fa34 	bl	8000fe8 <xTaskGetTickCount>
 8001b80:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <prvSampleTimeNow+0x3c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d205      	bcs.n	8001b98 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8001b8c:	f000 f912 	bl	8001db4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e002      	b.n	8001b9e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8001b9e:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <prvSampleTimeNow+0x3c>)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    }
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200001a0 	.word	0x200001a0

08001bb4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	68ba      	ldr	r2, [r7, #8]
 8001bca:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d812      	bhi.n	8001c00 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	1ad2      	subs	r2, r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d302      	bcc.n	8001bee <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8001be8:	2301      	movs	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
 8001bec:	e01b      	b.n	8001c26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <prvInsertTimerInActiveList+0x7c>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	3304      	adds	r3, #4
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	f7fe fbd9 	bl	80003b0 <vListInsert>
 8001bfe:	e012      	b.n	8001c26 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d206      	bcs.n	8001c16 <prvInsertTimerInActiveList+0x62>
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d302      	bcc.n	8001c16 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8001c10:	2301      	movs	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e007      	b.n	8001c26 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8001c16:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <prvInsertTimerInActiveList+0x80>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4610      	mov	r0, r2
 8001c22:	f7fe fbc5 	bl	80003b0 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8001c26:	697b      	ldr	r3, [r7, #20]
    }
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20000194 	.word	0x20000194
 8001c34:	20000190 	.word	0x20000190

08001c38 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b088      	sub	sp, #32
 8001c3c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001c3e:	e0a6      	b.n	8001d8e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f2c0 80a2 	blt.w	8001d8c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	3304      	adds	r3, #4
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fbe2 	bl	8000422 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff ff87 	bl	8001b74 <prvSampleTimeNow>
 8001c66:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	3b01      	subs	r3, #1
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	f200 808e 	bhi.w	8001d8e <prvProcessReceivedCommands+0x156>
 8001c72:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <prvProcessReceivedCommands+0x40>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001c9d 	.word	0x08001c9d
 8001c7c:	08001c9d 	.word	0x08001c9d
 8001c80:	08001d05 	.word	0x08001d05
 8001c84:	08001d19 	.word	0x08001d19
 8001c88:	08001d63 	.word	0x08001d63
 8001c8c:	08001c9d 	.word	0x08001c9d
 8001c90:	08001c9d 	.word	0x08001c9d
 8001c94:	08001d05 	.word	0x08001d05
 8001c98:	08001d19 	.word	0x08001d19
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	18d1      	adds	r1, r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	69f8      	ldr	r0, [r7, #28]
 8001cbc:	f7ff ff7a 	bl	8001bb4 <prvInsertTimerInActiveList>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d063      	beq.n	8001d8e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d009      	beq.n	8001ce8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	4413      	add	r3, r2
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4619      	mov	r1, r3
 8001ce0:	69f8      	ldr	r0, [r7, #28]
 8001ce2:	f7ff fe71 	bl	80019c8 <prvReloadTimer>
 8001ce6:	e008      	b.n	8001cfa <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cee:	f023 0301 	bic.w	r3, r3, #1
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8001cfa:	69fb      	ldr	r3, [r7, #28]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	69f8      	ldr	r0, [r7, #28]
 8001d00:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8001d02:	e044      	b.n	8001d8e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d0a:	f023 0301 	bic.w	r3, r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8001d16:	e03a      	b.n	8001d8e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8001d2a:	68fa      	ldr	r2, [r7, #12]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10a      	bne.n	8001d4e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8001d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d3c:	f383 8811 	msr	BASEPRI, r3
 8001d40:	f3bf 8f6f 	isb	sy
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	617b      	str	r3, [r7, #20]
    }
 8001d4a:	bf00      	nop
 8001d4c:	e7fe      	b.n	8001d4c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	699a      	ldr	r2, [r3, #24]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	18d1      	adds	r1, r2, r3
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	69f8      	ldr	r0, [r7, #28]
 8001d5c:	f7ff ff2a 	bl	8001bb4 <prvInsertTimerInActiveList>
                        break;
 8001d60:	e015      	b.n	8001d8e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d103      	bne.n	8001d78 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8001d70:	69f8      	ldr	r0, [r7, #28]
 8001d72:	f000 fb3d 	bl	80023f0 <vPortFree>
 8001d76:	e00a      	b.n	8001d8e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d7e:	f023 0301 	bic.w	r3, r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8001d8a:	e000      	b.n	8001d8e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8001d8c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8001d8e:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <prvProcessReceivedCommands+0x178>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f107 0108 	add.w	r1, r7, #8
 8001d96:	2200      	movs	r2, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fc6f 	bl	800067c <xQueueReceive>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f47f af4d 	bne.w	8001c40 <prvProcessReceivedCommands+0x8>
        }
    }
 8001da6:	bf00      	nop
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000198 	.word	0x20000198

08001db4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001dba:	e009      	b.n	8001dd0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8001dbc:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <prvSwitchTimerLists+0x44>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8001dc6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dca:	6838      	ldr	r0, [r7, #0]
 8001dcc:	f7ff fe1e 	bl	8001a0c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <prvSwitchTimerLists+0x44>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <prvSwitchTimerLists+0x44>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <prvSwitchTimerLists+0x48>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <prvSwitchTimerLists+0x44>)
 8001de6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <prvSwitchTimerLists+0x48>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6013      	str	r3, [r2, #0]
    }
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000190 	.word	0x20000190
 8001dfc:	20000194 	.word	0x20000194

08001e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8001e04:	f000 f960 	bl	80020c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8001e08:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <prvCheckForValidListAndQueue+0x54>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d11d      	bne.n	8001e4c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8001e10:	4811      	ldr	r0, [pc, #68]	; (8001e58 <prvCheckForValidListAndQueue+0x58>)
 8001e12:	f7fe faa0 	bl	8000356 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8001e16:	4811      	ldr	r0, [pc, #68]	; (8001e5c <prvCheckForValidListAndQueue+0x5c>)
 8001e18:	f7fe fa9d 	bl	8000356 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <prvCheckForValidListAndQueue+0x60>)
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <prvCheckForValidListAndQueue+0x58>)
 8001e20:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8001e22:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <prvCheckForValidListAndQueue+0x64>)
 8001e24:	4a0d      	ldr	r2, [pc, #52]	; (8001e5c <prvCheckForValidListAndQueue+0x5c>)
 8001e26:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8001e28:	2200      	movs	r2, #0
 8001e2a:	210c      	movs	r1, #12
 8001e2c:	200a      	movs	r0, #10
 8001e2e:	f7fe fbb3 	bl	8000598 <xQueueGenericCreate>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <prvCheckForValidListAndQueue+0x54>)
 8001e36:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <prvCheckForValidListAndQueue+0x54>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <prvCheckForValidListAndQueue+0x54>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4908      	ldr	r1, [pc, #32]	; (8001e68 <prvCheckForValidListAndQueue+0x68>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fd86 	bl	8000958 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8001e4c:	f000 f96c 	bl	8002128 <vPortExitCritical>
    }
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000198 	.word	0x20000198
 8001e58:	20000168 	.word	0x20000168
 8001e5c:	2000017c 	.word	0x2000017c
 8001e60:	20000190 	.word	0x20000190
 8001e64:	20000194 	.word	0x20000194
 8001e68:	080026b0 	.word	0x080026b0

08001e6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001e84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3b04      	subs	r3, #4
 8001e8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	f023 0201 	bic.w	r2, r3, #1
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	3b04      	subs	r3, #4
 8001e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001e9c:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <pxPortInitialiseStack+0x64>)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3b14      	subs	r3, #20
 8001ea6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	3b04      	subs	r3, #4
 8001eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f06f 0202 	mvn.w	r2, #2
 8001eba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	3b20      	subs	r3, #32
 8001ec0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	08001ed5 	.word	0x08001ed5

08001ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <prvTaskExitError+0x54>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee6:	d00a      	beq.n	8001efe <prvTaskExitError+0x2a>
        __asm volatile
 8001ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eec:	f383 8811 	msr	BASEPRI, r3
 8001ef0:	f3bf 8f6f 	isb	sy
 8001ef4:	f3bf 8f4f 	dsb	sy
 8001ef8:	60fb      	str	r3, [r7, #12]
    }
 8001efa:	bf00      	nop
 8001efc:	e7fe      	b.n	8001efc <prvTaskExitError+0x28>
        __asm volatile
 8001efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f02:	f383 8811 	msr	BASEPRI, r3
 8001f06:	f3bf 8f6f 	isb	sy
 8001f0a:	f3bf 8f4f 	dsb	sy
 8001f0e:	60bb      	str	r3, [r7, #8]
    }
 8001f10:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8001f12:	bf00      	nop
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0fc      	beq.n	8001f14 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8001f1a:	bf00      	nop
 8001f1c:	bf00      	nop
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	20000004 	.word	0x20000004
 8001f2c:	00000000 	.word	0x00000000

08001f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <pxCurrentTCBConst2>)
 8001f32:	6819      	ldr	r1, [r3, #0]
 8001f34:	6808      	ldr	r0, [r1, #0]
 8001f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f3a:	f380 8809 	msr	PSP, r0
 8001f3e:	f3bf 8f6f 	isb	sy
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f380 8811 	msr	BASEPRI, r0
 8001f4a:	4770      	bx	lr
 8001f4c:	f3af 8000 	nop.w

08001f50 <pxCurrentTCBConst2>:
 8001f50:	20000064 	.word	0x20000064
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop

08001f58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8001f58:	4808      	ldr	r0, [pc, #32]	; (8001f7c <prvPortStartFirstTask+0x24>)
 8001f5a:	6800      	ldr	r0, [r0, #0]
 8001f5c:	6800      	ldr	r0, [r0, #0]
 8001f5e:	f380 8808 	msr	MSP, r0
 8001f62:	f04f 0000 	mov.w	r0, #0
 8001f66:	f380 8814 	msr	CONTROL, r0
 8001f6a:	b662      	cpsie	i
 8001f6c:	b661      	cpsie	f
 8001f6e:	f3bf 8f4f 	dsb	sy
 8001f72:	f3bf 8f6f 	isb	sy
 8001f76:	df00      	svc	0
 8001f78:	bf00      	nop
 8001f7a:	0000      	.short	0x0000
 8001f7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop

08001f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001f8a:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <xPortStartScheduler+0x120>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a46      	ldr	r2, [pc, #280]	; (80020a8 <xPortStartScheduler+0x124>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d10a      	bne.n	8001faa <xPortStartScheduler+0x26>
        __asm volatile
 8001f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f98:	f383 8811 	msr	BASEPRI, r3
 8001f9c:	f3bf 8f6f 	isb	sy
 8001fa0:	f3bf 8f4f 	dsb	sy
 8001fa4:	613b      	str	r3, [r7, #16]
    }
 8001fa6:	bf00      	nop
 8001fa8:	e7fe      	b.n	8001fa8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <xPortStartScheduler+0x120>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a3f      	ldr	r2, [pc, #252]	; (80020ac <xPortStartScheduler+0x128>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d10a      	bne.n	8001fca <xPortStartScheduler+0x46>
        __asm volatile
 8001fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	60fb      	str	r3, [r7, #12]
    }
 8001fc6:	bf00      	nop
 8001fc8:	e7fe      	b.n	8001fc8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <xPortStartScheduler+0x12c>)
 8001fcc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	22ff      	movs	r2, #255	; 0xff
 8001fda:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <xPortStartScheduler+0x130>)
 8001ff0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001ff2:	4b31      	ldr	r3, [pc, #196]	; (80020b8 <xPortStartScheduler+0x134>)
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001ff8:	e009      	b.n	800200e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	; (80020b8 <xPortStartScheduler+0x134>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	4a2d      	ldr	r2, [pc, #180]	; (80020b8 <xPortStartScheduler+0x134>)
 8002002:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002004:	78fb      	ldrb	r3, [r7, #3]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	b2db      	uxtb	r3, r3
 800200c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002016:	2b80      	cmp	r3, #128	; 0x80
 8002018:	d0ef      	beq.n	8001ffa <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800201a:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <xPortStartScheduler+0x134>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f1c3 0307 	rsb	r3, r3, #7
 8002022:	2b04      	cmp	r3, #4
 8002024:	d00a      	beq.n	800203c <xPortStartScheduler+0xb8>
        __asm volatile
 8002026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	60bb      	str	r3, [r7, #8]
    }
 8002038:	bf00      	nop
 800203a:	e7fe      	b.n	800203a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <xPortStartScheduler+0x134>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	021b      	lsls	r3, r3, #8
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <xPortStartScheduler+0x134>)
 8002044:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <xPortStartScheduler+0x134>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800204e:	4a1a      	ldr	r2, [pc, #104]	; (80020b8 <xPortStartScheduler+0x134>)
 8002050:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800205a:	4b18      	ldr	r3, [pc, #96]	; (80020bc <xPortStartScheduler+0x138>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a17      	ldr	r2, [pc, #92]	; (80020bc <xPortStartScheduler+0x138>)
 8002060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002064:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002066:	4b15      	ldr	r3, [pc, #84]	; (80020bc <xPortStartScheduler+0x138>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a14      	ldr	r2, [pc, #80]	; (80020bc <xPortStartScheduler+0x138>)
 800206c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002070:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002072:	f000 f8db 	bl	800222c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002076:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <xPortStartScheduler+0x13c>)
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800207c:	f000 f8f2 	bl	8002264 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002080:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <xPortStartScheduler+0x140>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0f      	ldr	r2, [pc, #60]	; (80020c4 <xPortStartScheduler+0x140>)
 8002086:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800208a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800208c:	f7ff ff64 	bl	8001f58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002090:	f7ff f8d0 	bl	8001234 <vTaskSwitchContext>
    prvTaskExitError();
 8002094:	f7ff ff1e 	bl	8001ed4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00
 80020a8:	410fc271 	.word	0x410fc271
 80020ac:	410fc270 	.word	0x410fc270
 80020b0:	e000e400 	.word	0xe000e400
 80020b4:	200001a4 	.word	0x200001a4
 80020b8:	200001a8 	.word	0x200001a8
 80020bc:	e000ed20 	.word	0xe000ed20
 80020c0:	20000004 	.word	0x20000004
 80020c4:	e000ef34 	.word	0xe000ef34

080020c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
        __asm volatile
 80020ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020d2:	f383 8811 	msr	BASEPRI, r3
 80020d6:	f3bf 8f6f 	isb	sy
 80020da:	f3bf 8f4f 	dsb	sy
 80020de:	607b      	str	r3, [r7, #4]
    }
 80020e0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80020e2:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <vPortEnterCritical+0x58>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	3301      	adds	r3, #1
 80020e8:	4a0d      	ldr	r2, [pc, #52]	; (8002120 <vPortEnterCritical+0x58>)
 80020ea:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <vPortEnterCritical+0x58>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d10f      	bne.n	8002114 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80020f4:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <vPortEnterCritical+0x5c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <vPortEnterCritical+0x4c>
        __asm volatile
 80020fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002102:	f383 8811 	msr	BASEPRI, r3
 8002106:	f3bf 8f6f 	isb	sy
 800210a:	f3bf 8f4f 	dsb	sy
 800210e:	603b      	str	r3, [r7, #0]
    }
 8002110:	bf00      	nop
 8002112:	e7fe      	b.n	8002112 <vPortEnterCritical+0x4a>
    }
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	20000004 	.word	0x20000004
 8002124:	e000ed04 	.word	0xe000ed04

08002128 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800212e:	4b12      	ldr	r3, [pc, #72]	; (8002178 <vPortExitCritical+0x50>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <vPortExitCritical+0x24>
        __asm volatile
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	607b      	str	r3, [r7, #4]
    }
 8002148:	bf00      	nop
 800214a:	e7fe      	b.n	800214a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <vPortExitCritical+0x50>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3b01      	subs	r3, #1
 8002152:	4a09      	ldr	r2, [pc, #36]	; (8002178 <vPortExitCritical+0x50>)
 8002154:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002156:	4b08      	ldr	r3, [pc, #32]	; (8002178 <vPortExitCritical+0x50>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d105      	bne.n	800216a <vPortExitCritical+0x42>
 800215e:	2300      	movs	r3, #0
 8002160:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002168:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000004 	.word	0x20000004
 800217c:	00000000 	.word	0x00000000

08002180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002180:	f3ef 8009 	mrs	r0, PSP
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	4b15      	ldr	r3, [pc, #84]	; (80021e0 <pxCurrentTCBConst>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	f01e 0f10 	tst.w	lr, #16
 8002190:	bf08      	it	eq
 8002192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800219a:	6010      	str	r0, [r2, #0]
 800219c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80021a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80021a4:	f380 8811 	msr	BASEPRI, r0
 80021a8:	f3bf 8f4f 	dsb	sy
 80021ac:	f3bf 8f6f 	isb	sy
 80021b0:	f7ff f840 	bl	8001234 <vTaskSwitchContext>
 80021b4:	f04f 0000 	mov.w	r0, #0
 80021b8:	f380 8811 	msr	BASEPRI, r0
 80021bc:	bc09      	pop	{r0, r3}
 80021be:	6819      	ldr	r1, [r3, #0]
 80021c0:	6808      	ldr	r0, [r1, #0]
 80021c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021c6:	f01e 0f10 	tst.w	lr, #16
 80021ca:	bf08      	it	eq
 80021cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80021d0:	f380 8809 	msr	PSP, r0
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	f3af 8000 	nop.w

080021e0 <pxCurrentTCBConst>:
 80021e0:	20000064 	.word	0x20000064
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop

080021e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
        __asm volatile
 80021ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f2:	f383 8811 	msr	BASEPRI, r3
 80021f6:	f3bf 8f6f 	isb	sy
 80021fa:	f3bf 8f4f 	dsb	sy
 80021fe:	607b      	str	r3, [r7, #4]
    }
 8002200:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002202:	f7fe ff01 	bl	8001008 <xTaskIncrementTick>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <SysTick_Handler+0x40>)
 800220e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	2300      	movs	r3, #0
 8002216:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f383 8811 	msr	BASEPRI, r3
    }
 800221e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002220:	bf00      	nop
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	e000ed04 	.word	0xe000ed04

0800222c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002230:	4b08      	ldr	r3, [pc, #32]	; (8002254 <vPortSetupTimerInterrupt+0x28>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002236:	4b08      	ldr	r3, [pc, #32]	; (8002258 <vPortSetupTimerInterrupt+0x2c>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <vPortSetupTimerInterrupt+0x30>)
 800223e:	4a08      	ldr	r2, [pc, #32]	; (8002260 <vPortSetupTimerInterrupt+0x34>)
 8002240:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002242:	4b04      	ldr	r3, [pc, #16]	; (8002254 <vPortSetupTimerInterrupt+0x28>)
 8002244:	2207      	movs	r2, #7
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e010 	.word	0xe000e010
 8002258:	e000e018 	.word	0xe000e018
 800225c:	e000e014 	.word	0xe000e014
 8002260:	0002980f 	.word	0x0002980f

08002264 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002264:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002274 <vPortEnableVFP+0x10>
 8002268:	6801      	ldr	r1, [r0, #0]
 800226a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800226e:	6001      	str	r1, [r0, #0]
 8002270:	4770      	bx	lr
 8002272:	0000      	.short	0x0000
 8002274:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop

0800227c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002284:	2300      	movs	r3, #0
 8002286:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002288:	f7fe fda4 	bl	8000dd4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800228c:	4b53      	ldr	r3, [pc, #332]	; (80023dc <pvPortMalloc+0x160>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002294:	f000 f908 	bl	80024a8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d012      	beq.n	80022c4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800229e:	2208      	movs	r2, #8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	3308      	adds	r3, #8
 80022aa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d804      	bhi.n	80022c0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	4413      	add	r3, r2
 80022bc:	607b      	str	r3, [r7, #4]
 80022be:	e001      	b.n	80022c4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db70      	blt.n	80023ac <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d06d      	beq.n	80023ac <pvPortMalloc+0x130>
 80022d0:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <pvPortMalloc+0x164>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d868      	bhi.n	80023ac <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80022da:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <pvPortMalloc+0x168>)
 80022dc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80022de:	4b41      	ldr	r3, [pc, #260]	; (80023e4 <pvPortMalloc+0x168>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022e4:	e004      	b.n	80022f0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d903      	bls.n	8002302 <pvPortMalloc+0x86>
 80022fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f1      	bne.n	80022e6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002302:	4b36      	ldr	r3, [pc, #216]	; (80023dc <pvPortMalloc+0x160>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002308:	429a      	cmp	r2, r3
 800230a:	d04f      	beq.n	80023ac <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800230c:	6a3b      	ldr	r3, [r7, #32]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2208      	movs	r2, #8
 8002312:	4413      	add	r3, r2
 8002314:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800231e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	1ad2      	subs	r2, r2, r3
 8002326:	2308      	movs	r3, #8
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	429a      	cmp	r2, r3
 800232c:	d91f      	bls.n	800236e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800232e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <pvPortMalloc+0xda>
        __asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	613b      	str	r3, [r7, #16]
    }
 8002352:	bf00      	nop
 8002354:	e7fe      	b.n	8002354 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	1ad2      	subs	r2, r2, r3
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002368:	6978      	ldr	r0, [r7, #20]
 800236a:	f000 f8f9 	bl	8002560 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <pvPortMalloc+0x164>)
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <pvPortMalloc+0x164>)
 800237a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <pvPortMalloc+0x164>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b19      	ldr	r3, [pc, #100]	; (80023e8 <pvPortMalloc+0x16c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d203      	bcs.n	8002390 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <pvPortMalloc+0x164>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <pvPortMalloc+0x16c>)
 800238e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <pvPortMalloc+0x170>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	3301      	adds	r3, #1
 80023a8:	4a10      	ldr	r2, [pc, #64]	; (80023ec <pvPortMalloc+0x170>)
 80023aa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80023ac:	f7fe fd20 	bl	8000df0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00a      	beq.n	80023d0 <pvPortMalloc+0x154>
        __asm volatile
 80023ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	60fb      	str	r3, [r7, #12]
    }
 80023cc:	bf00      	nop
 80023ce:	e7fe      	b.n	80023ce <pvPortMalloc+0x152>
    return pvReturn;
 80023d0:	69fb      	ldr	r3, [r7, #28]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3728      	adds	r7, #40	; 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20012db4 	.word	0x20012db4
 80023e0:	20012db8 	.word	0x20012db8
 80023e4:	20012dac 	.word	0x20012dac
 80023e8:	20012dbc 	.word	0x20012dbc
 80023ec:	20012dc0 	.word	0x20012dc0

080023f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d049      	beq.n	8002496 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002402:	2308      	movs	r3, #8
 8002404:	425b      	negs	r3, r3
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	2b00      	cmp	r3, #0
 8002416:	db0a      	blt.n	800242e <vPortFree+0x3e>
        __asm volatile
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	f383 8811 	msr	BASEPRI, r3
 8002420:	f3bf 8f6f 	isb	sy
 8002424:	f3bf 8f4f 	dsb	sy
 8002428:	60fb      	str	r3, [r7, #12]
    }
 800242a:	bf00      	nop
 800242c:	e7fe      	b.n	800242c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <vPortFree+0x5c>
        __asm volatile
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	60bb      	str	r3, [r7, #8]
    }
 8002448:	bf00      	nop
 800244a:	e7fe      	b.n	800244a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0fdb      	lsrs	r3, r3, #31
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d01c      	beq.n	8002496 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d118      	bne.n	8002496 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002470:	f7fe fcb0 	bl	8000dd4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <vPortFree+0xb0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4413      	add	r3, r2
 800247e:	4a08      	ldr	r2, [pc, #32]	; (80024a0 <vPortFree+0xb0>)
 8002480:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002482:	6938      	ldr	r0, [r7, #16]
 8002484:	f000 f86c 	bl	8002560 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <vPortFree+0xb4>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	3301      	adds	r3, #1
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <vPortFree+0xb4>)
 8002490:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002492:	f7fe fcad 	bl	8000df0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002496:	bf00      	nop
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	20012db8 	.word	0x20012db8
 80024a4:	20012dc4 	.word	0x20012dc4

080024a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80024ae:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80024b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80024b4:	4b25      	ldr	r3, [pc, #148]	; (800254c <prvHeapInit+0xa4>)
 80024b6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00c      	beq.n	80024dc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	3307      	adds	r3, #7
 80024c6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f023 0307 	bic.w	r3, r3, #7
 80024ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	4a1d      	ldr	r2, [pc, #116]	; (800254c <prvHeapInit+0xa4>)
 80024d8:	4413      	add	r3, r2
 80024da:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80024e0:	4a1b      	ldr	r2, [pc, #108]	; (8002550 <prvHeapInit+0xa8>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <prvHeapInit+0xa8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	4413      	add	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80024f4:	2208      	movs	r2, #8
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f023 0307 	bic.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <prvHeapInit+0xac>)
 8002508:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <prvHeapInit+0xac>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2200      	movs	r2, #0
 8002510:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <prvHeapInit+0xac>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	1ad2      	subs	r2, r2, r3
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <prvHeapInit+0xac>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	4a08      	ldr	r2, [pc, #32]	; (8002558 <prvHeapInit+0xb0>)
 8002536:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	4a07      	ldr	r2, [pc, #28]	; (800255c <prvHeapInit+0xb4>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	200001ac 	.word	0x200001ac
 8002550:	20012dac 	.word	0x20012dac
 8002554:	20012db4 	.word	0x20012db4
 8002558:	20012dbc 	.word	0x20012dbc
 800255c:	20012db8 	.word	0x20012db8

08002560 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002568:	4b28      	ldr	r3, [pc, #160]	; (800260c <prvInsertBlockIntoFreeList+0xac>)
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	e002      	b.n	8002574 <prvInsertBlockIntoFreeList+0x14>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	d8f7      	bhi.n	800256e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	4413      	add	r3, r2
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	429a      	cmp	r2, r3
 800258e:	d108      	bne.n	80025a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	441a      	add	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	441a      	add	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d118      	bne.n	80025e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <prvInsertBlockIntoFreeList+0xb0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d00d      	beq.n	80025de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	441a      	add	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	e008      	b.n	80025f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <prvInsertBlockIntoFreeList+0xb0>)
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e003      	b.n	80025f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80025f0:	68fa      	ldr	r2, [r7, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d002      	beq.n	80025fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80025fe:	bf00      	nop
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20012dac 	.word	0x20012dac
 8002610:	20012db4 	.word	0x20012db4

08002614 <__libc_init_array>:
 8002614:	b570      	push	{r4, r5, r6, lr}
 8002616:	4d0d      	ldr	r5, [pc, #52]	; (800264c <__libc_init_array+0x38>)
 8002618:	4c0d      	ldr	r4, [pc, #52]	; (8002650 <__libc_init_array+0x3c>)
 800261a:	1b64      	subs	r4, r4, r5
 800261c:	10a4      	asrs	r4, r4, #2
 800261e:	2600      	movs	r6, #0
 8002620:	42a6      	cmp	r6, r4
 8002622:	d109      	bne.n	8002638 <__libc_init_array+0x24>
 8002624:	4d0b      	ldr	r5, [pc, #44]	; (8002654 <__libc_init_array+0x40>)
 8002626:	4c0c      	ldr	r4, [pc, #48]	; (8002658 <__libc_init_array+0x44>)
 8002628:	f000 f82e 	bl	8002688 <_init>
 800262c:	1b64      	subs	r4, r4, r5
 800262e:	10a4      	asrs	r4, r4, #2
 8002630:	2600      	movs	r6, #0
 8002632:	42a6      	cmp	r6, r4
 8002634:	d105      	bne.n	8002642 <__libc_init_array+0x2e>
 8002636:	bd70      	pop	{r4, r5, r6, pc}
 8002638:	f855 3b04 	ldr.w	r3, [r5], #4
 800263c:	4798      	blx	r3
 800263e:	3601      	adds	r6, #1
 8002640:	e7ee      	b.n	8002620 <__libc_init_array+0xc>
 8002642:	f855 3b04 	ldr.w	r3, [r5], #4
 8002646:	4798      	blx	r3
 8002648:	3601      	adds	r6, #1
 800264a:	e7f2      	b.n	8002632 <__libc_init_array+0x1e>
 800264c:	080026b8 	.word	0x080026b8
 8002650:	080026b8 	.word	0x080026b8
 8002654:	080026b8 	.word	0x080026b8
 8002658:	080026bc 	.word	0x080026bc

0800265c <memcpy>:
 800265c:	440a      	add	r2, r1
 800265e:	4291      	cmp	r1, r2
 8002660:	f100 33ff 	add.w	r3, r0, #4294967295
 8002664:	d100      	bne.n	8002668 <memcpy+0xc>
 8002666:	4770      	bx	lr
 8002668:	b510      	push	{r4, lr}
 800266a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800266e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002672:	4291      	cmp	r1, r2
 8002674:	d1f9      	bne.n	800266a <memcpy+0xe>
 8002676:	bd10      	pop	{r4, pc}

08002678 <memset>:
 8002678:	4402      	add	r2, r0
 800267a:	4603      	mov	r3, r0
 800267c:	4293      	cmp	r3, r2
 800267e:	d100      	bne.n	8002682 <memset+0xa>
 8002680:	4770      	bx	lr
 8002682:	f803 1b01 	strb.w	r1, [r3], #1
 8002686:	e7f9      	b.n	800267c <memset+0x4>

08002688 <_init>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr

08002694 <_fini>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr
