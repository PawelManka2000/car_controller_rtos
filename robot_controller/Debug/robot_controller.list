
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c164  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800c348  0800c348  0000d348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7b8  0800c7b8  0000e1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7b8  0800c7b8  0000d7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7c0  0800c7c0  0000e1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7c0  0800c7c0  0000d7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7c4  0800c7c4  0000d7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800c7c8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  200001d0  0800c998  0000e1d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  0800c998  0000e87c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b5d0  00000000  00000000  0000e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d70  00000000  00000000  000297d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  0002d540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001080  00000000  00000000  0002eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000283ea  00000000  00000000  0002fb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c2ec  00000000  00000000  00057f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105f23  00000000  00000000  000741f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017a119  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c90  00000000  00000000  0017a15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00180dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c32c 	.word	0x0800c32c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800c32c 	.word	0x0800c32c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b094      	sub	sp, #80	@ 0x50
 8001038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800103a:	f107 0318 	add.w	r3, r7, #24
 800103e:	2238      	movs	r2, #56	@ 0x38
 8001040:	2100      	movs	r1, #0
 8001042:	4618      	mov	r0, r3
 8001044:	f007 fd9b 	bl	8008b7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001056:	2000      	movs	r0, #0
 8001058:	f001 fd64 	bl	8002b24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800105c:	2302      	movs	r3, #2
 800105e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001060:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001066:	2340      	movs	r3, #64	@ 0x40
 8001068:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800106a:	2302      	movs	r3, #2
 800106c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800106e:	2302      	movs	r3, #2
 8001070:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001072:	2304      	movs	r3, #4
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001076:	2355      	movs	r3, #85	@ 0x55
 8001078:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800107a:	2302      	movs	r3, #2
 800107c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800107e:	2302      	movs	r3, #2
 8001080:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fdfe 	bl	8002c8c <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001096:	f000 fe0d 	bl	8001cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800109a:	230f      	movs	r3, #15
 800109c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800109e:	2303      	movs	r3, #3
 80010a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2104      	movs	r1, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 f8fc 	bl	80032b0 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010be:	f000 fdf9 	bl	8001cb4 <Error_Handler>
  }
}
 80010c2:	bf00      	nop
 80010c4:	3750      	adds	r7, #80	@ 0x50
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
	...

080010cc <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	@ 0x28
 80010d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	605a      	str	r2, [r3, #4]
 80010dc:	609a      	str	r2, [r3, #8]
 80010de:	60da      	str	r2, [r3, #12]
 80010e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e2:	4b30      	ldr	r3, [pc, #192]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a2f      	ldr	r2, [pc, #188]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b2d      	ldr	r3, [pc, #180]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010fa:	4b2a      	ldr	r3, [pc, #168]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a29      	ldr	r2, [pc, #164]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001100:	f043 0320 	orr.w	r3, r3, #32
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b27      	ldr	r3, [pc, #156]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	4b24      	ldr	r3, [pc, #144]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a23      	ldr	r2, [pc, #140]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a1d      	ldr	r2, [pc, #116]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001130:	f043 0302 	orr.w	r3, r3, #2
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_GPIO_Init+0xd8>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9|LD2_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f240 3123 	movw	r1, #803	@ 0x323
 8001148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800114c:	f001 fcd2 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001150:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001154:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001156:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800115a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4810      	ldr	r0, [pc, #64]	@ (80011a8 <MX_GPIO_Init+0xdc>)
 8001168:	f001 fb42 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA8 PA9 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_8|GPIO_PIN_9|LD2_Pin;
 800116c:	f240 3323 	movw	r3, #803	@ 0x323
 8001170:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001188:	f001 fb32 	bl	80027f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2028      	movs	r0, #40	@ 0x28
 8001192:	f001 fa45 	bl	8002620 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001196:	2028      	movs	r0, #40	@ 0x28
 8001198:	f001 fa5c 	bl	8002654 <HAL_NVIC_EnableIRQ>

}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	@ 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000800 	.word	0x48000800

080011ac <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b09c      	sub	sp, #112	@ 0x70
 80011b0:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011cc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
 80011dc:	615a      	str	r2, [r3, #20]
 80011de:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2234      	movs	r2, #52	@ 0x34
 80011e4:	2100      	movs	r1, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 fcc9 	bl	8008b7e <memset>

  htim1.Instance = TIM1;
 80011ec:	4b57      	ldr	r3, [pc, #348]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80011ee:	4a58      	ldr	r2, [pc, #352]	@ (8001350 <MX_TIM1_Init+0x1a4>)
 80011f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 80011f2:	4b56      	ldr	r3, [pc, #344]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80011f4:	4a57      	ldr	r2, [pc, #348]	@ (8001354 <MX_TIM1_Init+0x1a8>)
 80011f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f8:	4b54      	ldr	r3, [pc, #336]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80011fe:	4b53      	ldr	r3, [pc, #332]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001200:	2263      	movs	r2, #99	@ 0x63
 8001202:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001204:	4b51      	ldr	r3, [pc, #324]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800120a:	4b50      	ldr	r3, [pc, #320]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800120c:	2200      	movs	r2, #0
 800120e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b4e      	ldr	r3, [pc, #312]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001216:	484d      	ldr	r0, [pc, #308]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001218:	f002 fce6 	bl	8003be8 <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001222:	f000 fd47 	bl	8001cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800122c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001230:	4619      	mov	r1, r3
 8001232:	4846      	ldr	r0, [pc, #280]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001234:	f003 fb24 	bl	8004880 <HAL_TIM_ConfigClockSource>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800123e:	f000 fd39 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001242:	4842      	ldr	r0, [pc, #264]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001244:	f002 fe10 	bl	8003e68 <HAL_TIM_PWM_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800124e:	f000 fd31 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001252:	2300      	movs	r3, #0
 8001254:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001256:	2300      	movs	r3, #0
 8001258:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800125e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001262:	4619      	mov	r1, r3
 8001264:	4839      	ldr	r0, [pc, #228]	@ (800134c <MX_TIM1_Init+0x1a0>)
 8001266:	f004 f8e9 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001270:	f000 fd20 	bl	8001cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001274:	2360      	movs	r3, #96	@ 0x60
 8001276:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127c:	2300      	movs	r3, #0
 800127e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001280:	2300      	movs	r3, #0
 8001282:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001294:	2200      	movs	r2, #0
 8001296:	4619      	mov	r1, r3
 8001298:	482c      	ldr	r0, [pc, #176]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800129a:	f003 f9dd 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80012a4:	f000 fd06 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012a8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012ac:	2204      	movs	r2, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	4826      	ldr	r0, [pc, #152]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80012b2:	f003 f9d1 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 80012bc:	f000 fcfa 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012c4:	2208      	movs	r2, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	4820      	ldr	r0, [pc, #128]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80012ca:	f003 f9c5 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80012d4:	f000 fcee 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012d8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012dc:	220c      	movs	r2, #12
 80012de:	4619      	mov	r1, r3
 80012e0:	481a      	ldr	r0, [pc, #104]	@ (800134c <MX_TIM1_Init+0x1a0>)
 80012e2:	f003 f9b9 	bl	8004658 <HAL_TIM_PWM_ConfigChannel>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80012ec:	f000 fce2 	bl	8001cb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001308:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001316:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4807      	ldr	r0, [pc, #28]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800132e:	f004 f91b 	bl	8005568 <HAL_TIMEx_ConfigBreakDeadTime>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001338:	f000 fcbc 	bl	8001cb4 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 800133c:	4803      	ldr	r0, [pc, #12]	@ (800134c <MX_TIM1_Init+0x1a0>)
 800133e:	f000 feb3 	bl	80020a8 <HAL_TIM_MspPostInit>

}
 8001342:	bf00      	nop
 8001344:	3770      	adds	r7, #112	@ 0x70
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001ec 	.word	0x200001ec
 8001350:	40012c00 	.word	0x40012c00
 8001354:	0002980f 	.word	0x0002980f

08001358 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08c      	sub	sp, #48	@ 0x30
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	2224      	movs	r2, #36	@ 0x24
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f007 fc09 	bl	8008b7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136c:	463b      	mov	r3, r7
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001376:	4b21      	ldr	r3, [pc, #132]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001378:	4a21      	ldr	r2, [pc, #132]	@ (8001400 <MX_TIM3_Init+0xa8>)
 800137a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800137c:	4b1f      	ldr	r3, [pc, #124]	@ (80013fc <MX_TIM3_Init+0xa4>)
 800137e:	2200      	movs	r2, #0
 8001380:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001382:	4b1e      	ldr	r3, [pc, #120]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001388:	4b1c      	ldr	r3, [pc, #112]	@ (80013fc <MX_TIM3_Init+0xa4>)
 800138a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800138e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001392:	2200      	movs	r2, #0
 8001394:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001396:	4b19      	ldr	r3, [pc, #100]	@ (80013fc <MX_TIM3_Init+0xa4>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800139c:	2303      	movs	r3, #3
 800139e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013b4:	2301      	movs	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80013bc:	2300      	movs	r3, #0
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	4619      	mov	r1, r3
 80013c6:	480d      	ldr	r0, [pc, #52]	@ (80013fc <MX_TIM3_Init+0xa4>)
 80013c8:	f002 fec2 	bl	8004150 <HAL_TIM_Encoder_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013d2:	f000 fc6f 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013de:	463b      	mov	r3, r7
 80013e0:	4619      	mov	r1, r3
 80013e2:	4806      	ldr	r0, [pc, #24]	@ (80013fc <MX_TIM3_Init+0xa4>)
 80013e4:	f004 f82a 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013ee:	f000 fc61 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	3730      	adds	r7, #48	@ 0x30
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000238 	.word	0x20000238
 8001400:	40000400 	.word	0x40000400

08001404 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08c      	sub	sp, #48	@ 0x30
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2224      	movs	r2, #36	@ 0x24
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f007 fbb3 	bl	8008b7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]
 8001420:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001422:	4b21      	ldr	r3, [pc, #132]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001424:	4a21      	ldr	r2, [pc, #132]	@ (80014ac <MX_TIM4_Init+0xa8>)
 8001426:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001428:	4b1f      	ldr	r3, [pc, #124]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 800142a:	2200      	movs	r2, #0
 800142c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b1e      	ldr	r3, [pc, #120]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001434:	4b1c      	ldr	r3, [pc, #112]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b1a      	ldr	r3, [pc, #104]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001444:	2280      	movs	r2, #128	@ 0x80
 8001446:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001448:	2303      	movs	r3, #3
 800144a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800144c:	2300      	movs	r3, #0
 800144e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001458:	230a      	movs	r3, #10
 800145a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001460:	2301      	movs	r3, #1
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	4619      	mov	r1, r3
 8001472:	480d      	ldr	r0, [pc, #52]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001474:	f002 fe6c 	bl	8004150 <HAL_TIM_Encoder_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800147e:	f000 fc19 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800148a:	463b      	mov	r3, r7
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	@ (80014a8 <MX_TIM4_Init+0xa4>)
 8001490:	f003 ffd4 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800149a:	f000 fc0b 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3730      	adds	r7, #48	@ 0x30
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000284 	.word	0x20000284
 80014ac:	40000800 	.word	0x40000800

080014b0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08c      	sub	sp, #48	@ 0x30
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	2224      	movs	r2, #36	@ 0x24
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f007 fb5d 	bl	8008b7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	463b      	mov	r3, r7
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <MX_TIM5_Init+0xa8>)
 80014d2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80014d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014e6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ee:	4b19      	ldr	r3, [pc, #100]	@ (8001554 <MX_TIM5_Init+0xa4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f4:	2303      	movs	r3, #3
 80014f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014fc:	2301      	movs	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001508:	2300      	movs	r3, #0
 800150a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800150c:	2301      	movs	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001510:	2300      	movs	r3, #0
 8001512:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001518:	f107 030c 	add.w	r3, r7, #12
 800151c:	4619      	mov	r1, r3
 800151e:	480d      	ldr	r0, [pc, #52]	@ (8001554 <MX_TIM5_Init+0xa4>)
 8001520:	f002 fe16 	bl	8004150 <HAL_TIM_Encoder_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 800152a:	f000 fbc3 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152e:	2300      	movs	r3, #0
 8001530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	4619      	mov	r1, r3
 800153a:	4806      	ldr	r0, [pc, #24]	@ (8001554 <MX_TIM5_Init+0xa4>)
 800153c:	f003 ff7e 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001546:	f000 fbb5 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	3730      	adds	r7, #48	@ 0x30
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200002d0 	.word	0x200002d0
 8001558:	40000c00 	.word	0x40000c00

0800155c <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800156c:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <MX_TIM7_Init+0x64>)
 800156e:	4a15      	ldr	r2, [pc, #84]	@ (80015c4 <MX_TIM7_Init+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 8001572:	4b13      	ldr	r3, [pc, #76]	@ (80015c0 <MX_TIM7_Init+0x64>)
 8001574:	22a9      	movs	r2, #169	@ 0xa9
 8001576:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <MX_TIM7_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <MX_TIM7_Init+0x64>)
 8001580:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001584:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <MX_TIM7_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <MX_TIM7_Init+0x64>)
 800158e:	f002 fb2b 	bl	8003be8 <HAL_TIM_Base_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001598:	f000 fb8c 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_TIM7_Init+0x64>)
 80015aa:	f003 ff47 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80015b4:	f000 fb7e 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	2000031c 	.word	0x2000031c
 80015c4:	40001400 	.word	0x40001400

080015c8 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08c      	sub	sp, #48	@ 0x30
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	2224      	movs	r2, #36	@ 0x24
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f007 fad1 	bl	8008b7e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015e6:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015e8:	4a23      	ldr	r2, [pc, #140]	@ (8001678 <MX_TIM8_Init+0xb0>)
 80015ea:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015ec:	4b21      	ldr	r3, [pc, #132]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f2:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001674 <MX_TIM8_Init+0xac>)
 80015fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001600:	4b1c      	ldr	r3, [pc, #112]	@ (8001674 <MX_TIM8_Init+0xac>)
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <MX_TIM8_Init+0xac>)
 8001608:	2200      	movs	r2, #0
 800160a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800160c:	4b19      	ldr	r3, [pc, #100]	@ (8001674 <MX_TIM8_Init+0xac>)
 800160e:	2200      	movs	r2, #0
 8001610:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001612:	2303      	movs	r3, #3
 8001614:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800161a:	2301      	movs	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800162a:	2301      	movs	r3, #1
 800162c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800162e:	2300      	movs	r3, #0
 8001630:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4619      	mov	r1, r3
 800163c:	480d      	ldr	r0, [pc, #52]	@ (8001674 <MX_TIM8_Init+0xac>)
 800163e:	f002 fd87 	bl	8004150 <HAL_TIM_Encoder_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001648:	f000 fb34 	bl	8001cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_TIM8_Init+0xac>)
 800165e:	f003 feed 	bl	800543c <HAL_TIMEx_MasterConfigSynchronization>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001668:	f000 fb24 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	3730      	adds	r7, #48	@ 0x30
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000368 	.word	0x20000368
 8001678:	40013400 	.word	0x40013400

0800167c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001682:	4a22      	ldr	r2, [pc, #136]	@ (800170c <MX_LPUART1_UART_Init+0x90>)
 8001684:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001686:	4b20      	ldr	r3, [pc, #128]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800168c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 8001696:	2200      	movs	r2, #0
 8001698:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800169a:	4b1b      	ldr	r3, [pc, #108]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80016a0:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016a2:	220c      	movs	r2, #12
 80016a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a6:	4b18      	ldr	r3, [pc, #96]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ac:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b2:	4b15      	ldr	r3, [pc, #84]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80016be:	4812      	ldr	r0, [pc, #72]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016c0:	f004 f82c 	bl	800571c <HAL_UART_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80016ca:	f000 faf3 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016d2:	f005 fff6 	bl	80076c2 <HAL_UARTEx_SetTxFifoThreshold>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80016dc:	f000 faea 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	4809      	ldr	r0, [pc, #36]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016e4:	f006 f82b 	bl	800773e <HAL_UARTEx_SetRxFifoThreshold>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80016ee:	f000 fae1 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_LPUART1_UART_Init+0x8c>)
 80016f4:	f005 ffac 	bl	8007650 <HAL_UARTEx_DisableFifoMode>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80016fe:	f000 fad9 	bl	8001cb4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000448 	.word	0x20000448
 800170c:	40008000 	.word	0x40008000

08001710 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001714:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001716:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <MX_USART1_UART_Init+0x94>)
 8001718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800175a:	f003 ffdf 	bl	800571c <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001764:	f000 faa6 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800176c:	f005 ffa9 	bl	80076c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001776:	f000 fa9d 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4808      	ldr	r0, [pc, #32]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800177e:	f005 ffde 	bl	800773e <HAL_UARTEx_SetRxFifoThreshold>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001788:	f000 fa94 	bl	8001cb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <MX_USART1_UART_Init+0x90>)
 800178e:	f005 ff5f 	bl	8007650 <HAL_UARTEx_DisableFifoMode>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001798:	f000 fa8c 	bl	8001cb4 <Error_Handler>
  }

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200003b4 	.word	0x200003b4
 80017a4:	40013800 	.word	0x40013800

080017a8 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
	L298N_driver->PWM_count = 0;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8b3a      	ldrh	r2, [r7, #24]
 80017d2:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8c3a      	ldrh	r2, [r7, #32]
 80017de:	831a      	strh	r2, [r3, #24]

}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <L298N_set_pwm_count>:

void L298N_set_pwm_count(L298N_driver* L298_driver, uint8_t new_pwm_count){
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]

	L298_driver->PWM_count = new_pwm_count;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	78fa      	ldrb	r2, [r7, #3]
 80017fc:	721a      	strb	r2, [r3, #8]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <L298N_set_input_configuration>:

}


void L298N_set_input_configuration(L298N_driver* L298_driver, EL298N_MODE l298n_mode)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == L298N_MODE_BACKWARD)
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d110      	bne.n	800183e <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68d8      	ldr	r0, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	8a1b      	ldrh	r3, [r3, #16]
 8001824:	2201      	movs	r2, #1
 8001826:	4619      	mov	r1, r3
 8001828:	f001 f964 	bl	8002af4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6958      	ldr	r0, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	8b1b      	ldrh	r3, [r3, #24]
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	f001 f95c 	bl	8002af4 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 800183c:	e026      	b.n	800188c <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == L298N_MODE_FORWARD)
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d110      	bne.n	8001866 <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68d8      	ldr	r0, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	8a1b      	ldrh	r3, [r3, #16]
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	f001 f950 	bl	8002af4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6958      	ldr	r0, [r3, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	8b1b      	ldrh	r3, [r3, #24]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f001 f948 	bl	8002af4 <HAL_GPIO_WritePin>
}
 8001864:	e012      	b.n	800188c <L298N_set_input_configuration+0x82>
	else if(l298n_mode == L298N_MODE_STOP)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10f      	bne.n	800188c <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68d8      	ldr	r0, [r3, #12]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	8a1b      	ldrh	r3, [r3, #16]
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	f001 f93c 	bl	8002af4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6958      	ldr	r0, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	8b1b      	ldrh	r3, [r3, #24]
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	f001 f934 	bl	8002af4 <HAL_GPIO_WritePin>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	601a      	str	r2, [r3, #0]

}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <init_motor_state>:

#include <motor_features.h>
#include "motor_driver.h"
#include "timers_configuration.h"

void init_motor_state(MotorState *motor_state, EMotorId motor_id_){
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	460b      	mov	r3, r1
 80018ba:	70fb      	strb	r3, [r7, #3]

	motor_state->motor_id = motor_id_;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	78fa      	ldrb	r2, [r7, #3]
 80018c0:	741a      	strb	r2, [r3, #16]
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b084      	sub	sp, #16
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	607a      	str	r2, [r7, #4]
 80018da:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	68ba      	ldr	r2, [r7, #8]
 80018e0:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]
	motor_struct->updater_timer_periods = CountPeriodS(updater_tim_);
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f000 f837 	bl	800195c <CountPeriodS>
 80018ee:	eef0 7a40 	vmov.f32	s15, s0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	edc3 7a04 	vstr	s15, [r3, #16]
	motor_struct->encoder_info = enc_inf_param_;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	615a      	str	r2, [r3, #20]
	motor_struct->pid_controller = pid_controller_;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	605a      	str	r2, [r3, #4]

}
 800190a:	bf00      	nop
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <pid_init>:
#include "pid_controller.h"
#include "motor_features.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001912:	b480      	push	{r7}
 8001914:	b087      	sub	sp, #28
 8001916:	af00      	add	r7, sp, #0
 8001918:	6178      	str	r0, [r7, #20]
 800191a:	ed87 0a04 	vstr	s0, [r7, #16]
 800191e:	edc7 0a03 	vstr	s1, [r7, #12]
 8001922:	ed87 1a02 	vstr	s2, [r7, #8]
 8001926:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f04f 0200 	mov.w	r2, #0
 8001936:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	68fa      	ldr	r2, [r7, #12]
 8001942:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	615a      	str	r2, [r3, #20]
}
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 8001970:	f001 fe3c 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8001974:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	fb02 f303 	mul.w	r3, r2, r3
 800197e:	ee07 3a90 	vmov	s15, r3
 8001982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	ee07 3a90 	vmov	s15, r3
 800198c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001990:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001994:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	ee07 3a90 	vmov	s15, r3
}
 800199e:	eeb0 0a67 	vmov.f32	s0, s15
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <main>:
void generate_stair_signal_pwm(void);
void generate_random_signal_velo(void);


int main(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af04      	add	r7, sp, #16

  HAL_Init();
 80019ae:	f000 fd5a 	bl	8002466 <HAL_Init>
  SystemClock_Config();
 80019b2:	f7ff fb3f 	bl	8001034 <SystemClock_Config>
  MX_GPIO_Init();
 80019b6:	f7ff fb89 	bl	80010cc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80019ba:	f7ff fe5f 	bl	800167c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80019be:	f7ff fea7 	bl	8001710 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80019c2:	f7ff fbf3 	bl	80011ac <MX_TIM1_Init>
  MX_TIM3_Init();
 80019c6:	f7ff fcc7 	bl	8001358 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019ca:	f7ff fd1b 	bl	8001404 <MX_TIM4_Init>
  MX_TIM5_Init();
 80019ce:	f7ff fd6f 	bl	80014b0 <MX_TIM5_Init>
  MX_TIM7_Init();
 80019d2:	f7ff fdc3 	bl	800155c <MX_TIM7_Init>
  MX_TIM8_Init();
 80019d6:	f7ff fdf7 	bl	80015c8 <MX_TIM8_Init>


  init_encoder_info(&lb_encoder_info, &htim4);
 80019da:	496b      	ldr	r1, [pc, #428]	@ (8001b88 <main+0x1e0>)
 80019dc:	486b      	ldr	r0, [pc, #428]	@ (8001b8c <main+0x1e4>)
 80019de:	f7ff ff59 	bl	8001894 <init_encoder_info>
  init_encoder_info(&rb_encoder_info, &htim5);
 80019e2:	496b      	ldr	r1, [pc, #428]	@ (8001b90 <main+0x1e8>)
 80019e4:	486b      	ldr	r0, [pc, #428]	@ (8001b94 <main+0x1ec>)
 80019e6:	f7ff ff55 	bl	8001894 <init_encoder_info>
  init_encoder_info(&rf_encoder_info, &htim3);
 80019ea:	496b      	ldr	r1, [pc, #428]	@ (8001b98 <main+0x1f0>)
 80019ec:	486b      	ldr	r0, [pc, #428]	@ (8001b9c <main+0x1f4>)
 80019ee:	f7ff ff51 	bl	8001894 <init_encoder_info>
  init_encoder_info(&lf_encoder_info, &htim8);
 80019f2:	496b      	ldr	r1, [pc, #428]	@ (8001ba0 <main+0x1f8>)
 80019f4:	486b      	ldr	r0, [pc, #428]	@ (8001ba4 <main+0x1fc>)
 80019f6:	f7ff ff4d 	bl	8001894 <init_encoder_info>



  init_motor_state(&lb_motor_state, LB);
 80019fa:	2101      	movs	r1, #1
 80019fc:	486a      	ldr	r0, [pc, #424]	@ (8001ba8 <main+0x200>)
 80019fe:	f7ff ff57 	bl	80018b0 <init_motor_state>
  init_motor_state(&rb_motor_state, RB);
 8001a02:	2102      	movs	r1, #2
 8001a04:	4869      	ldr	r0, [pc, #420]	@ (8001bac <main+0x204>)
 8001a06:	f7ff ff53 	bl	80018b0 <init_motor_state>
  init_motor_state(&rf_motor_state, RF);
 8001a0a:	2103      	movs	r1, #3
 8001a0c:	4868      	ldr	r0, [pc, #416]	@ (8001bb0 <main+0x208>)
 8001a0e:	f7ff ff4f 	bl	80018b0 <init_motor_state>
  init_motor_state(&lf_motor_state, LF);
 8001a12:	2104      	movs	r1, #4
 8001a14:	4867      	ldr	r0, [pc, #412]	@ (8001bb4 <main+0x20c>)
 8001a16:	f7ff ff4b 	bl	80018b0 <init_motor_state>


  L298N_init(&lb_L298N, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	9302      	str	r3, [sp, #8]
 8001a1e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2301      	movs	r3, #1
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a2c:	4a62      	ldr	r2, [pc, #392]	@ (8001bb8 <main+0x210>)
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4862      	ldr	r0, [pc, #392]	@ (8001bbc <main+0x214>)
 8001a32:	f7ff feb9 	bl	80017a8 <L298N_init>
  L298N_init(&rb_L298N, TIM_CHANNEL_2, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 8001a36:	2302      	movs	r3, #2
 8001a38:	9302      	str	r3, [sp, #8]
 8001a3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	2301      	movs	r3, #1
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a48:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb8 <main+0x210>)
 8001a4a:	2104      	movs	r1, #4
 8001a4c:	485c      	ldr	r0, [pc, #368]	@ (8001bc0 <main+0x218>)
 8001a4e:	f7ff feab 	bl	80017a8 <L298N_init>
  L298N_init(&rf_L298N, TIM_CHANNEL_3, &htim1, GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_9);
 8001a52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a5c:	9301      	str	r3, [sp, #4]
 8001a5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a68:	4a53      	ldr	r2, [pc, #332]	@ (8001bb8 <main+0x210>)
 8001a6a:	2108      	movs	r1, #8
 8001a6c:	4855      	ldr	r0, [pc, #340]	@ (8001bc4 <main+0x21c>)
 8001a6e:	f7ff fe9b 	bl	80017a8 <L298N_init>
  L298N_init(&lf_L298N, TIM_CHANNEL_4, &htim1, GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_9);
 8001a72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a76:	9302      	str	r3, [sp, #8]
 8001a78:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a82:	9300      	str	r3, [sp, #0]
 8001a84:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001a88:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb8 <main+0x210>)
 8001a8a:	210c      	movs	r1, #12
 8001a8c:	484e      	ldr	r0, [pc, #312]	@ (8001bc8 <main+0x220>)
 8001a8e:	f7ff fe8b 	bl	80017a8 <L298N_init>


  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8001a92:	215f      	movs	r1, #95	@ 0x5f
 8001a94:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 8001bcc <main+0x224>
 8001a98:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8001bd0 <main+0x228>
 8001a9c:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 8001bd4 <main+0x22c>
 8001aa0:	484d      	ldr	r0, [pc, #308]	@ (8001bd8 <main+0x230>)
 8001aa2:	f7ff ff36 	bl	8001912 <pid_init>

 //TODO
  init_motor(&lb_motor, &lb_motor_state, &htim7, &lb_encoder_info, &pid_controller, &lb_L298N);
 8001aa6:	4b45      	ldr	r3, [pc, #276]	@ (8001bbc <main+0x214>)
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8001bd8 <main+0x230>)
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4b37      	ldr	r3, [pc, #220]	@ (8001b8c <main+0x1e4>)
 8001ab0:	4a4a      	ldr	r2, [pc, #296]	@ (8001bdc <main+0x234>)
 8001ab2:	493d      	ldr	r1, [pc, #244]	@ (8001ba8 <main+0x200>)
 8001ab4:	484a      	ldr	r0, [pc, #296]	@ (8001be0 <main+0x238>)
 8001ab6:	f7ff ff0a 	bl	80018ce <init_motor>
  init_motor(&rb_motor, &rb_motor_state, &htim7, &rb_encoder_info, &pid_controller, &rb_L298N);
 8001aba:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <main+0x218>)
 8001abc:	9301      	str	r3, [sp, #4]
 8001abe:	4b46      	ldr	r3, [pc, #280]	@ (8001bd8 <main+0x230>)
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <main+0x1ec>)
 8001ac4:	4a45      	ldr	r2, [pc, #276]	@ (8001bdc <main+0x234>)
 8001ac6:	4939      	ldr	r1, [pc, #228]	@ (8001bac <main+0x204>)
 8001ac8:	4846      	ldr	r0, [pc, #280]	@ (8001be4 <main+0x23c>)
 8001aca:	f7ff ff00 	bl	80018ce <init_motor>
  init_motor(&rf_motor, &rf_motor_state, &htim7, &rf_encoder_info, &pid_controller, &rf_L298N);
 8001ace:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc4 <main+0x21c>)
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <main+0x230>)
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4b31      	ldr	r3, [pc, #196]	@ (8001b9c <main+0x1f4>)
 8001ad8:	4a40      	ldr	r2, [pc, #256]	@ (8001bdc <main+0x234>)
 8001ada:	4935      	ldr	r1, [pc, #212]	@ (8001bb0 <main+0x208>)
 8001adc:	4842      	ldr	r0, [pc, #264]	@ (8001be8 <main+0x240>)
 8001ade:	f7ff fef6 	bl	80018ce <init_motor>
  init_motor(&lf_motor, &lf_motor_state, &htim7, &lf_encoder_info, &pid_controller, &lf_L298N);
 8001ae2:	4b39      	ldr	r3, [pc, #228]	@ (8001bc8 <main+0x220>)
 8001ae4:	9301      	str	r3, [sp, #4]
 8001ae6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd8 <main+0x230>)
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <main+0x1fc>)
 8001aec:	4a3b      	ldr	r2, [pc, #236]	@ (8001bdc <main+0x234>)
 8001aee:	4931      	ldr	r1, [pc, #196]	@ (8001bb4 <main+0x20c>)
 8001af0:	483e      	ldr	r0, [pc, #248]	@ (8001bec <main+0x244>)
 8001af2:	f7ff feec 	bl	80018ce <init_motor>


  updater_timer_periods = CountPeriodS(lb_motor.motor_updater_tim);
 8001af6:	4b3a      	ldr	r3, [pc, #232]	@ (8001be0 <main+0x238>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff2e 	bl	800195c <CountPeriodS>
 8001b00:	eef0 7a40 	vmov.f32	s15, s0
 8001b04:	4b3a      	ldr	r3, [pc, #232]	@ (8001bf0 <main+0x248>)
 8001b06:	edc3 7a00 	vstr	s15, [r3]


  L298N_set_input_configuration(&lb_L298N, L298N_MODE_FORWARD);
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	482b      	ldr	r0, [pc, #172]	@ (8001bbc <main+0x214>)
 8001b0e:	f7ff fe7c 	bl	800180a <L298N_set_input_configuration>
  L298N_set_input_configuration(&lf_L298N, L298N_MODE_FORWARD);
 8001b12:	2101      	movs	r1, #1
 8001b14:	482c      	ldr	r0, [pc, #176]	@ (8001bc8 <main+0x220>)
 8001b16:	f7ff fe78 	bl	800180a <L298N_set_input_configuration>
  L298N_set_input_configuration(&rb_L298N, L298N_MODE_FORWARD);
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	4828      	ldr	r0, [pc, #160]	@ (8001bc0 <main+0x218>)
 8001b1e:	f7ff fe74 	bl	800180a <L298N_set_input_configuration>
  L298N_set_input_configuration(&rf_L298N, L298N_MODE_FORWARD);
 8001b22:	2101      	movs	r1, #1
 8001b24:	4827      	ldr	r0, [pc, #156]	@ (8001bc4 <main+0x21c>)
 8001b26:	f7ff fe70 	bl	800180a <L298N_set_input_configuration>

//  init_driving_system(&driving_system ,&lb_motor, &rb_motor,&rf_motor, &lf_motor);
//  default_init_driving_system_if(&drv_system_if);


  pwm_output = 30;
 8001b2a:	4b32      	ldr	r3, [pc, #200]	@ (8001bf4 <main+0x24c>)
 8001b2c:	221e      	movs	r2, #30
 8001b2e:	701a      	strb	r2, [r3, #0]
  tick = 0;
 8001b30:	4931      	ldr	r1, [pc, #196]	@ (8001bf8 <main+0x250>)
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	f04f 0300 	mov.w	r3, #0
 8001b3a:	e9c1 2300 	strd	r2, r3, [r1]
  velo = 0;
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <main+0x254>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001b44:	4825      	ldr	r0, [pc, #148]	@ (8001bdc <main+0x234>)
 8001b46:	f002 f917 	bl	8003d78 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 8001b4a:	4815      	ldr	r0, [pc, #84]	@ (8001ba0 <main+0x1f8>)
 8001b4c:	f002 f8a4 	bl	8003c98 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b50:	2100      	movs	r1, #0
 8001b52:	4819      	ldr	r0, [pc, #100]	@ (8001bb8 <main+0x210>)
 8001b54:	f002 f9ea 	bl	8003f2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b58:	2104      	movs	r1, #4
 8001b5a:	4817      	ldr	r0, [pc, #92]	@ (8001bb8 <main+0x210>)
 8001b5c:	f002 f9e6 	bl	8003f2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b60:	2108      	movs	r1, #8
 8001b62:	4815      	ldr	r0, [pc, #84]	@ (8001bb8 <main+0x210>)
 8001b64:	f002 f9e2 	bl	8003f2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001b68:	210c      	movs	r1, #12
 8001b6a:	4813      	ldr	r0, [pc, #76]	@ (8001bb8 <main+0x210>)
 8001b6c:	f002 f9de 	bl	8003f2c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001b70:	213c      	movs	r1, #60	@ 0x3c
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <main+0x1e0>)
 8001b74:	f002 fb92 	bl	800429c <HAL_TIM_Encoder_Start>


  /* USER CODE END 2 */

  HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + MSG_PAYLOAD_LENGTH);
 8001b78:	2208      	movs	r2, #8
 8001b7a:	4921      	ldr	r1, [pc, #132]	@ (8001c00 <main+0x258>)
 8001b7c:	4821      	ldr	r0, [pc, #132]	@ (8001c04 <main+0x25c>)
 8001b7e:	f003 fe1d 	bl	80057bc <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  driving_system.velo_ctrl_flag = 1;
    while (1)
 8001b82:	bf00      	nop
 8001b84:	e7fd      	b.n	8001b82 <main+0x1da>
 8001b86:	bf00      	nop
 8001b88:	20000284 	.word	0x20000284
 8001b8c:	200004f4 	.word	0x200004f4
 8001b90:	200002d0 	.word	0x200002d0
 8001b94:	200004fc 	.word	0x200004fc
 8001b98:	20000238 	.word	0x20000238
 8001b9c:	20000504 	.word	0x20000504
 8001ba0:	20000368 	.word	0x20000368
 8001ba4:	2000050c 	.word	0x2000050c
 8001ba8:	200005e4 	.word	0x200005e4
 8001bac:	200005f8 	.word	0x200005f8
 8001bb0:	2000060c 	.word	0x2000060c
 8001bb4:	20000620 	.word	0x20000620
 8001bb8:	200001ec 	.word	0x200001ec
 8001bbc:	20000574 	.word	0x20000574
 8001bc0:	20000590 	.word	0x20000590
 8001bc4:	200005ac 	.word	0x200005ac
 8001bc8:	200005c8 	.word	0x200005c8
 8001bcc:	00000000 	.word	0x00000000
 8001bd0:	3e4ccccd 	.word	0x3e4ccccd
 8001bd4:	3c23d70a 	.word	0x3c23d70a
 8001bd8:	200004dc 	.word	0x200004dc
 8001bdc:	2000031c 	.word	0x2000031c
 8001be0:	20000514 	.word	0x20000514
 8001be4:	2000052c 	.word	0x2000052c
 8001be8:	20000544 	.word	0x20000544
 8001bec:	2000055c 	.word	0x2000055c
 8001bf0:	20000634 	.word	0x20000634
 8001bf4:	20000640 	.word	0x20000640
 8001bf8:	20000648 	.word	0x20000648
 8001bfc:	20000641 	.word	0x20000641
 8001c00:	20000638 	.word	0x20000638
 8001c04:	20000448 	.word	0x20000448

08001c08 <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]

//	drv_system_if.exe_cmd(&driving_system, cmd_data);
	HAL_UART_Receive_IT(&hlpuart1, cmd_data, CMD_CODE_LENGTH + MSG_PAYLOAD_LENGTH);
 8001c10:	2208      	movs	r2, #8
 8001c12:	4904      	ldr	r1, [pc, #16]	@ (8001c24 <HAL_UART_RxCpltCallback+0x1c>)
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <HAL_UART_RxCpltCallback+0x20>)
 8001c16:	f003 fdd1 	bl	80057bc <HAL_UART_Receive_IT>

}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000638 	.word	0x20000638
 8001c28:	20000448 	.word	0x20000448

08001c2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b5b0      	push	{r4, r5, r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)lb_motor.motor_updater_tim->Instance) {
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d128      	bne.n	8001c94 <HAL_TIM_PeriodElapsedCallback+0x68>


//    	update_motor_position(lb_motor.motor_state, lb_motor.encoder_info);
//    	update_measured_velocity(&lb_motor);
//    	motor_state_set_velocity(&lb_motor_state, velo);
    	L298N_set_pwm_count(lb_motor.L298N_driver, pwm_output);
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	4a16      	ldr	r2, [pc, #88]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fdcd 	bl	80017ec <L298N_set_pwm_count>
    	L298N_set_pwm_count(rb_motor.L298N_driver, pwm_output);
 8001c52:	4b14      	ldr	r3, [pc, #80]	@ (8001ca4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c58:	7812      	ldrb	r2, [r2, #0]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fdc5 	bl	80017ec <L298N_set_pwm_count>
    	L298N_set_pwm_count(rf_motor.L298N_driver, pwm_output);
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c68:	7812      	ldrb	r2, [r2, #0]
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fdbd 	bl	80017ec <L298N_set_pwm_count>
    	L298N_set_pwm_count(lf_motor.L298N_driver, pwm_output);
 8001c72:	4b0e      	ldr	r3, [pc, #56]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fdb5 	bl	80017ec <L298N_set_pwm_count>

//    	driving_system_drive(&driving_system, velo);
    	tick += 1;
 8001c82:	4b0b      	ldr	r3, [pc, #44]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c88:	1c54      	adds	r4, r2, #1
 8001c8a:	f143 0500 	adc.w	r5, r3, #0
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001c90:	e9c3 4500 	strd	r4, r5, [r3]
    }



//  /* USER CODE END Callback 1 */
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c9c:	20000514 	.word	0x20000514
 8001ca0:	20000640 	.word	0x20000640
 8001ca4:	2000052c 	.word	0x2000052c
 8001ca8:	20000544 	.word	0x20000544
 8001cac:	2000055c 	.word	0x2000055c
 8001cb0:	20000648 	.word	0x20000648

08001cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb8:	b672      	cpsid	i
}
 8001cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <Error_Handler+0x8>

08001cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <HAL_MspInit+0x44>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cca:	4a0e      	ldr	r2, [pc, #56]	@ (8001d04 <HAL_MspInit+0x44>)
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <HAL_MspInit+0x44>)
 8001cd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_MspInit+0x44>)
 8001ce0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce2:	4a08      	ldr	r2, [pc, #32]	@ (8001d04 <HAL_MspInit+0x44>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ce8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_MspInit+0x44>)
 8001cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001cf6:	f000 ffb9 	bl	8002c6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b0a0      	sub	sp, #128	@ 0x80
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d20:	f107 0318 	add.w	r3, r7, #24
 8001d24:	2254      	movs	r2, #84	@ 0x54
 8001d26:	2100      	movs	r1, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f006 ff28 	bl	8008b7e <memset>
  if(huart->Instance==LPUART1)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a41      	ldr	r2, [pc, #260]	@ (8001e38 <HAL_UART_MspInit+0x130>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d13f      	bne.n	8001db8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001d38:	2320      	movs	r3, #32
 8001d3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	4618      	mov	r0, r3
 8001d46:	f001 fd01 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d50:	f7ff ffb0 	bl	8001cb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001d54:	4b39      	ldr	r3, [pc, #228]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d58:	4a38      	ldr	r2, [pc, #224]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001d60:	4b36      	ldr	r3, [pc, #216]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001d62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d64:	f003 0301 	and.w	r3, r3, #1
 8001d68:	617b      	str	r3, [r7, #20]
 8001d6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6c:	4b33      	ldr	r3, [pc, #204]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	4a32      	ldr	r2, [pc, #200]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d78:	4b30      	ldr	r3, [pc, #192]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d84:	230c      	movs	r3, #12
 8001d86:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001d94:	230c      	movs	r3, #12
 8001d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d98:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da2:	f000 fd25 	bl	80027f0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	205b      	movs	r0, #91	@ 0x5b
 8001dac:	f000 fc38 	bl	8002620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001db0:	205b      	movs	r0, #91	@ 0x5b
 8001db2:	f000 fc4f 	bl	8002654 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001db6:	e03a      	b.n	8001e2e <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <HAL_UART_MspInit+0x138>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d135      	bne.n	8001e2e <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dca:	f107 0318 	add.w	r3, r7, #24
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f001 fcbc 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001dda:	f7ff ff6b 	bl	8001cb4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dde:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001de0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de2:	4a16      	ldr	r2, [pc, #88]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001de4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001dea:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	4a10      	ldr	r2, [pc, #64]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_UART_MspInit+0x134>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001e0e:	2330      	movs	r3, #48	@ 0x30
 8001e10:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e12:	2302      	movs	r3, #2
 8001e14:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e1e:	2307      	movs	r3, #7
 8001e20:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e22:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e26:	4619      	mov	r1, r3
 8001e28:	4806      	ldr	r0, [pc, #24]	@ (8001e44 <HAL_UART_MspInit+0x13c>)
 8001e2a:	f000 fce1 	bl	80027f0 <HAL_GPIO_Init>
}
 8001e2e:	bf00      	nop
 8001e30:	3780      	adds	r7, #128	@ 0x80
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40008000 	.word	0x40008000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40013800 	.word	0x40013800
 8001e44:	48000800 	.word	0x48000800

08001e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a16      	ldr	r2, [pc, #88]	@ (8001eb0 <HAL_TIM_Base_MspInit+0x68>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d10c      	bne.n	8001e74 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e5e:	4a15      	ldr	r2, [pc, #84]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e60:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e66:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001e72:	e018      	b.n	8001ea6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0f      	ldr	r2, [pc, #60]	@ (8001eb8 <HAL_TIM_Base_MspInit+0x70>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d113      	bne.n	8001ea6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e82:	4a0c      	ldr	r2, [pc, #48]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e84:	f043 0320 	orr.w	r3, r3, #32
 8001e88:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb4 <HAL_TIM_Base_MspInit+0x6c>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2037      	movs	r0, #55	@ 0x37
 8001e9c:	f000 fbc0 	bl	8002620 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001ea0:	2037      	movs	r0, #55	@ 0x37
 8001ea2:	f000 fbd7 	bl	8002654 <HAL_NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	40001400 	.word	0x40001400

08001ebc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b090      	sub	sp, #64	@ 0x40
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6c      	ldr	r2, [pc, #432]	@ (800208c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d129      	bne.n	8001f32 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ede:	4b6c      	ldr	r3, [pc, #432]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee2:	4a6b      	ldr	r2, [pc, #428]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eea:	4b69      	ldr	r3, [pc, #420]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	4b66      	ldr	r3, [pc, #408]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efa:	4a65      	ldr	r2, [pc, #404]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f02:	4b63      	ldr	r3, [pc, #396]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001f0e:	2350      	movs	r3, #80	@ 0x50
 8001f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2c:	f000 fc60 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f30:	e0a7      	b.n	8002082 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a57      	ldr	r2, [pc, #348]	@ (8002094 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d12a      	bne.n	8001f92 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f3c:	4b54      	ldr	r3, [pc, #336]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f40:	4a53      	ldr	r2, [pc, #332]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f42:	f043 0304 	orr.w	r3, r3, #4
 8001f46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f48:	4b51      	ldr	r3, [pc, #324]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	623b      	str	r3, [r7, #32]
 8001f52:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b4e      	ldr	r3, [pc, #312]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f58:	4a4d      	ldr	r2, [pc, #308]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f5a:	f043 0301 	orr.w	r3, r3, #1
 8001f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f60:	4b4b      	ldr	r3, [pc, #300]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f6c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001f7e:	230a      	movs	r3, #10
 8001f80:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f8c:	f000 fc30 	bl	80027f0 <HAL_GPIO_Init>
}
 8001f90:	e077      	b.n	8002082 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a40      	ldr	r2, [pc, #256]	@ (8002098 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d145      	bne.n	8002028 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f9c:	4b3c      	ldr	r3, [pc, #240]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa0:	4a3b      	ldr	r2, [pc, #236]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fa2:	f043 0308 	orr.w	r3, r3, #8
 8001fa6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fa8:	4b39      	ldr	r3, [pc, #228]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001faa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb4:	4b36      	ldr	r3, [pc, #216]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb8:	4a35      	ldr	r2, [pc, #212]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fc0:	4b33      	ldr	r3, [pc, #204]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	617b      	str	r3, [r7, #20]
 8001fca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fcc:	4b30      	ldr	r3, [pc, #192]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	613b      	str	r3, [r7, #16]
 8001fe2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4827      	ldr	r0, [pc, #156]	@ (800209c <HAL_TIM_Encoder_MspInit+0x1e0>)
 8002000:	f000 fbf6 	bl	80027f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002004:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002016:	2301      	movs	r3, #1
 8002018:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800201a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800201e:	4619      	mov	r1, r3
 8002020:	481f      	ldr	r0, [pc, #124]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002022:	f000 fbe5 	bl	80027f0 <HAL_GPIO_Init>
}
 8002026:	e02c      	b.n	8002082 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a1d      	ldr	r2, [pc, #116]	@ (80020a4 <HAL_TIM_Encoder_MspInit+0x1e8>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d127      	bne.n	8002082 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002032:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002034:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002036:	4a16      	ldr	r2, [pc, #88]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002038:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800203c:	6613      	str	r3, [r2, #96]	@ 0x60
 800203e:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204e:	4a10      	ldr	r2, [pc, #64]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002056:	4b0e      	ldr	r3, [pc, #56]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002062:	23c0      	movs	r3, #192	@ 0xc0
 8002064:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002066:	2302      	movs	r3, #2
 8002068:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002072:	2304      	movs	r3, #4
 8002074:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002076:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800207a:	4619      	mov	r1, r3
 800207c:	4808      	ldr	r0, [pc, #32]	@ (80020a0 <HAL_TIM_Encoder_MspInit+0x1e4>)
 800207e:	f000 fbb7 	bl	80027f0 <HAL_GPIO_Init>
}
 8002082:	bf00      	nop
 8002084:	3740      	adds	r7, #64	@ 0x40
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40000400 	.word	0x40000400
 8002090:	40021000 	.word	0x40021000
 8002094:	40000800 	.word	0x40000800
 8002098:	40000c00 	.word	0x40000c00
 800209c:	48000400 	.word	0x48000400
 80020a0:	48000800 	.word	0x48000800
 80020a4:	40013400 	.word	0x40013400

080020a8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 030c 	add.w	r3, r7, #12
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a11      	ldr	r2, [pc, #68]	@ (800210c <HAL_TIM_MspPostInit+0x64>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d11b      	bne.n	8002102 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a10      	ldr	r2, [pc, #64]	@ (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <HAL_TIM_MspPostInit+0x68>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020e2:	230f      	movs	r3, #15
 80020e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80020f2:	2302      	movs	r3, #2
 80020f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f6:	f107 030c 	add.w	r3, r7, #12
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	@ (8002114 <HAL_TIM_MspPostInit+0x6c>)
 80020fe:	f000 fb77 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002102:	bf00      	nop
 8002104:	3720      	adds	r7, #32
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40021000 	.word	0x40021000
 8002114:	48000800 	.word	0x48000800

08002118 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b08c      	sub	sp, #48	@ 0x30
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002128:	4b2c      	ldr	r3, [pc, #176]	@ (80021dc <HAL_InitTick+0xc4>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	4a2b      	ldr	r2, [pc, #172]	@ (80021dc <HAL_InitTick+0xc4>)
 800212e:	f043 0310 	orr.w	r3, r3, #16
 8002132:	6593      	str	r3, [r2, #88]	@ 0x58
 8002134:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <HAL_InitTick+0xc4>)
 8002136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002140:	f107 020c 	add.w	r2, r7, #12
 8002144:	f107 0310 	add.w	r3, r7, #16
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f001 fa86 	bl	800365c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002150:	f001 fa58 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8002154:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002158:	4a21      	ldr	r2, [pc, #132]	@ (80021e0 <HAL_InitTick+0xc8>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0c9b      	lsrs	r3, r3, #18
 8002160:	3b01      	subs	r3, #1
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002164:	4b1f      	ldr	r3, [pc, #124]	@ (80021e4 <HAL_InitTick+0xcc>)
 8002166:	4a20      	ldr	r2, [pc, #128]	@ (80021e8 <HAL_InitTick+0xd0>)
 8002168:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <HAL_InitTick+0xcc>)
 800216c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002170:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002172:	4a1c      	ldr	r2, [pc, #112]	@ (80021e4 <HAL_InitTick+0xcc>)
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002178:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <HAL_InitTick+0xcc>)
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <HAL_InitTick+0xcc>)
 8002180:	2200      	movs	r2, #0
 8002182:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002184:	4817      	ldr	r0, [pc, #92]	@ (80021e4 <HAL_InitTick+0xcc>)
 8002186:	f001 fd2f 	bl	8003be8 <HAL_TIM_Base_Init>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002190:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002194:	2b00      	cmp	r3, #0
 8002196:	d11b      	bne.n	80021d0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002198:	4812      	ldr	r0, [pc, #72]	@ (80021e4 <HAL_InitTick+0xcc>)
 800219a:	f001 fded 	bl	8003d78 <HAL_TIM_Base_Start_IT>
 800219e:	4603      	mov	r3, r0
 80021a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80021a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021ac:	2036      	movs	r0, #54	@ 0x36
 80021ae:	f000 fa51 	bl	8002654 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d808      	bhi.n	80021ca <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021b8:	2200      	movs	r2, #0
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	2036      	movs	r0, #54	@ 0x36
 80021be:	f000 fa2f 	bl	8002620 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <HAL_InitTick+0xd4>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6013      	str	r3, [r2, #0]
 80021c8:	e002      	b.n	80021d0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3730      	adds	r7, #48	@ 0x30
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	431bde83 	.word	0x431bde83
 80021e4:	20000650 	.word	0x20000650
 80021e8:	40001000 	.word	0x40001000
 80021ec:	20000004 	.word	0x20000004

080021f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <NMI_Handler+0x4>

080021f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <HardFault_Handler+0x4>

08002200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <MemManage_Handler+0x4>

08002208 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <BusFault_Handler+0x4>

08002210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002214:	bf00      	nop
 8002216:	e7fd      	b.n	8002214 <UsageFault_Handler+0x4>

08002218 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800222c:	4802      	ldr	r0, [pc, #8]	@ (8002238 <TIM6_DAC_IRQHandler+0x10>)
 800222e:	f002 f8c3 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000650 	.word	0x20000650

0800223c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002240:	4802      	ldr	r0, [pc, #8]	@ (800224c <TIM7_DAC_IRQHandler+0x10>)
 8002242:	f002 f8b9 	bl	80043b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	2000031c 	.word	0x2000031c

08002250 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002254:	4802      	ldr	r0, [pc, #8]	@ (8002260 <LPUART1_IRQHandler+0x10>)
 8002256:	f003 fafd 	bl	8005854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000448 	.word	0x20000448

08002264 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
	return 1;
 8002268:	2301      	movs	r3, #1
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <_kill>:

int _kill(int pid, int sig)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800227e:	f006 fcd1 	bl	8008c24 <__errno>
 8002282:	4603      	mov	r3, r0
 8002284:	2216      	movs	r2, #22
 8002286:	601a      	str	r2, [r3, #0]
	return -1;
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_exit>:

void _exit (int status)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ffe7 	bl	8002274 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022a6:	bf00      	nop
 80022a8:	e7fd      	b.n	80022a6 <_exit+0x12>

080022aa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	60f8      	str	r0, [r7, #12]
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
 80022ba:	e00a      	b.n	80022d2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022bc:	f3af 8000 	nop.w
 80022c0:	4601      	mov	r1, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	60ba      	str	r2, [r7, #8]
 80022c8:	b2ca      	uxtb	r2, r1
 80022ca:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	dbf0      	blt.n	80022bc <_read+0x12>
	}

return len;
 80022da:	687b      	ldr	r3, [r7, #4]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	e009      	b.n	800230a <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	60ba      	str	r2, [r7, #8]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697a      	ldr	r2, [r7, #20]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	dbf1      	blt.n	80022f6 <_write+0x12>
	}
	return len;
 8002312:	687b      	ldr	r3, [r7, #4]
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <_close>:

int _close(int file)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
	return -1;
 8002324:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002344:	605a      	str	r2, [r3, #4]
	return 0;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <_isatty>:

int _isatty(int file)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	return 1;
 800235c:	2301      	movs	r3, #1
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800236a:	b480      	push	{r7}
 800236c:	b085      	sub	sp, #20
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
	return 0;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	@ (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	@ (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	@ (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	@ (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	@ (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f006 fc36 	bl	8008c24 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	@ (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20020000 	.word	0x20020000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	2000069c 	.word	0x2000069c
 80023ec:	20000880 	.word	0x20000880

080023f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	@ (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	@ (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002414:	480d      	ldr	r0, [pc, #52]	@ (800244c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002416:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002418:	f7ff ffea 	bl	80023f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800241c:	480c      	ldr	r0, [pc, #48]	@ (8002450 <LoopForever+0x6>)
  ldr r1, =_edata
 800241e:	490d      	ldr	r1, [pc, #52]	@ (8002454 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002420:	4a0d      	ldr	r2, [pc, #52]	@ (8002458 <LoopForever+0xe>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002424:	e002      	b.n	800242c <LoopCopyDataInit>

08002426 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002426:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002428:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242a:	3304      	adds	r3, #4

0800242c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800242c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002430:	d3f9      	bcc.n	8002426 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002432:	4a0a      	ldr	r2, [pc, #40]	@ (800245c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002434:	4c0a      	ldr	r4, [pc, #40]	@ (8002460 <LoopForever+0x16>)
  movs r3, #0
 8002436:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002438:	e001      	b.n	800243e <LoopFillZerobss>

0800243a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800243c:	3204      	adds	r2, #4

0800243e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002440:	d3fb      	bcc.n	800243a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002442:	f006 fbf5 	bl	8008c30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002446:	f7ff faaf 	bl	80019a8 <main>

0800244a <LoopForever>:

LoopForever:
    b LoopForever
 800244a:	e7fe      	b.n	800244a <LoopForever>
  ldr   r0, =_estack
 800244c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002458:	0800c7c8 	.word	0x0800c7c8
  ldr r2, =_sbss
 800245c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8002460:	2000087c 	.word	0x2000087c

08002464 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC1_2_IRQHandler>

08002466 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002470:	2003      	movs	r0, #3
 8002472:	f000 f8ca 	bl	800260a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002476:	200f      	movs	r0, #15
 8002478:	f7ff fe4e 	bl	8002118 <HAL_InitTick>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	71fb      	strb	r3, [r7, #7]
 8002486:	e001      	b.n	800248c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002488:	f7ff fc1a 	bl	8001cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800248c:	79fb      	ldrb	r3, [r7, #7]

}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return uwTick;
 800249c:	4b03      	ldr	r3, [pc, #12]	@ (80024ac <HAL_GetTick+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
 }
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	200006a0 	.word	0x200006a0

080024b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024c0:	4b0c      	ldr	r3, [pc, #48]	@ (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024cc:	4013      	ands	r3, r2
 80024ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024e2:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <__NVIC_SetPriorityGrouping+0x44>)
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	60d3      	str	r3, [r2, #12]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024fc:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <__NVIC_GetPriorityGrouping+0x18>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	f003 0307 	and.w	r3, r3, #7
}
 8002506:	4618      	mov	r0, r3
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800251e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002522:	2b00      	cmp	r3, #0
 8002524:	db0b      	blt.n	800253e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	f003 021f 	and.w	r2, r3, #31
 800252c:	4907      	ldr	r1, [pc, #28]	@ (800254c <__NVIC_EnableIRQ+0x38>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	095b      	lsrs	r3, r3, #5
 8002534:	2001      	movs	r0, #1
 8002536:	fa00 f202 	lsl.w	r2, r0, r2
 800253a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	e000e100 	.word	0xe000e100

08002550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	6039      	str	r1, [r7, #0]
 800255a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002560:	2b00      	cmp	r3, #0
 8002562:	db0a      	blt.n	800257a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	490c      	ldr	r1, [pc, #48]	@ (800259c <__NVIC_SetPriority+0x4c>)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	0112      	lsls	r2, r2, #4
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	440b      	add	r3, r1
 8002574:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002578:	e00a      	b.n	8002590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4908      	ldr	r1, [pc, #32]	@ (80025a0 <__NVIC_SetPriority+0x50>)
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	3b04      	subs	r3, #4
 8002588:	0112      	lsls	r2, r2, #4
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	440b      	add	r3, r1
 800258e:	761a      	strb	r2, [r3, #24]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000e100 	.word	0xe000e100
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	@ 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f1c3 0307 	rsb	r3, r3, #7
 80025be:	2b04      	cmp	r3, #4
 80025c0:	bf28      	it	cs
 80025c2:	2304      	movcs	r3, #4
 80025c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d902      	bls.n	80025d4 <NVIC_EncodePriority+0x30>
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3b03      	subs	r3, #3
 80025d2:	e000      	b.n	80025d6 <NVIC_EncodePriority+0x32>
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	f04f 32ff 	mov.w	r2, #4294967295
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43da      	mvns	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	401a      	ands	r2, r3
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025ec:	f04f 31ff 	mov.w	r1, #4294967295
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	43d9      	mvns	r1, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025fc:	4313      	orrs	r3, r2
         );
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3724      	adds	r7, #36	@ 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff ff4c 	bl	80024b0 <__NVIC_SetPriorityGrouping>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
 800262c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800262e:	f7ff ff63 	bl	80024f8 <__NVIC_GetPriorityGrouping>
 8002632:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68b9      	ldr	r1, [r7, #8]
 8002638:	6978      	ldr	r0, [r7, #20]
 800263a:	f7ff ffb3 	bl	80025a4 <NVIC_EncodePriority>
 800263e:	4602      	mov	r2, r0
 8002640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff82 	bl	8002550 <__NVIC_SetPriority>
}
 800264c:	bf00      	nop
 800264e:	3718      	adds	r7, #24
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff ff56 	bl	8002514 <__NVIC_EnableIRQ>
}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002670:	b480      	push	{r7}
 8002672:	b085      	sub	sp, #20
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b02      	cmp	r3, #2
 8002686:	d005      	beq.n	8002694 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2204      	movs	r2, #4
 800268c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e037      	b.n	8002704 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 020e 	bic.w	r2, r2, #14
 80026a2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0201 	bic.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c8:	f003 021f 	and.w	r2, r3, #31
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	2101      	movs	r1, #1
 80026d2:	fa01 f202 	lsl.w	r2, r1, r2
 80026d6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026e0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00c      	beq.n	8002704 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026f8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002702:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d00d      	beq.n	8002756 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2204      	movs	r2, #4
 800273e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	73fb      	strb	r3, [r7, #15]
 8002754:	e047      	b.n	80027e6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 020e 	bic.w	r2, r2, #14
 8002764:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002780:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002784:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f003 021f 	and.w	r2, r3, #31
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f202 	lsl.w	r2, r1, r2
 8002798:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80027a2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00c      	beq.n	80027c6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80027c4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	4798      	blx	r3
    }
  }
  return status;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80027fe:	e15a      	b.n	8002ab6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 814c 	beq.w	8002ab0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d005      	beq.n	8002830 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800282c:	2b02      	cmp	r3, #2
 800282e:	d130      	bne.n	8002892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002866:	2201      	movs	r2, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0201 	and.w	r2, r3, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b03      	cmp	r3, #3
 800289c:	d017      	beq.n	80028ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	2203      	movs	r2, #3
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d123      	bne.n	8002922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	08da      	lsrs	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3208      	adds	r2, #8
 80028e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4013      	ands	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f003 0307 	and.w	r3, r3, #7
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4313      	orrs	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	08da      	lsrs	r2, r3, #3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3208      	adds	r2, #8
 800291c:	6939      	ldr	r1, [r7, #16]
 800291e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0203 	and.w	r2, r3, #3
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80a6 	beq.w	8002ab0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002964:	4b5b      	ldr	r3, [pc, #364]	@ (8002ad4 <HAL_GPIO_Init+0x2e4>)
 8002966:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002968:	4a5a      	ldr	r2, [pc, #360]	@ (8002ad4 <HAL_GPIO_Init+0x2e4>)
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002970:	4b58      	ldr	r3, [pc, #352]	@ (8002ad4 <HAL_GPIO_Init+0x2e4>)
 8002972:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002974:	f003 0301 	and.w	r3, r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800297c:	4a56      	ldr	r2, [pc, #344]	@ (8002ad8 <HAL_GPIO_Init+0x2e8>)
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	693a      	ldr	r2, [r7, #16]
 800299c:	4013      	ands	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029a6:	d01f      	beq.n	80029e8 <HAL_GPIO_Init+0x1f8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a4c      	ldr	r2, [pc, #304]	@ (8002adc <HAL_GPIO_Init+0x2ec>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d019      	beq.n	80029e4 <HAL_GPIO_Init+0x1f4>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a4b      	ldr	r2, [pc, #300]	@ (8002ae0 <HAL_GPIO_Init+0x2f0>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d013      	beq.n	80029e0 <HAL_GPIO_Init+0x1f0>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a4a      	ldr	r2, [pc, #296]	@ (8002ae4 <HAL_GPIO_Init+0x2f4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00d      	beq.n	80029dc <HAL_GPIO_Init+0x1ec>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a49      	ldr	r2, [pc, #292]	@ (8002ae8 <HAL_GPIO_Init+0x2f8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d007      	beq.n	80029d8 <HAL_GPIO_Init+0x1e8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a48      	ldr	r2, [pc, #288]	@ (8002aec <HAL_GPIO_Init+0x2fc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d101      	bne.n	80029d4 <HAL_GPIO_Init+0x1e4>
 80029d0:	2305      	movs	r3, #5
 80029d2:	e00a      	b.n	80029ea <HAL_GPIO_Init+0x1fa>
 80029d4:	2306      	movs	r3, #6
 80029d6:	e008      	b.n	80029ea <HAL_GPIO_Init+0x1fa>
 80029d8:	2304      	movs	r3, #4
 80029da:	e006      	b.n	80029ea <HAL_GPIO_Init+0x1fa>
 80029dc:	2303      	movs	r3, #3
 80029de:	e004      	b.n	80029ea <HAL_GPIO_Init+0x1fa>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e002      	b.n	80029ea <HAL_GPIO_Init+0x1fa>
 80029e4:	2301      	movs	r3, #1
 80029e6:	e000      	b.n	80029ea <HAL_GPIO_Init+0x1fa>
 80029e8:	2300      	movs	r3, #0
 80029ea:	697a      	ldr	r2, [r7, #20]
 80029ec:	f002 0203 	and.w	r2, r2, #3
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	4093      	lsls	r3, r2
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029fa:	4937      	ldr	r1, [pc, #220]	@ (8002ad8 <HAL_GPIO_Init+0x2e8>)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	089b      	lsrs	r3, r3, #2
 8002a00:	3302      	adds	r3, #2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a08:	4b39      	ldr	r3, [pc, #228]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a2c:	4a30      	ldr	r2, [pc, #192]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a32:	4b2f      	ldr	r3, [pc, #188]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a56:	4a26      	ldr	r2, [pc, #152]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002a5c:	4b24      	ldr	r3, [pc, #144]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	43db      	mvns	r3, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002a80:	4a1b      	ldr	r2, [pc, #108]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002a86:	4b1a      	ldr	r3, [pc, #104]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4013      	ands	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002aaa:	4a11      	ldr	r2, [pc, #68]	@ (8002af0 <HAL_GPIO_Init+0x300>)
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f47f ae9d 	bne.w	8002800 <HAL_GPIO_Init+0x10>
  }
}
 8002ac6:	bf00      	nop
 8002ac8:	bf00      	nop
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40010000 	.word	0x40010000
 8002adc:	48000400 	.word	0x48000400
 8002ae0:	48000800 	.word	0x48000800
 8002ae4:	48000c00 	.word	0x48000c00
 8002ae8:	48001000 	.word	0x48001000
 8002aec:	48001400 	.word	0x48001400
 8002af0:	40010400 	.word	0x40010400

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b12:	887a      	ldrh	r2, [r7, #2]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d141      	bne.n	8002bb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b32:	4b4b      	ldr	r3, [pc, #300]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b3e:	d131      	bne.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b40:	4b47      	ldr	r3, [pc, #284]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b46:	4a46      	ldr	r2, [pc, #280]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b4c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b50:	4b43      	ldr	r3, [pc, #268]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b58:	4a41      	ldr	r2, [pc, #260]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b60:	4b40      	ldr	r3, [pc, #256]	@ (8002c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2232      	movs	r2, #50	@ 0x32
 8002b66:	fb02 f303 	mul.w	r3, r2, r3
 8002b6a:	4a3f      	ldr	r2, [pc, #252]	@ (8002c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b70:	0c9b      	lsrs	r3, r3, #18
 8002b72:	3301      	adds	r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b76:	e002      	b.n	8002b7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b7e:	4b38      	ldr	r3, [pc, #224]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b8a:	d102      	bne.n	8002b92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1f2      	bne.n	8002b78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b92:	4b33      	ldr	r3, [pc, #204]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b9e:	d158      	bne.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e057      	b.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ba4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002baa:	4a2d      	ldr	r2, [pc, #180]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bb0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002bb4:	e04d      	b.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bbc:	d141      	bne.n	8002c42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bbe:	4b28      	ldr	r3, [pc, #160]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bca:	d131      	bne.n	8002c30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002bcc:	4b24      	ldr	r3, [pc, #144]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bd2:	4a23      	ldr	r2, [pc, #140]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bdc:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002be4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002be6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bec:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2232      	movs	r2, #50	@ 0x32
 8002bf2:	fb02 f303 	mul.w	r3, r2, r3
 8002bf6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9b      	lsrs	r3, r3, #18
 8002bfe:	3301      	adds	r3, #1
 8002c00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c02:	e002      	b.n	8002c0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0a:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c0c:	695b      	ldr	r3, [r3, #20]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c16:	d102      	bne.n	8002c1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f2      	bne.n	8002c04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c1e:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d112      	bne.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002c2c:	2303      	movs	r3, #3
 8002c2e:	e011      	b.n	8002c54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c36:	4a0a      	ldr	r2, [pc, #40]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002c40:	e007      	b.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c42:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c4a:	4a05      	ldr	r2, [pc, #20]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c4c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	40007000 	.word	0x40007000
 8002c64:	20000000 	.word	0x20000000
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002c76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c7a:	6093      	str	r3, [r2, #8]
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40007000 	.word	0x40007000

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e2fe      	b.n	800329c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002caa:	4b97      	ldr	r3, [pc, #604]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb4:	4b94      	ldr	r3, [pc, #592]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	2b0c      	cmp	r3, #12
 8002cc2:	d102      	bne.n	8002cca <HAL_RCC_OscConfig+0x3e>
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b03      	cmp	r3, #3
 8002cc8:	d002      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b8d      	ldr	r3, [pc, #564]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e2d9      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b85      	ldr	r3, [pc, #532]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a84      	ldr	r2, [pc, #528]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b7f      	ldr	r3, [pc, #508]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b7c      	ldr	r3, [pc, #496]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a7b      	ldr	r2, [pc, #492]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b78      	ldr	r3, [pc, #480]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a77      	ldr	r2, [pc, #476]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b75      	ldr	r3, [pc, #468]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a74      	ldr	r2, [pc, #464]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d44:	f7ff fba8 	bl	8002498 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7ff fba4 	bl	8002498 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	@ 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e29e      	b.n	800329c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fb94 	bl	8002498 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7ff fb90 	bl	8002498 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	@ 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e28a      	b.n	800329c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d86:	4b60      	ldr	r3, [pc, #384]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d075      	beq.n	8002e8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002da2:	4b59      	ldr	r3, [pc, #356]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dac:	4b56      	ldr	r3, [pc, #344]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	2b0c      	cmp	r3, #12
 8002dba:	d102      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x136>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d002      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x13c>
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d11f      	bne.n	8002e08 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc8:	4b4f      	ldr	r3, [pc, #316]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_OscConfig+0x154>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e25d      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de0:	4b49      	ldr	r3, [pc, #292]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	691b      	ldr	r3, [r3, #16]
 8002dec:	061b      	lsls	r3, r3, #24
 8002dee:	4946      	ldr	r1, [pc, #280]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002df4:	4b45      	ldr	r3, [pc, #276]	@ (8002f0c <HAL_RCC_OscConfig+0x280>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff f98d 	bl	8002118 <HAL_InitTick>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d043      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e249      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d023      	beq.n	8002e58 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e10:	4b3d      	ldr	r3, [pc, #244]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a3c      	ldr	r2, [pc, #240]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7ff fb3c 	bl	8002498 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7ff fb38 	bl	8002498 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e232      	b.n	800329c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e36:	4b34      	ldr	r3, [pc, #208]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b31      	ldr	r3, [pc, #196]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	061b      	lsls	r3, r3, #24
 8002e50:	492d      	ldr	r1, [pc, #180]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
 8002e56:	e01a      	b.n	8002e8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e58:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002e5e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7ff fb18 	bl	8002498 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6c:	f7ff fb14 	bl	8002498 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e20e      	b.n	800329c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e7e:	4b22      	ldr	r3, [pc, #136]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x1e0>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d041      	beq.n	8002f1e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d01c      	beq.n	8002edc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b19      	ldr	r3, [pc, #100]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ea8:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7ff faf1 	bl	8002498 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eba:	f7ff faed 	bl	8002498 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e1e7      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ecc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002ece:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ed2:	f003 0302 	and.w	r3, r3, #2
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0ef      	beq.n	8002eba <HAL_RCC_OscConfig+0x22e>
 8002eda:	e020      	b.n	8002f1e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002edc:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ee2:	4a09      	ldr	r2, [pc, #36]	@ (8002f08 <HAL_RCC_OscConfig+0x27c>)
 8002ee4:	f023 0301 	bic.w	r3, r3, #1
 8002ee8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7ff fad4 	bl	8002498 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ef2:	e00d      	b.n	8002f10 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7ff fad0 	bl	8002498 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d906      	bls.n	8002f10 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e1ca      	b.n	800329c <HAL_RCC_OscConfig+0x610>
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002f10:	4b8c      	ldr	r3, [pc, #560]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1ea      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 80a6 	beq.w	8003078 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f30:	4b84      	ldr	r3, [pc, #528]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002f32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_OscConfig+0x2b4>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <HAL_RCC_OscConfig+0x2b6>
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00d      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f46:	4b7f      	ldr	r3, [pc, #508]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4a:	4a7e      	ldr	r2, [pc, #504]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f52:	4b7c      	ldr	r3, [pc, #496]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f62:	4b79      	ldr	r3, [pc, #484]	@ (8003148 <HAL_RCC_OscConfig+0x4bc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d118      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f6e:	4b76      	ldr	r3, [pc, #472]	@ (8003148 <HAL_RCC_OscConfig+0x4bc>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a75      	ldr	r2, [pc, #468]	@ (8003148 <HAL_RCC_OscConfig+0x4bc>)
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f7a:	f7ff fa8d 	bl	8002498 <HAL_GetTick>
 8002f7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f82:	f7ff fa89 	bl	8002498 <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e183      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f94:	4b6c      	ldr	r3, [pc, #432]	@ (8003148 <HAL_RCC_OscConfig+0x4bc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d108      	bne.n	8002fba <HAL_RCC_OscConfig+0x32e>
 8002fa8:	4b66      	ldr	r3, [pc, #408]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	4a65      	ldr	r2, [pc, #404]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002fb0:	f043 0301 	orr.w	r3, r3, #1
 8002fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fb8:	e024      	b.n	8003004 <HAL_RCC_OscConfig+0x378>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	d110      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x358>
 8002fc2:	4b60      	ldr	r3, [pc, #384]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc8:	4a5e      	ldr	r2, [pc, #376]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002fca:	f043 0304 	orr.w	r3, r3, #4
 8002fce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002fda:	f043 0301 	orr.w	r3, r3, #1
 8002fde:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002fe2:	e00f      	b.n	8003004 <HAL_RCC_OscConfig+0x378>
 8002fe4:	4b57      	ldr	r3, [pc, #348]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fea:	4a56      	ldr	r2, [pc, #344]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ff4:	4b53      	ldr	r3, [pc, #332]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ffa:	4a52      	ldr	r2, [pc, #328]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8002ffc:	f023 0304 	bic.w	r3, r3, #4
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d016      	beq.n	800303a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300c:	f7ff fa44 	bl	8002498 <HAL_GetTick>
 8003010:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003012:	e00a      	b.n	800302a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003014:	f7ff fa40 	bl	8002498 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e138      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302a:	4b46      	ldr	r3, [pc, #280]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 800302c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0ed      	beq.n	8003014 <HAL_RCC_OscConfig+0x388>
 8003038:	e015      	b.n	8003066 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303a:	f7ff fa2d 	bl	8002498 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003040:	e00a      	b.n	8003058 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003042:	f7ff fa29 	bl	8002498 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003050:	4293      	cmp	r3, r2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e121      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003058:	4b3a      	ldr	r3, [pc, #232]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ed      	bne.n	8003042 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003066:	7ffb      	ldrb	r3, [r7, #31]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d105      	bne.n	8003078 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800306c:	4b35      	ldr	r3, [pc, #212]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 800306e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003070:	4a34      	ldr	r2, [pc, #208]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8003072:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003076:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d03c      	beq.n	80030fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01c      	beq.n	80030c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800308c:	4b2d      	ldr	r3, [pc, #180]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 800308e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003092:	4a2c      	ldr	r2, [pc, #176]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800309c:	f7ff f9fc 	bl	8002498 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030a4:	f7ff f9f8 	bl	8002498 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e0f2      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80030b6:	4b23      	ldr	r3, [pc, #140]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 80030b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0ef      	beq.n	80030a4 <HAL_RCC_OscConfig+0x418>
 80030c4:	e01b      	b.n	80030fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030c6:	4b1f      	ldr	r3, [pc, #124]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 80030c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 80030ce:	f023 0301 	bic.w	r3, r3, #1
 80030d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d6:	f7ff f9df 	bl	8002498 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030de:	f7ff f9db 	bl	8002498 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0d5      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80030f0:	4b14      	ldr	r3, [pc, #80]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 80030f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1ef      	bne.n	80030de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 80c9 	beq.w	800329a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003108:	4b0e      	ldr	r3, [pc, #56]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b0c      	cmp	r3, #12
 8003112:	f000 8083 	beq.w	800321c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	2b02      	cmp	r3, #2
 800311c:	d15e      	bne.n	80031dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800311e:	4b09      	ldr	r3, [pc, #36]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a08      	ldr	r2, [pc, #32]	@ (8003144 <HAL_RCC_OscConfig+0x4b8>)
 8003124:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312a:	f7ff f9b5 	bl	8002498 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003130:	e00c      	b.n	800314c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003132:	f7ff f9b1 	bl	8002498 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d905      	bls.n	800314c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e0ab      	b.n	800329c <HAL_RCC_OscConfig+0x610>
 8003144:	40021000 	.word	0x40021000
 8003148:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800314c:	4b55      	ldr	r3, [pc, #340]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ec      	bne.n	8003132 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003158:	4b52      	ldr	r3, [pc, #328]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	4b52      	ldr	r3, [pc, #328]	@ (80032a8 <HAL_RCC_OscConfig+0x61c>)
 800315e:	4013      	ands	r3, r2
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6a11      	ldr	r1, [r2, #32]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003168:	3a01      	subs	r2, #1
 800316a:	0112      	lsls	r2, r2, #4
 800316c:	4311      	orrs	r1, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003172:	0212      	lsls	r2, r2, #8
 8003174:	4311      	orrs	r1, r2
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800317a:	0852      	lsrs	r2, r2, #1
 800317c:	3a01      	subs	r2, #1
 800317e:	0552      	lsls	r2, r2, #21
 8003180:	4311      	orrs	r1, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003186:	0852      	lsrs	r2, r2, #1
 8003188:	3a01      	subs	r2, #1
 800318a:	0652      	lsls	r2, r2, #25
 800318c:	4311      	orrs	r1, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003192:	06d2      	lsls	r2, r2, #27
 8003194:	430a      	orrs	r2, r1
 8003196:	4943      	ldr	r1, [pc, #268]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 8003198:	4313      	orrs	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800319c:	4b41      	ldr	r3, [pc, #260]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a40      	ldr	r2, [pc, #256]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a8:	4b3e      	ldr	r3, [pc, #248]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a3d      	ldr	r2, [pc, #244]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 80031ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b4:	f7ff f970 	bl	8002498 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031bc:	f7ff f96c 	bl	8002498 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e066      	b.n	800329c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ce:	4b35      	ldr	r3, [pc, #212]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x530>
 80031da:	e05e      	b.n	800329a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031dc:	4b31      	ldr	r3, [pc, #196]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a30      	ldr	r2, [pc, #192]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 80031e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e8:	f7ff f956 	bl	8002498 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f0:	f7ff f952 	bl	8002498 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e04c      	b.n	800329c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003202:	4b28      	ldr	r3, [pc, #160]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800320e:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	4924      	ldr	r1, [pc, #144]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 8003214:	4b25      	ldr	r3, [pc, #148]	@ (80032ac <HAL_RCC_OscConfig+0x620>)
 8003216:	4013      	ands	r3, r2
 8003218:	60cb      	str	r3, [r1, #12]
 800321a:	e03e      	b.n	800329a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e039      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003228:	4b1e      	ldr	r3, [pc, #120]	@ (80032a4 <HAL_RCC_OscConfig+0x618>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f003 0203 	and.w	r2, r3, #3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	429a      	cmp	r2, r3
 800323a:	d12c      	bne.n	8003296 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003246:	3b01      	subs	r3, #1
 8003248:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800324a:	429a      	cmp	r2, r3
 800324c:	d123      	bne.n	8003296 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d11b      	bne.n	8003296 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d113      	bne.n	8003296 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	3b01      	subs	r3, #1
 800327c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d109      	bne.n	8003296 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d001      	beq.n	800329a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e000      	b.n	800329c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3720      	adds	r7, #32
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	019f800c 	.word	0x019f800c
 80032ac:	feeefffc 	.word	0xfeeefffc

080032b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e11e      	b.n	8003506 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032c8:	4b91      	ldr	r3, [pc, #580]	@ (8003510 <HAL_RCC_ClockConfig+0x260>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d910      	bls.n	80032f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032d6:	4b8e      	ldr	r3, [pc, #568]	@ (8003510 <HAL_RCC_ClockConfig+0x260>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 020f 	bic.w	r2, r3, #15
 80032de:	498c      	ldr	r1, [pc, #560]	@ (8003510 <HAL_RCC_ClockConfig+0x260>)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b8a      	ldr	r3, [pc, #552]	@ (8003510 <HAL_RCC_ClockConfig+0x260>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e106      	b.n	8003506 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d073      	beq.n	80033ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b03      	cmp	r3, #3
 800330a:	d129      	bne.n	8003360 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330c:	4b81      	ldr	r3, [pc, #516]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0f4      	b.n	8003506 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800331c:	f000 f9d0 	bl	80036c0 <RCC_GetSysClockFreqFromPLLSource>
 8003320:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4a7c      	ldr	r2, [pc, #496]	@ (8003518 <HAL_RCC_ClockConfig+0x268>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d93f      	bls.n	80033aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800332a:	4b7a      	ldr	r3, [pc, #488]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800333e:	2b00      	cmp	r3, #0
 8003340:	d033      	beq.n	80033aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003346:	2b00      	cmp	r3, #0
 8003348:	d12f      	bne.n	80033aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800334a:	4b72      	ldr	r3, [pc, #456]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003352:	4a70      	ldr	r2, [pc, #448]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 8003354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003358:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800335a:	2380      	movs	r3, #128	@ 0x80
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	e024      	b.n	80033aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d107      	bne.n	8003378 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003368:	4b6a      	ldr	r3, [pc, #424]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d109      	bne.n	8003388 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0c6      	b.n	8003506 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003378:	4b66      	ldr	r3, [pc, #408]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0be      	b.n	8003506 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003388:	f000 f8ce 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 800338c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4a61      	ldr	r2, [pc, #388]	@ (8003518 <HAL_RCC_ClockConfig+0x268>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d909      	bls.n	80033aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003396:	4b5f      	ldr	r3, [pc, #380]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800339e:	4a5d      	ldr	r2, [pc, #372]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 80033a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80033a6:	2380      	movs	r3, #128	@ 0x80
 80033a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f023 0203 	bic.w	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4957      	ldr	r1, [pc, #348]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033bc:	f7ff f86c 	bl	8002498 <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	e00a      	b.n	80033da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c4:	f7ff f868 	bl	8002498 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e095      	b.n	8003506 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	4b4e      	ldr	r3, [pc, #312]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 020c 	and.w	r2, r3, #12
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1eb      	bne.n	80033c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d023      	beq.n	8003440 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003404:	4b43      	ldr	r3, [pc, #268]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	4a42      	ldr	r2, [pc, #264]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800340a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800340e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d007      	beq.n	800342c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800341c:	4b3d      	ldr	r3, [pc, #244]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003424:	4a3b      	ldr	r2, [pc, #236]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 8003426:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800342a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800342c:	4b39      	ldr	r3, [pc, #228]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	4936      	ldr	r1, [pc, #216]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800343a:	4313      	orrs	r3, r2
 800343c:	608b      	str	r3, [r1, #8]
 800343e:	e008      	b.n	8003452 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d105      	bne.n	8003452 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003446:	4b33      	ldr	r3, [pc, #204]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4a32      	ldr	r2, [pc, #200]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 800344c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003450:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003452:	4b2f      	ldr	r3, [pc, #188]	@ (8003510 <HAL_RCC_ClockConfig+0x260>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d21d      	bcs.n	800349c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003460:	4b2b      	ldr	r3, [pc, #172]	@ (8003510 <HAL_RCC_ClockConfig+0x260>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 020f 	bic.w	r2, r3, #15
 8003468:	4929      	ldr	r1, [pc, #164]	@ (8003510 <HAL_RCC_ClockConfig+0x260>)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003470:	f7ff f812 	bl	8002498 <HAL_GetTick>
 8003474:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	e00a      	b.n	800348e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003478:	f7ff f80e 	bl	8002498 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e03b      	b.n	8003506 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800348e:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <HAL_RCC_ClockConfig+0x260>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	429a      	cmp	r2, r3
 800349a:	d1ed      	bne.n	8003478 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	4917      	ldr	r1, [pc, #92]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d009      	beq.n	80034da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034c6:	4b13      	ldr	r3, [pc, #76]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	490f      	ldr	r1, [pc, #60]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034da:	f000 f825 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 80034de:	4602      	mov	r2, r0
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <HAL_RCC_ClockConfig+0x264>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	091b      	lsrs	r3, r3, #4
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	490c      	ldr	r1, [pc, #48]	@ (800351c <HAL_RCC_ClockConfig+0x26c>)
 80034ec:	5ccb      	ldrb	r3, [r1, r3]
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	fa22 f303 	lsr.w	r3, r2, r3
 80034f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003520 <HAL_RCC_ClockConfig+0x270>)
 80034f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_RCC_ClockConfig+0x274>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe fe0a 	bl	8002118 <HAL_InitTick>
 8003504:	4603      	mov	r3, r0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	40022000 	.word	0x40022000
 8003514:	40021000 	.word	0x40021000
 8003518:	04c4b400 	.word	0x04c4b400
 800351c:	0800c348 	.word	0x0800c348
 8003520:	20000000 	.word	0x20000000
 8003524:	20000004 	.word	0x20000004

08003528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800352e:	4b2c      	ldr	r3, [pc, #176]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b04      	cmp	r3, #4
 8003538:	d102      	bne.n	8003540 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800353a:	4b2a      	ldr	r3, [pc, #168]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	e047      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003540:	4b27      	ldr	r3, [pc, #156]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f003 030c 	and.w	r3, r3, #12
 8003548:	2b08      	cmp	r3, #8
 800354a:	d102      	bne.n	8003552 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800354c:	4b26      	ldr	r3, [pc, #152]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	e03e      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003552:	4b23      	ldr	r3, [pc, #140]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b0c      	cmp	r3, #12
 800355c:	d136      	bne.n	80035cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800355e:	4b20      	ldr	r3, [pc, #128]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f003 0303 	and.w	r3, r3, #3
 8003566:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003568:	4b1d      	ldr	r3, [pc, #116]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	3301      	adds	r3, #1
 8003574:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d10c      	bne.n	8003596 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800357c:	4a1a      	ldr	r2, [pc, #104]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	fbb2 f3f3 	udiv	r3, r2, r3
 8003584:	4a16      	ldr	r2, [pc, #88]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003586:	68d2      	ldr	r2, [r2, #12]
 8003588:	0a12      	lsrs	r2, r2, #8
 800358a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	617b      	str	r3, [r7, #20]
      break;
 8003594:	e00c      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003596:	4a13      	ldr	r2, [pc, #76]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	4a10      	ldr	r2, [pc, #64]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035a0:	68d2      	ldr	r2, [r2, #12]
 80035a2:	0a12      	lsrs	r2, r2, #8
 80035a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80035a8:	fb02 f303 	mul.w	r3, r2, r3
 80035ac:	617b      	str	r3, [r7, #20]
      break;
 80035ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0e5b      	lsrs	r3, r3, #25
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	3301      	adds	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	613b      	str	r3, [r7, #16]
 80035ca:	e001      	b.n	80035d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80035cc:	2300      	movs	r3, #0
 80035ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80035d0:	693b      	ldr	r3, [r7, #16]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	016e3600 	.word	0x016e3600

080035ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000000 	.word	0x20000000

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b06      	ldr	r3, [pc, #24]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4904      	ldr	r1, [pc, #16]	@ (800362c <HAL_RCC_GetPCLK1Freq+0x28>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40021000 	.word	0x40021000
 800362c:	0800c358 	.word	0x0800c358

08003630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003634:	f7ff ffda 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b06      	ldr	r3, [pc, #24]	@ (8003654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0adb      	lsrs	r3, r3, #11
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4904      	ldr	r1, [pc, #16]	@ (8003658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40021000 	.word	0x40021000
 8003658:	0800c358 	.word	0x0800c358

0800365c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	220f      	movs	r2, #15
 800366a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800366c:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <HAL_RCC_GetClockConfig+0x5c>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 0203 	and.w	r2, r3, #3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003678:	4b0f      	ldr	r3, [pc, #60]	@ (80036b8 <HAL_RCC_GetClockConfig+0x5c>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003684:	4b0c      	ldr	r3, [pc, #48]	@ (80036b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003690:	4b09      	ldr	r3, [pc, #36]	@ (80036b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	08db      	lsrs	r3, r3, #3
 8003696:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800369e:	4b07      	ldr	r3, [pc, #28]	@ (80036bc <HAL_RCC_GetClockConfig+0x60>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 020f 	and.w	r2, r3, #15
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40022000 	.word	0x40022000

080036c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b087      	sub	sp, #28
 80036c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	091b      	lsrs	r3, r3, #4
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	3301      	adds	r3, #1
 80036dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	2b03      	cmp	r3, #3
 80036e2:	d10c      	bne.n	80036fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036e4:	4a17      	ldr	r2, [pc, #92]	@ (8003744 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ec:	4a14      	ldr	r2, [pc, #80]	@ (8003740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80036ee:	68d2      	ldr	r2, [r2, #12]
 80036f0:	0a12      	lsrs	r2, r2, #8
 80036f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	617b      	str	r3, [r7, #20]
    break;
 80036fc:	e00c      	b.n	8003718 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036fe:	4a12      	ldr	r2, [pc, #72]	@ (8003748 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	fbb2 f3f3 	udiv	r3, r2, r3
 8003706:	4a0e      	ldr	r2, [pc, #56]	@ (8003740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003708:	68d2      	ldr	r2, [r2, #12]
 800370a:	0a12      	lsrs	r2, r2, #8
 800370c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003710:	fb02 f303 	mul.w	r3, r2, r3
 8003714:	617b      	str	r3, [r7, #20]
    break;
 8003716:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	0e5b      	lsrs	r3, r3, #25
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	3301      	adds	r3, #1
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003732:	687b      	ldr	r3, [r7, #4]
}
 8003734:	4618      	mov	r0, r3
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40021000 	.word	0x40021000
 8003744:	016e3600 	.word	0x016e3600
 8003748:	00f42400 	.word	0x00f42400

0800374c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003754:	2300      	movs	r3, #0
 8003756:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003758:	2300      	movs	r3, #0
 800375a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8098 	beq.w	800389a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800376a:	2300      	movs	r3, #0
 800376c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376e:	4b43      	ldr	r3, [pc, #268]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10d      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800377a:	4b40      	ldr	r3, [pc, #256]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800377c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377e:	4a3f      	ldr	r2, [pc, #252]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003784:	6593      	str	r3, [r2, #88]	@ 0x58
 8003786:	4b3d      	ldr	r3, [pc, #244]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800378a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378e:	60bb      	str	r3, [r7, #8]
 8003790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003792:	2301      	movs	r3, #1
 8003794:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003796:	4b3a      	ldr	r3, [pc, #232]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a39      	ldr	r2, [pc, #228]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037a2:	f7fe fe79 	bl	8002498 <HAL_GetTick>
 80037a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037a8:	e009      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037aa:	f7fe fe75 	bl	8002498 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d902      	bls.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	74fb      	strb	r3, [r7, #19]
        break;
 80037bc:	e005      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037be:	4b30      	ldr	r3, [pc, #192]	@ (8003880 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ef      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d159      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037d0:	4b2a      	ldr	r3, [pc, #168]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d01e      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d019      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037ec:	4b23      	ldr	r3, [pc, #140]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037f8:	4b20      	ldr	r3, [pc, #128]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fe:	4a1f      	ldr	r2, [pc, #124]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003804:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003808:	4b1c      	ldr	r3, [pc, #112]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800380e:	4a1b      	ldr	r2, [pc, #108]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003814:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003818:	4a18      	ldr	r2, [pc, #96]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d016      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382a:	f7fe fe35 	bl	8002498 <HAL_GetTick>
 800382e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003830:	e00b      	b.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fe fe31 	bl	8002498 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d902      	bls.n	800384a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	74fb      	strb	r3, [r7, #19]
            break;
 8003848:	e006      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800384a:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0ec      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003858:	7cfb      	ldrb	r3, [r7, #19]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10b      	bne.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800385e:	4b07      	ldr	r3, [pc, #28]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003864:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800386c:	4903      	ldr	r1, [pc, #12]	@ (800387c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003874:	e008      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	74bb      	strb	r3, [r7, #18]
 800387a:	e005      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800387c:	40021000 	.word	0x40021000
 8003880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003888:	7c7b      	ldrb	r3, [r7, #17]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d105      	bne.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800388e:	4ba7      	ldr	r3, [pc, #668]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003892:	4aa6      	ldr	r2, [pc, #664]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003898:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0301 	and.w	r3, r3, #1
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038a6:	4ba1      	ldr	r3, [pc, #644]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ac:	f023 0203 	bic.w	r2, r3, #3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	499d      	ldr	r1, [pc, #628]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c8:	4b98      	ldr	r3, [pc, #608]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038ce:	f023 020c 	bic.w	r2, r3, #12
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	4995      	ldr	r1, [pc, #596]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0304 	and.w	r3, r3, #4
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038ea:	4b90      	ldr	r3, [pc, #576]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	498c      	ldr	r1, [pc, #560]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0308 	and.w	r3, r3, #8
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800390c:	4b87      	ldr	r3, [pc, #540]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800390e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003912:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	4984      	ldr	r1, [pc, #528]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800392e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003934:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	497b      	ldr	r1, [pc, #492]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003950:	4b76      	ldr	r3, [pc, #472]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003956:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	4973      	ldr	r1, [pc, #460]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003972:	4b6e      	ldr	r3, [pc, #440]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003974:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003978:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
 8003980:	496a      	ldr	r1, [pc, #424]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003994:	4b65      	ldr	r3, [pc, #404]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800399a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	4962      	ldr	r1, [pc, #392]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039b6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c4:	4959      	ldr	r1, [pc, #356]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039d8:	4b54      	ldr	r3, [pc, #336]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80039de:	f023 0203 	bic.w	r2, r3, #3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e6:	4951      	ldr	r1, [pc, #324]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039fa:	4b4c      	ldr	r3, [pc, #304]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	4948      	ldr	r1, [pc, #288]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d015      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a1c:	4b43      	ldr	r3, [pc, #268]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	4940      	ldr	r1, [pc, #256]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a3a:	d105      	bne.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4a3a      	ldr	r2, [pc, #232]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d015      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a54:	4b35      	ldr	r3, [pc, #212]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a62:	4932      	ldr	r1, [pc, #200]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a72:	d105      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a74:	4b2d      	ldr	r3, [pc, #180]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	4a2c      	ldr	r2, [pc, #176]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003a7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a8c:	4b27      	ldr	r3, [pc, #156]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a9a:	4924      	ldr	r1, [pc, #144]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aa6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003aac:	4b1f      	ldr	r3, [pc, #124]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a1e      	ldr	r2, [pc, #120]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ab6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d015      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ac4:	4b19      	ldr	r3, [pc, #100]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003aca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad2:	4916      	ldr	r1, [pc, #88]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae4:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a10      	ldr	r2, [pc, #64]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003aee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d019      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003afc:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b0a:	4908      	ldr	r1, [pc, #32]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003b1a:	d109      	bne.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1c:	4b03      	ldr	r3, [pc, #12]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a02      	ldr	r2, [pc, #8]	@ (8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b26:	60d3      	str	r3, [r2, #12]
 8003b28:	e002      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003b2a:	bf00      	nop
 8003b2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d015      	beq.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003b3c:	4b29      	ldr	r3, [pc, #164]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	4926      	ldr	r1, [pc, #152]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b5a:	d105      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b5c:	4b21      	ldr	r3, [pc, #132]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4a20      	ldr	r2, [pc, #128]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d015      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003b74:	4b1b      	ldr	r3, [pc, #108]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b82:	4918      	ldr	r1, [pc, #96]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b92:	d105      	bne.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b94:	4b13      	ldr	r3, [pc, #76]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	4a12      	ldr	r2, [pc, #72]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d015      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003bac:	4b0d      	ldr	r3, [pc, #52]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003bb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bba:	490a      	ldr	r1, [pc, #40]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bca:	d105      	bne.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bcc:	4b05      	ldr	r3, [pc, #20]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	4a04      	ldr	r2, [pc, #16]	@ (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003bd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3718      	adds	r7, #24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	40021000 	.word	0x40021000

08003be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e049      	b.n	8003c8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7fe f91a 	bl	8001e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2202      	movs	r2, #2
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4619      	mov	r1, r3
 8003c26:	4610      	mov	r0, r2
 8003c28:	f000 ff68 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d001      	beq.n	8003cb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e04c      	b.n	8003d4a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a26      	ldr	r2, [pc, #152]	@ (8003d58 <HAL_TIM_Base_Start+0xc0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d022      	beq.n	8003d08 <HAL_TIM_Base_Start+0x70>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cca:	d01d      	beq.n	8003d08 <HAL_TIM_Base_Start+0x70>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a22      	ldr	r2, [pc, #136]	@ (8003d5c <HAL_TIM_Base_Start+0xc4>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d018      	beq.n	8003d08 <HAL_TIM_Base_Start+0x70>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a21      	ldr	r2, [pc, #132]	@ (8003d60 <HAL_TIM_Base_Start+0xc8>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d013      	beq.n	8003d08 <HAL_TIM_Base_Start+0x70>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d64 <HAL_TIM_Base_Start+0xcc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00e      	beq.n	8003d08 <HAL_TIM_Base_Start+0x70>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1e      	ldr	r2, [pc, #120]	@ (8003d68 <HAL_TIM_Base_Start+0xd0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d009      	beq.n	8003d08 <HAL_TIM_Base_Start+0x70>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d6c <HAL_TIM_Base_Start+0xd4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d004      	beq.n	8003d08 <HAL_TIM_Base_Start+0x70>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1b      	ldr	r2, [pc, #108]	@ (8003d70 <HAL_TIM_Base_Start+0xd8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d115      	bne.n	8003d34 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	4b19      	ldr	r3, [pc, #100]	@ (8003d74 <HAL_TIM_Base_Start+0xdc>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2b06      	cmp	r3, #6
 8003d18:	d015      	beq.n	8003d46 <HAL_TIM_Base_Start+0xae>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d20:	d011      	beq.n	8003d46 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f042 0201 	orr.w	r2, r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d32:	e008      	b.n	8003d46 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e000      	b.n	8003d48 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	40012c00 	.word	0x40012c00
 8003d5c:	40000400 	.word	0x40000400
 8003d60:	40000800 	.word	0x40000800
 8003d64:	40000c00 	.word	0x40000c00
 8003d68:	40013400 	.word	0x40013400
 8003d6c:	40014000 	.word	0x40014000
 8003d70:	40015000 	.word	0x40015000
 8003d74:	00010007 	.word	0x00010007

08003d78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b085      	sub	sp, #20
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d001      	beq.n	8003d90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e054      	b.n	8003e3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a26      	ldr	r2, [pc, #152]	@ (8003e48 <HAL_TIM_Base_Start_IT+0xd0>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d022      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dba:	d01d      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a22      	ldr	r2, [pc, #136]	@ (8003e4c <HAL_TIM_Base_Start_IT+0xd4>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d018      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a21      	ldr	r2, [pc, #132]	@ (8003e50 <HAL_TIM_Base_Start_IT+0xd8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d013      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e54 <HAL_TIM_Base_Start_IT+0xdc>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d00e      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a1e      	ldr	r2, [pc, #120]	@ (8003e58 <HAL_TIM_Base_Start_IT+0xe0>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d009      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1c      	ldr	r2, [pc, #112]	@ (8003e5c <HAL_TIM_Base_Start_IT+0xe4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d004      	beq.n	8003df8 <HAL_TIM_Base_Start_IT+0x80>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a1b      	ldr	r2, [pc, #108]	@ (8003e60 <HAL_TIM_Base_Start_IT+0xe8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d115      	bne.n	8003e24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	4b19      	ldr	r3, [pc, #100]	@ (8003e64 <HAL_TIM_Base_Start_IT+0xec>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d015      	beq.n	8003e36 <HAL_TIM_Base_Start_IT+0xbe>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e10:	d011      	beq.n	8003e36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0201 	orr.w	r2, r2, #1
 8003e20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e22:	e008      	b.n	8003e36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f042 0201 	orr.w	r2, r2, #1
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	e000      	b.n	8003e38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40000800 	.word	0x40000800
 8003e54:	40000c00 	.word	0x40000c00
 8003e58:	40013400 	.word	0x40013400
 8003e5c:	40014000 	.word	0x40014000
 8003e60:	40015000 	.word	0x40015000
 8003e64:	00010007 	.word	0x00010007

08003e68 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e049      	b.n	8003f0e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f841 	bl	8003f16 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f000 fe28 	bl	8004afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
	...

08003f2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d109      	bne.n	8003f50 <HAL_TIM_PWM_Start+0x24>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e03c      	b.n	8003fca <HAL_TIM_PWM_Start+0x9e>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d109      	bne.n	8003f6a <HAL_TIM_PWM_Start+0x3e>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	bf14      	ite	ne
 8003f62:	2301      	movne	r3, #1
 8003f64:	2300      	moveq	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	e02f      	b.n	8003fca <HAL_TIM_PWM_Start+0x9e>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	d109      	bne.n	8003f84 <HAL_TIM_PWM_Start+0x58>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	bf14      	ite	ne
 8003f7c:	2301      	movne	r3, #1
 8003f7e:	2300      	moveq	r3, #0
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	e022      	b.n	8003fca <HAL_TIM_PWM_Start+0x9e>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d109      	bne.n	8003f9e <HAL_TIM_PWM_Start+0x72>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	bf14      	ite	ne
 8003f96:	2301      	movne	r3, #1
 8003f98:	2300      	moveq	r3, #0
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	e015      	b.n	8003fca <HAL_TIM_PWM_Start+0x9e>
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	2b10      	cmp	r3, #16
 8003fa2:	d109      	bne.n	8003fb8 <HAL_TIM_PWM_Start+0x8c>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	e008      	b.n	8003fca <HAL_TIM_PWM_Start+0x9e>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	bf14      	ite	ne
 8003fc4:	2301      	movne	r3, #1
 8003fc6:	2300      	moveq	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d001      	beq.n	8003fd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e0a6      	b.n	8004120 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0xb6>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fe0:	e023      	b.n	800402a <HAL_TIM_PWM_Start+0xfe>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b04      	cmp	r3, #4
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0xc6>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ff0:	e01b      	b.n	800402a <HAL_TIM_PWM_Start+0xfe>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_PWM_Start+0xd6>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004000:	e013      	b.n	800402a <HAL_TIM_PWM_Start+0xfe>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d104      	bne.n	8004012 <HAL_TIM_PWM_Start+0xe6>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004010:	e00b      	b.n	800402a <HAL_TIM_PWM_Start+0xfe>
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d104      	bne.n	8004022 <HAL_TIM_PWM_Start+0xf6>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004020:	e003      	b.n	800402a <HAL_TIM_PWM_Start+0xfe>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2202      	movs	r2, #2
 8004026:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2201      	movs	r2, #1
 8004030:	6839      	ldr	r1, [r7, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f001 f9dc 	bl	80053f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a3a      	ldr	r2, [pc, #232]	@ (8004128 <HAL_TIM_PWM_Start+0x1fc>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <HAL_TIM_PWM_Start+0x148>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a39      	ldr	r2, [pc, #228]	@ (800412c <HAL_TIM_PWM_Start+0x200>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <HAL_TIM_PWM_Start+0x148>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a37      	ldr	r2, [pc, #220]	@ (8004130 <HAL_TIM_PWM_Start+0x204>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <HAL_TIM_PWM_Start+0x148>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a36      	ldr	r2, [pc, #216]	@ (8004134 <HAL_TIM_PWM_Start+0x208>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <HAL_TIM_PWM_Start+0x148>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a34      	ldr	r2, [pc, #208]	@ (8004138 <HAL_TIM_PWM_Start+0x20c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <HAL_TIM_PWM_Start+0x148>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a33      	ldr	r2, [pc, #204]	@ (800413c <HAL_TIM_PWM_Start+0x210>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <HAL_TIM_PWM_Start+0x14c>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <HAL_TIM_PWM_Start+0x14e>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800408c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a25      	ldr	r2, [pc, #148]	@ (8004128 <HAL_TIM_PWM_Start+0x1fc>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d022      	beq.n	80040de <HAL_TIM_PWM_Start+0x1b2>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a0:	d01d      	beq.n	80040de <HAL_TIM_PWM_Start+0x1b2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a26      	ldr	r2, [pc, #152]	@ (8004140 <HAL_TIM_PWM_Start+0x214>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d018      	beq.n	80040de <HAL_TIM_PWM_Start+0x1b2>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a24      	ldr	r2, [pc, #144]	@ (8004144 <HAL_TIM_PWM_Start+0x218>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_TIM_PWM_Start+0x1b2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a23      	ldr	r2, [pc, #140]	@ (8004148 <HAL_TIM_PWM_Start+0x21c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00e      	beq.n	80040de <HAL_TIM_PWM_Start+0x1b2>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a19      	ldr	r2, [pc, #100]	@ (800412c <HAL_TIM_PWM_Start+0x200>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d009      	beq.n	80040de <HAL_TIM_PWM_Start+0x1b2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a18      	ldr	r2, [pc, #96]	@ (8004130 <HAL_TIM_PWM_Start+0x204>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_TIM_PWM_Start+0x1b2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a18      	ldr	r2, [pc, #96]	@ (800413c <HAL_TIM_PWM_Start+0x210>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d115      	bne.n	800410a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	4b19      	ldr	r3, [pc, #100]	@ (800414c <HAL_TIM_PWM_Start+0x220>)
 80040e6:	4013      	ands	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b06      	cmp	r3, #6
 80040ee:	d015      	beq.n	800411c <HAL_TIM_PWM_Start+0x1f0>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f6:	d011      	beq.n	800411c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004108:	e008      	b.n	800411c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f042 0201 	orr.w	r2, r2, #1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e000      	b.n	800411e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	40012c00 	.word	0x40012c00
 800412c:	40013400 	.word	0x40013400
 8004130:	40014000 	.word	0x40014000
 8004134:	40014400 	.word	0x40014400
 8004138:	40014800 	.word	0x40014800
 800413c:	40015000 	.word	0x40015000
 8004140:	40000400 	.word	0x40000400
 8004144:	40000800 	.word	0x40000800
 8004148:	40000c00 	.word	0x40000c00
 800414c:	00010007 	.word	0x00010007

08004150 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e097      	b.n	8004294 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7fd fe9f 	bl	8001ebc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004194:	f023 0307 	bic.w	r3, r3, #7
 8004198:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3304      	adds	r3, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	4610      	mov	r0, r2
 80041a6:	f000 fca9 	bl	8004afc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041d2:	f023 0303 	bic.w	r3, r3, #3
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	4313      	orrs	r3, r2
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80041f0:	f023 030c 	bic.w	r3, r3, #12
 80041f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041fc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004200:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	4313      	orrs	r3, r2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	011a      	lsls	r2, r3, #4
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	031b      	lsls	r3, r3, #12
 8004220:	4313      	orrs	r3, r2
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	4313      	orrs	r3, r2
 8004226:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800422e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	4313      	orrs	r3, r2
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	697a      	ldr	r2, [r7, #20]
 8004250:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3718      	adds	r7, #24
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042c4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d110      	bne.n	80042ee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80042d2:	7b7b      	ldrb	r3, [r7, #13]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d001      	beq.n	80042dc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e069      	b.n	80043b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042ec:	e031      	b.n	8004352 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d110      	bne.n	8004316 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042f4:	7bbb      	ldrb	r3, [r7, #14]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d102      	bne.n	8004300 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80042fa:	7b3b      	ldrb	r3, [r7, #12]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d001      	beq.n	8004304 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e055      	b.n	80043b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004314:	e01d      	b.n	8004352 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004316:	7bfb      	ldrb	r3, [r7, #15]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d108      	bne.n	800432e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800431c:	7bbb      	ldrb	r3, [r7, #14]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d105      	bne.n	800432e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004322:	7b7b      	ldrb	r3, [r7, #13]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d102      	bne.n	800432e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004328:	7b3b      	ldrb	r3, [r7, #12]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d001      	beq.n	8004332 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e03e      	b.n	80043b0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2202      	movs	r2, #2
 800433e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2202      	movs	r2, #2
 8004346:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2202      	movs	r2, #2
 800434e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_TIM_Encoder_Start+0xc4>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b04      	cmp	r3, #4
 800435c:	d008      	beq.n	8004370 <HAL_TIM_Encoder_Start+0xd4>
 800435e:	e00f      	b.n	8004380 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2201      	movs	r2, #1
 8004366:	2100      	movs	r1, #0
 8004368:	4618      	mov	r0, r3
 800436a:	f001 f841 	bl	80053f0 <TIM_CCxChannelCmd>
      break;
 800436e:	e016      	b.n	800439e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	2201      	movs	r2, #1
 8004376:	2104      	movs	r1, #4
 8004378:	4618      	mov	r0, r3
 800437a:	f001 f839 	bl	80053f0 <TIM_CCxChannelCmd>
      break;
 800437e:	e00e      	b.n	800439e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2201      	movs	r2, #1
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f001 f831 	bl	80053f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2201      	movs	r2, #1
 8004394:	2104      	movs	r1, #4
 8004396:	4618      	mov	r0, r3
 8004398:	f001 f82a 	bl	80053f0 <TIM_CCxChannelCmd>
      break;
 800439c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d020      	beq.n	800441c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f06f 0202 	mvn.w	r2, #2
 80043ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fb5c 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 8004408:	e005      	b.n	8004416 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fb4e 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fb5f 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	2b00      	cmp	r3, #0
 8004424:	d020      	beq.n	8004468 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0204 	mvn.w	r2, #4
 8004438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2202      	movs	r2, #2
 800443e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fb36 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 fb28 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fb39 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d020      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0208 	mvn.w	r2, #8
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2204      	movs	r2, #4
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69db      	ldr	r3, [r3, #28]
 8004492:	f003 0303 	and.w	r3, r3, #3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fb10 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fb02 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 fb13 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d020      	beq.n	8004500 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0310 	and.w	r3, r3, #16
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01b      	beq.n	8004500 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0210 	mvn.w	r2, #16
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2208      	movs	r2, #8
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 faea 	bl	8004ac0 <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fadc 	bl	8004aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 faed 	bl	8004ad4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00c      	beq.n	8004524 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d007      	beq.n	8004524 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0201 	mvn.w	r2, #1
 800451c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd fb84 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452a:	2b00      	cmp	r3, #0
 800452c:	d104      	bne.n	8004538 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004534:	2b00      	cmp	r3, #0
 8004536:	d00c      	beq.n	8004552 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800454a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f001 f8a9 	bl	80056a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00c      	beq.n	8004576 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d007      	beq.n	8004576 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800456e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f001 f8a1 	bl	80056b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00c      	beq.n	800459a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004592:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 faa7 	bl	8004ae8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	f003 0320 	and.w	r3, r3, #32
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00c      	beq.n	80045be <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d007      	beq.n	80045be <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f06f 0220 	mvn.w	r2, #32
 80045b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f001 f869 	bl	8005690 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00c      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d007      	beq.n	80045e2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80045da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f001 f875 	bl	80056cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00c      	beq.n	8004606 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80045fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f001 f86d 	bl	80056e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d00c      	beq.n	800462a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d007      	beq.n	800462a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f001 f865 	bl	80056f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d00c      	beq.n	800464e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f001 f85d 	bl	8005708 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800464e:	bf00      	nop
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004664:	2300      	movs	r3, #0
 8004666:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004672:	2302      	movs	r3, #2
 8004674:	e0ff      	b.n	8004876 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b14      	cmp	r3, #20
 8004682:	f200 80f0 	bhi.w	8004866 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004686:	a201      	add	r2, pc, #4	@ (adr r2, 800468c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468c:	080046e1 	.word	0x080046e1
 8004690:	08004867 	.word	0x08004867
 8004694:	08004867 	.word	0x08004867
 8004698:	08004867 	.word	0x08004867
 800469c:	08004721 	.word	0x08004721
 80046a0:	08004867 	.word	0x08004867
 80046a4:	08004867 	.word	0x08004867
 80046a8:	08004867 	.word	0x08004867
 80046ac:	08004763 	.word	0x08004763
 80046b0:	08004867 	.word	0x08004867
 80046b4:	08004867 	.word	0x08004867
 80046b8:	08004867 	.word	0x08004867
 80046bc:	080047a3 	.word	0x080047a3
 80046c0:	08004867 	.word	0x08004867
 80046c4:	08004867 	.word	0x08004867
 80046c8:	08004867 	.word	0x08004867
 80046cc:	080047e5 	.word	0x080047e5
 80046d0:	08004867 	.word	0x08004867
 80046d4:	08004867 	.word	0x08004867
 80046d8:	08004867 	.word	0x08004867
 80046dc:	08004825 	.word	0x08004825
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fabc 	bl	8004c64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	699a      	ldr	r2, [r3, #24]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0208 	orr.w	r2, r2, #8
 80046fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0204 	bic.w	r2, r2, #4
 800470a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6999      	ldr	r1, [r3, #24]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	691a      	ldr	r2, [r3, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	619a      	str	r2, [r3, #24]
      break;
 800471e:	e0a5      	b.n	800486c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	4618      	mov	r0, r3
 8004728:	f000 fb36 	bl	8004d98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800473a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	699a      	ldr	r2, [r3, #24]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800474a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6999      	ldr	r1, [r3, #24]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	021a      	lsls	r2, r3, #8
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	430a      	orrs	r2, r1
 800475e:	619a      	str	r2, [r3, #24]
      break;
 8004760:	e084      	b.n	800486c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68b9      	ldr	r1, [r7, #8]
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fba9 	bl	8004ec0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	69da      	ldr	r2, [r3, #28]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f042 0208 	orr.w	r2, r2, #8
 800477c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f022 0204 	bic.w	r2, r2, #4
 800478c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69d9      	ldr	r1, [r3, #28]
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	61da      	str	r2, [r3, #28]
      break;
 80047a0:	e064      	b.n	800486c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fc1b 	bl	8004fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69da      	ldr	r2, [r3, #28]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	69da      	ldr	r2, [r3, #28]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69d9      	ldr	r1, [r3, #28]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	021a      	lsls	r2, r3, #8
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	61da      	str	r2, [r3, #28]
      break;
 80047e2:	e043      	b.n	800486c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fc8e 	bl	800510c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0208 	orr.w	r2, r2, #8
 80047fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0204 	bic.w	r2, r2, #4
 800480e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	691a      	ldr	r2, [r3, #16]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004822:	e023      	b.n	800486c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68b9      	ldr	r1, [r7, #8]
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fcd8 	bl	80051e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800483e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800484e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	021a      	lsls	r2, r3, #8
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004864:	e002      	b.n	800486c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
      break;
 800486a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004874:	7dfb      	ldrb	r3, [r7, #23]
}
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop

08004880 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800488a:	2300      	movs	r3, #0
 800488c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004894:	2b01      	cmp	r3, #1
 8004896:	d101      	bne.n	800489c <HAL_TIM_ConfigClockSource+0x1c>
 8004898:	2302      	movs	r3, #2
 800489a:	e0f6      	b.n	8004a8a <HAL_TIM_ConfigClockSource+0x20a>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2202      	movs	r2, #2
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80048ba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80048be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a6f      	ldr	r2, [pc, #444]	@ (8004a94 <HAL_TIM_ConfigClockSource+0x214>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	f000 80c1 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 80048dc:	4a6d      	ldr	r2, [pc, #436]	@ (8004a94 <HAL_TIM_ConfigClockSource+0x214>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	f200 80c6 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 80048e4:	4a6c      	ldr	r2, [pc, #432]	@ (8004a98 <HAL_TIM_ConfigClockSource+0x218>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	f000 80b9 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 80048ec:	4a6a      	ldr	r2, [pc, #424]	@ (8004a98 <HAL_TIM_ConfigClockSource+0x218>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	f200 80be 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 80048f4:	4a69      	ldr	r2, [pc, #420]	@ (8004a9c <HAL_TIM_ConfigClockSource+0x21c>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	f000 80b1 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 80048fc:	4a67      	ldr	r2, [pc, #412]	@ (8004a9c <HAL_TIM_ConfigClockSource+0x21c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	f200 80b6 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004904:	4a66      	ldr	r2, [pc, #408]	@ (8004aa0 <HAL_TIM_ConfigClockSource+0x220>)
 8004906:	4293      	cmp	r3, r2
 8004908:	f000 80a9 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 800490c:	4a64      	ldr	r2, [pc, #400]	@ (8004aa0 <HAL_TIM_ConfigClockSource+0x220>)
 800490e:	4293      	cmp	r3, r2
 8004910:	f200 80ae 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004914:	4a63      	ldr	r2, [pc, #396]	@ (8004aa4 <HAL_TIM_ConfigClockSource+0x224>)
 8004916:	4293      	cmp	r3, r2
 8004918:	f000 80a1 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 800491c:	4a61      	ldr	r2, [pc, #388]	@ (8004aa4 <HAL_TIM_ConfigClockSource+0x224>)
 800491e:	4293      	cmp	r3, r2
 8004920:	f200 80a6 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004924:	4a60      	ldr	r2, [pc, #384]	@ (8004aa8 <HAL_TIM_ConfigClockSource+0x228>)
 8004926:	4293      	cmp	r3, r2
 8004928:	f000 8099 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 800492c:	4a5e      	ldr	r2, [pc, #376]	@ (8004aa8 <HAL_TIM_ConfigClockSource+0x228>)
 800492e:	4293      	cmp	r3, r2
 8004930:	f200 809e 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004934:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004938:	f000 8091 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 800493c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004940:	f200 8096 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004944:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004948:	f000 8089 	beq.w	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 800494c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004950:	f200 808e 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004958:	d03e      	beq.n	80049d8 <HAL_TIM_ConfigClockSource+0x158>
 800495a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800495e:	f200 8087 	bhi.w	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004966:	f000 8086 	beq.w	8004a76 <HAL_TIM_ConfigClockSource+0x1f6>
 800496a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800496e:	d87f      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004970:	2b70      	cmp	r3, #112	@ 0x70
 8004972:	d01a      	beq.n	80049aa <HAL_TIM_ConfigClockSource+0x12a>
 8004974:	2b70      	cmp	r3, #112	@ 0x70
 8004976:	d87b      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004978:	2b60      	cmp	r3, #96	@ 0x60
 800497a:	d050      	beq.n	8004a1e <HAL_TIM_ConfigClockSource+0x19e>
 800497c:	2b60      	cmp	r3, #96	@ 0x60
 800497e:	d877      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004980:	2b50      	cmp	r3, #80	@ 0x50
 8004982:	d03c      	beq.n	80049fe <HAL_TIM_ConfigClockSource+0x17e>
 8004984:	2b50      	cmp	r3, #80	@ 0x50
 8004986:	d873      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004988:	2b40      	cmp	r3, #64	@ 0x40
 800498a:	d058      	beq.n	8004a3e <HAL_TIM_ConfigClockSource+0x1be>
 800498c:	2b40      	cmp	r3, #64	@ 0x40
 800498e:	d86f      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004990:	2b30      	cmp	r3, #48	@ 0x30
 8004992:	d064      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 8004994:	2b30      	cmp	r3, #48	@ 0x30
 8004996:	d86b      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 8004998:	2b20      	cmp	r3, #32
 800499a:	d060      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 800499c:	2b20      	cmp	r3, #32
 800499e:	d867      	bhi.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d05c      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d05a      	beq.n	8004a5e <HAL_TIM_ConfigClockSource+0x1de>
 80049a8:	e062      	b.n	8004a70 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049ba:	f000 fcf9 	bl	80053b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80049cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	609a      	str	r2, [r3, #8]
      break;
 80049d6:	e04f      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80049e8:	f000 fce2 	bl	80053b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689a      	ldr	r2, [r3, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049fa:	609a      	str	r2, [r3, #8]
      break;
 80049fc:	e03c      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	f000 fc54 	bl	80052b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2150      	movs	r1, #80	@ 0x50
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fcad 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004a1c:	e02c      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f000 fc73 	bl	8005316 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2160      	movs	r1, #96	@ 0x60
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fc9d 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004a3c:	e01c      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f000 fc34 	bl	80052b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2140      	movs	r1, #64	@ 0x40
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fc8d 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004a5c:	e00c      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f000 fc84 	bl	8005376 <TIM_ITRx_SetConfig>
      break;
 8004a6e:	e003      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	73fb      	strb	r3, [r7, #15]
      break;
 8004a74:	e000      	b.n	8004a78 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004a76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	00100070 	.word	0x00100070
 8004a98:	00100060 	.word	0x00100060
 8004a9c:	00100050 	.word	0x00100050
 8004aa0:	00100040 	.word	0x00100040
 8004aa4:	00100030 	.word	0x00100030
 8004aa8:	00100020 	.word	0x00100020

08004aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a4c      	ldr	r2, [pc, #304]	@ (8004c40 <TIM_Base_SetConfig+0x144>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d017      	beq.n	8004b44 <TIM_Base_SetConfig+0x48>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1a:	d013      	beq.n	8004b44 <TIM_Base_SetConfig+0x48>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a49      	ldr	r2, [pc, #292]	@ (8004c44 <TIM_Base_SetConfig+0x148>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d00f      	beq.n	8004b44 <TIM_Base_SetConfig+0x48>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a48      	ldr	r2, [pc, #288]	@ (8004c48 <TIM_Base_SetConfig+0x14c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d00b      	beq.n	8004b44 <TIM_Base_SetConfig+0x48>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a47      	ldr	r2, [pc, #284]	@ (8004c4c <TIM_Base_SetConfig+0x150>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d007      	beq.n	8004b44 <TIM_Base_SetConfig+0x48>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a46      	ldr	r2, [pc, #280]	@ (8004c50 <TIM_Base_SetConfig+0x154>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d003      	beq.n	8004b44 <TIM_Base_SetConfig+0x48>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a45      	ldr	r2, [pc, #276]	@ (8004c54 <TIM_Base_SetConfig+0x158>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d108      	bne.n	8004b56 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a39      	ldr	r2, [pc, #228]	@ (8004c40 <TIM_Base_SetConfig+0x144>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d023      	beq.n	8004ba6 <TIM_Base_SetConfig+0xaa>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b64:	d01f      	beq.n	8004ba6 <TIM_Base_SetConfig+0xaa>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a36      	ldr	r2, [pc, #216]	@ (8004c44 <TIM_Base_SetConfig+0x148>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01b      	beq.n	8004ba6 <TIM_Base_SetConfig+0xaa>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a35      	ldr	r2, [pc, #212]	@ (8004c48 <TIM_Base_SetConfig+0x14c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d017      	beq.n	8004ba6 <TIM_Base_SetConfig+0xaa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a34      	ldr	r2, [pc, #208]	@ (8004c4c <TIM_Base_SetConfig+0x150>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d013      	beq.n	8004ba6 <TIM_Base_SetConfig+0xaa>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a33      	ldr	r2, [pc, #204]	@ (8004c50 <TIM_Base_SetConfig+0x154>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d00f      	beq.n	8004ba6 <TIM_Base_SetConfig+0xaa>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a33      	ldr	r2, [pc, #204]	@ (8004c58 <TIM_Base_SetConfig+0x15c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d00b      	beq.n	8004ba6 <TIM_Base_SetConfig+0xaa>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a32      	ldr	r2, [pc, #200]	@ (8004c5c <TIM_Base_SetConfig+0x160>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d007      	beq.n	8004ba6 <TIM_Base_SetConfig+0xaa>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a31      	ldr	r2, [pc, #196]	@ (8004c60 <TIM_Base_SetConfig+0x164>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d003      	beq.n	8004ba6 <TIM_Base_SetConfig+0xaa>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8004c54 <TIM_Base_SetConfig+0x158>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d108      	bne.n	8004bb8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a18      	ldr	r2, [pc, #96]	@ (8004c40 <TIM_Base_SetConfig+0x144>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <TIM_Base_SetConfig+0x110>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a1a      	ldr	r2, [pc, #104]	@ (8004c50 <TIM_Base_SetConfig+0x154>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00f      	beq.n	8004c0c <TIM_Base_SetConfig+0x110>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a1a      	ldr	r2, [pc, #104]	@ (8004c58 <TIM_Base_SetConfig+0x15c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d00b      	beq.n	8004c0c <TIM_Base_SetConfig+0x110>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a19      	ldr	r2, [pc, #100]	@ (8004c5c <TIM_Base_SetConfig+0x160>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d007      	beq.n	8004c0c <TIM_Base_SetConfig+0x110>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a18      	ldr	r2, [pc, #96]	@ (8004c60 <TIM_Base_SetConfig+0x164>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d003      	beq.n	8004c0c <TIM_Base_SetConfig+0x110>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a13      	ldr	r2, [pc, #76]	@ (8004c54 <TIM_Base_SetConfig+0x158>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d103      	bne.n	8004c14 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d105      	bne.n	8004c32 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	f023 0201 	bic.w	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	611a      	str	r2, [r3, #16]
  }
}
 8004c32:	bf00      	nop
 8004c34:	3714      	adds	r7, #20
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40000400 	.word	0x40000400
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40000c00 	.word	0x40000c00
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40015000 	.word	0x40015000
 8004c58:	40014000 	.word	0x40014000
 8004c5c:	40014400 	.word	0x40014400
 8004c60:	40014800 	.word	0x40014800

08004c64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b087      	sub	sp, #28
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f023 0201 	bic.w	r2, r3, #1
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	f023 0302 	bic.w	r3, r3, #2
 8004cb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a30      	ldr	r2, [pc, #192]	@ (8004d80 <TIM_OC1_SetConfig+0x11c>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d013      	beq.n	8004cec <TIM_OC1_SetConfig+0x88>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8004d84 <TIM_OC1_SetConfig+0x120>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d00f      	beq.n	8004cec <TIM_OC1_SetConfig+0x88>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a2e      	ldr	r2, [pc, #184]	@ (8004d88 <TIM_OC1_SetConfig+0x124>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00b      	beq.n	8004cec <TIM_OC1_SetConfig+0x88>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8004d8c <TIM_OC1_SetConfig+0x128>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d007      	beq.n	8004cec <TIM_OC1_SetConfig+0x88>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2c      	ldr	r2, [pc, #176]	@ (8004d90 <TIM_OC1_SetConfig+0x12c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d003      	beq.n	8004cec <TIM_OC1_SetConfig+0x88>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a2b      	ldr	r2, [pc, #172]	@ (8004d94 <TIM_OC1_SetConfig+0x130>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d10c      	bne.n	8004d06 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f023 0308 	bic.w	r3, r3, #8
 8004cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	f023 0304 	bic.w	r3, r3, #4
 8004d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a1d      	ldr	r2, [pc, #116]	@ (8004d80 <TIM_OC1_SetConfig+0x11c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d013      	beq.n	8004d36 <TIM_OC1_SetConfig+0xd2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a1c      	ldr	r2, [pc, #112]	@ (8004d84 <TIM_OC1_SetConfig+0x120>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d00f      	beq.n	8004d36 <TIM_OC1_SetConfig+0xd2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a1b      	ldr	r2, [pc, #108]	@ (8004d88 <TIM_OC1_SetConfig+0x124>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00b      	beq.n	8004d36 <TIM_OC1_SetConfig+0xd2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a1a      	ldr	r2, [pc, #104]	@ (8004d8c <TIM_OC1_SetConfig+0x128>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d007      	beq.n	8004d36 <TIM_OC1_SetConfig+0xd2>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a19      	ldr	r2, [pc, #100]	@ (8004d90 <TIM_OC1_SetConfig+0x12c>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d003      	beq.n	8004d36 <TIM_OC1_SetConfig+0xd2>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a18      	ldr	r2, [pc, #96]	@ (8004d94 <TIM_OC1_SetConfig+0x130>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d111      	bne.n	8004d5a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	695b      	ldr	r3, [r3, #20]
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	699b      	ldr	r3, [r3, #24]
 8004d54:	693a      	ldr	r2, [r7, #16]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	621a      	str	r2, [r3, #32]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40013400 	.word	0x40013400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40015000 	.word	0x40015000

08004d98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a1b      	ldr	r3, [r3, #32]
 8004dac:	f023 0210 	bic.w	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	021b      	lsls	r3, r3, #8
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	f023 0320 	bic.w	r3, r3, #32
 8004de6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	697a      	ldr	r2, [r7, #20]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2c      	ldr	r2, [pc, #176]	@ (8004ea8 <TIM_OC2_SetConfig+0x110>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_OC2_SetConfig+0x74>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a2b      	ldr	r2, [pc, #172]	@ (8004eac <TIM_OC2_SetConfig+0x114>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_OC2_SetConfig+0x74>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <TIM_OC2_SetConfig+0x118>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d10d      	bne.n	8004e28 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	011b      	lsls	r3, r3, #4
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea8 <TIM_OC2_SetConfig+0x110>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d013      	beq.n	8004e58 <TIM_OC2_SetConfig+0xc0>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a1e      	ldr	r2, [pc, #120]	@ (8004eac <TIM_OC2_SetConfig+0x114>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00f      	beq.n	8004e58 <TIM_OC2_SetConfig+0xc0>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb4 <TIM_OC2_SetConfig+0x11c>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00b      	beq.n	8004e58 <TIM_OC2_SetConfig+0xc0>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb8 <TIM_OC2_SetConfig+0x120>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d007      	beq.n	8004e58 <TIM_OC2_SetConfig+0xc0>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ebc <TIM_OC2_SetConfig+0x124>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d003      	beq.n	8004e58 <TIM_OC2_SetConfig+0xc0>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a17      	ldr	r2, [pc, #92]	@ (8004eb0 <TIM_OC2_SetConfig+0x118>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d113      	bne.n	8004e80 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	697a      	ldr	r2, [r7, #20]
 8004e98:	621a      	str	r2, [r3, #32]
}
 8004e9a:	bf00      	nop
 8004e9c:	371c      	adds	r7, #28
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40013400 	.word	0x40013400
 8004eb0:	40015000 	.word	0x40015000
 8004eb4:	40014000 	.word	0x40014000
 8004eb8:	40014400 	.word	0x40014400
 8004ebc:	40014800 	.word	0x40014800

08004ec0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fcc <TIM_OC3_SetConfig+0x10c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d007      	beq.n	8004f32 <TIM_OC3_SetConfig+0x72>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd0 <TIM_OC3_SetConfig+0x110>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d003      	beq.n	8004f32 <TIM_OC3_SetConfig+0x72>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a29      	ldr	r2, [pc, #164]	@ (8004fd4 <TIM_OC3_SetConfig+0x114>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d10d      	bne.n	8004f4e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	4a1e      	ldr	r2, [pc, #120]	@ (8004fcc <TIM_OC3_SetConfig+0x10c>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d013      	beq.n	8004f7e <TIM_OC3_SetConfig+0xbe>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd0 <TIM_OC3_SetConfig+0x110>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00f      	beq.n	8004f7e <TIM_OC3_SetConfig+0xbe>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a1d      	ldr	r2, [pc, #116]	@ (8004fd8 <TIM_OC3_SetConfig+0x118>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00b      	beq.n	8004f7e <TIM_OC3_SetConfig+0xbe>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <TIM_OC3_SetConfig+0x11c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d007      	beq.n	8004f7e <TIM_OC3_SetConfig+0xbe>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe0 <TIM_OC3_SetConfig+0x120>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_OC3_SetConfig+0xbe>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a16      	ldr	r2, [pc, #88]	@ (8004fd4 <TIM_OC3_SetConfig+0x114>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d113      	bne.n	8004fa6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	621a      	str	r2, [r3, #32]
}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40013400 	.word	0x40013400
 8004fd4:	40015000 	.word	0x40015000
 8004fd8:	40014000 	.word	0x40014000
 8004fdc:	40014400 	.word	0x40014400
 8004fe0:	40014800 	.word	0x40014800

08004fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800501e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	031b      	lsls	r3, r3, #12
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a2c      	ldr	r2, [pc, #176]	@ (80050f4 <TIM_OC4_SetConfig+0x110>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_OC4_SetConfig+0x74>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a2b      	ldr	r2, [pc, #172]	@ (80050f8 <TIM_OC4_SetConfig+0x114>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC4_SetConfig+0x74>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a2a      	ldr	r2, [pc, #168]	@ (80050fc <TIM_OC4_SetConfig+0x118>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d10d      	bne.n	8005074 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800505e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	031b      	lsls	r3, r3, #12
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005072:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1f      	ldr	r2, [pc, #124]	@ (80050f4 <TIM_OC4_SetConfig+0x110>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <TIM_OC4_SetConfig+0xc0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1e      	ldr	r2, [pc, #120]	@ (80050f8 <TIM_OC4_SetConfig+0x114>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00f      	beq.n	80050a4 <TIM_OC4_SetConfig+0xc0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <TIM_OC4_SetConfig+0x11c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00b      	beq.n	80050a4 <TIM_OC4_SetConfig+0xc0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <TIM_OC4_SetConfig+0x120>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <TIM_OC4_SetConfig+0xc0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a1c      	ldr	r2, [pc, #112]	@ (8005108 <TIM_OC4_SetConfig+0x124>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_OC4_SetConfig+0xc0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a17      	ldr	r2, [pc, #92]	@ (80050fc <TIM_OC4_SetConfig+0x118>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d113      	bne.n	80050cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80050b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	019b      	lsls	r3, r3, #6
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	019b      	lsls	r3, r3, #6
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40013400 	.word	0x40013400
 80050fc:	40015000 	.word	0x40015000
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400
 8005108:	40014800 	.word	0x40014800

0800510c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800513a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800513e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005150:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	041b      	lsls	r3, r3, #16
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4313      	orrs	r3, r2
 800515c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a19      	ldr	r2, [pc, #100]	@ (80051c8 <TIM_OC5_SetConfig+0xbc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <TIM_OC5_SetConfig+0x82>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a18      	ldr	r2, [pc, #96]	@ (80051cc <TIM_OC5_SetConfig+0xc0>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00f      	beq.n	800518e <TIM_OC5_SetConfig+0x82>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a17      	ldr	r2, [pc, #92]	@ (80051d0 <TIM_OC5_SetConfig+0xc4>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00b      	beq.n	800518e <TIM_OC5_SetConfig+0x82>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a16      	ldr	r2, [pc, #88]	@ (80051d4 <TIM_OC5_SetConfig+0xc8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d007      	beq.n	800518e <TIM_OC5_SetConfig+0x82>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a15      	ldr	r2, [pc, #84]	@ (80051d8 <TIM_OC5_SetConfig+0xcc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_OC5_SetConfig+0x82>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a14      	ldr	r2, [pc, #80]	@ (80051dc <TIM_OC5_SetConfig+0xd0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d109      	bne.n	80051a2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005194:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	021b      	lsls	r3, r3, #8
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	621a      	str	r2, [r3, #32]
}
 80051bc:	bf00      	nop
 80051be:	371c      	adds	r7, #28
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40013400 	.word	0x40013400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800
 80051dc:	40015000 	.word	0x40015000

080051e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800520e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	051b      	lsls	r3, r3, #20
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	4313      	orrs	r3, r2
 8005232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a1a      	ldr	r2, [pc, #104]	@ (80052a0 <TIM_OC6_SetConfig+0xc0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d013      	beq.n	8005264 <TIM_OC6_SetConfig+0x84>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a19      	ldr	r2, [pc, #100]	@ (80052a4 <TIM_OC6_SetConfig+0xc4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00f      	beq.n	8005264 <TIM_OC6_SetConfig+0x84>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a18      	ldr	r2, [pc, #96]	@ (80052a8 <TIM_OC6_SetConfig+0xc8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d00b      	beq.n	8005264 <TIM_OC6_SetConfig+0x84>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a17      	ldr	r2, [pc, #92]	@ (80052ac <TIM_OC6_SetConfig+0xcc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d007      	beq.n	8005264 <TIM_OC6_SetConfig+0x84>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a16      	ldr	r2, [pc, #88]	@ (80052b0 <TIM_OC6_SetConfig+0xd0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_OC6_SetConfig+0x84>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a15      	ldr	r2, [pc, #84]	@ (80052b4 <TIM_OC6_SetConfig+0xd4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d109      	bne.n	8005278 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800526a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	029b      	lsls	r3, r3, #10
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4313      	orrs	r3, r2
 8005276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	621a      	str	r2, [r3, #32]
}
 8005292:	bf00      	nop
 8005294:	371c      	adds	r7, #28
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40012c00 	.word	0x40012c00
 80052a4:	40013400 	.word	0x40013400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40014400 	.word	0x40014400
 80052b0:	40014800 	.word	0x40014800
 80052b4:	40015000 	.word	0x40015000

080052b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b087      	sub	sp, #28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f023 0201 	bic.w	r2, r3, #1
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052dc:	693b      	ldr	r3, [r7, #16]
 80052de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f023 030a 	bic.w	r3, r3, #10
 80052f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	621a      	str	r2, [r3, #32]
}
 800530a:	bf00      	nop
 800530c:	371c      	adds	r7, #28
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005316:	b480      	push	{r7}
 8005318:	b087      	sub	sp, #28
 800531a:	af00      	add	r7, sp, #0
 800531c:	60f8      	str	r0, [r7, #12]
 800531e:	60b9      	str	r1, [r7, #8]
 8005320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f023 0210 	bic.w	r2, r3, #16
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	699b      	ldr	r3, [r3, #24]
 8005338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005340:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	031b      	lsls	r3, r3, #12
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005352:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005376:	b480      	push	{r7}
 8005378:	b085      	sub	sp, #20
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800538c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005390:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	f043 0307 	orr.w	r3, r3, #7
 800539c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	609a      	str	r2, [r3, #8]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	021a      	lsls	r2, r3, #8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	609a      	str	r2, [r3, #8]
}
 80053e4:	bf00      	nop
 80053e6:	371c      	adds	r7, #28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2201      	movs	r2, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800544c:	2b01      	cmp	r3, #1
 800544e:	d101      	bne.n	8005454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005450:	2302      	movs	r3, #2
 8005452:	e074      	b.n	800553e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a34      	ldr	r2, [pc, #208]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a33      	ldr	r2, [pc, #204]	@ (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a31      	ldr	r2, [pc, #196]	@ (8005554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005498:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80054aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a21      	ldr	r2, [pc, #132]	@ (800554c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d022      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054d4:	d01d      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1f      	ldr	r2, [pc, #124]	@ (8005558 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d018      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1d      	ldr	r2, [pc, #116]	@ (800555c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d013      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00e      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a15      	ldr	r2, [pc, #84]	@ (8005550 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d009      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a18      	ldr	r2, [pc, #96]	@ (8005564 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d004      	beq.n	8005512 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a11      	ldr	r2, [pc, #68]	@ (8005554 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d10c      	bne.n	800552c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005518:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	4313      	orrs	r3, r2
 8005522:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40012c00 	.word	0x40012c00
 8005550:	40013400 	.word	0x40013400
 8005554:	40015000 	.word	0x40015000
 8005558:	40000400 	.word	0x40000400
 800555c:	40000800 	.word	0x40000800
 8005560:	40000c00 	.word	0x40000c00
 8005564:	40014000 	.word	0x40014000

08005568 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800557c:	2b01      	cmp	r3, #1
 800557e:	d101      	bne.n	8005584 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005580:	2302      	movs	r3, #2
 8005582:	e078      	b.n	8005676 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	695b      	ldr	r3, [r3, #20]
 80055dc:	4313      	orrs	r3, r2
 80055de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	69db      	ldr	r3, [r3, #28]
 8005608:	4313      	orrs	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1c      	ldr	r2, [pc, #112]	@ (8005684 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d009      	beq.n	800562a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a1b      	ldr	r2, [pc, #108]	@ (8005688 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d004      	beq.n	800562a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a19      	ldr	r2, [pc, #100]	@ (800568c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d11c      	bne.n	8005664 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	051b      	lsls	r3, r3, #20
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	4313      	orrs	r3, r2
 8005646:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	4313      	orrs	r3, r2
 8005654:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3714      	adds	r7, #20
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40013400 	.word	0x40013400
 800568c:	40015000 	.word	0x40015000

08005690 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e042      	b.n	80057b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005734:	2b00      	cmp	r3, #0
 8005736:	d106      	bne.n	8005746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7fc fae1 	bl	8001d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2224      	movs	r2, #36	@ 0x24
 800574a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f022 0201 	bic.w	r2, r2, #1
 800575c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f000 feb4 	bl	80064d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 fbb5 	bl	8005edc <UART_SetConfig>
 8005772:	4603      	mov	r3, r0
 8005774:	2b01      	cmp	r3, #1
 8005776:	d101      	bne.n	800577c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e01b      	b.n	80057b4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800578a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800579a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 0201 	orr.w	r2, r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 ff33 	bl	8006618 <UART_CheckIdleState>
 80057b2:	4603      	mov	r3, r0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	@ 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	4613      	mov	r3, r2
 80057c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057d0:	2b20      	cmp	r3, #32
 80057d2:	d137      	bne.n	8005844 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <HAL_UART_Receive_IT+0x24>
 80057da:	88fb      	ldrh	r3, [r7, #6]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e030      	b.n	8005846 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <HAL_UART_Receive_IT+0x94>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d01f      	beq.n	8005834 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d018      	beq.n	8005834 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	613b      	str	r3, [r7, #16]
   return(result);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	623b      	str	r3, [r7, #32]
 8005822:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	69f9      	ldr	r1, [r7, #28]
 8005826:	6a3a      	ldr	r2, [r7, #32]
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	61bb      	str	r3, [r7, #24]
   return(result);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e6      	bne.n	8005802 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	461a      	mov	r2, r3
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	68f8      	ldr	r0, [r7, #12]
 800583c:	f001 f804 	bl	8006848 <UART_Start_Receive_IT>
 8005840:	4603      	mov	r3, r0
 8005842:	e000      	b.n	8005846 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005844:	2302      	movs	r3, #2
  }
}
 8005846:	4618      	mov	r0, r3
 8005848:	3728      	adds	r7, #40	@ 0x28
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40008000 	.word	0x40008000

08005854 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b0ba      	sub	sp, #232	@ 0xe8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	69db      	ldr	r3, [r3, #28]
 8005862:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800587a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800587e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005882:	4013      	ands	r3, r2
 8005884:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005888:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d11b      	bne.n	80058c8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005894:	f003 0320 	and.w	r3, r3, #32
 8005898:	2b00      	cmp	r3, #0
 800589a:	d015      	beq.n	80058c8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800589c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d105      	bne.n	80058b4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d009      	beq.n	80058c8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 82e3 	beq.w	8005e84 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	4798      	blx	r3
      }
      return;
 80058c6:	e2dd      	b.n	8005e84 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80058c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f000 8123 	beq.w	8005b18 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80058d2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80058d6:	4b8d      	ldr	r3, [pc, #564]	@ (8005b0c <HAL_UART_IRQHandler+0x2b8>)
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80058de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80058e2:	4b8b      	ldr	r3, [pc, #556]	@ (8005b10 <HAL_UART_IRQHandler+0x2bc>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	f000 8116 	beq.w	8005b18 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80058ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d011      	beq.n	800591c <HAL_UART_IRQHandler+0xc8>
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00b      	beq.n	800591c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2201      	movs	r2, #1
 800590a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005912:	f043 0201 	orr.w	r2, r3, #1
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800591c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d011      	beq.n	800594c <HAL_UART_IRQHandler+0xf8>
 8005928:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2202      	movs	r2, #2
 800593a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005942:	f043 0204 	orr.w	r2, r3, #4
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800594c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d011      	beq.n	800597c <HAL_UART_IRQHandler+0x128>
 8005958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00b      	beq.n	800597c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2204      	movs	r2, #4
 800596a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005972:	f043 0202 	orr.w	r2, r3, #2
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800597c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d017      	beq.n	80059b8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800598c:	f003 0320 	and.w	r3, r3, #32
 8005990:	2b00      	cmp	r3, #0
 8005992:	d105      	bne.n	80059a0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005994:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005998:	4b5c      	ldr	r3, [pc, #368]	@ (8005b0c <HAL_UART_IRQHandler+0x2b8>)
 800599a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00b      	beq.n	80059b8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2208      	movs	r2, #8
 80059a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059ae:	f043 0208 	orr.w	r2, r3, #8
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80059b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d012      	beq.n	80059ea <HAL_UART_IRQHandler+0x196>
 80059c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00c      	beq.n	80059ea <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059e0:	f043 0220 	orr.w	r2, r3, #32
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8249 	beq.w	8005e88 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80059f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fa:	f003 0320 	and.w	r3, r3, #32
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d013      	beq.n	8005a2a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a06:	f003 0320 	and.w	r3, r3, #32
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d105      	bne.n	8005a1a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d007      	beq.n	8005a2a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3e:	2b40      	cmp	r3, #64	@ 0x40
 8005a40:	d005      	beq.n	8005a4e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d054      	beq.n	8005af8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 f81c 	bl	8006a8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5e:	2b40      	cmp	r3, #64	@ 0x40
 8005a60:	d146      	bne.n	8005af0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3308      	adds	r3, #8
 8005a68:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a70:	e853 3f00 	ldrex	r3, [r3]
 8005a74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a78:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3308      	adds	r3, #8
 8005a8a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a8e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a9a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a9e:	e841 2300 	strex	r3, r2, [r1]
 8005aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005aa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1d9      	bne.n	8005a62 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d017      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005abe:	4a15      	ldr	r2, [pc, #84]	@ (8005b14 <HAL_UART_IRQHandler+0x2c0>)
 8005ac0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fc fe2a 	bl	8002722 <HAL_DMA_Abort_IT>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d019      	beq.n	8005b08 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae6:	e00f      	b.n	8005b08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 f9e1 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aee:	e00b      	b.n	8005b08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f9dd 	bl	8005eb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af6:	e007      	b.n	8005b08 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 f9d9 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005b06:	e1bf      	b.n	8005e88 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b08:	bf00      	nop
    return;
 8005b0a:	e1bd      	b.n	8005e88 <HAL_UART_IRQHandler+0x634>
 8005b0c:	10000001 	.word	0x10000001
 8005b10:	04000120 	.word	0x04000120
 8005b14:	08006b59 	.word	0x08006b59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	f040 8153 	bne.w	8005dc8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f000 814c 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 8145 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2210      	movs	r2, #16
 8005b44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b50:	2b40      	cmp	r3, #64	@ 0x40
 8005b52:	f040 80bb 	bne.w	8005ccc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 818f 	beq.w	8005e8c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005b74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	f080 8187 	bcs.w	8005e8c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b84:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f040 8087 	bne.w	8005caa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005bb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005bc6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005bca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bd2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bd6:	e841 2300 	strex	r3, r2, [r1]
 8005bda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1da      	bne.n	8005b9c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	3308      	adds	r3, #8
 8005bec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005bf0:	e853 3f00 	ldrex	r3, [r3]
 8005bf4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005bf6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bf8:	f023 0301 	bic.w	r3, r3, #1
 8005bfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3308      	adds	r3, #8
 8005c06:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c0a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c12:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e1      	bne.n	8005be6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3308      	adds	r3, #8
 8005c28:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c48:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c4c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e3      	bne.n	8005c22 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c78:	f023 0310 	bic.w	r3, r3, #16
 8005c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c8c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e4      	bne.n	8005c68 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fc fce3 	bl	8002670 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f8fd 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cca:	e0df      	b.n	8005e8c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 80d1 	beq.w	8005e90 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80cc 	beq.w	8005e90 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	e853 3f00 	ldrex	r3, [r3]
 8005d04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d1c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d22:	e841 2300 	strex	r3, r2, [r1]
 8005d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1e4      	bne.n	8005cf8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	3308      	adds	r3, #8
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	e853 3f00 	ldrex	r3, [r3]
 8005d3c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d44:	f023 0301 	bic.w	r3, r3, #1
 8005d48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d56:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1e1      	bne.n	8005d2e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005da0:	61fb      	str	r3, [r7, #28]
 8005da2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	69fa      	ldr	r2, [r7, #28]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	617b      	str	r3, [r7, #20]
   return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e4      	bne.n	8005d7e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2202      	movs	r2, #2
 8005db8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f000 f87f 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005dc6:	e063      	b.n	8005e90 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00e      	beq.n	8005df2 <HAL_UART_IRQHandler+0x59e>
 8005dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d008      	beq.n	8005df2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005de8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f001 fc12 	bl	8007614 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005df0:	e051      	b.n	8005e96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d014      	beq.n	8005e28 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d105      	bne.n	8005e16 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d008      	beq.n	8005e28 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d03a      	beq.n	8005e94 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
    }
    return;
 8005e26:	e035      	b.n	8005e94 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <HAL_UART_IRQHandler+0x5f4>
 8005e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fe9f 	bl	8006b84 <UART_EndTransmit_IT>
    return;
 8005e46:	e026      	b.n	8005e96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d009      	beq.n	8005e68 <HAL_UART_IRQHandler+0x614>
 8005e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d003      	beq.n	8005e68 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f001 fbeb 	bl	800763c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e66:	e016      	b.n	8005e96 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d010      	beq.n	8005e96 <HAL_UART_IRQHandler+0x642>
 8005e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	da0c      	bge.n	8005e96 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f001 fbd3 	bl	8007628 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e82:	e008      	b.n	8005e96 <HAL_UART_IRQHandler+0x642>
      return;
 8005e84:	bf00      	nop
 8005e86:	e006      	b.n	8005e96 <HAL_UART_IRQHandler+0x642>
    return;
 8005e88:	bf00      	nop
 8005e8a:	e004      	b.n	8005e96 <HAL_UART_IRQHandler+0x642>
      return;
 8005e8c:	bf00      	nop
 8005e8e:	e002      	b.n	8005e96 <HAL_UART_IRQHandler+0x642>
      return;
 8005e90:	bf00      	nop
 8005e92:	e000      	b.n	8005e96 <HAL_UART_IRQHandler+0x642>
    return;
 8005e94:	bf00      	nop
  }
}
 8005e96:	37e8      	adds	r7, #232	@ 0xe8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ed0:	bf00      	nop
 8005ed2:	370c      	adds	r7, #12
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr

08005edc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ee0:	b08c      	sub	sp, #48	@ 0x30
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	689a      	ldr	r2, [r3, #8]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4baa      	ldr	r3, [pc, #680]	@ (80061b4 <UART_SetConfig+0x2d8>)
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	6812      	ldr	r2, [r2, #0]
 8005f12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f14:	430b      	orrs	r3, r1
 8005f16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a9f      	ldr	r2, [pc, #636]	@ (80061b8 <UART_SetConfig+0x2dc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d004      	beq.n	8005f48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	6a1b      	ldr	r3, [r3, #32]
 8005f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f44:	4313      	orrs	r3, r2
 8005f46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005f52:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	6812      	ldr	r2, [r2, #0]
 8005f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f5c:	430b      	orrs	r3, r1
 8005f5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f66:	f023 010f 	bic.w	r1, r3, #15
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a90      	ldr	r2, [pc, #576]	@ (80061bc <UART_SetConfig+0x2e0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d125      	bne.n	8005fcc <UART_SetConfig+0xf0>
 8005f80:	4b8f      	ldr	r3, [pc, #572]	@ (80061c0 <UART_SetConfig+0x2e4>)
 8005f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d81a      	bhi.n	8005fc4 <UART_SetConfig+0xe8>
 8005f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f94 <UART_SetConfig+0xb8>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005fa5 	.word	0x08005fa5
 8005f98:	08005fb5 	.word	0x08005fb5
 8005f9c:	08005fad 	.word	0x08005fad
 8005fa0:	08005fbd 	.word	0x08005fbd
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005faa:	e116      	b.n	80061da <UART_SetConfig+0x2fe>
 8005fac:	2302      	movs	r3, #2
 8005fae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fb2:	e112      	b.n	80061da <UART_SetConfig+0x2fe>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fba:	e10e      	b.n	80061da <UART_SetConfig+0x2fe>
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fc2:	e10a      	b.n	80061da <UART_SetConfig+0x2fe>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005fca:	e106      	b.n	80061da <UART_SetConfig+0x2fe>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a7c      	ldr	r2, [pc, #496]	@ (80061c4 <UART_SetConfig+0x2e8>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d138      	bne.n	8006048 <UART_SetConfig+0x16c>
 8005fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80061c0 <UART_SetConfig+0x2e4>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fdc:	f003 030c 	and.w	r3, r3, #12
 8005fe0:	2b0c      	cmp	r3, #12
 8005fe2:	d82d      	bhi.n	8006040 <UART_SetConfig+0x164>
 8005fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fec <UART_SetConfig+0x110>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006021 	.word	0x08006021
 8005ff0:	08006041 	.word	0x08006041
 8005ff4:	08006041 	.word	0x08006041
 8005ff8:	08006041 	.word	0x08006041
 8005ffc:	08006031 	.word	0x08006031
 8006000:	08006041 	.word	0x08006041
 8006004:	08006041 	.word	0x08006041
 8006008:	08006041 	.word	0x08006041
 800600c:	08006029 	.word	0x08006029
 8006010:	08006041 	.word	0x08006041
 8006014:	08006041 	.word	0x08006041
 8006018:	08006041 	.word	0x08006041
 800601c:	08006039 	.word	0x08006039
 8006020:	2300      	movs	r3, #0
 8006022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006026:	e0d8      	b.n	80061da <UART_SetConfig+0x2fe>
 8006028:	2302      	movs	r3, #2
 800602a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800602e:	e0d4      	b.n	80061da <UART_SetConfig+0x2fe>
 8006030:	2304      	movs	r3, #4
 8006032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006036:	e0d0      	b.n	80061da <UART_SetConfig+0x2fe>
 8006038:	2308      	movs	r3, #8
 800603a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800603e:	e0cc      	b.n	80061da <UART_SetConfig+0x2fe>
 8006040:	2310      	movs	r3, #16
 8006042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006046:	e0c8      	b.n	80061da <UART_SetConfig+0x2fe>
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a5e      	ldr	r2, [pc, #376]	@ (80061c8 <UART_SetConfig+0x2ec>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d125      	bne.n	800609e <UART_SetConfig+0x1c2>
 8006052:	4b5b      	ldr	r3, [pc, #364]	@ (80061c0 <UART_SetConfig+0x2e4>)
 8006054:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006058:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800605c:	2b30      	cmp	r3, #48	@ 0x30
 800605e:	d016      	beq.n	800608e <UART_SetConfig+0x1b2>
 8006060:	2b30      	cmp	r3, #48	@ 0x30
 8006062:	d818      	bhi.n	8006096 <UART_SetConfig+0x1ba>
 8006064:	2b20      	cmp	r3, #32
 8006066:	d00a      	beq.n	800607e <UART_SetConfig+0x1a2>
 8006068:	2b20      	cmp	r3, #32
 800606a:	d814      	bhi.n	8006096 <UART_SetConfig+0x1ba>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d002      	beq.n	8006076 <UART_SetConfig+0x19a>
 8006070:	2b10      	cmp	r3, #16
 8006072:	d008      	beq.n	8006086 <UART_SetConfig+0x1aa>
 8006074:	e00f      	b.n	8006096 <UART_SetConfig+0x1ba>
 8006076:	2300      	movs	r3, #0
 8006078:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800607c:	e0ad      	b.n	80061da <UART_SetConfig+0x2fe>
 800607e:	2302      	movs	r3, #2
 8006080:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006084:	e0a9      	b.n	80061da <UART_SetConfig+0x2fe>
 8006086:	2304      	movs	r3, #4
 8006088:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800608c:	e0a5      	b.n	80061da <UART_SetConfig+0x2fe>
 800608e:	2308      	movs	r3, #8
 8006090:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006094:	e0a1      	b.n	80061da <UART_SetConfig+0x2fe>
 8006096:	2310      	movs	r3, #16
 8006098:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609c:	e09d      	b.n	80061da <UART_SetConfig+0x2fe>
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a4a      	ldr	r2, [pc, #296]	@ (80061cc <UART_SetConfig+0x2f0>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d125      	bne.n	80060f4 <UART_SetConfig+0x218>
 80060a8:	4b45      	ldr	r3, [pc, #276]	@ (80061c0 <UART_SetConfig+0x2e4>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80060b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80060b4:	d016      	beq.n	80060e4 <UART_SetConfig+0x208>
 80060b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80060b8:	d818      	bhi.n	80060ec <UART_SetConfig+0x210>
 80060ba:	2b80      	cmp	r3, #128	@ 0x80
 80060bc:	d00a      	beq.n	80060d4 <UART_SetConfig+0x1f8>
 80060be:	2b80      	cmp	r3, #128	@ 0x80
 80060c0:	d814      	bhi.n	80060ec <UART_SetConfig+0x210>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <UART_SetConfig+0x1f0>
 80060c6:	2b40      	cmp	r3, #64	@ 0x40
 80060c8:	d008      	beq.n	80060dc <UART_SetConfig+0x200>
 80060ca:	e00f      	b.n	80060ec <UART_SetConfig+0x210>
 80060cc:	2300      	movs	r3, #0
 80060ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060d2:	e082      	b.n	80061da <UART_SetConfig+0x2fe>
 80060d4:	2302      	movs	r3, #2
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060da:	e07e      	b.n	80061da <UART_SetConfig+0x2fe>
 80060dc:	2304      	movs	r3, #4
 80060de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060e2:	e07a      	b.n	80061da <UART_SetConfig+0x2fe>
 80060e4:	2308      	movs	r3, #8
 80060e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ea:	e076      	b.n	80061da <UART_SetConfig+0x2fe>
 80060ec:	2310      	movs	r3, #16
 80060ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060f2:	e072      	b.n	80061da <UART_SetConfig+0x2fe>
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a35      	ldr	r2, [pc, #212]	@ (80061d0 <UART_SetConfig+0x2f4>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d12a      	bne.n	8006154 <UART_SetConfig+0x278>
 80060fe:	4b30      	ldr	r3, [pc, #192]	@ (80061c0 <UART_SetConfig+0x2e4>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006104:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800610c:	d01a      	beq.n	8006144 <UART_SetConfig+0x268>
 800610e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006112:	d81b      	bhi.n	800614c <UART_SetConfig+0x270>
 8006114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006118:	d00c      	beq.n	8006134 <UART_SetConfig+0x258>
 800611a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800611e:	d815      	bhi.n	800614c <UART_SetConfig+0x270>
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <UART_SetConfig+0x250>
 8006124:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006128:	d008      	beq.n	800613c <UART_SetConfig+0x260>
 800612a:	e00f      	b.n	800614c <UART_SetConfig+0x270>
 800612c:	2300      	movs	r3, #0
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006132:	e052      	b.n	80061da <UART_SetConfig+0x2fe>
 8006134:	2302      	movs	r3, #2
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613a:	e04e      	b.n	80061da <UART_SetConfig+0x2fe>
 800613c:	2304      	movs	r3, #4
 800613e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006142:	e04a      	b.n	80061da <UART_SetConfig+0x2fe>
 8006144:	2308      	movs	r3, #8
 8006146:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800614a:	e046      	b.n	80061da <UART_SetConfig+0x2fe>
 800614c:	2310      	movs	r3, #16
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006152:	e042      	b.n	80061da <UART_SetConfig+0x2fe>
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a17      	ldr	r2, [pc, #92]	@ (80061b8 <UART_SetConfig+0x2dc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d13a      	bne.n	80061d4 <UART_SetConfig+0x2f8>
 800615e:	4b18      	ldr	r3, [pc, #96]	@ (80061c0 <UART_SetConfig+0x2e4>)
 8006160:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006164:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006168:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800616c:	d01a      	beq.n	80061a4 <UART_SetConfig+0x2c8>
 800616e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006172:	d81b      	bhi.n	80061ac <UART_SetConfig+0x2d0>
 8006174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006178:	d00c      	beq.n	8006194 <UART_SetConfig+0x2b8>
 800617a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800617e:	d815      	bhi.n	80061ac <UART_SetConfig+0x2d0>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <UART_SetConfig+0x2b0>
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006188:	d008      	beq.n	800619c <UART_SetConfig+0x2c0>
 800618a:	e00f      	b.n	80061ac <UART_SetConfig+0x2d0>
 800618c:	2300      	movs	r3, #0
 800618e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006192:	e022      	b.n	80061da <UART_SetConfig+0x2fe>
 8006194:	2302      	movs	r3, #2
 8006196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800619a:	e01e      	b.n	80061da <UART_SetConfig+0x2fe>
 800619c:	2304      	movs	r3, #4
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a2:	e01a      	b.n	80061da <UART_SetConfig+0x2fe>
 80061a4:	2308      	movs	r3, #8
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061aa:	e016      	b.n	80061da <UART_SetConfig+0x2fe>
 80061ac:	2310      	movs	r3, #16
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b2:	e012      	b.n	80061da <UART_SetConfig+0x2fe>
 80061b4:	cfff69f3 	.word	0xcfff69f3
 80061b8:	40008000 	.word	0x40008000
 80061bc:	40013800 	.word	0x40013800
 80061c0:	40021000 	.word	0x40021000
 80061c4:	40004400 	.word	0x40004400
 80061c8:	40004800 	.word	0x40004800
 80061cc:	40004c00 	.word	0x40004c00
 80061d0:	40005000 	.word	0x40005000
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4aae      	ldr	r2, [pc, #696]	@ (8006498 <UART_SetConfig+0x5bc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	f040 8097 	bne.w	8006314 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061e6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80061ea:	2b08      	cmp	r3, #8
 80061ec:	d823      	bhi.n	8006236 <UART_SetConfig+0x35a>
 80061ee:	a201      	add	r2, pc, #4	@ (adr r2, 80061f4 <UART_SetConfig+0x318>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	08006219 	.word	0x08006219
 80061f8:	08006237 	.word	0x08006237
 80061fc:	08006221 	.word	0x08006221
 8006200:	08006237 	.word	0x08006237
 8006204:	08006227 	.word	0x08006227
 8006208:	08006237 	.word	0x08006237
 800620c:	08006237 	.word	0x08006237
 8006210:	08006237 	.word	0x08006237
 8006214:	0800622f 	.word	0x0800622f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006218:	f7fd f9f4 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 800621c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800621e:	e010      	b.n	8006242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006220:	4b9e      	ldr	r3, [pc, #632]	@ (800649c <UART_SetConfig+0x5c0>)
 8006222:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006224:	e00d      	b.n	8006242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006226:	f7fd f97f 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 800622a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800622c:	e009      	b.n	8006242 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800622e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006232:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006234:	e005      	b.n	8006242 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006236:	2300      	movs	r3, #0
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006240:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 8130 	beq.w	80064aa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800624e:	4a94      	ldr	r2, [pc, #592]	@ (80064a0 <UART_SetConfig+0x5c4>)
 8006250:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006254:	461a      	mov	r2, r3
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	fbb3 f3f2 	udiv	r3, r3, r2
 800625c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	4613      	mov	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	4413      	add	r3, r2
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	429a      	cmp	r2, r3
 800626c:	d305      	bcc.n	800627a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	429a      	cmp	r2, r3
 8006278:	d903      	bls.n	8006282 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006280:	e113      	b.n	80064aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	2200      	movs	r2, #0
 8006286:	60bb      	str	r3, [r7, #8]
 8006288:	60fa      	str	r2, [r7, #12]
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	4a84      	ldr	r2, [pc, #528]	@ (80064a0 <UART_SetConfig+0x5c4>)
 8006290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006294:	b29b      	uxth	r3, r3
 8006296:	2200      	movs	r2, #0
 8006298:	603b      	str	r3, [r7, #0]
 800629a:	607a      	str	r2, [r7, #4]
 800629c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062a4:	f7fa fd18 	bl	8000cd8 <__aeabi_uldivmod>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4610      	mov	r0, r2
 80062ae:	4619      	mov	r1, r3
 80062b0:	f04f 0200 	mov.w	r2, #0
 80062b4:	f04f 0300 	mov.w	r3, #0
 80062b8:	020b      	lsls	r3, r1, #8
 80062ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062be:	0202      	lsls	r2, r0, #8
 80062c0:	6979      	ldr	r1, [r7, #20]
 80062c2:	6849      	ldr	r1, [r1, #4]
 80062c4:	0849      	lsrs	r1, r1, #1
 80062c6:	2000      	movs	r0, #0
 80062c8:	460c      	mov	r4, r1
 80062ca:	4605      	mov	r5, r0
 80062cc:	eb12 0804 	adds.w	r8, r2, r4
 80062d0:	eb43 0905 	adc.w	r9, r3, r5
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	469a      	mov	sl, r3
 80062dc:	4693      	mov	fp, r2
 80062de:	4652      	mov	r2, sl
 80062e0:	465b      	mov	r3, fp
 80062e2:	4640      	mov	r0, r8
 80062e4:	4649      	mov	r1, r9
 80062e6:	f7fa fcf7 	bl	8000cd8 <__aeabi_uldivmod>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4613      	mov	r3, r2
 80062f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062f8:	d308      	bcc.n	800630c <UART_SetConfig+0x430>
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006300:	d204      	bcs.n	800630c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	60da      	str	r2, [r3, #12]
 800630a:	e0ce      	b.n	80064aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006312:	e0ca      	b.n	80064aa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631c:	d166      	bne.n	80063ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800631e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006322:	2b08      	cmp	r3, #8
 8006324:	d827      	bhi.n	8006376 <UART_SetConfig+0x49a>
 8006326:	a201      	add	r2, pc, #4	@ (adr r2, 800632c <UART_SetConfig+0x450>)
 8006328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632c:	08006351 	.word	0x08006351
 8006330:	08006359 	.word	0x08006359
 8006334:	08006361 	.word	0x08006361
 8006338:	08006377 	.word	0x08006377
 800633c:	08006367 	.word	0x08006367
 8006340:	08006377 	.word	0x08006377
 8006344:	08006377 	.word	0x08006377
 8006348:	08006377 	.word	0x08006377
 800634c:	0800636f 	.word	0x0800636f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006350:	f7fd f958 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8006354:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006356:	e014      	b.n	8006382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006358:	f7fd f96a 	bl	8003630 <HAL_RCC_GetPCLK2Freq>
 800635c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800635e:	e010      	b.n	8006382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006360:	4b4e      	ldr	r3, [pc, #312]	@ (800649c <UART_SetConfig+0x5c0>)
 8006362:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006364:	e00d      	b.n	8006382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006366:	f7fd f8df 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 800636a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800636c:	e009      	b.n	8006382 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006372:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006374:	e005      	b.n	8006382 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006380:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	2b00      	cmp	r3, #0
 8006386:	f000 8090 	beq.w	80064aa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	4a44      	ldr	r2, [pc, #272]	@ (80064a0 <UART_SetConfig+0x5c4>)
 8006390:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006394:	461a      	mov	r2, r3
 8006396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006398:	fbb3 f3f2 	udiv	r3, r3, r2
 800639c:	005a      	lsls	r2, r3, #1
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	085b      	lsrs	r3, r3, #1
 80063a4:	441a      	add	r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b0:	6a3b      	ldr	r3, [r7, #32]
 80063b2:	2b0f      	cmp	r3, #15
 80063b4:	d916      	bls.n	80063e4 <UART_SetConfig+0x508>
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063bc:	d212      	bcs.n	80063e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063be:	6a3b      	ldr	r3, [r7, #32]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	f023 030f 	bic.w	r3, r3, #15
 80063c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063c8:	6a3b      	ldr	r3, [r7, #32]
 80063ca:	085b      	lsrs	r3, r3, #1
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	f003 0307 	and.w	r3, r3, #7
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	8bfb      	ldrh	r3, [r7, #30]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	8bfa      	ldrh	r2, [r7, #30]
 80063e0:	60da      	str	r2, [r3, #12]
 80063e2:	e062      	b.n	80064aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063ea:	e05e      	b.n	80064aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80063ec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d828      	bhi.n	8006446 <UART_SetConfig+0x56a>
 80063f4:	a201      	add	r2, pc, #4	@ (adr r2, 80063fc <UART_SetConfig+0x520>)
 80063f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063fa:	bf00      	nop
 80063fc:	08006421 	.word	0x08006421
 8006400:	08006429 	.word	0x08006429
 8006404:	08006431 	.word	0x08006431
 8006408:	08006447 	.word	0x08006447
 800640c:	08006437 	.word	0x08006437
 8006410:	08006447 	.word	0x08006447
 8006414:	08006447 	.word	0x08006447
 8006418:	08006447 	.word	0x08006447
 800641c:	0800643f 	.word	0x0800643f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006420:	f7fd f8f0 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8006424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006426:	e014      	b.n	8006452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006428:	f7fd f902 	bl	8003630 <HAL_RCC_GetPCLK2Freq>
 800642c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800642e:	e010      	b.n	8006452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006430:	4b1a      	ldr	r3, [pc, #104]	@ (800649c <UART_SetConfig+0x5c0>)
 8006432:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006434:	e00d      	b.n	8006452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006436:	f7fd f877 	bl	8003528 <HAL_RCC_GetSysClockFreq>
 800643a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800643c:	e009      	b.n	8006452 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800643e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006442:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006444:	e005      	b.n	8006452 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006450:	bf00      	nop
    }

    if (pclk != 0U)
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	d028      	beq.n	80064aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645c:	4a10      	ldr	r2, [pc, #64]	@ (80064a0 <UART_SetConfig+0x5c4>)
 800645e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006462:	461a      	mov	r2, r3
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	fbb3 f2f2 	udiv	r2, r3, r2
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	441a      	add	r2, r3
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	fbb2 f3f3 	udiv	r3, r2, r3
 800647a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	2b0f      	cmp	r3, #15
 8006480:	d910      	bls.n	80064a4 <UART_SetConfig+0x5c8>
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006488:	d20c      	bcs.n	80064a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	b29a      	uxth	r2, r3
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60da      	str	r2, [r3, #12]
 8006494:	e009      	b.n	80064aa <UART_SetConfig+0x5ce>
 8006496:	bf00      	nop
 8006498:	40008000 	.word	0x40008000
 800649c:	00f42400 	.word	0x00f42400
 80064a0:	0800c360 	.word	0x0800c360
      }
      else
      {
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2200      	movs	r2, #0
 80064be:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	2200      	movs	r2, #0
 80064c4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80064c6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	3730      	adds	r7, #48	@ 0x30
 80064ce:	46bd      	mov	sp, r7
 80064d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080064d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00a      	beq.n	80064fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006502:	f003 0301 	and.w	r3, r3, #1
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006546:	f003 0304 	and.w	r3, r3, #4
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006568:	f003 0310 	and.w	r3, r3, #16
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658a:	f003 0320 	and.w	r3, r3, #32
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d01a      	beq.n	80065ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065d2:	d10a      	bne.n	80065ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	430a      	orrs	r2, r1
 80065e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	605a      	str	r2, [r3, #4]
  }
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b098      	sub	sp, #96	@ 0x60
 800661c:	af02      	add	r7, sp, #8
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006628:	f7fb ff36 	bl	8002498 <HAL_GetTick>
 800662c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0308 	and.w	r3, r3, #8
 8006638:	2b08      	cmp	r3, #8
 800663a:	d12f      	bne.n	800669c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800663c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f88e 	bl	800676c <UART_WaitOnFlagUntilTimeout>
 8006650:	4603      	mov	r3, r0
 8006652:	2b00      	cmp	r3, #0
 8006654:	d022      	beq.n	800669c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	e853 3f00 	ldrex	r3, [r3]
 8006662:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006666:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800666a:	653b      	str	r3, [r7, #80]	@ 0x50
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	461a      	mov	r2, r3
 8006672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006674:	647b      	str	r3, [r7, #68]	@ 0x44
 8006676:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006678:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800667a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800667c:	e841 2300 	strex	r3, r2, [r1]
 8006680:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1e6      	bne.n	8006656 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2220      	movs	r2, #32
 800668c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006698:	2303      	movs	r3, #3
 800669a:	e063      	b.n	8006764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0304 	and.w	r3, r3, #4
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d149      	bne.n	800673e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b2:	2200      	movs	r2, #0
 80066b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 f857 	bl	800676c <UART_WaitOnFlagUntilTimeout>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d03c      	beq.n	800673e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	e853 3f00 	ldrex	r3, [r3]
 80066d0:	623b      	str	r3, [r7, #32]
   return(result);
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	461a      	mov	r2, r3
 80066e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80066e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066ea:	e841 2300 	strex	r3, r2, [r1]
 80066ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1e6      	bne.n	80066c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	3308      	adds	r3, #8
 80066fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	e853 3f00 	ldrex	r3, [r3]
 8006704:	60fb      	str	r3, [r7, #12]
   return(result);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f023 0301 	bic.w	r3, r3, #1
 800670c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	3308      	adds	r3, #8
 8006714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006716:	61fa      	str	r2, [r7, #28]
 8006718:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800671a:	69b9      	ldr	r1, [r7, #24]
 800671c:	69fa      	ldr	r2, [r7, #28]
 800671e:	e841 2300 	strex	r3, r2, [r1]
 8006722:	617b      	str	r3, [r7, #20]
   return(result);
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d1e5      	bne.n	80066f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e012      	b.n	8006764 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2220      	movs	r2, #32
 8006742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2220      	movs	r2, #32
 800674a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2200      	movs	r2, #0
 8006752:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3758      	adds	r7, #88	@ 0x58
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	4613      	mov	r3, r2
 800677a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800677c:	e04f      	b.n	800681e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006784:	d04b      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006786:	f7fb fe87 	bl	8002498 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	429a      	cmp	r2, r3
 8006794:	d302      	bcc.n	800679c <UART_WaitOnFlagUntilTimeout+0x30>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800679c:	2303      	movs	r3, #3
 800679e:	e04e      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0304 	and.w	r3, r3, #4
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d037      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0xb2>
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	2b80      	cmp	r3, #128	@ 0x80
 80067b2:	d034      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0xb2>
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2b40      	cmp	r3, #64	@ 0x40
 80067b8:	d031      	beq.n	800681e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	f003 0308 	and.w	r3, r3, #8
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d110      	bne.n	80067ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2208      	movs	r2, #8
 80067ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f95b 	bl	8006a8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2208      	movs	r2, #8
 80067da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e029      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69db      	ldr	r3, [r3, #28]
 80067f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067f8:	d111      	bne.n	800681e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	f000 f941 	bl	8006a8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2220      	movs	r2, #32
 800680e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2200      	movs	r2, #0
 8006816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800681a:	2303      	movs	r3, #3
 800681c:	e00f      	b.n	800683e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	69da      	ldr	r2, [r3, #28]
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4013      	ands	r3, r2
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	bf0c      	ite	eq
 800682e:	2301      	moveq	r3, #1
 8006830:	2300      	movne	r3, #0
 8006832:	b2db      	uxtb	r3, r3
 8006834:	461a      	mov	r2, r3
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	429a      	cmp	r2, r3
 800683a:	d0a0      	beq.n	800677e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800683c:	2300      	movs	r3, #0
}
 800683e:	4618      	mov	r0, r3
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006848:	b480      	push	{r7}
 800684a:	b0a3      	sub	sp, #140	@ 0x8c
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	4613      	mov	r3, r2
 8006854:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	88fa      	ldrh	r2, [r7, #6]
 8006860:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	88fa      	ldrh	r2, [r7, #6]
 8006868:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800687a:	d10e      	bne.n	800689a <UART_Start_Receive_IT+0x52>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <UART_Start_Receive_IT+0x48>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800688a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800688e:	e02d      	b.n	80068ec <UART_Start_Receive_IT+0xa4>
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	22ff      	movs	r2, #255	@ 0xff
 8006894:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006898:	e028      	b.n	80068ec <UART_Start_Receive_IT+0xa4>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10d      	bne.n	80068be <UART_Start_Receive_IT+0x76>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d104      	bne.n	80068b4 <UART_Start_Receive_IT+0x6c>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	22ff      	movs	r2, #255	@ 0xff
 80068ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068b2:	e01b      	b.n	80068ec <UART_Start_Receive_IT+0xa4>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	227f      	movs	r2, #127	@ 0x7f
 80068b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068bc:	e016      	b.n	80068ec <UART_Start_Receive_IT+0xa4>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068c6:	d10d      	bne.n	80068e4 <UART_Start_Receive_IT+0x9c>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d104      	bne.n	80068da <UART_Start_Receive_IT+0x92>
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	227f      	movs	r2, #127	@ 0x7f
 80068d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068d8:	e008      	b.n	80068ec <UART_Start_Receive_IT+0xa4>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	223f      	movs	r2, #63	@ 0x3f
 80068de:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80068e2:	e003      	b.n	80068ec <UART_Start_Receive_IT+0xa4>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2222      	movs	r2, #34	@ 0x22
 80068f8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3308      	adds	r3, #8
 8006902:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006904:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006906:	e853 3f00 	ldrex	r3, [r3]
 800690a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800690c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800690e:	f043 0301 	orr.w	r3, r3, #1
 8006912:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	3308      	adds	r3, #8
 800691c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006920:	673a      	str	r2, [r7, #112]	@ 0x70
 8006922:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006924:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006926:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 800692e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1e3      	bne.n	80068fc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800693c:	d14f      	bne.n	80069de <UART_Start_Receive_IT+0x196>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006944:	88fa      	ldrh	r2, [r7, #6]
 8006946:	429a      	cmp	r2, r3
 8006948:	d349      	bcc.n	80069de <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006952:	d107      	bne.n	8006964 <UART_Start_Receive_IT+0x11c>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	691b      	ldr	r3, [r3, #16]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d103      	bne.n	8006964 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4a47      	ldr	r2, [pc, #284]	@ (8006a7c <UART_Start_Receive_IT+0x234>)
 8006960:	675a      	str	r2, [r3, #116]	@ 0x74
 8006962:	e002      	b.n	800696a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4a46      	ldr	r2, [pc, #280]	@ (8006a80 <UART_Start_Receive_IT+0x238>)
 8006968:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d01a      	beq.n	80069a8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006986:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006994:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006996:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006998:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800699a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800699c:	e841 2300 	strex	r3, r2, [r1]
 80069a0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80069a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1e4      	bne.n	8006972 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	3308      	adds	r3, #8
 80069ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b2:	e853 3f00 	ldrex	r3, [r3]
 80069b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3308      	adds	r3, #8
 80069c6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80069c8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80069ca:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069cc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069d0:	e841 2300 	strex	r3, r2, [r1]
 80069d4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80069d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e5      	bne.n	80069a8 <UART_Start_Receive_IT+0x160>
 80069dc:	e046      	b.n	8006a6c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069e6:	d107      	bne.n	80069f8 <UART_Start_Receive_IT+0x1b0>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4a24      	ldr	r2, [pc, #144]	@ (8006a84 <UART_Start_Receive_IT+0x23c>)
 80069f4:	675a      	str	r2, [r3, #116]	@ 0x74
 80069f6:	e002      	b.n	80069fe <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4a23      	ldr	r2, [pc, #140]	@ (8006a88 <UART_Start_Receive_IT+0x240>)
 80069fc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d019      	beq.n	8006a3a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a16:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006a1a:	677b      	str	r3, [r7, #116]	@ 0x74
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	461a      	mov	r2, r3
 8006a22:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a26:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e6      	bne.n	8006a06 <UART_Start_Receive_IT+0x1be>
 8006a38:	e018      	b.n	8006a6c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	613b      	str	r3, [r7, #16]
   return(result);
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	f043 0320 	orr.w	r3, r3, #32
 8006a4e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a58:	623b      	str	r3, [r7, #32]
 8006a5a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	69f9      	ldr	r1, [r7, #28]
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e6      	bne.n	8006a3a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	378c      	adds	r7, #140	@ 0x8c
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	080072ad 	.word	0x080072ad
 8006a80:	08006f4d 	.word	0x08006f4d
 8006a84:	08006d95 	.word	0x08006d95
 8006a88:	08006bdd 	.word	0x08006bdd

08006a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b095      	sub	sp, #84	@ 0x54
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9c:	e853 3f00 	ldrex	r3, [r3]
 8006aa0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ab8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e6      	bne.n	8006a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3308      	adds	r3, #8
 8006acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	e853 3f00 	ldrex	r3, [r3]
 8006ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006adc:	f023 0301 	bic.w	r3, r3, #1
 8006ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e3      	bne.n	8006ac6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d118      	bne.n	8006b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	e853 3f00 	ldrex	r3, [r3]
 8006b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f023 0310 	bic.w	r3, r3, #16
 8006b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	461a      	mov	r2, r3
 8006b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b28:	6979      	ldr	r1, [r7, #20]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	e841 2300 	strex	r3, r2, [r1]
 8006b30:	613b      	str	r3, [r7, #16]
   return(result);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1e6      	bne.n	8006b06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006b4c:	bf00      	nop
 8006b4e:	3754      	adds	r7, #84	@ 0x54
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2200      	movs	r2, #0
 8006b6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f7ff f99a 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7c:	bf00      	nop
 8006b7e:	3710      	adds	r7, #16
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	e853 3f00 	ldrex	r3, [r3]
 8006b98:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	61bb      	str	r3, [r7, #24]
 8006bac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bae:	6979      	ldr	r1, [r7, #20]
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e6      	bne.n	8006b8c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7ff f965 	bl	8005e9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bd2:	bf00      	nop
 8006bd4:	3720      	adds	r7, #32
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b09c      	sub	sp, #112	@ 0x70
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006bea:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bf4:	2b22      	cmp	r3, #34	@ 0x22
 8006bf6:	f040 80be 	bne.w	8006d76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c00:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006c08:	b2d9      	uxtb	r1, r3
 8006c0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006c0e:	b2da      	uxtb	r2, r3
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c14:	400a      	ands	r2, r1
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c2a:	b29b      	uxth	r3, r3
 8006c2c:	3b01      	subs	r3, #1
 8006c2e:	b29a      	uxth	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f040 80a1 	bne.w	8006d86 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c64:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006c68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e6      	bne.n	8006c44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3308      	adds	r3, #8
 8006c94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006c96:	647a      	str	r2, [r7, #68]	@ 0x44
 8006c98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c9e:	e841 2300 	strex	r3, r2, [r1]
 8006ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1e5      	bne.n	8006c76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2220      	movs	r2, #32
 8006cae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a33      	ldr	r2, [pc, #204]	@ (8006d90 <UART_RxISR_8BIT+0x1b4>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d01f      	beq.n	8006d08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d018      	beq.n	8006d08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cfc:	e841 2300 	strex	r3, r2, [r1]
 8006d00:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1e6      	bne.n	8006cd6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d12e      	bne.n	8006d6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 0310 	bic.w	r3, r3, #16
 8006d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	69b9      	ldr	r1, [r7, #24]
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	617b      	str	r3, [r7, #20]
   return(result);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e6      	bne.n	8006d16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	69db      	ldr	r3, [r3, #28]
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b10      	cmp	r3, #16
 8006d54:	d103      	bne.n	8006d5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006d64:	4619      	mov	r1, r3
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff f8ac 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d6c:	e00b      	b.n	8006d86 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7fa ff4a 	bl	8001c08 <HAL_UART_RxCpltCallback>
}
 8006d74:	e007      	b.n	8006d86 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	699a      	ldr	r2, [r3, #24]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f042 0208 	orr.w	r2, r2, #8
 8006d84:	619a      	str	r2, [r3, #24]
}
 8006d86:	bf00      	nop
 8006d88:	3770      	adds	r7, #112	@ 0x70
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	40008000 	.word	0x40008000

08006d94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b09c      	sub	sp, #112	@ 0x70
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006da2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dac:	2b22      	cmp	r3, #34	@ 0x22
 8006dae:	f040 80be 	bne.w	8006f2e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dc0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006dc2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006dc6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006dca:	4013      	ands	r3, r2
 8006dcc:	b29a      	uxth	r2, r3
 8006dce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dd6:	1c9a      	adds	r2, r3, #2
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	3b01      	subs	r3, #1
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f040 80a1 	bne.w	8006f3e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e04:	e853 3f00 	ldrex	r3, [r3]
 8006e08:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e10:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	461a      	mov	r2, r3
 8006e18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e1c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e22:	e841 2300 	strex	r3, r2, [r1]
 8006e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1e6      	bne.n	8006dfc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	3308      	adds	r3, #8
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e38:	e853 3f00 	ldrex	r3, [r3]
 8006e3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e40:	f023 0301 	bic.w	r3, r3, #1
 8006e44:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e56:	e841 2300 	strex	r3, r2, [r1]
 8006e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d1e5      	bne.n	8006e2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2220      	movs	r2, #32
 8006e66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a33      	ldr	r2, [pc, #204]	@ (8006f48 <UART_RxISR_16BIT+0x1b4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d01f      	beq.n	8006ec0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d018      	beq.n	8006ec0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ea2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006eac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eae:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006eb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e6      	bne.n	8006e8e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d12e      	bne.n	8006f26 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	e853 3f00 	ldrex	r3, [r3]
 8006eda:	60bb      	str	r3, [r7, #8]
   return(result);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f023 0310 	bic.w	r3, r3, #16
 8006ee2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef0:	6979      	ldr	r1, [r7, #20]
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	e841 2300 	strex	r3, r2, [r1]
 8006ef8:	613b      	str	r3, [r7, #16]
   return(result);
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d1e6      	bne.n	8006ece <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	69db      	ldr	r3, [r3, #28]
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b10      	cmp	r3, #16
 8006f0c:	d103      	bne.n	8006f16 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2210      	movs	r2, #16
 8006f14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fe ffd0 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f24:	e00b      	b.n	8006f3e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f7fa fe6e 	bl	8001c08 <HAL_UART_RxCpltCallback>
}
 8006f2c:	e007      	b.n	8006f3e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	699a      	ldr	r2, [r3, #24]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0208 	orr.w	r2, r2, #8
 8006f3c:	619a      	str	r2, [r3, #24]
}
 8006f3e:	bf00      	nop
 8006f40:	3770      	adds	r7, #112	@ 0x70
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40008000 	.word	0x40008000

08006f4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b0ac      	sub	sp, #176	@ 0xb0
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69db      	ldr	r3, [r3, #28]
 8006f64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f82:	2b22      	cmp	r3, #34	@ 0x22
 8006f84:	f040 8182 	bne.w	800728c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f8e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f92:	e125      	b.n	80071e0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f9a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f9e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006fa2:	b2d9      	uxtb	r1, r3
 8006fa4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fae:	400a      	ands	r2, r1
 8006fb0:	b2d2      	uxtb	r2, r2
 8006fb2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	69db      	ldr	r3, [r3, #28]
 8006fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006fda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fde:	f003 0307 	and.w	r3, r3, #7
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d053      	beq.n	800708e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d011      	beq.n	8007016 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006ff2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2201      	movs	r2, #1
 8007004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800700c:	f043 0201 	orr.w	r2, r3, #1
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007016:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d011      	beq.n	8007046 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00b      	beq.n	8007046 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2202      	movs	r2, #2
 8007034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800703c:	f043 0204 	orr.w	r2, r3, #4
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007046:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d011      	beq.n	8007076 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00b      	beq.n	8007076 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2204      	movs	r2, #4
 8007064:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800706c:	f043 0202 	orr.w	r2, r3, #2
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800707c:	2b00      	cmp	r3, #0
 800707e:	d006      	beq.n	800708e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f7fe ff15 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007094:	b29b      	uxth	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	f040 80a2 	bne.w	80071e0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070a4:	e853 3f00 	ldrex	r3, [r3]
 80070a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80070aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80070be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80070c0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80070c4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80070cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e4      	bne.n	800709c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80070e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070e8:	f023 0301 	bic.w	r3, r3, #1
 80070ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3308      	adds	r3, #8
 80070f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80070fa:	66ba      	str	r2, [r7, #104]	@ 0x68
 80070fc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070fe:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007100:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007102:	e841 2300 	strex	r3, r2, [r1]
 8007106:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007108:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1e1      	bne.n	80070d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2220      	movs	r2, #32
 8007112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a5f      	ldr	r2, [pc, #380]	@ (80072a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d021      	beq.n	8007170 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d01a      	beq.n	8007170 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007142:	e853 3f00 	ldrex	r3, [r3]
 8007146:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800714a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800714e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	461a      	mov	r2, r3
 8007158:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800715c:	657b      	str	r3, [r7, #84]	@ 0x54
 800715e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007160:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007162:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007164:	e841 2300 	strex	r3, r2, [r1]
 8007168:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800716a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e4      	bne.n	800713a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007174:	2b01      	cmp	r3, #1
 8007176:	d130      	bne.n	80071da <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800718c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718e:	f023 0310 	bic.w	r3, r3, #16
 8007192:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	461a      	mov	r2, r3
 800719c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80071a2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e4      	bne.n	800717e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f003 0310 	and.w	r3, r3, #16
 80071be:	2b10      	cmp	r3, #16
 80071c0:	d103      	bne.n	80071ca <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2210      	movs	r2, #16
 80071c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7fe fe76 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
 80071d8:	e002      	b.n	80071e0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f7fa fd14 	bl	8001c08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071e0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d006      	beq.n	80071f6 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80071e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071ec:	f003 0320 	and.w	r3, r3, #32
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f47f aecf 	bne.w	8006f94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071fc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007200:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007204:	2b00      	cmp	r3, #0
 8007206:	d049      	beq.n	800729c <UART_RxISR_8BIT_FIFOEN+0x350>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800720e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007212:	429a      	cmp	r2, r3
 8007214:	d242      	bcs.n	800729c <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3308      	adds	r3, #8
 800721c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	61fb      	str	r3, [r7, #28]
   return(result);
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800722c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3308      	adds	r3, #8
 8007236:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800723a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800723c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007242:	e841 2300 	strex	r3, r2, [r1]
 8007246:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1e3      	bne.n	8007216 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a15      	ldr	r2, [pc, #84]	@ (80072a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007252:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	60bb      	str	r3, [r7, #8]
   return(result);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f043 0320 	orr.w	r3, r3, #32
 8007268:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007276:	61bb      	str	r3, [r7, #24]
 8007278:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6979      	ldr	r1, [r7, #20]
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	613b      	str	r3, [r7, #16]
   return(result);
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e4      	bne.n	8007254 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800728a:	e007      	b.n	800729c <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f042 0208 	orr.w	r2, r2, #8
 800729a:	619a      	str	r2, [r3, #24]
}
 800729c:	bf00      	nop
 800729e:	37b0      	adds	r7, #176	@ 0xb0
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	40008000 	.word	0x40008000
 80072a8:	08006bdd 	.word	0x08006bdd

080072ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b0ae      	sub	sp, #184	@ 0xb8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80072ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	69db      	ldr	r3, [r3, #28]
 80072c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80072e2:	2b22      	cmp	r3, #34	@ 0x22
 80072e4:	f040 8186 	bne.w	80075f4 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072f2:	e129      	b.n	8007548 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007302:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007306:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800730a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800730e:	4013      	ands	r3, r2
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007316:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800731c:	1c9a      	adds	r2, r3, #2
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007328:	b29b      	uxth	r3, r3
 800732a:	3b01      	subs	r3, #1
 800732c:	b29a      	uxth	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	69db      	ldr	r3, [r3, #28]
 800733a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800733e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007342:	f003 0307 	and.w	r3, r3, #7
 8007346:	2b00      	cmp	r3, #0
 8007348:	d053      	beq.n	80073f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800734a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d011      	beq.n	800737a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800735a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00b      	beq.n	800737a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2201      	movs	r2, #1
 8007368:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007370:	f043 0201 	orr.w	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800737a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800737e:	f003 0302 	and.w	r3, r3, #2
 8007382:	2b00      	cmp	r3, #0
 8007384:	d011      	beq.n	80073aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2202      	movs	r2, #2
 8007398:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a0:	f043 0204 	orr.w	r2, r3, #4
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d011      	beq.n	80073da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80073b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00b      	beq.n	80073da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2204      	movs	r2, #4
 80073c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d0:	f043 0202 	orr.w	r2, r3, #2
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d006      	beq.n	80073f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f7fe fd63 	bl	8005eb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f040 80a4 	bne.w	8007548 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800740e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007414:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	461a      	mov	r2, r3
 800741e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007422:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007426:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800742a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e2      	bne.n	8007400 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800744a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800744c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007450:	f023 0301 	bic.w	r3, r3, #1
 8007454:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3308      	adds	r3, #8
 800745e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007462:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007464:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007466:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007468:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800746a:	e841 2300 	strex	r3, r2, [r1]
 800746e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007472:	2b00      	cmp	r3, #0
 8007474:	d1e1      	bne.n	800743a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a5f      	ldr	r2, [pc, #380]	@ (800760c <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d021      	beq.n	80074d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d01a      	beq.n	80074d8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074b2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80074b6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80074c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80074c6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074cc:	e841 2300 	strex	r3, r2, [r1]
 80074d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1e4      	bne.n	80074a2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d130      	bne.n	8007542 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f6:	f023 0310 	bic.w	r3, r3, #16
 80074fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007508:	647b      	str	r3, [r7, #68]	@ 0x44
 800750a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800750e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e4      	bne.n	80074e6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	69db      	ldr	r3, [r3, #28]
 8007522:	f003 0310 	and.w	r3, r3, #16
 8007526:	2b10      	cmp	r3, #16
 8007528:	d103      	bne.n	8007532 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2210      	movs	r2, #16
 8007530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007538:	4619      	mov	r1, r3
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fe fcc2 	bl	8005ec4 <HAL_UARTEx_RxEventCallback>
 8007540:	e002      	b.n	8007548 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fa fb60 	bl	8001c08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007548:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800754c:	2b00      	cmp	r3, #0
 800754e:	d006      	beq.n	800755e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	f47f aecb 	bne.w	80072f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007564:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007568:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800756c:	2b00      	cmp	r3, #0
 800756e:	d049      	beq.n	8007604 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007576:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800757a:	429a      	cmp	r2, r3
 800757c:	d242      	bcs.n	8007604 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007588:	e853 3f00 	ldrex	r3, [r3]
 800758c:	623b      	str	r3, [r7, #32]
   return(result);
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007594:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3308      	adds	r3, #8
 800759e:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80075a2:	633a      	str	r2, [r7, #48]	@ 0x30
 80075a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075aa:	e841 2300 	strex	r3, r2, [r1]
 80075ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1e3      	bne.n	800757e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4a15      	ldr	r2, [pc, #84]	@ (8007610 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80075ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	e853 3f00 	ldrex	r3, [r3]
 80075c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f043 0320 	orr.w	r3, r3, #32
 80075d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	461a      	mov	r2, r3
 80075da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e2:	69b9      	ldr	r1, [r7, #24]
 80075e4:	69fa      	ldr	r2, [r7, #28]
 80075e6:	e841 2300 	strex	r3, r2, [r1]
 80075ea:	617b      	str	r3, [r7, #20]
   return(result);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d1e4      	bne.n	80075bc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075f2:	e007      	b.n	8007604 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f042 0208 	orr.w	r2, r2, #8
 8007602:	619a      	str	r2, [r3, #24]
}
 8007604:	bf00      	nop
 8007606:	37b8      	adds	r7, #184	@ 0xb8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40008000 	.word	0x40008000
 8007610:	08006d95 	.word	0x08006d95

08007614 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800763c:	b480      	push	{r7}
 800763e:	b083      	sub	sp, #12
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_UARTEx_DisableFifoMode+0x16>
 8007662:	2302      	movs	r3, #2
 8007664:	e027      	b.n	80076b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2224      	movs	r2, #36	@ 0x24
 8007672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0201 	bic.w	r2, r2, #1
 800768c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007694:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2220      	movs	r2, #32
 80076a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e02d      	b.n	8007736 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2224      	movs	r2, #36	@ 0x24
 80076e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	683a      	ldr	r2, [r7, #0]
 8007712:	430a      	orrs	r2, r1
 8007714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f850 	bl	80077bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2220      	movs	r2, #32
 8007728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007734:	2300      	movs	r3, #0
}
 8007736:	4618      	mov	r0, r3
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800773e:	b580      	push	{r7, lr}
 8007740:	b084      	sub	sp, #16
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007752:	2302      	movs	r3, #2
 8007754:	e02d      	b.n	80077b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2224      	movs	r2, #36	@ 0x24
 8007762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f022 0201 	bic.w	r2, r2, #1
 800777c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	689b      	ldr	r3, [r3, #8]
 8007784:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	430a      	orrs	r2, r1
 8007790:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f812 	bl	80077bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d108      	bne.n	80077de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077dc:	e031      	b.n	8007842 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077de:	2308      	movs	r3, #8
 80077e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077e2:	2308      	movs	r3, #8
 80077e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	0e5b      	lsrs	r3, r3, #25
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 0307 	and.w	r3, r3, #7
 80077f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	0f5b      	lsrs	r3, r3, #29
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f003 0307 	and.w	r3, r3, #7
 8007804:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007806:	7bbb      	ldrb	r3, [r7, #14]
 8007808:	7b3a      	ldrb	r2, [r7, #12]
 800780a:	4911      	ldr	r1, [pc, #68]	@ (8007850 <UARTEx_SetNbDataToProcess+0x94>)
 800780c:	5c8a      	ldrb	r2, [r1, r2]
 800780e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007812:	7b3a      	ldrb	r2, [r7, #12]
 8007814:	490f      	ldr	r1, [pc, #60]	@ (8007854 <UARTEx_SetNbDataToProcess+0x98>)
 8007816:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007818:	fb93 f3f2 	sdiv	r3, r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007824:	7bfb      	ldrb	r3, [r7, #15]
 8007826:	7b7a      	ldrb	r2, [r7, #13]
 8007828:	4909      	ldr	r1, [pc, #36]	@ (8007850 <UARTEx_SetNbDataToProcess+0x94>)
 800782a:	5c8a      	ldrb	r2, [r1, r2]
 800782c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007830:	7b7a      	ldrb	r2, [r7, #13]
 8007832:	4908      	ldr	r1, [pc, #32]	@ (8007854 <UARTEx_SetNbDataToProcess+0x98>)
 8007834:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007836:	fb93 f3f2 	sdiv	r3, r3, r2
 800783a:	b29a      	uxth	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007842:	bf00      	nop
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	0800c378 	.word	0x0800c378
 8007854:	0800c380 	.word	0x0800c380

08007858 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b08a      	sub	sp, #40	@ 0x28
 800785c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800785e:	2300      	movs	r3, #0
 8007860:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007862:	4b7e      	ldr	r3, [pc, #504]	@ (8007a5c <xTaskIncrementTick+0x204>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	f040 80ed 	bne.w	8007a46 <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800786c:	4b7c      	ldr	r3, [pc, #496]	@ (8007a60 <xTaskIncrementTick+0x208>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3301      	adds	r3, #1
 8007872:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007874:	4a7a      	ldr	r2, [pc, #488]	@ (8007a60 <xTaskIncrementTick+0x208>)
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d121      	bne.n	80078c4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8007880:	4b78      	ldr	r3, [pc, #480]	@ (8007a64 <xTaskIncrementTick+0x20c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00b      	beq.n	80078a2 <xTaskIncrementTick+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800788a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788e:	f383 8811 	msr	BASEPRI, r3
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	f3bf 8f4f 	dsb	sy
 800789a:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800789c:	bf00      	nop
 800789e:	bf00      	nop
 80078a0:	e7fd      	b.n	800789e <xTaskIncrementTick+0x46>
 80078a2:	4b70      	ldr	r3, [pc, #448]	@ (8007a64 <xTaskIncrementTick+0x20c>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	4b6f      	ldr	r3, [pc, #444]	@ (8007a68 <xTaskIncrementTick+0x210>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a6d      	ldr	r2, [pc, #436]	@ (8007a64 <xTaskIncrementTick+0x20c>)
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	4a6d      	ldr	r2, [pc, #436]	@ (8007a68 <xTaskIncrementTick+0x210>)
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	6013      	str	r3, [r2, #0]
 80078b6:	4b6d      	ldr	r3, [pc, #436]	@ (8007a6c <xTaskIncrementTick+0x214>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3301      	adds	r3, #1
 80078bc:	4a6b      	ldr	r2, [pc, #428]	@ (8007a6c <xTaskIncrementTick+0x214>)
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	f000 f93e 	bl	8007b40 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80078c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007a70 <xTaskIncrementTick+0x218>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6a3a      	ldr	r2, [r7, #32]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	f0c0 80a6 	bcc.w	8007a1c <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078d0:	4b64      	ldr	r3, [pc, #400]	@ (8007a64 <xTaskIncrementTick+0x20c>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d104      	bne.n	80078e4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078da:	4b65      	ldr	r3, [pc, #404]	@ (8007a70 <xTaskIncrementTick+0x218>)
 80078dc:	f04f 32ff 	mov.w	r2, #4294967295
 80078e0:	601a      	str	r2, [r3, #0]
                    break;
 80078e2:	e09b      	b.n	8007a1c <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078e4:	4b5f      	ldr	r3, [pc, #380]	@ (8007a64 <xTaskIncrementTick+0x20c>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80078f4:	6a3a      	ldr	r2, [r7, #32]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d203      	bcs.n	8007904 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80078fc:	4a5c      	ldr	r2, [pc, #368]	@ (8007a70 <xTaskIncrementTick+0x218>)
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007902:	e08b      	b.n	8007a1c <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	695b      	ldr	r3, [r3, #20]
 8007908:	613b      	str	r3, [r7, #16]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	68d2      	ldr	r2, [r2, #12]
 8007912:	609a      	str	r2, [r3, #8]
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	6892      	ldr	r2, [r2, #8]
 800791c:	605a      	str	r2, [r3, #4]
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	685a      	ldr	r2, [r3, #4]
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	3304      	adds	r3, #4
 8007926:	429a      	cmp	r2, r3
 8007928:	d103      	bne.n	8007932 <xTaskIncrementTick+0xda>
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	605a      	str	r2, [r3, #4]
 8007932:	69bb      	ldr	r3, [r7, #24]
 8007934:	2200      	movs	r2, #0
 8007936:	615a      	str	r2, [r3, #20]
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	1e5a      	subs	r2, r3, #1
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007946:	2b00      	cmp	r3, #0
 8007948:	d01e      	beq.n	8007988 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800794e:	60fb      	str	r3, [r7, #12]
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	69db      	ldr	r3, [r3, #28]
 8007954:	69ba      	ldr	r2, [r7, #24]
 8007956:	6a12      	ldr	r2, [r2, #32]
 8007958:	609a      	str	r2, [r3, #8]
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	69ba      	ldr	r2, [r7, #24]
 8007960:	69d2      	ldr	r2, [r2, #28]
 8007962:	605a      	str	r2, [r3, #4]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	69bb      	ldr	r3, [r7, #24]
 800796a:	3318      	adds	r3, #24
 800796c:	429a      	cmp	r2, r3
 800796e:	d103      	bne.n	8007978 <xTaskIncrementTick+0x120>
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	6a1a      	ldr	r2, [r3, #32]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	605a      	str	r2, [r3, #4]
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	2200      	movs	r2, #0
 800797c:	629a      	str	r2, [r3, #40]	@ 0x28
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	1e5a      	subs	r2, r3, #1
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800798c:	2201      	movs	r2, #1
 800798e:	409a      	lsls	r2, r3
 8007990:	4b38      	ldr	r3, [pc, #224]	@ (8007a74 <xTaskIncrementTick+0x21c>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4313      	orrs	r3, r2
 8007996:	4a37      	ldr	r2, [pc, #220]	@ (8007a74 <xTaskIncrementTick+0x21c>)
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799e:	4936      	ldr	r1, [pc, #216]	@ (8007a78 <xTaskIncrementTick+0x220>)
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	440b      	add	r3, r1
 80079aa:	3304      	adds	r3, #4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	60bb      	str	r3, [r7, #8]
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	609a      	str	r2, [r3, #8]
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	689a      	ldr	r2, [r3, #8]
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	60da      	str	r2, [r3, #12]
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	69ba      	ldr	r2, [r7, #24]
 80079c4:	3204      	adds	r2, #4
 80079c6:	605a      	str	r2, [r3, #4]
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	609a      	str	r2, [r3, #8]
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d4:	4613      	mov	r3, r2
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	4413      	add	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4a26      	ldr	r2, [pc, #152]	@ (8007a78 <xTaskIncrementTick+0x220>)
 80079de:	441a      	add	r2, r3
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	615a      	str	r2, [r3, #20]
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e8:	4923      	ldr	r1, [pc, #140]	@ (8007a78 <xTaskIncrementTick+0x220>)
 80079ea:	4613      	mov	r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	440b      	add	r3, r1
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	1c59      	adds	r1, r3, #1
 80079f8:	481f      	ldr	r0, [pc, #124]	@ (8007a78 <xTaskIncrementTick+0x220>)
 80079fa:	4613      	mov	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4403      	add	r3, r0
 8007a04:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8007a7c <xTaskIncrementTick+0x224>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a10:	429a      	cmp	r2, r3
 8007a12:	f67f af5d 	bls.w	80078d0 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8007a16:	2301      	movs	r3, #1
 8007a18:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a1a:	e759      	b.n	80078d0 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a1c:	4b17      	ldr	r3, [pc, #92]	@ (8007a7c <xTaskIncrementTick+0x224>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a22:	4915      	ldr	r1, [pc, #84]	@ (8007a78 <xTaskIncrementTick+0x220>)
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d901      	bls.n	8007a38 <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8007a34:	2301      	movs	r3, #1
 8007a36:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007a38:	4b11      	ldr	r3, [pc, #68]	@ (8007a80 <xTaskIncrementTick+0x228>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8007a40:	2301      	movs	r3, #1
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a44:	e004      	b.n	8007a50 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007a46:	4b0f      	ldr	r3, [pc, #60]	@ (8007a84 <xTaskIncrementTick+0x22c>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8007a84 <xTaskIncrementTick+0x22c>)
 8007a4e:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3728      	adds	r7, #40	@ 0x28
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	2000072c 	.word	0x2000072c
 8007a60:	20000714 	.word	0x20000714
 8007a64:	2000070c 	.word	0x2000070c
 8007a68:	20000710 	.word	0x20000710
 8007a6c:	20000724 	.word	0x20000724
 8007a70:	20000728 	.word	0x20000728
 8007a74:	20000718 	.word	0x20000718
 8007a78:	200006a8 	.word	0x200006a8
 8007a7c:	200006a4 	.word	0x200006a4
 8007a80:	20000720 	.word	0x20000720
 8007a84:	2000071c 	.word	0x2000071c

08007a88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b087      	sub	sp, #28
 8007a8c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a8e:	4b27      	ldr	r3, [pc, #156]	@ (8007b2c <vTaskSwitchContext+0xa4>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d003      	beq.n	8007a9e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007a96:	4b26      	ldr	r3, [pc, #152]	@ (8007b30 <vTaskSwitchContext+0xa8>)
 8007a98:	2201      	movs	r2, #1
 8007a9a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007a9c:	e040      	b.n	8007b20 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8007a9e:	4b24      	ldr	r3, [pc, #144]	@ (8007b30 <vTaskSwitchContext+0xa8>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa4:	4b23      	ldr	r3, [pc, #140]	@ (8007b34 <vTaskSwitchContext+0xac>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	fab3 f383 	clz	r3, r3
 8007ab0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007ab2:	7afb      	ldrb	r3, [r7, #11]
 8007ab4:	f1c3 031f 	rsb	r3, r3, #31
 8007ab8:	617b      	str	r3, [r7, #20]
 8007aba:	491f      	ldr	r1, [pc, #124]	@ (8007b38 <vTaskSwitchContext+0xb0>)
 8007abc:	697a      	ldr	r2, [r7, #20]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	440b      	add	r3, r1
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d10b      	bne.n	8007ae6 <vTaskSwitchContext+0x5e>
        __asm volatile
 8007ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad2:	f383 8811 	msr	BASEPRI, r3
 8007ad6:	f3bf 8f6f 	isb	sy
 8007ada:	f3bf 8f4f 	dsb	sy
 8007ade:	607b      	str	r3, [r7, #4]
    }
 8007ae0:	bf00      	nop
 8007ae2:	bf00      	nop
 8007ae4:	e7fd      	b.n	8007ae2 <vTaskSwitchContext+0x5a>
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4a11      	ldr	r2, [pc, #68]	@ (8007b38 <vTaskSwitchContext+0xb0>)
 8007af2:	4413      	add	r3, r2
 8007af4:	613b      	str	r3, [r7, #16]
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	605a      	str	r2, [r3, #4]
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	3308      	adds	r3, #8
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d104      	bne.n	8007b16 <vTaskSwitchContext+0x8e>
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	4a07      	ldr	r2, [pc, #28]	@ (8007b3c <vTaskSwitchContext+0xb4>)
 8007b1e:	6013      	str	r3, [r2, #0]
}
 8007b20:	bf00      	nop
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	2000072c 	.word	0x2000072c
 8007b30:	20000720 	.word	0x20000720
 8007b34:	20000718 	.word	0x20000718
 8007b38:	200006a8 	.word	0x200006a8
 8007b3c:	200006a4 	.word	0x200006a4

08007b40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b40:	b480      	push	{r7}
 8007b42:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b44:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <prvResetNextTaskUnblockTime+0x30>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007b4e:	4b09      	ldr	r3, [pc, #36]	@ (8007b74 <prvResetNextTaskUnblockTime+0x34>)
 8007b50:	f04f 32ff 	mov.w	r2, #4294967295
 8007b54:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007b56:	e005      	b.n	8007b64 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007b58:	4b05      	ldr	r3, [pc, #20]	@ (8007b70 <prvResetNextTaskUnblockTime+0x30>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a04      	ldr	r2, [pc, #16]	@ (8007b74 <prvResetNextTaskUnblockTime+0x34>)
 8007b62:	6013      	str	r3, [r2, #0]
}
 8007b64:	bf00      	nop
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	2000070c 	.word	0x2000070c
 8007b74:	20000728 	.word	0x20000728
	...

08007b80 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007b80:	4b07      	ldr	r3, [pc, #28]	@ (8007ba0 <pxCurrentTCBConst2>)
 8007b82:	6819      	ldr	r1, [r3, #0]
 8007b84:	6808      	ldr	r0, [r1, #0]
 8007b86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8a:	f380 8809 	msr	PSP, r0
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f04f 0000 	mov.w	r0, #0
 8007b96:	f380 8811 	msr	BASEPRI, r0
 8007b9a:	4770      	bx	lr
 8007b9c:	f3af 8000 	nop.w

08007ba0 <pxCurrentTCBConst2>:
 8007ba0:	200006a4 	.word	0x200006a4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007ba4:	bf00      	nop
 8007ba6:	bf00      	nop
	...

08007bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007bb0:	f3ef 8009 	mrs	r0, PSP
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4b15      	ldr	r3, [pc, #84]	@ (8007c10 <pxCurrentTCBConst>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	f01e 0f10 	tst.w	lr, #16
 8007bc0:	bf08      	it	eq
 8007bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	6010      	str	r0, [r2, #0]
 8007bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007bd4:	f380 8811 	msr	BASEPRI, r0
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f7ff ff52 	bl	8007a88 <vTaskSwitchContext>
 8007be4:	f04f 0000 	mov.w	r0, #0
 8007be8:	f380 8811 	msr	BASEPRI, r0
 8007bec:	bc09      	pop	{r0, r3}
 8007bee:	6819      	ldr	r1, [r3, #0]
 8007bf0:	6808      	ldr	r0, [r1, #0]
 8007bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf6:	f01e 0f10 	tst.w	lr, #16
 8007bfa:	bf08      	it	eq
 8007bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c00:	f380 8809 	msr	PSP, r0
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	f3af 8000 	nop.w

08007c10 <pxCurrentTCBConst>:
 8007c10:	200006a4 	.word	0x200006a4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
        __asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
    }
 8007c30:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007c32:	f7ff fe11 	bl	8007858 <xTaskIncrementTick>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c3c:	4b06      	ldr	r3, [pc, #24]	@ (8007c58 <SysTick_Handler+0x40>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8007c4e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <__cvt>:
 8007c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c60:	ec57 6b10 	vmov	r6, r7, d0
 8007c64:	2f00      	cmp	r7, #0
 8007c66:	460c      	mov	r4, r1
 8007c68:	4619      	mov	r1, r3
 8007c6a:	463b      	mov	r3, r7
 8007c6c:	bfbb      	ittet	lt
 8007c6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007c72:	461f      	movlt	r7, r3
 8007c74:	2300      	movge	r3, #0
 8007c76:	232d      	movlt	r3, #45	@ 0x2d
 8007c78:	700b      	strb	r3, [r1, #0]
 8007c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007c80:	4691      	mov	r9, r2
 8007c82:	f023 0820 	bic.w	r8, r3, #32
 8007c86:	bfbc      	itt	lt
 8007c88:	4632      	movlt	r2, r6
 8007c8a:	4616      	movlt	r6, r2
 8007c8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007c90:	d005      	beq.n	8007c9e <__cvt+0x42>
 8007c92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007c96:	d100      	bne.n	8007c9a <__cvt+0x3e>
 8007c98:	3401      	adds	r4, #1
 8007c9a:	2102      	movs	r1, #2
 8007c9c:	e000      	b.n	8007ca0 <__cvt+0x44>
 8007c9e:	2103      	movs	r1, #3
 8007ca0:	ab03      	add	r3, sp, #12
 8007ca2:	9301      	str	r3, [sp, #4]
 8007ca4:	ab02      	add	r3, sp, #8
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	ec47 6b10 	vmov	d0, r6, r7
 8007cac:	4653      	mov	r3, sl
 8007cae:	4622      	mov	r2, r4
 8007cb0:	f001 f882 	bl	8008db8 <_dtoa_r>
 8007cb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007cb8:	4605      	mov	r5, r0
 8007cba:	d119      	bne.n	8007cf0 <__cvt+0x94>
 8007cbc:	f019 0f01 	tst.w	r9, #1
 8007cc0:	d00e      	beq.n	8007ce0 <__cvt+0x84>
 8007cc2:	eb00 0904 	add.w	r9, r0, r4
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2300      	movs	r3, #0
 8007cca:	4630      	mov	r0, r6
 8007ccc:	4639      	mov	r1, r7
 8007cce:	f7f8 ff23 	bl	8000b18 <__aeabi_dcmpeq>
 8007cd2:	b108      	cbz	r0, 8007cd8 <__cvt+0x7c>
 8007cd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8007cd8:	2230      	movs	r2, #48	@ 0x30
 8007cda:	9b03      	ldr	r3, [sp, #12]
 8007cdc:	454b      	cmp	r3, r9
 8007cde:	d31e      	bcc.n	8007d1e <__cvt+0xc2>
 8007ce0:	9b03      	ldr	r3, [sp, #12]
 8007ce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ce4:	1b5b      	subs	r3, r3, r5
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	b004      	add	sp, #16
 8007cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007cf4:	eb00 0904 	add.w	r9, r0, r4
 8007cf8:	d1e5      	bne.n	8007cc6 <__cvt+0x6a>
 8007cfa:	7803      	ldrb	r3, [r0, #0]
 8007cfc:	2b30      	cmp	r3, #48	@ 0x30
 8007cfe:	d10a      	bne.n	8007d16 <__cvt+0xba>
 8007d00:	2200      	movs	r2, #0
 8007d02:	2300      	movs	r3, #0
 8007d04:	4630      	mov	r0, r6
 8007d06:	4639      	mov	r1, r7
 8007d08:	f7f8 ff06 	bl	8000b18 <__aeabi_dcmpeq>
 8007d0c:	b918      	cbnz	r0, 8007d16 <__cvt+0xba>
 8007d0e:	f1c4 0401 	rsb	r4, r4, #1
 8007d12:	f8ca 4000 	str.w	r4, [sl]
 8007d16:	f8da 3000 	ldr.w	r3, [sl]
 8007d1a:	4499      	add	r9, r3
 8007d1c:	e7d3      	b.n	8007cc6 <__cvt+0x6a>
 8007d1e:	1c59      	adds	r1, r3, #1
 8007d20:	9103      	str	r1, [sp, #12]
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	e7d9      	b.n	8007cda <__cvt+0x7e>

08007d26 <__exponent>:
 8007d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d28:	2900      	cmp	r1, #0
 8007d2a:	bfba      	itte	lt
 8007d2c:	4249      	neglt	r1, r1
 8007d2e:	232d      	movlt	r3, #45	@ 0x2d
 8007d30:	232b      	movge	r3, #43	@ 0x2b
 8007d32:	2909      	cmp	r1, #9
 8007d34:	7002      	strb	r2, [r0, #0]
 8007d36:	7043      	strb	r3, [r0, #1]
 8007d38:	dd29      	ble.n	8007d8e <__exponent+0x68>
 8007d3a:	f10d 0307 	add.w	r3, sp, #7
 8007d3e:	461d      	mov	r5, r3
 8007d40:	270a      	movs	r7, #10
 8007d42:	461a      	mov	r2, r3
 8007d44:	fbb1 f6f7 	udiv	r6, r1, r7
 8007d48:	fb07 1416 	mls	r4, r7, r6, r1
 8007d4c:	3430      	adds	r4, #48	@ 0x30
 8007d4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007d52:	460c      	mov	r4, r1
 8007d54:	2c63      	cmp	r4, #99	@ 0x63
 8007d56:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	dcf1      	bgt.n	8007d42 <__exponent+0x1c>
 8007d5e:	3130      	adds	r1, #48	@ 0x30
 8007d60:	1e94      	subs	r4, r2, #2
 8007d62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007d66:	1c41      	adds	r1, r0, #1
 8007d68:	4623      	mov	r3, r4
 8007d6a:	42ab      	cmp	r3, r5
 8007d6c:	d30a      	bcc.n	8007d84 <__exponent+0x5e>
 8007d6e:	f10d 0309 	add.w	r3, sp, #9
 8007d72:	1a9b      	subs	r3, r3, r2
 8007d74:	42ac      	cmp	r4, r5
 8007d76:	bf88      	it	hi
 8007d78:	2300      	movhi	r3, #0
 8007d7a:	3302      	adds	r3, #2
 8007d7c:	4403      	add	r3, r0
 8007d7e:	1a18      	subs	r0, r3, r0
 8007d80:	b003      	add	sp, #12
 8007d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007d88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007d8c:	e7ed      	b.n	8007d6a <__exponent+0x44>
 8007d8e:	2330      	movs	r3, #48	@ 0x30
 8007d90:	3130      	adds	r1, #48	@ 0x30
 8007d92:	7083      	strb	r3, [r0, #2]
 8007d94:	70c1      	strb	r1, [r0, #3]
 8007d96:	1d03      	adds	r3, r0, #4
 8007d98:	e7f1      	b.n	8007d7e <__exponent+0x58>
	...

08007d9c <_printf_float>:
 8007d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	b08d      	sub	sp, #52	@ 0x34
 8007da2:	460c      	mov	r4, r1
 8007da4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007da8:	4616      	mov	r6, r2
 8007daa:	461f      	mov	r7, r3
 8007dac:	4605      	mov	r5, r0
 8007dae:	f000 feef 	bl	8008b90 <_localeconv_r>
 8007db2:	6803      	ldr	r3, [r0, #0]
 8007db4:	9304      	str	r3, [sp, #16]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7f8 fa82 	bl	80002c0 <strlen>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8007dc4:	9005      	str	r0, [sp, #20]
 8007dc6:	3307      	adds	r3, #7
 8007dc8:	f023 0307 	bic.w	r3, r3, #7
 8007dcc:	f103 0208 	add.w	r2, r3, #8
 8007dd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007dd4:	f8d4 b000 	ldr.w	fp, [r4]
 8007dd8:	f8c8 2000 	str.w	r2, [r8]
 8007ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007de0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007de4:	9307      	str	r3, [sp, #28]
 8007de6:	f8cd 8018 	str.w	r8, [sp, #24]
 8007dea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007df2:	4b9c      	ldr	r3, [pc, #624]	@ (8008064 <_printf_float+0x2c8>)
 8007df4:	f04f 32ff 	mov.w	r2, #4294967295
 8007df8:	f7f8 fec0 	bl	8000b7c <__aeabi_dcmpun>
 8007dfc:	bb70      	cbnz	r0, 8007e5c <_printf_float+0xc0>
 8007dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007e02:	4b98      	ldr	r3, [pc, #608]	@ (8008064 <_printf_float+0x2c8>)
 8007e04:	f04f 32ff 	mov.w	r2, #4294967295
 8007e08:	f7f8 fe9a 	bl	8000b40 <__aeabi_dcmple>
 8007e0c:	bb30      	cbnz	r0, 8007e5c <_printf_float+0xc0>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2300      	movs	r3, #0
 8007e12:	4640      	mov	r0, r8
 8007e14:	4649      	mov	r1, r9
 8007e16:	f7f8 fe89 	bl	8000b2c <__aeabi_dcmplt>
 8007e1a:	b110      	cbz	r0, 8007e22 <_printf_float+0x86>
 8007e1c:	232d      	movs	r3, #45	@ 0x2d
 8007e1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e22:	4a91      	ldr	r2, [pc, #580]	@ (8008068 <_printf_float+0x2cc>)
 8007e24:	4b91      	ldr	r3, [pc, #580]	@ (800806c <_printf_float+0x2d0>)
 8007e26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007e2a:	bf94      	ite	ls
 8007e2c:	4690      	movls	r8, r2
 8007e2e:	4698      	movhi	r8, r3
 8007e30:	2303      	movs	r3, #3
 8007e32:	6123      	str	r3, [r4, #16]
 8007e34:	f02b 0304 	bic.w	r3, fp, #4
 8007e38:	6023      	str	r3, [r4, #0]
 8007e3a:	f04f 0900 	mov.w	r9, #0
 8007e3e:	9700      	str	r7, [sp, #0]
 8007e40:	4633      	mov	r3, r6
 8007e42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007e44:	4621      	mov	r1, r4
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 f9d2 	bl	80081f0 <_printf_common>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f040 808d 	bne.w	8007f6c <_printf_float+0x1d0>
 8007e52:	f04f 30ff 	mov.w	r0, #4294967295
 8007e56:	b00d      	add	sp, #52	@ 0x34
 8007e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e5c:	4642      	mov	r2, r8
 8007e5e:	464b      	mov	r3, r9
 8007e60:	4640      	mov	r0, r8
 8007e62:	4649      	mov	r1, r9
 8007e64:	f7f8 fe8a 	bl	8000b7c <__aeabi_dcmpun>
 8007e68:	b140      	cbz	r0, 8007e7c <_printf_float+0xe0>
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bfbc      	itt	lt
 8007e70:	232d      	movlt	r3, #45	@ 0x2d
 8007e72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007e76:	4a7e      	ldr	r2, [pc, #504]	@ (8008070 <_printf_float+0x2d4>)
 8007e78:	4b7e      	ldr	r3, [pc, #504]	@ (8008074 <_printf_float+0x2d8>)
 8007e7a:	e7d4      	b.n	8007e26 <_printf_float+0x8a>
 8007e7c:	6863      	ldr	r3, [r4, #4]
 8007e7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007e82:	9206      	str	r2, [sp, #24]
 8007e84:	1c5a      	adds	r2, r3, #1
 8007e86:	d13b      	bne.n	8007f00 <_printf_float+0x164>
 8007e88:	2306      	movs	r3, #6
 8007e8a:	6063      	str	r3, [r4, #4]
 8007e8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007e90:	2300      	movs	r3, #0
 8007e92:	6022      	str	r2, [r4, #0]
 8007e94:	9303      	str	r3, [sp, #12]
 8007e96:	ab0a      	add	r3, sp, #40	@ 0x28
 8007e98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007e9c:	ab09      	add	r3, sp, #36	@ 0x24
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	6861      	ldr	r1, [r4, #4]
 8007ea2:	ec49 8b10 	vmov	d0, r8, r9
 8007ea6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007eaa:	4628      	mov	r0, r5
 8007eac:	f7ff fed6 	bl	8007c5c <__cvt>
 8007eb0:	9b06      	ldr	r3, [sp, #24]
 8007eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007eb4:	2b47      	cmp	r3, #71	@ 0x47
 8007eb6:	4680      	mov	r8, r0
 8007eb8:	d129      	bne.n	8007f0e <_printf_float+0x172>
 8007eba:	1cc8      	adds	r0, r1, #3
 8007ebc:	db02      	blt.n	8007ec4 <_printf_float+0x128>
 8007ebe:	6863      	ldr	r3, [r4, #4]
 8007ec0:	4299      	cmp	r1, r3
 8007ec2:	dd41      	ble.n	8007f48 <_printf_float+0x1ac>
 8007ec4:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ec8:	fa5f fa8a 	uxtb.w	sl, sl
 8007ecc:	3901      	subs	r1, #1
 8007ece:	4652      	mov	r2, sl
 8007ed0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ed4:	9109      	str	r1, [sp, #36]	@ 0x24
 8007ed6:	f7ff ff26 	bl	8007d26 <__exponent>
 8007eda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007edc:	1813      	adds	r3, r2, r0
 8007ede:	2a01      	cmp	r2, #1
 8007ee0:	4681      	mov	r9, r0
 8007ee2:	6123      	str	r3, [r4, #16]
 8007ee4:	dc02      	bgt.n	8007eec <_printf_float+0x150>
 8007ee6:	6822      	ldr	r2, [r4, #0]
 8007ee8:	07d2      	lsls	r2, r2, #31
 8007eea:	d501      	bpl.n	8007ef0 <_printf_float+0x154>
 8007eec:	3301      	adds	r3, #1
 8007eee:	6123      	str	r3, [r4, #16]
 8007ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d0a2      	beq.n	8007e3e <_printf_float+0xa2>
 8007ef8:	232d      	movs	r3, #45	@ 0x2d
 8007efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007efe:	e79e      	b.n	8007e3e <_printf_float+0xa2>
 8007f00:	9a06      	ldr	r2, [sp, #24]
 8007f02:	2a47      	cmp	r2, #71	@ 0x47
 8007f04:	d1c2      	bne.n	8007e8c <_printf_float+0xf0>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d1c0      	bne.n	8007e8c <_printf_float+0xf0>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e7bd      	b.n	8007e8a <_printf_float+0xee>
 8007f0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f12:	d9db      	bls.n	8007ecc <_printf_float+0x130>
 8007f14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007f18:	d118      	bne.n	8007f4c <_printf_float+0x1b0>
 8007f1a:	2900      	cmp	r1, #0
 8007f1c:	6863      	ldr	r3, [r4, #4]
 8007f1e:	dd0b      	ble.n	8007f38 <_printf_float+0x19c>
 8007f20:	6121      	str	r1, [r4, #16]
 8007f22:	b913      	cbnz	r3, 8007f2a <_printf_float+0x18e>
 8007f24:	6822      	ldr	r2, [r4, #0]
 8007f26:	07d0      	lsls	r0, r2, #31
 8007f28:	d502      	bpl.n	8007f30 <_printf_float+0x194>
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	440b      	add	r3, r1
 8007f2e:	6123      	str	r3, [r4, #16]
 8007f30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007f32:	f04f 0900 	mov.w	r9, #0
 8007f36:	e7db      	b.n	8007ef0 <_printf_float+0x154>
 8007f38:	b913      	cbnz	r3, 8007f40 <_printf_float+0x1a4>
 8007f3a:	6822      	ldr	r2, [r4, #0]
 8007f3c:	07d2      	lsls	r2, r2, #31
 8007f3e:	d501      	bpl.n	8007f44 <_printf_float+0x1a8>
 8007f40:	3302      	adds	r3, #2
 8007f42:	e7f4      	b.n	8007f2e <_printf_float+0x192>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e7f2      	b.n	8007f2e <_printf_float+0x192>
 8007f48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f4e:	4299      	cmp	r1, r3
 8007f50:	db05      	blt.n	8007f5e <_printf_float+0x1c2>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	6121      	str	r1, [r4, #16]
 8007f56:	07d8      	lsls	r0, r3, #31
 8007f58:	d5ea      	bpl.n	8007f30 <_printf_float+0x194>
 8007f5a:	1c4b      	adds	r3, r1, #1
 8007f5c:	e7e7      	b.n	8007f2e <_printf_float+0x192>
 8007f5e:	2900      	cmp	r1, #0
 8007f60:	bfd4      	ite	le
 8007f62:	f1c1 0202 	rsble	r2, r1, #2
 8007f66:	2201      	movgt	r2, #1
 8007f68:	4413      	add	r3, r2
 8007f6a:	e7e0      	b.n	8007f2e <_printf_float+0x192>
 8007f6c:	6823      	ldr	r3, [r4, #0]
 8007f6e:	055a      	lsls	r2, r3, #21
 8007f70:	d407      	bmi.n	8007f82 <_printf_float+0x1e6>
 8007f72:	6923      	ldr	r3, [r4, #16]
 8007f74:	4642      	mov	r2, r8
 8007f76:	4631      	mov	r1, r6
 8007f78:	4628      	mov	r0, r5
 8007f7a:	47b8      	blx	r7
 8007f7c:	3001      	adds	r0, #1
 8007f7e:	d12b      	bne.n	8007fd8 <_printf_float+0x23c>
 8007f80:	e767      	b.n	8007e52 <_printf_float+0xb6>
 8007f82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007f86:	f240 80dd 	bls.w	8008144 <_printf_float+0x3a8>
 8007f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f8e:	2200      	movs	r2, #0
 8007f90:	2300      	movs	r3, #0
 8007f92:	f7f8 fdc1 	bl	8000b18 <__aeabi_dcmpeq>
 8007f96:	2800      	cmp	r0, #0
 8007f98:	d033      	beq.n	8008002 <_printf_float+0x266>
 8007f9a:	4a37      	ldr	r2, [pc, #220]	@ (8008078 <_printf_float+0x2dc>)
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	4631      	mov	r1, r6
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b8      	blx	r7
 8007fa4:	3001      	adds	r0, #1
 8007fa6:	f43f af54 	beq.w	8007e52 <_printf_float+0xb6>
 8007faa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007fae:	4543      	cmp	r3, r8
 8007fb0:	db02      	blt.n	8007fb8 <_printf_float+0x21c>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	07d8      	lsls	r0, r3, #31
 8007fb6:	d50f      	bpl.n	8007fd8 <_printf_float+0x23c>
 8007fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fbc:	4631      	mov	r1, r6
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	47b8      	blx	r7
 8007fc2:	3001      	adds	r0, #1
 8007fc4:	f43f af45 	beq.w	8007e52 <_printf_float+0xb6>
 8007fc8:	f04f 0900 	mov.w	r9, #0
 8007fcc:	f108 38ff 	add.w	r8, r8, #4294967295
 8007fd0:	f104 0a1a 	add.w	sl, r4, #26
 8007fd4:	45c8      	cmp	r8, r9
 8007fd6:	dc09      	bgt.n	8007fec <_printf_float+0x250>
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	079b      	lsls	r3, r3, #30
 8007fdc:	f100 8103 	bmi.w	80081e6 <_printf_float+0x44a>
 8007fe0:	68e0      	ldr	r0, [r4, #12]
 8007fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fe4:	4298      	cmp	r0, r3
 8007fe6:	bfb8      	it	lt
 8007fe8:	4618      	movlt	r0, r3
 8007fea:	e734      	b.n	8007e56 <_printf_float+0xba>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4652      	mov	r2, sl
 8007ff0:	4631      	mov	r1, r6
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	47b8      	blx	r7
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f43f af2b 	beq.w	8007e52 <_printf_float+0xb6>
 8007ffc:	f109 0901 	add.w	r9, r9, #1
 8008000:	e7e8      	b.n	8007fd4 <_printf_float+0x238>
 8008002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008004:	2b00      	cmp	r3, #0
 8008006:	dc39      	bgt.n	800807c <_printf_float+0x2e0>
 8008008:	4a1b      	ldr	r2, [pc, #108]	@ (8008078 <_printf_float+0x2dc>)
 800800a:	2301      	movs	r3, #1
 800800c:	4631      	mov	r1, r6
 800800e:	4628      	mov	r0, r5
 8008010:	47b8      	blx	r7
 8008012:	3001      	adds	r0, #1
 8008014:	f43f af1d 	beq.w	8007e52 <_printf_float+0xb6>
 8008018:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800801c:	ea59 0303 	orrs.w	r3, r9, r3
 8008020:	d102      	bne.n	8008028 <_printf_float+0x28c>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	07d9      	lsls	r1, r3, #31
 8008026:	d5d7      	bpl.n	8007fd8 <_printf_float+0x23c>
 8008028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802c:	4631      	mov	r1, r6
 800802e:	4628      	mov	r0, r5
 8008030:	47b8      	blx	r7
 8008032:	3001      	adds	r0, #1
 8008034:	f43f af0d 	beq.w	8007e52 <_printf_float+0xb6>
 8008038:	f04f 0a00 	mov.w	sl, #0
 800803c:	f104 0b1a 	add.w	fp, r4, #26
 8008040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008042:	425b      	negs	r3, r3
 8008044:	4553      	cmp	r3, sl
 8008046:	dc01      	bgt.n	800804c <_printf_float+0x2b0>
 8008048:	464b      	mov	r3, r9
 800804a:	e793      	b.n	8007f74 <_printf_float+0x1d8>
 800804c:	2301      	movs	r3, #1
 800804e:	465a      	mov	r2, fp
 8008050:	4631      	mov	r1, r6
 8008052:	4628      	mov	r0, r5
 8008054:	47b8      	blx	r7
 8008056:	3001      	adds	r0, #1
 8008058:	f43f aefb 	beq.w	8007e52 <_printf_float+0xb6>
 800805c:	f10a 0a01 	add.w	sl, sl, #1
 8008060:	e7ee      	b.n	8008040 <_printf_float+0x2a4>
 8008062:	bf00      	nop
 8008064:	7fefffff 	.word	0x7fefffff
 8008068:	0800c388 	.word	0x0800c388
 800806c:	0800c38c 	.word	0x0800c38c
 8008070:	0800c390 	.word	0x0800c390
 8008074:	0800c394 	.word	0x0800c394
 8008078:	0800c398 	.word	0x0800c398
 800807c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800807e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008082:	4553      	cmp	r3, sl
 8008084:	bfa8      	it	ge
 8008086:	4653      	movge	r3, sl
 8008088:	2b00      	cmp	r3, #0
 800808a:	4699      	mov	r9, r3
 800808c:	dc36      	bgt.n	80080fc <_printf_float+0x360>
 800808e:	f04f 0b00 	mov.w	fp, #0
 8008092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008096:	f104 021a 	add.w	r2, r4, #26
 800809a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800809c:	9306      	str	r3, [sp, #24]
 800809e:	eba3 0309 	sub.w	r3, r3, r9
 80080a2:	455b      	cmp	r3, fp
 80080a4:	dc31      	bgt.n	800810a <_printf_float+0x36e>
 80080a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080a8:	459a      	cmp	sl, r3
 80080aa:	dc3a      	bgt.n	8008122 <_printf_float+0x386>
 80080ac:	6823      	ldr	r3, [r4, #0]
 80080ae:	07da      	lsls	r2, r3, #31
 80080b0:	d437      	bmi.n	8008122 <_printf_float+0x386>
 80080b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b4:	ebaa 0903 	sub.w	r9, sl, r3
 80080b8:	9b06      	ldr	r3, [sp, #24]
 80080ba:	ebaa 0303 	sub.w	r3, sl, r3
 80080be:	4599      	cmp	r9, r3
 80080c0:	bfa8      	it	ge
 80080c2:	4699      	movge	r9, r3
 80080c4:	f1b9 0f00 	cmp.w	r9, #0
 80080c8:	dc33      	bgt.n	8008132 <_printf_float+0x396>
 80080ca:	f04f 0800 	mov.w	r8, #0
 80080ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80080d2:	f104 0b1a 	add.w	fp, r4, #26
 80080d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d8:	ebaa 0303 	sub.w	r3, sl, r3
 80080dc:	eba3 0309 	sub.w	r3, r3, r9
 80080e0:	4543      	cmp	r3, r8
 80080e2:	f77f af79 	ble.w	8007fd8 <_printf_float+0x23c>
 80080e6:	2301      	movs	r3, #1
 80080e8:	465a      	mov	r2, fp
 80080ea:	4631      	mov	r1, r6
 80080ec:	4628      	mov	r0, r5
 80080ee:	47b8      	blx	r7
 80080f0:	3001      	adds	r0, #1
 80080f2:	f43f aeae 	beq.w	8007e52 <_printf_float+0xb6>
 80080f6:	f108 0801 	add.w	r8, r8, #1
 80080fa:	e7ec      	b.n	80080d6 <_printf_float+0x33a>
 80080fc:	4642      	mov	r2, r8
 80080fe:	4631      	mov	r1, r6
 8008100:	4628      	mov	r0, r5
 8008102:	47b8      	blx	r7
 8008104:	3001      	adds	r0, #1
 8008106:	d1c2      	bne.n	800808e <_printf_float+0x2f2>
 8008108:	e6a3      	b.n	8007e52 <_printf_float+0xb6>
 800810a:	2301      	movs	r3, #1
 800810c:	4631      	mov	r1, r6
 800810e:	4628      	mov	r0, r5
 8008110:	9206      	str	r2, [sp, #24]
 8008112:	47b8      	blx	r7
 8008114:	3001      	adds	r0, #1
 8008116:	f43f ae9c 	beq.w	8007e52 <_printf_float+0xb6>
 800811a:	9a06      	ldr	r2, [sp, #24]
 800811c:	f10b 0b01 	add.w	fp, fp, #1
 8008120:	e7bb      	b.n	800809a <_printf_float+0x2fe>
 8008122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008126:	4631      	mov	r1, r6
 8008128:	4628      	mov	r0, r5
 800812a:	47b8      	blx	r7
 800812c:	3001      	adds	r0, #1
 800812e:	d1c0      	bne.n	80080b2 <_printf_float+0x316>
 8008130:	e68f      	b.n	8007e52 <_printf_float+0xb6>
 8008132:	9a06      	ldr	r2, [sp, #24]
 8008134:	464b      	mov	r3, r9
 8008136:	4442      	add	r2, r8
 8008138:	4631      	mov	r1, r6
 800813a:	4628      	mov	r0, r5
 800813c:	47b8      	blx	r7
 800813e:	3001      	adds	r0, #1
 8008140:	d1c3      	bne.n	80080ca <_printf_float+0x32e>
 8008142:	e686      	b.n	8007e52 <_printf_float+0xb6>
 8008144:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008148:	f1ba 0f01 	cmp.w	sl, #1
 800814c:	dc01      	bgt.n	8008152 <_printf_float+0x3b6>
 800814e:	07db      	lsls	r3, r3, #31
 8008150:	d536      	bpl.n	80081c0 <_printf_float+0x424>
 8008152:	2301      	movs	r3, #1
 8008154:	4642      	mov	r2, r8
 8008156:	4631      	mov	r1, r6
 8008158:	4628      	mov	r0, r5
 800815a:	47b8      	blx	r7
 800815c:	3001      	adds	r0, #1
 800815e:	f43f ae78 	beq.w	8007e52 <_printf_float+0xb6>
 8008162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008166:	4631      	mov	r1, r6
 8008168:	4628      	mov	r0, r5
 800816a:	47b8      	blx	r7
 800816c:	3001      	adds	r0, #1
 800816e:	f43f ae70 	beq.w	8007e52 <_printf_float+0xb6>
 8008172:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008176:	2200      	movs	r2, #0
 8008178:	2300      	movs	r3, #0
 800817a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800817e:	f7f8 fccb 	bl	8000b18 <__aeabi_dcmpeq>
 8008182:	b9c0      	cbnz	r0, 80081b6 <_printf_float+0x41a>
 8008184:	4653      	mov	r3, sl
 8008186:	f108 0201 	add.w	r2, r8, #1
 800818a:	4631      	mov	r1, r6
 800818c:	4628      	mov	r0, r5
 800818e:	47b8      	blx	r7
 8008190:	3001      	adds	r0, #1
 8008192:	d10c      	bne.n	80081ae <_printf_float+0x412>
 8008194:	e65d      	b.n	8007e52 <_printf_float+0xb6>
 8008196:	2301      	movs	r3, #1
 8008198:	465a      	mov	r2, fp
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	47b8      	blx	r7
 80081a0:	3001      	adds	r0, #1
 80081a2:	f43f ae56 	beq.w	8007e52 <_printf_float+0xb6>
 80081a6:	f108 0801 	add.w	r8, r8, #1
 80081aa:	45d0      	cmp	r8, sl
 80081ac:	dbf3      	blt.n	8008196 <_printf_float+0x3fa>
 80081ae:	464b      	mov	r3, r9
 80081b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80081b4:	e6df      	b.n	8007f76 <_printf_float+0x1da>
 80081b6:	f04f 0800 	mov.w	r8, #0
 80081ba:	f104 0b1a 	add.w	fp, r4, #26
 80081be:	e7f4      	b.n	80081aa <_printf_float+0x40e>
 80081c0:	2301      	movs	r3, #1
 80081c2:	4642      	mov	r2, r8
 80081c4:	e7e1      	b.n	800818a <_printf_float+0x3ee>
 80081c6:	2301      	movs	r3, #1
 80081c8:	464a      	mov	r2, r9
 80081ca:	4631      	mov	r1, r6
 80081cc:	4628      	mov	r0, r5
 80081ce:	47b8      	blx	r7
 80081d0:	3001      	adds	r0, #1
 80081d2:	f43f ae3e 	beq.w	8007e52 <_printf_float+0xb6>
 80081d6:	f108 0801 	add.w	r8, r8, #1
 80081da:	68e3      	ldr	r3, [r4, #12]
 80081dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80081de:	1a5b      	subs	r3, r3, r1
 80081e0:	4543      	cmp	r3, r8
 80081e2:	dcf0      	bgt.n	80081c6 <_printf_float+0x42a>
 80081e4:	e6fc      	b.n	8007fe0 <_printf_float+0x244>
 80081e6:	f04f 0800 	mov.w	r8, #0
 80081ea:	f104 0919 	add.w	r9, r4, #25
 80081ee:	e7f4      	b.n	80081da <_printf_float+0x43e>

080081f0 <_printf_common>:
 80081f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081f4:	4616      	mov	r6, r2
 80081f6:	4698      	mov	r8, r3
 80081f8:	688a      	ldr	r2, [r1, #8]
 80081fa:	690b      	ldr	r3, [r1, #16]
 80081fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008200:	4293      	cmp	r3, r2
 8008202:	bfb8      	it	lt
 8008204:	4613      	movlt	r3, r2
 8008206:	6033      	str	r3, [r6, #0]
 8008208:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800820c:	4607      	mov	r7, r0
 800820e:	460c      	mov	r4, r1
 8008210:	b10a      	cbz	r2, 8008216 <_printf_common+0x26>
 8008212:	3301      	adds	r3, #1
 8008214:	6033      	str	r3, [r6, #0]
 8008216:	6823      	ldr	r3, [r4, #0]
 8008218:	0699      	lsls	r1, r3, #26
 800821a:	bf42      	ittt	mi
 800821c:	6833      	ldrmi	r3, [r6, #0]
 800821e:	3302      	addmi	r3, #2
 8008220:	6033      	strmi	r3, [r6, #0]
 8008222:	6825      	ldr	r5, [r4, #0]
 8008224:	f015 0506 	ands.w	r5, r5, #6
 8008228:	d106      	bne.n	8008238 <_printf_common+0x48>
 800822a:	f104 0a19 	add.w	sl, r4, #25
 800822e:	68e3      	ldr	r3, [r4, #12]
 8008230:	6832      	ldr	r2, [r6, #0]
 8008232:	1a9b      	subs	r3, r3, r2
 8008234:	42ab      	cmp	r3, r5
 8008236:	dc26      	bgt.n	8008286 <_printf_common+0x96>
 8008238:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800823c:	6822      	ldr	r2, [r4, #0]
 800823e:	3b00      	subs	r3, #0
 8008240:	bf18      	it	ne
 8008242:	2301      	movne	r3, #1
 8008244:	0692      	lsls	r2, r2, #26
 8008246:	d42b      	bmi.n	80082a0 <_printf_common+0xb0>
 8008248:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800824c:	4641      	mov	r1, r8
 800824e:	4638      	mov	r0, r7
 8008250:	47c8      	blx	r9
 8008252:	3001      	adds	r0, #1
 8008254:	d01e      	beq.n	8008294 <_printf_common+0xa4>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	6922      	ldr	r2, [r4, #16]
 800825a:	f003 0306 	and.w	r3, r3, #6
 800825e:	2b04      	cmp	r3, #4
 8008260:	bf02      	ittt	eq
 8008262:	68e5      	ldreq	r5, [r4, #12]
 8008264:	6833      	ldreq	r3, [r6, #0]
 8008266:	1aed      	subeq	r5, r5, r3
 8008268:	68a3      	ldr	r3, [r4, #8]
 800826a:	bf0c      	ite	eq
 800826c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008270:	2500      	movne	r5, #0
 8008272:	4293      	cmp	r3, r2
 8008274:	bfc4      	itt	gt
 8008276:	1a9b      	subgt	r3, r3, r2
 8008278:	18ed      	addgt	r5, r5, r3
 800827a:	2600      	movs	r6, #0
 800827c:	341a      	adds	r4, #26
 800827e:	42b5      	cmp	r5, r6
 8008280:	d11a      	bne.n	80082b8 <_printf_common+0xc8>
 8008282:	2000      	movs	r0, #0
 8008284:	e008      	b.n	8008298 <_printf_common+0xa8>
 8008286:	2301      	movs	r3, #1
 8008288:	4652      	mov	r2, sl
 800828a:	4641      	mov	r1, r8
 800828c:	4638      	mov	r0, r7
 800828e:	47c8      	blx	r9
 8008290:	3001      	adds	r0, #1
 8008292:	d103      	bne.n	800829c <_printf_common+0xac>
 8008294:	f04f 30ff 	mov.w	r0, #4294967295
 8008298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829c:	3501      	adds	r5, #1
 800829e:	e7c6      	b.n	800822e <_printf_common+0x3e>
 80082a0:	18e1      	adds	r1, r4, r3
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	2030      	movs	r0, #48	@ 0x30
 80082a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80082aa:	4422      	add	r2, r4
 80082ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80082b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80082b4:	3302      	adds	r3, #2
 80082b6:	e7c7      	b.n	8008248 <_printf_common+0x58>
 80082b8:	2301      	movs	r3, #1
 80082ba:	4622      	mov	r2, r4
 80082bc:	4641      	mov	r1, r8
 80082be:	4638      	mov	r0, r7
 80082c0:	47c8      	blx	r9
 80082c2:	3001      	adds	r0, #1
 80082c4:	d0e6      	beq.n	8008294 <_printf_common+0xa4>
 80082c6:	3601      	adds	r6, #1
 80082c8:	e7d9      	b.n	800827e <_printf_common+0x8e>
	...

080082cc <_printf_i>:
 80082cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082d0:	7e0f      	ldrb	r7, [r1, #24]
 80082d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80082d4:	2f78      	cmp	r7, #120	@ 0x78
 80082d6:	4691      	mov	r9, r2
 80082d8:	4680      	mov	r8, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	469a      	mov	sl, r3
 80082de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80082e2:	d807      	bhi.n	80082f4 <_printf_i+0x28>
 80082e4:	2f62      	cmp	r7, #98	@ 0x62
 80082e6:	d80a      	bhi.n	80082fe <_printf_i+0x32>
 80082e8:	2f00      	cmp	r7, #0
 80082ea:	f000 80d2 	beq.w	8008492 <_printf_i+0x1c6>
 80082ee:	2f58      	cmp	r7, #88	@ 0x58
 80082f0:	f000 80b9 	beq.w	8008466 <_printf_i+0x19a>
 80082f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80082f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80082fc:	e03a      	b.n	8008374 <_printf_i+0xa8>
 80082fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008302:	2b15      	cmp	r3, #21
 8008304:	d8f6      	bhi.n	80082f4 <_printf_i+0x28>
 8008306:	a101      	add	r1, pc, #4	@ (adr r1, 800830c <_printf_i+0x40>)
 8008308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800830c:	08008365 	.word	0x08008365
 8008310:	08008379 	.word	0x08008379
 8008314:	080082f5 	.word	0x080082f5
 8008318:	080082f5 	.word	0x080082f5
 800831c:	080082f5 	.word	0x080082f5
 8008320:	080082f5 	.word	0x080082f5
 8008324:	08008379 	.word	0x08008379
 8008328:	080082f5 	.word	0x080082f5
 800832c:	080082f5 	.word	0x080082f5
 8008330:	080082f5 	.word	0x080082f5
 8008334:	080082f5 	.word	0x080082f5
 8008338:	08008479 	.word	0x08008479
 800833c:	080083a3 	.word	0x080083a3
 8008340:	08008433 	.word	0x08008433
 8008344:	080082f5 	.word	0x080082f5
 8008348:	080082f5 	.word	0x080082f5
 800834c:	0800849b 	.word	0x0800849b
 8008350:	080082f5 	.word	0x080082f5
 8008354:	080083a3 	.word	0x080083a3
 8008358:	080082f5 	.word	0x080082f5
 800835c:	080082f5 	.word	0x080082f5
 8008360:	0800843b 	.word	0x0800843b
 8008364:	6833      	ldr	r3, [r6, #0]
 8008366:	1d1a      	adds	r2, r3, #4
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6032      	str	r2, [r6, #0]
 800836c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008370:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008374:	2301      	movs	r3, #1
 8008376:	e09d      	b.n	80084b4 <_printf_i+0x1e8>
 8008378:	6833      	ldr	r3, [r6, #0]
 800837a:	6820      	ldr	r0, [r4, #0]
 800837c:	1d19      	adds	r1, r3, #4
 800837e:	6031      	str	r1, [r6, #0]
 8008380:	0606      	lsls	r6, r0, #24
 8008382:	d501      	bpl.n	8008388 <_printf_i+0xbc>
 8008384:	681d      	ldr	r5, [r3, #0]
 8008386:	e003      	b.n	8008390 <_printf_i+0xc4>
 8008388:	0645      	lsls	r5, r0, #25
 800838a:	d5fb      	bpl.n	8008384 <_printf_i+0xb8>
 800838c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008390:	2d00      	cmp	r5, #0
 8008392:	da03      	bge.n	800839c <_printf_i+0xd0>
 8008394:	232d      	movs	r3, #45	@ 0x2d
 8008396:	426d      	negs	r5, r5
 8008398:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800839c:	4859      	ldr	r0, [pc, #356]	@ (8008504 <_printf_i+0x238>)
 800839e:	230a      	movs	r3, #10
 80083a0:	e011      	b.n	80083c6 <_printf_i+0xfa>
 80083a2:	6821      	ldr	r1, [r4, #0]
 80083a4:	6833      	ldr	r3, [r6, #0]
 80083a6:	0608      	lsls	r0, r1, #24
 80083a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80083ac:	d402      	bmi.n	80083b4 <_printf_i+0xe8>
 80083ae:	0649      	lsls	r1, r1, #25
 80083b0:	bf48      	it	mi
 80083b2:	b2ad      	uxthmi	r5, r5
 80083b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80083b6:	4853      	ldr	r0, [pc, #332]	@ (8008504 <_printf_i+0x238>)
 80083b8:	6033      	str	r3, [r6, #0]
 80083ba:	bf14      	ite	ne
 80083bc:	230a      	movne	r3, #10
 80083be:	2308      	moveq	r3, #8
 80083c0:	2100      	movs	r1, #0
 80083c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80083c6:	6866      	ldr	r6, [r4, #4]
 80083c8:	60a6      	str	r6, [r4, #8]
 80083ca:	2e00      	cmp	r6, #0
 80083cc:	bfa2      	ittt	ge
 80083ce:	6821      	ldrge	r1, [r4, #0]
 80083d0:	f021 0104 	bicge.w	r1, r1, #4
 80083d4:	6021      	strge	r1, [r4, #0]
 80083d6:	b90d      	cbnz	r5, 80083dc <_printf_i+0x110>
 80083d8:	2e00      	cmp	r6, #0
 80083da:	d04b      	beq.n	8008474 <_printf_i+0x1a8>
 80083dc:	4616      	mov	r6, r2
 80083de:	fbb5 f1f3 	udiv	r1, r5, r3
 80083e2:	fb03 5711 	mls	r7, r3, r1, r5
 80083e6:	5dc7      	ldrb	r7, [r0, r7]
 80083e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80083ec:	462f      	mov	r7, r5
 80083ee:	42bb      	cmp	r3, r7
 80083f0:	460d      	mov	r5, r1
 80083f2:	d9f4      	bls.n	80083de <_printf_i+0x112>
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d10b      	bne.n	8008410 <_printf_i+0x144>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	07df      	lsls	r7, r3, #31
 80083fc:	d508      	bpl.n	8008410 <_printf_i+0x144>
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	6861      	ldr	r1, [r4, #4]
 8008402:	4299      	cmp	r1, r3
 8008404:	bfde      	ittt	le
 8008406:	2330      	movle	r3, #48	@ 0x30
 8008408:	f806 3c01 	strble.w	r3, [r6, #-1]
 800840c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008410:	1b92      	subs	r2, r2, r6
 8008412:	6122      	str	r2, [r4, #16]
 8008414:	f8cd a000 	str.w	sl, [sp]
 8008418:	464b      	mov	r3, r9
 800841a:	aa03      	add	r2, sp, #12
 800841c:	4621      	mov	r1, r4
 800841e:	4640      	mov	r0, r8
 8008420:	f7ff fee6 	bl	80081f0 <_printf_common>
 8008424:	3001      	adds	r0, #1
 8008426:	d14a      	bne.n	80084be <_printf_i+0x1f2>
 8008428:	f04f 30ff 	mov.w	r0, #4294967295
 800842c:	b004      	add	sp, #16
 800842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008432:	6823      	ldr	r3, [r4, #0]
 8008434:	f043 0320 	orr.w	r3, r3, #32
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	4833      	ldr	r0, [pc, #204]	@ (8008508 <_printf_i+0x23c>)
 800843c:	2778      	movs	r7, #120	@ 0x78
 800843e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	6831      	ldr	r1, [r6, #0]
 8008446:	061f      	lsls	r7, r3, #24
 8008448:	f851 5b04 	ldr.w	r5, [r1], #4
 800844c:	d402      	bmi.n	8008454 <_printf_i+0x188>
 800844e:	065f      	lsls	r7, r3, #25
 8008450:	bf48      	it	mi
 8008452:	b2ad      	uxthmi	r5, r5
 8008454:	6031      	str	r1, [r6, #0]
 8008456:	07d9      	lsls	r1, r3, #31
 8008458:	bf44      	itt	mi
 800845a:	f043 0320 	orrmi.w	r3, r3, #32
 800845e:	6023      	strmi	r3, [r4, #0]
 8008460:	b11d      	cbz	r5, 800846a <_printf_i+0x19e>
 8008462:	2310      	movs	r3, #16
 8008464:	e7ac      	b.n	80083c0 <_printf_i+0xf4>
 8008466:	4827      	ldr	r0, [pc, #156]	@ (8008504 <_printf_i+0x238>)
 8008468:	e7e9      	b.n	800843e <_printf_i+0x172>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	f023 0320 	bic.w	r3, r3, #32
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	e7f6      	b.n	8008462 <_printf_i+0x196>
 8008474:	4616      	mov	r6, r2
 8008476:	e7bd      	b.n	80083f4 <_printf_i+0x128>
 8008478:	6833      	ldr	r3, [r6, #0]
 800847a:	6825      	ldr	r5, [r4, #0]
 800847c:	6961      	ldr	r1, [r4, #20]
 800847e:	1d18      	adds	r0, r3, #4
 8008480:	6030      	str	r0, [r6, #0]
 8008482:	062e      	lsls	r6, r5, #24
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	d501      	bpl.n	800848c <_printf_i+0x1c0>
 8008488:	6019      	str	r1, [r3, #0]
 800848a:	e002      	b.n	8008492 <_printf_i+0x1c6>
 800848c:	0668      	lsls	r0, r5, #25
 800848e:	d5fb      	bpl.n	8008488 <_printf_i+0x1bc>
 8008490:	8019      	strh	r1, [r3, #0]
 8008492:	2300      	movs	r3, #0
 8008494:	6123      	str	r3, [r4, #16]
 8008496:	4616      	mov	r6, r2
 8008498:	e7bc      	b.n	8008414 <_printf_i+0x148>
 800849a:	6833      	ldr	r3, [r6, #0]
 800849c:	1d1a      	adds	r2, r3, #4
 800849e:	6032      	str	r2, [r6, #0]
 80084a0:	681e      	ldr	r6, [r3, #0]
 80084a2:	6862      	ldr	r2, [r4, #4]
 80084a4:	2100      	movs	r1, #0
 80084a6:	4630      	mov	r0, r6
 80084a8:	f7f7 feba 	bl	8000220 <memchr>
 80084ac:	b108      	cbz	r0, 80084b2 <_printf_i+0x1e6>
 80084ae:	1b80      	subs	r0, r0, r6
 80084b0:	6060      	str	r0, [r4, #4]
 80084b2:	6863      	ldr	r3, [r4, #4]
 80084b4:	6123      	str	r3, [r4, #16]
 80084b6:	2300      	movs	r3, #0
 80084b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084bc:	e7aa      	b.n	8008414 <_printf_i+0x148>
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	4632      	mov	r2, r6
 80084c2:	4649      	mov	r1, r9
 80084c4:	4640      	mov	r0, r8
 80084c6:	47d0      	blx	sl
 80084c8:	3001      	adds	r0, #1
 80084ca:	d0ad      	beq.n	8008428 <_printf_i+0x15c>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	079b      	lsls	r3, r3, #30
 80084d0:	d413      	bmi.n	80084fa <_printf_i+0x22e>
 80084d2:	68e0      	ldr	r0, [r4, #12]
 80084d4:	9b03      	ldr	r3, [sp, #12]
 80084d6:	4298      	cmp	r0, r3
 80084d8:	bfb8      	it	lt
 80084da:	4618      	movlt	r0, r3
 80084dc:	e7a6      	b.n	800842c <_printf_i+0x160>
 80084de:	2301      	movs	r3, #1
 80084e0:	4632      	mov	r2, r6
 80084e2:	4649      	mov	r1, r9
 80084e4:	4640      	mov	r0, r8
 80084e6:	47d0      	blx	sl
 80084e8:	3001      	adds	r0, #1
 80084ea:	d09d      	beq.n	8008428 <_printf_i+0x15c>
 80084ec:	3501      	adds	r5, #1
 80084ee:	68e3      	ldr	r3, [r4, #12]
 80084f0:	9903      	ldr	r1, [sp, #12]
 80084f2:	1a5b      	subs	r3, r3, r1
 80084f4:	42ab      	cmp	r3, r5
 80084f6:	dcf2      	bgt.n	80084de <_printf_i+0x212>
 80084f8:	e7eb      	b.n	80084d2 <_printf_i+0x206>
 80084fa:	2500      	movs	r5, #0
 80084fc:	f104 0619 	add.w	r6, r4, #25
 8008500:	e7f5      	b.n	80084ee <_printf_i+0x222>
 8008502:	bf00      	nop
 8008504:	0800c39a 	.word	0x0800c39a
 8008508:	0800c3ab 	.word	0x0800c3ab

0800850c <_scanf_float>:
 800850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	b087      	sub	sp, #28
 8008512:	4617      	mov	r7, r2
 8008514:	9303      	str	r3, [sp, #12]
 8008516:	688b      	ldr	r3, [r1, #8]
 8008518:	1e5a      	subs	r2, r3, #1
 800851a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800851e:	bf81      	itttt	hi
 8008520:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008524:	eb03 0b05 	addhi.w	fp, r3, r5
 8008528:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800852c:	608b      	strhi	r3, [r1, #8]
 800852e:	680b      	ldr	r3, [r1, #0]
 8008530:	460a      	mov	r2, r1
 8008532:	f04f 0500 	mov.w	r5, #0
 8008536:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800853a:	f842 3b1c 	str.w	r3, [r2], #28
 800853e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008542:	4680      	mov	r8, r0
 8008544:	460c      	mov	r4, r1
 8008546:	bf98      	it	ls
 8008548:	f04f 0b00 	movls.w	fp, #0
 800854c:	9201      	str	r2, [sp, #4]
 800854e:	4616      	mov	r6, r2
 8008550:	46aa      	mov	sl, r5
 8008552:	46a9      	mov	r9, r5
 8008554:	9502      	str	r5, [sp, #8]
 8008556:	68a2      	ldr	r2, [r4, #8]
 8008558:	b152      	cbz	r2, 8008570 <_scanf_float+0x64>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008560:	d864      	bhi.n	800862c <_scanf_float+0x120>
 8008562:	2b40      	cmp	r3, #64	@ 0x40
 8008564:	d83c      	bhi.n	80085e0 <_scanf_float+0xd4>
 8008566:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800856a:	b2c8      	uxtb	r0, r1
 800856c:	280e      	cmp	r0, #14
 800856e:	d93a      	bls.n	80085e6 <_scanf_float+0xda>
 8008570:	f1b9 0f00 	cmp.w	r9, #0
 8008574:	d003      	beq.n	800857e <_scanf_float+0x72>
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008582:	f1ba 0f01 	cmp.w	sl, #1
 8008586:	f200 8117 	bhi.w	80087b8 <_scanf_float+0x2ac>
 800858a:	9b01      	ldr	r3, [sp, #4]
 800858c:	429e      	cmp	r6, r3
 800858e:	f200 8108 	bhi.w	80087a2 <_scanf_float+0x296>
 8008592:	2001      	movs	r0, #1
 8008594:	b007      	add	sp, #28
 8008596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800859a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800859e:	2a0d      	cmp	r2, #13
 80085a0:	d8e6      	bhi.n	8008570 <_scanf_float+0x64>
 80085a2:	a101      	add	r1, pc, #4	@ (adr r1, 80085a8 <_scanf_float+0x9c>)
 80085a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80085a8:	080086ef 	.word	0x080086ef
 80085ac:	08008571 	.word	0x08008571
 80085b0:	08008571 	.word	0x08008571
 80085b4:	08008571 	.word	0x08008571
 80085b8:	0800874f 	.word	0x0800874f
 80085bc:	08008727 	.word	0x08008727
 80085c0:	08008571 	.word	0x08008571
 80085c4:	08008571 	.word	0x08008571
 80085c8:	080086fd 	.word	0x080086fd
 80085cc:	08008571 	.word	0x08008571
 80085d0:	08008571 	.word	0x08008571
 80085d4:	08008571 	.word	0x08008571
 80085d8:	08008571 	.word	0x08008571
 80085dc:	080086b5 	.word	0x080086b5
 80085e0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80085e4:	e7db      	b.n	800859e <_scanf_float+0x92>
 80085e6:	290e      	cmp	r1, #14
 80085e8:	d8c2      	bhi.n	8008570 <_scanf_float+0x64>
 80085ea:	a001      	add	r0, pc, #4	@ (adr r0, 80085f0 <_scanf_float+0xe4>)
 80085ec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80085f0:	080086a5 	.word	0x080086a5
 80085f4:	08008571 	.word	0x08008571
 80085f8:	080086a5 	.word	0x080086a5
 80085fc:	0800873b 	.word	0x0800873b
 8008600:	08008571 	.word	0x08008571
 8008604:	0800864d 	.word	0x0800864d
 8008608:	0800868b 	.word	0x0800868b
 800860c:	0800868b 	.word	0x0800868b
 8008610:	0800868b 	.word	0x0800868b
 8008614:	0800868b 	.word	0x0800868b
 8008618:	0800868b 	.word	0x0800868b
 800861c:	0800868b 	.word	0x0800868b
 8008620:	0800868b 	.word	0x0800868b
 8008624:	0800868b 	.word	0x0800868b
 8008628:	0800868b 	.word	0x0800868b
 800862c:	2b6e      	cmp	r3, #110	@ 0x6e
 800862e:	d809      	bhi.n	8008644 <_scanf_float+0x138>
 8008630:	2b60      	cmp	r3, #96	@ 0x60
 8008632:	d8b2      	bhi.n	800859a <_scanf_float+0x8e>
 8008634:	2b54      	cmp	r3, #84	@ 0x54
 8008636:	d07b      	beq.n	8008730 <_scanf_float+0x224>
 8008638:	2b59      	cmp	r3, #89	@ 0x59
 800863a:	d199      	bne.n	8008570 <_scanf_float+0x64>
 800863c:	2d07      	cmp	r5, #7
 800863e:	d197      	bne.n	8008570 <_scanf_float+0x64>
 8008640:	2508      	movs	r5, #8
 8008642:	e02c      	b.n	800869e <_scanf_float+0x192>
 8008644:	2b74      	cmp	r3, #116	@ 0x74
 8008646:	d073      	beq.n	8008730 <_scanf_float+0x224>
 8008648:	2b79      	cmp	r3, #121	@ 0x79
 800864a:	e7f6      	b.n	800863a <_scanf_float+0x12e>
 800864c:	6821      	ldr	r1, [r4, #0]
 800864e:	05c8      	lsls	r0, r1, #23
 8008650:	d51b      	bpl.n	800868a <_scanf_float+0x17e>
 8008652:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008656:	6021      	str	r1, [r4, #0]
 8008658:	f109 0901 	add.w	r9, r9, #1
 800865c:	f1bb 0f00 	cmp.w	fp, #0
 8008660:	d003      	beq.n	800866a <_scanf_float+0x15e>
 8008662:	3201      	adds	r2, #1
 8008664:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008668:	60a2      	str	r2, [r4, #8]
 800866a:	68a3      	ldr	r3, [r4, #8]
 800866c:	3b01      	subs	r3, #1
 800866e:	60a3      	str	r3, [r4, #8]
 8008670:	6923      	ldr	r3, [r4, #16]
 8008672:	3301      	adds	r3, #1
 8008674:	6123      	str	r3, [r4, #16]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3b01      	subs	r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	607b      	str	r3, [r7, #4]
 800867e:	f340 8087 	ble.w	8008790 <_scanf_float+0x284>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	3301      	adds	r3, #1
 8008686:	603b      	str	r3, [r7, #0]
 8008688:	e765      	b.n	8008556 <_scanf_float+0x4a>
 800868a:	eb1a 0105 	adds.w	r1, sl, r5
 800868e:	f47f af6f 	bne.w	8008570 <_scanf_float+0x64>
 8008692:	6822      	ldr	r2, [r4, #0]
 8008694:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008698:	6022      	str	r2, [r4, #0]
 800869a:	460d      	mov	r5, r1
 800869c:	468a      	mov	sl, r1
 800869e:	f806 3b01 	strb.w	r3, [r6], #1
 80086a2:	e7e2      	b.n	800866a <_scanf_float+0x15e>
 80086a4:	6822      	ldr	r2, [r4, #0]
 80086a6:	0610      	lsls	r0, r2, #24
 80086a8:	f57f af62 	bpl.w	8008570 <_scanf_float+0x64>
 80086ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086b0:	6022      	str	r2, [r4, #0]
 80086b2:	e7f4      	b.n	800869e <_scanf_float+0x192>
 80086b4:	f1ba 0f00 	cmp.w	sl, #0
 80086b8:	d10e      	bne.n	80086d8 <_scanf_float+0x1cc>
 80086ba:	f1b9 0f00 	cmp.w	r9, #0
 80086be:	d10e      	bne.n	80086de <_scanf_float+0x1d2>
 80086c0:	6822      	ldr	r2, [r4, #0]
 80086c2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80086c6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80086ca:	d108      	bne.n	80086de <_scanf_float+0x1d2>
 80086cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80086d0:	6022      	str	r2, [r4, #0]
 80086d2:	f04f 0a01 	mov.w	sl, #1
 80086d6:	e7e2      	b.n	800869e <_scanf_float+0x192>
 80086d8:	f1ba 0f02 	cmp.w	sl, #2
 80086dc:	d055      	beq.n	800878a <_scanf_float+0x27e>
 80086de:	2d01      	cmp	r5, #1
 80086e0:	d002      	beq.n	80086e8 <_scanf_float+0x1dc>
 80086e2:	2d04      	cmp	r5, #4
 80086e4:	f47f af44 	bne.w	8008570 <_scanf_float+0x64>
 80086e8:	3501      	adds	r5, #1
 80086ea:	b2ed      	uxtb	r5, r5
 80086ec:	e7d7      	b.n	800869e <_scanf_float+0x192>
 80086ee:	f1ba 0f01 	cmp.w	sl, #1
 80086f2:	f47f af3d 	bne.w	8008570 <_scanf_float+0x64>
 80086f6:	f04f 0a02 	mov.w	sl, #2
 80086fa:	e7d0      	b.n	800869e <_scanf_float+0x192>
 80086fc:	b97d      	cbnz	r5, 800871e <_scanf_float+0x212>
 80086fe:	f1b9 0f00 	cmp.w	r9, #0
 8008702:	f47f af38 	bne.w	8008576 <_scanf_float+0x6a>
 8008706:	6822      	ldr	r2, [r4, #0]
 8008708:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800870c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008710:	f040 8108 	bne.w	8008924 <_scanf_float+0x418>
 8008714:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008718:	6022      	str	r2, [r4, #0]
 800871a:	2501      	movs	r5, #1
 800871c:	e7bf      	b.n	800869e <_scanf_float+0x192>
 800871e:	2d03      	cmp	r5, #3
 8008720:	d0e2      	beq.n	80086e8 <_scanf_float+0x1dc>
 8008722:	2d05      	cmp	r5, #5
 8008724:	e7de      	b.n	80086e4 <_scanf_float+0x1d8>
 8008726:	2d02      	cmp	r5, #2
 8008728:	f47f af22 	bne.w	8008570 <_scanf_float+0x64>
 800872c:	2503      	movs	r5, #3
 800872e:	e7b6      	b.n	800869e <_scanf_float+0x192>
 8008730:	2d06      	cmp	r5, #6
 8008732:	f47f af1d 	bne.w	8008570 <_scanf_float+0x64>
 8008736:	2507      	movs	r5, #7
 8008738:	e7b1      	b.n	800869e <_scanf_float+0x192>
 800873a:	6822      	ldr	r2, [r4, #0]
 800873c:	0591      	lsls	r1, r2, #22
 800873e:	f57f af17 	bpl.w	8008570 <_scanf_float+0x64>
 8008742:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008746:	6022      	str	r2, [r4, #0]
 8008748:	f8cd 9008 	str.w	r9, [sp, #8]
 800874c:	e7a7      	b.n	800869e <_scanf_float+0x192>
 800874e:	6822      	ldr	r2, [r4, #0]
 8008750:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008754:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008758:	d006      	beq.n	8008768 <_scanf_float+0x25c>
 800875a:	0550      	lsls	r0, r2, #21
 800875c:	f57f af08 	bpl.w	8008570 <_scanf_float+0x64>
 8008760:	f1b9 0f00 	cmp.w	r9, #0
 8008764:	f000 80de 	beq.w	8008924 <_scanf_float+0x418>
 8008768:	0591      	lsls	r1, r2, #22
 800876a:	bf58      	it	pl
 800876c:	9902      	ldrpl	r1, [sp, #8]
 800876e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008772:	bf58      	it	pl
 8008774:	eba9 0101 	subpl.w	r1, r9, r1
 8008778:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800877c:	bf58      	it	pl
 800877e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008782:	6022      	str	r2, [r4, #0]
 8008784:	f04f 0900 	mov.w	r9, #0
 8008788:	e789      	b.n	800869e <_scanf_float+0x192>
 800878a:	f04f 0a03 	mov.w	sl, #3
 800878e:	e786      	b.n	800869e <_scanf_float+0x192>
 8008790:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008794:	4639      	mov	r1, r7
 8008796:	4640      	mov	r0, r8
 8008798:	4798      	blx	r3
 800879a:	2800      	cmp	r0, #0
 800879c:	f43f aedb 	beq.w	8008556 <_scanf_float+0x4a>
 80087a0:	e6e6      	b.n	8008570 <_scanf_float+0x64>
 80087a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087aa:	463a      	mov	r2, r7
 80087ac:	4640      	mov	r0, r8
 80087ae:	4798      	blx	r3
 80087b0:	6923      	ldr	r3, [r4, #16]
 80087b2:	3b01      	subs	r3, #1
 80087b4:	6123      	str	r3, [r4, #16]
 80087b6:	e6e8      	b.n	800858a <_scanf_float+0x7e>
 80087b8:	1e6b      	subs	r3, r5, #1
 80087ba:	2b06      	cmp	r3, #6
 80087bc:	d824      	bhi.n	8008808 <_scanf_float+0x2fc>
 80087be:	2d02      	cmp	r5, #2
 80087c0:	d836      	bhi.n	8008830 <_scanf_float+0x324>
 80087c2:	9b01      	ldr	r3, [sp, #4]
 80087c4:	429e      	cmp	r6, r3
 80087c6:	f67f aee4 	bls.w	8008592 <_scanf_float+0x86>
 80087ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80087d2:	463a      	mov	r2, r7
 80087d4:	4640      	mov	r0, r8
 80087d6:	4798      	blx	r3
 80087d8:	6923      	ldr	r3, [r4, #16]
 80087da:	3b01      	subs	r3, #1
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	e7f0      	b.n	80087c2 <_scanf_float+0x2b6>
 80087e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80087e4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80087e8:	463a      	mov	r2, r7
 80087ea:	4640      	mov	r0, r8
 80087ec:	4798      	blx	r3
 80087ee:	6923      	ldr	r3, [r4, #16]
 80087f0:	3b01      	subs	r3, #1
 80087f2:	6123      	str	r3, [r4, #16]
 80087f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087f8:	fa5f fa8a 	uxtb.w	sl, sl
 80087fc:	f1ba 0f02 	cmp.w	sl, #2
 8008800:	d1ee      	bne.n	80087e0 <_scanf_float+0x2d4>
 8008802:	3d03      	subs	r5, #3
 8008804:	b2ed      	uxtb	r5, r5
 8008806:	1b76      	subs	r6, r6, r5
 8008808:	6823      	ldr	r3, [r4, #0]
 800880a:	05da      	lsls	r2, r3, #23
 800880c:	d530      	bpl.n	8008870 <_scanf_float+0x364>
 800880e:	055b      	lsls	r3, r3, #21
 8008810:	d511      	bpl.n	8008836 <_scanf_float+0x32a>
 8008812:	9b01      	ldr	r3, [sp, #4]
 8008814:	429e      	cmp	r6, r3
 8008816:	f67f aebc 	bls.w	8008592 <_scanf_float+0x86>
 800881a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800881e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008822:	463a      	mov	r2, r7
 8008824:	4640      	mov	r0, r8
 8008826:	4798      	blx	r3
 8008828:	6923      	ldr	r3, [r4, #16]
 800882a:	3b01      	subs	r3, #1
 800882c:	6123      	str	r3, [r4, #16]
 800882e:	e7f0      	b.n	8008812 <_scanf_float+0x306>
 8008830:	46aa      	mov	sl, r5
 8008832:	46b3      	mov	fp, r6
 8008834:	e7de      	b.n	80087f4 <_scanf_float+0x2e8>
 8008836:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	2965      	cmp	r1, #101	@ 0x65
 800883e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008842:	f106 35ff 	add.w	r5, r6, #4294967295
 8008846:	6123      	str	r3, [r4, #16]
 8008848:	d00c      	beq.n	8008864 <_scanf_float+0x358>
 800884a:	2945      	cmp	r1, #69	@ 0x45
 800884c:	d00a      	beq.n	8008864 <_scanf_float+0x358>
 800884e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008852:	463a      	mov	r2, r7
 8008854:	4640      	mov	r0, r8
 8008856:	4798      	blx	r3
 8008858:	6923      	ldr	r3, [r4, #16]
 800885a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800885e:	3b01      	subs	r3, #1
 8008860:	1eb5      	subs	r5, r6, #2
 8008862:	6123      	str	r3, [r4, #16]
 8008864:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008868:	463a      	mov	r2, r7
 800886a:	4640      	mov	r0, r8
 800886c:	4798      	blx	r3
 800886e:	462e      	mov	r6, r5
 8008870:	6822      	ldr	r2, [r4, #0]
 8008872:	f012 0210 	ands.w	r2, r2, #16
 8008876:	d001      	beq.n	800887c <_scanf_float+0x370>
 8008878:	2000      	movs	r0, #0
 800887a:	e68b      	b.n	8008594 <_scanf_float+0x88>
 800887c:	7032      	strb	r2, [r6, #0]
 800887e:	6823      	ldr	r3, [r4, #0]
 8008880:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008884:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008888:	d11c      	bne.n	80088c4 <_scanf_float+0x3b8>
 800888a:	9b02      	ldr	r3, [sp, #8]
 800888c:	454b      	cmp	r3, r9
 800888e:	eba3 0209 	sub.w	r2, r3, r9
 8008892:	d123      	bne.n	80088dc <_scanf_float+0x3d0>
 8008894:	9901      	ldr	r1, [sp, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	4640      	mov	r0, r8
 800889a:	f002 fc05 	bl	800b0a8 <_strtod_r>
 800889e:	9b03      	ldr	r3, [sp, #12]
 80088a0:	6821      	ldr	r1, [r4, #0]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f011 0f02 	tst.w	r1, #2
 80088a8:	ec57 6b10 	vmov	r6, r7, d0
 80088ac:	f103 0204 	add.w	r2, r3, #4
 80088b0:	d01f      	beq.n	80088f2 <_scanf_float+0x3e6>
 80088b2:	9903      	ldr	r1, [sp, #12]
 80088b4:	600a      	str	r2, [r1, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	e9c3 6700 	strd	r6, r7, [r3]
 80088bc:	68e3      	ldr	r3, [r4, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60e3      	str	r3, [r4, #12]
 80088c2:	e7d9      	b.n	8008878 <_scanf_float+0x36c>
 80088c4:	9b04      	ldr	r3, [sp, #16]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0e4      	beq.n	8008894 <_scanf_float+0x388>
 80088ca:	9905      	ldr	r1, [sp, #20]
 80088cc:	230a      	movs	r3, #10
 80088ce:	3101      	adds	r1, #1
 80088d0:	4640      	mov	r0, r8
 80088d2:	f002 fc69 	bl	800b1a8 <_strtol_r>
 80088d6:	9b04      	ldr	r3, [sp, #16]
 80088d8:	9e05      	ldr	r6, [sp, #20]
 80088da:	1ac2      	subs	r2, r0, r3
 80088dc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80088e0:	429e      	cmp	r6, r3
 80088e2:	bf28      	it	cs
 80088e4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80088e8:	4910      	ldr	r1, [pc, #64]	@ (800892c <_scanf_float+0x420>)
 80088ea:	4630      	mov	r0, r6
 80088ec:	f000 f8e4 	bl	8008ab8 <siprintf>
 80088f0:	e7d0      	b.n	8008894 <_scanf_float+0x388>
 80088f2:	f011 0f04 	tst.w	r1, #4
 80088f6:	9903      	ldr	r1, [sp, #12]
 80088f8:	600a      	str	r2, [r1, #0]
 80088fa:	d1dc      	bne.n	80088b6 <_scanf_float+0x3aa>
 80088fc:	681d      	ldr	r5, [r3, #0]
 80088fe:	4632      	mov	r2, r6
 8008900:	463b      	mov	r3, r7
 8008902:	4630      	mov	r0, r6
 8008904:	4639      	mov	r1, r7
 8008906:	f7f8 f939 	bl	8000b7c <__aeabi_dcmpun>
 800890a:	b128      	cbz	r0, 8008918 <_scanf_float+0x40c>
 800890c:	4808      	ldr	r0, [pc, #32]	@ (8008930 <_scanf_float+0x424>)
 800890e:	f000 f9c5 	bl	8008c9c <nanf>
 8008912:	ed85 0a00 	vstr	s0, [r5]
 8008916:	e7d1      	b.n	80088bc <_scanf_float+0x3b0>
 8008918:	4630      	mov	r0, r6
 800891a:	4639      	mov	r1, r7
 800891c:	f7f8 f98c 	bl	8000c38 <__aeabi_d2f>
 8008920:	6028      	str	r0, [r5, #0]
 8008922:	e7cb      	b.n	80088bc <_scanf_float+0x3b0>
 8008924:	f04f 0900 	mov.w	r9, #0
 8008928:	e629      	b.n	800857e <_scanf_float+0x72>
 800892a:	bf00      	nop
 800892c:	0800c3bc 	.word	0x0800c3bc
 8008930:	0800c755 	.word	0x0800c755

08008934 <std>:
 8008934:	2300      	movs	r3, #0
 8008936:	b510      	push	{r4, lr}
 8008938:	4604      	mov	r4, r0
 800893a:	e9c0 3300 	strd	r3, r3, [r0]
 800893e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008942:	6083      	str	r3, [r0, #8]
 8008944:	8181      	strh	r1, [r0, #12]
 8008946:	6643      	str	r3, [r0, #100]	@ 0x64
 8008948:	81c2      	strh	r2, [r0, #14]
 800894a:	6183      	str	r3, [r0, #24]
 800894c:	4619      	mov	r1, r3
 800894e:	2208      	movs	r2, #8
 8008950:	305c      	adds	r0, #92	@ 0x5c
 8008952:	f000 f914 	bl	8008b7e <memset>
 8008956:	4b0d      	ldr	r3, [pc, #52]	@ (800898c <std+0x58>)
 8008958:	6263      	str	r3, [r4, #36]	@ 0x24
 800895a:	4b0d      	ldr	r3, [pc, #52]	@ (8008990 <std+0x5c>)
 800895c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800895e:	4b0d      	ldr	r3, [pc, #52]	@ (8008994 <std+0x60>)
 8008960:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008962:	4b0d      	ldr	r3, [pc, #52]	@ (8008998 <std+0x64>)
 8008964:	6323      	str	r3, [r4, #48]	@ 0x30
 8008966:	4b0d      	ldr	r3, [pc, #52]	@ (800899c <std+0x68>)
 8008968:	6224      	str	r4, [r4, #32]
 800896a:	429c      	cmp	r4, r3
 800896c:	d006      	beq.n	800897c <std+0x48>
 800896e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008972:	4294      	cmp	r4, r2
 8008974:	d002      	beq.n	800897c <std+0x48>
 8008976:	33d0      	adds	r3, #208	@ 0xd0
 8008978:	429c      	cmp	r4, r3
 800897a:	d105      	bne.n	8008988 <std+0x54>
 800897c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008984:	f000 b978 	b.w	8008c78 <__retarget_lock_init_recursive>
 8008988:	bd10      	pop	{r4, pc}
 800898a:	bf00      	nop
 800898c:	08008af9 	.word	0x08008af9
 8008990:	08008b1b 	.word	0x08008b1b
 8008994:	08008b53 	.word	0x08008b53
 8008998:	08008b77 	.word	0x08008b77
 800899c:	20000730 	.word	0x20000730

080089a0 <stdio_exit_handler>:
 80089a0:	4a02      	ldr	r2, [pc, #8]	@ (80089ac <stdio_exit_handler+0xc>)
 80089a2:	4903      	ldr	r1, [pc, #12]	@ (80089b0 <stdio_exit_handler+0x10>)
 80089a4:	4803      	ldr	r0, [pc, #12]	@ (80089b4 <stdio_exit_handler+0x14>)
 80089a6:	f000 b869 	b.w	8008a7c <_fwalk_sglue>
 80089aa:	bf00      	nop
 80089ac:	20000008 	.word	0x20000008
 80089b0:	0800b565 	.word	0x0800b565
 80089b4:	20000018 	.word	0x20000018

080089b8 <cleanup_stdio>:
 80089b8:	6841      	ldr	r1, [r0, #4]
 80089ba:	4b0c      	ldr	r3, [pc, #48]	@ (80089ec <cleanup_stdio+0x34>)
 80089bc:	4299      	cmp	r1, r3
 80089be:	b510      	push	{r4, lr}
 80089c0:	4604      	mov	r4, r0
 80089c2:	d001      	beq.n	80089c8 <cleanup_stdio+0x10>
 80089c4:	f002 fdce 	bl	800b564 <_fflush_r>
 80089c8:	68a1      	ldr	r1, [r4, #8]
 80089ca:	4b09      	ldr	r3, [pc, #36]	@ (80089f0 <cleanup_stdio+0x38>)
 80089cc:	4299      	cmp	r1, r3
 80089ce:	d002      	beq.n	80089d6 <cleanup_stdio+0x1e>
 80089d0:	4620      	mov	r0, r4
 80089d2:	f002 fdc7 	bl	800b564 <_fflush_r>
 80089d6:	68e1      	ldr	r1, [r4, #12]
 80089d8:	4b06      	ldr	r3, [pc, #24]	@ (80089f4 <cleanup_stdio+0x3c>)
 80089da:	4299      	cmp	r1, r3
 80089dc:	d004      	beq.n	80089e8 <cleanup_stdio+0x30>
 80089de:	4620      	mov	r0, r4
 80089e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089e4:	f002 bdbe 	b.w	800b564 <_fflush_r>
 80089e8:	bd10      	pop	{r4, pc}
 80089ea:	bf00      	nop
 80089ec:	20000730 	.word	0x20000730
 80089f0:	20000798 	.word	0x20000798
 80089f4:	20000800 	.word	0x20000800

080089f8 <global_stdio_init.part.0>:
 80089f8:	b510      	push	{r4, lr}
 80089fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008a28 <global_stdio_init.part.0+0x30>)
 80089fc:	4c0b      	ldr	r4, [pc, #44]	@ (8008a2c <global_stdio_init.part.0+0x34>)
 80089fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008a30 <global_stdio_init.part.0+0x38>)
 8008a00:	601a      	str	r2, [r3, #0]
 8008a02:	4620      	mov	r0, r4
 8008a04:	2200      	movs	r2, #0
 8008a06:	2104      	movs	r1, #4
 8008a08:	f7ff ff94 	bl	8008934 <std>
 8008a0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a10:	2201      	movs	r2, #1
 8008a12:	2109      	movs	r1, #9
 8008a14:	f7ff ff8e 	bl	8008934 <std>
 8008a18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a1c:	2202      	movs	r2, #2
 8008a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a22:	2112      	movs	r1, #18
 8008a24:	f7ff bf86 	b.w	8008934 <std>
 8008a28:	20000868 	.word	0x20000868
 8008a2c:	20000730 	.word	0x20000730
 8008a30:	080089a1 	.word	0x080089a1

08008a34 <__sfp_lock_acquire>:
 8008a34:	4801      	ldr	r0, [pc, #4]	@ (8008a3c <__sfp_lock_acquire+0x8>)
 8008a36:	f000 b920 	b.w	8008c7a <__retarget_lock_acquire_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	20000871 	.word	0x20000871

08008a40 <__sfp_lock_release>:
 8008a40:	4801      	ldr	r0, [pc, #4]	@ (8008a48 <__sfp_lock_release+0x8>)
 8008a42:	f000 b91b 	b.w	8008c7c <__retarget_lock_release_recursive>
 8008a46:	bf00      	nop
 8008a48:	20000871 	.word	0x20000871

08008a4c <__sinit>:
 8008a4c:	b510      	push	{r4, lr}
 8008a4e:	4604      	mov	r4, r0
 8008a50:	f7ff fff0 	bl	8008a34 <__sfp_lock_acquire>
 8008a54:	6a23      	ldr	r3, [r4, #32]
 8008a56:	b11b      	cbz	r3, 8008a60 <__sinit+0x14>
 8008a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a5c:	f7ff bff0 	b.w	8008a40 <__sfp_lock_release>
 8008a60:	4b04      	ldr	r3, [pc, #16]	@ (8008a74 <__sinit+0x28>)
 8008a62:	6223      	str	r3, [r4, #32]
 8008a64:	4b04      	ldr	r3, [pc, #16]	@ (8008a78 <__sinit+0x2c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d1f5      	bne.n	8008a58 <__sinit+0xc>
 8008a6c:	f7ff ffc4 	bl	80089f8 <global_stdio_init.part.0>
 8008a70:	e7f2      	b.n	8008a58 <__sinit+0xc>
 8008a72:	bf00      	nop
 8008a74:	080089b9 	.word	0x080089b9
 8008a78:	20000868 	.word	0x20000868

08008a7c <_fwalk_sglue>:
 8008a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a80:	4607      	mov	r7, r0
 8008a82:	4688      	mov	r8, r1
 8008a84:	4614      	mov	r4, r2
 8008a86:	2600      	movs	r6, #0
 8008a88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a8c:	f1b9 0901 	subs.w	r9, r9, #1
 8008a90:	d505      	bpl.n	8008a9e <_fwalk_sglue+0x22>
 8008a92:	6824      	ldr	r4, [r4, #0]
 8008a94:	2c00      	cmp	r4, #0
 8008a96:	d1f7      	bne.n	8008a88 <_fwalk_sglue+0xc>
 8008a98:	4630      	mov	r0, r6
 8008a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9e:	89ab      	ldrh	r3, [r5, #12]
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d907      	bls.n	8008ab4 <_fwalk_sglue+0x38>
 8008aa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	d003      	beq.n	8008ab4 <_fwalk_sglue+0x38>
 8008aac:	4629      	mov	r1, r5
 8008aae:	4638      	mov	r0, r7
 8008ab0:	47c0      	blx	r8
 8008ab2:	4306      	orrs	r6, r0
 8008ab4:	3568      	adds	r5, #104	@ 0x68
 8008ab6:	e7e9      	b.n	8008a8c <_fwalk_sglue+0x10>

08008ab8 <siprintf>:
 8008ab8:	b40e      	push	{r1, r2, r3}
 8008aba:	b500      	push	{lr}
 8008abc:	b09c      	sub	sp, #112	@ 0x70
 8008abe:	ab1d      	add	r3, sp, #116	@ 0x74
 8008ac0:	9002      	str	r0, [sp, #8]
 8008ac2:	9006      	str	r0, [sp, #24]
 8008ac4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ac8:	4809      	ldr	r0, [pc, #36]	@ (8008af0 <siprintf+0x38>)
 8008aca:	9107      	str	r1, [sp, #28]
 8008acc:	9104      	str	r1, [sp, #16]
 8008ace:	4909      	ldr	r1, [pc, #36]	@ (8008af4 <siprintf+0x3c>)
 8008ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ad4:	9105      	str	r1, [sp, #20]
 8008ad6:	6800      	ldr	r0, [r0, #0]
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	a902      	add	r1, sp, #8
 8008adc:	f002 fbc2 	bl	800b264 <_svfiprintf_r>
 8008ae0:	9b02      	ldr	r3, [sp, #8]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	b01c      	add	sp, #112	@ 0x70
 8008ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008aec:	b003      	add	sp, #12
 8008aee:	4770      	bx	lr
 8008af0:	20000014 	.word	0x20000014
 8008af4:	ffff0208 	.word	0xffff0208

08008af8 <__sread>:
 8008af8:	b510      	push	{r4, lr}
 8008afa:	460c      	mov	r4, r1
 8008afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b00:	f000 f86c 	bl	8008bdc <_read_r>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	bfab      	itete	ge
 8008b08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008b0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008b0c:	181b      	addge	r3, r3, r0
 8008b0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008b12:	bfac      	ite	ge
 8008b14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008b16:	81a3      	strhlt	r3, [r4, #12]
 8008b18:	bd10      	pop	{r4, pc}

08008b1a <__swrite>:
 8008b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b1e:	461f      	mov	r7, r3
 8008b20:	898b      	ldrh	r3, [r1, #12]
 8008b22:	05db      	lsls	r3, r3, #23
 8008b24:	4605      	mov	r5, r0
 8008b26:	460c      	mov	r4, r1
 8008b28:	4616      	mov	r6, r2
 8008b2a:	d505      	bpl.n	8008b38 <__swrite+0x1e>
 8008b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b30:	2302      	movs	r3, #2
 8008b32:	2200      	movs	r2, #0
 8008b34:	f000 f840 	bl	8008bb8 <_lseek_r>
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b42:	81a3      	strh	r3, [r4, #12]
 8008b44:	4632      	mov	r2, r6
 8008b46:	463b      	mov	r3, r7
 8008b48:	4628      	mov	r0, r5
 8008b4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4e:	f000 b857 	b.w	8008c00 <_write_r>

08008b52 <__sseek>:
 8008b52:	b510      	push	{r4, lr}
 8008b54:	460c      	mov	r4, r1
 8008b56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b5a:	f000 f82d 	bl	8008bb8 <_lseek_r>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	bf15      	itete	ne
 8008b64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008b66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008b6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008b6e:	81a3      	strheq	r3, [r4, #12]
 8008b70:	bf18      	it	ne
 8008b72:	81a3      	strhne	r3, [r4, #12]
 8008b74:	bd10      	pop	{r4, pc}

08008b76 <__sclose>:
 8008b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b7a:	f000 b80d 	b.w	8008b98 <_close_r>

08008b7e <memset>:
 8008b7e:	4402      	add	r2, r0
 8008b80:	4603      	mov	r3, r0
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d100      	bne.n	8008b88 <memset+0xa>
 8008b86:	4770      	bx	lr
 8008b88:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8c:	e7f9      	b.n	8008b82 <memset+0x4>
	...

08008b90 <_localeconv_r>:
 8008b90:	4800      	ldr	r0, [pc, #0]	@ (8008b94 <_localeconv_r+0x4>)
 8008b92:	4770      	bx	lr
 8008b94:	20000154 	.word	0x20000154

08008b98 <_close_r>:
 8008b98:	b538      	push	{r3, r4, r5, lr}
 8008b9a:	4d06      	ldr	r5, [pc, #24]	@ (8008bb4 <_close_r+0x1c>)
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	4608      	mov	r0, r1
 8008ba2:	602b      	str	r3, [r5, #0]
 8008ba4:	f7f9 fbba 	bl	800231c <_close>
 8008ba8:	1c43      	adds	r3, r0, #1
 8008baa:	d102      	bne.n	8008bb2 <_close_r+0x1a>
 8008bac:	682b      	ldr	r3, [r5, #0]
 8008bae:	b103      	cbz	r3, 8008bb2 <_close_r+0x1a>
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	bd38      	pop	{r3, r4, r5, pc}
 8008bb4:	2000086c 	.word	0x2000086c

08008bb8 <_lseek_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	4d07      	ldr	r5, [pc, #28]	@ (8008bd8 <_lseek_r+0x20>)
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	4608      	mov	r0, r1
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	602a      	str	r2, [r5, #0]
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	f7f9 fbcf 	bl	800236a <_lseek>
 8008bcc:	1c43      	adds	r3, r0, #1
 8008bce:	d102      	bne.n	8008bd6 <_lseek_r+0x1e>
 8008bd0:	682b      	ldr	r3, [r5, #0]
 8008bd2:	b103      	cbz	r3, 8008bd6 <_lseek_r+0x1e>
 8008bd4:	6023      	str	r3, [r4, #0]
 8008bd6:	bd38      	pop	{r3, r4, r5, pc}
 8008bd8:	2000086c 	.word	0x2000086c

08008bdc <_read_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d07      	ldr	r5, [pc, #28]	@ (8008bfc <_read_r+0x20>)
 8008be0:	4604      	mov	r4, r0
 8008be2:	4608      	mov	r0, r1
 8008be4:	4611      	mov	r1, r2
 8008be6:	2200      	movs	r2, #0
 8008be8:	602a      	str	r2, [r5, #0]
 8008bea:	461a      	mov	r2, r3
 8008bec:	f7f9 fb5d 	bl	80022aa <_read>
 8008bf0:	1c43      	adds	r3, r0, #1
 8008bf2:	d102      	bne.n	8008bfa <_read_r+0x1e>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b103      	cbz	r3, 8008bfa <_read_r+0x1e>
 8008bf8:	6023      	str	r3, [r4, #0]
 8008bfa:	bd38      	pop	{r3, r4, r5, pc}
 8008bfc:	2000086c 	.word	0x2000086c

08008c00 <_write_r>:
 8008c00:	b538      	push	{r3, r4, r5, lr}
 8008c02:	4d07      	ldr	r5, [pc, #28]	@ (8008c20 <_write_r+0x20>)
 8008c04:	4604      	mov	r4, r0
 8008c06:	4608      	mov	r0, r1
 8008c08:	4611      	mov	r1, r2
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	602a      	str	r2, [r5, #0]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	f7f9 fb68 	bl	80022e4 <_write>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d102      	bne.n	8008c1e <_write_r+0x1e>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	b103      	cbz	r3, 8008c1e <_write_r+0x1e>
 8008c1c:	6023      	str	r3, [r4, #0]
 8008c1e:	bd38      	pop	{r3, r4, r5, pc}
 8008c20:	2000086c 	.word	0x2000086c

08008c24 <__errno>:
 8008c24:	4b01      	ldr	r3, [pc, #4]	@ (8008c2c <__errno+0x8>)
 8008c26:	6818      	ldr	r0, [r3, #0]
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	20000014 	.word	0x20000014

08008c30 <__libc_init_array>:
 8008c30:	b570      	push	{r4, r5, r6, lr}
 8008c32:	4d0d      	ldr	r5, [pc, #52]	@ (8008c68 <__libc_init_array+0x38>)
 8008c34:	4c0d      	ldr	r4, [pc, #52]	@ (8008c6c <__libc_init_array+0x3c>)
 8008c36:	1b64      	subs	r4, r4, r5
 8008c38:	10a4      	asrs	r4, r4, #2
 8008c3a:	2600      	movs	r6, #0
 8008c3c:	42a6      	cmp	r6, r4
 8008c3e:	d109      	bne.n	8008c54 <__libc_init_array+0x24>
 8008c40:	4d0b      	ldr	r5, [pc, #44]	@ (8008c70 <__libc_init_array+0x40>)
 8008c42:	4c0c      	ldr	r4, [pc, #48]	@ (8008c74 <__libc_init_array+0x44>)
 8008c44:	f003 fb72 	bl	800c32c <_init>
 8008c48:	1b64      	subs	r4, r4, r5
 8008c4a:	10a4      	asrs	r4, r4, #2
 8008c4c:	2600      	movs	r6, #0
 8008c4e:	42a6      	cmp	r6, r4
 8008c50:	d105      	bne.n	8008c5e <__libc_init_array+0x2e>
 8008c52:	bd70      	pop	{r4, r5, r6, pc}
 8008c54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c58:	4798      	blx	r3
 8008c5a:	3601      	adds	r6, #1
 8008c5c:	e7ee      	b.n	8008c3c <__libc_init_array+0xc>
 8008c5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c62:	4798      	blx	r3
 8008c64:	3601      	adds	r6, #1
 8008c66:	e7f2      	b.n	8008c4e <__libc_init_array+0x1e>
 8008c68:	0800c7c0 	.word	0x0800c7c0
 8008c6c:	0800c7c0 	.word	0x0800c7c0
 8008c70:	0800c7c0 	.word	0x0800c7c0
 8008c74:	0800c7c4 	.word	0x0800c7c4

08008c78 <__retarget_lock_init_recursive>:
 8008c78:	4770      	bx	lr

08008c7a <__retarget_lock_acquire_recursive>:
 8008c7a:	4770      	bx	lr

08008c7c <__retarget_lock_release_recursive>:
 8008c7c:	4770      	bx	lr

08008c7e <memcpy>:
 8008c7e:	440a      	add	r2, r1
 8008c80:	4291      	cmp	r1, r2
 8008c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c86:	d100      	bne.n	8008c8a <memcpy+0xc>
 8008c88:	4770      	bx	lr
 8008c8a:	b510      	push	{r4, lr}
 8008c8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c94:	4291      	cmp	r1, r2
 8008c96:	d1f9      	bne.n	8008c8c <memcpy+0xe>
 8008c98:	bd10      	pop	{r4, pc}
	...

08008c9c <nanf>:
 8008c9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ca4 <nanf+0x8>
 8008ca0:	4770      	bx	lr
 8008ca2:	bf00      	nop
 8008ca4:	7fc00000 	.word	0x7fc00000

08008ca8 <quorem>:
 8008ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	6903      	ldr	r3, [r0, #16]
 8008cae:	690c      	ldr	r4, [r1, #16]
 8008cb0:	42a3      	cmp	r3, r4
 8008cb2:	4607      	mov	r7, r0
 8008cb4:	db7e      	blt.n	8008db4 <quorem+0x10c>
 8008cb6:	3c01      	subs	r4, #1
 8008cb8:	f101 0814 	add.w	r8, r1, #20
 8008cbc:	00a3      	lsls	r3, r4, #2
 8008cbe:	f100 0514 	add.w	r5, r0, #20
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cda:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cde:	d32e      	bcc.n	8008d3e <quorem+0x96>
 8008ce0:	f04f 0a00 	mov.w	sl, #0
 8008ce4:	46c4      	mov	ip, r8
 8008ce6:	46ae      	mov	lr, r5
 8008ce8:	46d3      	mov	fp, sl
 8008cea:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008cee:	b298      	uxth	r0, r3
 8008cf0:	fb06 a000 	mla	r0, r6, r0, sl
 8008cf4:	0c02      	lsrs	r2, r0, #16
 8008cf6:	0c1b      	lsrs	r3, r3, #16
 8008cf8:	fb06 2303 	mla	r3, r6, r3, r2
 8008cfc:	f8de 2000 	ldr.w	r2, [lr]
 8008d00:	b280      	uxth	r0, r0
 8008d02:	b292      	uxth	r2, r2
 8008d04:	1a12      	subs	r2, r2, r0
 8008d06:	445a      	add	r2, fp
 8008d08:	f8de 0000 	ldr.w	r0, [lr]
 8008d0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d16:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d1a:	b292      	uxth	r2, r2
 8008d1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d20:	45e1      	cmp	r9, ip
 8008d22:	f84e 2b04 	str.w	r2, [lr], #4
 8008d26:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d2a:	d2de      	bcs.n	8008cea <quorem+0x42>
 8008d2c:	9b00      	ldr	r3, [sp, #0]
 8008d2e:	58eb      	ldr	r3, [r5, r3]
 8008d30:	b92b      	cbnz	r3, 8008d3e <quorem+0x96>
 8008d32:	9b01      	ldr	r3, [sp, #4]
 8008d34:	3b04      	subs	r3, #4
 8008d36:	429d      	cmp	r5, r3
 8008d38:	461a      	mov	r2, r3
 8008d3a:	d32f      	bcc.n	8008d9c <quorem+0xf4>
 8008d3c:	613c      	str	r4, [r7, #16]
 8008d3e:	4638      	mov	r0, r7
 8008d40:	f001 f9c2 	bl	800a0c8 <__mcmp>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	db25      	blt.n	8008d94 <quorem+0xec>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d50:	f8d1 c000 	ldr.w	ip, [r1]
 8008d54:	fa1f fe82 	uxth.w	lr, r2
 8008d58:	fa1f f38c 	uxth.w	r3, ip
 8008d5c:	eba3 030e 	sub.w	r3, r3, lr
 8008d60:	4403      	add	r3, r0
 8008d62:	0c12      	lsrs	r2, r2, #16
 8008d64:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d68:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d72:	45c1      	cmp	r9, r8
 8008d74:	f841 3b04 	str.w	r3, [r1], #4
 8008d78:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d7c:	d2e6      	bcs.n	8008d4c <quorem+0xa4>
 8008d7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d86:	b922      	cbnz	r2, 8008d92 <quorem+0xea>
 8008d88:	3b04      	subs	r3, #4
 8008d8a:	429d      	cmp	r5, r3
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	d30b      	bcc.n	8008da8 <quorem+0x100>
 8008d90:	613c      	str	r4, [r7, #16]
 8008d92:	3601      	adds	r6, #1
 8008d94:	4630      	mov	r0, r6
 8008d96:	b003      	add	sp, #12
 8008d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9c:	6812      	ldr	r2, [r2, #0]
 8008d9e:	3b04      	subs	r3, #4
 8008da0:	2a00      	cmp	r2, #0
 8008da2:	d1cb      	bne.n	8008d3c <quorem+0x94>
 8008da4:	3c01      	subs	r4, #1
 8008da6:	e7c6      	b.n	8008d36 <quorem+0x8e>
 8008da8:	6812      	ldr	r2, [r2, #0]
 8008daa:	3b04      	subs	r3, #4
 8008dac:	2a00      	cmp	r2, #0
 8008dae:	d1ef      	bne.n	8008d90 <quorem+0xe8>
 8008db0:	3c01      	subs	r4, #1
 8008db2:	e7ea      	b.n	8008d8a <quorem+0xe2>
 8008db4:	2000      	movs	r0, #0
 8008db6:	e7ee      	b.n	8008d96 <quorem+0xee>

08008db8 <_dtoa_r>:
 8008db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dbc:	69c7      	ldr	r7, [r0, #28]
 8008dbe:	b099      	sub	sp, #100	@ 0x64
 8008dc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008dc4:	ec55 4b10 	vmov	r4, r5, d0
 8008dc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008dca:	9109      	str	r1, [sp, #36]	@ 0x24
 8008dcc:	4683      	mov	fp, r0
 8008dce:	920e      	str	r2, [sp, #56]	@ 0x38
 8008dd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008dd2:	b97f      	cbnz	r7, 8008df4 <_dtoa_r+0x3c>
 8008dd4:	2010      	movs	r0, #16
 8008dd6:	f000 fdfd 	bl	80099d4 <malloc>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	f8cb 001c 	str.w	r0, [fp, #28]
 8008de0:	b920      	cbnz	r0, 8008dec <_dtoa_r+0x34>
 8008de2:	4ba7      	ldr	r3, [pc, #668]	@ (8009080 <_dtoa_r+0x2c8>)
 8008de4:	21ef      	movs	r1, #239	@ 0xef
 8008de6:	48a7      	ldr	r0, [pc, #668]	@ (8009084 <_dtoa_r+0x2cc>)
 8008de8:	f002 fc2a 	bl	800b640 <__assert_func>
 8008dec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008df0:	6007      	str	r7, [r0, #0]
 8008df2:	60c7      	str	r7, [r0, #12]
 8008df4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008df8:	6819      	ldr	r1, [r3, #0]
 8008dfa:	b159      	cbz	r1, 8008e14 <_dtoa_r+0x5c>
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	604a      	str	r2, [r1, #4]
 8008e00:	2301      	movs	r3, #1
 8008e02:	4093      	lsls	r3, r2
 8008e04:	608b      	str	r3, [r1, #8]
 8008e06:	4658      	mov	r0, fp
 8008e08:	f000 feda 	bl	8009bc0 <_Bfree>
 8008e0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
 8008e14:	1e2b      	subs	r3, r5, #0
 8008e16:	bfb9      	ittee	lt
 8008e18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e1c:	9303      	strlt	r3, [sp, #12]
 8008e1e:	2300      	movge	r3, #0
 8008e20:	6033      	strge	r3, [r6, #0]
 8008e22:	9f03      	ldr	r7, [sp, #12]
 8008e24:	4b98      	ldr	r3, [pc, #608]	@ (8009088 <_dtoa_r+0x2d0>)
 8008e26:	bfbc      	itt	lt
 8008e28:	2201      	movlt	r2, #1
 8008e2a:	6032      	strlt	r2, [r6, #0]
 8008e2c:	43bb      	bics	r3, r7
 8008e2e:	d112      	bne.n	8008e56 <_dtoa_r+0x9e>
 8008e30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e3c:	4323      	orrs	r3, r4
 8008e3e:	f000 854d 	beq.w	80098dc <_dtoa_r+0xb24>
 8008e42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800909c <_dtoa_r+0x2e4>
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 854f 	beq.w	80098ec <_dtoa_r+0xb34>
 8008e4e:	f10a 0303 	add.w	r3, sl, #3
 8008e52:	f000 bd49 	b.w	80098e8 <_dtoa_r+0xb30>
 8008e56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	ec51 0b17 	vmov	r0, r1, d7
 8008e60:	2300      	movs	r3, #0
 8008e62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e66:	f7f7 fe57 	bl	8000b18 <__aeabi_dcmpeq>
 8008e6a:	4680      	mov	r8, r0
 8008e6c:	b158      	cbz	r0, 8008e86 <_dtoa_r+0xce>
 8008e6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e70:	2301      	movs	r3, #1
 8008e72:	6013      	str	r3, [r2, #0]
 8008e74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e76:	b113      	cbz	r3, 8008e7e <_dtoa_r+0xc6>
 8008e78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e7a:	4b84      	ldr	r3, [pc, #528]	@ (800908c <_dtoa_r+0x2d4>)
 8008e7c:	6013      	str	r3, [r2, #0]
 8008e7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80090a0 <_dtoa_r+0x2e8>
 8008e82:	f000 bd33 	b.w	80098ec <_dtoa_r+0xb34>
 8008e86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e8a:	aa16      	add	r2, sp, #88	@ 0x58
 8008e8c:	a917      	add	r1, sp, #92	@ 0x5c
 8008e8e:	4658      	mov	r0, fp
 8008e90:	f001 fa3a 	bl	800a308 <__d2b>
 8008e94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e98:	4681      	mov	r9, r0
 8008e9a:	2e00      	cmp	r6, #0
 8008e9c:	d077      	beq.n	8008f8e <_dtoa_r+0x1d6>
 8008e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ea0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008eb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008eb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008eb8:	4619      	mov	r1, r3
 8008eba:	2200      	movs	r2, #0
 8008ebc:	4b74      	ldr	r3, [pc, #464]	@ (8009090 <_dtoa_r+0x2d8>)
 8008ebe:	f7f7 fa0b 	bl	80002d8 <__aeabi_dsub>
 8008ec2:	a369      	add	r3, pc, #420	@ (adr r3, 8009068 <_dtoa_r+0x2b0>)
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 fbbe 	bl	8000648 <__aeabi_dmul>
 8008ecc:	a368      	add	r3, pc, #416	@ (adr r3, 8009070 <_dtoa_r+0x2b8>)
 8008ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed2:	f7f7 fa03 	bl	80002dc <__adddf3>
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4630      	mov	r0, r6
 8008eda:	460d      	mov	r5, r1
 8008edc:	f7f7 fb4a 	bl	8000574 <__aeabi_i2d>
 8008ee0:	a365      	add	r3, pc, #404	@ (adr r3, 8009078 <_dtoa_r+0x2c0>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	f7f7 fbaf 	bl	8000648 <__aeabi_dmul>
 8008eea:	4602      	mov	r2, r0
 8008eec:	460b      	mov	r3, r1
 8008eee:	4620      	mov	r0, r4
 8008ef0:	4629      	mov	r1, r5
 8008ef2:	f7f7 f9f3 	bl	80002dc <__adddf3>
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	460d      	mov	r5, r1
 8008efa:	f7f7 fe55 	bl	8000ba8 <__aeabi_d2iz>
 8008efe:	2200      	movs	r2, #0
 8008f00:	4607      	mov	r7, r0
 8008f02:	2300      	movs	r3, #0
 8008f04:	4620      	mov	r0, r4
 8008f06:	4629      	mov	r1, r5
 8008f08:	f7f7 fe10 	bl	8000b2c <__aeabi_dcmplt>
 8008f0c:	b140      	cbz	r0, 8008f20 <_dtoa_r+0x168>
 8008f0e:	4638      	mov	r0, r7
 8008f10:	f7f7 fb30 	bl	8000574 <__aeabi_i2d>
 8008f14:	4622      	mov	r2, r4
 8008f16:	462b      	mov	r3, r5
 8008f18:	f7f7 fdfe 	bl	8000b18 <__aeabi_dcmpeq>
 8008f1c:	b900      	cbnz	r0, 8008f20 <_dtoa_r+0x168>
 8008f1e:	3f01      	subs	r7, #1
 8008f20:	2f16      	cmp	r7, #22
 8008f22:	d851      	bhi.n	8008fc8 <_dtoa_r+0x210>
 8008f24:	4b5b      	ldr	r3, [pc, #364]	@ (8009094 <_dtoa_r+0x2dc>)
 8008f26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f32:	f7f7 fdfb 	bl	8000b2c <__aeabi_dcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d048      	beq.n	8008fcc <_dtoa_r+0x214>
 8008f3a:	3f01      	subs	r7, #1
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f42:	1b9b      	subs	r3, r3, r6
 8008f44:	1e5a      	subs	r2, r3, #1
 8008f46:	bf44      	itt	mi
 8008f48:	f1c3 0801 	rsbmi	r8, r3, #1
 8008f4c:	2300      	movmi	r3, #0
 8008f4e:	9208      	str	r2, [sp, #32]
 8008f50:	bf54      	ite	pl
 8008f52:	f04f 0800 	movpl.w	r8, #0
 8008f56:	9308      	strmi	r3, [sp, #32]
 8008f58:	2f00      	cmp	r7, #0
 8008f5a:	db39      	blt.n	8008fd0 <_dtoa_r+0x218>
 8008f5c:	9b08      	ldr	r3, [sp, #32]
 8008f5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f60:	443b      	add	r3, r7
 8008f62:	9308      	str	r3, [sp, #32]
 8008f64:	2300      	movs	r3, #0
 8008f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f6a:	2b09      	cmp	r3, #9
 8008f6c:	d864      	bhi.n	8009038 <_dtoa_r+0x280>
 8008f6e:	2b05      	cmp	r3, #5
 8008f70:	bfc4      	itt	gt
 8008f72:	3b04      	subgt	r3, #4
 8008f74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008f76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f78:	f1a3 0302 	sub.w	r3, r3, #2
 8008f7c:	bfcc      	ite	gt
 8008f7e:	2400      	movgt	r4, #0
 8008f80:	2401      	movle	r4, #1
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d863      	bhi.n	800904e <_dtoa_r+0x296>
 8008f86:	e8df f003 	tbb	[pc, r3]
 8008f8a:	372a      	.short	0x372a
 8008f8c:	5535      	.short	0x5535
 8008f8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008f92:	441e      	add	r6, r3
 8008f94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f98:	2b20      	cmp	r3, #32
 8008f9a:	bfc1      	itttt	gt
 8008f9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008fa0:	409f      	lslgt	r7, r3
 8008fa2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008fa6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008faa:	bfd6      	itet	le
 8008fac:	f1c3 0320 	rsble	r3, r3, #32
 8008fb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008fb4:	fa04 f003 	lslle.w	r0, r4, r3
 8008fb8:	f7f7 facc 	bl	8000554 <__aeabi_ui2d>
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008fc2:	3e01      	subs	r6, #1
 8008fc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008fc6:	e777      	b.n	8008eb8 <_dtoa_r+0x100>
 8008fc8:	2301      	movs	r3, #1
 8008fca:	e7b8      	b.n	8008f3e <_dtoa_r+0x186>
 8008fcc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008fce:	e7b7      	b.n	8008f40 <_dtoa_r+0x188>
 8008fd0:	427b      	negs	r3, r7
 8008fd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	eba8 0807 	sub.w	r8, r8, r7
 8008fda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fdc:	e7c4      	b.n	8008f68 <_dtoa_r+0x1b0>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008fe2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	dc35      	bgt.n	8009054 <_dtoa_r+0x29c>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	9300      	str	r3, [sp, #0]
 8008fec:	9307      	str	r3, [sp, #28]
 8008fee:	461a      	mov	r2, r3
 8008ff0:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ff2:	e00b      	b.n	800900c <_dtoa_r+0x254>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e7f3      	b.n	8008fe0 <_dtoa_r+0x228>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ffe:	18fb      	adds	r3, r7, r3
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	3301      	adds	r3, #1
 8009004:	2b01      	cmp	r3, #1
 8009006:	9307      	str	r3, [sp, #28]
 8009008:	bfb8      	it	lt
 800900a:	2301      	movlt	r3, #1
 800900c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009010:	2100      	movs	r1, #0
 8009012:	2204      	movs	r2, #4
 8009014:	f102 0514 	add.w	r5, r2, #20
 8009018:	429d      	cmp	r5, r3
 800901a:	d91f      	bls.n	800905c <_dtoa_r+0x2a4>
 800901c:	6041      	str	r1, [r0, #4]
 800901e:	4658      	mov	r0, fp
 8009020:	f000 fd8e 	bl	8009b40 <_Balloc>
 8009024:	4682      	mov	sl, r0
 8009026:	2800      	cmp	r0, #0
 8009028:	d13c      	bne.n	80090a4 <_dtoa_r+0x2ec>
 800902a:	4b1b      	ldr	r3, [pc, #108]	@ (8009098 <_dtoa_r+0x2e0>)
 800902c:	4602      	mov	r2, r0
 800902e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009032:	e6d8      	b.n	8008de6 <_dtoa_r+0x2e>
 8009034:	2301      	movs	r3, #1
 8009036:	e7e0      	b.n	8008ffa <_dtoa_r+0x242>
 8009038:	2401      	movs	r4, #1
 800903a:	2300      	movs	r3, #0
 800903c:	9309      	str	r3, [sp, #36]	@ 0x24
 800903e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009040:	f04f 33ff 	mov.w	r3, #4294967295
 8009044:	9300      	str	r3, [sp, #0]
 8009046:	9307      	str	r3, [sp, #28]
 8009048:	2200      	movs	r2, #0
 800904a:	2312      	movs	r3, #18
 800904c:	e7d0      	b.n	8008ff0 <_dtoa_r+0x238>
 800904e:	2301      	movs	r3, #1
 8009050:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009052:	e7f5      	b.n	8009040 <_dtoa_r+0x288>
 8009054:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009056:	9300      	str	r3, [sp, #0]
 8009058:	9307      	str	r3, [sp, #28]
 800905a:	e7d7      	b.n	800900c <_dtoa_r+0x254>
 800905c:	3101      	adds	r1, #1
 800905e:	0052      	lsls	r2, r2, #1
 8009060:	e7d8      	b.n	8009014 <_dtoa_r+0x25c>
 8009062:	bf00      	nop
 8009064:	f3af 8000 	nop.w
 8009068:	636f4361 	.word	0x636f4361
 800906c:	3fd287a7 	.word	0x3fd287a7
 8009070:	8b60c8b3 	.word	0x8b60c8b3
 8009074:	3fc68a28 	.word	0x3fc68a28
 8009078:	509f79fb 	.word	0x509f79fb
 800907c:	3fd34413 	.word	0x3fd34413
 8009080:	0800c3ce 	.word	0x0800c3ce
 8009084:	0800c3e5 	.word	0x0800c3e5
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	0800c399 	.word	0x0800c399
 8009090:	3ff80000 	.word	0x3ff80000
 8009094:	0800c4e0 	.word	0x0800c4e0
 8009098:	0800c43d 	.word	0x0800c43d
 800909c:	0800c3ca 	.word	0x0800c3ca
 80090a0:	0800c398 	.word	0x0800c398
 80090a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090a8:	6018      	str	r0, [r3, #0]
 80090aa:	9b07      	ldr	r3, [sp, #28]
 80090ac:	2b0e      	cmp	r3, #14
 80090ae:	f200 80a4 	bhi.w	80091fa <_dtoa_r+0x442>
 80090b2:	2c00      	cmp	r4, #0
 80090b4:	f000 80a1 	beq.w	80091fa <_dtoa_r+0x442>
 80090b8:	2f00      	cmp	r7, #0
 80090ba:	dd33      	ble.n	8009124 <_dtoa_r+0x36c>
 80090bc:	4bad      	ldr	r3, [pc, #692]	@ (8009374 <_dtoa_r+0x5bc>)
 80090be:	f007 020f 	and.w	r2, r7, #15
 80090c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090c6:	ed93 7b00 	vldr	d7, [r3]
 80090ca:	05f8      	lsls	r0, r7, #23
 80090cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80090d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80090d4:	d516      	bpl.n	8009104 <_dtoa_r+0x34c>
 80090d6:	4ba8      	ldr	r3, [pc, #672]	@ (8009378 <_dtoa_r+0x5c0>)
 80090d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090e0:	f7f7 fbdc 	bl	800089c <__aeabi_ddiv>
 80090e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090e8:	f004 040f 	and.w	r4, r4, #15
 80090ec:	2603      	movs	r6, #3
 80090ee:	4da2      	ldr	r5, [pc, #648]	@ (8009378 <_dtoa_r+0x5c0>)
 80090f0:	b954      	cbnz	r4, 8009108 <_dtoa_r+0x350>
 80090f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80090fa:	f7f7 fbcf 	bl	800089c <__aeabi_ddiv>
 80090fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009102:	e028      	b.n	8009156 <_dtoa_r+0x39e>
 8009104:	2602      	movs	r6, #2
 8009106:	e7f2      	b.n	80090ee <_dtoa_r+0x336>
 8009108:	07e1      	lsls	r1, r4, #31
 800910a:	d508      	bpl.n	800911e <_dtoa_r+0x366>
 800910c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009110:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009114:	f7f7 fa98 	bl	8000648 <__aeabi_dmul>
 8009118:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800911c:	3601      	adds	r6, #1
 800911e:	1064      	asrs	r4, r4, #1
 8009120:	3508      	adds	r5, #8
 8009122:	e7e5      	b.n	80090f0 <_dtoa_r+0x338>
 8009124:	f000 80d2 	beq.w	80092cc <_dtoa_r+0x514>
 8009128:	427c      	negs	r4, r7
 800912a:	4b92      	ldr	r3, [pc, #584]	@ (8009374 <_dtoa_r+0x5bc>)
 800912c:	4d92      	ldr	r5, [pc, #584]	@ (8009378 <_dtoa_r+0x5c0>)
 800912e:	f004 020f 	and.w	r2, r4, #15
 8009132:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800913e:	f7f7 fa83 	bl	8000648 <__aeabi_dmul>
 8009142:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009146:	1124      	asrs	r4, r4, #4
 8009148:	2300      	movs	r3, #0
 800914a:	2602      	movs	r6, #2
 800914c:	2c00      	cmp	r4, #0
 800914e:	f040 80b2 	bne.w	80092b6 <_dtoa_r+0x4fe>
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1d3      	bne.n	80090fe <_dtoa_r+0x346>
 8009156:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009158:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f000 80b7 	beq.w	80092d0 <_dtoa_r+0x518>
 8009162:	4b86      	ldr	r3, [pc, #536]	@ (800937c <_dtoa_r+0x5c4>)
 8009164:	2200      	movs	r2, #0
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 fcdf 	bl	8000b2c <__aeabi_dcmplt>
 800916e:	2800      	cmp	r0, #0
 8009170:	f000 80ae 	beq.w	80092d0 <_dtoa_r+0x518>
 8009174:	9b07      	ldr	r3, [sp, #28]
 8009176:	2b00      	cmp	r3, #0
 8009178:	f000 80aa 	beq.w	80092d0 <_dtoa_r+0x518>
 800917c:	9b00      	ldr	r3, [sp, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	dd37      	ble.n	80091f2 <_dtoa_r+0x43a>
 8009182:	1e7b      	subs	r3, r7, #1
 8009184:	9304      	str	r3, [sp, #16]
 8009186:	4620      	mov	r0, r4
 8009188:	4b7d      	ldr	r3, [pc, #500]	@ (8009380 <_dtoa_r+0x5c8>)
 800918a:	2200      	movs	r2, #0
 800918c:	4629      	mov	r1, r5
 800918e:	f7f7 fa5b 	bl	8000648 <__aeabi_dmul>
 8009192:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009196:	9c00      	ldr	r4, [sp, #0]
 8009198:	3601      	adds	r6, #1
 800919a:	4630      	mov	r0, r6
 800919c:	f7f7 f9ea 	bl	8000574 <__aeabi_i2d>
 80091a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091a4:	f7f7 fa50 	bl	8000648 <__aeabi_dmul>
 80091a8:	4b76      	ldr	r3, [pc, #472]	@ (8009384 <_dtoa_r+0x5cc>)
 80091aa:	2200      	movs	r2, #0
 80091ac:	f7f7 f896 	bl	80002dc <__adddf3>
 80091b0:	4605      	mov	r5, r0
 80091b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091b6:	2c00      	cmp	r4, #0
 80091b8:	f040 808d 	bne.w	80092d6 <_dtoa_r+0x51e>
 80091bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091c0:	4b71      	ldr	r3, [pc, #452]	@ (8009388 <_dtoa_r+0x5d0>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	f7f7 f888 	bl	80002d8 <__aeabi_dsub>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091d0:	462a      	mov	r2, r5
 80091d2:	4633      	mov	r3, r6
 80091d4:	f7f7 fcc8 	bl	8000b68 <__aeabi_dcmpgt>
 80091d8:	2800      	cmp	r0, #0
 80091da:	f040 828b 	bne.w	80096f4 <_dtoa_r+0x93c>
 80091de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091e2:	462a      	mov	r2, r5
 80091e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80091e8:	f7f7 fca0 	bl	8000b2c <__aeabi_dcmplt>
 80091ec:	2800      	cmp	r0, #0
 80091ee:	f040 8128 	bne.w	8009442 <_dtoa_r+0x68a>
 80091f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80091f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80091fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f2c0 815a 	blt.w	80094b6 <_dtoa_r+0x6fe>
 8009202:	2f0e      	cmp	r7, #14
 8009204:	f300 8157 	bgt.w	80094b6 <_dtoa_r+0x6fe>
 8009208:	4b5a      	ldr	r3, [pc, #360]	@ (8009374 <_dtoa_r+0x5bc>)
 800920a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800920e:	ed93 7b00 	vldr	d7, [r3]
 8009212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009214:	2b00      	cmp	r3, #0
 8009216:	ed8d 7b00 	vstr	d7, [sp]
 800921a:	da03      	bge.n	8009224 <_dtoa_r+0x46c>
 800921c:	9b07      	ldr	r3, [sp, #28]
 800921e:	2b00      	cmp	r3, #0
 8009220:	f340 8101 	ble.w	8009426 <_dtoa_r+0x66e>
 8009224:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009228:	4656      	mov	r6, sl
 800922a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800922e:	4620      	mov	r0, r4
 8009230:	4629      	mov	r1, r5
 8009232:	f7f7 fb33 	bl	800089c <__aeabi_ddiv>
 8009236:	f7f7 fcb7 	bl	8000ba8 <__aeabi_d2iz>
 800923a:	4680      	mov	r8, r0
 800923c:	f7f7 f99a 	bl	8000574 <__aeabi_i2d>
 8009240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009244:	f7f7 fa00 	bl	8000648 <__aeabi_dmul>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	4620      	mov	r0, r4
 800924e:	4629      	mov	r1, r5
 8009250:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009254:	f7f7 f840 	bl	80002d8 <__aeabi_dsub>
 8009258:	f806 4b01 	strb.w	r4, [r6], #1
 800925c:	9d07      	ldr	r5, [sp, #28]
 800925e:	eba6 040a 	sub.w	r4, r6, sl
 8009262:	42a5      	cmp	r5, r4
 8009264:	4602      	mov	r2, r0
 8009266:	460b      	mov	r3, r1
 8009268:	f040 8117 	bne.w	800949a <_dtoa_r+0x6e2>
 800926c:	f7f7 f836 	bl	80002dc <__adddf3>
 8009270:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009274:	4604      	mov	r4, r0
 8009276:	460d      	mov	r5, r1
 8009278:	f7f7 fc76 	bl	8000b68 <__aeabi_dcmpgt>
 800927c:	2800      	cmp	r0, #0
 800927e:	f040 80f9 	bne.w	8009474 <_dtoa_r+0x6bc>
 8009282:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009286:	4620      	mov	r0, r4
 8009288:	4629      	mov	r1, r5
 800928a:	f7f7 fc45 	bl	8000b18 <__aeabi_dcmpeq>
 800928e:	b118      	cbz	r0, 8009298 <_dtoa_r+0x4e0>
 8009290:	f018 0f01 	tst.w	r8, #1
 8009294:	f040 80ee 	bne.w	8009474 <_dtoa_r+0x6bc>
 8009298:	4649      	mov	r1, r9
 800929a:	4658      	mov	r0, fp
 800929c:	f000 fc90 	bl	8009bc0 <_Bfree>
 80092a0:	2300      	movs	r3, #0
 80092a2:	7033      	strb	r3, [r6, #0]
 80092a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092a6:	3701      	adds	r7, #1
 80092a8:	601f      	str	r7, [r3, #0]
 80092aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 831d 	beq.w	80098ec <_dtoa_r+0xb34>
 80092b2:	601e      	str	r6, [r3, #0]
 80092b4:	e31a      	b.n	80098ec <_dtoa_r+0xb34>
 80092b6:	07e2      	lsls	r2, r4, #31
 80092b8:	d505      	bpl.n	80092c6 <_dtoa_r+0x50e>
 80092ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092be:	f7f7 f9c3 	bl	8000648 <__aeabi_dmul>
 80092c2:	3601      	adds	r6, #1
 80092c4:	2301      	movs	r3, #1
 80092c6:	1064      	asrs	r4, r4, #1
 80092c8:	3508      	adds	r5, #8
 80092ca:	e73f      	b.n	800914c <_dtoa_r+0x394>
 80092cc:	2602      	movs	r6, #2
 80092ce:	e742      	b.n	8009156 <_dtoa_r+0x39e>
 80092d0:	9c07      	ldr	r4, [sp, #28]
 80092d2:	9704      	str	r7, [sp, #16]
 80092d4:	e761      	b.n	800919a <_dtoa_r+0x3e2>
 80092d6:	4b27      	ldr	r3, [pc, #156]	@ (8009374 <_dtoa_r+0x5bc>)
 80092d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092e2:	4454      	add	r4, sl
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d053      	beq.n	8009390 <_dtoa_r+0x5d8>
 80092e8:	4928      	ldr	r1, [pc, #160]	@ (800938c <_dtoa_r+0x5d4>)
 80092ea:	2000      	movs	r0, #0
 80092ec:	f7f7 fad6 	bl	800089c <__aeabi_ddiv>
 80092f0:	4633      	mov	r3, r6
 80092f2:	462a      	mov	r2, r5
 80092f4:	f7f6 fff0 	bl	80002d8 <__aeabi_dsub>
 80092f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80092fc:	4656      	mov	r6, sl
 80092fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009302:	f7f7 fc51 	bl	8000ba8 <__aeabi_d2iz>
 8009306:	4605      	mov	r5, r0
 8009308:	f7f7 f934 	bl	8000574 <__aeabi_i2d>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009314:	f7f6 ffe0 	bl	80002d8 <__aeabi_dsub>
 8009318:	3530      	adds	r5, #48	@ 0x30
 800931a:	4602      	mov	r2, r0
 800931c:	460b      	mov	r3, r1
 800931e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009322:	f806 5b01 	strb.w	r5, [r6], #1
 8009326:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800932a:	f7f7 fbff 	bl	8000b2c <__aeabi_dcmplt>
 800932e:	2800      	cmp	r0, #0
 8009330:	d171      	bne.n	8009416 <_dtoa_r+0x65e>
 8009332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009336:	4911      	ldr	r1, [pc, #68]	@ (800937c <_dtoa_r+0x5c4>)
 8009338:	2000      	movs	r0, #0
 800933a:	f7f6 ffcd 	bl	80002d8 <__aeabi_dsub>
 800933e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009342:	f7f7 fbf3 	bl	8000b2c <__aeabi_dcmplt>
 8009346:	2800      	cmp	r0, #0
 8009348:	f040 8095 	bne.w	8009476 <_dtoa_r+0x6be>
 800934c:	42a6      	cmp	r6, r4
 800934e:	f43f af50 	beq.w	80091f2 <_dtoa_r+0x43a>
 8009352:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009356:	4b0a      	ldr	r3, [pc, #40]	@ (8009380 <_dtoa_r+0x5c8>)
 8009358:	2200      	movs	r2, #0
 800935a:	f7f7 f975 	bl	8000648 <__aeabi_dmul>
 800935e:	4b08      	ldr	r3, [pc, #32]	@ (8009380 <_dtoa_r+0x5c8>)
 8009360:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009364:	2200      	movs	r2, #0
 8009366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800936a:	f7f7 f96d 	bl	8000648 <__aeabi_dmul>
 800936e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009372:	e7c4      	b.n	80092fe <_dtoa_r+0x546>
 8009374:	0800c4e0 	.word	0x0800c4e0
 8009378:	0800c4b8 	.word	0x0800c4b8
 800937c:	3ff00000 	.word	0x3ff00000
 8009380:	40240000 	.word	0x40240000
 8009384:	401c0000 	.word	0x401c0000
 8009388:	40140000 	.word	0x40140000
 800938c:	3fe00000 	.word	0x3fe00000
 8009390:	4631      	mov	r1, r6
 8009392:	4628      	mov	r0, r5
 8009394:	f7f7 f958 	bl	8000648 <__aeabi_dmul>
 8009398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800939c:	9415      	str	r4, [sp, #84]	@ 0x54
 800939e:	4656      	mov	r6, sl
 80093a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093a4:	f7f7 fc00 	bl	8000ba8 <__aeabi_d2iz>
 80093a8:	4605      	mov	r5, r0
 80093aa:	f7f7 f8e3 	bl	8000574 <__aeabi_i2d>
 80093ae:	4602      	mov	r2, r0
 80093b0:	460b      	mov	r3, r1
 80093b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b6:	f7f6 ff8f 	bl	80002d8 <__aeabi_dsub>
 80093ba:	3530      	adds	r5, #48	@ 0x30
 80093bc:	f806 5b01 	strb.w	r5, [r6], #1
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	42a6      	cmp	r6, r4
 80093c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093ca:	f04f 0200 	mov.w	r2, #0
 80093ce:	d124      	bne.n	800941a <_dtoa_r+0x662>
 80093d0:	4bac      	ldr	r3, [pc, #688]	@ (8009684 <_dtoa_r+0x8cc>)
 80093d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80093d6:	f7f6 ff81 	bl	80002dc <__adddf3>
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e2:	f7f7 fbc1 	bl	8000b68 <__aeabi_dcmpgt>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	d145      	bne.n	8009476 <_dtoa_r+0x6be>
 80093ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093ee:	49a5      	ldr	r1, [pc, #660]	@ (8009684 <_dtoa_r+0x8cc>)
 80093f0:	2000      	movs	r0, #0
 80093f2:	f7f6 ff71 	bl	80002d8 <__aeabi_dsub>
 80093f6:	4602      	mov	r2, r0
 80093f8:	460b      	mov	r3, r1
 80093fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093fe:	f7f7 fb95 	bl	8000b2c <__aeabi_dcmplt>
 8009402:	2800      	cmp	r0, #0
 8009404:	f43f aef5 	beq.w	80091f2 <_dtoa_r+0x43a>
 8009408:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800940a:	1e73      	subs	r3, r6, #1
 800940c:	9315      	str	r3, [sp, #84]	@ 0x54
 800940e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009412:	2b30      	cmp	r3, #48	@ 0x30
 8009414:	d0f8      	beq.n	8009408 <_dtoa_r+0x650>
 8009416:	9f04      	ldr	r7, [sp, #16]
 8009418:	e73e      	b.n	8009298 <_dtoa_r+0x4e0>
 800941a:	4b9b      	ldr	r3, [pc, #620]	@ (8009688 <_dtoa_r+0x8d0>)
 800941c:	f7f7 f914 	bl	8000648 <__aeabi_dmul>
 8009420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009424:	e7bc      	b.n	80093a0 <_dtoa_r+0x5e8>
 8009426:	d10c      	bne.n	8009442 <_dtoa_r+0x68a>
 8009428:	4b98      	ldr	r3, [pc, #608]	@ (800968c <_dtoa_r+0x8d4>)
 800942a:	2200      	movs	r2, #0
 800942c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009430:	f7f7 f90a 	bl	8000648 <__aeabi_dmul>
 8009434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009438:	f7f7 fb8c 	bl	8000b54 <__aeabi_dcmpge>
 800943c:	2800      	cmp	r0, #0
 800943e:	f000 8157 	beq.w	80096f0 <_dtoa_r+0x938>
 8009442:	2400      	movs	r4, #0
 8009444:	4625      	mov	r5, r4
 8009446:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009448:	43db      	mvns	r3, r3
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	4656      	mov	r6, sl
 800944e:	2700      	movs	r7, #0
 8009450:	4621      	mov	r1, r4
 8009452:	4658      	mov	r0, fp
 8009454:	f000 fbb4 	bl	8009bc0 <_Bfree>
 8009458:	2d00      	cmp	r5, #0
 800945a:	d0dc      	beq.n	8009416 <_dtoa_r+0x65e>
 800945c:	b12f      	cbz	r7, 800946a <_dtoa_r+0x6b2>
 800945e:	42af      	cmp	r7, r5
 8009460:	d003      	beq.n	800946a <_dtoa_r+0x6b2>
 8009462:	4639      	mov	r1, r7
 8009464:	4658      	mov	r0, fp
 8009466:	f000 fbab 	bl	8009bc0 <_Bfree>
 800946a:	4629      	mov	r1, r5
 800946c:	4658      	mov	r0, fp
 800946e:	f000 fba7 	bl	8009bc0 <_Bfree>
 8009472:	e7d0      	b.n	8009416 <_dtoa_r+0x65e>
 8009474:	9704      	str	r7, [sp, #16]
 8009476:	4633      	mov	r3, r6
 8009478:	461e      	mov	r6, r3
 800947a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800947e:	2a39      	cmp	r2, #57	@ 0x39
 8009480:	d107      	bne.n	8009492 <_dtoa_r+0x6da>
 8009482:	459a      	cmp	sl, r3
 8009484:	d1f8      	bne.n	8009478 <_dtoa_r+0x6c0>
 8009486:	9a04      	ldr	r2, [sp, #16]
 8009488:	3201      	adds	r2, #1
 800948a:	9204      	str	r2, [sp, #16]
 800948c:	2230      	movs	r2, #48	@ 0x30
 800948e:	f88a 2000 	strb.w	r2, [sl]
 8009492:	781a      	ldrb	r2, [r3, #0]
 8009494:	3201      	adds	r2, #1
 8009496:	701a      	strb	r2, [r3, #0]
 8009498:	e7bd      	b.n	8009416 <_dtoa_r+0x65e>
 800949a:	4b7b      	ldr	r3, [pc, #492]	@ (8009688 <_dtoa_r+0x8d0>)
 800949c:	2200      	movs	r2, #0
 800949e:	f7f7 f8d3 	bl	8000648 <__aeabi_dmul>
 80094a2:	2200      	movs	r2, #0
 80094a4:	2300      	movs	r3, #0
 80094a6:	4604      	mov	r4, r0
 80094a8:	460d      	mov	r5, r1
 80094aa:	f7f7 fb35 	bl	8000b18 <__aeabi_dcmpeq>
 80094ae:	2800      	cmp	r0, #0
 80094b0:	f43f aebb 	beq.w	800922a <_dtoa_r+0x472>
 80094b4:	e6f0      	b.n	8009298 <_dtoa_r+0x4e0>
 80094b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80094b8:	2a00      	cmp	r2, #0
 80094ba:	f000 80db 	beq.w	8009674 <_dtoa_r+0x8bc>
 80094be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094c0:	2a01      	cmp	r2, #1
 80094c2:	f300 80bf 	bgt.w	8009644 <_dtoa_r+0x88c>
 80094c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	f000 80b7 	beq.w	800963c <_dtoa_r+0x884>
 80094ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80094d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80094d4:	4646      	mov	r6, r8
 80094d6:	9a08      	ldr	r2, [sp, #32]
 80094d8:	2101      	movs	r1, #1
 80094da:	441a      	add	r2, r3
 80094dc:	4658      	mov	r0, fp
 80094de:	4498      	add	r8, r3
 80094e0:	9208      	str	r2, [sp, #32]
 80094e2:	f000 fc6b 	bl	8009dbc <__i2b>
 80094e6:	4605      	mov	r5, r0
 80094e8:	b15e      	cbz	r6, 8009502 <_dtoa_r+0x74a>
 80094ea:	9b08      	ldr	r3, [sp, #32]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	dd08      	ble.n	8009502 <_dtoa_r+0x74a>
 80094f0:	42b3      	cmp	r3, r6
 80094f2:	9a08      	ldr	r2, [sp, #32]
 80094f4:	bfa8      	it	ge
 80094f6:	4633      	movge	r3, r6
 80094f8:	eba8 0803 	sub.w	r8, r8, r3
 80094fc:	1af6      	subs	r6, r6, r3
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	9308      	str	r3, [sp, #32]
 8009502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009504:	b1f3      	cbz	r3, 8009544 <_dtoa_r+0x78c>
 8009506:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009508:	2b00      	cmp	r3, #0
 800950a:	f000 80b7 	beq.w	800967c <_dtoa_r+0x8c4>
 800950e:	b18c      	cbz	r4, 8009534 <_dtoa_r+0x77c>
 8009510:	4629      	mov	r1, r5
 8009512:	4622      	mov	r2, r4
 8009514:	4658      	mov	r0, fp
 8009516:	f000 fd11 	bl	8009f3c <__pow5mult>
 800951a:	464a      	mov	r2, r9
 800951c:	4601      	mov	r1, r0
 800951e:	4605      	mov	r5, r0
 8009520:	4658      	mov	r0, fp
 8009522:	f000 fc61 	bl	8009de8 <__multiply>
 8009526:	4649      	mov	r1, r9
 8009528:	9004      	str	r0, [sp, #16]
 800952a:	4658      	mov	r0, fp
 800952c:	f000 fb48 	bl	8009bc0 <_Bfree>
 8009530:	9b04      	ldr	r3, [sp, #16]
 8009532:	4699      	mov	r9, r3
 8009534:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009536:	1b1a      	subs	r2, r3, r4
 8009538:	d004      	beq.n	8009544 <_dtoa_r+0x78c>
 800953a:	4649      	mov	r1, r9
 800953c:	4658      	mov	r0, fp
 800953e:	f000 fcfd 	bl	8009f3c <__pow5mult>
 8009542:	4681      	mov	r9, r0
 8009544:	2101      	movs	r1, #1
 8009546:	4658      	mov	r0, fp
 8009548:	f000 fc38 	bl	8009dbc <__i2b>
 800954c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800954e:	4604      	mov	r4, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 81cf 	beq.w	80098f4 <_dtoa_r+0xb3c>
 8009556:	461a      	mov	r2, r3
 8009558:	4601      	mov	r1, r0
 800955a:	4658      	mov	r0, fp
 800955c:	f000 fcee 	bl	8009f3c <__pow5mult>
 8009560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009562:	2b01      	cmp	r3, #1
 8009564:	4604      	mov	r4, r0
 8009566:	f300 8095 	bgt.w	8009694 <_dtoa_r+0x8dc>
 800956a:	9b02      	ldr	r3, [sp, #8]
 800956c:	2b00      	cmp	r3, #0
 800956e:	f040 8087 	bne.w	8009680 <_dtoa_r+0x8c8>
 8009572:	9b03      	ldr	r3, [sp, #12]
 8009574:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009578:	2b00      	cmp	r3, #0
 800957a:	f040 8089 	bne.w	8009690 <_dtoa_r+0x8d8>
 800957e:	9b03      	ldr	r3, [sp, #12]
 8009580:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009584:	0d1b      	lsrs	r3, r3, #20
 8009586:	051b      	lsls	r3, r3, #20
 8009588:	b12b      	cbz	r3, 8009596 <_dtoa_r+0x7de>
 800958a:	9b08      	ldr	r3, [sp, #32]
 800958c:	3301      	adds	r3, #1
 800958e:	9308      	str	r3, [sp, #32]
 8009590:	f108 0801 	add.w	r8, r8, #1
 8009594:	2301      	movs	r3, #1
 8009596:	930a      	str	r3, [sp, #40]	@ 0x28
 8009598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 81b0 	beq.w	8009900 <_dtoa_r+0xb48>
 80095a0:	6923      	ldr	r3, [r4, #16]
 80095a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095a6:	6918      	ldr	r0, [r3, #16]
 80095a8:	f000 fbbc 	bl	8009d24 <__hi0bits>
 80095ac:	f1c0 0020 	rsb	r0, r0, #32
 80095b0:	9b08      	ldr	r3, [sp, #32]
 80095b2:	4418      	add	r0, r3
 80095b4:	f010 001f 	ands.w	r0, r0, #31
 80095b8:	d077      	beq.n	80096aa <_dtoa_r+0x8f2>
 80095ba:	f1c0 0320 	rsb	r3, r0, #32
 80095be:	2b04      	cmp	r3, #4
 80095c0:	dd6b      	ble.n	800969a <_dtoa_r+0x8e2>
 80095c2:	9b08      	ldr	r3, [sp, #32]
 80095c4:	f1c0 001c 	rsb	r0, r0, #28
 80095c8:	4403      	add	r3, r0
 80095ca:	4480      	add	r8, r0
 80095cc:	4406      	add	r6, r0
 80095ce:	9308      	str	r3, [sp, #32]
 80095d0:	f1b8 0f00 	cmp.w	r8, #0
 80095d4:	dd05      	ble.n	80095e2 <_dtoa_r+0x82a>
 80095d6:	4649      	mov	r1, r9
 80095d8:	4642      	mov	r2, r8
 80095da:	4658      	mov	r0, fp
 80095dc:	f000 fd08 	bl	8009ff0 <__lshift>
 80095e0:	4681      	mov	r9, r0
 80095e2:	9b08      	ldr	r3, [sp, #32]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dd05      	ble.n	80095f4 <_dtoa_r+0x83c>
 80095e8:	4621      	mov	r1, r4
 80095ea:	461a      	mov	r2, r3
 80095ec:	4658      	mov	r0, fp
 80095ee:	f000 fcff 	bl	8009ff0 <__lshift>
 80095f2:	4604      	mov	r4, r0
 80095f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d059      	beq.n	80096ae <_dtoa_r+0x8f6>
 80095fa:	4621      	mov	r1, r4
 80095fc:	4648      	mov	r0, r9
 80095fe:	f000 fd63 	bl	800a0c8 <__mcmp>
 8009602:	2800      	cmp	r0, #0
 8009604:	da53      	bge.n	80096ae <_dtoa_r+0x8f6>
 8009606:	1e7b      	subs	r3, r7, #1
 8009608:	9304      	str	r3, [sp, #16]
 800960a:	4649      	mov	r1, r9
 800960c:	2300      	movs	r3, #0
 800960e:	220a      	movs	r2, #10
 8009610:	4658      	mov	r0, fp
 8009612:	f000 faf7 	bl	8009c04 <__multadd>
 8009616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009618:	4681      	mov	r9, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 8172 	beq.w	8009904 <_dtoa_r+0xb4c>
 8009620:	2300      	movs	r3, #0
 8009622:	4629      	mov	r1, r5
 8009624:	220a      	movs	r2, #10
 8009626:	4658      	mov	r0, fp
 8009628:	f000 faec 	bl	8009c04 <__multadd>
 800962c:	9b00      	ldr	r3, [sp, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	4605      	mov	r5, r0
 8009632:	dc67      	bgt.n	8009704 <_dtoa_r+0x94c>
 8009634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009636:	2b02      	cmp	r3, #2
 8009638:	dc41      	bgt.n	80096be <_dtoa_r+0x906>
 800963a:	e063      	b.n	8009704 <_dtoa_r+0x94c>
 800963c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800963e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009642:	e746      	b.n	80094d2 <_dtoa_r+0x71a>
 8009644:	9b07      	ldr	r3, [sp, #28]
 8009646:	1e5c      	subs	r4, r3, #1
 8009648:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800964a:	42a3      	cmp	r3, r4
 800964c:	bfbf      	itttt	lt
 800964e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009650:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009652:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009654:	1ae3      	sublt	r3, r4, r3
 8009656:	bfb4      	ite	lt
 8009658:	18d2      	addlt	r2, r2, r3
 800965a:	1b1c      	subge	r4, r3, r4
 800965c:	9b07      	ldr	r3, [sp, #28]
 800965e:	bfbc      	itt	lt
 8009660:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009662:	2400      	movlt	r4, #0
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfb5      	itete	lt
 8009668:	eba8 0603 	sublt.w	r6, r8, r3
 800966c:	9b07      	ldrge	r3, [sp, #28]
 800966e:	2300      	movlt	r3, #0
 8009670:	4646      	movge	r6, r8
 8009672:	e730      	b.n	80094d6 <_dtoa_r+0x71e>
 8009674:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009676:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009678:	4646      	mov	r6, r8
 800967a:	e735      	b.n	80094e8 <_dtoa_r+0x730>
 800967c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800967e:	e75c      	b.n	800953a <_dtoa_r+0x782>
 8009680:	2300      	movs	r3, #0
 8009682:	e788      	b.n	8009596 <_dtoa_r+0x7de>
 8009684:	3fe00000 	.word	0x3fe00000
 8009688:	40240000 	.word	0x40240000
 800968c:	40140000 	.word	0x40140000
 8009690:	9b02      	ldr	r3, [sp, #8]
 8009692:	e780      	b.n	8009596 <_dtoa_r+0x7de>
 8009694:	2300      	movs	r3, #0
 8009696:	930a      	str	r3, [sp, #40]	@ 0x28
 8009698:	e782      	b.n	80095a0 <_dtoa_r+0x7e8>
 800969a:	d099      	beq.n	80095d0 <_dtoa_r+0x818>
 800969c:	9a08      	ldr	r2, [sp, #32]
 800969e:	331c      	adds	r3, #28
 80096a0:	441a      	add	r2, r3
 80096a2:	4498      	add	r8, r3
 80096a4:	441e      	add	r6, r3
 80096a6:	9208      	str	r2, [sp, #32]
 80096a8:	e792      	b.n	80095d0 <_dtoa_r+0x818>
 80096aa:	4603      	mov	r3, r0
 80096ac:	e7f6      	b.n	800969c <_dtoa_r+0x8e4>
 80096ae:	9b07      	ldr	r3, [sp, #28]
 80096b0:	9704      	str	r7, [sp, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	dc20      	bgt.n	80096f8 <_dtoa_r+0x940>
 80096b6:	9300      	str	r3, [sp, #0]
 80096b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	dd1e      	ble.n	80096fc <_dtoa_r+0x944>
 80096be:	9b00      	ldr	r3, [sp, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	f47f aec0 	bne.w	8009446 <_dtoa_r+0x68e>
 80096c6:	4621      	mov	r1, r4
 80096c8:	2205      	movs	r2, #5
 80096ca:	4658      	mov	r0, fp
 80096cc:	f000 fa9a 	bl	8009c04 <__multadd>
 80096d0:	4601      	mov	r1, r0
 80096d2:	4604      	mov	r4, r0
 80096d4:	4648      	mov	r0, r9
 80096d6:	f000 fcf7 	bl	800a0c8 <__mcmp>
 80096da:	2800      	cmp	r0, #0
 80096dc:	f77f aeb3 	ble.w	8009446 <_dtoa_r+0x68e>
 80096e0:	4656      	mov	r6, sl
 80096e2:	2331      	movs	r3, #49	@ 0x31
 80096e4:	f806 3b01 	strb.w	r3, [r6], #1
 80096e8:	9b04      	ldr	r3, [sp, #16]
 80096ea:	3301      	adds	r3, #1
 80096ec:	9304      	str	r3, [sp, #16]
 80096ee:	e6ae      	b.n	800944e <_dtoa_r+0x696>
 80096f0:	9c07      	ldr	r4, [sp, #28]
 80096f2:	9704      	str	r7, [sp, #16]
 80096f4:	4625      	mov	r5, r4
 80096f6:	e7f3      	b.n	80096e0 <_dtoa_r+0x928>
 80096f8:	9b07      	ldr	r3, [sp, #28]
 80096fa:	9300      	str	r3, [sp, #0]
 80096fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096fe:	2b00      	cmp	r3, #0
 8009700:	f000 8104 	beq.w	800990c <_dtoa_r+0xb54>
 8009704:	2e00      	cmp	r6, #0
 8009706:	dd05      	ble.n	8009714 <_dtoa_r+0x95c>
 8009708:	4629      	mov	r1, r5
 800970a:	4632      	mov	r2, r6
 800970c:	4658      	mov	r0, fp
 800970e:	f000 fc6f 	bl	8009ff0 <__lshift>
 8009712:	4605      	mov	r5, r0
 8009714:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009716:	2b00      	cmp	r3, #0
 8009718:	d05a      	beq.n	80097d0 <_dtoa_r+0xa18>
 800971a:	6869      	ldr	r1, [r5, #4]
 800971c:	4658      	mov	r0, fp
 800971e:	f000 fa0f 	bl	8009b40 <_Balloc>
 8009722:	4606      	mov	r6, r0
 8009724:	b928      	cbnz	r0, 8009732 <_dtoa_r+0x97a>
 8009726:	4b84      	ldr	r3, [pc, #528]	@ (8009938 <_dtoa_r+0xb80>)
 8009728:	4602      	mov	r2, r0
 800972a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800972e:	f7ff bb5a 	b.w	8008de6 <_dtoa_r+0x2e>
 8009732:	692a      	ldr	r2, [r5, #16]
 8009734:	3202      	adds	r2, #2
 8009736:	0092      	lsls	r2, r2, #2
 8009738:	f105 010c 	add.w	r1, r5, #12
 800973c:	300c      	adds	r0, #12
 800973e:	f7ff fa9e 	bl	8008c7e <memcpy>
 8009742:	2201      	movs	r2, #1
 8009744:	4631      	mov	r1, r6
 8009746:	4658      	mov	r0, fp
 8009748:	f000 fc52 	bl	8009ff0 <__lshift>
 800974c:	f10a 0301 	add.w	r3, sl, #1
 8009750:	9307      	str	r3, [sp, #28]
 8009752:	9b00      	ldr	r3, [sp, #0]
 8009754:	4453      	add	r3, sl
 8009756:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009758:	9b02      	ldr	r3, [sp, #8]
 800975a:	f003 0301 	and.w	r3, r3, #1
 800975e:	462f      	mov	r7, r5
 8009760:	930a      	str	r3, [sp, #40]	@ 0x28
 8009762:	4605      	mov	r5, r0
 8009764:	9b07      	ldr	r3, [sp, #28]
 8009766:	4621      	mov	r1, r4
 8009768:	3b01      	subs	r3, #1
 800976a:	4648      	mov	r0, r9
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	f7ff fa9b 	bl	8008ca8 <quorem>
 8009772:	4639      	mov	r1, r7
 8009774:	9002      	str	r0, [sp, #8]
 8009776:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800977a:	4648      	mov	r0, r9
 800977c:	f000 fca4 	bl	800a0c8 <__mcmp>
 8009780:	462a      	mov	r2, r5
 8009782:	9008      	str	r0, [sp, #32]
 8009784:	4621      	mov	r1, r4
 8009786:	4658      	mov	r0, fp
 8009788:	f000 fcba 	bl	800a100 <__mdiff>
 800978c:	68c2      	ldr	r2, [r0, #12]
 800978e:	4606      	mov	r6, r0
 8009790:	bb02      	cbnz	r2, 80097d4 <_dtoa_r+0xa1c>
 8009792:	4601      	mov	r1, r0
 8009794:	4648      	mov	r0, r9
 8009796:	f000 fc97 	bl	800a0c8 <__mcmp>
 800979a:	4602      	mov	r2, r0
 800979c:	4631      	mov	r1, r6
 800979e:	4658      	mov	r0, fp
 80097a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80097a2:	f000 fa0d 	bl	8009bc0 <_Bfree>
 80097a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097aa:	9e07      	ldr	r6, [sp, #28]
 80097ac:	ea43 0102 	orr.w	r1, r3, r2
 80097b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097b2:	4319      	orrs	r1, r3
 80097b4:	d110      	bne.n	80097d8 <_dtoa_r+0xa20>
 80097b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097ba:	d029      	beq.n	8009810 <_dtoa_r+0xa58>
 80097bc:	9b08      	ldr	r3, [sp, #32]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	dd02      	ble.n	80097c8 <_dtoa_r+0xa10>
 80097c2:	9b02      	ldr	r3, [sp, #8]
 80097c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80097c8:	9b00      	ldr	r3, [sp, #0]
 80097ca:	f883 8000 	strb.w	r8, [r3]
 80097ce:	e63f      	b.n	8009450 <_dtoa_r+0x698>
 80097d0:	4628      	mov	r0, r5
 80097d2:	e7bb      	b.n	800974c <_dtoa_r+0x994>
 80097d4:	2201      	movs	r2, #1
 80097d6:	e7e1      	b.n	800979c <_dtoa_r+0x9e4>
 80097d8:	9b08      	ldr	r3, [sp, #32]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	db04      	blt.n	80097e8 <_dtoa_r+0xa30>
 80097de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097e0:	430b      	orrs	r3, r1
 80097e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097e4:	430b      	orrs	r3, r1
 80097e6:	d120      	bne.n	800982a <_dtoa_r+0xa72>
 80097e8:	2a00      	cmp	r2, #0
 80097ea:	dded      	ble.n	80097c8 <_dtoa_r+0xa10>
 80097ec:	4649      	mov	r1, r9
 80097ee:	2201      	movs	r2, #1
 80097f0:	4658      	mov	r0, fp
 80097f2:	f000 fbfd 	bl	8009ff0 <__lshift>
 80097f6:	4621      	mov	r1, r4
 80097f8:	4681      	mov	r9, r0
 80097fa:	f000 fc65 	bl	800a0c8 <__mcmp>
 80097fe:	2800      	cmp	r0, #0
 8009800:	dc03      	bgt.n	800980a <_dtoa_r+0xa52>
 8009802:	d1e1      	bne.n	80097c8 <_dtoa_r+0xa10>
 8009804:	f018 0f01 	tst.w	r8, #1
 8009808:	d0de      	beq.n	80097c8 <_dtoa_r+0xa10>
 800980a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800980e:	d1d8      	bne.n	80097c2 <_dtoa_r+0xa0a>
 8009810:	9a00      	ldr	r2, [sp, #0]
 8009812:	2339      	movs	r3, #57	@ 0x39
 8009814:	7013      	strb	r3, [r2, #0]
 8009816:	4633      	mov	r3, r6
 8009818:	461e      	mov	r6, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009820:	2a39      	cmp	r2, #57	@ 0x39
 8009822:	d052      	beq.n	80098ca <_dtoa_r+0xb12>
 8009824:	3201      	adds	r2, #1
 8009826:	701a      	strb	r2, [r3, #0]
 8009828:	e612      	b.n	8009450 <_dtoa_r+0x698>
 800982a:	2a00      	cmp	r2, #0
 800982c:	dd07      	ble.n	800983e <_dtoa_r+0xa86>
 800982e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009832:	d0ed      	beq.n	8009810 <_dtoa_r+0xa58>
 8009834:	9a00      	ldr	r2, [sp, #0]
 8009836:	f108 0301 	add.w	r3, r8, #1
 800983a:	7013      	strb	r3, [r2, #0]
 800983c:	e608      	b.n	8009450 <_dtoa_r+0x698>
 800983e:	9b07      	ldr	r3, [sp, #28]
 8009840:	9a07      	ldr	r2, [sp, #28]
 8009842:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009846:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009848:	4293      	cmp	r3, r2
 800984a:	d028      	beq.n	800989e <_dtoa_r+0xae6>
 800984c:	4649      	mov	r1, r9
 800984e:	2300      	movs	r3, #0
 8009850:	220a      	movs	r2, #10
 8009852:	4658      	mov	r0, fp
 8009854:	f000 f9d6 	bl	8009c04 <__multadd>
 8009858:	42af      	cmp	r7, r5
 800985a:	4681      	mov	r9, r0
 800985c:	f04f 0300 	mov.w	r3, #0
 8009860:	f04f 020a 	mov.w	r2, #10
 8009864:	4639      	mov	r1, r7
 8009866:	4658      	mov	r0, fp
 8009868:	d107      	bne.n	800987a <_dtoa_r+0xac2>
 800986a:	f000 f9cb 	bl	8009c04 <__multadd>
 800986e:	4607      	mov	r7, r0
 8009870:	4605      	mov	r5, r0
 8009872:	9b07      	ldr	r3, [sp, #28]
 8009874:	3301      	adds	r3, #1
 8009876:	9307      	str	r3, [sp, #28]
 8009878:	e774      	b.n	8009764 <_dtoa_r+0x9ac>
 800987a:	f000 f9c3 	bl	8009c04 <__multadd>
 800987e:	4629      	mov	r1, r5
 8009880:	4607      	mov	r7, r0
 8009882:	2300      	movs	r3, #0
 8009884:	220a      	movs	r2, #10
 8009886:	4658      	mov	r0, fp
 8009888:	f000 f9bc 	bl	8009c04 <__multadd>
 800988c:	4605      	mov	r5, r0
 800988e:	e7f0      	b.n	8009872 <_dtoa_r+0xaba>
 8009890:	9b00      	ldr	r3, [sp, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	bfcc      	ite	gt
 8009896:	461e      	movgt	r6, r3
 8009898:	2601      	movle	r6, #1
 800989a:	4456      	add	r6, sl
 800989c:	2700      	movs	r7, #0
 800989e:	4649      	mov	r1, r9
 80098a0:	2201      	movs	r2, #1
 80098a2:	4658      	mov	r0, fp
 80098a4:	f000 fba4 	bl	8009ff0 <__lshift>
 80098a8:	4621      	mov	r1, r4
 80098aa:	4681      	mov	r9, r0
 80098ac:	f000 fc0c 	bl	800a0c8 <__mcmp>
 80098b0:	2800      	cmp	r0, #0
 80098b2:	dcb0      	bgt.n	8009816 <_dtoa_r+0xa5e>
 80098b4:	d102      	bne.n	80098bc <_dtoa_r+0xb04>
 80098b6:	f018 0f01 	tst.w	r8, #1
 80098ba:	d1ac      	bne.n	8009816 <_dtoa_r+0xa5e>
 80098bc:	4633      	mov	r3, r6
 80098be:	461e      	mov	r6, r3
 80098c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098c4:	2a30      	cmp	r2, #48	@ 0x30
 80098c6:	d0fa      	beq.n	80098be <_dtoa_r+0xb06>
 80098c8:	e5c2      	b.n	8009450 <_dtoa_r+0x698>
 80098ca:	459a      	cmp	sl, r3
 80098cc:	d1a4      	bne.n	8009818 <_dtoa_r+0xa60>
 80098ce:	9b04      	ldr	r3, [sp, #16]
 80098d0:	3301      	adds	r3, #1
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	2331      	movs	r3, #49	@ 0x31
 80098d6:	f88a 3000 	strb.w	r3, [sl]
 80098da:	e5b9      	b.n	8009450 <_dtoa_r+0x698>
 80098dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800993c <_dtoa_r+0xb84>
 80098e2:	b11b      	cbz	r3, 80098ec <_dtoa_r+0xb34>
 80098e4:	f10a 0308 	add.w	r3, sl, #8
 80098e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	4650      	mov	r0, sl
 80098ee:	b019      	add	sp, #100	@ 0x64
 80098f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f6:	2b01      	cmp	r3, #1
 80098f8:	f77f ae37 	ble.w	800956a <_dtoa_r+0x7b2>
 80098fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009900:	2001      	movs	r0, #1
 8009902:	e655      	b.n	80095b0 <_dtoa_r+0x7f8>
 8009904:	9b00      	ldr	r3, [sp, #0]
 8009906:	2b00      	cmp	r3, #0
 8009908:	f77f aed6 	ble.w	80096b8 <_dtoa_r+0x900>
 800990c:	4656      	mov	r6, sl
 800990e:	4621      	mov	r1, r4
 8009910:	4648      	mov	r0, r9
 8009912:	f7ff f9c9 	bl	8008ca8 <quorem>
 8009916:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800991a:	f806 8b01 	strb.w	r8, [r6], #1
 800991e:	9b00      	ldr	r3, [sp, #0]
 8009920:	eba6 020a 	sub.w	r2, r6, sl
 8009924:	4293      	cmp	r3, r2
 8009926:	ddb3      	ble.n	8009890 <_dtoa_r+0xad8>
 8009928:	4649      	mov	r1, r9
 800992a:	2300      	movs	r3, #0
 800992c:	220a      	movs	r2, #10
 800992e:	4658      	mov	r0, fp
 8009930:	f000 f968 	bl	8009c04 <__multadd>
 8009934:	4681      	mov	r9, r0
 8009936:	e7ea      	b.n	800990e <_dtoa_r+0xb56>
 8009938:	0800c43d 	.word	0x0800c43d
 800993c:	0800c3c1 	.word	0x0800c3c1

08009940 <_free_r>:
 8009940:	b538      	push	{r3, r4, r5, lr}
 8009942:	4605      	mov	r5, r0
 8009944:	2900      	cmp	r1, #0
 8009946:	d041      	beq.n	80099cc <_free_r+0x8c>
 8009948:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800994c:	1f0c      	subs	r4, r1, #4
 800994e:	2b00      	cmp	r3, #0
 8009950:	bfb8      	it	lt
 8009952:	18e4      	addlt	r4, r4, r3
 8009954:	f000 f8e8 	bl	8009b28 <__malloc_lock>
 8009958:	4a1d      	ldr	r2, [pc, #116]	@ (80099d0 <_free_r+0x90>)
 800995a:	6813      	ldr	r3, [r2, #0]
 800995c:	b933      	cbnz	r3, 800996c <_free_r+0x2c>
 800995e:	6063      	str	r3, [r4, #4]
 8009960:	6014      	str	r4, [r2, #0]
 8009962:	4628      	mov	r0, r5
 8009964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009968:	f000 b8e4 	b.w	8009b34 <__malloc_unlock>
 800996c:	42a3      	cmp	r3, r4
 800996e:	d908      	bls.n	8009982 <_free_r+0x42>
 8009970:	6820      	ldr	r0, [r4, #0]
 8009972:	1821      	adds	r1, r4, r0
 8009974:	428b      	cmp	r3, r1
 8009976:	bf01      	itttt	eq
 8009978:	6819      	ldreq	r1, [r3, #0]
 800997a:	685b      	ldreq	r3, [r3, #4]
 800997c:	1809      	addeq	r1, r1, r0
 800997e:	6021      	streq	r1, [r4, #0]
 8009980:	e7ed      	b.n	800995e <_free_r+0x1e>
 8009982:	461a      	mov	r2, r3
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	b10b      	cbz	r3, 800998c <_free_r+0x4c>
 8009988:	42a3      	cmp	r3, r4
 800998a:	d9fa      	bls.n	8009982 <_free_r+0x42>
 800998c:	6811      	ldr	r1, [r2, #0]
 800998e:	1850      	adds	r0, r2, r1
 8009990:	42a0      	cmp	r0, r4
 8009992:	d10b      	bne.n	80099ac <_free_r+0x6c>
 8009994:	6820      	ldr	r0, [r4, #0]
 8009996:	4401      	add	r1, r0
 8009998:	1850      	adds	r0, r2, r1
 800999a:	4283      	cmp	r3, r0
 800999c:	6011      	str	r1, [r2, #0]
 800999e:	d1e0      	bne.n	8009962 <_free_r+0x22>
 80099a0:	6818      	ldr	r0, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	6053      	str	r3, [r2, #4]
 80099a6:	4408      	add	r0, r1
 80099a8:	6010      	str	r0, [r2, #0]
 80099aa:	e7da      	b.n	8009962 <_free_r+0x22>
 80099ac:	d902      	bls.n	80099b4 <_free_r+0x74>
 80099ae:	230c      	movs	r3, #12
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	e7d6      	b.n	8009962 <_free_r+0x22>
 80099b4:	6820      	ldr	r0, [r4, #0]
 80099b6:	1821      	adds	r1, r4, r0
 80099b8:	428b      	cmp	r3, r1
 80099ba:	bf04      	itt	eq
 80099bc:	6819      	ldreq	r1, [r3, #0]
 80099be:	685b      	ldreq	r3, [r3, #4]
 80099c0:	6063      	str	r3, [r4, #4]
 80099c2:	bf04      	itt	eq
 80099c4:	1809      	addeq	r1, r1, r0
 80099c6:	6021      	streq	r1, [r4, #0]
 80099c8:	6054      	str	r4, [r2, #4]
 80099ca:	e7ca      	b.n	8009962 <_free_r+0x22>
 80099cc:	bd38      	pop	{r3, r4, r5, pc}
 80099ce:	bf00      	nop
 80099d0:	20000878 	.word	0x20000878

080099d4 <malloc>:
 80099d4:	4b02      	ldr	r3, [pc, #8]	@ (80099e0 <malloc+0xc>)
 80099d6:	4601      	mov	r1, r0
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	f000 b825 	b.w	8009a28 <_malloc_r>
 80099de:	bf00      	nop
 80099e0:	20000014 	.word	0x20000014

080099e4 <sbrk_aligned>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	4e0f      	ldr	r6, [pc, #60]	@ (8009a24 <sbrk_aligned+0x40>)
 80099e8:	460c      	mov	r4, r1
 80099ea:	6831      	ldr	r1, [r6, #0]
 80099ec:	4605      	mov	r5, r0
 80099ee:	b911      	cbnz	r1, 80099f6 <sbrk_aligned+0x12>
 80099f0:	f001 fe0c 	bl	800b60c <_sbrk_r>
 80099f4:	6030      	str	r0, [r6, #0]
 80099f6:	4621      	mov	r1, r4
 80099f8:	4628      	mov	r0, r5
 80099fa:	f001 fe07 	bl	800b60c <_sbrk_r>
 80099fe:	1c43      	adds	r3, r0, #1
 8009a00:	d103      	bne.n	8009a0a <sbrk_aligned+0x26>
 8009a02:	f04f 34ff 	mov.w	r4, #4294967295
 8009a06:	4620      	mov	r0, r4
 8009a08:	bd70      	pop	{r4, r5, r6, pc}
 8009a0a:	1cc4      	adds	r4, r0, #3
 8009a0c:	f024 0403 	bic.w	r4, r4, #3
 8009a10:	42a0      	cmp	r0, r4
 8009a12:	d0f8      	beq.n	8009a06 <sbrk_aligned+0x22>
 8009a14:	1a21      	subs	r1, r4, r0
 8009a16:	4628      	mov	r0, r5
 8009a18:	f001 fdf8 	bl	800b60c <_sbrk_r>
 8009a1c:	3001      	adds	r0, #1
 8009a1e:	d1f2      	bne.n	8009a06 <sbrk_aligned+0x22>
 8009a20:	e7ef      	b.n	8009a02 <sbrk_aligned+0x1e>
 8009a22:	bf00      	nop
 8009a24:	20000874 	.word	0x20000874

08009a28 <_malloc_r>:
 8009a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a2c:	1ccd      	adds	r5, r1, #3
 8009a2e:	f025 0503 	bic.w	r5, r5, #3
 8009a32:	3508      	adds	r5, #8
 8009a34:	2d0c      	cmp	r5, #12
 8009a36:	bf38      	it	cc
 8009a38:	250c      	movcc	r5, #12
 8009a3a:	2d00      	cmp	r5, #0
 8009a3c:	4606      	mov	r6, r0
 8009a3e:	db01      	blt.n	8009a44 <_malloc_r+0x1c>
 8009a40:	42a9      	cmp	r1, r5
 8009a42:	d904      	bls.n	8009a4e <_malloc_r+0x26>
 8009a44:	230c      	movs	r3, #12
 8009a46:	6033      	str	r3, [r6, #0]
 8009a48:	2000      	movs	r0, #0
 8009a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b24 <_malloc_r+0xfc>
 8009a52:	f000 f869 	bl	8009b28 <__malloc_lock>
 8009a56:	f8d8 3000 	ldr.w	r3, [r8]
 8009a5a:	461c      	mov	r4, r3
 8009a5c:	bb44      	cbnz	r4, 8009ab0 <_malloc_r+0x88>
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff ffbf 	bl	80099e4 <sbrk_aligned>
 8009a66:	1c43      	adds	r3, r0, #1
 8009a68:	4604      	mov	r4, r0
 8009a6a:	d158      	bne.n	8009b1e <_malloc_r+0xf6>
 8009a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8009a70:	4627      	mov	r7, r4
 8009a72:	2f00      	cmp	r7, #0
 8009a74:	d143      	bne.n	8009afe <_malloc_r+0xd6>
 8009a76:	2c00      	cmp	r4, #0
 8009a78:	d04b      	beq.n	8009b12 <_malloc_r+0xea>
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4630      	mov	r0, r6
 8009a80:	eb04 0903 	add.w	r9, r4, r3
 8009a84:	f001 fdc2 	bl	800b60c <_sbrk_r>
 8009a88:	4581      	cmp	r9, r0
 8009a8a:	d142      	bne.n	8009b12 <_malloc_r+0xea>
 8009a8c:	6821      	ldr	r1, [r4, #0]
 8009a8e:	1a6d      	subs	r5, r5, r1
 8009a90:	4629      	mov	r1, r5
 8009a92:	4630      	mov	r0, r6
 8009a94:	f7ff ffa6 	bl	80099e4 <sbrk_aligned>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d03a      	beq.n	8009b12 <_malloc_r+0xea>
 8009a9c:	6823      	ldr	r3, [r4, #0]
 8009a9e:	442b      	add	r3, r5
 8009aa0:	6023      	str	r3, [r4, #0]
 8009aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8009aa6:	685a      	ldr	r2, [r3, #4]
 8009aa8:	bb62      	cbnz	r2, 8009b04 <_malloc_r+0xdc>
 8009aaa:	f8c8 7000 	str.w	r7, [r8]
 8009aae:	e00f      	b.n	8009ad0 <_malloc_r+0xa8>
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	1b52      	subs	r2, r2, r5
 8009ab4:	d420      	bmi.n	8009af8 <_malloc_r+0xd0>
 8009ab6:	2a0b      	cmp	r2, #11
 8009ab8:	d917      	bls.n	8009aea <_malloc_r+0xc2>
 8009aba:	1961      	adds	r1, r4, r5
 8009abc:	42a3      	cmp	r3, r4
 8009abe:	6025      	str	r5, [r4, #0]
 8009ac0:	bf18      	it	ne
 8009ac2:	6059      	strne	r1, [r3, #4]
 8009ac4:	6863      	ldr	r3, [r4, #4]
 8009ac6:	bf08      	it	eq
 8009ac8:	f8c8 1000 	streq.w	r1, [r8]
 8009acc:	5162      	str	r2, [r4, r5]
 8009ace:	604b      	str	r3, [r1, #4]
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f000 f82f 	bl	8009b34 <__malloc_unlock>
 8009ad6:	f104 000b 	add.w	r0, r4, #11
 8009ada:	1d23      	adds	r3, r4, #4
 8009adc:	f020 0007 	bic.w	r0, r0, #7
 8009ae0:	1ac2      	subs	r2, r0, r3
 8009ae2:	bf1c      	itt	ne
 8009ae4:	1a1b      	subne	r3, r3, r0
 8009ae6:	50a3      	strne	r3, [r4, r2]
 8009ae8:	e7af      	b.n	8009a4a <_malloc_r+0x22>
 8009aea:	6862      	ldr	r2, [r4, #4]
 8009aec:	42a3      	cmp	r3, r4
 8009aee:	bf0c      	ite	eq
 8009af0:	f8c8 2000 	streq.w	r2, [r8]
 8009af4:	605a      	strne	r2, [r3, #4]
 8009af6:	e7eb      	b.n	8009ad0 <_malloc_r+0xa8>
 8009af8:	4623      	mov	r3, r4
 8009afa:	6864      	ldr	r4, [r4, #4]
 8009afc:	e7ae      	b.n	8009a5c <_malloc_r+0x34>
 8009afe:	463c      	mov	r4, r7
 8009b00:	687f      	ldr	r7, [r7, #4]
 8009b02:	e7b6      	b.n	8009a72 <_malloc_r+0x4a>
 8009b04:	461a      	mov	r2, r3
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	d1fb      	bne.n	8009b04 <_malloc_r+0xdc>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	6053      	str	r3, [r2, #4]
 8009b10:	e7de      	b.n	8009ad0 <_malloc_r+0xa8>
 8009b12:	230c      	movs	r3, #12
 8009b14:	6033      	str	r3, [r6, #0]
 8009b16:	4630      	mov	r0, r6
 8009b18:	f000 f80c 	bl	8009b34 <__malloc_unlock>
 8009b1c:	e794      	b.n	8009a48 <_malloc_r+0x20>
 8009b1e:	6005      	str	r5, [r0, #0]
 8009b20:	e7d6      	b.n	8009ad0 <_malloc_r+0xa8>
 8009b22:	bf00      	nop
 8009b24:	20000878 	.word	0x20000878

08009b28 <__malloc_lock>:
 8009b28:	4801      	ldr	r0, [pc, #4]	@ (8009b30 <__malloc_lock+0x8>)
 8009b2a:	f7ff b8a6 	b.w	8008c7a <__retarget_lock_acquire_recursive>
 8009b2e:	bf00      	nop
 8009b30:	20000870 	.word	0x20000870

08009b34 <__malloc_unlock>:
 8009b34:	4801      	ldr	r0, [pc, #4]	@ (8009b3c <__malloc_unlock+0x8>)
 8009b36:	f7ff b8a1 	b.w	8008c7c <__retarget_lock_release_recursive>
 8009b3a:	bf00      	nop
 8009b3c:	20000870 	.word	0x20000870

08009b40 <_Balloc>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	69c6      	ldr	r6, [r0, #28]
 8009b44:	4604      	mov	r4, r0
 8009b46:	460d      	mov	r5, r1
 8009b48:	b976      	cbnz	r6, 8009b68 <_Balloc+0x28>
 8009b4a:	2010      	movs	r0, #16
 8009b4c:	f7ff ff42 	bl	80099d4 <malloc>
 8009b50:	4602      	mov	r2, r0
 8009b52:	61e0      	str	r0, [r4, #28]
 8009b54:	b920      	cbnz	r0, 8009b60 <_Balloc+0x20>
 8009b56:	4b18      	ldr	r3, [pc, #96]	@ (8009bb8 <_Balloc+0x78>)
 8009b58:	4818      	ldr	r0, [pc, #96]	@ (8009bbc <_Balloc+0x7c>)
 8009b5a:	216b      	movs	r1, #107	@ 0x6b
 8009b5c:	f001 fd70 	bl	800b640 <__assert_func>
 8009b60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b64:	6006      	str	r6, [r0, #0]
 8009b66:	60c6      	str	r6, [r0, #12]
 8009b68:	69e6      	ldr	r6, [r4, #28]
 8009b6a:	68f3      	ldr	r3, [r6, #12]
 8009b6c:	b183      	cbz	r3, 8009b90 <_Balloc+0x50>
 8009b6e:	69e3      	ldr	r3, [r4, #28]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b76:	b9b8      	cbnz	r0, 8009ba8 <_Balloc+0x68>
 8009b78:	2101      	movs	r1, #1
 8009b7a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b7e:	1d72      	adds	r2, r6, #5
 8009b80:	0092      	lsls	r2, r2, #2
 8009b82:	4620      	mov	r0, r4
 8009b84:	f001 fd7a 	bl	800b67c <_calloc_r>
 8009b88:	b160      	cbz	r0, 8009ba4 <_Balloc+0x64>
 8009b8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b8e:	e00e      	b.n	8009bae <_Balloc+0x6e>
 8009b90:	2221      	movs	r2, #33	@ 0x21
 8009b92:	2104      	movs	r1, #4
 8009b94:	4620      	mov	r0, r4
 8009b96:	f001 fd71 	bl	800b67c <_calloc_r>
 8009b9a:	69e3      	ldr	r3, [r4, #28]
 8009b9c:	60f0      	str	r0, [r6, #12]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1e4      	bne.n	8009b6e <_Balloc+0x2e>
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}
 8009ba8:	6802      	ldr	r2, [r0, #0]
 8009baa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009bb4:	e7f7      	b.n	8009ba6 <_Balloc+0x66>
 8009bb6:	bf00      	nop
 8009bb8:	0800c3ce 	.word	0x0800c3ce
 8009bbc:	0800c44e 	.word	0x0800c44e

08009bc0 <_Bfree>:
 8009bc0:	b570      	push	{r4, r5, r6, lr}
 8009bc2:	69c6      	ldr	r6, [r0, #28]
 8009bc4:	4605      	mov	r5, r0
 8009bc6:	460c      	mov	r4, r1
 8009bc8:	b976      	cbnz	r6, 8009be8 <_Bfree+0x28>
 8009bca:	2010      	movs	r0, #16
 8009bcc:	f7ff ff02 	bl	80099d4 <malloc>
 8009bd0:	4602      	mov	r2, r0
 8009bd2:	61e8      	str	r0, [r5, #28]
 8009bd4:	b920      	cbnz	r0, 8009be0 <_Bfree+0x20>
 8009bd6:	4b09      	ldr	r3, [pc, #36]	@ (8009bfc <_Bfree+0x3c>)
 8009bd8:	4809      	ldr	r0, [pc, #36]	@ (8009c00 <_Bfree+0x40>)
 8009bda:	218f      	movs	r1, #143	@ 0x8f
 8009bdc:	f001 fd30 	bl	800b640 <__assert_func>
 8009be0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009be4:	6006      	str	r6, [r0, #0]
 8009be6:	60c6      	str	r6, [r0, #12]
 8009be8:	b13c      	cbz	r4, 8009bfa <_Bfree+0x3a>
 8009bea:	69eb      	ldr	r3, [r5, #28]
 8009bec:	6862      	ldr	r2, [r4, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009bf4:	6021      	str	r1, [r4, #0]
 8009bf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	0800c3ce 	.word	0x0800c3ce
 8009c00:	0800c44e 	.word	0x0800c44e

08009c04 <__multadd>:
 8009c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c08:	690d      	ldr	r5, [r1, #16]
 8009c0a:	4607      	mov	r7, r0
 8009c0c:	460c      	mov	r4, r1
 8009c0e:	461e      	mov	r6, r3
 8009c10:	f101 0c14 	add.w	ip, r1, #20
 8009c14:	2000      	movs	r0, #0
 8009c16:	f8dc 3000 	ldr.w	r3, [ip]
 8009c1a:	b299      	uxth	r1, r3
 8009c1c:	fb02 6101 	mla	r1, r2, r1, r6
 8009c20:	0c1e      	lsrs	r6, r3, #16
 8009c22:	0c0b      	lsrs	r3, r1, #16
 8009c24:	fb02 3306 	mla	r3, r2, r6, r3
 8009c28:	b289      	uxth	r1, r1
 8009c2a:	3001      	adds	r0, #1
 8009c2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009c30:	4285      	cmp	r5, r0
 8009c32:	f84c 1b04 	str.w	r1, [ip], #4
 8009c36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009c3a:	dcec      	bgt.n	8009c16 <__multadd+0x12>
 8009c3c:	b30e      	cbz	r6, 8009c82 <__multadd+0x7e>
 8009c3e:	68a3      	ldr	r3, [r4, #8]
 8009c40:	42ab      	cmp	r3, r5
 8009c42:	dc19      	bgt.n	8009c78 <__multadd+0x74>
 8009c44:	6861      	ldr	r1, [r4, #4]
 8009c46:	4638      	mov	r0, r7
 8009c48:	3101      	adds	r1, #1
 8009c4a:	f7ff ff79 	bl	8009b40 <_Balloc>
 8009c4e:	4680      	mov	r8, r0
 8009c50:	b928      	cbnz	r0, 8009c5e <__multadd+0x5a>
 8009c52:	4602      	mov	r2, r0
 8009c54:	4b0c      	ldr	r3, [pc, #48]	@ (8009c88 <__multadd+0x84>)
 8009c56:	480d      	ldr	r0, [pc, #52]	@ (8009c8c <__multadd+0x88>)
 8009c58:	21ba      	movs	r1, #186	@ 0xba
 8009c5a:	f001 fcf1 	bl	800b640 <__assert_func>
 8009c5e:	6922      	ldr	r2, [r4, #16]
 8009c60:	3202      	adds	r2, #2
 8009c62:	f104 010c 	add.w	r1, r4, #12
 8009c66:	0092      	lsls	r2, r2, #2
 8009c68:	300c      	adds	r0, #12
 8009c6a:	f7ff f808 	bl	8008c7e <memcpy>
 8009c6e:	4621      	mov	r1, r4
 8009c70:	4638      	mov	r0, r7
 8009c72:	f7ff ffa5 	bl	8009bc0 <_Bfree>
 8009c76:	4644      	mov	r4, r8
 8009c78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c7c:	3501      	adds	r5, #1
 8009c7e:	615e      	str	r6, [r3, #20]
 8009c80:	6125      	str	r5, [r4, #16]
 8009c82:	4620      	mov	r0, r4
 8009c84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c88:	0800c43d 	.word	0x0800c43d
 8009c8c:	0800c44e 	.word	0x0800c44e

08009c90 <__s2b>:
 8009c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c94:	460c      	mov	r4, r1
 8009c96:	4615      	mov	r5, r2
 8009c98:	461f      	mov	r7, r3
 8009c9a:	2209      	movs	r2, #9
 8009c9c:	3308      	adds	r3, #8
 8009c9e:	4606      	mov	r6, r0
 8009ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	db09      	blt.n	8009cc0 <__s2b+0x30>
 8009cac:	4630      	mov	r0, r6
 8009cae:	f7ff ff47 	bl	8009b40 <_Balloc>
 8009cb2:	b940      	cbnz	r0, 8009cc6 <__s2b+0x36>
 8009cb4:	4602      	mov	r2, r0
 8009cb6:	4b19      	ldr	r3, [pc, #100]	@ (8009d1c <__s2b+0x8c>)
 8009cb8:	4819      	ldr	r0, [pc, #100]	@ (8009d20 <__s2b+0x90>)
 8009cba:	21d3      	movs	r1, #211	@ 0xd3
 8009cbc:	f001 fcc0 	bl	800b640 <__assert_func>
 8009cc0:	0052      	lsls	r2, r2, #1
 8009cc2:	3101      	adds	r1, #1
 8009cc4:	e7f0      	b.n	8009ca8 <__s2b+0x18>
 8009cc6:	9b08      	ldr	r3, [sp, #32]
 8009cc8:	6143      	str	r3, [r0, #20]
 8009cca:	2d09      	cmp	r5, #9
 8009ccc:	f04f 0301 	mov.w	r3, #1
 8009cd0:	6103      	str	r3, [r0, #16]
 8009cd2:	dd16      	ble.n	8009d02 <__s2b+0x72>
 8009cd4:	f104 0909 	add.w	r9, r4, #9
 8009cd8:	46c8      	mov	r8, r9
 8009cda:	442c      	add	r4, r5
 8009cdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	3b30      	subs	r3, #48	@ 0x30
 8009ce4:	220a      	movs	r2, #10
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f7ff ff8c 	bl	8009c04 <__multadd>
 8009cec:	45a0      	cmp	r8, r4
 8009cee:	d1f5      	bne.n	8009cdc <__s2b+0x4c>
 8009cf0:	f1a5 0408 	sub.w	r4, r5, #8
 8009cf4:	444c      	add	r4, r9
 8009cf6:	1b2d      	subs	r5, r5, r4
 8009cf8:	1963      	adds	r3, r4, r5
 8009cfa:	42bb      	cmp	r3, r7
 8009cfc:	db04      	blt.n	8009d08 <__s2b+0x78>
 8009cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d02:	340a      	adds	r4, #10
 8009d04:	2509      	movs	r5, #9
 8009d06:	e7f6      	b.n	8009cf6 <__s2b+0x66>
 8009d08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d0c:	4601      	mov	r1, r0
 8009d0e:	3b30      	subs	r3, #48	@ 0x30
 8009d10:	220a      	movs	r2, #10
 8009d12:	4630      	mov	r0, r6
 8009d14:	f7ff ff76 	bl	8009c04 <__multadd>
 8009d18:	e7ee      	b.n	8009cf8 <__s2b+0x68>
 8009d1a:	bf00      	nop
 8009d1c:	0800c43d 	.word	0x0800c43d
 8009d20:	0800c44e 	.word	0x0800c44e

08009d24 <__hi0bits>:
 8009d24:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009d28:	4603      	mov	r3, r0
 8009d2a:	bf36      	itet	cc
 8009d2c:	0403      	lslcc	r3, r0, #16
 8009d2e:	2000      	movcs	r0, #0
 8009d30:	2010      	movcc	r0, #16
 8009d32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d36:	bf3c      	itt	cc
 8009d38:	021b      	lslcc	r3, r3, #8
 8009d3a:	3008      	addcc	r0, #8
 8009d3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d40:	bf3c      	itt	cc
 8009d42:	011b      	lslcc	r3, r3, #4
 8009d44:	3004      	addcc	r0, #4
 8009d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d4a:	bf3c      	itt	cc
 8009d4c:	009b      	lslcc	r3, r3, #2
 8009d4e:	3002      	addcc	r0, #2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db05      	blt.n	8009d60 <__hi0bits+0x3c>
 8009d54:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009d58:	f100 0001 	add.w	r0, r0, #1
 8009d5c:	bf08      	it	eq
 8009d5e:	2020      	moveq	r0, #32
 8009d60:	4770      	bx	lr

08009d62 <__lo0bits>:
 8009d62:	6803      	ldr	r3, [r0, #0]
 8009d64:	4602      	mov	r2, r0
 8009d66:	f013 0007 	ands.w	r0, r3, #7
 8009d6a:	d00b      	beq.n	8009d84 <__lo0bits+0x22>
 8009d6c:	07d9      	lsls	r1, r3, #31
 8009d6e:	d421      	bmi.n	8009db4 <__lo0bits+0x52>
 8009d70:	0798      	lsls	r0, r3, #30
 8009d72:	bf49      	itett	mi
 8009d74:	085b      	lsrmi	r3, r3, #1
 8009d76:	089b      	lsrpl	r3, r3, #2
 8009d78:	2001      	movmi	r0, #1
 8009d7a:	6013      	strmi	r3, [r2, #0]
 8009d7c:	bf5c      	itt	pl
 8009d7e:	6013      	strpl	r3, [r2, #0]
 8009d80:	2002      	movpl	r0, #2
 8009d82:	4770      	bx	lr
 8009d84:	b299      	uxth	r1, r3
 8009d86:	b909      	cbnz	r1, 8009d8c <__lo0bits+0x2a>
 8009d88:	0c1b      	lsrs	r3, r3, #16
 8009d8a:	2010      	movs	r0, #16
 8009d8c:	b2d9      	uxtb	r1, r3
 8009d8e:	b909      	cbnz	r1, 8009d94 <__lo0bits+0x32>
 8009d90:	3008      	adds	r0, #8
 8009d92:	0a1b      	lsrs	r3, r3, #8
 8009d94:	0719      	lsls	r1, r3, #28
 8009d96:	bf04      	itt	eq
 8009d98:	091b      	lsreq	r3, r3, #4
 8009d9a:	3004      	addeq	r0, #4
 8009d9c:	0799      	lsls	r1, r3, #30
 8009d9e:	bf04      	itt	eq
 8009da0:	089b      	lsreq	r3, r3, #2
 8009da2:	3002      	addeq	r0, #2
 8009da4:	07d9      	lsls	r1, r3, #31
 8009da6:	d403      	bmi.n	8009db0 <__lo0bits+0x4e>
 8009da8:	085b      	lsrs	r3, r3, #1
 8009daa:	f100 0001 	add.w	r0, r0, #1
 8009dae:	d003      	beq.n	8009db8 <__lo0bits+0x56>
 8009db0:	6013      	str	r3, [r2, #0]
 8009db2:	4770      	bx	lr
 8009db4:	2000      	movs	r0, #0
 8009db6:	4770      	bx	lr
 8009db8:	2020      	movs	r0, #32
 8009dba:	4770      	bx	lr

08009dbc <__i2b>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	460c      	mov	r4, r1
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	f7ff febd 	bl	8009b40 <_Balloc>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	b928      	cbnz	r0, 8009dd6 <__i2b+0x1a>
 8009dca:	4b05      	ldr	r3, [pc, #20]	@ (8009de0 <__i2b+0x24>)
 8009dcc:	4805      	ldr	r0, [pc, #20]	@ (8009de4 <__i2b+0x28>)
 8009dce:	f240 1145 	movw	r1, #325	@ 0x145
 8009dd2:	f001 fc35 	bl	800b640 <__assert_func>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	6144      	str	r4, [r0, #20]
 8009dda:	6103      	str	r3, [r0, #16]
 8009ddc:	bd10      	pop	{r4, pc}
 8009dde:	bf00      	nop
 8009de0:	0800c43d 	.word	0x0800c43d
 8009de4:	0800c44e 	.word	0x0800c44e

08009de8 <__multiply>:
 8009de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dec:	4614      	mov	r4, r2
 8009dee:	690a      	ldr	r2, [r1, #16]
 8009df0:	6923      	ldr	r3, [r4, #16]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	bfa8      	it	ge
 8009df6:	4623      	movge	r3, r4
 8009df8:	460f      	mov	r7, r1
 8009dfa:	bfa4      	itt	ge
 8009dfc:	460c      	movge	r4, r1
 8009dfe:	461f      	movge	r7, r3
 8009e00:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009e04:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009e08:	68a3      	ldr	r3, [r4, #8]
 8009e0a:	6861      	ldr	r1, [r4, #4]
 8009e0c:	eb0a 0609 	add.w	r6, sl, r9
 8009e10:	42b3      	cmp	r3, r6
 8009e12:	b085      	sub	sp, #20
 8009e14:	bfb8      	it	lt
 8009e16:	3101      	addlt	r1, #1
 8009e18:	f7ff fe92 	bl	8009b40 <_Balloc>
 8009e1c:	b930      	cbnz	r0, 8009e2c <__multiply+0x44>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	4b44      	ldr	r3, [pc, #272]	@ (8009f34 <__multiply+0x14c>)
 8009e22:	4845      	ldr	r0, [pc, #276]	@ (8009f38 <__multiply+0x150>)
 8009e24:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009e28:	f001 fc0a 	bl	800b640 <__assert_func>
 8009e2c:	f100 0514 	add.w	r5, r0, #20
 8009e30:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e34:	462b      	mov	r3, r5
 8009e36:	2200      	movs	r2, #0
 8009e38:	4543      	cmp	r3, r8
 8009e3a:	d321      	bcc.n	8009e80 <__multiply+0x98>
 8009e3c:	f107 0114 	add.w	r1, r7, #20
 8009e40:	f104 0214 	add.w	r2, r4, #20
 8009e44:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009e48:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009e4c:	9302      	str	r3, [sp, #8]
 8009e4e:	1b13      	subs	r3, r2, r4
 8009e50:	3b15      	subs	r3, #21
 8009e52:	f023 0303 	bic.w	r3, r3, #3
 8009e56:	3304      	adds	r3, #4
 8009e58:	f104 0715 	add.w	r7, r4, #21
 8009e5c:	42ba      	cmp	r2, r7
 8009e5e:	bf38      	it	cc
 8009e60:	2304      	movcc	r3, #4
 8009e62:	9301      	str	r3, [sp, #4]
 8009e64:	9b02      	ldr	r3, [sp, #8]
 8009e66:	9103      	str	r1, [sp, #12]
 8009e68:	428b      	cmp	r3, r1
 8009e6a:	d80c      	bhi.n	8009e86 <__multiply+0x9e>
 8009e6c:	2e00      	cmp	r6, #0
 8009e6e:	dd03      	ble.n	8009e78 <__multiply+0x90>
 8009e70:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d05b      	beq.n	8009f30 <__multiply+0x148>
 8009e78:	6106      	str	r6, [r0, #16]
 8009e7a:	b005      	add	sp, #20
 8009e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e80:	f843 2b04 	str.w	r2, [r3], #4
 8009e84:	e7d8      	b.n	8009e38 <__multiply+0x50>
 8009e86:	f8b1 a000 	ldrh.w	sl, [r1]
 8009e8a:	f1ba 0f00 	cmp.w	sl, #0
 8009e8e:	d024      	beq.n	8009eda <__multiply+0xf2>
 8009e90:	f104 0e14 	add.w	lr, r4, #20
 8009e94:	46a9      	mov	r9, r5
 8009e96:	f04f 0c00 	mov.w	ip, #0
 8009e9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e9e:	f8d9 3000 	ldr.w	r3, [r9]
 8009ea2:	fa1f fb87 	uxth.w	fp, r7
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	fb0a 330b 	mla	r3, sl, fp, r3
 8009eac:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009eb0:	f8d9 7000 	ldr.w	r7, [r9]
 8009eb4:	4463      	add	r3, ip
 8009eb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009eba:	fb0a c70b 	mla	r7, sl, fp, ip
 8009ebe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ec8:	4572      	cmp	r2, lr
 8009eca:	f849 3b04 	str.w	r3, [r9], #4
 8009ece:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009ed2:	d8e2      	bhi.n	8009e9a <__multiply+0xb2>
 8009ed4:	9b01      	ldr	r3, [sp, #4]
 8009ed6:	f845 c003 	str.w	ip, [r5, r3]
 8009eda:	9b03      	ldr	r3, [sp, #12]
 8009edc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009ee0:	3104      	adds	r1, #4
 8009ee2:	f1b9 0f00 	cmp.w	r9, #0
 8009ee6:	d021      	beq.n	8009f2c <__multiply+0x144>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	f104 0c14 	add.w	ip, r4, #20
 8009eee:	46ae      	mov	lr, r5
 8009ef0:	f04f 0a00 	mov.w	sl, #0
 8009ef4:	f8bc b000 	ldrh.w	fp, [ip]
 8009ef8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009efc:	fb09 770b 	mla	r7, r9, fp, r7
 8009f00:	4457      	add	r7, sl
 8009f02:	b29b      	uxth	r3, r3
 8009f04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009f08:	f84e 3b04 	str.w	r3, [lr], #4
 8009f0c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009f10:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f14:	f8be 3000 	ldrh.w	r3, [lr]
 8009f18:	fb09 330a 	mla	r3, r9, sl, r3
 8009f1c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009f20:	4562      	cmp	r2, ip
 8009f22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f26:	d8e5      	bhi.n	8009ef4 <__multiply+0x10c>
 8009f28:	9f01      	ldr	r7, [sp, #4]
 8009f2a:	51eb      	str	r3, [r5, r7]
 8009f2c:	3504      	adds	r5, #4
 8009f2e:	e799      	b.n	8009e64 <__multiply+0x7c>
 8009f30:	3e01      	subs	r6, #1
 8009f32:	e79b      	b.n	8009e6c <__multiply+0x84>
 8009f34:	0800c43d 	.word	0x0800c43d
 8009f38:	0800c44e 	.word	0x0800c44e

08009f3c <__pow5mult>:
 8009f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f40:	4615      	mov	r5, r2
 8009f42:	f012 0203 	ands.w	r2, r2, #3
 8009f46:	4607      	mov	r7, r0
 8009f48:	460e      	mov	r6, r1
 8009f4a:	d007      	beq.n	8009f5c <__pow5mult+0x20>
 8009f4c:	4c25      	ldr	r4, [pc, #148]	@ (8009fe4 <__pow5mult+0xa8>)
 8009f4e:	3a01      	subs	r2, #1
 8009f50:	2300      	movs	r3, #0
 8009f52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f56:	f7ff fe55 	bl	8009c04 <__multadd>
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	10ad      	asrs	r5, r5, #2
 8009f5e:	d03d      	beq.n	8009fdc <__pow5mult+0xa0>
 8009f60:	69fc      	ldr	r4, [r7, #28]
 8009f62:	b97c      	cbnz	r4, 8009f84 <__pow5mult+0x48>
 8009f64:	2010      	movs	r0, #16
 8009f66:	f7ff fd35 	bl	80099d4 <malloc>
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	61f8      	str	r0, [r7, #28]
 8009f6e:	b928      	cbnz	r0, 8009f7c <__pow5mult+0x40>
 8009f70:	4b1d      	ldr	r3, [pc, #116]	@ (8009fe8 <__pow5mult+0xac>)
 8009f72:	481e      	ldr	r0, [pc, #120]	@ (8009fec <__pow5mult+0xb0>)
 8009f74:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009f78:	f001 fb62 	bl	800b640 <__assert_func>
 8009f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f80:	6004      	str	r4, [r0, #0]
 8009f82:	60c4      	str	r4, [r0, #12]
 8009f84:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f8c:	b94c      	cbnz	r4, 8009fa2 <__pow5mult+0x66>
 8009f8e:	f240 2171 	movw	r1, #625	@ 0x271
 8009f92:	4638      	mov	r0, r7
 8009f94:	f7ff ff12 	bl	8009dbc <__i2b>
 8009f98:	2300      	movs	r3, #0
 8009f9a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009f9e:	4604      	mov	r4, r0
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	f04f 0900 	mov.w	r9, #0
 8009fa6:	07eb      	lsls	r3, r5, #31
 8009fa8:	d50a      	bpl.n	8009fc0 <__pow5mult+0x84>
 8009faa:	4631      	mov	r1, r6
 8009fac:	4622      	mov	r2, r4
 8009fae:	4638      	mov	r0, r7
 8009fb0:	f7ff ff1a 	bl	8009de8 <__multiply>
 8009fb4:	4631      	mov	r1, r6
 8009fb6:	4680      	mov	r8, r0
 8009fb8:	4638      	mov	r0, r7
 8009fba:	f7ff fe01 	bl	8009bc0 <_Bfree>
 8009fbe:	4646      	mov	r6, r8
 8009fc0:	106d      	asrs	r5, r5, #1
 8009fc2:	d00b      	beq.n	8009fdc <__pow5mult+0xa0>
 8009fc4:	6820      	ldr	r0, [r4, #0]
 8009fc6:	b938      	cbnz	r0, 8009fd8 <__pow5mult+0x9c>
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4621      	mov	r1, r4
 8009fcc:	4638      	mov	r0, r7
 8009fce:	f7ff ff0b 	bl	8009de8 <__multiply>
 8009fd2:	6020      	str	r0, [r4, #0]
 8009fd4:	f8c0 9000 	str.w	r9, [r0]
 8009fd8:	4604      	mov	r4, r0
 8009fda:	e7e4      	b.n	8009fa6 <__pow5mult+0x6a>
 8009fdc:	4630      	mov	r0, r6
 8009fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800c4a8 	.word	0x0800c4a8
 8009fe8:	0800c3ce 	.word	0x0800c3ce
 8009fec:	0800c44e 	.word	0x0800c44e

08009ff0 <__lshift>:
 8009ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff4:	460c      	mov	r4, r1
 8009ff6:	6849      	ldr	r1, [r1, #4]
 8009ff8:	6923      	ldr	r3, [r4, #16]
 8009ffa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	4607      	mov	r7, r0
 800a002:	4691      	mov	r9, r2
 800a004:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a008:	f108 0601 	add.w	r6, r8, #1
 800a00c:	42b3      	cmp	r3, r6
 800a00e:	db0b      	blt.n	800a028 <__lshift+0x38>
 800a010:	4638      	mov	r0, r7
 800a012:	f7ff fd95 	bl	8009b40 <_Balloc>
 800a016:	4605      	mov	r5, r0
 800a018:	b948      	cbnz	r0, 800a02e <__lshift+0x3e>
 800a01a:	4602      	mov	r2, r0
 800a01c:	4b28      	ldr	r3, [pc, #160]	@ (800a0c0 <__lshift+0xd0>)
 800a01e:	4829      	ldr	r0, [pc, #164]	@ (800a0c4 <__lshift+0xd4>)
 800a020:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a024:	f001 fb0c 	bl	800b640 <__assert_func>
 800a028:	3101      	adds	r1, #1
 800a02a:	005b      	lsls	r3, r3, #1
 800a02c:	e7ee      	b.n	800a00c <__lshift+0x1c>
 800a02e:	2300      	movs	r3, #0
 800a030:	f100 0114 	add.w	r1, r0, #20
 800a034:	f100 0210 	add.w	r2, r0, #16
 800a038:	4618      	mov	r0, r3
 800a03a:	4553      	cmp	r3, sl
 800a03c:	db33      	blt.n	800a0a6 <__lshift+0xb6>
 800a03e:	6920      	ldr	r0, [r4, #16]
 800a040:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a044:	f104 0314 	add.w	r3, r4, #20
 800a048:	f019 091f 	ands.w	r9, r9, #31
 800a04c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a050:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a054:	d02b      	beq.n	800a0ae <__lshift+0xbe>
 800a056:	f1c9 0e20 	rsb	lr, r9, #32
 800a05a:	468a      	mov	sl, r1
 800a05c:	2200      	movs	r2, #0
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	fa00 f009 	lsl.w	r0, r0, r9
 800a064:	4310      	orrs	r0, r2
 800a066:	f84a 0b04 	str.w	r0, [sl], #4
 800a06a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a06e:	459c      	cmp	ip, r3
 800a070:	fa22 f20e 	lsr.w	r2, r2, lr
 800a074:	d8f3      	bhi.n	800a05e <__lshift+0x6e>
 800a076:	ebac 0304 	sub.w	r3, ip, r4
 800a07a:	3b15      	subs	r3, #21
 800a07c:	f023 0303 	bic.w	r3, r3, #3
 800a080:	3304      	adds	r3, #4
 800a082:	f104 0015 	add.w	r0, r4, #21
 800a086:	4584      	cmp	ip, r0
 800a088:	bf38      	it	cc
 800a08a:	2304      	movcc	r3, #4
 800a08c:	50ca      	str	r2, [r1, r3]
 800a08e:	b10a      	cbz	r2, 800a094 <__lshift+0xa4>
 800a090:	f108 0602 	add.w	r6, r8, #2
 800a094:	3e01      	subs	r6, #1
 800a096:	4638      	mov	r0, r7
 800a098:	612e      	str	r6, [r5, #16]
 800a09a:	4621      	mov	r1, r4
 800a09c:	f7ff fd90 	bl	8009bc0 <_Bfree>
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	e7c5      	b.n	800a03a <__lshift+0x4a>
 800a0ae:	3904      	subs	r1, #4
 800a0b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0b8:	459c      	cmp	ip, r3
 800a0ba:	d8f9      	bhi.n	800a0b0 <__lshift+0xc0>
 800a0bc:	e7ea      	b.n	800a094 <__lshift+0xa4>
 800a0be:	bf00      	nop
 800a0c0:	0800c43d 	.word	0x0800c43d
 800a0c4:	0800c44e 	.word	0x0800c44e

0800a0c8 <__mcmp>:
 800a0c8:	690a      	ldr	r2, [r1, #16]
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	6900      	ldr	r0, [r0, #16]
 800a0ce:	1a80      	subs	r0, r0, r2
 800a0d0:	b530      	push	{r4, r5, lr}
 800a0d2:	d10e      	bne.n	800a0f2 <__mcmp+0x2a>
 800a0d4:	3314      	adds	r3, #20
 800a0d6:	3114      	adds	r1, #20
 800a0d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a0dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a0e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0e8:	4295      	cmp	r5, r2
 800a0ea:	d003      	beq.n	800a0f4 <__mcmp+0x2c>
 800a0ec:	d205      	bcs.n	800a0fa <__mcmp+0x32>
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f2:	bd30      	pop	{r4, r5, pc}
 800a0f4:	42a3      	cmp	r3, r4
 800a0f6:	d3f3      	bcc.n	800a0e0 <__mcmp+0x18>
 800a0f8:	e7fb      	b.n	800a0f2 <__mcmp+0x2a>
 800a0fa:	2001      	movs	r0, #1
 800a0fc:	e7f9      	b.n	800a0f2 <__mcmp+0x2a>
	...

0800a100 <__mdiff>:
 800a100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	4689      	mov	r9, r1
 800a106:	4606      	mov	r6, r0
 800a108:	4611      	mov	r1, r2
 800a10a:	4648      	mov	r0, r9
 800a10c:	4614      	mov	r4, r2
 800a10e:	f7ff ffdb 	bl	800a0c8 <__mcmp>
 800a112:	1e05      	subs	r5, r0, #0
 800a114:	d112      	bne.n	800a13c <__mdiff+0x3c>
 800a116:	4629      	mov	r1, r5
 800a118:	4630      	mov	r0, r6
 800a11a:	f7ff fd11 	bl	8009b40 <_Balloc>
 800a11e:	4602      	mov	r2, r0
 800a120:	b928      	cbnz	r0, 800a12e <__mdiff+0x2e>
 800a122:	4b3f      	ldr	r3, [pc, #252]	@ (800a220 <__mdiff+0x120>)
 800a124:	f240 2137 	movw	r1, #567	@ 0x237
 800a128:	483e      	ldr	r0, [pc, #248]	@ (800a224 <__mdiff+0x124>)
 800a12a:	f001 fa89 	bl	800b640 <__assert_func>
 800a12e:	2301      	movs	r3, #1
 800a130:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a134:	4610      	mov	r0, r2
 800a136:	b003      	add	sp, #12
 800a138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13c:	bfbc      	itt	lt
 800a13e:	464b      	movlt	r3, r9
 800a140:	46a1      	movlt	r9, r4
 800a142:	4630      	mov	r0, r6
 800a144:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a148:	bfba      	itte	lt
 800a14a:	461c      	movlt	r4, r3
 800a14c:	2501      	movlt	r5, #1
 800a14e:	2500      	movge	r5, #0
 800a150:	f7ff fcf6 	bl	8009b40 <_Balloc>
 800a154:	4602      	mov	r2, r0
 800a156:	b918      	cbnz	r0, 800a160 <__mdiff+0x60>
 800a158:	4b31      	ldr	r3, [pc, #196]	@ (800a220 <__mdiff+0x120>)
 800a15a:	f240 2145 	movw	r1, #581	@ 0x245
 800a15e:	e7e3      	b.n	800a128 <__mdiff+0x28>
 800a160:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a164:	6926      	ldr	r6, [r4, #16]
 800a166:	60c5      	str	r5, [r0, #12]
 800a168:	f109 0310 	add.w	r3, r9, #16
 800a16c:	f109 0514 	add.w	r5, r9, #20
 800a170:	f104 0e14 	add.w	lr, r4, #20
 800a174:	f100 0b14 	add.w	fp, r0, #20
 800a178:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a17c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a180:	9301      	str	r3, [sp, #4]
 800a182:	46d9      	mov	r9, fp
 800a184:	f04f 0c00 	mov.w	ip, #0
 800a188:	9b01      	ldr	r3, [sp, #4]
 800a18a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a18e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a192:	9301      	str	r3, [sp, #4]
 800a194:	fa1f f38a 	uxth.w	r3, sl
 800a198:	4619      	mov	r1, r3
 800a19a:	b283      	uxth	r3, r0
 800a19c:	1acb      	subs	r3, r1, r3
 800a19e:	0c00      	lsrs	r0, r0, #16
 800a1a0:	4463      	add	r3, ip
 800a1a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a1a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a1b0:	4576      	cmp	r6, lr
 800a1b2:	f849 3b04 	str.w	r3, [r9], #4
 800a1b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a1ba:	d8e5      	bhi.n	800a188 <__mdiff+0x88>
 800a1bc:	1b33      	subs	r3, r6, r4
 800a1be:	3b15      	subs	r3, #21
 800a1c0:	f023 0303 	bic.w	r3, r3, #3
 800a1c4:	3415      	adds	r4, #21
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	42a6      	cmp	r6, r4
 800a1ca:	bf38      	it	cc
 800a1cc:	2304      	movcc	r3, #4
 800a1ce:	441d      	add	r5, r3
 800a1d0:	445b      	add	r3, fp
 800a1d2:	461e      	mov	r6, r3
 800a1d4:	462c      	mov	r4, r5
 800a1d6:	4544      	cmp	r4, r8
 800a1d8:	d30e      	bcc.n	800a1f8 <__mdiff+0xf8>
 800a1da:	f108 0103 	add.w	r1, r8, #3
 800a1de:	1b49      	subs	r1, r1, r5
 800a1e0:	f021 0103 	bic.w	r1, r1, #3
 800a1e4:	3d03      	subs	r5, #3
 800a1e6:	45a8      	cmp	r8, r5
 800a1e8:	bf38      	it	cc
 800a1ea:	2100      	movcc	r1, #0
 800a1ec:	440b      	add	r3, r1
 800a1ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1f2:	b191      	cbz	r1, 800a21a <__mdiff+0x11a>
 800a1f4:	6117      	str	r7, [r2, #16]
 800a1f6:	e79d      	b.n	800a134 <__mdiff+0x34>
 800a1f8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a1fc:	46e6      	mov	lr, ip
 800a1fe:	0c08      	lsrs	r0, r1, #16
 800a200:	fa1c fc81 	uxtah	ip, ip, r1
 800a204:	4471      	add	r1, lr
 800a206:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a20a:	b289      	uxth	r1, r1
 800a20c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a210:	f846 1b04 	str.w	r1, [r6], #4
 800a214:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a218:	e7dd      	b.n	800a1d6 <__mdiff+0xd6>
 800a21a:	3f01      	subs	r7, #1
 800a21c:	e7e7      	b.n	800a1ee <__mdiff+0xee>
 800a21e:	bf00      	nop
 800a220:	0800c43d 	.word	0x0800c43d
 800a224:	0800c44e 	.word	0x0800c44e

0800a228 <__ulp>:
 800a228:	b082      	sub	sp, #8
 800a22a:	ed8d 0b00 	vstr	d0, [sp]
 800a22e:	9a01      	ldr	r2, [sp, #4]
 800a230:	4b0f      	ldr	r3, [pc, #60]	@ (800a270 <__ulp+0x48>)
 800a232:	4013      	ands	r3, r2
 800a234:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	dc08      	bgt.n	800a24e <__ulp+0x26>
 800a23c:	425b      	negs	r3, r3
 800a23e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a242:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a246:	da04      	bge.n	800a252 <__ulp+0x2a>
 800a248:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a24c:	4113      	asrs	r3, r2
 800a24e:	2200      	movs	r2, #0
 800a250:	e008      	b.n	800a264 <__ulp+0x3c>
 800a252:	f1a2 0314 	sub.w	r3, r2, #20
 800a256:	2b1e      	cmp	r3, #30
 800a258:	bfda      	itte	le
 800a25a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a25e:	40da      	lsrle	r2, r3
 800a260:	2201      	movgt	r2, #1
 800a262:	2300      	movs	r3, #0
 800a264:	4619      	mov	r1, r3
 800a266:	4610      	mov	r0, r2
 800a268:	ec41 0b10 	vmov	d0, r0, r1
 800a26c:	b002      	add	sp, #8
 800a26e:	4770      	bx	lr
 800a270:	7ff00000 	.word	0x7ff00000

0800a274 <__b2d>:
 800a274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a278:	6906      	ldr	r6, [r0, #16]
 800a27a:	f100 0814 	add.w	r8, r0, #20
 800a27e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a282:	1f37      	subs	r7, r6, #4
 800a284:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a288:	4610      	mov	r0, r2
 800a28a:	f7ff fd4b 	bl	8009d24 <__hi0bits>
 800a28e:	f1c0 0320 	rsb	r3, r0, #32
 800a292:	280a      	cmp	r0, #10
 800a294:	600b      	str	r3, [r1, #0]
 800a296:	491b      	ldr	r1, [pc, #108]	@ (800a304 <__b2d+0x90>)
 800a298:	dc15      	bgt.n	800a2c6 <__b2d+0x52>
 800a29a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a29e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a2a2:	45b8      	cmp	r8, r7
 800a2a4:	ea43 0501 	orr.w	r5, r3, r1
 800a2a8:	bf34      	ite	cc
 800a2aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a2ae:	2300      	movcs	r3, #0
 800a2b0:	3015      	adds	r0, #21
 800a2b2:	fa02 f000 	lsl.w	r0, r2, r0
 800a2b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a2ba:	4303      	orrs	r3, r0
 800a2bc:	461c      	mov	r4, r3
 800a2be:	ec45 4b10 	vmov	d0, r4, r5
 800a2c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2c6:	45b8      	cmp	r8, r7
 800a2c8:	bf3a      	itte	cc
 800a2ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a2ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800a2d2:	2300      	movcs	r3, #0
 800a2d4:	380b      	subs	r0, #11
 800a2d6:	d012      	beq.n	800a2fe <__b2d+0x8a>
 800a2d8:	f1c0 0120 	rsb	r1, r0, #32
 800a2dc:	fa23 f401 	lsr.w	r4, r3, r1
 800a2e0:	4082      	lsls	r2, r0
 800a2e2:	4322      	orrs	r2, r4
 800a2e4:	4547      	cmp	r7, r8
 800a2e6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a2ea:	bf8c      	ite	hi
 800a2ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a2f0:	2200      	movls	r2, #0
 800a2f2:	4083      	lsls	r3, r0
 800a2f4:	40ca      	lsrs	r2, r1
 800a2f6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a2fa:	4313      	orrs	r3, r2
 800a2fc:	e7de      	b.n	800a2bc <__b2d+0x48>
 800a2fe:	ea42 0501 	orr.w	r5, r2, r1
 800a302:	e7db      	b.n	800a2bc <__b2d+0x48>
 800a304:	3ff00000 	.word	0x3ff00000

0800a308 <__d2b>:
 800a308:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a30c:	460f      	mov	r7, r1
 800a30e:	2101      	movs	r1, #1
 800a310:	ec59 8b10 	vmov	r8, r9, d0
 800a314:	4616      	mov	r6, r2
 800a316:	f7ff fc13 	bl	8009b40 <_Balloc>
 800a31a:	4604      	mov	r4, r0
 800a31c:	b930      	cbnz	r0, 800a32c <__d2b+0x24>
 800a31e:	4602      	mov	r2, r0
 800a320:	4b23      	ldr	r3, [pc, #140]	@ (800a3b0 <__d2b+0xa8>)
 800a322:	4824      	ldr	r0, [pc, #144]	@ (800a3b4 <__d2b+0xac>)
 800a324:	f240 310f 	movw	r1, #783	@ 0x30f
 800a328:	f001 f98a 	bl	800b640 <__assert_func>
 800a32c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a330:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a334:	b10d      	cbz	r5, 800a33a <__d2b+0x32>
 800a336:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a33a:	9301      	str	r3, [sp, #4]
 800a33c:	f1b8 0300 	subs.w	r3, r8, #0
 800a340:	d023      	beq.n	800a38a <__d2b+0x82>
 800a342:	4668      	mov	r0, sp
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	f7ff fd0c 	bl	8009d62 <__lo0bits>
 800a34a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a34e:	b1d0      	cbz	r0, 800a386 <__d2b+0x7e>
 800a350:	f1c0 0320 	rsb	r3, r0, #32
 800a354:	fa02 f303 	lsl.w	r3, r2, r3
 800a358:	430b      	orrs	r3, r1
 800a35a:	40c2      	lsrs	r2, r0
 800a35c:	6163      	str	r3, [r4, #20]
 800a35e:	9201      	str	r2, [sp, #4]
 800a360:	9b01      	ldr	r3, [sp, #4]
 800a362:	61a3      	str	r3, [r4, #24]
 800a364:	2b00      	cmp	r3, #0
 800a366:	bf0c      	ite	eq
 800a368:	2201      	moveq	r2, #1
 800a36a:	2202      	movne	r2, #2
 800a36c:	6122      	str	r2, [r4, #16]
 800a36e:	b1a5      	cbz	r5, 800a39a <__d2b+0x92>
 800a370:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a374:	4405      	add	r5, r0
 800a376:	603d      	str	r5, [r7, #0]
 800a378:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a37c:	6030      	str	r0, [r6, #0]
 800a37e:	4620      	mov	r0, r4
 800a380:	b003      	add	sp, #12
 800a382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a386:	6161      	str	r1, [r4, #20]
 800a388:	e7ea      	b.n	800a360 <__d2b+0x58>
 800a38a:	a801      	add	r0, sp, #4
 800a38c:	f7ff fce9 	bl	8009d62 <__lo0bits>
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	6163      	str	r3, [r4, #20]
 800a394:	3020      	adds	r0, #32
 800a396:	2201      	movs	r2, #1
 800a398:	e7e8      	b.n	800a36c <__d2b+0x64>
 800a39a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a39e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a3a2:	6038      	str	r0, [r7, #0]
 800a3a4:	6918      	ldr	r0, [r3, #16]
 800a3a6:	f7ff fcbd 	bl	8009d24 <__hi0bits>
 800a3aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a3ae:	e7e5      	b.n	800a37c <__d2b+0x74>
 800a3b0:	0800c43d 	.word	0x0800c43d
 800a3b4:	0800c44e 	.word	0x0800c44e

0800a3b8 <__ratio>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	b085      	sub	sp, #20
 800a3be:	e9cd 1000 	strd	r1, r0, [sp]
 800a3c2:	a902      	add	r1, sp, #8
 800a3c4:	f7ff ff56 	bl	800a274 <__b2d>
 800a3c8:	9800      	ldr	r0, [sp, #0]
 800a3ca:	a903      	add	r1, sp, #12
 800a3cc:	ec55 4b10 	vmov	r4, r5, d0
 800a3d0:	f7ff ff50 	bl	800a274 <__b2d>
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	6919      	ldr	r1, [r3, #16]
 800a3d8:	9b00      	ldr	r3, [sp, #0]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	1ac9      	subs	r1, r1, r3
 800a3de:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a3e2:	1a9b      	subs	r3, r3, r2
 800a3e4:	ec5b ab10 	vmov	sl, fp, d0
 800a3e8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	bfce      	itee	gt
 800a3f0:	462a      	movgt	r2, r5
 800a3f2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a3f6:	465a      	movle	r2, fp
 800a3f8:	462f      	mov	r7, r5
 800a3fa:	46d9      	mov	r9, fp
 800a3fc:	bfcc      	ite	gt
 800a3fe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a402:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a406:	464b      	mov	r3, r9
 800a408:	4652      	mov	r2, sl
 800a40a:	4620      	mov	r0, r4
 800a40c:	4639      	mov	r1, r7
 800a40e:	f7f6 fa45 	bl	800089c <__aeabi_ddiv>
 800a412:	ec41 0b10 	vmov	d0, r0, r1
 800a416:	b005      	add	sp, #20
 800a418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a41c <__copybits>:
 800a41c:	3901      	subs	r1, #1
 800a41e:	b570      	push	{r4, r5, r6, lr}
 800a420:	1149      	asrs	r1, r1, #5
 800a422:	6914      	ldr	r4, [r2, #16]
 800a424:	3101      	adds	r1, #1
 800a426:	f102 0314 	add.w	r3, r2, #20
 800a42a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a42e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a432:	1f05      	subs	r5, r0, #4
 800a434:	42a3      	cmp	r3, r4
 800a436:	d30c      	bcc.n	800a452 <__copybits+0x36>
 800a438:	1aa3      	subs	r3, r4, r2
 800a43a:	3b11      	subs	r3, #17
 800a43c:	f023 0303 	bic.w	r3, r3, #3
 800a440:	3211      	adds	r2, #17
 800a442:	42a2      	cmp	r2, r4
 800a444:	bf88      	it	hi
 800a446:	2300      	movhi	r3, #0
 800a448:	4418      	add	r0, r3
 800a44a:	2300      	movs	r3, #0
 800a44c:	4288      	cmp	r0, r1
 800a44e:	d305      	bcc.n	800a45c <__copybits+0x40>
 800a450:	bd70      	pop	{r4, r5, r6, pc}
 800a452:	f853 6b04 	ldr.w	r6, [r3], #4
 800a456:	f845 6f04 	str.w	r6, [r5, #4]!
 800a45a:	e7eb      	b.n	800a434 <__copybits+0x18>
 800a45c:	f840 3b04 	str.w	r3, [r0], #4
 800a460:	e7f4      	b.n	800a44c <__copybits+0x30>

0800a462 <__any_on>:
 800a462:	f100 0214 	add.w	r2, r0, #20
 800a466:	6900      	ldr	r0, [r0, #16]
 800a468:	114b      	asrs	r3, r1, #5
 800a46a:	4298      	cmp	r0, r3
 800a46c:	b510      	push	{r4, lr}
 800a46e:	db11      	blt.n	800a494 <__any_on+0x32>
 800a470:	dd0a      	ble.n	800a488 <__any_on+0x26>
 800a472:	f011 011f 	ands.w	r1, r1, #31
 800a476:	d007      	beq.n	800a488 <__any_on+0x26>
 800a478:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a47c:	fa24 f001 	lsr.w	r0, r4, r1
 800a480:	fa00 f101 	lsl.w	r1, r0, r1
 800a484:	428c      	cmp	r4, r1
 800a486:	d10b      	bne.n	800a4a0 <__any_on+0x3e>
 800a488:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d803      	bhi.n	800a498 <__any_on+0x36>
 800a490:	2000      	movs	r0, #0
 800a492:	bd10      	pop	{r4, pc}
 800a494:	4603      	mov	r3, r0
 800a496:	e7f7      	b.n	800a488 <__any_on+0x26>
 800a498:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a49c:	2900      	cmp	r1, #0
 800a49e:	d0f5      	beq.n	800a48c <__any_on+0x2a>
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	e7f6      	b.n	800a492 <__any_on+0x30>

0800a4a4 <sulp>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	460d      	mov	r5, r1
 800a4aa:	ec45 4b10 	vmov	d0, r4, r5
 800a4ae:	4616      	mov	r6, r2
 800a4b0:	f7ff feba 	bl	800a228 <__ulp>
 800a4b4:	ec51 0b10 	vmov	r0, r1, d0
 800a4b8:	b17e      	cbz	r6, 800a4da <sulp+0x36>
 800a4ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a4be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	dd09      	ble.n	800a4da <sulp+0x36>
 800a4c6:	051b      	lsls	r3, r3, #20
 800a4c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a4cc:	2400      	movs	r4, #0
 800a4ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a4d2:	4622      	mov	r2, r4
 800a4d4:	462b      	mov	r3, r5
 800a4d6:	f7f6 f8b7 	bl	8000648 <__aeabi_dmul>
 800a4da:	ec41 0b10 	vmov	d0, r0, r1
 800a4de:	bd70      	pop	{r4, r5, r6, pc}

0800a4e0 <_strtod_l>:
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	b09f      	sub	sp, #124	@ 0x7c
 800a4e6:	460c      	mov	r4, r1
 800a4e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800a4ee:	9005      	str	r0, [sp, #20]
 800a4f0:	f04f 0a00 	mov.w	sl, #0
 800a4f4:	f04f 0b00 	mov.w	fp, #0
 800a4f8:	460a      	mov	r2, r1
 800a4fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800a4fc:	7811      	ldrb	r1, [r2, #0]
 800a4fe:	292b      	cmp	r1, #43	@ 0x2b
 800a500:	d04a      	beq.n	800a598 <_strtod_l+0xb8>
 800a502:	d838      	bhi.n	800a576 <_strtod_l+0x96>
 800a504:	290d      	cmp	r1, #13
 800a506:	d832      	bhi.n	800a56e <_strtod_l+0x8e>
 800a508:	2908      	cmp	r1, #8
 800a50a:	d832      	bhi.n	800a572 <_strtod_l+0x92>
 800a50c:	2900      	cmp	r1, #0
 800a50e:	d03b      	beq.n	800a588 <_strtod_l+0xa8>
 800a510:	2200      	movs	r2, #0
 800a512:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a514:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a516:	782a      	ldrb	r2, [r5, #0]
 800a518:	2a30      	cmp	r2, #48	@ 0x30
 800a51a:	f040 80b3 	bne.w	800a684 <_strtod_l+0x1a4>
 800a51e:	786a      	ldrb	r2, [r5, #1]
 800a520:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a524:	2a58      	cmp	r2, #88	@ 0x58
 800a526:	d16e      	bne.n	800a606 <_strtod_l+0x126>
 800a528:	9302      	str	r3, [sp, #8]
 800a52a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a52c:	9301      	str	r3, [sp, #4]
 800a52e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a530:	9300      	str	r3, [sp, #0]
 800a532:	4a8e      	ldr	r2, [pc, #568]	@ (800a76c <_strtod_l+0x28c>)
 800a534:	9805      	ldr	r0, [sp, #20]
 800a536:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a538:	a919      	add	r1, sp, #100	@ 0x64
 800a53a:	f001 f91b 	bl	800b774 <__gethex>
 800a53e:	f010 060f 	ands.w	r6, r0, #15
 800a542:	4604      	mov	r4, r0
 800a544:	d005      	beq.n	800a552 <_strtod_l+0x72>
 800a546:	2e06      	cmp	r6, #6
 800a548:	d128      	bne.n	800a59c <_strtod_l+0xbc>
 800a54a:	3501      	adds	r5, #1
 800a54c:	2300      	movs	r3, #0
 800a54e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a550:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a552:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a554:	2b00      	cmp	r3, #0
 800a556:	f040 858e 	bne.w	800b076 <_strtod_l+0xb96>
 800a55a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a55c:	b1cb      	cbz	r3, 800a592 <_strtod_l+0xb2>
 800a55e:	4652      	mov	r2, sl
 800a560:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a564:	ec43 2b10 	vmov	d0, r2, r3
 800a568:	b01f      	add	sp, #124	@ 0x7c
 800a56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56e:	2920      	cmp	r1, #32
 800a570:	d1ce      	bne.n	800a510 <_strtod_l+0x30>
 800a572:	3201      	adds	r2, #1
 800a574:	e7c1      	b.n	800a4fa <_strtod_l+0x1a>
 800a576:	292d      	cmp	r1, #45	@ 0x2d
 800a578:	d1ca      	bne.n	800a510 <_strtod_l+0x30>
 800a57a:	2101      	movs	r1, #1
 800a57c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a57e:	1c51      	adds	r1, r2, #1
 800a580:	9119      	str	r1, [sp, #100]	@ 0x64
 800a582:	7852      	ldrb	r2, [r2, #1]
 800a584:	2a00      	cmp	r2, #0
 800a586:	d1c5      	bne.n	800a514 <_strtod_l+0x34>
 800a588:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a58a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 8570 	bne.w	800b072 <_strtod_l+0xb92>
 800a592:	4652      	mov	r2, sl
 800a594:	465b      	mov	r3, fp
 800a596:	e7e5      	b.n	800a564 <_strtod_l+0x84>
 800a598:	2100      	movs	r1, #0
 800a59a:	e7ef      	b.n	800a57c <_strtod_l+0x9c>
 800a59c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a59e:	b13a      	cbz	r2, 800a5b0 <_strtod_l+0xd0>
 800a5a0:	2135      	movs	r1, #53	@ 0x35
 800a5a2:	a81c      	add	r0, sp, #112	@ 0x70
 800a5a4:	f7ff ff3a 	bl	800a41c <__copybits>
 800a5a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5aa:	9805      	ldr	r0, [sp, #20]
 800a5ac:	f7ff fb08 	bl	8009bc0 <_Bfree>
 800a5b0:	3e01      	subs	r6, #1
 800a5b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a5b4:	2e04      	cmp	r6, #4
 800a5b6:	d806      	bhi.n	800a5c6 <_strtod_l+0xe6>
 800a5b8:	e8df f006 	tbb	[pc, r6]
 800a5bc:	201d0314 	.word	0x201d0314
 800a5c0:	14          	.byte	0x14
 800a5c1:	00          	.byte	0x00
 800a5c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a5c6:	05e1      	lsls	r1, r4, #23
 800a5c8:	bf48      	it	mi
 800a5ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a5ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a5d2:	0d1b      	lsrs	r3, r3, #20
 800a5d4:	051b      	lsls	r3, r3, #20
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d1bb      	bne.n	800a552 <_strtod_l+0x72>
 800a5da:	f7fe fb23 	bl	8008c24 <__errno>
 800a5de:	2322      	movs	r3, #34	@ 0x22
 800a5e0:	6003      	str	r3, [r0, #0]
 800a5e2:	e7b6      	b.n	800a552 <_strtod_l+0x72>
 800a5e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a5e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a5ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a5f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a5f4:	e7e7      	b.n	800a5c6 <_strtod_l+0xe6>
 800a5f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a774 <_strtod_l+0x294>
 800a5fa:	e7e4      	b.n	800a5c6 <_strtod_l+0xe6>
 800a5fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a600:	f04f 3aff 	mov.w	sl, #4294967295
 800a604:	e7df      	b.n	800a5c6 <_strtod_l+0xe6>
 800a606:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a608:	1c5a      	adds	r2, r3, #1
 800a60a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a60c:	785b      	ldrb	r3, [r3, #1]
 800a60e:	2b30      	cmp	r3, #48	@ 0x30
 800a610:	d0f9      	beq.n	800a606 <_strtod_l+0x126>
 800a612:	2b00      	cmp	r3, #0
 800a614:	d09d      	beq.n	800a552 <_strtod_l+0x72>
 800a616:	2301      	movs	r3, #1
 800a618:	9309      	str	r3, [sp, #36]	@ 0x24
 800a61a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a61c:	930c      	str	r3, [sp, #48]	@ 0x30
 800a61e:	2300      	movs	r3, #0
 800a620:	9308      	str	r3, [sp, #32]
 800a622:	930a      	str	r3, [sp, #40]	@ 0x28
 800a624:	461f      	mov	r7, r3
 800a626:	220a      	movs	r2, #10
 800a628:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a62a:	7805      	ldrb	r5, [r0, #0]
 800a62c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a630:	b2d9      	uxtb	r1, r3
 800a632:	2909      	cmp	r1, #9
 800a634:	d928      	bls.n	800a688 <_strtod_l+0x1a8>
 800a636:	494e      	ldr	r1, [pc, #312]	@ (800a770 <_strtod_l+0x290>)
 800a638:	2201      	movs	r2, #1
 800a63a:	f000 ffd5 	bl	800b5e8 <strncmp>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d032      	beq.n	800a6a8 <_strtod_l+0x1c8>
 800a642:	2000      	movs	r0, #0
 800a644:	462a      	mov	r2, r5
 800a646:	4681      	mov	r9, r0
 800a648:	463d      	mov	r5, r7
 800a64a:	4603      	mov	r3, r0
 800a64c:	2a65      	cmp	r2, #101	@ 0x65
 800a64e:	d001      	beq.n	800a654 <_strtod_l+0x174>
 800a650:	2a45      	cmp	r2, #69	@ 0x45
 800a652:	d114      	bne.n	800a67e <_strtod_l+0x19e>
 800a654:	b91d      	cbnz	r5, 800a65e <_strtod_l+0x17e>
 800a656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a658:	4302      	orrs	r2, r0
 800a65a:	d095      	beq.n	800a588 <_strtod_l+0xa8>
 800a65c:	2500      	movs	r5, #0
 800a65e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a660:	1c62      	adds	r2, r4, #1
 800a662:	9219      	str	r2, [sp, #100]	@ 0x64
 800a664:	7862      	ldrb	r2, [r4, #1]
 800a666:	2a2b      	cmp	r2, #43	@ 0x2b
 800a668:	d077      	beq.n	800a75a <_strtod_l+0x27a>
 800a66a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a66c:	d07b      	beq.n	800a766 <_strtod_l+0x286>
 800a66e:	f04f 0c00 	mov.w	ip, #0
 800a672:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a676:	2909      	cmp	r1, #9
 800a678:	f240 8082 	bls.w	800a780 <_strtod_l+0x2a0>
 800a67c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a67e:	f04f 0800 	mov.w	r8, #0
 800a682:	e0a2      	b.n	800a7ca <_strtod_l+0x2ea>
 800a684:	2300      	movs	r3, #0
 800a686:	e7c7      	b.n	800a618 <_strtod_l+0x138>
 800a688:	2f08      	cmp	r7, #8
 800a68a:	bfd5      	itete	le
 800a68c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a68e:	9908      	ldrgt	r1, [sp, #32]
 800a690:	fb02 3301 	mlale	r3, r2, r1, r3
 800a694:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a698:	f100 0001 	add.w	r0, r0, #1
 800a69c:	bfd4      	ite	le
 800a69e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a6a0:	9308      	strgt	r3, [sp, #32]
 800a6a2:	3701      	adds	r7, #1
 800a6a4:	9019      	str	r0, [sp, #100]	@ 0x64
 800a6a6:	e7bf      	b.n	800a628 <_strtod_l+0x148>
 800a6a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6aa:	1c5a      	adds	r2, r3, #1
 800a6ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6ae:	785a      	ldrb	r2, [r3, #1]
 800a6b0:	b37f      	cbz	r7, 800a712 <_strtod_l+0x232>
 800a6b2:	4681      	mov	r9, r0
 800a6b4:	463d      	mov	r5, r7
 800a6b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a6ba:	2b09      	cmp	r3, #9
 800a6bc:	d912      	bls.n	800a6e4 <_strtod_l+0x204>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e7c4      	b.n	800a64c <_strtod_l+0x16c>
 800a6c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a6c8:	785a      	ldrb	r2, [r3, #1]
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	2a30      	cmp	r2, #48	@ 0x30
 800a6ce:	d0f8      	beq.n	800a6c2 <_strtod_l+0x1e2>
 800a6d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a6d4:	2b08      	cmp	r3, #8
 800a6d6:	f200 84d3 	bhi.w	800b080 <_strtod_l+0xba0>
 800a6da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a6dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a6de:	4681      	mov	r9, r0
 800a6e0:	2000      	movs	r0, #0
 800a6e2:	4605      	mov	r5, r0
 800a6e4:	3a30      	subs	r2, #48	@ 0x30
 800a6e6:	f100 0301 	add.w	r3, r0, #1
 800a6ea:	d02a      	beq.n	800a742 <_strtod_l+0x262>
 800a6ec:	4499      	add	r9, r3
 800a6ee:	eb00 0c05 	add.w	ip, r0, r5
 800a6f2:	462b      	mov	r3, r5
 800a6f4:	210a      	movs	r1, #10
 800a6f6:	4563      	cmp	r3, ip
 800a6f8:	d10d      	bne.n	800a716 <_strtod_l+0x236>
 800a6fa:	1c69      	adds	r1, r5, #1
 800a6fc:	4401      	add	r1, r0
 800a6fe:	4428      	add	r0, r5
 800a700:	2808      	cmp	r0, #8
 800a702:	dc16      	bgt.n	800a732 <_strtod_l+0x252>
 800a704:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a706:	230a      	movs	r3, #10
 800a708:	fb03 2300 	mla	r3, r3, r0, r2
 800a70c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a70e:	2300      	movs	r3, #0
 800a710:	e018      	b.n	800a744 <_strtod_l+0x264>
 800a712:	4638      	mov	r0, r7
 800a714:	e7da      	b.n	800a6cc <_strtod_l+0x1ec>
 800a716:	2b08      	cmp	r3, #8
 800a718:	f103 0301 	add.w	r3, r3, #1
 800a71c:	dc03      	bgt.n	800a726 <_strtod_l+0x246>
 800a71e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a720:	434e      	muls	r6, r1
 800a722:	960a      	str	r6, [sp, #40]	@ 0x28
 800a724:	e7e7      	b.n	800a6f6 <_strtod_l+0x216>
 800a726:	2b10      	cmp	r3, #16
 800a728:	bfde      	ittt	le
 800a72a:	9e08      	ldrle	r6, [sp, #32]
 800a72c:	434e      	mulle	r6, r1
 800a72e:	9608      	strle	r6, [sp, #32]
 800a730:	e7e1      	b.n	800a6f6 <_strtod_l+0x216>
 800a732:	280f      	cmp	r0, #15
 800a734:	dceb      	bgt.n	800a70e <_strtod_l+0x22e>
 800a736:	9808      	ldr	r0, [sp, #32]
 800a738:	230a      	movs	r3, #10
 800a73a:	fb03 2300 	mla	r3, r3, r0, r2
 800a73e:	9308      	str	r3, [sp, #32]
 800a740:	e7e5      	b.n	800a70e <_strtod_l+0x22e>
 800a742:	4629      	mov	r1, r5
 800a744:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a746:	1c50      	adds	r0, r2, #1
 800a748:	9019      	str	r0, [sp, #100]	@ 0x64
 800a74a:	7852      	ldrb	r2, [r2, #1]
 800a74c:	4618      	mov	r0, r3
 800a74e:	460d      	mov	r5, r1
 800a750:	e7b1      	b.n	800a6b6 <_strtod_l+0x1d6>
 800a752:	f04f 0900 	mov.w	r9, #0
 800a756:	2301      	movs	r3, #1
 800a758:	e77d      	b.n	800a656 <_strtod_l+0x176>
 800a75a:	f04f 0c00 	mov.w	ip, #0
 800a75e:	1ca2      	adds	r2, r4, #2
 800a760:	9219      	str	r2, [sp, #100]	@ 0x64
 800a762:	78a2      	ldrb	r2, [r4, #2]
 800a764:	e785      	b.n	800a672 <_strtod_l+0x192>
 800a766:	f04f 0c01 	mov.w	ip, #1
 800a76a:	e7f8      	b.n	800a75e <_strtod_l+0x27e>
 800a76c:	0800c5c0 	.word	0x0800c5c0
 800a770:	0800c5a8 	.word	0x0800c5a8
 800a774:	7ff00000 	.word	0x7ff00000
 800a778:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a77a:	1c51      	adds	r1, r2, #1
 800a77c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a77e:	7852      	ldrb	r2, [r2, #1]
 800a780:	2a30      	cmp	r2, #48	@ 0x30
 800a782:	d0f9      	beq.n	800a778 <_strtod_l+0x298>
 800a784:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a788:	2908      	cmp	r1, #8
 800a78a:	f63f af78 	bhi.w	800a67e <_strtod_l+0x19e>
 800a78e:	3a30      	subs	r2, #48	@ 0x30
 800a790:	920e      	str	r2, [sp, #56]	@ 0x38
 800a792:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a794:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a796:	f04f 080a 	mov.w	r8, #10
 800a79a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a79c:	1c56      	adds	r6, r2, #1
 800a79e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a7a0:	7852      	ldrb	r2, [r2, #1]
 800a7a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a7a6:	f1be 0f09 	cmp.w	lr, #9
 800a7aa:	d939      	bls.n	800a820 <_strtod_l+0x340>
 800a7ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a7ae:	1a76      	subs	r6, r6, r1
 800a7b0:	2e08      	cmp	r6, #8
 800a7b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a7b6:	dc03      	bgt.n	800a7c0 <_strtod_l+0x2e0>
 800a7b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a7ba:	4588      	cmp	r8, r1
 800a7bc:	bfa8      	it	ge
 800a7be:	4688      	movge	r8, r1
 800a7c0:	f1bc 0f00 	cmp.w	ip, #0
 800a7c4:	d001      	beq.n	800a7ca <_strtod_l+0x2ea>
 800a7c6:	f1c8 0800 	rsb	r8, r8, #0
 800a7ca:	2d00      	cmp	r5, #0
 800a7cc:	d14e      	bne.n	800a86c <_strtod_l+0x38c>
 800a7ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a7d0:	4308      	orrs	r0, r1
 800a7d2:	f47f aebe 	bne.w	800a552 <_strtod_l+0x72>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	f47f aed6 	bne.w	800a588 <_strtod_l+0xa8>
 800a7dc:	2a69      	cmp	r2, #105	@ 0x69
 800a7de:	d028      	beq.n	800a832 <_strtod_l+0x352>
 800a7e0:	dc25      	bgt.n	800a82e <_strtod_l+0x34e>
 800a7e2:	2a49      	cmp	r2, #73	@ 0x49
 800a7e4:	d025      	beq.n	800a832 <_strtod_l+0x352>
 800a7e6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a7e8:	f47f aece 	bne.w	800a588 <_strtod_l+0xa8>
 800a7ec:	499b      	ldr	r1, [pc, #620]	@ (800aa5c <_strtod_l+0x57c>)
 800a7ee:	a819      	add	r0, sp, #100	@ 0x64
 800a7f0:	f001 f9e2 	bl	800bbb8 <__match>
 800a7f4:	2800      	cmp	r0, #0
 800a7f6:	f43f aec7 	beq.w	800a588 <_strtod_l+0xa8>
 800a7fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	2b28      	cmp	r3, #40	@ 0x28
 800a800:	d12e      	bne.n	800a860 <_strtod_l+0x380>
 800a802:	4997      	ldr	r1, [pc, #604]	@ (800aa60 <_strtod_l+0x580>)
 800a804:	aa1c      	add	r2, sp, #112	@ 0x70
 800a806:	a819      	add	r0, sp, #100	@ 0x64
 800a808:	f001 f9ea 	bl	800bbe0 <__hexnan>
 800a80c:	2805      	cmp	r0, #5
 800a80e:	d127      	bne.n	800a860 <_strtod_l+0x380>
 800a810:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a812:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a816:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a81a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a81e:	e698      	b.n	800a552 <_strtod_l+0x72>
 800a820:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a822:	fb08 2101 	mla	r1, r8, r1, r2
 800a826:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a82a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a82c:	e7b5      	b.n	800a79a <_strtod_l+0x2ba>
 800a82e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a830:	e7da      	b.n	800a7e8 <_strtod_l+0x308>
 800a832:	498c      	ldr	r1, [pc, #560]	@ (800aa64 <_strtod_l+0x584>)
 800a834:	a819      	add	r0, sp, #100	@ 0x64
 800a836:	f001 f9bf 	bl	800bbb8 <__match>
 800a83a:	2800      	cmp	r0, #0
 800a83c:	f43f aea4 	beq.w	800a588 <_strtod_l+0xa8>
 800a840:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a842:	4989      	ldr	r1, [pc, #548]	@ (800aa68 <_strtod_l+0x588>)
 800a844:	3b01      	subs	r3, #1
 800a846:	a819      	add	r0, sp, #100	@ 0x64
 800a848:	9319      	str	r3, [sp, #100]	@ 0x64
 800a84a:	f001 f9b5 	bl	800bbb8 <__match>
 800a84e:	b910      	cbnz	r0, 800a856 <_strtod_l+0x376>
 800a850:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a852:	3301      	adds	r3, #1
 800a854:	9319      	str	r3, [sp, #100]	@ 0x64
 800a856:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800aa78 <_strtod_l+0x598>
 800a85a:	f04f 0a00 	mov.w	sl, #0
 800a85e:	e678      	b.n	800a552 <_strtod_l+0x72>
 800a860:	4882      	ldr	r0, [pc, #520]	@ (800aa6c <_strtod_l+0x58c>)
 800a862:	f000 fee5 	bl	800b630 <nan>
 800a866:	ec5b ab10 	vmov	sl, fp, d0
 800a86a:	e672      	b.n	800a552 <_strtod_l+0x72>
 800a86c:	eba8 0309 	sub.w	r3, r8, r9
 800a870:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a872:	9309      	str	r3, [sp, #36]	@ 0x24
 800a874:	2f00      	cmp	r7, #0
 800a876:	bf08      	it	eq
 800a878:	462f      	moveq	r7, r5
 800a87a:	2d10      	cmp	r5, #16
 800a87c:	462c      	mov	r4, r5
 800a87e:	bfa8      	it	ge
 800a880:	2410      	movge	r4, #16
 800a882:	f7f5 fe67 	bl	8000554 <__aeabi_ui2d>
 800a886:	2d09      	cmp	r5, #9
 800a888:	4682      	mov	sl, r0
 800a88a:	468b      	mov	fp, r1
 800a88c:	dc13      	bgt.n	800a8b6 <_strtod_l+0x3d6>
 800a88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a890:	2b00      	cmp	r3, #0
 800a892:	f43f ae5e 	beq.w	800a552 <_strtod_l+0x72>
 800a896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a898:	dd78      	ble.n	800a98c <_strtod_l+0x4ac>
 800a89a:	2b16      	cmp	r3, #22
 800a89c:	dc5f      	bgt.n	800a95e <_strtod_l+0x47e>
 800a89e:	4974      	ldr	r1, [pc, #464]	@ (800aa70 <_strtod_l+0x590>)
 800a8a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	465b      	mov	r3, fp
 800a8ac:	f7f5 fecc 	bl	8000648 <__aeabi_dmul>
 800a8b0:	4682      	mov	sl, r0
 800a8b2:	468b      	mov	fp, r1
 800a8b4:	e64d      	b.n	800a552 <_strtod_l+0x72>
 800a8b6:	4b6e      	ldr	r3, [pc, #440]	@ (800aa70 <_strtod_l+0x590>)
 800a8b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a8c0:	f7f5 fec2 	bl	8000648 <__aeabi_dmul>
 800a8c4:	4682      	mov	sl, r0
 800a8c6:	9808      	ldr	r0, [sp, #32]
 800a8c8:	468b      	mov	fp, r1
 800a8ca:	f7f5 fe43 	bl	8000554 <__aeabi_ui2d>
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	460b      	mov	r3, r1
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	f7f5 fd01 	bl	80002dc <__adddf3>
 800a8da:	2d0f      	cmp	r5, #15
 800a8dc:	4682      	mov	sl, r0
 800a8de:	468b      	mov	fp, r1
 800a8e0:	ddd5      	ble.n	800a88e <_strtod_l+0x3ae>
 800a8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e4:	1b2c      	subs	r4, r5, r4
 800a8e6:	441c      	add	r4, r3
 800a8e8:	2c00      	cmp	r4, #0
 800a8ea:	f340 8096 	ble.w	800aa1a <_strtod_l+0x53a>
 800a8ee:	f014 030f 	ands.w	r3, r4, #15
 800a8f2:	d00a      	beq.n	800a90a <_strtod_l+0x42a>
 800a8f4:	495e      	ldr	r1, [pc, #376]	@ (800aa70 <_strtod_l+0x590>)
 800a8f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a8fa:	4652      	mov	r2, sl
 800a8fc:	465b      	mov	r3, fp
 800a8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a902:	f7f5 fea1 	bl	8000648 <__aeabi_dmul>
 800a906:	4682      	mov	sl, r0
 800a908:	468b      	mov	fp, r1
 800a90a:	f034 040f 	bics.w	r4, r4, #15
 800a90e:	d073      	beq.n	800a9f8 <_strtod_l+0x518>
 800a910:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a914:	dd48      	ble.n	800a9a8 <_strtod_l+0x4c8>
 800a916:	2400      	movs	r4, #0
 800a918:	46a0      	mov	r8, r4
 800a91a:	940a      	str	r4, [sp, #40]	@ 0x28
 800a91c:	46a1      	mov	r9, r4
 800a91e:	9a05      	ldr	r2, [sp, #20]
 800a920:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800aa78 <_strtod_l+0x598>
 800a924:	2322      	movs	r3, #34	@ 0x22
 800a926:	6013      	str	r3, [r2, #0]
 800a928:	f04f 0a00 	mov.w	sl, #0
 800a92c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f43f ae0f 	beq.w	800a552 <_strtod_l+0x72>
 800a934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a936:	9805      	ldr	r0, [sp, #20]
 800a938:	f7ff f942 	bl	8009bc0 <_Bfree>
 800a93c:	9805      	ldr	r0, [sp, #20]
 800a93e:	4649      	mov	r1, r9
 800a940:	f7ff f93e 	bl	8009bc0 <_Bfree>
 800a944:	9805      	ldr	r0, [sp, #20]
 800a946:	4641      	mov	r1, r8
 800a948:	f7ff f93a 	bl	8009bc0 <_Bfree>
 800a94c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a94e:	9805      	ldr	r0, [sp, #20]
 800a950:	f7ff f936 	bl	8009bc0 <_Bfree>
 800a954:	9805      	ldr	r0, [sp, #20]
 800a956:	4621      	mov	r1, r4
 800a958:	f7ff f932 	bl	8009bc0 <_Bfree>
 800a95c:	e5f9      	b.n	800a552 <_strtod_l+0x72>
 800a95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a960:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a964:	4293      	cmp	r3, r2
 800a966:	dbbc      	blt.n	800a8e2 <_strtod_l+0x402>
 800a968:	4c41      	ldr	r4, [pc, #260]	@ (800aa70 <_strtod_l+0x590>)
 800a96a:	f1c5 050f 	rsb	r5, r5, #15
 800a96e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a972:	4652      	mov	r2, sl
 800a974:	465b      	mov	r3, fp
 800a976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a97a:	f7f5 fe65 	bl	8000648 <__aeabi_dmul>
 800a97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a980:	1b5d      	subs	r5, r3, r5
 800a982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a98a:	e78f      	b.n	800a8ac <_strtod_l+0x3cc>
 800a98c:	3316      	adds	r3, #22
 800a98e:	dba8      	blt.n	800a8e2 <_strtod_l+0x402>
 800a990:	4b37      	ldr	r3, [pc, #220]	@ (800aa70 <_strtod_l+0x590>)
 800a992:	eba9 0808 	sub.w	r8, r9, r8
 800a996:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a99a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a99e:	4650      	mov	r0, sl
 800a9a0:	4659      	mov	r1, fp
 800a9a2:	f7f5 ff7b 	bl	800089c <__aeabi_ddiv>
 800a9a6:	e783      	b.n	800a8b0 <_strtod_l+0x3d0>
 800a9a8:	4b32      	ldr	r3, [pc, #200]	@ (800aa74 <_strtod_l+0x594>)
 800a9aa:	9308      	str	r3, [sp, #32]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	1124      	asrs	r4, r4, #4
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	4659      	mov	r1, fp
 800a9b4:	461e      	mov	r6, r3
 800a9b6:	2c01      	cmp	r4, #1
 800a9b8:	dc21      	bgt.n	800a9fe <_strtod_l+0x51e>
 800a9ba:	b10b      	cbz	r3, 800a9c0 <_strtod_l+0x4e0>
 800a9bc:	4682      	mov	sl, r0
 800a9be:	468b      	mov	fp, r1
 800a9c0:	492c      	ldr	r1, [pc, #176]	@ (800aa74 <_strtod_l+0x594>)
 800a9c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a9c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a9ca:	4652      	mov	r2, sl
 800a9cc:	465b      	mov	r3, fp
 800a9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9d2:	f7f5 fe39 	bl	8000648 <__aeabi_dmul>
 800a9d6:	4b28      	ldr	r3, [pc, #160]	@ (800aa78 <_strtod_l+0x598>)
 800a9d8:	460a      	mov	r2, r1
 800a9da:	400b      	ands	r3, r1
 800a9dc:	4927      	ldr	r1, [pc, #156]	@ (800aa7c <_strtod_l+0x59c>)
 800a9de:	428b      	cmp	r3, r1
 800a9e0:	4682      	mov	sl, r0
 800a9e2:	d898      	bhi.n	800a916 <_strtod_l+0x436>
 800a9e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a9e8:	428b      	cmp	r3, r1
 800a9ea:	bf86      	itte	hi
 800a9ec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800aa80 <_strtod_l+0x5a0>
 800a9f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a9f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	9308      	str	r3, [sp, #32]
 800a9fc:	e07a      	b.n	800aaf4 <_strtod_l+0x614>
 800a9fe:	07e2      	lsls	r2, r4, #31
 800aa00:	d505      	bpl.n	800aa0e <_strtod_l+0x52e>
 800aa02:	9b08      	ldr	r3, [sp, #32]
 800aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa08:	f7f5 fe1e 	bl	8000648 <__aeabi_dmul>
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	9a08      	ldr	r2, [sp, #32]
 800aa10:	3208      	adds	r2, #8
 800aa12:	3601      	adds	r6, #1
 800aa14:	1064      	asrs	r4, r4, #1
 800aa16:	9208      	str	r2, [sp, #32]
 800aa18:	e7cd      	b.n	800a9b6 <_strtod_l+0x4d6>
 800aa1a:	d0ed      	beq.n	800a9f8 <_strtod_l+0x518>
 800aa1c:	4264      	negs	r4, r4
 800aa1e:	f014 020f 	ands.w	r2, r4, #15
 800aa22:	d00a      	beq.n	800aa3a <_strtod_l+0x55a>
 800aa24:	4b12      	ldr	r3, [pc, #72]	@ (800aa70 <_strtod_l+0x590>)
 800aa26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa2a:	4650      	mov	r0, sl
 800aa2c:	4659      	mov	r1, fp
 800aa2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa32:	f7f5 ff33 	bl	800089c <__aeabi_ddiv>
 800aa36:	4682      	mov	sl, r0
 800aa38:	468b      	mov	fp, r1
 800aa3a:	1124      	asrs	r4, r4, #4
 800aa3c:	d0dc      	beq.n	800a9f8 <_strtod_l+0x518>
 800aa3e:	2c1f      	cmp	r4, #31
 800aa40:	dd20      	ble.n	800aa84 <_strtod_l+0x5a4>
 800aa42:	2400      	movs	r4, #0
 800aa44:	46a0      	mov	r8, r4
 800aa46:	940a      	str	r4, [sp, #40]	@ 0x28
 800aa48:	46a1      	mov	r9, r4
 800aa4a:	9a05      	ldr	r2, [sp, #20]
 800aa4c:	2322      	movs	r3, #34	@ 0x22
 800aa4e:	f04f 0a00 	mov.w	sl, #0
 800aa52:	f04f 0b00 	mov.w	fp, #0
 800aa56:	6013      	str	r3, [r2, #0]
 800aa58:	e768      	b.n	800a92c <_strtod_l+0x44c>
 800aa5a:	bf00      	nop
 800aa5c:	0800c395 	.word	0x0800c395
 800aa60:	0800c5ac 	.word	0x0800c5ac
 800aa64:	0800c38d 	.word	0x0800c38d
 800aa68:	0800c3c4 	.word	0x0800c3c4
 800aa6c:	0800c755 	.word	0x0800c755
 800aa70:	0800c4e0 	.word	0x0800c4e0
 800aa74:	0800c4b8 	.word	0x0800c4b8
 800aa78:	7ff00000 	.word	0x7ff00000
 800aa7c:	7ca00000 	.word	0x7ca00000
 800aa80:	7fefffff 	.word	0x7fefffff
 800aa84:	f014 0310 	ands.w	r3, r4, #16
 800aa88:	bf18      	it	ne
 800aa8a:	236a      	movne	r3, #106	@ 0x6a
 800aa8c:	4ea9      	ldr	r6, [pc, #676]	@ (800ad34 <_strtod_l+0x854>)
 800aa8e:	9308      	str	r3, [sp, #32]
 800aa90:	4650      	mov	r0, sl
 800aa92:	4659      	mov	r1, fp
 800aa94:	2300      	movs	r3, #0
 800aa96:	07e2      	lsls	r2, r4, #31
 800aa98:	d504      	bpl.n	800aaa4 <_strtod_l+0x5c4>
 800aa9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa9e:	f7f5 fdd3 	bl	8000648 <__aeabi_dmul>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	1064      	asrs	r4, r4, #1
 800aaa6:	f106 0608 	add.w	r6, r6, #8
 800aaaa:	d1f4      	bne.n	800aa96 <_strtod_l+0x5b6>
 800aaac:	b10b      	cbz	r3, 800aab2 <_strtod_l+0x5d2>
 800aaae:	4682      	mov	sl, r0
 800aab0:	468b      	mov	fp, r1
 800aab2:	9b08      	ldr	r3, [sp, #32]
 800aab4:	b1b3      	cbz	r3, 800aae4 <_strtod_l+0x604>
 800aab6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800aaba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	4659      	mov	r1, fp
 800aac2:	dd0f      	ble.n	800aae4 <_strtod_l+0x604>
 800aac4:	2b1f      	cmp	r3, #31
 800aac6:	dd55      	ble.n	800ab74 <_strtod_l+0x694>
 800aac8:	2b34      	cmp	r3, #52	@ 0x34
 800aaca:	bfde      	ittt	le
 800aacc:	f04f 33ff 	movle.w	r3, #4294967295
 800aad0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800aad4:	4093      	lslle	r3, r2
 800aad6:	f04f 0a00 	mov.w	sl, #0
 800aada:	bfcc      	ite	gt
 800aadc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800aae0:	ea03 0b01 	andle.w	fp, r3, r1
 800aae4:	2200      	movs	r2, #0
 800aae6:	2300      	movs	r3, #0
 800aae8:	4650      	mov	r0, sl
 800aaea:	4659      	mov	r1, fp
 800aaec:	f7f6 f814 	bl	8000b18 <__aeabi_dcmpeq>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d1a6      	bne.n	800aa42 <_strtod_l+0x562>
 800aaf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800aafa:	9805      	ldr	r0, [sp, #20]
 800aafc:	462b      	mov	r3, r5
 800aafe:	463a      	mov	r2, r7
 800ab00:	f7ff f8c6 	bl	8009c90 <__s2b>
 800ab04:	900a      	str	r0, [sp, #40]	@ 0x28
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f43f af05 	beq.w	800a916 <_strtod_l+0x436>
 800ab0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab0e:	2a00      	cmp	r2, #0
 800ab10:	eba9 0308 	sub.w	r3, r9, r8
 800ab14:	bfa8      	it	ge
 800ab16:	2300      	movge	r3, #0
 800ab18:	9312      	str	r3, [sp, #72]	@ 0x48
 800ab1a:	2400      	movs	r4, #0
 800ab1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ab20:	9316      	str	r3, [sp, #88]	@ 0x58
 800ab22:	46a0      	mov	r8, r4
 800ab24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab26:	9805      	ldr	r0, [sp, #20]
 800ab28:	6859      	ldr	r1, [r3, #4]
 800ab2a:	f7ff f809 	bl	8009b40 <_Balloc>
 800ab2e:	4681      	mov	r9, r0
 800ab30:	2800      	cmp	r0, #0
 800ab32:	f43f aef4 	beq.w	800a91e <_strtod_l+0x43e>
 800ab36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ab38:	691a      	ldr	r2, [r3, #16]
 800ab3a:	3202      	adds	r2, #2
 800ab3c:	f103 010c 	add.w	r1, r3, #12
 800ab40:	0092      	lsls	r2, r2, #2
 800ab42:	300c      	adds	r0, #12
 800ab44:	f7fe f89b 	bl	8008c7e <memcpy>
 800ab48:	ec4b ab10 	vmov	d0, sl, fp
 800ab4c:	9805      	ldr	r0, [sp, #20]
 800ab4e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ab50:	a91b      	add	r1, sp, #108	@ 0x6c
 800ab52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ab56:	f7ff fbd7 	bl	800a308 <__d2b>
 800ab5a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	f43f aede 	beq.w	800a91e <_strtod_l+0x43e>
 800ab62:	9805      	ldr	r0, [sp, #20]
 800ab64:	2101      	movs	r1, #1
 800ab66:	f7ff f929 	bl	8009dbc <__i2b>
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	b948      	cbnz	r0, 800ab82 <_strtod_l+0x6a2>
 800ab6e:	f04f 0800 	mov.w	r8, #0
 800ab72:	e6d4      	b.n	800a91e <_strtod_l+0x43e>
 800ab74:	f04f 32ff 	mov.w	r2, #4294967295
 800ab78:	fa02 f303 	lsl.w	r3, r2, r3
 800ab7c:	ea03 0a0a 	and.w	sl, r3, sl
 800ab80:	e7b0      	b.n	800aae4 <_strtod_l+0x604>
 800ab82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ab84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ab86:	2d00      	cmp	r5, #0
 800ab88:	bfab      	itete	ge
 800ab8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ab8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ab8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ab90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ab92:	bfac      	ite	ge
 800ab94:	18ef      	addge	r7, r5, r3
 800ab96:	1b5e      	sublt	r6, r3, r5
 800ab98:	9b08      	ldr	r3, [sp, #32]
 800ab9a:	1aed      	subs	r5, r5, r3
 800ab9c:	4415      	add	r5, r2
 800ab9e:	4b66      	ldr	r3, [pc, #408]	@ (800ad38 <_strtod_l+0x858>)
 800aba0:	3d01      	subs	r5, #1
 800aba2:	429d      	cmp	r5, r3
 800aba4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800aba8:	da50      	bge.n	800ac4c <_strtod_l+0x76c>
 800abaa:	1b5b      	subs	r3, r3, r5
 800abac:	2b1f      	cmp	r3, #31
 800abae:	eba2 0203 	sub.w	r2, r2, r3
 800abb2:	f04f 0101 	mov.w	r1, #1
 800abb6:	dc3d      	bgt.n	800ac34 <_strtod_l+0x754>
 800abb8:	fa01 f303 	lsl.w	r3, r1, r3
 800abbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800abbe:	2300      	movs	r3, #0
 800abc0:	9310      	str	r3, [sp, #64]	@ 0x40
 800abc2:	18bd      	adds	r5, r7, r2
 800abc4:	9b08      	ldr	r3, [sp, #32]
 800abc6:	42af      	cmp	r7, r5
 800abc8:	4416      	add	r6, r2
 800abca:	441e      	add	r6, r3
 800abcc:	463b      	mov	r3, r7
 800abce:	bfa8      	it	ge
 800abd0:	462b      	movge	r3, r5
 800abd2:	42b3      	cmp	r3, r6
 800abd4:	bfa8      	it	ge
 800abd6:	4633      	movge	r3, r6
 800abd8:	2b00      	cmp	r3, #0
 800abda:	bfc2      	ittt	gt
 800abdc:	1aed      	subgt	r5, r5, r3
 800abde:	1af6      	subgt	r6, r6, r3
 800abe0:	1aff      	subgt	r7, r7, r3
 800abe2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	dd16      	ble.n	800ac16 <_strtod_l+0x736>
 800abe8:	4641      	mov	r1, r8
 800abea:	9805      	ldr	r0, [sp, #20]
 800abec:	461a      	mov	r2, r3
 800abee:	f7ff f9a5 	bl	8009f3c <__pow5mult>
 800abf2:	4680      	mov	r8, r0
 800abf4:	2800      	cmp	r0, #0
 800abf6:	d0ba      	beq.n	800ab6e <_strtod_l+0x68e>
 800abf8:	4601      	mov	r1, r0
 800abfa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800abfc:	9805      	ldr	r0, [sp, #20]
 800abfe:	f7ff f8f3 	bl	8009de8 <__multiply>
 800ac02:	900e      	str	r0, [sp, #56]	@ 0x38
 800ac04:	2800      	cmp	r0, #0
 800ac06:	f43f ae8a 	beq.w	800a91e <_strtod_l+0x43e>
 800ac0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac0c:	9805      	ldr	r0, [sp, #20]
 800ac0e:	f7fe ffd7 	bl	8009bc0 <_Bfree>
 800ac12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac14:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac16:	2d00      	cmp	r5, #0
 800ac18:	dc1d      	bgt.n	800ac56 <_strtod_l+0x776>
 800ac1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd23      	ble.n	800ac68 <_strtod_l+0x788>
 800ac20:	4649      	mov	r1, r9
 800ac22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ac24:	9805      	ldr	r0, [sp, #20]
 800ac26:	f7ff f989 	bl	8009f3c <__pow5mult>
 800ac2a:	4681      	mov	r9, r0
 800ac2c:	b9e0      	cbnz	r0, 800ac68 <_strtod_l+0x788>
 800ac2e:	f04f 0900 	mov.w	r9, #0
 800ac32:	e674      	b.n	800a91e <_strtod_l+0x43e>
 800ac34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ac38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ac3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ac40:	35e2      	adds	r5, #226	@ 0xe2
 800ac42:	fa01 f305 	lsl.w	r3, r1, r5
 800ac46:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac48:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ac4a:	e7ba      	b.n	800abc2 <_strtod_l+0x6e2>
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac50:	2301      	movs	r3, #1
 800ac52:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ac54:	e7b5      	b.n	800abc2 <_strtod_l+0x6e2>
 800ac56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac58:	9805      	ldr	r0, [sp, #20]
 800ac5a:	462a      	mov	r2, r5
 800ac5c:	f7ff f9c8 	bl	8009ff0 <__lshift>
 800ac60:	901a      	str	r0, [sp, #104]	@ 0x68
 800ac62:	2800      	cmp	r0, #0
 800ac64:	d1d9      	bne.n	800ac1a <_strtod_l+0x73a>
 800ac66:	e65a      	b.n	800a91e <_strtod_l+0x43e>
 800ac68:	2e00      	cmp	r6, #0
 800ac6a:	dd07      	ble.n	800ac7c <_strtod_l+0x79c>
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	9805      	ldr	r0, [sp, #20]
 800ac70:	4632      	mov	r2, r6
 800ac72:	f7ff f9bd 	bl	8009ff0 <__lshift>
 800ac76:	4681      	mov	r9, r0
 800ac78:	2800      	cmp	r0, #0
 800ac7a:	d0d8      	beq.n	800ac2e <_strtod_l+0x74e>
 800ac7c:	2f00      	cmp	r7, #0
 800ac7e:	dd08      	ble.n	800ac92 <_strtod_l+0x7b2>
 800ac80:	4641      	mov	r1, r8
 800ac82:	9805      	ldr	r0, [sp, #20]
 800ac84:	463a      	mov	r2, r7
 800ac86:	f7ff f9b3 	bl	8009ff0 <__lshift>
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	f43f ae46 	beq.w	800a91e <_strtod_l+0x43e>
 800ac92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ac94:	9805      	ldr	r0, [sp, #20]
 800ac96:	464a      	mov	r2, r9
 800ac98:	f7ff fa32 	bl	800a100 <__mdiff>
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	2800      	cmp	r0, #0
 800aca0:	f43f ae3d 	beq.w	800a91e <_strtod_l+0x43e>
 800aca4:	68c3      	ldr	r3, [r0, #12]
 800aca6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aca8:	2300      	movs	r3, #0
 800acaa:	60c3      	str	r3, [r0, #12]
 800acac:	4641      	mov	r1, r8
 800acae:	f7ff fa0b 	bl	800a0c8 <__mcmp>
 800acb2:	2800      	cmp	r0, #0
 800acb4:	da46      	bge.n	800ad44 <_strtod_l+0x864>
 800acb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acb8:	ea53 030a 	orrs.w	r3, r3, sl
 800acbc:	d16c      	bne.n	800ad98 <_strtod_l+0x8b8>
 800acbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d168      	bne.n	800ad98 <_strtod_l+0x8b8>
 800acc6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acca:	0d1b      	lsrs	r3, r3, #20
 800accc:	051b      	lsls	r3, r3, #20
 800acce:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800acd2:	d961      	bls.n	800ad98 <_strtod_l+0x8b8>
 800acd4:	6963      	ldr	r3, [r4, #20]
 800acd6:	b913      	cbnz	r3, 800acde <_strtod_l+0x7fe>
 800acd8:	6923      	ldr	r3, [r4, #16]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	dd5c      	ble.n	800ad98 <_strtod_l+0x8b8>
 800acde:	4621      	mov	r1, r4
 800ace0:	2201      	movs	r2, #1
 800ace2:	9805      	ldr	r0, [sp, #20]
 800ace4:	f7ff f984 	bl	8009ff0 <__lshift>
 800ace8:	4641      	mov	r1, r8
 800acea:	4604      	mov	r4, r0
 800acec:	f7ff f9ec 	bl	800a0c8 <__mcmp>
 800acf0:	2800      	cmp	r0, #0
 800acf2:	dd51      	ble.n	800ad98 <_strtod_l+0x8b8>
 800acf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800acf8:	9a08      	ldr	r2, [sp, #32]
 800acfa:	0d1b      	lsrs	r3, r3, #20
 800acfc:	051b      	lsls	r3, r3, #20
 800acfe:	2a00      	cmp	r2, #0
 800ad00:	d06b      	beq.n	800adda <_strtod_l+0x8fa>
 800ad02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ad06:	d868      	bhi.n	800adda <_strtod_l+0x8fa>
 800ad08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ad0c:	f67f ae9d 	bls.w	800aa4a <_strtod_l+0x56a>
 800ad10:	4b0a      	ldr	r3, [pc, #40]	@ (800ad3c <_strtod_l+0x85c>)
 800ad12:	4650      	mov	r0, sl
 800ad14:	4659      	mov	r1, fp
 800ad16:	2200      	movs	r2, #0
 800ad18:	f7f5 fc96 	bl	8000648 <__aeabi_dmul>
 800ad1c:	4b08      	ldr	r3, [pc, #32]	@ (800ad40 <_strtod_l+0x860>)
 800ad1e:	400b      	ands	r3, r1
 800ad20:	4682      	mov	sl, r0
 800ad22:	468b      	mov	fp, r1
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	f47f ae05 	bne.w	800a934 <_strtod_l+0x454>
 800ad2a:	9a05      	ldr	r2, [sp, #20]
 800ad2c:	2322      	movs	r3, #34	@ 0x22
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	e600      	b.n	800a934 <_strtod_l+0x454>
 800ad32:	bf00      	nop
 800ad34:	0800c5d8 	.word	0x0800c5d8
 800ad38:	fffffc02 	.word	0xfffffc02
 800ad3c:	39500000 	.word	0x39500000
 800ad40:	7ff00000 	.word	0x7ff00000
 800ad44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ad48:	d165      	bne.n	800ae16 <_strtod_l+0x936>
 800ad4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ad4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad50:	b35a      	cbz	r2, 800adaa <_strtod_l+0x8ca>
 800ad52:	4a9f      	ldr	r2, [pc, #636]	@ (800afd0 <_strtod_l+0xaf0>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d12b      	bne.n	800adb0 <_strtod_l+0x8d0>
 800ad58:	9b08      	ldr	r3, [sp, #32]
 800ad5a:	4651      	mov	r1, sl
 800ad5c:	b303      	cbz	r3, 800ada0 <_strtod_l+0x8c0>
 800ad5e:	4b9d      	ldr	r3, [pc, #628]	@ (800afd4 <_strtod_l+0xaf4>)
 800ad60:	465a      	mov	r2, fp
 800ad62:	4013      	ands	r3, r2
 800ad64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ad68:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6c:	d81b      	bhi.n	800ada6 <_strtod_l+0x8c6>
 800ad6e:	0d1b      	lsrs	r3, r3, #20
 800ad70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad74:	fa02 f303 	lsl.w	r3, r2, r3
 800ad78:	4299      	cmp	r1, r3
 800ad7a:	d119      	bne.n	800adb0 <_strtod_l+0x8d0>
 800ad7c:	4b96      	ldr	r3, [pc, #600]	@ (800afd8 <_strtod_l+0xaf8>)
 800ad7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d102      	bne.n	800ad8a <_strtod_l+0x8aa>
 800ad84:	3101      	adds	r1, #1
 800ad86:	f43f adca 	beq.w	800a91e <_strtod_l+0x43e>
 800ad8a:	4b92      	ldr	r3, [pc, #584]	@ (800afd4 <_strtod_l+0xaf4>)
 800ad8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad8e:	401a      	ands	r2, r3
 800ad90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ad94:	f04f 0a00 	mov.w	sl, #0
 800ad98:	9b08      	ldr	r3, [sp, #32]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d1b8      	bne.n	800ad10 <_strtod_l+0x830>
 800ad9e:	e5c9      	b.n	800a934 <_strtod_l+0x454>
 800ada0:	f04f 33ff 	mov.w	r3, #4294967295
 800ada4:	e7e8      	b.n	800ad78 <_strtod_l+0x898>
 800ada6:	4613      	mov	r3, r2
 800ada8:	e7e6      	b.n	800ad78 <_strtod_l+0x898>
 800adaa:	ea53 030a 	orrs.w	r3, r3, sl
 800adae:	d0a1      	beq.n	800acf4 <_strtod_l+0x814>
 800adb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800adb2:	b1db      	cbz	r3, 800adec <_strtod_l+0x90c>
 800adb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800adb6:	4213      	tst	r3, r2
 800adb8:	d0ee      	beq.n	800ad98 <_strtod_l+0x8b8>
 800adba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800adbc:	9a08      	ldr	r2, [sp, #32]
 800adbe:	4650      	mov	r0, sl
 800adc0:	4659      	mov	r1, fp
 800adc2:	b1bb      	cbz	r3, 800adf4 <_strtod_l+0x914>
 800adc4:	f7ff fb6e 	bl	800a4a4 <sulp>
 800adc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adcc:	ec53 2b10 	vmov	r2, r3, d0
 800add0:	f7f5 fa84 	bl	80002dc <__adddf3>
 800add4:	4682      	mov	sl, r0
 800add6:	468b      	mov	fp, r1
 800add8:	e7de      	b.n	800ad98 <_strtod_l+0x8b8>
 800adda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800adde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ade2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ade6:	f04f 3aff 	mov.w	sl, #4294967295
 800adea:	e7d5      	b.n	800ad98 <_strtod_l+0x8b8>
 800adec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800adee:	ea13 0f0a 	tst.w	r3, sl
 800adf2:	e7e1      	b.n	800adb8 <_strtod_l+0x8d8>
 800adf4:	f7ff fb56 	bl	800a4a4 <sulp>
 800adf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800adfc:	ec53 2b10 	vmov	r2, r3, d0
 800ae00:	f7f5 fa6a 	bl	80002d8 <__aeabi_dsub>
 800ae04:	2200      	movs	r2, #0
 800ae06:	2300      	movs	r3, #0
 800ae08:	4682      	mov	sl, r0
 800ae0a:	468b      	mov	fp, r1
 800ae0c:	f7f5 fe84 	bl	8000b18 <__aeabi_dcmpeq>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d0c1      	beq.n	800ad98 <_strtod_l+0x8b8>
 800ae14:	e619      	b.n	800aa4a <_strtod_l+0x56a>
 800ae16:	4641      	mov	r1, r8
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7ff facd 	bl	800a3b8 <__ratio>
 800ae1e:	ec57 6b10 	vmov	r6, r7, d0
 800ae22:	2200      	movs	r2, #0
 800ae24:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ae28:	4630      	mov	r0, r6
 800ae2a:	4639      	mov	r1, r7
 800ae2c:	f7f5 fe88 	bl	8000b40 <__aeabi_dcmple>
 800ae30:	2800      	cmp	r0, #0
 800ae32:	d06f      	beq.n	800af14 <_strtod_l+0xa34>
 800ae34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d17a      	bne.n	800af30 <_strtod_l+0xa50>
 800ae3a:	f1ba 0f00 	cmp.w	sl, #0
 800ae3e:	d158      	bne.n	800aef2 <_strtod_l+0xa12>
 800ae40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d15a      	bne.n	800af00 <_strtod_l+0xa20>
 800ae4a:	4b64      	ldr	r3, [pc, #400]	@ (800afdc <_strtod_l+0xafc>)
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	4630      	mov	r0, r6
 800ae50:	4639      	mov	r1, r7
 800ae52:	f7f5 fe6b 	bl	8000b2c <__aeabi_dcmplt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d159      	bne.n	800af0e <_strtod_l+0xa2e>
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	4b60      	ldr	r3, [pc, #384]	@ (800afe0 <_strtod_l+0xb00>)
 800ae60:	2200      	movs	r2, #0
 800ae62:	f7f5 fbf1 	bl	8000648 <__aeabi_dmul>
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800ae6e:	9606      	str	r6, [sp, #24]
 800ae70:	9307      	str	r3, [sp, #28]
 800ae72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae76:	4d57      	ldr	r5, [pc, #348]	@ (800afd4 <_strtod_l+0xaf4>)
 800ae78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ae7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae7e:	401d      	ands	r5, r3
 800ae80:	4b58      	ldr	r3, [pc, #352]	@ (800afe4 <_strtod_l+0xb04>)
 800ae82:	429d      	cmp	r5, r3
 800ae84:	f040 80b2 	bne.w	800afec <_strtod_l+0xb0c>
 800ae88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ae8a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ae8e:	ec4b ab10 	vmov	d0, sl, fp
 800ae92:	f7ff f9c9 	bl	800a228 <__ulp>
 800ae96:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ae9a:	ec51 0b10 	vmov	r0, r1, d0
 800ae9e:	f7f5 fbd3 	bl	8000648 <__aeabi_dmul>
 800aea2:	4652      	mov	r2, sl
 800aea4:	465b      	mov	r3, fp
 800aea6:	f7f5 fa19 	bl	80002dc <__adddf3>
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4949      	ldr	r1, [pc, #292]	@ (800afd4 <_strtod_l+0xaf4>)
 800aeae:	4a4e      	ldr	r2, [pc, #312]	@ (800afe8 <_strtod_l+0xb08>)
 800aeb0:	4019      	ands	r1, r3
 800aeb2:	4291      	cmp	r1, r2
 800aeb4:	4682      	mov	sl, r0
 800aeb6:	d942      	bls.n	800af3e <_strtod_l+0xa5e>
 800aeb8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aeba:	4b47      	ldr	r3, [pc, #284]	@ (800afd8 <_strtod_l+0xaf8>)
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d103      	bne.n	800aec8 <_strtod_l+0x9e8>
 800aec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aec2:	3301      	adds	r3, #1
 800aec4:	f43f ad2b 	beq.w	800a91e <_strtod_l+0x43e>
 800aec8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800afd8 <_strtod_l+0xaf8>
 800aecc:	f04f 3aff 	mov.w	sl, #4294967295
 800aed0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aed2:	9805      	ldr	r0, [sp, #20]
 800aed4:	f7fe fe74 	bl	8009bc0 <_Bfree>
 800aed8:	9805      	ldr	r0, [sp, #20]
 800aeda:	4649      	mov	r1, r9
 800aedc:	f7fe fe70 	bl	8009bc0 <_Bfree>
 800aee0:	9805      	ldr	r0, [sp, #20]
 800aee2:	4641      	mov	r1, r8
 800aee4:	f7fe fe6c 	bl	8009bc0 <_Bfree>
 800aee8:	9805      	ldr	r0, [sp, #20]
 800aeea:	4621      	mov	r1, r4
 800aeec:	f7fe fe68 	bl	8009bc0 <_Bfree>
 800aef0:	e618      	b.n	800ab24 <_strtod_l+0x644>
 800aef2:	f1ba 0f01 	cmp.w	sl, #1
 800aef6:	d103      	bne.n	800af00 <_strtod_l+0xa20>
 800aef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	f43f ada5 	beq.w	800aa4a <_strtod_l+0x56a>
 800af00:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800afb0 <_strtod_l+0xad0>
 800af04:	4f35      	ldr	r7, [pc, #212]	@ (800afdc <_strtod_l+0xafc>)
 800af06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af0a:	2600      	movs	r6, #0
 800af0c:	e7b1      	b.n	800ae72 <_strtod_l+0x992>
 800af0e:	4f34      	ldr	r7, [pc, #208]	@ (800afe0 <_strtod_l+0xb00>)
 800af10:	2600      	movs	r6, #0
 800af12:	e7aa      	b.n	800ae6a <_strtod_l+0x98a>
 800af14:	4b32      	ldr	r3, [pc, #200]	@ (800afe0 <_strtod_l+0xb00>)
 800af16:	4630      	mov	r0, r6
 800af18:	4639      	mov	r1, r7
 800af1a:	2200      	movs	r2, #0
 800af1c:	f7f5 fb94 	bl	8000648 <__aeabi_dmul>
 800af20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af22:	4606      	mov	r6, r0
 800af24:	460f      	mov	r7, r1
 800af26:	2b00      	cmp	r3, #0
 800af28:	d09f      	beq.n	800ae6a <_strtod_l+0x98a>
 800af2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800af2e:	e7a0      	b.n	800ae72 <_strtod_l+0x992>
 800af30:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800afb8 <_strtod_l+0xad8>
 800af34:	ed8d 7b06 	vstr	d7, [sp, #24]
 800af38:	ec57 6b17 	vmov	r6, r7, d7
 800af3c:	e799      	b.n	800ae72 <_strtod_l+0x992>
 800af3e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800af42:	9b08      	ldr	r3, [sp, #32]
 800af44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d1c1      	bne.n	800aed0 <_strtod_l+0x9f0>
 800af4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af50:	0d1b      	lsrs	r3, r3, #20
 800af52:	051b      	lsls	r3, r3, #20
 800af54:	429d      	cmp	r5, r3
 800af56:	d1bb      	bne.n	800aed0 <_strtod_l+0x9f0>
 800af58:	4630      	mov	r0, r6
 800af5a:	4639      	mov	r1, r7
 800af5c:	f7f5 fed4 	bl	8000d08 <__aeabi_d2lz>
 800af60:	f7f5 fb44 	bl	80005ec <__aeabi_l2d>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	4630      	mov	r0, r6
 800af6a:	4639      	mov	r1, r7
 800af6c:	f7f5 f9b4 	bl	80002d8 <__aeabi_dsub>
 800af70:	460b      	mov	r3, r1
 800af72:	4602      	mov	r2, r0
 800af74:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800af78:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800af7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af7e:	ea46 060a 	orr.w	r6, r6, sl
 800af82:	431e      	orrs	r6, r3
 800af84:	d06f      	beq.n	800b066 <_strtod_l+0xb86>
 800af86:	a30e      	add	r3, pc, #56	@ (adr r3, 800afc0 <_strtod_l+0xae0>)
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f7f5 fdce 	bl	8000b2c <__aeabi_dcmplt>
 800af90:	2800      	cmp	r0, #0
 800af92:	f47f accf 	bne.w	800a934 <_strtod_l+0x454>
 800af96:	a30c      	add	r3, pc, #48	@ (adr r3, 800afc8 <_strtod_l+0xae8>)
 800af98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afa0:	f7f5 fde2 	bl	8000b68 <__aeabi_dcmpgt>
 800afa4:	2800      	cmp	r0, #0
 800afa6:	d093      	beq.n	800aed0 <_strtod_l+0x9f0>
 800afa8:	e4c4      	b.n	800a934 <_strtod_l+0x454>
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w
 800afb0:	00000000 	.word	0x00000000
 800afb4:	bff00000 	.word	0xbff00000
 800afb8:	00000000 	.word	0x00000000
 800afbc:	3ff00000 	.word	0x3ff00000
 800afc0:	94a03595 	.word	0x94a03595
 800afc4:	3fdfffff 	.word	0x3fdfffff
 800afc8:	35afe535 	.word	0x35afe535
 800afcc:	3fe00000 	.word	0x3fe00000
 800afd0:	000fffff 	.word	0x000fffff
 800afd4:	7ff00000 	.word	0x7ff00000
 800afd8:	7fefffff 	.word	0x7fefffff
 800afdc:	3ff00000 	.word	0x3ff00000
 800afe0:	3fe00000 	.word	0x3fe00000
 800afe4:	7fe00000 	.word	0x7fe00000
 800afe8:	7c9fffff 	.word	0x7c9fffff
 800afec:	9b08      	ldr	r3, [sp, #32]
 800afee:	b323      	cbz	r3, 800b03a <_strtod_l+0xb5a>
 800aff0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aff4:	d821      	bhi.n	800b03a <_strtod_l+0xb5a>
 800aff6:	a328      	add	r3, pc, #160	@ (adr r3, 800b098 <_strtod_l+0xbb8>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	4630      	mov	r0, r6
 800affe:	4639      	mov	r1, r7
 800b000:	f7f5 fd9e 	bl	8000b40 <__aeabi_dcmple>
 800b004:	b1a0      	cbz	r0, 800b030 <_strtod_l+0xb50>
 800b006:	4639      	mov	r1, r7
 800b008:	4630      	mov	r0, r6
 800b00a:	f7f5 fdf5 	bl	8000bf8 <__aeabi_d2uiz>
 800b00e:	2801      	cmp	r0, #1
 800b010:	bf38      	it	cc
 800b012:	2001      	movcc	r0, #1
 800b014:	f7f5 fa9e 	bl	8000554 <__aeabi_ui2d>
 800b018:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b01a:	4606      	mov	r6, r0
 800b01c:	460f      	mov	r7, r1
 800b01e:	b9fb      	cbnz	r3, 800b060 <_strtod_l+0xb80>
 800b020:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b024:	9014      	str	r0, [sp, #80]	@ 0x50
 800b026:	9315      	str	r3, [sp, #84]	@ 0x54
 800b028:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b02c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b030:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b032:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b036:	1b5b      	subs	r3, r3, r5
 800b038:	9311      	str	r3, [sp, #68]	@ 0x44
 800b03a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b03e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b042:	f7ff f8f1 	bl	800a228 <__ulp>
 800b046:	4650      	mov	r0, sl
 800b048:	ec53 2b10 	vmov	r2, r3, d0
 800b04c:	4659      	mov	r1, fp
 800b04e:	f7f5 fafb 	bl	8000648 <__aeabi_dmul>
 800b052:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b056:	f7f5 f941 	bl	80002dc <__adddf3>
 800b05a:	4682      	mov	sl, r0
 800b05c:	468b      	mov	fp, r1
 800b05e:	e770      	b.n	800af42 <_strtod_l+0xa62>
 800b060:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b064:	e7e0      	b.n	800b028 <_strtod_l+0xb48>
 800b066:	a30e      	add	r3, pc, #56	@ (adr r3, 800b0a0 <_strtod_l+0xbc0>)
 800b068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06c:	f7f5 fd5e 	bl	8000b2c <__aeabi_dcmplt>
 800b070:	e798      	b.n	800afa4 <_strtod_l+0xac4>
 800b072:	2300      	movs	r3, #0
 800b074:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b076:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b078:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b07a:	6013      	str	r3, [r2, #0]
 800b07c:	f7ff ba6d 	b.w	800a55a <_strtod_l+0x7a>
 800b080:	2a65      	cmp	r2, #101	@ 0x65
 800b082:	f43f ab66 	beq.w	800a752 <_strtod_l+0x272>
 800b086:	2a45      	cmp	r2, #69	@ 0x45
 800b088:	f43f ab63 	beq.w	800a752 <_strtod_l+0x272>
 800b08c:	2301      	movs	r3, #1
 800b08e:	f7ff bb9e 	b.w	800a7ce <_strtod_l+0x2ee>
 800b092:	bf00      	nop
 800b094:	f3af 8000 	nop.w
 800b098:	ffc00000 	.word	0xffc00000
 800b09c:	41dfffff 	.word	0x41dfffff
 800b0a0:	94a03595 	.word	0x94a03595
 800b0a4:	3fcfffff 	.word	0x3fcfffff

0800b0a8 <_strtod_r>:
 800b0a8:	4b01      	ldr	r3, [pc, #4]	@ (800b0b0 <_strtod_r+0x8>)
 800b0aa:	f7ff ba19 	b.w	800a4e0 <_strtod_l>
 800b0ae:	bf00      	nop
 800b0b0:	20000064 	.word	0x20000064

0800b0b4 <_strtol_l.constprop.0>:
 800b0b4:	2b24      	cmp	r3, #36	@ 0x24
 800b0b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ba:	4686      	mov	lr, r0
 800b0bc:	4690      	mov	r8, r2
 800b0be:	d801      	bhi.n	800b0c4 <_strtol_l.constprop.0+0x10>
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d106      	bne.n	800b0d2 <_strtol_l.constprop.0+0x1e>
 800b0c4:	f7fd fdae 	bl	8008c24 <__errno>
 800b0c8:	2316      	movs	r3, #22
 800b0ca:	6003      	str	r3, [r0, #0]
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d2:	4834      	ldr	r0, [pc, #208]	@ (800b1a4 <_strtol_l.constprop.0+0xf0>)
 800b0d4:	460d      	mov	r5, r1
 800b0d6:	462a      	mov	r2, r5
 800b0d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0dc:	5d06      	ldrb	r6, [r0, r4]
 800b0de:	f016 0608 	ands.w	r6, r6, #8
 800b0e2:	d1f8      	bne.n	800b0d6 <_strtol_l.constprop.0+0x22>
 800b0e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800b0e6:	d12d      	bne.n	800b144 <_strtol_l.constprop.0+0x90>
 800b0e8:	782c      	ldrb	r4, [r5, #0]
 800b0ea:	2601      	movs	r6, #1
 800b0ec:	1c95      	adds	r5, r2, #2
 800b0ee:	f033 0210 	bics.w	r2, r3, #16
 800b0f2:	d109      	bne.n	800b108 <_strtol_l.constprop.0+0x54>
 800b0f4:	2c30      	cmp	r4, #48	@ 0x30
 800b0f6:	d12a      	bne.n	800b14e <_strtol_l.constprop.0+0x9a>
 800b0f8:	782a      	ldrb	r2, [r5, #0]
 800b0fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b0fe:	2a58      	cmp	r2, #88	@ 0x58
 800b100:	d125      	bne.n	800b14e <_strtol_l.constprop.0+0x9a>
 800b102:	786c      	ldrb	r4, [r5, #1]
 800b104:	2310      	movs	r3, #16
 800b106:	3502      	adds	r5, #2
 800b108:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b10c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b110:	2200      	movs	r2, #0
 800b112:	fbbc f9f3 	udiv	r9, ip, r3
 800b116:	4610      	mov	r0, r2
 800b118:	fb03 ca19 	mls	sl, r3, r9, ip
 800b11c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b120:	2f09      	cmp	r7, #9
 800b122:	d81b      	bhi.n	800b15c <_strtol_l.constprop.0+0xa8>
 800b124:	463c      	mov	r4, r7
 800b126:	42a3      	cmp	r3, r4
 800b128:	dd27      	ble.n	800b17a <_strtol_l.constprop.0+0xc6>
 800b12a:	1c57      	adds	r7, r2, #1
 800b12c:	d007      	beq.n	800b13e <_strtol_l.constprop.0+0x8a>
 800b12e:	4581      	cmp	r9, r0
 800b130:	d320      	bcc.n	800b174 <_strtol_l.constprop.0+0xc0>
 800b132:	d101      	bne.n	800b138 <_strtol_l.constprop.0+0x84>
 800b134:	45a2      	cmp	sl, r4
 800b136:	db1d      	blt.n	800b174 <_strtol_l.constprop.0+0xc0>
 800b138:	fb00 4003 	mla	r0, r0, r3, r4
 800b13c:	2201      	movs	r2, #1
 800b13e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b142:	e7eb      	b.n	800b11c <_strtol_l.constprop.0+0x68>
 800b144:	2c2b      	cmp	r4, #43	@ 0x2b
 800b146:	bf04      	itt	eq
 800b148:	782c      	ldrbeq	r4, [r5, #0]
 800b14a:	1c95      	addeq	r5, r2, #2
 800b14c:	e7cf      	b.n	800b0ee <_strtol_l.constprop.0+0x3a>
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1da      	bne.n	800b108 <_strtol_l.constprop.0+0x54>
 800b152:	2c30      	cmp	r4, #48	@ 0x30
 800b154:	bf0c      	ite	eq
 800b156:	2308      	moveq	r3, #8
 800b158:	230a      	movne	r3, #10
 800b15a:	e7d5      	b.n	800b108 <_strtol_l.constprop.0+0x54>
 800b15c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b160:	2f19      	cmp	r7, #25
 800b162:	d801      	bhi.n	800b168 <_strtol_l.constprop.0+0xb4>
 800b164:	3c37      	subs	r4, #55	@ 0x37
 800b166:	e7de      	b.n	800b126 <_strtol_l.constprop.0+0x72>
 800b168:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b16c:	2f19      	cmp	r7, #25
 800b16e:	d804      	bhi.n	800b17a <_strtol_l.constprop.0+0xc6>
 800b170:	3c57      	subs	r4, #87	@ 0x57
 800b172:	e7d8      	b.n	800b126 <_strtol_l.constprop.0+0x72>
 800b174:	f04f 32ff 	mov.w	r2, #4294967295
 800b178:	e7e1      	b.n	800b13e <_strtol_l.constprop.0+0x8a>
 800b17a:	1c53      	adds	r3, r2, #1
 800b17c:	d108      	bne.n	800b190 <_strtol_l.constprop.0+0xdc>
 800b17e:	2322      	movs	r3, #34	@ 0x22
 800b180:	f8ce 3000 	str.w	r3, [lr]
 800b184:	4660      	mov	r0, ip
 800b186:	f1b8 0f00 	cmp.w	r8, #0
 800b18a:	d0a0      	beq.n	800b0ce <_strtol_l.constprop.0+0x1a>
 800b18c:	1e69      	subs	r1, r5, #1
 800b18e:	e006      	b.n	800b19e <_strtol_l.constprop.0+0xea>
 800b190:	b106      	cbz	r6, 800b194 <_strtol_l.constprop.0+0xe0>
 800b192:	4240      	negs	r0, r0
 800b194:	f1b8 0f00 	cmp.w	r8, #0
 800b198:	d099      	beq.n	800b0ce <_strtol_l.constprop.0+0x1a>
 800b19a:	2a00      	cmp	r2, #0
 800b19c:	d1f6      	bne.n	800b18c <_strtol_l.constprop.0+0xd8>
 800b19e:	f8c8 1000 	str.w	r1, [r8]
 800b1a2:	e794      	b.n	800b0ce <_strtol_l.constprop.0+0x1a>
 800b1a4:	0800c601 	.word	0x0800c601

0800b1a8 <_strtol_r>:
 800b1a8:	f7ff bf84 	b.w	800b0b4 <_strtol_l.constprop.0>

0800b1ac <__ssputs_r>:
 800b1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1b0:	688e      	ldr	r6, [r1, #8]
 800b1b2:	461f      	mov	r7, r3
 800b1b4:	42be      	cmp	r6, r7
 800b1b6:	680b      	ldr	r3, [r1, #0]
 800b1b8:	4682      	mov	sl, r0
 800b1ba:	460c      	mov	r4, r1
 800b1bc:	4690      	mov	r8, r2
 800b1be:	d82d      	bhi.n	800b21c <__ssputs_r+0x70>
 800b1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b1c8:	d026      	beq.n	800b218 <__ssputs_r+0x6c>
 800b1ca:	6965      	ldr	r5, [r4, #20]
 800b1cc:	6909      	ldr	r1, [r1, #16]
 800b1ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1d2:	eba3 0901 	sub.w	r9, r3, r1
 800b1d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1da:	1c7b      	adds	r3, r7, #1
 800b1dc:	444b      	add	r3, r9
 800b1de:	106d      	asrs	r5, r5, #1
 800b1e0:	429d      	cmp	r5, r3
 800b1e2:	bf38      	it	cc
 800b1e4:	461d      	movcc	r5, r3
 800b1e6:	0553      	lsls	r3, r2, #21
 800b1e8:	d527      	bpl.n	800b23a <__ssputs_r+0x8e>
 800b1ea:	4629      	mov	r1, r5
 800b1ec:	f7fe fc1c 	bl	8009a28 <_malloc_r>
 800b1f0:	4606      	mov	r6, r0
 800b1f2:	b360      	cbz	r0, 800b24e <__ssputs_r+0xa2>
 800b1f4:	6921      	ldr	r1, [r4, #16]
 800b1f6:	464a      	mov	r2, r9
 800b1f8:	f7fd fd41 	bl	8008c7e <memcpy>
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b206:	81a3      	strh	r3, [r4, #12]
 800b208:	6126      	str	r6, [r4, #16]
 800b20a:	6165      	str	r5, [r4, #20]
 800b20c:	444e      	add	r6, r9
 800b20e:	eba5 0509 	sub.w	r5, r5, r9
 800b212:	6026      	str	r6, [r4, #0]
 800b214:	60a5      	str	r5, [r4, #8]
 800b216:	463e      	mov	r6, r7
 800b218:	42be      	cmp	r6, r7
 800b21a:	d900      	bls.n	800b21e <__ssputs_r+0x72>
 800b21c:	463e      	mov	r6, r7
 800b21e:	6820      	ldr	r0, [r4, #0]
 800b220:	4632      	mov	r2, r6
 800b222:	4641      	mov	r1, r8
 800b224:	f000 f9c6 	bl	800b5b4 <memmove>
 800b228:	68a3      	ldr	r3, [r4, #8]
 800b22a:	1b9b      	subs	r3, r3, r6
 800b22c:	60a3      	str	r3, [r4, #8]
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	4433      	add	r3, r6
 800b232:	6023      	str	r3, [r4, #0]
 800b234:	2000      	movs	r0, #0
 800b236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b23a:	462a      	mov	r2, r5
 800b23c:	f000 fd7d 	bl	800bd3a <_realloc_r>
 800b240:	4606      	mov	r6, r0
 800b242:	2800      	cmp	r0, #0
 800b244:	d1e0      	bne.n	800b208 <__ssputs_r+0x5c>
 800b246:	6921      	ldr	r1, [r4, #16]
 800b248:	4650      	mov	r0, sl
 800b24a:	f7fe fb79 	bl	8009940 <_free_r>
 800b24e:	230c      	movs	r3, #12
 800b250:	f8ca 3000 	str.w	r3, [sl]
 800b254:	89a3      	ldrh	r3, [r4, #12]
 800b256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b25a:	81a3      	strh	r3, [r4, #12]
 800b25c:	f04f 30ff 	mov.w	r0, #4294967295
 800b260:	e7e9      	b.n	800b236 <__ssputs_r+0x8a>
	...

0800b264 <_svfiprintf_r>:
 800b264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b268:	4698      	mov	r8, r3
 800b26a:	898b      	ldrh	r3, [r1, #12]
 800b26c:	061b      	lsls	r3, r3, #24
 800b26e:	b09d      	sub	sp, #116	@ 0x74
 800b270:	4607      	mov	r7, r0
 800b272:	460d      	mov	r5, r1
 800b274:	4614      	mov	r4, r2
 800b276:	d510      	bpl.n	800b29a <_svfiprintf_r+0x36>
 800b278:	690b      	ldr	r3, [r1, #16]
 800b27a:	b973      	cbnz	r3, 800b29a <_svfiprintf_r+0x36>
 800b27c:	2140      	movs	r1, #64	@ 0x40
 800b27e:	f7fe fbd3 	bl	8009a28 <_malloc_r>
 800b282:	6028      	str	r0, [r5, #0]
 800b284:	6128      	str	r0, [r5, #16]
 800b286:	b930      	cbnz	r0, 800b296 <_svfiprintf_r+0x32>
 800b288:	230c      	movs	r3, #12
 800b28a:	603b      	str	r3, [r7, #0]
 800b28c:	f04f 30ff 	mov.w	r0, #4294967295
 800b290:	b01d      	add	sp, #116	@ 0x74
 800b292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b296:	2340      	movs	r3, #64	@ 0x40
 800b298:	616b      	str	r3, [r5, #20]
 800b29a:	2300      	movs	r3, #0
 800b29c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b29e:	2320      	movs	r3, #32
 800b2a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2a8:	2330      	movs	r3, #48	@ 0x30
 800b2aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b448 <_svfiprintf_r+0x1e4>
 800b2ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2b2:	f04f 0901 	mov.w	r9, #1
 800b2b6:	4623      	mov	r3, r4
 800b2b8:	469a      	mov	sl, r3
 800b2ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2be:	b10a      	cbz	r2, 800b2c4 <_svfiprintf_r+0x60>
 800b2c0:	2a25      	cmp	r2, #37	@ 0x25
 800b2c2:	d1f9      	bne.n	800b2b8 <_svfiprintf_r+0x54>
 800b2c4:	ebba 0b04 	subs.w	fp, sl, r4
 800b2c8:	d00b      	beq.n	800b2e2 <_svfiprintf_r+0x7e>
 800b2ca:	465b      	mov	r3, fp
 800b2cc:	4622      	mov	r2, r4
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7ff ff6b 	bl	800b1ac <__ssputs_r>
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	f000 80a7 	beq.w	800b42a <_svfiprintf_r+0x1c6>
 800b2dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2de:	445a      	add	r2, fp
 800b2e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2e2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f000 809f 	beq.w	800b42a <_svfiprintf_r+0x1c6>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f6:	f10a 0a01 	add.w	sl, sl, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	9307      	str	r3, [sp, #28]
 800b2fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b302:	931a      	str	r3, [sp, #104]	@ 0x68
 800b304:	4654      	mov	r4, sl
 800b306:	2205      	movs	r2, #5
 800b308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30c:	484e      	ldr	r0, [pc, #312]	@ (800b448 <_svfiprintf_r+0x1e4>)
 800b30e:	f7f4 ff87 	bl	8000220 <memchr>
 800b312:	9a04      	ldr	r2, [sp, #16]
 800b314:	b9d8      	cbnz	r0, 800b34e <_svfiprintf_r+0xea>
 800b316:	06d0      	lsls	r0, r2, #27
 800b318:	bf44      	itt	mi
 800b31a:	2320      	movmi	r3, #32
 800b31c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b320:	0711      	lsls	r1, r2, #28
 800b322:	bf44      	itt	mi
 800b324:	232b      	movmi	r3, #43	@ 0x2b
 800b326:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b32a:	f89a 3000 	ldrb.w	r3, [sl]
 800b32e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b330:	d015      	beq.n	800b35e <_svfiprintf_r+0xfa>
 800b332:	9a07      	ldr	r2, [sp, #28]
 800b334:	4654      	mov	r4, sl
 800b336:	2000      	movs	r0, #0
 800b338:	f04f 0c0a 	mov.w	ip, #10
 800b33c:	4621      	mov	r1, r4
 800b33e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b342:	3b30      	subs	r3, #48	@ 0x30
 800b344:	2b09      	cmp	r3, #9
 800b346:	d94b      	bls.n	800b3e0 <_svfiprintf_r+0x17c>
 800b348:	b1b0      	cbz	r0, 800b378 <_svfiprintf_r+0x114>
 800b34a:	9207      	str	r2, [sp, #28]
 800b34c:	e014      	b.n	800b378 <_svfiprintf_r+0x114>
 800b34e:	eba0 0308 	sub.w	r3, r0, r8
 800b352:	fa09 f303 	lsl.w	r3, r9, r3
 800b356:	4313      	orrs	r3, r2
 800b358:	9304      	str	r3, [sp, #16]
 800b35a:	46a2      	mov	sl, r4
 800b35c:	e7d2      	b.n	800b304 <_svfiprintf_r+0xa0>
 800b35e:	9b03      	ldr	r3, [sp, #12]
 800b360:	1d19      	adds	r1, r3, #4
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	9103      	str	r1, [sp, #12]
 800b366:	2b00      	cmp	r3, #0
 800b368:	bfbb      	ittet	lt
 800b36a:	425b      	neglt	r3, r3
 800b36c:	f042 0202 	orrlt.w	r2, r2, #2
 800b370:	9307      	strge	r3, [sp, #28]
 800b372:	9307      	strlt	r3, [sp, #28]
 800b374:	bfb8      	it	lt
 800b376:	9204      	strlt	r2, [sp, #16]
 800b378:	7823      	ldrb	r3, [r4, #0]
 800b37a:	2b2e      	cmp	r3, #46	@ 0x2e
 800b37c:	d10a      	bne.n	800b394 <_svfiprintf_r+0x130>
 800b37e:	7863      	ldrb	r3, [r4, #1]
 800b380:	2b2a      	cmp	r3, #42	@ 0x2a
 800b382:	d132      	bne.n	800b3ea <_svfiprintf_r+0x186>
 800b384:	9b03      	ldr	r3, [sp, #12]
 800b386:	1d1a      	adds	r2, r3, #4
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	9203      	str	r2, [sp, #12]
 800b38c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b390:	3402      	adds	r4, #2
 800b392:	9305      	str	r3, [sp, #20]
 800b394:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b458 <_svfiprintf_r+0x1f4>
 800b398:	7821      	ldrb	r1, [r4, #0]
 800b39a:	2203      	movs	r2, #3
 800b39c:	4650      	mov	r0, sl
 800b39e:	f7f4 ff3f 	bl	8000220 <memchr>
 800b3a2:	b138      	cbz	r0, 800b3b4 <_svfiprintf_r+0x150>
 800b3a4:	9b04      	ldr	r3, [sp, #16]
 800b3a6:	eba0 000a 	sub.w	r0, r0, sl
 800b3aa:	2240      	movs	r2, #64	@ 0x40
 800b3ac:	4082      	lsls	r2, r0
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	3401      	adds	r4, #1
 800b3b2:	9304      	str	r3, [sp, #16]
 800b3b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3b8:	4824      	ldr	r0, [pc, #144]	@ (800b44c <_svfiprintf_r+0x1e8>)
 800b3ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3be:	2206      	movs	r2, #6
 800b3c0:	f7f4 ff2e 	bl	8000220 <memchr>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	d036      	beq.n	800b436 <_svfiprintf_r+0x1d2>
 800b3c8:	4b21      	ldr	r3, [pc, #132]	@ (800b450 <_svfiprintf_r+0x1ec>)
 800b3ca:	bb1b      	cbnz	r3, 800b414 <_svfiprintf_r+0x1b0>
 800b3cc:	9b03      	ldr	r3, [sp, #12]
 800b3ce:	3307      	adds	r3, #7
 800b3d0:	f023 0307 	bic.w	r3, r3, #7
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	9303      	str	r3, [sp, #12]
 800b3d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3da:	4433      	add	r3, r6
 800b3dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3de:	e76a      	b.n	800b2b6 <_svfiprintf_r+0x52>
 800b3e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3e4:	460c      	mov	r4, r1
 800b3e6:	2001      	movs	r0, #1
 800b3e8:	e7a8      	b.n	800b33c <_svfiprintf_r+0xd8>
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	3401      	adds	r4, #1
 800b3ee:	9305      	str	r3, [sp, #20]
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	f04f 0c0a 	mov.w	ip, #10
 800b3f6:	4620      	mov	r0, r4
 800b3f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3fc:	3a30      	subs	r2, #48	@ 0x30
 800b3fe:	2a09      	cmp	r2, #9
 800b400:	d903      	bls.n	800b40a <_svfiprintf_r+0x1a6>
 800b402:	2b00      	cmp	r3, #0
 800b404:	d0c6      	beq.n	800b394 <_svfiprintf_r+0x130>
 800b406:	9105      	str	r1, [sp, #20]
 800b408:	e7c4      	b.n	800b394 <_svfiprintf_r+0x130>
 800b40a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b40e:	4604      	mov	r4, r0
 800b410:	2301      	movs	r3, #1
 800b412:	e7f0      	b.n	800b3f6 <_svfiprintf_r+0x192>
 800b414:	ab03      	add	r3, sp, #12
 800b416:	9300      	str	r3, [sp, #0]
 800b418:	462a      	mov	r2, r5
 800b41a:	4b0e      	ldr	r3, [pc, #56]	@ (800b454 <_svfiprintf_r+0x1f0>)
 800b41c:	a904      	add	r1, sp, #16
 800b41e:	4638      	mov	r0, r7
 800b420:	f7fc fcbc 	bl	8007d9c <_printf_float>
 800b424:	1c42      	adds	r2, r0, #1
 800b426:	4606      	mov	r6, r0
 800b428:	d1d6      	bne.n	800b3d8 <_svfiprintf_r+0x174>
 800b42a:	89ab      	ldrh	r3, [r5, #12]
 800b42c:	065b      	lsls	r3, r3, #25
 800b42e:	f53f af2d 	bmi.w	800b28c <_svfiprintf_r+0x28>
 800b432:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b434:	e72c      	b.n	800b290 <_svfiprintf_r+0x2c>
 800b436:	ab03      	add	r3, sp, #12
 800b438:	9300      	str	r3, [sp, #0]
 800b43a:	462a      	mov	r2, r5
 800b43c:	4b05      	ldr	r3, [pc, #20]	@ (800b454 <_svfiprintf_r+0x1f0>)
 800b43e:	a904      	add	r1, sp, #16
 800b440:	4638      	mov	r0, r7
 800b442:	f7fc ff43 	bl	80082cc <_printf_i>
 800b446:	e7ed      	b.n	800b424 <_svfiprintf_r+0x1c0>
 800b448:	0800c701 	.word	0x0800c701
 800b44c:	0800c70b 	.word	0x0800c70b
 800b450:	08007d9d 	.word	0x08007d9d
 800b454:	0800b1ad 	.word	0x0800b1ad
 800b458:	0800c707 	.word	0x0800c707

0800b45c <__sflush_r>:
 800b45c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b464:	0716      	lsls	r6, r2, #28
 800b466:	4605      	mov	r5, r0
 800b468:	460c      	mov	r4, r1
 800b46a:	d454      	bmi.n	800b516 <__sflush_r+0xba>
 800b46c:	684b      	ldr	r3, [r1, #4]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	dc02      	bgt.n	800b478 <__sflush_r+0x1c>
 800b472:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b474:	2b00      	cmp	r3, #0
 800b476:	dd48      	ble.n	800b50a <__sflush_r+0xae>
 800b478:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b47a:	2e00      	cmp	r6, #0
 800b47c:	d045      	beq.n	800b50a <__sflush_r+0xae>
 800b47e:	2300      	movs	r3, #0
 800b480:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b484:	682f      	ldr	r7, [r5, #0]
 800b486:	6a21      	ldr	r1, [r4, #32]
 800b488:	602b      	str	r3, [r5, #0]
 800b48a:	d030      	beq.n	800b4ee <__sflush_r+0x92>
 800b48c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b48e:	89a3      	ldrh	r3, [r4, #12]
 800b490:	0759      	lsls	r1, r3, #29
 800b492:	d505      	bpl.n	800b4a0 <__sflush_r+0x44>
 800b494:	6863      	ldr	r3, [r4, #4]
 800b496:	1ad2      	subs	r2, r2, r3
 800b498:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b49a:	b10b      	cbz	r3, 800b4a0 <__sflush_r+0x44>
 800b49c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b49e:	1ad2      	subs	r2, r2, r3
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b4a4:	6a21      	ldr	r1, [r4, #32]
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	47b0      	blx	r6
 800b4aa:	1c43      	adds	r3, r0, #1
 800b4ac:	89a3      	ldrh	r3, [r4, #12]
 800b4ae:	d106      	bne.n	800b4be <__sflush_r+0x62>
 800b4b0:	6829      	ldr	r1, [r5, #0]
 800b4b2:	291d      	cmp	r1, #29
 800b4b4:	d82b      	bhi.n	800b50e <__sflush_r+0xb2>
 800b4b6:	4a2a      	ldr	r2, [pc, #168]	@ (800b560 <__sflush_r+0x104>)
 800b4b8:	410a      	asrs	r2, r1
 800b4ba:	07d6      	lsls	r6, r2, #31
 800b4bc:	d427      	bmi.n	800b50e <__sflush_r+0xb2>
 800b4be:	2200      	movs	r2, #0
 800b4c0:	6062      	str	r2, [r4, #4]
 800b4c2:	04d9      	lsls	r1, r3, #19
 800b4c4:	6922      	ldr	r2, [r4, #16]
 800b4c6:	6022      	str	r2, [r4, #0]
 800b4c8:	d504      	bpl.n	800b4d4 <__sflush_r+0x78>
 800b4ca:	1c42      	adds	r2, r0, #1
 800b4cc:	d101      	bne.n	800b4d2 <__sflush_r+0x76>
 800b4ce:	682b      	ldr	r3, [r5, #0]
 800b4d0:	b903      	cbnz	r3, 800b4d4 <__sflush_r+0x78>
 800b4d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b4d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b4d6:	602f      	str	r7, [r5, #0]
 800b4d8:	b1b9      	cbz	r1, 800b50a <__sflush_r+0xae>
 800b4da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b4de:	4299      	cmp	r1, r3
 800b4e0:	d002      	beq.n	800b4e8 <__sflush_r+0x8c>
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	f7fe fa2c 	bl	8009940 <_free_r>
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800b4ec:	e00d      	b.n	800b50a <__sflush_r+0xae>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	4628      	mov	r0, r5
 800b4f2:	47b0      	blx	r6
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	1c50      	adds	r0, r2, #1
 800b4f8:	d1c9      	bne.n	800b48e <__sflush_r+0x32>
 800b4fa:	682b      	ldr	r3, [r5, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d0c6      	beq.n	800b48e <__sflush_r+0x32>
 800b500:	2b1d      	cmp	r3, #29
 800b502:	d001      	beq.n	800b508 <__sflush_r+0xac>
 800b504:	2b16      	cmp	r3, #22
 800b506:	d11e      	bne.n	800b546 <__sflush_r+0xea>
 800b508:	602f      	str	r7, [r5, #0]
 800b50a:	2000      	movs	r0, #0
 800b50c:	e022      	b.n	800b554 <__sflush_r+0xf8>
 800b50e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b512:	b21b      	sxth	r3, r3
 800b514:	e01b      	b.n	800b54e <__sflush_r+0xf2>
 800b516:	690f      	ldr	r7, [r1, #16]
 800b518:	2f00      	cmp	r7, #0
 800b51a:	d0f6      	beq.n	800b50a <__sflush_r+0xae>
 800b51c:	0793      	lsls	r3, r2, #30
 800b51e:	680e      	ldr	r6, [r1, #0]
 800b520:	bf08      	it	eq
 800b522:	694b      	ldreq	r3, [r1, #20]
 800b524:	600f      	str	r7, [r1, #0]
 800b526:	bf18      	it	ne
 800b528:	2300      	movne	r3, #0
 800b52a:	eba6 0807 	sub.w	r8, r6, r7
 800b52e:	608b      	str	r3, [r1, #8]
 800b530:	f1b8 0f00 	cmp.w	r8, #0
 800b534:	dde9      	ble.n	800b50a <__sflush_r+0xae>
 800b536:	6a21      	ldr	r1, [r4, #32]
 800b538:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b53a:	4643      	mov	r3, r8
 800b53c:	463a      	mov	r2, r7
 800b53e:	4628      	mov	r0, r5
 800b540:	47b0      	blx	r6
 800b542:	2800      	cmp	r0, #0
 800b544:	dc08      	bgt.n	800b558 <__sflush_r+0xfc>
 800b546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b54e:	81a3      	strh	r3, [r4, #12]
 800b550:	f04f 30ff 	mov.w	r0, #4294967295
 800b554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b558:	4407      	add	r7, r0
 800b55a:	eba8 0800 	sub.w	r8, r8, r0
 800b55e:	e7e7      	b.n	800b530 <__sflush_r+0xd4>
 800b560:	dfbffffe 	.word	0xdfbffffe

0800b564 <_fflush_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	690b      	ldr	r3, [r1, #16]
 800b568:	4605      	mov	r5, r0
 800b56a:	460c      	mov	r4, r1
 800b56c:	b913      	cbnz	r3, 800b574 <_fflush_r+0x10>
 800b56e:	2500      	movs	r5, #0
 800b570:	4628      	mov	r0, r5
 800b572:	bd38      	pop	{r3, r4, r5, pc}
 800b574:	b118      	cbz	r0, 800b57e <_fflush_r+0x1a>
 800b576:	6a03      	ldr	r3, [r0, #32]
 800b578:	b90b      	cbnz	r3, 800b57e <_fflush_r+0x1a>
 800b57a:	f7fd fa67 	bl	8008a4c <__sinit>
 800b57e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d0f3      	beq.n	800b56e <_fflush_r+0xa>
 800b586:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b588:	07d0      	lsls	r0, r2, #31
 800b58a:	d404      	bmi.n	800b596 <_fflush_r+0x32>
 800b58c:	0599      	lsls	r1, r3, #22
 800b58e:	d402      	bmi.n	800b596 <_fflush_r+0x32>
 800b590:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b592:	f7fd fb72 	bl	8008c7a <__retarget_lock_acquire_recursive>
 800b596:	4628      	mov	r0, r5
 800b598:	4621      	mov	r1, r4
 800b59a:	f7ff ff5f 	bl	800b45c <__sflush_r>
 800b59e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b5a0:	07da      	lsls	r2, r3, #31
 800b5a2:	4605      	mov	r5, r0
 800b5a4:	d4e4      	bmi.n	800b570 <_fflush_r+0xc>
 800b5a6:	89a3      	ldrh	r3, [r4, #12]
 800b5a8:	059b      	lsls	r3, r3, #22
 800b5aa:	d4e1      	bmi.n	800b570 <_fflush_r+0xc>
 800b5ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b5ae:	f7fd fb65 	bl	8008c7c <__retarget_lock_release_recursive>
 800b5b2:	e7dd      	b.n	800b570 <_fflush_r+0xc>

0800b5b4 <memmove>:
 800b5b4:	4288      	cmp	r0, r1
 800b5b6:	b510      	push	{r4, lr}
 800b5b8:	eb01 0402 	add.w	r4, r1, r2
 800b5bc:	d902      	bls.n	800b5c4 <memmove+0x10>
 800b5be:	4284      	cmp	r4, r0
 800b5c0:	4623      	mov	r3, r4
 800b5c2:	d807      	bhi.n	800b5d4 <memmove+0x20>
 800b5c4:	1e43      	subs	r3, r0, #1
 800b5c6:	42a1      	cmp	r1, r4
 800b5c8:	d008      	beq.n	800b5dc <memmove+0x28>
 800b5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b5d2:	e7f8      	b.n	800b5c6 <memmove+0x12>
 800b5d4:	4402      	add	r2, r0
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	428a      	cmp	r2, r1
 800b5da:	d100      	bne.n	800b5de <memmove+0x2a>
 800b5dc:	bd10      	pop	{r4, pc}
 800b5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5e6:	e7f7      	b.n	800b5d8 <memmove+0x24>

0800b5e8 <strncmp>:
 800b5e8:	b510      	push	{r4, lr}
 800b5ea:	b16a      	cbz	r2, 800b608 <strncmp+0x20>
 800b5ec:	3901      	subs	r1, #1
 800b5ee:	1884      	adds	r4, r0, r2
 800b5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d103      	bne.n	800b604 <strncmp+0x1c>
 800b5fc:	42a0      	cmp	r0, r4
 800b5fe:	d001      	beq.n	800b604 <strncmp+0x1c>
 800b600:	2a00      	cmp	r2, #0
 800b602:	d1f5      	bne.n	800b5f0 <strncmp+0x8>
 800b604:	1ad0      	subs	r0, r2, r3
 800b606:	bd10      	pop	{r4, pc}
 800b608:	4610      	mov	r0, r2
 800b60a:	e7fc      	b.n	800b606 <strncmp+0x1e>

0800b60c <_sbrk_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d06      	ldr	r5, [pc, #24]	@ (800b628 <_sbrk_r+0x1c>)
 800b610:	2300      	movs	r3, #0
 800b612:	4604      	mov	r4, r0
 800b614:	4608      	mov	r0, r1
 800b616:	602b      	str	r3, [r5, #0]
 800b618:	f7f6 feb4 	bl	8002384 <_sbrk>
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	d102      	bne.n	800b626 <_sbrk_r+0x1a>
 800b620:	682b      	ldr	r3, [r5, #0]
 800b622:	b103      	cbz	r3, 800b626 <_sbrk_r+0x1a>
 800b624:	6023      	str	r3, [r4, #0]
 800b626:	bd38      	pop	{r3, r4, r5, pc}
 800b628:	2000086c 	.word	0x2000086c
 800b62c:	00000000 	.word	0x00000000

0800b630 <nan>:
 800b630:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b638 <nan+0x8>
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	00000000 	.word	0x00000000
 800b63c:	7ff80000 	.word	0x7ff80000

0800b640 <__assert_func>:
 800b640:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b642:	4614      	mov	r4, r2
 800b644:	461a      	mov	r2, r3
 800b646:	4b09      	ldr	r3, [pc, #36]	@ (800b66c <__assert_func+0x2c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4605      	mov	r5, r0
 800b64c:	68d8      	ldr	r0, [r3, #12]
 800b64e:	b954      	cbnz	r4, 800b666 <__assert_func+0x26>
 800b650:	4b07      	ldr	r3, [pc, #28]	@ (800b670 <__assert_func+0x30>)
 800b652:	461c      	mov	r4, r3
 800b654:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b658:	9100      	str	r1, [sp, #0]
 800b65a:	462b      	mov	r3, r5
 800b65c:	4905      	ldr	r1, [pc, #20]	@ (800b674 <__assert_func+0x34>)
 800b65e:	f000 fba7 	bl	800bdb0 <fiprintf>
 800b662:	f000 fbb7 	bl	800bdd4 <abort>
 800b666:	4b04      	ldr	r3, [pc, #16]	@ (800b678 <__assert_func+0x38>)
 800b668:	e7f4      	b.n	800b654 <__assert_func+0x14>
 800b66a:	bf00      	nop
 800b66c:	20000014 	.word	0x20000014
 800b670:	0800c755 	.word	0x0800c755
 800b674:	0800c727 	.word	0x0800c727
 800b678:	0800c71a 	.word	0x0800c71a

0800b67c <_calloc_r>:
 800b67c:	b570      	push	{r4, r5, r6, lr}
 800b67e:	fba1 5402 	umull	r5, r4, r1, r2
 800b682:	b93c      	cbnz	r4, 800b694 <_calloc_r+0x18>
 800b684:	4629      	mov	r1, r5
 800b686:	f7fe f9cf 	bl	8009a28 <_malloc_r>
 800b68a:	4606      	mov	r6, r0
 800b68c:	b928      	cbnz	r0, 800b69a <_calloc_r+0x1e>
 800b68e:	2600      	movs	r6, #0
 800b690:	4630      	mov	r0, r6
 800b692:	bd70      	pop	{r4, r5, r6, pc}
 800b694:	220c      	movs	r2, #12
 800b696:	6002      	str	r2, [r0, #0]
 800b698:	e7f9      	b.n	800b68e <_calloc_r+0x12>
 800b69a:	462a      	mov	r2, r5
 800b69c:	4621      	mov	r1, r4
 800b69e:	f7fd fa6e 	bl	8008b7e <memset>
 800b6a2:	e7f5      	b.n	800b690 <_calloc_r+0x14>

0800b6a4 <rshift>:
 800b6a4:	6903      	ldr	r3, [r0, #16]
 800b6a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b6aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b6b2:	f100 0414 	add.w	r4, r0, #20
 800b6b6:	dd45      	ble.n	800b744 <rshift+0xa0>
 800b6b8:	f011 011f 	ands.w	r1, r1, #31
 800b6bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b6c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b6c4:	d10c      	bne.n	800b6e0 <rshift+0x3c>
 800b6c6:	f100 0710 	add.w	r7, r0, #16
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	42b1      	cmp	r1, r6
 800b6ce:	d334      	bcc.n	800b73a <rshift+0x96>
 800b6d0:	1a9b      	subs	r3, r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	1eea      	subs	r2, r5, #3
 800b6d6:	4296      	cmp	r6, r2
 800b6d8:	bf38      	it	cc
 800b6da:	2300      	movcc	r3, #0
 800b6dc:	4423      	add	r3, r4
 800b6de:	e015      	b.n	800b70c <rshift+0x68>
 800b6e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b6e4:	f1c1 0820 	rsb	r8, r1, #32
 800b6e8:	40cf      	lsrs	r7, r1
 800b6ea:	f105 0e04 	add.w	lr, r5, #4
 800b6ee:	46a1      	mov	r9, r4
 800b6f0:	4576      	cmp	r6, lr
 800b6f2:	46f4      	mov	ip, lr
 800b6f4:	d815      	bhi.n	800b722 <rshift+0x7e>
 800b6f6:	1a9a      	subs	r2, r3, r2
 800b6f8:	0092      	lsls	r2, r2, #2
 800b6fa:	3a04      	subs	r2, #4
 800b6fc:	3501      	adds	r5, #1
 800b6fe:	42ae      	cmp	r6, r5
 800b700:	bf38      	it	cc
 800b702:	2200      	movcc	r2, #0
 800b704:	18a3      	adds	r3, r4, r2
 800b706:	50a7      	str	r7, [r4, r2]
 800b708:	b107      	cbz	r7, 800b70c <rshift+0x68>
 800b70a:	3304      	adds	r3, #4
 800b70c:	1b1a      	subs	r2, r3, r4
 800b70e:	42a3      	cmp	r3, r4
 800b710:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b714:	bf08      	it	eq
 800b716:	2300      	moveq	r3, #0
 800b718:	6102      	str	r2, [r0, #16]
 800b71a:	bf08      	it	eq
 800b71c:	6143      	streq	r3, [r0, #20]
 800b71e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b722:	f8dc c000 	ldr.w	ip, [ip]
 800b726:	fa0c fc08 	lsl.w	ip, ip, r8
 800b72a:	ea4c 0707 	orr.w	r7, ip, r7
 800b72e:	f849 7b04 	str.w	r7, [r9], #4
 800b732:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b736:	40cf      	lsrs	r7, r1
 800b738:	e7da      	b.n	800b6f0 <rshift+0x4c>
 800b73a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b73e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b742:	e7c3      	b.n	800b6cc <rshift+0x28>
 800b744:	4623      	mov	r3, r4
 800b746:	e7e1      	b.n	800b70c <rshift+0x68>

0800b748 <__hexdig_fun>:
 800b748:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b74c:	2b09      	cmp	r3, #9
 800b74e:	d802      	bhi.n	800b756 <__hexdig_fun+0xe>
 800b750:	3820      	subs	r0, #32
 800b752:	b2c0      	uxtb	r0, r0
 800b754:	4770      	bx	lr
 800b756:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	d801      	bhi.n	800b762 <__hexdig_fun+0x1a>
 800b75e:	3847      	subs	r0, #71	@ 0x47
 800b760:	e7f7      	b.n	800b752 <__hexdig_fun+0xa>
 800b762:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b766:	2b05      	cmp	r3, #5
 800b768:	d801      	bhi.n	800b76e <__hexdig_fun+0x26>
 800b76a:	3827      	subs	r0, #39	@ 0x27
 800b76c:	e7f1      	b.n	800b752 <__hexdig_fun+0xa>
 800b76e:	2000      	movs	r0, #0
 800b770:	4770      	bx	lr
	...

0800b774 <__gethex>:
 800b774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b778:	b085      	sub	sp, #20
 800b77a:	468a      	mov	sl, r1
 800b77c:	9302      	str	r3, [sp, #8]
 800b77e:	680b      	ldr	r3, [r1, #0]
 800b780:	9001      	str	r0, [sp, #4]
 800b782:	4690      	mov	r8, r2
 800b784:	1c9c      	adds	r4, r3, #2
 800b786:	46a1      	mov	r9, r4
 800b788:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b78c:	2830      	cmp	r0, #48	@ 0x30
 800b78e:	d0fa      	beq.n	800b786 <__gethex+0x12>
 800b790:	eba9 0303 	sub.w	r3, r9, r3
 800b794:	f1a3 0b02 	sub.w	fp, r3, #2
 800b798:	f7ff ffd6 	bl	800b748 <__hexdig_fun>
 800b79c:	4605      	mov	r5, r0
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d168      	bne.n	800b874 <__gethex+0x100>
 800b7a2:	49a0      	ldr	r1, [pc, #640]	@ (800ba24 <__gethex+0x2b0>)
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	4648      	mov	r0, r9
 800b7a8:	f7ff ff1e 	bl	800b5e8 <strncmp>
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	2800      	cmp	r0, #0
 800b7b0:	d167      	bne.n	800b882 <__gethex+0x10e>
 800b7b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b7b6:	4626      	mov	r6, r4
 800b7b8:	f7ff ffc6 	bl	800b748 <__hexdig_fun>
 800b7bc:	2800      	cmp	r0, #0
 800b7be:	d062      	beq.n	800b886 <__gethex+0x112>
 800b7c0:	4623      	mov	r3, r4
 800b7c2:	7818      	ldrb	r0, [r3, #0]
 800b7c4:	2830      	cmp	r0, #48	@ 0x30
 800b7c6:	4699      	mov	r9, r3
 800b7c8:	f103 0301 	add.w	r3, r3, #1
 800b7cc:	d0f9      	beq.n	800b7c2 <__gethex+0x4e>
 800b7ce:	f7ff ffbb 	bl	800b748 <__hexdig_fun>
 800b7d2:	fab0 f580 	clz	r5, r0
 800b7d6:	096d      	lsrs	r5, r5, #5
 800b7d8:	f04f 0b01 	mov.w	fp, #1
 800b7dc:	464a      	mov	r2, r9
 800b7de:	4616      	mov	r6, r2
 800b7e0:	3201      	adds	r2, #1
 800b7e2:	7830      	ldrb	r0, [r6, #0]
 800b7e4:	f7ff ffb0 	bl	800b748 <__hexdig_fun>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	d1f8      	bne.n	800b7de <__gethex+0x6a>
 800b7ec:	498d      	ldr	r1, [pc, #564]	@ (800ba24 <__gethex+0x2b0>)
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f7ff fef9 	bl	800b5e8 <strncmp>
 800b7f6:	2800      	cmp	r0, #0
 800b7f8:	d13f      	bne.n	800b87a <__gethex+0x106>
 800b7fa:	b944      	cbnz	r4, 800b80e <__gethex+0x9a>
 800b7fc:	1c74      	adds	r4, r6, #1
 800b7fe:	4622      	mov	r2, r4
 800b800:	4616      	mov	r6, r2
 800b802:	3201      	adds	r2, #1
 800b804:	7830      	ldrb	r0, [r6, #0]
 800b806:	f7ff ff9f 	bl	800b748 <__hexdig_fun>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d1f8      	bne.n	800b800 <__gethex+0x8c>
 800b80e:	1ba4      	subs	r4, r4, r6
 800b810:	00a7      	lsls	r7, r4, #2
 800b812:	7833      	ldrb	r3, [r6, #0]
 800b814:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b818:	2b50      	cmp	r3, #80	@ 0x50
 800b81a:	d13e      	bne.n	800b89a <__gethex+0x126>
 800b81c:	7873      	ldrb	r3, [r6, #1]
 800b81e:	2b2b      	cmp	r3, #43	@ 0x2b
 800b820:	d033      	beq.n	800b88a <__gethex+0x116>
 800b822:	2b2d      	cmp	r3, #45	@ 0x2d
 800b824:	d034      	beq.n	800b890 <__gethex+0x11c>
 800b826:	1c71      	adds	r1, r6, #1
 800b828:	2400      	movs	r4, #0
 800b82a:	7808      	ldrb	r0, [r1, #0]
 800b82c:	f7ff ff8c 	bl	800b748 <__hexdig_fun>
 800b830:	1e43      	subs	r3, r0, #1
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b18      	cmp	r3, #24
 800b836:	d830      	bhi.n	800b89a <__gethex+0x126>
 800b838:	f1a0 0210 	sub.w	r2, r0, #16
 800b83c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b840:	f7ff ff82 	bl	800b748 <__hexdig_fun>
 800b844:	f100 3cff 	add.w	ip, r0, #4294967295
 800b848:	fa5f fc8c 	uxtb.w	ip, ip
 800b84c:	f1bc 0f18 	cmp.w	ip, #24
 800b850:	f04f 030a 	mov.w	r3, #10
 800b854:	d91e      	bls.n	800b894 <__gethex+0x120>
 800b856:	b104      	cbz	r4, 800b85a <__gethex+0xe6>
 800b858:	4252      	negs	r2, r2
 800b85a:	4417      	add	r7, r2
 800b85c:	f8ca 1000 	str.w	r1, [sl]
 800b860:	b1ed      	cbz	r5, 800b89e <__gethex+0x12a>
 800b862:	f1bb 0f00 	cmp.w	fp, #0
 800b866:	bf0c      	ite	eq
 800b868:	2506      	moveq	r5, #6
 800b86a:	2500      	movne	r5, #0
 800b86c:	4628      	mov	r0, r5
 800b86e:	b005      	add	sp, #20
 800b870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b874:	2500      	movs	r5, #0
 800b876:	462c      	mov	r4, r5
 800b878:	e7b0      	b.n	800b7dc <__gethex+0x68>
 800b87a:	2c00      	cmp	r4, #0
 800b87c:	d1c7      	bne.n	800b80e <__gethex+0x9a>
 800b87e:	4627      	mov	r7, r4
 800b880:	e7c7      	b.n	800b812 <__gethex+0x9e>
 800b882:	464e      	mov	r6, r9
 800b884:	462f      	mov	r7, r5
 800b886:	2501      	movs	r5, #1
 800b888:	e7c3      	b.n	800b812 <__gethex+0x9e>
 800b88a:	2400      	movs	r4, #0
 800b88c:	1cb1      	adds	r1, r6, #2
 800b88e:	e7cc      	b.n	800b82a <__gethex+0xb6>
 800b890:	2401      	movs	r4, #1
 800b892:	e7fb      	b.n	800b88c <__gethex+0x118>
 800b894:	fb03 0002 	mla	r0, r3, r2, r0
 800b898:	e7ce      	b.n	800b838 <__gethex+0xc4>
 800b89a:	4631      	mov	r1, r6
 800b89c:	e7de      	b.n	800b85c <__gethex+0xe8>
 800b89e:	eba6 0309 	sub.w	r3, r6, r9
 800b8a2:	3b01      	subs	r3, #1
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	2b07      	cmp	r3, #7
 800b8a8:	dc0a      	bgt.n	800b8c0 <__gethex+0x14c>
 800b8aa:	9801      	ldr	r0, [sp, #4]
 800b8ac:	f7fe f948 	bl	8009b40 <_Balloc>
 800b8b0:	4604      	mov	r4, r0
 800b8b2:	b940      	cbnz	r0, 800b8c6 <__gethex+0x152>
 800b8b4:	4b5c      	ldr	r3, [pc, #368]	@ (800ba28 <__gethex+0x2b4>)
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	21e4      	movs	r1, #228	@ 0xe4
 800b8ba:	485c      	ldr	r0, [pc, #368]	@ (800ba2c <__gethex+0x2b8>)
 800b8bc:	f7ff fec0 	bl	800b640 <__assert_func>
 800b8c0:	3101      	adds	r1, #1
 800b8c2:	105b      	asrs	r3, r3, #1
 800b8c4:	e7ef      	b.n	800b8a6 <__gethex+0x132>
 800b8c6:	f100 0a14 	add.w	sl, r0, #20
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	4655      	mov	r5, sl
 800b8ce:	469b      	mov	fp, r3
 800b8d0:	45b1      	cmp	r9, r6
 800b8d2:	d337      	bcc.n	800b944 <__gethex+0x1d0>
 800b8d4:	f845 bb04 	str.w	fp, [r5], #4
 800b8d8:	eba5 050a 	sub.w	r5, r5, sl
 800b8dc:	10ad      	asrs	r5, r5, #2
 800b8de:	6125      	str	r5, [r4, #16]
 800b8e0:	4658      	mov	r0, fp
 800b8e2:	f7fe fa1f 	bl	8009d24 <__hi0bits>
 800b8e6:	016d      	lsls	r5, r5, #5
 800b8e8:	f8d8 6000 	ldr.w	r6, [r8]
 800b8ec:	1a2d      	subs	r5, r5, r0
 800b8ee:	42b5      	cmp	r5, r6
 800b8f0:	dd54      	ble.n	800b99c <__gethex+0x228>
 800b8f2:	1bad      	subs	r5, r5, r6
 800b8f4:	4629      	mov	r1, r5
 800b8f6:	4620      	mov	r0, r4
 800b8f8:	f7fe fdb3 	bl	800a462 <__any_on>
 800b8fc:	4681      	mov	r9, r0
 800b8fe:	b178      	cbz	r0, 800b920 <__gethex+0x1ac>
 800b900:	1e6b      	subs	r3, r5, #1
 800b902:	1159      	asrs	r1, r3, #5
 800b904:	f003 021f 	and.w	r2, r3, #31
 800b908:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b90c:	f04f 0901 	mov.w	r9, #1
 800b910:	fa09 f202 	lsl.w	r2, r9, r2
 800b914:	420a      	tst	r2, r1
 800b916:	d003      	beq.n	800b920 <__gethex+0x1ac>
 800b918:	454b      	cmp	r3, r9
 800b91a:	dc36      	bgt.n	800b98a <__gethex+0x216>
 800b91c:	f04f 0902 	mov.w	r9, #2
 800b920:	4629      	mov	r1, r5
 800b922:	4620      	mov	r0, r4
 800b924:	f7ff febe 	bl	800b6a4 <rshift>
 800b928:	442f      	add	r7, r5
 800b92a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b92e:	42bb      	cmp	r3, r7
 800b930:	da42      	bge.n	800b9b8 <__gethex+0x244>
 800b932:	9801      	ldr	r0, [sp, #4]
 800b934:	4621      	mov	r1, r4
 800b936:	f7fe f943 	bl	8009bc0 <_Bfree>
 800b93a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b93c:	2300      	movs	r3, #0
 800b93e:	6013      	str	r3, [r2, #0]
 800b940:	25a3      	movs	r5, #163	@ 0xa3
 800b942:	e793      	b.n	800b86c <__gethex+0xf8>
 800b944:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b948:	2a2e      	cmp	r2, #46	@ 0x2e
 800b94a:	d012      	beq.n	800b972 <__gethex+0x1fe>
 800b94c:	2b20      	cmp	r3, #32
 800b94e:	d104      	bne.n	800b95a <__gethex+0x1e6>
 800b950:	f845 bb04 	str.w	fp, [r5], #4
 800b954:	f04f 0b00 	mov.w	fp, #0
 800b958:	465b      	mov	r3, fp
 800b95a:	7830      	ldrb	r0, [r6, #0]
 800b95c:	9303      	str	r3, [sp, #12]
 800b95e:	f7ff fef3 	bl	800b748 <__hexdig_fun>
 800b962:	9b03      	ldr	r3, [sp, #12]
 800b964:	f000 000f 	and.w	r0, r0, #15
 800b968:	4098      	lsls	r0, r3
 800b96a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b96e:	3304      	adds	r3, #4
 800b970:	e7ae      	b.n	800b8d0 <__gethex+0x15c>
 800b972:	45b1      	cmp	r9, r6
 800b974:	d8ea      	bhi.n	800b94c <__gethex+0x1d8>
 800b976:	492b      	ldr	r1, [pc, #172]	@ (800ba24 <__gethex+0x2b0>)
 800b978:	9303      	str	r3, [sp, #12]
 800b97a:	2201      	movs	r2, #1
 800b97c:	4630      	mov	r0, r6
 800b97e:	f7ff fe33 	bl	800b5e8 <strncmp>
 800b982:	9b03      	ldr	r3, [sp, #12]
 800b984:	2800      	cmp	r0, #0
 800b986:	d1e1      	bne.n	800b94c <__gethex+0x1d8>
 800b988:	e7a2      	b.n	800b8d0 <__gethex+0x15c>
 800b98a:	1ea9      	subs	r1, r5, #2
 800b98c:	4620      	mov	r0, r4
 800b98e:	f7fe fd68 	bl	800a462 <__any_on>
 800b992:	2800      	cmp	r0, #0
 800b994:	d0c2      	beq.n	800b91c <__gethex+0x1a8>
 800b996:	f04f 0903 	mov.w	r9, #3
 800b99a:	e7c1      	b.n	800b920 <__gethex+0x1ac>
 800b99c:	da09      	bge.n	800b9b2 <__gethex+0x23e>
 800b99e:	1b75      	subs	r5, r6, r5
 800b9a0:	4621      	mov	r1, r4
 800b9a2:	9801      	ldr	r0, [sp, #4]
 800b9a4:	462a      	mov	r2, r5
 800b9a6:	f7fe fb23 	bl	8009ff0 <__lshift>
 800b9aa:	1b7f      	subs	r7, r7, r5
 800b9ac:	4604      	mov	r4, r0
 800b9ae:	f100 0a14 	add.w	sl, r0, #20
 800b9b2:	f04f 0900 	mov.w	r9, #0
 800b9b6:	e7b8      	b.n	800b92a <__gethex+0x1b6>
 800b9b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b9bc:	42bd      	cmp	r5, r7
 800b9be:	dd6f      	ble.n	800baa0 <__gethex+0x32c>
 800b9c0:	1bed      	subs	r5, r5, r7
 800b9c2:	42ae      	cmp	r6, r5
 800b9c4:	dc34      	bgt.n	800ba30 <__gethex+0x2bc>
 800b9c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d022      	beq.n	800ba14 <__gethex+0x2a0>
 800b9ce:	2b03      	cmp	r3, #3
 800b9d0:	d024      	beq.n	800ba1c <__gethex+0x2a8>
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	d115      	bne.n	800ba02 <__gethex+0x28e>
 800b9d6:	42ae      	cmp	r6, r5
 800b9d8:	d113      	bne.n	800ba02 <__gethex+0x28e>
 800b9da:	2e01      	cmp	r6, #1
 800b9dc:	d10b      	bne.n	800b9f6 <__gethex+0x282>
 800b9de:	9a02      	ldr	r2, [sp, #8]
 800b9e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	6123      	str	r3, [r4, #16]
 800b9ea:	f8ca 3000 	str.w	r3, [sl]
 800b9ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9f0:	2562      	movs	r5, #98	@ 0x62
 800b9f2:	601c      	str	r4, [r3, #0]
 800b9f4:	e73a      	b.n	800b86c <__gethex+0xf8>
 800b9f6:	1e71      	subs	r1, r6, #1
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	f7fe fd32 	bl	800a462 <__any_on>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	d1ed      	bne.n	800b9de <__gethex+0x26a>
 800ba02:	9801      	ldr	r0, [sp, #4]
 800ba04:	4621      	mov	r1, r4
 800ba06:	f7fe f8db 	bl	8009bc0 <_Bfree>
 800ba0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	2550      	movs	r5, #80	@ 0x50
 800ba12:	e72b      	b.n	800b86c <__gethex+0xf8>
 800ba14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d1f3      	bne.n	800ba02 <__gethex+0x28e>
 800ba1a:	e7e0      	b.n	800b9de <__gethex+0x26a>
 800ba1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1dd      	bne.n	800b9de <__gethex+0x26a>
 800ba22:	e7ee      	b.n	800ba02 <__gethex+0x28e>
 800ba24:	0800c5a8 	.word	0x0800c5a8
 800ba28:	0800c43d 	.word	0x0800c43d
 800ba2c:	0800c756 	.word	0x0800c756
 800ba30:	1e6f      	subs	r7, r5, #1
 800ba32:	f1b9 0f00 	cmp.w	r9, #0
 800ba36:	d130      	bne.n	800ba9a <__gethex+0x326>
 800ba38:	b127      	cbz	r7, 800ba44 <__gethex+0x2d0>
 800ba3a:	4639      	mov	r1, r7
 800ba3c:	4620      	mov	r0, r4
 800ba3e:	f7fe fd10 	bl	800a462 <__any_on>
 800ba42:	4681      	mov	r9, r0
 800ba44:	117a      	asrs	r2, r7, #5
 800ba46:	2301      	movs	r3, #1
 800ba48:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ba4c:	f007 071f 	and.w	r7, r7, #31
 800ba50:	40bb      	lsls	r3, r7
 800ba52:	4213      	tst	r3, r2
 800ba54:	4629      	mov	r1, r5
 800ba56:	4620      	mov	r0, r4
 800ba58:	bf18      	it	ne
 800ba5a:	f049 0902 	orrne.w	r9, r9, #2
 800ba5e:	f7ff fe21 	bl	800b6a4 <rshift>
 800ba62:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ba66:	1b76      	subs	r6, r6, r5
 800ba68:	2502      	movs	r5, #2
 800ba6a:	f1b9 0f00 	cmp.w	r9, #0
 800ba6e:	d047      	beq.n	800bb00 <__gethex+0x38c>
 800ba70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba74:	2b02      	cmp	r3, #2
 800ba76:	d015      	beq.n	800baa4 <__gethex+0x330>
 800ba78:	2b03      	cmp	r3, #3
 800ba7a:	d017      	beq.n	800baac <__gethex+0x338>
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d109      	bne.n	800ba94 <__gethex+0x320>
 800ba80:	f019 0f02 	tst.w	r9, #2
 800ba84:	d006      	beq.n	800ba94 <__gethex+0x320>
 800ba86:	f8da 3000 	ldr.w	r3, [sl]
 800ba8a:	ea49 0903 	orr.w	r9, r9, r3
 800ba8e:	f019 0f01 	tst.w	r9, #1
 800ba92:	d10e      	bne.n	800bab2 <__gethex+0x33e>
 800ba94:	f045 0510 	orr.w	r5, r5, #16
 800ba98:	e032      	b.n	800bb00 <__gethex+0x38c>
 800ba9a:	f04f 0901 	mov.w	r9, #1
 800ba9e:	e7d1      	b.n	800ba44 <__gethex+0x2d0>
 800baa0:	2501      	movs	r5, #1
 800baa2:	e7e2      	b.n	800ba6a <__gethex+0x2f6>
 800baa4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baa6:	f1c3 0301 	rsb	r3, r3, #1
 800baaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800baac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d0f0      	beq.n	800ba94 <__gethex+0x320>
 800bab2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bab6:	f104 0314 	add.w	r3, r4, #20
 800baba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800babe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bac2:	f04f 0c00 	mov.w	ip, #0
 800bac6:	4618      	mov	r0, r3
 800bac8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bacc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bad0:	d01b      	beq.n	800bb0a <__gethex+0x396>
 800bad2:	3201      	adds	r2, #1
 800bad4:	6002      	str	r2, [r0, #0]
 800bad6:	2d02      	cmp	r5, #2
 800bad8:	f104 0314 	add.w	r3, r4, #20
 800badc:	d13c      	bne.n	800bb58 <__gethex+0x3e4>
 800bade:	f8d8 2000 	ldr.w	r2, [r8]
 800bae2:	3a01      	subs	r2, #1
 800bae4:	42b2      	cmp	r2, r6
 800bae6:	d109      	bne.n	800bafc <__gethex+0x388>
 800bae8:	1171      	asrs	r1, r6, #5
 800baea:	2201      	movs	r2, #1
 800baec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800baf0:	f006 061f 	and.w	r6, r6, #31
 800baf4:	fa02 f606 	lsl.w	r6, r2, r6
 800baf8:	421e      	tst	r6, r3
 800bafa:	d13a      	bne.n	800bb72 <__gethex+0x3fe>
 800bafc:	f045 0520 	orr.w	r5, r5, #32
 800bb00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb02:	601c      	str	r4, [r3, #0]
 800bb04:	9b02      	ldr	r3, [sp, #8]
 800bb06:	601f      	str	r7, [r3, #0]
 800bb08:	e6b0      	b.n	800b86c <__gethex+0xf8>
 800bb0a:	4299      	cmp	r1, r3
 800bb0c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bb10:	d8d9      	bhi.n	800bac6 <__gethex+0x352>
 800bb12:	68a3      	ldr	r3, [r4, #8]
 800bb14:	459b      	cmp	fp, r3
 800bb16:	db17      	blt.n	800bb48 <__gethex+0x3d4>
 800bb18:	6861      	ldr	r1, [r4, #4]
 800bb1a:	9801      	ldr	r0, [sp, #4]
 800bb1c:	3101      	adds	r1, #1
 800bb1e:	f7fe f80f 	bl	8009b40 <_Balloc>
 800bb22:	4681      	mov	r9, r0
 800bb24:	b918      	cbnz	r0, 800bb2e <__gethex+0x3ba>
 800bb26:	4b1a      	ldr	r3, [pc, #104]	@ (800bb90 <__gethex+0x41c>)
 800bb28:	4602      	mov	r2, r0
 800bb2a:	2184      	movs	r1, #132	@ 0x84
 800bb2c:	e6c5      	b.n	800b8ba <__gethex+0x146>
 800bb2e:	6922      	ldr	r2, [r4, #16]
 800bb30:	3202      	adds	r2, #2
 800bb32:	f104 010c 	add.w	r1, r4, #12
 800bb36:	0092      	lsls	r2, r2, #2
 800bb38:	300c      	adds	r0, #12
 800bb3a:	f7fd f8a0 	bl	8008c7e <memcpy>
 800bb3e:	4621      	mov	r1, r4
 800bb40:	9801      	ldr	r0, [sp, #4]
 800bb42:	f7fe f83d 	bl	8009bc0 <_Bfree>
 800bb46:	464c      	mov	r4, r9
 800bb48:	6923      	ldr	r3, [r4, #16]
 800bb4a:	1c5a      	adds	r2, r3, #1
 800bb4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb50:	6122      	str	r2, [r4, #16]
 800bb52:	2201      	movs	r2, #1
 800bb54:	615a      	str	r2, [r3, #20]
 800bb56:	e7be      	b.n	800bad6 <__gethex+0x362>
 800bb58:	6922      	ldr	r2, [r4, #16]
 800bb5a:	455a      	cmp	r2, fp
 800bb5c:	dd0b      	ble.n	800bb76 <__gethex+0x402>
 800bb5e:	2101      	movs	r1, #1
 800bb60:	4620      	mov	r0, r4
 800bb62:	f7ff fd9f 	bl	800b6a4 <rshift>
 800bb66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb6a:	3701      	adds	r7, #1
 800bb6c:	42bb      	cmp	r3, r7
 800bb6e:	f6ff aee0 	blt.w	800b932 <__gethex+0x1be>
 800bb72:	2501      	movs	r5, #1
 800bb74:	e7c2      	b.n	800bafc <__gethex+0x388>
 800bb76:	f016 061f 	ands.w	r6, r6, #31
 800bb7a:	d0fa      	beq.n	800bb72 <__gethex+0x3fe>
 800bb7c:	4453      	add	r3, sl
 800bb7e:	f1c6 0620 	rsb	r6, r6, #32
 800bb82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb86:	f7fe f8cd 	bl	8009d24 <__hi0bits>
 800bb8a:	42b0      	cmp	r0, r6
 800bb8c:	dbe7      	blt.n	800bb5e <__gethex+0x3ea>
 800bb8e:	e7f0      	b.n	800bb72 <__gethex+0x3fe>
 800bb90:	0800c43d 	.word	0x0800c43d

0800bb94 <L_shift>:
 800bb94:	f1c2 0208 	rsb	r2, r2, #8
 800bb98:	0092      	lsls	r2, r2, #2
 800bb9a:	b570      	push	{r4, r5, r6, lr}
 800bb9c:	f1c2 0620 	rsb	r6, r2, #32
 800bba0:	6843      	ldr	r3, [r0, #4]
 800bba2:	6804      	ldr	r4, [r0, #0]
 800bba4:	fa03 f506 	lsl.w	r5, r3, r6
 800bba8:	432c      	orrs	r4, r5
 800bbaa:	40d3      	lsrs	r3, r2
 800bbac:	6004      	str	r4, [r0, #0]
 800bbae:	f840 3f04 	str.w	r3, [r0, #4]!
 800bbb2:	4288      	cmp	r0, r1
 800bbb4:	d3f4      	bcc.n	800bba0 <L_shift+0xc>
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}

0800bbb8 <__match>:
 800bbb8:	b530      	push	{r4, r5, lr}
 800bbba:	6803      	ldr	r3, [r0, #0]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbc2:	b914      	cbnz	r4, 800bbca <__match+0x12>
 800bbc4:	6003      	str	r3, [r0, #0]
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	bd30      	pop	{r4, r5, pc}
 800bbca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bbd2:	2d19      	cmp	r5, #25
 800bbd4:	bf98      	it	ls
 800bbd6:	3220      	addls	r2, #32
 800bbd8:	42a2      	cmp	r2, r4
 800bbda:	d0f0      	beq.n	800bbbe <__match+0x6>
 800bbdc:	2000      	movs	r0, #0
 800bbde:	e7f3      	b.n	800bbc8 <__match+0x10>

0800bbe0 <__hexnan>:
 800bbe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	680b      	ldr	r3, [r1, #0]
 800bbe6:	6801      	ldr	r1, [r0, #0]
 800bbe8:	115e      	asrs	r6, r3, #5
 800bbea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bbee:	f013 031f 	ands.w	r3, r3, #31
 800bbf2:	b087      	sub	sp, #28
 800bbf4:	bf18      	it	ne
 800bbf6:	3604      	addne	r6, #4
 800bbf8:	2500      	movs	r5, #0
 800bbfa:	1f37      	subs	r7, r6, #4
 800bbfc:	4682      	mov	sl, r0
 800bbfe:	4690      	mov	r8, r2
 800bc00:	9301      	str	r3, [sp, #4]
 800bc02:	f846 5c04 	str.w	r5, [r6, #-4]
 800bc06:	46b9      	mov	r9, r7
 800bc08:	463c      	mov	r4, r7
 800bc0a:	9502      	str	r5, [sp, #8]
 800bc0c:	46ab      	mov	fp, r5
 800bc0e:	784a      	ldrb	r2, [r1, #1]
 800bc10:	1c4b      	adds	r3, r1, #1
 800bc12:	9303      	str	r3, [sp, #12]
 800bc14:	b342      	cbz	r2, 800bc68 <__hexnan+0x88>
 800bc16:	4610      	mov	r0, r2
 800bc18:	9105      	str	r1, [sp, #20]
 800bc1a:	9204      	str	r2, [sp, #16]
 800bc1c:	f7ff fd94 	bl	800b748 <__hexdig_fun>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d151      	bne.n	800bcc8 <__hexnan+0xe8>
 800bc24:	9a04      	ldr	r2, [sp, #16]
 800bc26:	9905      	ldr	r1, [sp, #20]
 800bc28:	2a20      	cmp	r2, #32
 800bc2a:	d818      	bhi.n	800bc5e <__hexnan+0x7e>
 800bc2c:	9b02      	ldr	r3, [sp, #8]
 800bc2e:	459b      	cmp	fp, r3
 800bc30:	dd13      	ble.n	800bc5a <__hexnan+0x7a>
 800bc32:	454c      	cmp	r4, r9
 800bc34:	d206      	bcs.n	800bc44 <__hexnan+0x64>
 800bc36:	2d07      	cmp	r5, #7
 800bc38:	dc04      	bgt.n	800bc44 <__hexnan+0x64>
 800bc3a:	462a      	mov	r2, r5
 800bc3c:	4649      	mov	r1, r9
 800bc3e:	4620      	mov	r0, r4
 800bc40:	f7ff ffa8 	bl	800bb94 <L_shift>
 800bc44:	4544      	cmp	r4, r8
 800bc46:	d952      	bls.n	800bcee <__hexnan+0x10e>
 800bc48:	2300      	movs	r3, #0
 800bc4a:	f1a4 0904 	sub.w	r9, r4, #4
 800bc4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc52:	f8cd b008 	str.w	fp, [sp, #8]
 800bc56:	464c      	mov	r4, r9
 800bc58:	461d      	mov	r5, r3
 800bc5a:	9903      	ldr	r1, [sp, #12]
 800bc5c:	e7d7      	b.n	800bc0e <__hexnan+0x2e>
 800bc5e:	2a29      	cmp	r2, #41	@ 0x29
 800bc60:	d157      	bne.n	800bd12 <__hexnan+0x132>
 800bc62:	3102      	adds	r1, #2
 800bc64:	f8ca 1000 	str.w	r1, [sl]
 800bc68:	f1bb 0f00 	cmp.w	fp, #0
 800bc6c:	d051      	beq.n	800bd12 <__hexnan+0x132>
 800bc6e:	454c      	cmp	r4, r9
 800bc70:	d206      	bcs.n	800bc80 <__hexnan+0xa0>
 800bc72:	2d07      	cmp	r5, #7
 800bc74:	dc04      	bgt.n	800bc80 <__hexnan+0xa0>
 800bc76:	462a      	mov	r2, r5
 800bc78:	4649      	mov	r1, r9
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f7ff ff8a 	bl	800bb94 <L_shift>
 800bc80:	4544      	cmp	r4, r8
 800bc82:	d936      	bls.n	800bcf2 <__hexnan+0x112>
 800bc84:	f1a8 0204 	sub.w	r2, r8, #4
 800bc88:	4623      	mov	r3, r4
 800bc8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc92:	429f      	cmp	r7, r3
 800bc94:	d2f9      	bcs.n	800bc8a <__hexnan+0xaa>
 800bc96:	1b3b      	subs	r3, r7, r4
 800bc98:	f023 0303 	bic.w	r3, r3, #3
 800bc9c:	3304      	adds	r3, #4
 800bc9e:	3401      	adds	r4, #1
 800bca0:	3e03      	subs	r6, #3
 800bca2:	42b4      	cmp	r4, r6
 800bca4:	bf88      	it	hi
 800bca6:	2304      	movhi	r3, #4
 800bca8:	4443      	add	r3, r8
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f843 2b04 	str.w	r2, [r3], #4
 800bcb0:	429f      	cmp	r7, r3
 800bcb2:	d2fb      	bcs.n	800bcac <__hexnan+0xcc>
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	b91b      	cbnz	r3, 800bcc0 <__hexnan+0xe0>
 800bcb8:	4547      	cmp	r7, r8
 800bcba:	d128      	bne.n	800bd0e <__hexnan+0x12e>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	603b      	str	r3, [r7, #0]
 800bcc0:	2005      	movs	r0, #5
 800bcc2:	b007      	add	sp, #28
 800bcc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcc8:	3501      	adds	r5, #1
 800bcca:	2d08      	cmp	r5, #8
 800bccc:	f10b 0b01 	add.w	fp, fp, #1
 800bcd0:	dd06      	ble.n	800bce0 <__hexnan+0x100>
 800bcd2:	4544      	cmp	r4, r8
 800bcd4:	d9c1      	bls.n	800bc5a <__hexnan+0x7a>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	f844 3c04 	str.w	r3, [r4, #-4]
 800bcdc:	2501      	movs	r5, #1
 800bcde:	3c04      	subs	r4, #4
 800bce0:	6822      	ldr	r2, [r4, #0]
 800bce2:	f000 000f 	and.w	r0, r0, #15
 800bce6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bcea:	6020      	str	r0, [r4, #0]
 800bcec:	e7b5      	b.n	800bc5a <__hexnan+0x7a>
 800bcee:	2508      	movs	r5, #8
 800bcf0:	e7b3      	b.n	800bc5a <__hexnan+0x7a>
 800bcf2:	9b01      	ldr	r3, [sp, #4]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d0dd      	beq.n	800bcb4 <__hexnan+0xd4>
 800bcf8:	f1c3 0320 	rsb	r3, r3, #32
 800bcfc:	f04f 32ff 	mov.w	r2, #4294967295
 800bd00:	40da      	lsrs	r2, r3
 800bd02:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bd06:	4013      	ands	r3, r2
 800bd08:	f846 3c04 	str.w	r3, [r6, #-4]
 800bd0c:	e7d2      	b.n	800bcb4 <__hexnan+0xd4>
 800bd0e:	3f04      	subs	r7, #4
 800bd10:	e7d0      	b.n	800bcb4 <__hexnan+0xd4>
 800bd12:	2004      	movs	r0, #4
 800bd14:	e7d5      	b.n	800bcc2 <__hexnan+0xe2>

0800bd16 <__ascii_mbtowc>:
 800bd16:	b082      	sub	sp, #8
 800bd18:	b901      	cbnz	r1, 800bd1c <__ascii_mbtowc+0x6>
 800bd1a:	a901      	add	r1, sp, #4
 800bd1c:	b142      	cbz	r2, 800bd30 <__ascii_mbtowc+0x1a>
 800bd1e:	b14b      	cbz	r3, 800bd34 <__ascii_mbtowc+0x1e>
 800bd20:	7813      	ldrb	r3, [r2, #0]
 800bd22:	600b      	str	r3, [r1, #0]
 800bd24:	7812      	ldrb	r2, [r2, #0]
 800bd26:	1e10      	subs	r0, r2, #0
 800bd28:	bf18      	it	ne
 800bd2a:	2001      	movne	r0, #1
 800bd2c:	b002      	add	sp, #8
 800bd2e:	4770      	bx	lr
 800bd30:	4610      	mov	r0, r2
 800bd32:	e7fb      	b.n	800bd2c <__ascii_mbtowc+0x16>
 800bd34:	f06f 0001 	mvn.w	r0, #1
 800bd38:	e7f8      	b.n	800bd2c <__ascii_mbtowc+0x16>

0800bd3a <_realloc_r>:
 800bd3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3e:	4680      	mov	r8, r0
 800bd40:	4615      	mov	r5, r2
 800bd42:	460c      	mov	r4, r1
 800bd44:	b921      	cbnz	r1, 800bd50 <_realloc_r+0x16>
 800bd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4a:	4611      	mov	r1, r2
 800bd4c:	f7fd be6c 	b.w	8009a28 <_malloc_r>
 800bd50:	b92a      	cbnz	r2, 800bd5e <_realloc_r+0x24>
 800bd52:	f7fd fdf5 	bl	8009940 <_free_r>
 800bd56:	2400      	movs	r4, #0
 800bd58:	4620      	mov	r0, r4
 800bd5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd5e:	f000 f840 	bl	800bde2 <_malloc_usable_size_r>
 800bd62:	4285      	cmp	r5, r0
 800bd64:	4606      	mov	r6, r0
 800bd66:	d802      	bhi.n	800bd6e <_realloc_r+0x34>
 800bd68:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bd6c:	d8f4      	bhi.n	800bd58 <_realloc_r+0x1e>
 800bd6e:	4629      	mov	r1, r5
 800bd70:	4640      	mov	r0, r8
 800bd72:	f7fd fe59 	bl	8009a28 <_malloc_r>
 800bd76:	4607      	mov	r7, r0
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	d0ec      	beq.n	800bd56 <_realloc_r+0x1c>
 800bd7c:	42b5      	cmp	r5, r6
 800bd7e:	462a      	mov	r2, r5
 800bd80:	4621      	mov	r1, r4
 800bd82:	bf28      	it	cs
 800bd84:	4632      	movcs	r2, r6
 800bd86:	f7fc ff7a 	bl	8008c7e <memcpy>
 800bd8a:	4621      	mov	r1, r4
 800bd8c:	4640      	mov	r0, r8
 800bd8e:	f7fd fdd7 	bl	8009940 <_free_r>
 800bd92:	463c      	mov	r4, r7
 800bd94:	e7e0      	b.n	800bd58 <_realloc_r+0x1e>

0800bd96 <__ascii_wctomb>:
 800bd96:	4603      	mov	r3, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	b141      	cbz	r1, 800bdae <__ascii_wctomb+0x18>
 800bd9c:	2aff      	cmp	r2, #255	@ 0xff
 800bd9e:	d904      	bls.n	800bdaa <__ascii_wctomb+0x14>
 800bda0:	228a      	movs	r2, #138	@ 0x8a
 800bda2:	601a      	str	r2, [r3, #0]
 800bda4:	f04f 30ff 	mov.w	r0, #4294967295
 800bda8:	4770      	bx	lr
 800bdaa:	700a      	strb	r2, [r1, #0]
 800bdac:	2001      	movs	r0, #1
 800bdae:	4770      	bx	lr

0800bdb0 <fiprintf>:
 800bdb0:	b40e      	push	{r1, r2, r3}
 800bdb2:	b503      	push	{r0, r1, lr}
 800bdb4:	4601      	mov	r1, r0
 800bdb6:	ab03      	add	r3, sp, #12
 800bdb8:	4805      	ldr	r0, [pc, #20]	@ (800bdd0 <fiprintf+0x20>)
 800bdba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdbe:	6800      	ldr	r0, [r0, #0]
 800bdc0:	9301      	str	r3, [sp, #4]
 800bdc2:	f000 f83f 	bl	800be44 <_vfiprintf_r>
 800bdc6:	b002      	add	sp, #8
 800bdc8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdcc:	b003      	add	sp, #12
 800bdce:	4770      	bx	lr
 800bdd0:	20000014 	.word	0x20000014

0800bdd4 <abort>:
 800bdd4:	b508      	push	{r3, lr}
 800bdd6:	2006      	movs	r0, #6
 800bdd8:	f000 fa08 	bl	800c1ec <raise>
 800bddc:	2001      	movs	r0, #1
 800bdde:	f7f6 fa59 	bl	8002294 <_exit>

0800bde2 <_malloc_usable_size_r>:
 800bde2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bde6:	1f18      	subs	r0, r3, #4
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bfbc      	itt	lt
 800bdec:	580b      	ldrlt	r3, [r1, r0]
 800bdee:	18c0      	addlt	r0, r0, r3
 800bdf0:	4770      	bx	lr

0800bdf2 <__sfputc_r>:
 800bdf2:	6893      	ldr	r3, [r2, #8]
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	b410      	push	{r4}
 800bdfa:	6093      	str	r3, [r2, #8]
 800bdfc:	da08      	bge.n	800be10 <__sfputc_r+0x1e>
 800bdfe:	6994      	ldr	r4, [r2, #24]
 800be00:	42a3      	cmp	r3, r4
 800be02:	db01      	blt.n	800be08 <__sfputc_r+0x16>
 800be04:	290a      	cmp	r1, #10
 800be06:	d103      	bne.n	800be10 <__sfputc_r+0x1e>
 800be08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be0c:	f000 b932 	b.w	800c074 <__swbuf_r>
 800be10:	6813      	ldr	r3, [r2, #0]
 800be12:	1c58      	adds	r0, r3, #1
 800be14:	6010      	str	r0, [r2, #0]
 800be16:	7019      	strb	r1, [r3, #0]
 800be18:	4608      	mov	r0, r1
 800be1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <__sfputs_r>:
 800be20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be22:	4606      	mov	r6, r0
 800be24:	460f      	mov	r7, r1
 800be26:	4614      	mov	r4, r2
 800be28:	18d5      	adds	r5, r2, r3
 800be2a:	42ac      	cmp	r4, r5
 800be2c:	d101      	bne.n	800be32 <__sfputs_r+0x12>
 800be2e:	2000      	movs	r0, #0
 800be30:	e007      	b.n	800be42 <__sfputs_r+0x22>
 800be32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be36:	463a      	mov	r2, r7
 800be38:	4630      	mov	r0, r6
 800be3a:	f7ff ffda 	bl	800bdf2 <__sfputc_r>
 800be3e:	1c43      	adds	r3, r0, #1
 800be40:	d1f3      	bne.n	800be2a <__sfputs_r+0xa>
 800be42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800be44 <_vfiprintf_r>:
 800be44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be48:	460d      	mov	r5, r1
 800be4a:	b09d      	sub	sp, #116	@ 0x74
 800be4c:	4614      	mov	r4, r2
 800be4e:	4698      	mov	r8, r3
 800be50:	4606      	mov	r6, r0
 800be52:	b118      	cbz	r0, 800be5c <_vfiprintf_r+0x18>
 800be54:	6a03      	ldr	r3, [r0, #32]
 800be56:	b90b      	cbnz	r3, 800be5c <_vfiprintf_r+0x18>
 800be58:	f7fc fdf8 	bl	8008a4c <__sinit>
 800be5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be5e:	07d9      	lsls	r1, r3, #31
 800be60:	d405      	bmi.n	800be6e <_vfiprintf_r+0x2a>
 800be62:	89ab      	ldrh	r3, [r5, #12]
 800be64:	059a      	lsls	r2, r3, #22
 800be66:	d402      	bmi.n	800be6e <_vfiprintf_r+0x2a>
 800be68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be6a:	f7fc ff06 	bl	8008c7a <__retarget_lock_acquire_recursive>
 800be6e:	89ab      	ldrh	r3, [r5, #12]
 800be70:	071b      	lsls	r3, r3, #28
 800be72:	d501      	bpl.n	800be78 <_vfiprintf_r+0x34>
 800be74:	692b      	ldr	r3, [r5, #16]
 800be76:	b99b      	cbnz	r3, 800bea0 <_vfiprintf_r+0x5c>
 800be78:	4629      	mov	r1, r5
 800be7a:	4630      	mov	r0, r6
 800be7c:	f000 f938 	bl	800c0f0 <__swsetup_r>
 800be80:	b170      	cbz	r0, 800bea0 <_vfiprintf_r+0x5c>
 800be82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be84:	07dc      	lsls	r4, r3, #31
 800be86:	d504      	bpl.n	800be92 <_vfiprintf_r+0x4e>
 800be88:	f04f 30ff 	mov.w	r0, #4294967295
 800be8c:	b01d      	add	sp, #116	@ 0x74
 800be8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be92:	89ab      	ldrh	r3, [r5, #12]
 800be94:	0598      	lsls	r0, r3, #22
 800be96:	d4f7      	bmi.n	800be88 <_vfiprintf_r+0x44>
 800be98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be9a:	f7fc feef 	bl	8008c7c <__retarget_lock_release_recursive>
 800be9e:	e7f3      	b.n	800be88 <_vfiprintf_r+0x44>
 800bea0:	2300      	movs	r3, #0
 800bea2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bea4:	2320      	movs	r3, #32
 800bea6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800beaa:	f8cd 800c 	str.w	r8, [sp, #12]
 800beae:	2330      	movs	r3, #48	@ 0x30
 800beb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c060 <_vfiprintf_r+0x21c>
 800beb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800beb8:	f04f 0901 	mov.w	r9, #1
 800bebc:	4623      	mov	r3, r4
 800bebe:	469a      	mov	sl, r3
 800bec0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bec4:	b10a      	cbz	r2, 800beca <_vfiprintf_r+0x86>
 800bec6:	2a25      	cmp	r2, #37	@ 0x25
 800bec8:	d1f9      	bne.n	800bebe <_vfiprintf_r+0x7a>
 800beca:	ebba 0b04 	subs.w	fp, sl, r4
 800bece:	d00b      	beq.n	800bee8 <_vfiprintf_r+0xa4>
 800bed0:	465b      	mov	r3, fp
 800bed2:	4622      	mov	r2, r4
 800bed4:	4629      	mov	r1, r5
 800bed6:	4630      	mov	r0, r6
 800bed8:	f7ff ffa2 	bl	800be20 <__sfputs_r>
 800bedc:	3001      	adds	r0, #1
 800bede:	f000 80a7 	beq.w	800c030 <_vfiprintf_r+0x1ec>
 800bee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bee4:	445a      	add	r2, fp
 800bee6:	9209      	str	r2, [sp, #36]	@ 0x24
 800bee8:	f89a 3000 	ldrb.w	r3, [sl]
 800beec:	2b00      	cmp	r3, #0
 800beee:	f000 809f 	beq.w	800c030 <_vfiprintf_r+0x1ec>
 800bef2:	2300      	movs	r3, #0
 800bef4:	f04f 32ff 	mov.w	r2, #4294967295
 800bef8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800befc:	f10a 0a01 	add.w	sl, sl, #1
 800bf00:	9304      	str	r3, [sp, #16]
 800bf02:	9307      	str	r3, [sp, #28]
 800bf04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf08:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf0a:	4654      	mov	r4, sl
 800bf0c:	2205      	movs	r2, #5
 800bf0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf12:	4853      	ldr	r0, [pc, #332]	@ (800c060 <_vfiprintf_r+0x21c>)
 800bf14:	f7f4 f984 	bl	8000220 <memchr>
 800bf18:	9a04      	ldr	r2, [sp, #16]
 800bf1a:	b9d8      	cbnz	r0, 800bf54 <_vfiprintf_r+0x110>
 800bf1c:	06d1      	lsls	r1, r2, #27
 800bf1e:	bf44      	itt	mi
 800bf20:	2320      	movmi	r3, #32
 800bf22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf26:	0713      	lsls	r3, r2, #28
 800bf28:	bf44      	itt	mi
 800bf2a:	232b      	movmi	r3, #43	@ 0x2b
 800bf2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf30:	f89a 3000 	ldrb.w	r3, [sl]
 800bf34:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf36:	d015      	beq.n	800bf64 <_vfiprintf_r+0x120>
 800bf38:	9a07      	ldr	r2, [sp, #28]
 800bf3a:	4654      	mov	r4, sl
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	f04f 0c0a 	mov.w	ip, #10
 800bf42:	4621      	mov	r1, r4
 800bf44:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf48:	3b30      	subs	r3, #48	@ 0x30
 800bf4a:	2b09      	cmp	r3, #9
 800bf4c:	d94b      	bls.n	800bfe6 <_vfiprintf_r+0x1a2>
 800bf4e:	b1b0      	cbz	r0, 800bf7e <_vfiprintf_r+0x13a>
 800bf50:	9207      	str	r2, [sp, #28]
 800bf52:	e014      	b.n	800bf7e <_vfiprintf_r+0x13a>
 800bf54:	eba0 0308 	sub.w	r3, r0, r8
 800bf58:	fa09 f303 	lsl.w	r3, r9, r3
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	9304      	str	r3, [sp, #16]
 800bf60:	46a2      	mov	sl, r4
 800bf62:	e7d2      	b.n	800bf0a <_vfiprintf_r+0xc6>
 800bf64:	9b03      	ldr	r3, [sp, #12]
 800bf66:	1d19      	adds	r1, r3, #4
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	9103      	str	r1, [sp, #12]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	bfbb      	ittet	lt
 800bf70:	425b      	neglt	r3, r3
 800bf72:	f042 0202 	orrlt.w	r2, r2, #2
 800bf76:	9307      	strge	r3, [sp, #28]
 800bf78:	9307      	strlt	r3, [sp, #28]
 800bf7a:	bfb8      	it	lt
 800bf7c:	9204      	strlt	r2, [sp, #16]
 800bf7e:	7823      	ldrb	r3, [r4, #0]
 800bf80:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf82:	d10a      	bne.n	800bf9a <_vfiprintf_r+0x156>
 800bf84:	7863      	ldrb	r3, [r4, #1]
 800bf86:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf88:	d132      	bne.n	800bff0 <_vfiprintf_r+0x1ac>
 800bf8a:	9b03      	ldr	r3, [sp, #12]
 800bf8c:	1d1a      	adds	r2, r3, #4
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	9203      	str	r2, [sp, #12]
 800bf92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf96:	3402      	adds	r4, #2
 800bf98:	9305      	str	r3, [sp, #20]
 800bf9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c070 <_vfiprintf_r+0x22c>
 800bf9e:	7821      	ldrb	r1, [r4, #0]
 800bfa0:	2203      	movs	r2, #3
 800bfa2:	4650      	mov	r0, sl
 800bfa4:	f7f4 f93c 	bl	8000220 <memchr>
 800bfa8:	b138      	cbz	r0, 800bfba <_vfiprintf_r+0x176>
 800bfaa:	9b04      	ldr	r3, [sp, #16]
 800bfac:	eba0 000a 	sub.w	r0, r0, sl
 800bfb0:	2240      	movs	r2, #64	@ 0x40
 800bfb2:	4082      	lsls	r2, r0
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	3401      	adds	r4, #1
 800bfb8:	9304      	str	r3, [sp, #16]
 800bfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfbe:	4829      	ldr	r0, [pc, #164]	@ (800c064 <_vfiprintf_r+0x220>)
 800bfc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfc4:	2206      	movs	r2, #6
 800bfc6:	f7f4 f92b 	bl	8000220 <memchr>
 800bfca:	2800      	cmp	r0, #0
 800bfcc:	d03f      	beq.n	800c04e <_vfiprintf_r+0x20a>
 800bfce:	4b26      	ldr	r3, [pc, #152]	@ (800c068 <_vfiprintf_r+0x224>)
 800bfd0:	bb1b      	cbnz	r3, 800c01a <_vfiprintf_r+0x1d6>
 800bfd2:	9b03      	ldr	r3, [sp, #12]
 800bfd4:	3307      	adds	r3, #7
 800bfd6:	f023 0307 	bic.w	r3, r3, #7
 800bfda:	3308      	adds	r3, #8
 800bfdc:	9303      	str	r3, [sp, #12]
 800bfde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfe0:	443b      	add	r3, r7
 800bfe2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfe4:	e76a      	b.n	800bebc <_vfiprintf_r+0x78>
 800bfe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfea:	460c      	mov	r4, r1
 800bfec:	2001      	movs	r0, #1
 800bfee:	e7a8      	b.n	800bf42 <_vfiprintf_r+0xfe>
 800bff0:	2300      	movs	r3, #0
 800bff2:	3401      	adds	r4, #1
 800bff4:	9305      	str	r3, [sp, #20]
 800bff6:	4619      	mov	r1, r3
 800bff8:	f04f 0c0a 	mov.w	ip, #10
 800bffc:	4620      	mov	r0, r4
 800bffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c002:	3a30      	subs	r2, #48	@ 0x30
 800c004:	2a09      	cmp	r2, #9
 800c006:	d903      	bls.n	800c010 <_vfiprintf_r+0x1cc>
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d0c6      	beq.n	800bf9a <_vfiprintf_r+0x156>
 800c00c:	9105      	str	r1, [sp, #20]
 800c00e:	e7c4      	b.n	800bf9a <_vfiprintf_r+0x156>
 800c010:	fb0c 2101 	mla	r1, ip, r1, r2
 800c014:	4604      	mov	r4, r0
 800c016:	2301      	movs	r3, #1
 800c018:	e7f0      	b.n	800bffc <_vfiprintf_r+0x1b8>
 800c01a:	ab03      	add	r3, sp, #12
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	462a      	mov	r2, r5
 800c020:	4b12      	ldr	r3, [pc, #72]	@ (800c06c <_vfiprintf_r+0x228>)
 800c022:	a904      	add	r1, sp, #16
 800c024:	4630      	mov	r0, r6
 800c026:	f7fb feb9 	bl	8007d9c <_printf_float>
 800c02a:	4607      	mov	r7, r0
 800c02c:	1c78      	adds	r0, r7, #1
 800c02e:	d1d6      	bne.n	800bfde <_vfiprintf_r+0x19a>
 800c030:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c032:	07d9      	lsls	r1, r3, #31
 800c034:	d405      	bmi.n	800c042 <_vfiprintf_r+0x1fe>
 800c036:	89ab      	ldrh	r3, [r5, #12]
 800c038:	059a      	lsls	r2, r3, #22
 800c03a:	d402      	bmi.n	800c042 <_vfiprintf_r+0x1fe>
 800c03c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c03e:	f7fc fe1d 	bl	8008c7c <__retarget_lock_release_recursive>
 800c042:	89ab      	ldrh	r3, [r5, #12]
 800c044:	065b      	lsls	r3, r3, #25
 800c046:	f53f af1f 	bmi.w	800be88 <_vfiprintf_r+0x44>
 800c04a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c04c:	e71e      	b.n	800be8c <_vfiprintf_r+0x48>
 800c04e:	ab03      	add	r3, sp, #12
 800c050:	9300      	str	r3, [sp, #0]
 800c052:	462a      	mov	r2, r5
 800c054:	4b05      	ldr	r3, [pc, #20]	@ (800c06c <_vfiprintf_r+0x228>)
 800c056:	a904      	add	r1, sp, #16
 800c058:	4630      	mov	r0, r6
 800c05a:	f7fc f937 	bl	80082cc <_printf_i>
 800c05e:	e7e4      	b.n	800c02a <_vfiprintf_r+0x1e6>
 800c060:	0800c701 	.word	0x0800c701
 800c064:	0800c70b 	.word	0x0800c70b
 800c068:	08007d9d 	.word	0x08007d9d
 800c06c:	0800be21 	.word	0x0800be21
 800c070:	0800c707 	.word	0x0800c707

0800c074 <__swbuf_r>:
 800c074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c076:	460e      	mov	r6, r1
 800c078:	4614      	mov	r4, r2
 800c07a:	4605      	mov	r5, r0
 800c07c:	b118      	cbz	r0, 800c086 <__swbuf_r+0x12>
 800c07e:	6a03      	ldr	r3, [r0, #32]
 800c080:	b90b      	cbnz	r3, 800c086 <__swbuf_r+0x12>
 800c082:	f7fc fce3 	bl	8008a4c <__sinit>
 800c086:	69a3      	ldr	r3, [r4, #24]
 800c088:	60a3      	str	r3, [r4, #8]
 800c08a:	89a3      	ldrh	r3, [r4, #12]
 800c08c:	071a      	lsls	r2, r3, #28
 800c08e:	d501      	bpl.n	800c094 <__swbuf_r+0x20>
 800c090:	6923      	ldr	r3, [r4, #16]
 800c092:	b943      	cbnz	r3, 800c0a6 <__swbuf_r+0x32>
 800c094:	4621      	mov	r1, r4
 800c096:	4628      	mov	r0, r5
 800c098:	f000 f82a 	bl	800c0f0 <__swsetup_r>
 800c09c:	b118      	cbz	r0, 800c0a6 <__swbuf_r+0x32>
 800c09e:	f04f 37ff 	mov.w	r7, #4294967295
 800c0a2:	4638      	mov	r0, r7
 800c0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	6922      	ldr	r2, [r4, #16]
 800c0aa:	1a98      	subs	r0, r3, r2
 800c0ac:	6963      	ldr	r3, [r4, #20]
 800c0ae:	b2f6      	uxtb	r6, r6
 800c0b0:	4283      	cmp	r3, r0
 800c0b2:	4637      	mov	r7, r6
 800c0b4:	dc05      	bgt.n	800c0c2 <__swbuf_r+0x4e>
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	f7ff fa53 	bl	800b564 <_fflush_r>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	d1ed      	bne.n	800c09e <__swbuf_r+0x2a>
 800c0c2:	68a3      	ldr	r3, [r4, #8]
 800c0c4:	3b01      	subs	r3, #1
 800c0c6:	60a3      	str	r3, [r4, #8]
 800c0c8:	6823      	ldr	r3, [r4, #0]
 800c0ca:	1c5a      	adds	r2, r3, #1
 800c0cc:	6022      	str	r2, [r4, #0]
 800c0ce:	701e      	strb	r6, [r3, #0]
 800c0d0:	6962      	ldr	r2, [r4, #20]
 800c0d2:	1c43      	adds	r3, r0, #1
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d004      	beq.n	800c0e2 <__swbuf_r+0x6e>
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	07db      	lsls	r3, r3, #31
 800c0dc:	d5e1      	bpl.n	800c0a2 <__swbuf_r+0x2e>
 800c0de:	2e0a      	cmp	r6, #10
 800c0e0:	d1df      	bne.n	800c0a2 <__swbuf_r+0x2e>
 800c0e2:	4621      	mov	r1, r4
 800c0e4:	4628      	mov	r0, r5
 800c0e6:	f7ff fa3d 	bl	800b564 <_fflush_r>
 800c0ea:	2800      	cmp	r0, #0
 800c0ec:	d0d9      	beq.n	800c0a2 <__swbuf_r+0x2e>
 800c0ee:	e7d6      	b.n	800c09e <__swbuf_r+0x2a>

0800c0f0 <__swsetup_r>:
 800c0f0:	b538      	push	{r3, r4, r5, lr}
 800c0f2:	4b29      	ldr	r3, [pc, #164]	@ (800c198 <__swsetup_r+0xa8>)
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	6818      	ldr	r0, [r3, #0]
 800c0f8:	460c      	mov	r4, r1
 800c0fa:	b118      	cbz	r0, 800c104 <__swsetup_r+0x14>
 800c0fc:	6a03      	ldr	r3, [r0, #32]
 800c0fe:	b90b      	cbnz	r3, 800c104 <__swsetup_r+0x14>
 800c100:	f7fc fca4 	bl	8008a4c <__sinit>
 800c104:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c108:	0719      	lsls	r1, r3, #28
 800c10a:	d422      	bmi.n	800c152 <__swsetup_r+0x62>
 800c10c:	06da      	lsls	r2, r3, #27
 800c10e:	d407      	bmi.n	800c120 <__swsetup_r+0x30>
 800c110:	2209      	movs	r2, #9
 800c112:	602a      	str	r2, [r5, #0]
 800c114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c118:	81a3      	strh	r3, [r4, #12]
 800c11a:	f04f 30ff 	mov.w	r0, #4294967295
 800c11e:	e033      	b.n	800c188 <__swsetup_r+0x98>
 800c120:	0758      	lsls	r0, r3, #29
 800c122:	d512      	bpl.n	800c14a <__swsetup_r+0x5a>
 800c124:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c126:	b141      	cbz	r1, 800c13a <__swsetup_r+0x4a>
 800c128:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c12c:	4299      	cmp	r1, r3
 800c12e:	d002      	beq.n	800c136 <__swsetup_r+0x46>
 800c130:	4628      	mov	r0, r5
 800c132:	f7fd fc05 	bl	8009940 <_free_r>
 800c136:	2300      	movs	r3, #0
 800c138:	6363      	str	r3, [r4, #52]	@ 0x34
 800c13a:	89a3      	ldrh	r3, [r4, #12]
 800c13c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c140:	81a3      	strh	r3, [r4, #12]
 800c142:	2300      	movs	r3, #0
 800c144:	6063      	str	r3, [r4, #4]
 800c146:	6923      	ldr	r3, [r4, #16]
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	89a3      	ldrh	r3, [r4, #12]
 800c14c:	f043 0308 	orr.w	r3, r3, #8
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	6923      	ldr	r3, [r4, #16]
 800c154:	b94b      	cbnz	r3, 800c16a <__swsetup_r+0x7a>
 800c156:	89a3      	ldrh	r3, [r4, #12]
 800c158:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c15c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c160:	d003      	beq.n	800c16a <__swsetup_r+0x7a>
 800c162:	4621      	mov	r1, r4
 800c164:	4628      	mov	r0, r5
 800c166:	f000 f883 	bl	800c270 <__smakebuf_r>
 800c16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c16e:	f013 0201 	ands.w	r2, r3, #1
 800c172:	d00a      	beq.n	800c18a <__swsetup_r+0x9a>
 800c174:	2200      	movs	r2, #0
 800c176:	60a2      	str	r2, [r4, #8]
 800c178:	6962      	ldr	r2, [r4, #20]
 800c17a:	4252      	negs	r2, r2
 800c17c:	61a2      	str	r2, [r4, #24]
 800c17e:	6922      	ldr	r2, [r4, #16]
 800c180:	b942      	cbnz	r2, 800c194 <__swsetup_r+0xa4>
 800c182:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c186:	d1c5      	bne.n	800c114 <__swsetup_r+0x24>
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	0799      	lsls	r1, r3, #30
 800c18c:	bf58      	it	pl
 800c18e:	6962      	ldrpl	r2, [r4, #20]
 800c190:	60a2      	str	r2, [r4, #8]
 800c192:	e7f4      	b.n	800c17e <__swsetup_r+0x8e>
 800c194:	2000      	movs	r0, #0
 800c196:	e7f7      	b.n	800c188 <__swsetup_r+0x98>
 800c198:	20000014 	.word	0x20000014

0800c19c <_raise_r>:
 800c19c:	291f      	cmp	r1, #31
 800c19e:	b538      	push	{r3, r4, r5, lr}
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	460c      	mov	r4, r1
 800c1a4:	d904      	bls.n	800c1b0 <_raise_r+0x14>
 800c1a6:	2316      	movs	r3, #22
 800c1a8:	6003      	str	r3, [r0, #0]
 800c1aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c1ae:	bd38      	pop	{r3, r4, r5, pc}
 800c1b0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c1b2:	b112      	cbz	r2, 800c1ba <_raise_r+0x1e>
 800c1b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c1b8:	b94b      	cbnz	r3, 800c1ce <_raise_r+0x32>
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 f830 	bl	800c220 <_getpid_r>
 800c1c0:	4622      	mov	r2, r4
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1ca:	f000 b817 	b.w	800c1fc <_kill_r>
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d00a      	beq.n	800c1e8 <_raise_r+0x4c>
 800c1d2:	1c59      	adds	r1, r3, #1
 800c1d4:	d103      	bne.n	800c1de <_raise_r+0x42>
 800c1d6:	2316      	movs	r3, #22
 800c1d8:	6003      	str	r3, [r0, #0]
 800c1da:	2001      	movs	r0, #1
 800c1dc:	e7e7      	b.n	800c1ae <_raise_r+0x12>
 800c1de:	2100      	movs	r1, #0
 800c1e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	4798      	blx	r3
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e7e0      	b.n	800c1ae <_raise_r+0x12>

0800c1ec <raise>:
 800c1ec:	4b02      	ldr	r3, [pc, #8]	@ (800c1f8 <raise+0xc>)
 800c1ee:	4601      	mov	r1, r0
 800c1f0:	6818      	ldr	r0, [r3, #0]
 800c1f2:	f7ff bfd3 	b.w	800c19c <_raise_r>
 800c1f6:	bf00      	nop
 800c1f8:	20000014 	.word	0x20000014

0800c1fc <_kill_r>:
 800c1fc:	b538      	push	{r3, r4, r5, lr}
 800c1fe:	4d07      	ldr	r5, [pc, #28]	@ (800c21c <_kill_r+0x20>)
 800c200:	2300      	movs	r3, #0
 800c202:	4604      	mov	r4, r0
 800c204:	4608      	mov	r0, r1
 800c206:	4611      	mov	r1, r2
 800c208:	602b      	str	r3, [r5, #0]
 800c20a:	f7f6 f833 	bl	8002274 <_kill>
 800c20e:	1c43      	adds	r3, r0, #1
 800c210:	d102      	bne.n	800c218 <_kill_r+0x1c>
 800c212:	682b      	ldr	r3, [r5, #0]
 800c214:	b103      	cbz	r3, 800c218 <_kill_r+0x1c>
 800c216:	6023      	str	r3, [r4, #0]
 800c218:	bd38      	pop	{r3, r4, r5, pc}
 800c21a:	bf00      	nop
 800c21c:	2000086c 	.word	0x2000086c

0800c220 <_getpid_r>:
 800c220:	f7f6 b820 	b.w	8002264 <_getpid>

0800c224 <__swhatbuf_r>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	460c      	mov	r4, r1
 800c228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22c:	2900      	cmp	r1, #0
 800c22e:	b096      	sub	sp, #88	@ 0x58
 800c230:	4615      	mov	r5, r2
 800c232:	461e      	mov	r6, r3
 800c234:	da0d      	bge.n	800c252 <__swhatbuf_r+0x2e>
 800c236:	89a3      	ldrh	r3, [r4, #12]
 800c238:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c23c:	f04f 0100 	mov.w	r1, #0
 800c240:	bf14      	ite	ne
 800c242:	2340      	movne	r3, #64	@ 0x40
 800c244:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c248:	2000      	movs	r0, #0
 800c24a:	6031      	str	r1, [r6, #0]
 800c24c:	602b      	str	r3, [r5, #0]
 800c24e:	b016      	add	sp, #88	@ 0x58
 800c250:	bd70      	pop	{r4, r5, r6, pc}
 800c252:	466a      	mov	r2, sp
 800c254:	f000 f848 	bl	800c2e8 <_fstat_r>
 800c258:	2800      	cmp	r0, #0
 800c25a:	dbec      	blt.n	800c236 <__swhatbuf_r+0x12>
 800c25c:	9901      	ldr	r1, [sp, #4]
 800c25e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c262:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c266:	4259      	negs	r1, r3
 800c268:	4159      	adcs	r1, r3
 800c26a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c26e:	e7eb      	b.n	800c248 <__swhatbuf_r+0x24>

0800c270 <__smakebuf_r>:
 800c270:	898b      	ldrh	r3, [r1, #12]
 800c272:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c274:	079d      	lsls	r5, r3, #30
 800c276:	4606      	mov	r6, r0
 800c278:	460c      	mov	r4, r1
 800c27a:	d507      	bpl.n	800c28c <__smakebuf_r+0x1c>
 800c27c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	6123      	str	r3, [r4, #16]
 800c284:	2301      	movs	r3, #1
 800c286:	6163      	str	r3, [r4, #20]
 800c288:	b003      	add	sp, #12
 800c28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c28c:	ab01      	add	r3, sp, #4
 800c28e:	466a      	mov	r2, sp
 800c290:	f7ff ffc8 	bl	800c224 <__swhatbuf_r>
 800c294:	9f00      	ldr	r7, [sp, #0]
 800c296:	4605      	mov	r5, r0
 800c298:	4639      	mov	r1, r7
 800c29a:	4630      	mov	r0, r6
 800c29c:	f7fd fbc4 	bl	8009a28 <_malloc_r>
 800c2a0:	b948      	cbnz	r0, 800c2b6 <__smakebuf_r+0x46>
 800c2a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c2a6:	059a      	lsls	r2, r3, #22
 800c2a8:	d4ee      	bmi.n	800c288 <__smakebuf_r+0x18>
 800c2aa:	f023 0303 	bic.w	r3, r3, #3
 800c2ae:	f043 0302 	orr.w	r3, r3, #2
 800c2b2:	81a3      	strh	r3, [r4, #12]
 800c2b4:	e7e2      	b.n	800c27c <__smakebuf_r+0xc>
 800c2b6:	89a3      	ldrh	r3, [r4, #12]
 800c2b8:	6020      	str	r0, [r4, #0]
 800c2ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2be:	81a3      	strh	r3, [r4, #12]
 800c2c0:	9b01      	ldr	r3, [sp, #4]
 800c2c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c2c6:	b15b      	cbz	r3, 800c2e0 <__smakebuf_r+0x70>
 800c2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f000 f81d 	bl	800c30c <_isatty_r>
 800c2d2:	b128      	cbz	r0, 800c2e0 <__smakebuf_r+0x70>
 800c2d4:	89a3      	ldrh	r3, [r4, #12]
 800c2d6:	f023 0303 	bic.w	r3, r3, #3
 800c2da:	f043 0301 	orr.w	r3, r3, #1
 800c2de:	81a3      	strh	r3, [r4, #12]
 800c2e0:	89a3      	ldrh	r3, [r4, #12]
 800c2e2:	431d      	orrs	r5, r3
 800c2e4:	81a5      	strh	r5, [r4, #12]
 800c2e6:	e7cf      	b.n	800c288 <__smakebuf_r+0x18>

0800c2e8 <_fstat_r>:
 800c2e8:	b538      	push	{r3, r4, r5, lr}
 800c2ea:	4d07      	ldr	r5, [pc, #28]	@ (800c308 <_fstat_r+0x20>)
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	4608      	mov	r0, r1
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	602b      	str	r3, [r5, #0]
 800c2f6:	f7f6 f81d 	bl	8002334 <_fstat>
 800c2fa:	1c43      	adds	r3, r0, #1
 800c2fc:	d102      	bne.n	800c304 <_fstat_r+0x1c>
 800c2fe:	682b      	ldr	r3, [r5, #0]
 800c300:	b103      	cbz	r3, 800c304 <_fstat_r+0x1c>
 800c302:	6023      	str	r3, [r4, #0]
 800c304:	bd38      	pop	{r3, r4, r5, pc}
 800c306:	bf00      	nop
 800c308:	2000086c 	.word	0x2000086c

0800c30c <_isatty_r>:
 800c30c:	b538      	push	{r3, r4, r5, lr}
 800c30e:	4d06      	ldr	r5, [pc, #24]	@ (800c328 <_isatty_r+0x1c>)
 800c310:	2300      	movs	r3, #0
 800c312:	4604      	mov	r4, r0
 800c314:	4608      	mov	r0, r1
 800c316:	602b      	str	r3, [r5, #0]
 800c318:	f7f6 f81c 	bl	8002354 <_isatty>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d102      	bne.n	800c326 <_isatty_r+0x1a>
 800c320:	682b      	ldr	r3, [r5, #0]
 800c322:	b103      	cbz	r3, 800c326 <_isatty_r+0x1a>
 800c324:	6023      	str	r3, [r4, #0]
 800c326:	bd38      	pop	{r3, r4, r5, pc}
 800c328:	2000086c 	.word	0x2000086c

0800c32c <_init>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	bf00      	nop
 800c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c332:	bc08      	pop	{r3}
 800c334:	469e      	mov	lr, r3
 800c336:	4770      	bx	lr

0800c338 <_fini>:
 800c338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c33a:	bf00      	nop
 800c33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c33e:	bc08      	pop	{r3}
 800c340:	469e      	mov	lr, r3
 800c342:	4770      	bx	lr
