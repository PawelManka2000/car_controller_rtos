
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  0800add0  0800add0  0001add0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1a4  0800b1a4  000201d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1a4  0800b1a4  0001b1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1ac  0800b1ac  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1ac  0800b1ac  0001b1ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1b0  0800b1b0  0001b1b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800b1b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  200001d0  0800b384  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007b4  0800b384  000207b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c458  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003fd8  00000000  00000000  0003c69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001598  00000000  00000000  00040678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000109e  00000000  00000000  00041c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000291db  00000000  00000000  00042cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cdde  00000000  00000000  0006be89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105d39  00000000  00000000  00088c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006988  00000000  00000000  0018e9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00195328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d0 	.word	0x200001d0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800adb4 	.word	0x0800adb4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d4 	.word	0x200001d4
 800021c:	0800adb4 	.word	0x0800adb4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b970 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b094      	sub	sp, #80	; 0x50
 8000fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fba:	f107 0318 	add.w	r3, r7, #24
 8000fbe:	2238      	movs	r2, #56	; 0x38
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f007 fdfd 	bl	8008bc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f001 ff44 	bl	8002e64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fe0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fe4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe6:	2340      	movs	r3, #64	; 0x40
 8000fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fea:	2302      	movs	r3, #2
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000ff6:	2355      	movs	r3, #85	; 0x55
 8000ff8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ffe:	2302      	movs	r3, #2
 8001000:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001002:	2302      	movs	r3, #2
 8001004:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001006:	f107 0318 	add.w	r3, r7, #24
 800100a:	4618      	mov	r0, r3
 800100c:	f001 ffde 	bl	8002fcc <HAL_RCC_OscConfig>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001016:	f000 fff3 	bl	8002000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800101a:	230f      	movs	r3, #15
 800101c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800101e:	2303      	movs	r3, #3
 8001020:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001022:	2300      	movs	r3, #0
 8001024:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800102e:	1d3b      	adds	r3, r7, #4
 8001030:	2104      	movs	r1, #4
 8001032:	4618      	mov	r0, r3
 8001034:	f002 fadc 	bl	80035f0 <HAL_RCC_ClockConfig>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800103e:	f000 ffdf 	bl	8002000 <Error_Handler>
  }
}
 8001042:	bf00      	nop
 8001044:	3750      	adds	r7, #80	; 0x50
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <MX_GPIO_Init+0xd4>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a2e      	ldr	r2, [pc, #184]	; (8001120 <MX_GPIO_Init+0xd4>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <MX_GPIO_Init+0xd4>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800107a:	4b29      	ldr	r3, [pc, #164]	; (8001120 <MX_GPIO_Init+0xd4>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	4a28      	ldr	r2, [pc, #160]	; (8001120 <MX_GPIO_Init+0xd4>)
 8001080:	f043 0320 	orr.w	r3, r3, #32
 8001084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001086:	4b26      	ldr	r3, [pc, #152]	; (8001120 <MX_GPIO_Init+0xd4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	f003 0320 	and.w	r3, r3, #32
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	4b23      	ldr	r3, [pc, #140]	; (8001120 <MX_GPIO_Init+0xd4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a22      	ldr	r2, [pc, #136]	; (8001120 <MX_GPIO_Init+0xd4>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b20      	ldr	r3, [pc, #128]	; (8001120 <MX_GPIO_Init+0xd4>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <MX_GPIO_Init+0xd4>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a1c      	ldr	r2, [pc, #112]	; (8001120 <MX_GPIO_Init+0xd4>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <MX_GPIO_Init+0xd4>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2123      	movs	r1, #35	; 0x23
 80010c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ca:	f001 feb3 	bl	8002e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	480f      	ldr	r0, [pc, #60]	; (8001124 <MX_GPIO_Init+0xd8>)
 80010e6:	f001 fd23 	bl	8002b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 80010ea:	2323      	movs	r3, #35	; 0x23
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001104:	f001 fd14 	bl	8002b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001108:	2200      	movs	r2, #0
 800110a:	2100      	movs	r1, #0
 800110c:	2028      	movs	r0, #40	; 0x28
 800110e:	f001 fc27 	bl	8002960 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001112:	2028      	movs	r0, #40	; 0x28
 8001114:	f001 fc3e 	bl	8002994 <HAL_NVIC_EnableIRQ>

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	; 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40021000 	.word	0x40021000
 8001124:	48000800 	.word	0x48000800

08001128 <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09c      	sub	sp, #112	; 0x70
 800112c:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001148:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	615a      	str	r2, [r3, #20]
 800115a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2234      	movs	r2, #52	; 0x34
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f007 fd2d 	bl	8008bc2 <memset>

  htim1.Instance = TIM1;
 8001168:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 800116a:	4a58      	ldr	r2, [pc, #352]	; (80012cc <MX_TIM1_Init+0x1a4>)
 800116c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 800116e:	4b56      	ldr	r3, [pc, #344]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 8001170:	4a57      	ldr	r2, [pc, #348]	; (80012d0 <MX_TIM1_Init+0x1a8>)
 8001172:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001174:	4b54      	ldr	r3, [pc, #336]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800117a:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 800117c:	2263      	movs	r2, #99	; 0x63
 800117e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001180:	4b51      	ldr	r3, [pc, #324]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001186:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800118c:	4b4e      	ldr	r3, [pc, #312]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001192:	484d      	ldr	r0, [pc, #308]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 8001194:	f002 fec8 	bl	8003f28 <HAL_TIM_Base_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800119e:	f000 ff2f 	bl	8002000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011a6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ac:	4619      	mov	r1, r3
 80011ae:	4846      	ldr	r0, [pc, #280]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 80011b0:	f003 fd06 	bl	8004bc0 <HAL_TIM_ConfigClockSource>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80011ba:	f000 ff21 	bl	8002000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011be:	4842      	ldr	r0, [pc, #264]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 80011c0:	f002 fff2 	bl	80041a8 <HAL_TIM_PWM_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011ca:	f000 ff19 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011de:	4619      	mov	r1, r3
 80011e0:	4839      	ldr	r0, [pc, #228]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 80011e2:	f004 facb 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80011ec:	f000 ff08 	bl	8002000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011f0:	2360      	movs	r3, #96	; 0x60
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011f8:	2300      	movs	r3, #0
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011fc:	2300      	movs	r3, #0
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001208:	2300      	movs	r3, #0
 800120a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800120c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001210:	2200      	movs	r2, #0
 8001212:	4619      	mov	r1, r3
 8001214:	482c      	ldr	r0, [pc, #176]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 8001216:	f003 fbbf 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001220:	f000 feee 	bl	8002000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001224:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001228:	2204      	movs	r2, #4
 800122a:	4619      	mov	r1, r3
 800122c:	4826      	ldr	r0, [pc, #152]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 800122e:	f003 fbb3 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001238:	f000 fee2 	bl	8002000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800123c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001240:	2208      	movs	r2, #8
 8001242:	4619      	mov	r1, r3
 8001244:	4820      	ldr	r0, [pc, #128]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 8001246:	f003 fba7 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001250:	f000 fed6 	bl	8002000 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001254:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001258:	220c      	movs	r2, #12
 800125a:	4619      	mov	r1, r3
 800125c:	481a      	ldr	r0, [pc, #104]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 800125e:	f003 fb9b 	bl	8004998 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001268:	f000 feca 	bl	8002000 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800126c:	2300      	movs	r3, #0
 800126e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001280:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001284:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001292:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012a4:	1d3b      	adds	r3, r7, #4
 80012a6:	4619      	mov	r1, r3
 80012a8:	4807      	ldr	r0, [pc, #28]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 80012aa:	f004 fafd 	bl	80058a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80012b4:	f000 fea4 	bl	8002000 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 80012b8:	4803      	ldr	r0, [pc, #12]	; (80012c8 <MX_TIM1_Init+0x1a0>)
 80012ba:	f001 f89b 	bl	80023f4 <HAL_TIM_MspPostInit>

}
 80012be:	bf00      	nop
 80012c0:	3770      	adds	r7, #112	; 0x70
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200001ec 	.word	0x200001ec
 80012cc:	40012c00 	.word	0x40012c00
 80012d0:	0002980f 	.word	0x0002980f

080012d4 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012da:	f107 030c 	add.w	r3, r7, #12
 80012de:	2224      	movs	r2, #36	; 0x24
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f007 fc6d 	bl	8008bc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f2:	4b21      	ldr	r3, [pc, #132]	; (8001378 <MX_TIM3_Init+0xa4>)
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <MX_TIM3_Init+0xa8>)
 80012f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f8:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <MX_TIM3_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fe:	4b1e      	ldr	r3, [pc, #120]	; (8001378 <MX_TIM3_Init+0xa4>)
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001304:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <MX_TIM3_Init+0xa4>)
 8001306:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800130a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_TIM3_Init+0xa4>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001312:	4b19      	ldr	r3, [pc, #100]	; (8001378 <MX_TIM3_Init+0xa4>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001318:	2303      	movs	r3, #3
 800131a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001320:	2301      	movs	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001330:	2301      	movs	r3, #1
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	4619      	mov	r1, r3
 8001342:	480d      	ldr	r0, [pc, #52]	; (8001378 <MX_TIM3_Init+0xa4>)
 8001344:	f003 f8a4 	bl	8004490 <HAL_TIM_Encoder_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800134e:	f000 fe57 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001356:	2300      	movs	r3, #0
 8001358:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800135a:	463b      	mov	r3, r7
 800135c:	4619      	mov	r1, r3
 800135e:	4806      	ldr	r0, [pc, #24]	; (8001378 <MX_TIM3_Init+0xa4>)
 8001360:	f004 fa0c 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800136a:	f000 fe49 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800136e:	bf00      	nop
 8001370:	3730      	adds	r7, #48	; 0x30
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000238 	.word	0x20000238
 800137c:	40000400 	.word	0x40000400

08001380 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08c      	sub	sp, #48	; 0x30
 8001384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	2224      	movs	r2, #36	; 0x24
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f007 fc17 	bl	8008bc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001394:	463b      	mov	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800139e:	4b21      	ldr	r3, [pc, #132]	; (8001424 <MX_TIM4_Init+0xa4>)
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <MX_TIM4_Init+0xa8>)
 80013a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_TIM4_Init+0xa4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <MX_TIM4_Init+0xa4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_TIM4_Init+0xa4>)
 80013b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <MX_TIM4_Init+0xa4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <MX_TIM4_Init+0xa4>)
 80013c0:	2280      	movs	r2, #128	; 0x80
 80013c2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c4:	2303      	movs	r3, #3
 80013c6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c8:	2300      	movs	r3, #0
 80013ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013cc:	2301      	movs	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013d4:	230a      	movs	r3, #10
 80013d6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013dc:	2301      	movs	r3, #1
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013e4:	2300      	movs	r3, #0
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4619      	mov	r1, r3
 80013ee:	480d      	ldr	r0, [pc, #52]	; (8001424 <MX_TIM4_Init+0xa4>)
 80013f0:	f003 f84e 	bl	8004490 <HAL_TIM_Encoder_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013fa:	f000 fe01 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001406:	463b      	mov	r3, r7
 8001408:	4619      	mov	r1, r3
 800140a:	4806      	ldr	r0, [pc, #24]	; (8001424 <MX_TIM4_Init+0xa4>)
 800140c:	f004 f9b6 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001416:	f000 fdf3 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800141a:	bf00      	nop
 800141c:	3730      	adds	r7, #48	; 0x30
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	20000284 	.word	0x20000284
 8001428:	40000800 	.word	0x40000800

0800142c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	; 0x30
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f007 fbc1 	bl	8008bc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800144a:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <MX_TIM5_Init+0xa4>)
 800144c:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <MX_TIM5_Init+0xa8>)
 800144e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001450:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <MX_TIM5_Init+0xa4>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001456:	4b1e      	ldr	r3, [pc, #120]	; (80014d0 <MX_TIM5_Init+0xa4>)
 8001458:	2200      	movs	r2, #0
 800145a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 800145c:	4b1c      	ldr	r3, [pc, #112]	; (80014d0 <MX_TIM5_Init+0xa4>)
 800145e:	f04f 32ff 	mov.w	r2, #4294967295
 8001462:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_TIM5_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <MX_TIM5_Init+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001470:	2303      	movs	r3, #3
 8001472:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001478:	2301      	movs	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001488:	2301      	movs	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_TIM5_Init+0xa4>)
 800149c:	f002 fff8 	bl	8004490 <HAL_TIM_Encoder_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 80014a6:	f000 fdab 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <MX_TIM5_Init+0xa4>)
 80014b8:	f004 f960 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80014c2:	f000 fd9d 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3730      	adds	r7, #48	; 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002d0 	.word	0x200002d0
 80014d4:	40000c00 	.word	0x40000c00

080014d8 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <MX_TIM7_Init+0x64>)
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <MX_TIM7_Init+0x68>)
 80014ec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 80014ee:	4b13      	ldr	r3, [pc, #76]	; (800153c <MX_TIM7_Init+0x64>)
 80014f0:	22a9      	movs	r2, #169	; 0xa9
 80014f2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_TIM7_Init+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <MX_TIM7_Init+0x64>)
 80014fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001500:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_TIM7_Init+0x64>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <MX_TIM7_Init+0x64>)
 800150a:	f002 fd0d 	bl	8003f28 <HAL_TIM_Base_Init>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001514:	f000 fd74 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001518:	2300      	movs	r3, #0
 800151a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4805      	ldr	r0, [pc, #20]	; (800153c <MX_TIM7_Init+0x64>)
 8001526:	f004 f929 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001530:	f000 fd66 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	2000031c 	.word	0x2000031c
 8001540:	40001400 	.word	0x40001400

08001544 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800154a:	f107 030c 	add.w	r3, r7, #12
 800154e:	2224      	movs	r2, #36	; 0x24
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f007 fb35 	bl	8008bc2 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001562:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <MX_TIM8_Init+0xac>)
 8001564:	4a23      	ldr	r2, [pc, #140]	; (80015f4 <MX_TIM8_Init+0xb0>)
 8001566:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001568:	4b21      	ldr	r3, [pc, #132]	; (80015f0 <MX_TIM8_Init+0xac>)
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <MX_TIM8_Init+0xac>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001574:	4b1e      	ldr	r3, [pc, #120]	; (80015f0 <MX_TIM8_Init+0xac>)
 8001576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800157a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b1c      	ldr	r3, [pc, #112]	; (80015f0 <MX_TIM8_Init+0xac>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001582:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <MX_TIM8_Init+0xac>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <MX_TIM8_Init+0xac>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800158e:	2303      	movs	r3, #3
 8001590:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015a6:	2301      	movs	r3, #1
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <MX_TIM8_Init+0xac>)
 80015ba:	f002 ff69 	bl	8004490 <HAL_TIM_Encoder_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80015c4:	f000 fd1c 	bl	8002000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015d4:	463b      	mov	r3, r7
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_TIM8_Init+0xac>)
 80015da:	f004 f8cf 	bl	800577c <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80015e4:	f000 fd0c 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015e8:	bf00      	nop
 80015ea:	3730      	adds	r7, #48	; 0x30
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000368 	.word	0x20000368
 80015f4:	40013400 	.word	0x40013400

080015f8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80015fc:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 80015fe:	4a22      	ldr	r2, [pc, #136]	; (8001688 <MX_LPUART1_UART_Init+0x90>)
 8001600:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001602:	4b20      	ldr	r3, [pc, #128]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 8001604:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001608:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160a:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001610:	4b1c      	ldr	r3, [pc, #112]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001616:	4b1b      	ldr	r3, [pc, #108]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 800161e:	220c      	movs	r2, #12
 8001620:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001622:	4b18      	ldr	r3, [pc, #96]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001628:	4b16      	ldr	r3, [pc, #88]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 800162a:	2200      	movs	r2, #0
 800162c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 8001630:	2200      	movs	r2, #0
 8001632:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001634:	4b13      	ldr	r3, [pc, #76]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800163a:	4812      	ldr	r0, [pc, #72]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 800163c:	f004 fa0e 	bl	8005a5c <HAL_UART_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001646:	f000 fcdb 	bl	8002000 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 800164e:	f006 fa66 	bl	8007b1e <HAL_UARTEx_SetTxFifoThreshold>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001658:	f000 fcd2 	bl	8002000 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165c:	2100      	movs	r1, #0
 800165e:	4809      	ldr	r0, [pc, #36]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 8001660:	f006 fa9b 	bl	8007b9a <HAL_UARTEx_SetRxFifoThreshold>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800166a:	f000 fcc9 	bl	8002000 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800166e:	4805      	ldr	r0, [pc, #20]	; (8001684 <MX_LPUART1_UART_Init+0x8c>)
 8001670:	f006 fa1c 	bl	8007aac <HAL_UARTEx_DisableFifoMode>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800167a:	f000 fcc1 	bl	8002000 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000448 	.word	0x20000448
 8001688:	40008000 	.word	0x40008000

0800168c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001690:	4b22      	ldr	r3, [pc, #136]	; (800171c <MX_USART1_UART_Init+0x90>)
 8001692:	4a23      	ldr	r2, [pc, #140]	; (8001720 <MX_USART1_UART_Init+0x94>)
 8001694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <MX_USART1_UART_Init+0x90>)
 8001698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800169c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016b2:	220c      	movs	r2, #12
 80016b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016be:	2200      	movs	r2, #0
 80016c0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c8:	4b14      	ldr	r3, [pc, #80]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ce:	4b13      	ldr	r3, [pc, #76]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016d6:	f004 f9c1 	bl	8005a5c <HAL_UART_Init>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016e0:	f000 fc8e 	bl	8002000 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e4:	2100      	movs	r1, #0
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016e8:	f006 fa19 	bl	8007b1e <HAL_UARTEx_SetTxFifoThreshold>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016f2:	f000 fc85 	bl	8002000 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f6:	2100      	movs	r1, #0
 80016f8:	4808      	ldr	r0, [pc, #32]	; (800171c <MX_USART1_UART_Init+0x90>)
 80016fa:	f006 fa4e 	bl	8007b9a <HAL_UARTEx_SetRxFifoThreshold>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001704:	f000 fc7c 	bl	8002000 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001708:	4804      	ldr	r0, [pc, #16]	; (800171c <MX_USART1_UART_Init+0x90>)
 800170a:	f006 f9cf 	bl	8007aac <HAL_UARTEx_DisableFifoMode>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001714:	f000 fc74 	bl	8002000 <Error_Handler>
  }

}
 8001718:	bf00      	nop
 800171a:	bd80      	pop	{r7, pc}
 800171c:	200003b4 	.word	0x200003b4
 8001720:	40013800 	.word	0x40013800

08001724 <L298N_init>:
				TIM_HandleTypeDef* pwm_timer_,
				GPIO_TypeDef* GPIOx_1_,
				uint16_t GPIO_Pin_1_,
				GPIO_TypeDef* GPIOx_2_,
				uint16_t GPIO_Pin_2_)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
 8001730:	603b      	str	r3, [r7, #0]
	L298N_driver->current_PWM = 0;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	721a      	strb	r2, [r3, #8]
	L298N_driver->pwm_timer = pwm_timer_;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	605a      	str	r2, [r3, #4]
	L298N_driver->pwm_channel=pwm_channel_;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	601a      	str	r2, [r3, #0]
	L298N_driver->GPIOx_1 =GPIOx_1_;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	60da      	str	r2, [r3, #12]
	L298N_driver->GPIO_Pin_1 = GPIO_Pin_1_;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8b3a      	ldrh	r2, [r7, #24]
 800174e:	821a      	strh	r2, [r3, #16]
	L298N_driver->GPIOx_2 = GPIOx_2_;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	615a      	str	r2, [r3, #20]
	L298N_driver->GPIO_Pin_2 = GPIO_Pin_2_;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8c3a      	ldrh	r2, [r7, #32]
 800175a:	831a      	strh	r2, [r3, #24]

}
 800175c:	bf00      	nop
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <L298N_update_pwm>:


void L298N_update_pwm(L298N_driver* L298_driver, uint8_t new_pwm_count)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	460b      	mov	r3, r1
 8001772:	70fb      	strb	r3, [r7, #3]
	L298_driver->current_PWM = new_pwm_count;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	721a      	strb	r2, [r3, #8]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <L298N_update_pwm+0x28>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	7a1a      	ldrb	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	635a      	str	r2, [r3, #52]	; 0x34

}
 800178e:	e036      	b.n	80017fe <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b04      	cmp	r3, #4
 8001796:	d107      	bne.n	80017a8 <L298N_update_pwm+0x40>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	7a19      	ldrb	r1, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	460b      	mov	r3, r1
 80017a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80017a6:	e02a      	b.n	80017fe <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b08      	cmp	r3, #8
 80017ae:	d107      	bne.n	80017c0 <L298N_update_pwm+0x58>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7a19      	ldrb	r1, [r3, #8]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	460b      	mov	r3, r1
 80017bc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80017be:	e01e      	b.n	80017fe <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d107      	bne.n	80017d8 <L298N_update_pwm+0x70>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	7a19      	ldrb	r1, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	460b      	mov	r3, r1
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
}
 80017d6:	e012      	b.n	80017fe <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b10      	cmp	r3, #16
 80017de:	d107      	bne.n	80017f0 <L298N_update_pwm+0x88>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7a19      	ldrb	r1, [r3, #8]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	460b      	mov	r3, r1
 80017ec:	6493      	str	r3, [r2, #72]	; 0x48
}
 80017ee:	e006      	b.n	80017fe <L298N_update_pwm+0x96>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, L298_driver->current_PWM);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	7a19      	ldrb	r1, [r3, #8]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	460b      	mov	r3, r1
 80017fc:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, E_L298N_MODE l298n_mode)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == BACKWARD)
 8001816:	78fb      	ldrb	r3, [r7, #3]
 8001818:	2b02      	cmp	r3, #2
 800181a:	d110      	bne.n	800183e <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68d8      	ldr	r0, [r3, #12]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	8a1b      	ldrh	r3, [r3, #16]
 8001824:	2201      	movs	r2, #1
 8001826:	4619      	mov	r1, r3
 8001828:	f001 fb04 	bl	8002e34 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6958      	ldr	r0, [r3, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	8b1b      	ldrh	r3, [r3, #24]
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	f001 fafc 	bl	8002e34 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 800183c:	e026      	b.n	800188c <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == FORWARD)
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d110      	bne.n	8001866 <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68d8      	ldr	r0, [r3, #12]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	8a1b      	ldrh	r3, [r3, #16]
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	f001 faf0 	bl	8002e34 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6958      	ldr	r0, [r3, #20]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	8b1b      	ldrh	r3, [r3, #24]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	f001 fae8 	bl	8002e34 <HAL_GPIO_WritePin>
}
 8001864:	e012      	b.n	800188c <L298N_set_input_configuration+0x82>
	else if(l298n_mode == STOP)
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10f      	bne.n	800188c <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68d8      	ldr	r0, [r3, #12]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	8a1b      	ldrh	r3, [r3, #16]
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	f001 fadc 	bl	8002e34 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6958      	ldr	r0, [r3, #20]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	8b1b      	ldrh	r3, [r3, #24]
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	f001 fad4 	bl	8002e34 <HAL_GPIO_WritePin>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <init_driving_system>:
static char state_str[30];

static void send_state(DrivingSystem* driving_system);

void init_driving_system(DrivingSystem* driving_system, MotorStruct* lb_motor, MotorStruct* lf_motor, MotorStruct* rb_motor, MotorStruct* rf_motor)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]

	driving_system->left_motors_lst[0] = lb_motor;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	68ba      	ldr	r2, [r7, #8]
 80018a6:	601a      	str	r2, [r3, #0]
	driving_system->left_motors_lst[1] = lf_motor;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]
	driving_system->right_motors_lst[0] = rb_motor;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	609a      	str	r2, [r3, #8]
	driving_system->right_motors_lst[1] = rf_motor;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	60da      	str	r2, [r3, #12]
}
 80018ba:	bf00      	nop
 80018bc:	3714      	adds	r7, #20
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <default_init_driving_system_if>:

void default_init_driving_system_if(DrivingSystemIface* drv_system_if){
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

	drv_system_if->exe_cmd = execute_cmd;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <default_init_driving_system_if+0x1c>)
 80018d4:	601a      	str	r2, [r3, #0]
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	080018e9 	.word	0x080018e9

080018e8 <execute_cmd>:

void execute_cmd(DrivingSystem* driving_system, uint8_t* cmd){
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]


	uint8_t cmd_literall[] = {cmd[0], '\0'};
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	723b      	strb	r3, [r7, #8]
 80018f8:	2300      	movs	r3, #0
 80018fa:	727b      	strb	r3, [r7, #9]
	uint8_t* send_state_literall = (uint8_t*)"s";
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <execute_cmd+0x38>)
 80018fe:	60fb      	str	r3, [r7, #12]

	if(strcmp(cmd_literall, SEND_STATE_CHAR) == 0){
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	4906      	ldr	r1, [pc, #24]	; (8001920 <execute_cmd+0x38>)
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fc8a 	bl	8000220 <strcmp>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <execute_cmd+0x30>
		send_state(driving_system);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f806 	bl	8001924 <send_state>
	}

}
 8001918:	bf00      	nop
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	0800add0 	.word	0x0800add0

08001924 <send_state>:


static void send_state(DrivingSystem* driving_system){
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

	memset(state_str, '\0', sizeof(state_str));
 800192c:	221e      	movs	r2, #30
 800192e:	2100      	movs	r1, #0
 8001930:	480a      	ldr	r0, [pc, #40]	; (800195c <send_state+0x38>)
 8001932:	f007 f946 	bl	8008bc2 <memset>
	MotorState* curr_motor_state = driving_system->left_motors_lst[0]->motor_state;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	60fb      	str	r3, [r7, #12]
	str_motor_state(curr_motor_state, state_str);
 800193e:	4907      	ldr	r1, [pc, #28]	; (800195c <send_state+0x38>)
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f833 	bl	80019ac <str_motor_state>
	HAL_UART_Transmit(&hlpuart1,(uint8_t*) state_str, sizeof(state_str),STATE_SENDING_TIMEOUT);
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	221e      	movs	r2, #30
 800194a:	4904      	ldr	r1, [pc, #16]	; (800195c <send_state+0x38>)
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <send_state+0x3c>)
 800194e:	f004 f8d5 	bl	8005afc <HAL_UART_Transmit>

}
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200004dc 	.word	0x200004dc
 8001960:	20000448 	.word	0x20000448

08001964 <init_encoder_info>:
 */

#include "encoder_driver.h"

void init_encoder_info(EncoderInfo* encoder_info, TIM_HandleTypeDef* encoder_timer_)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	encoder_info->encoder_timer=encoder_timer_;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	601a      	str	r2, [r3, #0]

}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <update_encoder_info>:

void update_encoder_info(EncoderInfo* encoder_info)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	889a      	ldrh	r2, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001998:	b29a      	uxth	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	809a      	strh	r2, [r3, #4]

}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <str_motor_state>:
#include <motor_features.h>
#include "motor_driver.h"
#include "timers_configuration.h"


void str_motor_state(MotorState* motor_state, char* state_buffer){
 80019ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	af04      	add	r7, sp, #16
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]

	sprintf(state_buffer, "id %d, pos %.2f, vel %.2f \n\r", motor_state->motor_id, motor_state->last_position, motor_state->measured_velocity);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7c1b      	ldrb	r3, [r3, #16]
 80019ba:	461e      	mov	r6, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdf9 	bl	80005b8 <__aeabi_f2d>
 80019c6:	4604      	mov	r4, r0
 80019c8:	460d      	mov	r5, r1
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdf2 	bl	80005b8 <__aeabi_f2d>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019dc:	e9cd 4500 	strd	r4, r5, [sp]
 80019e0:	4632      	mov	r2, r6
 80019e2:	4904      	ldr	r1, [pc, #16]	; (80019f4 <str_motor_state+0x48>)
 80019e4:	6838      	ldr	r0, [r7, #0]
 80019e6:	f007 f889 	bl	8008afc <siprintf>
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	0800add4 	.word	0x0800add4

080019f8 <init_motor>:
		MotorState *motor_state_,
		TIM_HandleTypeDef *updater_tim_,
		EncoderInfo *enc_inf_param_,
		PIDController *pid_controller_,
		L298N_driver *L298N_)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
	motor_struct->motor_state = motor_state_;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	68ba      	ldr	r2, [r7, #8]
 8001a0a:	601a      	str	r2, [r3, #0]
	motor_struct->motor_updater_tim = updater_tim_;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	60da      	str	r2, [r3, #12]
	motor_struct->encoder_info = enc_inf_param_;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	609a      	str	r2, [r3, #8]
	motor_struct->L298N_driver = L298N_;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	611a      	str	r2, [r3, #16]
	motor_struct->pid_controller = pid_controller_;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	605a      	str	r2, [r3, #4]

}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <regulate_velocity>:


void regulate_velocity(MotorStruct *motor_struct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]

	MotorState* current_motor_state = motor_struct->motor_state;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	60fb      	str	r3, [r7, #12]
	uint16_t pwm_value = pid_calculate(	motor_struct->pid_controller,
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685a      	ldr	r2, [r3, #4]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	ed93 7a00 	vldr	s14, [r3]
 8001a4e:	eef0 0a47 	vmov.f32	s1, s14
 8001a52:	eeb0 0a67 	vmov.f32	s0, s15
 8001a56:	4610      	mov	r0, r2
 8001a58:	f000 f8df 	bl	8001c1a <pid_calculate>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	817b      	strh	r3, [r7, #10]
										current_motor_state->set_velocity,
										current_motor_state->measured_velocity);
	uint8_t saturated_pwm_value = saturate_pwm(pwm_value);
 8001a60:	897b      	ldrh	r3, [r7, #10]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f9a0 	bl	8001da8 <saturate_pwm>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	727b      	strb	r3, [r7, #9]
	L298N_update_pwm(motor_struct->L298N_driver, saturated_pwm_value);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	7a7a      	ldrb	r2, [r7, #9]
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff fe77 	bl	8001768 <L298N_update_pwm>

}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <update_motor_position>:



void update_motor_position(MotorState* motor_state, EncoderInfo* encoder_info)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]

	motor_state->last_position = motor_state->position;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	60da      	str	r2, [r3, #12]
	update_encoder_info(encoder_info);
 8001a94:	6838      	ldr	r0, [r7, #0]
 8001a96:	f7ff ff73 	bl	8001980 <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	889a      	ldrh	r2, [r3, #4]
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	88db      	ldrh	r3, [r3, #6]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	82bb      	strh	r3, [r7, #20]
	int16_t position_change = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	82fb      	strh	r3, [r7, #22]
	//encoder increase
	if (encoder_diff > 0){
 8001aac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	dd1f      	ble.n	8001af4 <update_motor_position+0x72>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0310 	and.w	r3, r3, #16
 8001ac0:	2b10      	cmp	r3, #16
 8001ac2:	d114      	bne.n	8001aee <update_motor_position+0x6c>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	889b      	ldrh	r3, [r3, #4]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	bfb8      	it	lt
 8001ad8:	425b      	neglt	r3, r3
 8001ada:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	88da      	ldrh	r2, [r3, #6]
 8001ae0:	89fb      	ldrh	r3, [r7, #14]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	425b      	negs	r3, r3
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	82fb      	strh	r3, [r7, #22]
 8001aec:	e023      	b.n	8001b36 <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001aee:	8abb      	ldrh	r3, [r7, #20]
 8001af0:	82fb      	strh	r3, [r7, #22]
 8001af2:	e020      	b.n	8001b36 <update_motor_position+0xb4>
		}
	}else if(encoder_diff < 0) //encoder decrease
 8001af4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da1c      	bge.n	8001b36 <update_motor_position+0xb4>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b10      	cmp	r3, #16
 8001b0a:	d012      	beq.n	8001b32 <update_motor_position+0xb0>

			int16_t postreload_count = encoder_info->counter_value;
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	889b      	ldrh	r3, [r3, #4]
 8001b10:	827b      	strh	r3, [r7, #18]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	88db      	ldrh	r3, [r3, #6]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	823b      	strh	r3, [r7, #16]
			position_change = postreload_count + prereload_count;
 8001b26:	8a7a      	ldrh	r2, [r7, #18]
 8001b28:	8a3b      	ldrh	r3, [r7, #16]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	82fb      	strh	r3, [r7, #22]
 8001b30:	e001      	b.n	8001b36 <update_motor_position+0xb4>

		}else{
			position_change = encoder_diff;
 8001b32:	8abb      	ldrh	r3, [r7, #20]
 8001b34:	82fb      	strh	r3, [r7, #22]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 8001b36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f900 	bl	8001d40 <convert_to_radians>
 8001b40:	ed87 0a02 	vstr	s0, [r7, #8]
	motor_state->position = motor_state->last_position - position_change_rad;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	ed93 7a03 	vldr	s14, [r3, #12]
 8001b4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	edc3 7a02 	vstr	s15, [r3, #8]

}
 8001b58:	bf00      	nop
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <set_velocity>:

void set_velocity(MotorState *motor_state, float velocity)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	ed87 0a00 	vstr	s0, [r7]
	motor_state->set_velocity = velocity;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	605a      	str	r2, [r3, #4]
}
 8001b72:	bf00      	nop
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <update_measured_velocity>:

void update_measured_velocity(MotorState* motor_state, float updater_timer_periods)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b084      	sub	sp, #16
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	ed87 0a00 	vstr	s0, [r7]

	float rotary_displacement_ = rotary_displacement(motor_state);
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f000 f80f 	bl	8001bae <rotary_displacement>
 8001b90:	ed87 0a03 	vstr	s0, [r7, #12]
	motor_state->measured_velocity = (float)rotary_displacement_ /updater_timer_periods;
 8001b94:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b98:	ed97 7a00 	vldr	s14, [r7]
 8001b9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edc3 7a00 	vstr	s15, [r3]

}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <rotary_displacement>:

float rotary_displacement(MotorState *motor_state){
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]

	return motor_state->position - motor_state->last_position;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001bc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <pid_init>:


#include "pid_controller.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6178      	str	r0, [r7, #20]
 8001bdc:	ed87 0a04 	vstr	s0, [r7, #16]
 8001be0:	edc7 0a03 	vstr	s1, [r7, #12]
 8001be4:	ed87 1a02 	vstr	s2, [r7, #8]
 8001be8:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	68ba      	ldr	r2, [r7, #8]
 8001c06:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	615a      	str	r2, [r3, #20]
}
 8001c0e:	bf00      	nop
 8001c10:	371c      	adds	r7, #28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <pid_calculate>:
	pid_data->previous_error = 0;
}


int pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b089      	sub	sp, #36	; 0x24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	ed87 0a02 	vstr	s0, [r7, #8]
 8001c26:	edc7 0a01 	vstr	s1, [r7, #4]
	float error;
	float p_term, i_term, d_term;


	error = setpoint - process_variable;
 8001c2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c36:	edc7 7a06 	vstr	s15, [r7, #24]
	pid_data->total_error += error;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c46:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c52:	ee17 2a90 	vmov	r2, s15
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c60:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c68:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	ee07 3a90 	vmov	s15, r3
 8001c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c82:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c98:	edd7 6a06 	vldr	s13, [r7, #24]
 8001c9c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ca4:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	ee07 3a90 	vmov	s15, r3
 8001cb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cc0:	db08      	blt.n	8001cd4 <pid_calculate+0xba>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	ee07 3a90 	vmov	s15, r3
 8001cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cce:	edc7 7a07 	vstr	s15, [r7, #28]
 8001cd2:	e016      	b.n	8001d02 <pid_calculate+0xe8>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	425b      	negs	r3, r3
 8001cda:	ee07 3a90 	vmov	s15, r3
 8001cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce2:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ce6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cee:	d808      	bhi.n	8001d02 <pid_calculate+0xe8>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	425b      	negs	r3, r3
 8001cf6:	ee07 3a90 	vmov	s15, r3
 8001cfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfe:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8001d02:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d0a:	ee17 2a90 	vmov	r2, s15
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8001d12:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d16:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2a:	ee17 3a90 	vmov	r3, s15
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	0000      	movs	r0, r0
 8001d3c:	0000      	movs	r0, r0
	...

08001d40 <convert_to_radians>:
 *      Author: pawel
 */

#include "motor_features.h"

float convert_to_radians(int32_t enc_position){
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	ee07 3a90 	vmov	s15, r3
 8001d4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d52:	ee17 0a90 	vmov	r0, s15
 8001d56:	f7fe fc2f 	bl	80005b8 <__aeabi_f2d>
 8001d5a:	a30f      	add	r3, pc, #60	; (adr r3, 8001d98 <convert_to_radians+0x58>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc82 	bl	8000668 <__aeabi_dmul>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	a30c      	add	r3, pc, #48	; (adr r3, 8001da0 <convert_to_radians+0x60>)
 8001d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d72:	f7fe fda3 	bl	80008bc <__aeabi_ddiv>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f7fe ff4b 	bl	8000c18 <__aeabi_d2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	ee07 3a90 	vmov	s15, r3

}
 8001d88:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	f3af 8000 	nop.w
 8001d98:	54442d18 	.word	0x54442d18
 8001d9c:	401921fb 	.word	0x401921fb
 8001da0:	00000000 	.word	0x00000000
 8001da4:	40ae6400 	.word	0x40ae6400

08001da8 <saturate_pwm>:


uint8_t saturate_pwm(int pwm_value){
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]


	if (pwm_value < 0){
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da02      	bge.n	8001dbc <saturate_pwm+0x14>
		pwm_value = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	e004      	b.n	8001dc6 <saturate_pwm+0x1e>
	}else if(pwm_value > 100){
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b64      	cmp	r3, #100	; 0x64
 8001dc0:	dd01      	ble.n	8001dc6 <saturate_pwm+0x1e>
		pwm_value = 100;
 8001dc2:	2364      	movs	r3, #100	; 0x64
 8001dc4:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	b2db      	uxtb	r3, r3

}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b086      	sub	sp, #24
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 8001dea:	f001 fd9f 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8001dee:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	ee07 3a90 	vmov	s15, r3
 8001e06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e0e:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	ee07 3a90 	vmov	s15, r3
}
 8001e18:	eeb0 0a67 	vmov.f32	s0, s15
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <main>:
uint8_t cmd_data[10];



int main(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af04      	add	r7, sp, #16

  HAL_Init();
 8001e2a:	f000 fcbc 	bl	80027a6 <HAL_Init>
  SystemClock_Config();
 8001e2e:	f7ff f8c1 	bl	8000fb4 <SystemClock_Config>
  MX_GPIO_Init();
 8001e32:	f7ff f90b 	bl	800104c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001e36:	f7ff fbdf 	bl	80015f8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001e3a:	f7ff fc27 	bl	800168c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001e3e:	f7ff f973 	bl	8001128 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001e42:	f7ff fa47 	bl	80012d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e46:	f7ff fa9b 	bl	8001380 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001e4a:	f7ff faef 	bl	800142c <MX_TIM5_Init>
  MX_TIM7_Init();
 8001e4e:	f7ff fb43 	bl	80014d8 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001e52:	f7ff fb77 	bl	8001544 <MX_TIM8_Init>

  init_encoder_info(&encoder_info, &htim4);
 8001e56:	4939      	ldr	r1, [pc, #228]	; (8001f3c <main+0x118>)
 8001e58:	4839      	ldr	r0, [pc, #228]	; (8001f40 <main+0x11c>)
 8001e5a:	f7ff fd83 	bl	8001964 <init_encoder_info>
  L298N_init(&L298N_lb, TIM_CHANNEL_1, &htim1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 8001e5e:	2302      	movs	r3, #2
 8001e60:	9302      	str	r3, [sp, #8]
 8001e62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	2301      	movs	r3, #1
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e70:	4a34      	ldr	r2, [pc, #208]	; (8001f44 <main+0x120>)
 8001e72:	2100      	movs	r1, #0
 8001e74:	4834      	ldr	r0, [pc, #208]	; (8001f48 <main+0x124>)
 8001e76:	f7ff fc55 	bl	8001724 <L298N_init>
  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8001e7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e7e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001e82:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8001e86:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8001f4c <main+0x128>
 8001e8a:	4831      	ldr	r0, [pc, #196]	; (8001f50 <main+0x12c>)
 8001e8c:	f7ff fea2 	bl	8001bd4 <pid_init>
  init_motor(&lb_motor, &lb_motor_state, &htim7, &encoder_info, &pid_controller, &L298N_lb);
 8001e90:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <main+0x124>)
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <main+0x12c>)
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <main+0x11c>)
 8001e9a:	4a2e      	ldr	r2, [pc, #184]	; (8001f54 <main+0x130>)
 8001e9c:	492e      	ldr	r1, [pc, #184]	; (8001f58 <main+0x134>)
 8001e9e:	482f      	ldr	r0, [pc, #188]	; (8001f5c <main+0x138>)
 8001ea0:	f7ff fdaa 	bl	80019f8 <init_motor>


  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001ea4:	482b      	ldr	r0, [pc, #172]	; (8001f54 <main+0x130>)
 8001ea6:	f002 f907 	bl	80040b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 8001eaa:	482d      	ldr	r0, [pc, #180]	; (8001f60 <main+0x13c>)
 8001eac:	f002 f894 	bl	8003fd8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4824      	ldr	r0, [pc, #144]	; (8001f44 <main+0x120>)
 8001eb4:	f002 f9da 	bl	800426c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001eb8:	2104      	movs	r1, #4
 8001eba:	4822      	ldr	r0, [pc, #136]	; (8001f44 <main+0x120>)
 8001ebc:	f002 f9d6 	bl	800426c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ec0:	2108      	movs	r1, #8
 8001ec2:	4820      	ldr	r0, [pc, #128]	; (8001f44 <main+0x120>)
 8001ec4:	f002 f9d2 	bl	800426c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001ec8:	210c      	movs	r1, #12
 8001eca:	481e      	ldr	r0, [pc, #120]	; (8001f44 <main+0x120>)
 8001ecc:	f002 f9ce 	bl	800426c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001ed0:	213c      	movs	r1, #60	; 0x3c
 8001ed2:	481a      	ldr	r0, [pc, #104]	; (8001f3c <main+0x118>)
 8001ed4:	f002 fb82 	bl	80045dc <HAL_TIM_Encoder_Start>


  updater_timer_periods = CountPeriodS(lb_motor.motor_updater_tim);
 8001ed8:	4b20      	ldr	r3, [pc, #128]	; (8001f5c <main+0x138>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff7a 	bl	8001dd6 <CountPeriodS>
 8001ee2:	eef0 7a40 	vmov.f32	s15, s0
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <main+0x140>)
 8001ee8:	edc3 7a00 	vstr	s15, [r3]
  L298N_set_input_configuration(&L298N_lb, FORWARD);
 8001eec:	2101      	movs	r1, #1
 8001eee:	4816      	ldr	r0, [pc, #88]	; (8001f48 <main+0x124>)
 8001ef0:	f7ff fc8b 	bl	800180a <L298N_set_input_configuration>
  set_velocity(lb_motor.motor_state, 4);
 8001ef4:	4b19      	ldr	r3, [pc, #100]	; (8001f5c <main+0x138>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fe2f 	bl	8001b60 <set_velocity>
  init_driving_system(&driving_system ,&lb_motor, &lb_motor, &lb_motor, &lb_motor);
 8001f02:	4b16      	ldr	r3, [pc, #88]	; (8001f5c <main+0x138>)
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <main+0x138>)
 8001f08:	4a14      	ldr	r2, [pc, #80]	; (8001f5c <main+0x138>)
 8001f0a:	4914      	ldr	r1, [pc, #80]	; (8001f5c <main+0x138>)
 8001f0c:	4816      	ldr	r0, [pc, #88]	; (8001f68 <main+0x144>)
 8001f0e:	f7ff fcc1 	bl	8001894 <init_driving_system>
  default_init_driving_system_if(&drv_system_if);
 8001f12:	4816      	ldr	r0, [pc, #88]	; (8001f6c <main+0x148>)
 8001f14:	f7ff fcd8 	bl	80018c8 <default_init_driving_system_if>

  /* USER CODE END 2 */

  HAL_UART_Receive_IT(&hlpuart1, cmd_data, 4);
 8001f18:	2204      	movs	r2, #4
 8001f1a:	4915      	ldr	r1, [pc, #84]	; (8001f70 <main+0x14c>)
 8001f1c:	4815      	ldr	r0, [pc, #84]	; (8001f74 <main+0x150>)
 8001f1e:	f003 fe7b 	bl	8005c18 <HAL_UART_Receive_IT>
  period = CountPeriodS(&htim7);
 8001f22:	480c      	ldr	r0, [pc, #48]	; (8001f54 <main+0x130>)
 8001f24:	f7ff ff57 	bl	8001dd6 <CountPeriodS>
 8001f28:	eef0 7a40 	vmov.f32	s15, s0
 8001f2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f30:	ee17 3a90 	vmov	r3, s15
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	4b10      	ldr	r3, [pc, #64]	; (8001f78 <main+0x154>)
 8001f38:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8001f3a:	e7fe      	b.n	8001f3a <main+0x116>
 8001f3c:	20000284 	.word	0x20000284
 8001f40:	200004fc 	.word	0x200004fc
 8001f44:	200001ec 	.word	0x200001ec
 8001f48:	20000530 	.word	0x20000530
 8001f4c:	3d75c28f 	.word	0x3d75c28f
 8001f50:	20000518 	.word	0x20000518
 8001f54:	2000031c 	.word	0x2000031c
 8001f58:	2000054c 	.word	0x2000054c
 8001f5c:	20000504 	.word	0x20000504
 8001f60:	20000368 	.word	0x20000368
 8001f64:	20000578 	.word	0x20000578
 8001f68:	20000560 	.word	0x20000560
 8001f6c:	20000570 	.word	0x20000570
 8001f70:	2000057c 	.word	0x2000057c
 8001f74:	20000448 	.word	0x20000448
 8001f78:	20000574 	.word	0x20000574

08001f7c <HAL_UART_RxCpltCallback>:
  }

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

	drv_system_if.exe_cmd(&driving_system, cmd_data);
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_UART_RxCpltCallback+0x24>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4906      	ldr	r1, [pc, #24]	; (8001fa4 <HAL_UART_RxCpltCallback+0x28>)
 8001f8a:	4807      	ldr	r0, [pc, #28]	; (8001fa8 <HAL_UART_RxCpltCallback+0x2c>)
 8001f8c:	4798      	blx	r3
	HAL_UART_Receive_IT(&hlpuart1, cmd_data, 4);
 8001f8e:	2204      	movs	r2, #4
 8001f90:	4904      	ldr	r1, [pc, #16]	; (8001fa4 <HAL_UART_RxCpltCallback+0x28>)
 8001f92:	4806      	ldr	r0, [pc, #24]	; (8001fac <HAL_UART_RxCpltCallback+0x30>)
 8001f94:	f003 fe40 	bl	8005c18 <HAL_UART_Receive_IT>

}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000570 	.word	0x20000570
 8001fa4:	2000057c 	.word	0x2000057c
 8001fa8:	20000560 	.word	0x20000560
 8001fac:	20000448 	.word	0x20000448

08001fb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)lb_motor.motor_updater_tim->Instance) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d114      	bne.n	8001ff0 <HAL_TIM_PeriodElapsedCallback+0x40>

    	update_motor_position(lb_motor.motor_state, lb_motor.encoder_info);
 8001fc6:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001fcc:	6892      	ldr	r2, [r2, #8]
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fd56 	bl	8001a82 <update_motor_position>

    	update_measured_velocity(lb_motor.motor_state, updater_timer_periods);
 8001fd6:	4b08      	ldr	r3, [pc, #32]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a08      	ldr	r2, [pc, #32]	; (8001ffc <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001fdc:	edd2 7a00 	vldr	s15, [r2]
 8001fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fdca 	bl	8001b7e <update_measured_velocity>
    	regulate_velocity(&lb_motor);
 8001fea:	4803      	ldr	r0, [pc, #12]	; (8001ff8 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001fec:	f7ff fd20 	bl	8001a30 <regulate_velocity>
    }



//  /* USER CODE END Callback 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	20000504 	.word	0x20000504
 8001ffc:	20000578 	.word	0x20000578

08002000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002004:	b672      	cpsid	i
}
 8002006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002008:	e7fe      	b.n	8002008 <Error_Handler+0x8>
	...

0800200c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	4b0f      	ldr	r3, [pc, #60]	; (8002050 <HAL_MspInit+0x44>)
 8002014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002016:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <HAL_MspInit+0x44>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6613      	str	r3, [r2, #96]	; 0x60
 800201e:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <HAL_MspInit+0x44>)
 8002020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_MspInit+0x44>)
 800202c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_MspInit+0x44>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6593      	str	r3, [r2, #88]	; 0x58
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_MspInit+0x44>)
 8002038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002042:	f000 ffb3 	bl	8002fac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002046:	bf00      	nop
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b0a0      	sub	sp, #128	; 0x80
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800206c:	f107 0318 	add.w	r3, r7, #24
 8002070:	2254      	movs	r2, #84	; 0x54
 8002072:	2100      	movs	r1, #0
 8002074:	4618      	mov	r0, r3
 8002076:	f006 fda4 	bl	8008bc2 <memset>
  if(huart->Instance==LPUART1)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a41      	ldr	r2, [pc, #260]	; (8002184 <HAL_UART_MspInit+0x130>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d13f      	bne.n	8002104 <HAL_UART_MspInit+0xb0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002084:	2320      	movs	r3, #32
 8002086:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002088:	2300      	movs	r3, #0
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800208c:	f107 0318 	add.w	r3, r7, #24
 8002090:	4618      	mov	r0, r3
 8002092:	f001 fcfb 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800209c:	f7ff ffb0 	bl	8002000 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80020a0:	4b39      	ldr	r3, [pc, #228]	; (8002188 <HAL_UART_MspInit+0x134>)
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	4a38      	ldr	r2, [pc, #224]	; (8002188 <HAL_UART_MspInit+0x134>)
 80020a6:	f043 0301 	orr.w	r3, r3, #1
 80020aa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80020ac:	4b36      	ldr	r3, [pc, #216]	; (8002188 <HAL_UART_MspInit+0x134>)
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b8:	4b33      	ldr	r3, [pc, #204]	; (8002188 <HAL_UART_MspInit+0x134>)
 80020ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020bc:	4a32      	ldr	r2, [pc, #200]	; (8002188 <HAL_UART_MspInit+0x134>)
 80020be:	f043 0301 	orr.w	r3, r3, #1
 80020c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c4:	4b30      	ldr	r3, [pc, #192]	; (8002188 <HAL_UART_MspInit+0x134>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020d0:	230c      	movs	r3, #12
 80020d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80020e0:	230c      	movs	r3, #12
 80020e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f000 fd1f 	bl	8002b30 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	2100      	movs	r1, #0
 80020f6:	205b      	movs	r0, #91	; 0x5b
 80020f8:	f000 fc32 	bl	8002960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80020fc:	205b      	movs	r0, #91	; 0x5b
 80020fe:	f000 fc49 	bl	8002994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002102:	e03a      	b.n	800217a <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a20      	ldr	r2, [pc, #128]	; (800218c <HAL_UART_MspInit+0x138>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d135      	bne.n	800217a <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800210e:	2301      	movs	r3, #1
 8002110:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002116:	f107 0318 	add.w	r3, r7, #24
 800211a:	4618      	mov	r0, r3
 800211c:	f001 fcb6 	bl	8003a8c <HAL_RCCEx_PeriphCLKConfig>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8002126:	f7ff ff6b 	bl	8002000 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_UART_MspInit+0x134>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	4a16      	ldr	r2, [pc, #88]	; (8002188 <HAL_UART_MspInit+0x134>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6613      	str	r3, [r2, #96]	; 0x60
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_UART_MspInit+0x134>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_UART_MspInit+0x134>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	4a10      	ldr	r2, [pc, #64]	; (8002188 <HAL_UART_MspInit+0x134>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <HAL_UART_MspInit+0x134>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800215a:	2330      	movs	r3, #48	; 0x30
 800215c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215e:	2302      	movs	r3, #2
 8002160:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002166:	2300      	movs	r3, #0
 8002168:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800216a:	2307      	movs	r3, #7
 800216c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002172:	4619      	mov	r1, r3
 8002174:	4806      	ldr	r0, [pc, #24]	; (8002190 <HAL_UART_MspInit+0x13c>)
 8002176:	f000 fcdb 	bl	8002b30 <HAL_GPIO_Init>
}
 800217a:	bf00      	nop
 800217c:	3780      	adds	r7, #128	; 0x80
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40008000 	.word	0x40008000
 8002188:	40021000 	.word	0x40021000
 800218c:	40013800 	.word	0x40013800
 8002190:	48000800 	.word	0x48000800

08002194 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a16      	ldr	r2, [pc, #88]	; (80021fc <HAL_TIM_Base_MspInit+0x68>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d10c      	bne.n	80021c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_TIM_Base_MspInit+0x6c>)
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	4a15      	ldr	r2, [pc, #84]	; (8002200 <HAL_TIM_Base_MspInit+0x6c>)
 80021ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021b0:	6613      	str	r3, [r2, #96]	; 0x60
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_TIM_Base_MspInit+0x6c>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80021be:	e018      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0f      	ldr	r2, [pc, #60]	; (8002204 <HAL_TIM_Base_MspInit+0x70>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d113      	bne.n	80021f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <HAL_TIM_Base_MspInit+0x6c>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <HAL_TIM_Base_MspInit+0x6c>)
 80021d0:	f043 0320 	orr.w	r3, r3, #32
 80021d4:	6593      	str	r3, [r2, #88]	; 0x58
 80021d6:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_TIM_Base_MspInit+0x6c>)
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f003 0320 	and.w	r3, r3, #32
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2037      	movs	r0, #55	; 0x37
 80021e8:	f000 fbba 	bl	8002960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 80021ec:	2037      	movs	r0, #55	; 0x37
 80021ee:	f000 fbd1 	bl	8002994 <HAL_NVIC_EnableIRQ>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40012c00 	.word	0x40012c00
 8002200:	40021000 	.word	0x40021000
 8002204:	40001400 	.word	0x40001400

08002208 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b090      	sub	sp, #64	; 0x40
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a6c      	ldr	r2, [pc, #432]	; (80023d8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d129      	bne.n	800227e <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800222a:	4b6c      	ldr	r3, [pc, #432]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800222c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222e:	4a6b      	ldr	r2, [pc, #428]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6593      	str	r3, [r2, #88]	; 0x58
 8002236:	4b69      	ldr	r3, [pc, #420]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b66      	ldr	r3, [pc, #408]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	4a65      	ldr	r2, [pc, #404]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002248:	f043 0301 	orr.w	r3, r3, #1
 800224c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800224e:	4b63      	ldr	r3, [pc, #396]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	627b      	str	r3, [r7, #36]	; 0x24
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800225a:	2350      	movs	r3, #80	; 0x50
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225e:	2302      	movs	r3, #2
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800226a:	2302      	movs	r3, #2
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002272:	4619      	mov	r1, r3
 8002274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002278:	f000 fc5a 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800227c:	e0a7      	b.n	80023ce <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a57      	ldr	r2, [pc, #348]	; (80023e0 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d12a      	bne.n	80022de <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002288:	4b54      	ldr	r3, [pc, #336]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	4a53      	ldr	r2, [pc, #332]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	6593      	str	r3, [r2, #88]	; 0x58
 8002294:	4b51      	ldr	r3, [pc, #324]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	623b      	str	r3, [r7, #32]
 800229e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a0:	4b4e      	ldr	r3, [pc, #312]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a4:	4a4d      	ldr	r2, [pc, #308]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ac:	4b4b      	ldr	r3, [pc, #300]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80022b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c2:	2300      	movs	r3, #0
 80022c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c6:	2300      	movs	r3, #0
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80022ca:	230a      	movs	r3, #10
 80022cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022d2:	4619      	mov	r1, r3
 80022d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d8:	f000 fc2a 	bl	8002b30 <HAL_GPIO_Init>
}
 80022dc:	e077      	b.n	80023ce <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a40      	ldr	r2, [pc, #256]	; (80023e4 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d145      	bne.n	8002374 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022e8:	4b3c      	ldr	r3, [pc, #240]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	4a3b      	ldr	r2, [pc, #236]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
 80022f4:	4b39      	ldr	r3, [pc, #228]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002300:	4b36      	ldr	r3, [pc, #216]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002304:	4a35      	ldr	r2, [pc, #212]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002306:	f043 0302 	orr.w	r3, r3, #2
 800230a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230c:	4b33      	ldr	r3, [pc, #204]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800230e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	617b      	str	r3, [r7, #20]
 8002316:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800231a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231c:	4a2f      	ldr	r2, [pc, #188]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800231e:	f043 0304 	orr.w	r3, r3, #4
 8002322:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002324:	4b2d      	ldr	r3, [pc, #180]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002326:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002330:	2304      	movs	r3, #4
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002334:	2302      	movs	r3, #2
 8002336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	2300      	movs	r3, #0
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233c:	2300      	movs	r3, #0
 800233e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002340:	2302      	movs	r3, #2
 8002342:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002348:	4619      	mov	r1, r3
 800234a:	4827      	ldr	r0, [pc, #156]	; (80023e8 <HAL_TIM_Encoder_MspInit+0x1e0>)
 800234c:	f000 fbf0 	bl	8002b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002356:	2302      	movs	r3, #2
 8002358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002362:	2301      	movs	r3, #1
 8002364:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002366:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800236a:	4619      	mov	r1, r3
 800236c:	481f      	ldr	r0, [pc, #124]	; (80023ec <HAL_TIM_Encoder_MspInit+0x1e4>)
 800236e:	f000 fbdf 	bl	8002b30 <HAL_GPIO_Init>
}
 8002372:	e02c      	b.n	80023ce <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a1d      	ldr	r2, [pc, #116]	; (80023f0 <HAL_TIM_Encoder_MspInit+0x1e8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d127      	bne.n	80023ce <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800237e:	4b17      	ldr	r3, [pc, #92]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002382:	4a16      	ldr	r2, [pc, #88]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002384:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002388:	6613      	str	r3, [r2, #96]	; 0x60
 800238a:	4b14      	ldr	r3, [pc, #80]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800238e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002396:	4b11      	ldr	r3, [pc, #68]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <HAL_TIM_Encoder_MspInit+0x1d4>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	60bb      	str	r3, [r7, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023ae:	23c0      	movs	r3, #192	; 0xc0
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80023be:	2304      	movs	r3, #4
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023c6:	4619      	mov	r1, r3
 80023c8:	4808      	ldr	r0, [pc, #32]	; (80023ec <HAL_TIM_Encoder_MspInit+0x1e4>)
 80023ca:	f000 fbb1 	bl	8002b30 <HAL_GPIO_Init>
}
 80023ce:	bf00      	nop
 80023d0:	3740      	adds	r7, #64	; 0x40
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40000400 	.word	0x40000400
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40000800 	.word	0x40000800
 80023e4:	40000c00 	.word	0x40000c00
 80023e8:	48000400 	.word	0x48000400
 80023ec:	48000800 	.word	0x48000800
 80023f0:	40013400 	.word	0x40013400

080023f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b088      	sub	sp, #32
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_TIM_MspPostInit+0x64>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d11b      	bne.n	800244e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <HAL_TIM_MspPostInit+0x68>)
 8002418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241a:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_TIM_MspPostInit+0x68>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <HAL_TIM_MspPostInit+0x68>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800242e:	230f      	movs	r3, #15
 8002430:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002432:	2302      	movs	r3, #2
 8002434:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800243e:	2302      	movs	r3, #2
 8002440:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002442:	f107 030c 	add.w	r3, r7, #12
 8002446:	4619      	mov	r1, r3
 8002448:	4805      	ldr	r0, [pc, #20]	; (8002460 <HAL_TIM_MspPostInit+0x6c>)
 800244a:	f000 fb71 	bl	8002b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800244e:	bf00      	nop
 8002450:	3720      	adds	r7, #32
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40021000 	.word	0x40021000
 8002460:	48000800 	.word	0x48000800

08002464 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08c      	sub	sp, #48	; 0x30
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_InitTick+0xc4>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a2b      	ldr	r2, [pc, #172]	; (8002528 <HAL_InitTick+0xc4>)
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	6593      	str	r3, [r2, #88]	; 0x58
 8002480:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_InitTick+0xc4>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	60bb      	str	r3, [r7, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800248c:	f107 020c 	add.w	r2, r7, #12
 8002490:	f107 0310 	add.w	r3, r7, #16
 8002494:	4611      	mov	r1, r2
 8002496:	4618      	mov	r0, r3
 8002498:	f001 fa80 	bl	800399c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800249c:	f001 fa52 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 80024a0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a4:	4a21      	ldr	r2, [pc, #132]	; (800252c <HAL_InitTick+0xc8>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9b      	lsrs	r3, r3, #18
 80024ac:	3b01      	subs	r3, #1
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024b0:	4b1f      	ldr	r3, [pc, #124]	; (8002530 <HAL_InitTick+0xcc>)
 80024b2:	4a20      	ldr	r2, [pc, #128]	; (8002534 <HAL_InitTick+0xd0>)
 80024b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024b6:	4b1e      	ldr	r3, [pc, #120]	; (8002530 <HAL_InitTick+0xcc>)
 80024b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024be:	4a1c      	ldr	r2, [pc, #112]	; (8002530 <HAL_InitTick+0xcc>)
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024c4:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <HAL_InitTick+0xcc>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ca:	4b19      	ldr	r3, [pc, #100]	; (8002530 <HAL_InitTick+0xcc>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80024d0:	4817      	ldr	r0, [pc, #92]	; (8002530 <HAL_InitTick+0xcc>)
 80024d2:	f001 fd29 	bl	8003f28 <HAL_TIM_Base_Init>
 80024d6:	4603      	mov	r3, r0
 80024d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80024dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d11b      	bne.n	800251c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024e4:	4812      	ldr	r0, [pc, #72]	; (8002530 <HAL_InitTick+0xcc>)
 80024e6:	f001 fde7 	bl	80040b8 <HAL_TIM_Base_Start_IT>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80024f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d111      	bne.n	800251c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80024f8:	2036      	movs	r0, #54	; 0x36
 80024fa:	f000 fa4b 	bl	8002994 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2b0f      	cmp	r3, #15
 8002502:	d808      	bhi.n	8002516 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002504:	2200      	movs	r2, #0
 8002506:	6879      	ldr	r1, [r7, #4]
 8002508:	2036      	movs	r0, #54	; 0x36
 800250a:	f000 fa29 	bl	8002960 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800250e:	4a0a      	ldr	r2, [pc, #40]	; (8002538 <HAL_InitTick+0xd4>)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6013      	str	r3, [r2, #0]
 8002514:	e002      	b.n	800251c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800251c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002520:	4618      	mov	r0, r3
 8002522:	3730      	adds	r7, #48	; 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40021000 	.word	0x40021000
 800252c:	431bde83 	.word	0x431bde83
 8002530:	20000588 	.word	0x20000588
 8002534:	40001000 	.word	0x40001000
 8002538:	20000004 	.word	0x20000004

0800253c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <NMI_Handler+0x4>

08002542 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <HardFault_Handler+0x4>

08002548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <MemManage_Handler+0x4>

0800254e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <BusFault_Handler+0x4>

08002554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <UsageFault_Handler+0x4>

0800255a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800256c:	4802      	ldr	r0, [pc, #8]	; (8002578 <TIM6_DAC_IRQHandler+0x10>)
 800256e:	f002 f8c3 	bl	80046f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000588 	.word	0x20000588

0800257c <TIM7_DAC_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt, DAC2 and DAC4 channel underrun error interrupts.
  */
void TIM7_DAC_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002580:	4802      	ldr	r0, [pc, #8]	; (800258c <TIM7_DAC_IRQHandler+0x10>)
 8002582:	f002 f8b9 	bl	80046f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000031c 	.word	0x2000031c

08002590 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002594:	4802      	ldr	r0, [pc, #8]	; (80025a0 <LPUART1_IRQHandler+0x10>)
 8002596:	f003 fb8b 	bl	8005cb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20000448 	.word	0x20000448

080025a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
	return 1;
 80025a8:	2301      	movs	r3, #1
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <_kill>:

int _kill(int pid, int sig)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025be:	f006 fb53 	bl	8008c68 <__errno>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2216      	movs	r2, #22
 80025c6:	601a      	str	r2, [r3, #0]
	return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <_exit>:

void _exit (int status)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025dc:	f04f 31ff 	mov.w	r1, #4294967295
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff ffe7 	bl	80025b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025e6:	e7fe      	b.n	80025e6 <_exit+0x12>

080025e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	e00a      	b.n	8002610 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025fa:	f3af 8000 	nop.w
 80025fe:	4601      	mov	r1, r0
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	1c5a      	adds	r2, r3, #1
 8002604:	60ba      	str	r2, [r7, #8]
 8002606:	b2ca      	uxtb	r2, r1
 8002608:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3301      	adds	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	429a      	cmp	r2, r3
 8002616:	dbf0      	blt.n	80025fa <_read+0x12>
	}

return len;
 8002618:	687b      	ldr	r3, [r7, #4]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e009      	b.n	8002648 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	1c5a      	adds	r2, r3, #1
 8002638:	60ba      	str	r2, [r7, #8]
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	dbf1      	blt.n	8002634 <_write+0x12>
	}
	return len;
 8002650:	687b      	ldr	r3, [r7, #4]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <_close>:

int _close(int file)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
	return -1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002682:	605a      	str	r2, [r3, #4]
	return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <_isatty>:

int _isatty(int file)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	return 1;
 800269a:	2301      	movs	r3, #1
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
	return 0;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026cc:	4a14      	ldr	r2, [pc, #80]	; (8002720 <_sbrk+0x5c>)
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <_sbrk+0x60>)
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026d8:	4b13      	ldr	r3, [pc, #76]	; (8002728 <_sbrk+0x64>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d102      	bne.n	80026e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <_sbrk+0x64>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	; (800272c <_sbrk+0x68>)
 80026e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d207      	bcs.n	8002704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026f4:	f006 fab8 	bl	8008c68 <__errno>
 80026f8:	4603      	mov	r3, r0
 80026fa:	220c      	movs	r2, #12
 80026fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002702:	e009      	b.n	8002718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002704:	4b08      	ldr	r3, [pc, #32]	; (8002728 <_sbrk+0x64>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <_sbrk+0x64>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	4a05      	ldr	r2, [pc, #20]	; (8002728 <_sbrk+0x64>)
 8002714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002716:	68fb      	ldr	r3, [r7, #12]
}
 8002718:	4618      	mov	r0, r3
 800271a:	3718      	adds	r7, #24
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20020000 	.word	0x20020000
 8002724:	00000400 	.word	0x00000400
 8002728:	200005d4 	.word	0x200005d4
 800272c:	200007b8 	.word	0x200007b8

08002730 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <SystemInit+0x20>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <SystemInit+0x20>)
 800273c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002754:	480d      	ldr	r0, [pc, #52]	; (800278c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002756:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002758:	f7ff ffea 	bl	8002730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800275c:	480c      	ldr	r0, [pc, #48]	; (8002790 <LoopForever+0x6>)
  ldr r1, =_edata
 800275e:	490d      	ldr	r1, [pc, #52]	; (8002794 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <LoopForever+0xe>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0a      	ldr	r2, [pc, #40]	; (800279c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002774:	4c0a      	ldr	r4, [pc, #40]	; (80027a0 <LoopForever+0x16>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002782:	f006 fa77 	bl	8008c74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002786:	f7ff fb4d 	bl	8001e24 <main>

0800278a <LoopForever>:

LoopForever:
    b LoopForever
 800278a:	e7fe      	b.n	800278a <LoopForever>
  ldr   r0, =_estack
 800278c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002790:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002794:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002798:	0800b1b4 	.word	0x0800b1b4
  ldr r2, =_sbss
 800279c:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80027a0:	200007b4 	.word	0x200007b4

080027a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027a4:	e7fe      	b.n	80027a4 <ADC1_2_IRQHandler>

080027a6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027b0:	2003      	movs	r0, #3
 80027b2:	f000 f8ca 	bl	800294a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80027b6:	200f      	movs	r0, #15
 80027b8:	f7ff fe54 	bl	8002464 <HAL_InitTick>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	71fb      	strb	r3, [r7, #7]
 80027c6:	e001      	b.n	80027cc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027c8:	f7ff fc20 	bl	800200c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027cc:	79fb      	ldrb	r3, [r7, #7]

}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
	...

080027d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return uwTick;
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_GetTick+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	200005d8 	.word	0x200005d8

080027f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800280c:	4013      	ands	r3, r2
 800280e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800281c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <__NVIC_SetPriorityGrouping+0x44>)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	60d3      	str	r3, [r2, #12]
}
 8002828:	bf00      	nop
 800282a:	3714      	adds	r7, #20
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <__NVIC_GetPriorityGrouping+0x18>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	0a1b      	lsrs	r3, r3, #8
 8002842:	f003 0307 	and.w	r3, r3, #7
}
 8002846:	4618      	mov	r0, r3
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800285e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002862:	2b00      	cmp	r3, #0
 8002864:	db0b      	blt.n	800287e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	f003 021f 	and.w	r2, r3, #31
 800286c:	4907      	ldr	r1, [pc, #28]	; (800288c <__NVIC_EnableIRQ+0x38>)
 800286e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	2001      	movs	r0, #1
 8002876:	fa00 f202 	lsl.w	r2, r0, r2
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	e000e100 	.word	0xe000e100

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	db0a      	blt.n	80028ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	490c      	ldr	r1, [pc, #48]	; (80028dc <__NVIC_SetPriority+0x4c>)
 80028aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	440b      	add	r3, r1
 80028b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b8:	e00a      	b.n	80028d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4908      	ldr	r1, [pc, #32]	; (80028e0 <__NVIC_SetPriority+0x50>)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3b04      	subs	r3, #4
 80028c8:	0112      	lsls	r2, r2, #4
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	440b      	add	r3, r1
 80028ce:	761a      	strb	r2, [r3, #24]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f1c3 0307 	rsb	r3, r3, #7
 80028fe:	2b04      	cmp	r3, #4
 8002900:	bf28      	it	cs
 8002902:	2304      	movcs	r3, #4
 8002904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3304      	adds	r3, #4
 800290a:	2b06      	cmp	r3, #6
 800290c:	d902      	bls.n	8002914 <NVIC_EncodePriority+0x30>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3b03      	subs	r3, #3
 8002912:	e000      	b.n	8002916 <NVIC_EncodePriority+0x32>
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	f04f 32ff 	mov.w	r2, #4294967295
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800292c:	f04f 31ff 	mov.w	r1, #4294967295
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43d9      	mvns	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	4313      	orrs	r3, r2
         );
}
 800293e:	4618      	mov	r0, r3
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff4c 	bl	80027f0 <__NVIC_SetPriorityGrouping>
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800296e:	f7ff ff63 	bl	8002838 <__NVIC_GetPriorityGrouping>
 8002972:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	68b9      	ldr	r1, [r7, #8]
 8002978:	6978      	ldr	r0, [r7, #20]
 800297a:	f7ff ffb3 	bl	80028e4 <NVIC_EncodePriority>
 800297e:	4602      	mov	r2, r0
 8002980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002984:	4611      	mov	r1, r2
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ff82 	bl	8002890 <__NVIC_SetPriority>
}
 800298c:	bf00      	nop
 800298e:	3718      	adds	r7, #24
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff56 	bl	8002854 <__NVIC_EnableIRQ>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d005      	beq.n	80029d4 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2204      	movs	r2, #4
 80029cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	73fb      	strb	r3, [r7, #15]
 80029d2:	e037      	b.n	8002a44 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f022 020e 	bic.w	r2, r2, #14
 80029e2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029f2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a08:	f003 021f 	and.w	r2, r3, #31
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a20:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a38:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a42:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b084      	sub	sp, #16
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d00d      	beq.n	8002a96 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e047      	b.n	8002b26 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 020e 	bic.w	r2, r2, #14
 8002aa4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0201 	bic.w	r2, r2, #1
 8002ab4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ac4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	f003 021f 	and.w	r2, r3, #31
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ae2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00c      	beq.n	8002b06 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002afa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	4798      	blx	r3
    }
  }
  return status;
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b3e:	e15a      	b.n	8002df6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2101      	movs	r1, #1
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 814c 	beq.w	8002df0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 0303 	and.w	r3, r3, #3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d005      	beq.n	8002b70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d130      	bne.n	8002bd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	2203      	movs	r2, #3
 8002b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	4013      	ands	r3, r2
 8002b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	f003 0201 	and.w	r2, r3, #1
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b03      	cmp	r3, #3
 8002bdc:	d017      	beq.n	8002c0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	2203      	movs	r2, #3
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d123      	bne.n	8002c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	08da      	lsrs	r2, r3, #3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3208      	adds	r2, #8
 8002c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	220f      	movs	r2, #15
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43db      	mvns	r3, r3
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	08da      	lsrs	r2, r3, #3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3208      	adds	r2, #8
 8002c5c:	6939      	ldr	r1, [r7, #16]
 8002c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2203      	movs	r2, #3
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0203 	and.w	r2, r3, #3
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 80a6 	beq.w	8002df0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ca4:	4b5b      	ldr	r3, [pc, #364]	; (8002e14 <HAL_GPIO_Init+0x2e4>)
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca8:	4a5a      	ldr	r2, [pc, #360]	; (8002e14 <HAL_GPIO_Init+0x2e4>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6613      	str	r3, [r2, #96]	; 0x60
 8002cb0:	4b58      	ldr	r3, [pc, #352]	; (8002e14 <HAL_GPIO_Init+0x2e4>)
 8002cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cbc:	4a56      	ldr	r2, [pc, #344]	; (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	220f      	movs	r2, #15
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ce6:	d01f      	beq.n	8002d28 <HAL_GPIO_Init+0x1f8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a4c      	ldr	r2, [pc, #304]	; (8002e1c <HAL_GPIO_Init+0x2ec>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d019      	beq.n	8002d24 <HAL_GPIO_Init+0x1f4>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a4b      	ldr	r2, [pc, #300]	; (8002e20 <HAL_GPIO_Init+0x2f0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d013      	beq.n	8002d20 <HAL_GPIO_Init+0x1f0>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a4a      	ldr	r2, [pc, #296]	; (8002e24 <HAL_GPIO_Init+0x2f4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00d      	beq.n	8002d1c <HAL_GPIO_Init+0x1ec>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a49      	ldr	r2, [pc, #292]	; (8002e28 <HAL_GPIO_Init+0x2f8>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d007      	beq.n	8002d18 <HAL_GPIO_Init+0x1e8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a48      	ldr	r2, [pc, #288]	; (8002e2c <HAL_GPIO_Init+0x2fc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d101      	bne.n	8002d14 <HAL_GPIO_Init+0x1e4>
 8002d10:	2305      	movs	r3, #5
 8002d12:	e00a      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d14:	2306      	movs	r3, #6
 8002d16:	e008      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	e006      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e004      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e002      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_GPIO_Init+0x1fa>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	f002 0203 	and.w	r2, r2, #3
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	4093      	lsls	r3, r2
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d3a:	4937      	ldr	r1, [pc, #220]	; (8002e18 <HAL_GPIO_Init+0x2e8>)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d48:	4b39      	ldr	r3, [pc, #228]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4013      	ands	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d6c:	4a30      	ldr	r2, [pc, #192]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d72:	4b2f      	ldr	r3, [pc, #188]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d96:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d9c:	4b24      	ldr	r3, [pc, #144]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4013      	ands	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dc0:	4a1b      	ldr	r2, [pc, #108]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002dc6:	4b1a      	ldr	r3, [pc, #104]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dea:	4a11      	ldr	r2, [pc, #68]	; (8002e30 <HAL_GPIO_Init+0x300>)
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	3301      	adds	r3, #1
 8002df4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f47f ae9d 	bne.w	8002b40 <HAL_GPIO_Init+0x10>
  }
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	371c      	adds	r7, #28
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	40021000 	.word	0x40021000
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	48000400 	.word	0x48000400
 8002e20:	48000800 	.word	0x48000800
 8002e24:	48000c00 	.word	0x48000c00
 8002e28:	48001000 	.word	0x48001000
 8002e2c:	48001400 	.word	0x48001400
 8002e30:	40010400 	.word	0x40010400

08002e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	807b      	strh	r3, [r7, #2]
 8002e40:	4613      	mov	r3, r2
 8002e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e44:	787b      	ldrb	r3, [r7, #1]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e4a:	887a      	ldrh	r2, [r7, #2]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e50:	e002      	b.n	8002e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d141      	bne.n	8002ef6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e72:	4b4b      	ldr	r3, [pc, #300]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7e:	d131      	bne.n	8002ee4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e80:	4b47      	ldr	r3, [pc, #284]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e86:	4a46      	ldr	r2, [pc, #280]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e90:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e98:	4a41      	ldr	r2, [pc, #260]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ea0:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2232      	movs	r2, #50	; 0x32
 8002ea6:	fb02 f303 	mul.w	r3, r2, r3
 8002eaa:	4a3f      	ldr	r2, [pc, #252]	; (8002fa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	0c9b      	lsrs	r3, r3, #18
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eb6:	e002      	b.n	8002ebe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ebe:	4b38      	ldr	r3, [pc, #224]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	695b      	ldr	r3, [r3, #20]
 8002ec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d102      	bne.n	8002ed2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f2      	bne.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ed2:	4b33      	ldr	r3, [pc, #204]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ede:	d158      	bne.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e057      	b.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eea:	4a2d      	ldr	r2, [pc, #180]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ef4:	e04d      	b.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002efc:	d141      	bne.n	8002f82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f0a:	d131      	bne.n	8002f70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f0c:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f12:	4a23      	ldr	r2, [pc, #140]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1c:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f24:	4a1e      	ldr	r2, [pc, #120]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2232      	movs	r2, #50	; 0x32
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	0c9b      	lsrs	r3, r3, #18
 8002f3e:	3301      	adds	r3, #1
 8002f40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f42:	e002      	b.n	8002f4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f4a:	4b15      	ldr	r3, [pc, #84]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d102      	bne.n	8002f5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f2      	bne.n	8002f44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f60:	695b      	ldr	r3, [r3, #20]
 8002f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6a:	d112      	bne.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e011      	b.n	8002f94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f76:	4a0a      	ldr	r2, [pc, #40]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f80:	e007      	b.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3714      	adds	r7, #20
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40007000 	.word	0x40007000
 8002fa4:	20000000 	.word	0x20000000
 8002fa8:	431bde83 	.word	0x431bde83

08002fac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fba:	6093      	str	r3, [r2, #8]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40007000 	.word	0x40007000

08002fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e2fe      	b.n	80035dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d075      	beq.n	80030d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fea:	4b97      	ldr	r3, [pc, #604]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff4:	4b94      	ldr	r3, [pc, #592]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d102      	bne.n	800300a <HAL_RCC_OscConfig+0x3e>
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	2b03      	cmp	r3, #3
 8003008:	d002      	beq.n	8003010 <HAL_RCC_OscConfig+0x44>
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d10b      	bne.n	8003028 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	4b8d      	ldr	r3, [pc, #564]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d05b      	beq.n	80030d4 <HAL_RCC_OscConfig+0x108>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d157      	bne.n	80030d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e2d9      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003030:	d106      	bne.n	8003040 <HAL_RCC_OscConfig+0x74>
 8003032:	4b85      	ldr	r3, [pc, #532]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a84      	ldr	r2, [pc, #528]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	e01d      	b.n	800307c <HAL_RCC_OscConfig+0xb0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003048:	d10c      	bne.n	8003064 <HAL_RCC_OscConfig+0x98>
 800304a:	4b7f      	ldr	r3, [pc, #508]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a7e      	ldr	r2, [pc, #504]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	4b7c      	ldr	r3, [pc, #496]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7b      	ldr	r2, [pc, #492]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e00b      	b.n	800307c <HAL_RCC_OscConfig+0xb0>
 8003064:	4b78      	ldr	r3, [pc, #480]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a77      	ldr	r2, [pc, #476]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800306a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306e:	6013      	str	r3, [r2, #0]
 8003070:	4b75      	ldr	r3, [pc, #468]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a74      	ldr	r2, [pc, #464]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003076:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800307a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d013      	beq.n	80030ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003084:	f7ff fba8 	bl	80027d8 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800308c:	f7ff fba4 	bl	80027d8 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e29e      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309e:	4b6a      	ldr	r3, [pc, #424]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCC_OscConfig+0xc0>
 80030aa:	e014      	b.n	80030d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7ff fb94 	bl	80027d8 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030b2:	e008      	b.n	80030c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b4:	f7ff fb90 	bl	80027d8 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	; 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e28a      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030c6:	4b60      	ldr	r3, [pc, #384]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCC_OscConfig+0xe8>
 80030d2:	e000      	b.n	80030d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d075      	beq.n	80031ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030e2:	4b59      	ldr	r3, [pc, #356]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 030c 	and.w	r3, r3, #12
 80030ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f003 0303 	and.w	r3, r3, #3
 80030f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	2b0c      	cmp	r3, #12
 80030fa:	d102      	bne.n	8003102 <HAL_RCC_OscConfig+0x136>
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d002      	beq.n	8003108 <HAL_RCC_OscConfig+0x13c>
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b04      	cmp	r3, #4
 8003106:	d11f      	bne.n	8003148 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003108:	4b4f      	ldr	r3, [pc, #316]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_RCC_OscConfig+0x154>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e25d      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b49      	ldr	r3, [pc, #292]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	4946      	ldr	r1, [pc, #280]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003134:	4b45      	ldr	r3, [pc, #276]	; (800324c <HAL_RCC_OscConfig+0x280>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff f993 	bl	8002464 <HAL_InitTick>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d043      	beq.n	80031cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e249      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d023      	beq.n	8003198 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003150:	4b3d      	ldr	r3, [pc, #244]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a3c      	ldr	r2, [pc, #240]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7ff fb3c 	bl	80027d8 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003164:	f7ff fb38 	bl	80027d8 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e232      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003176:	4b34      	ldr	r3, [pc, #208]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003182:	4b31      	ldr	r3, [pc, #196]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	061b      	lsls	r3, r3, #24
 8003190:	492d      	ldr	r1, [pc, #180]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
 8003196:	e01a      	b.n	80031ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003198:	4b2b      	ldr	r3, [pc, #172]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800319e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a4:	f7ff fb18 	bl	80027d8 <HAL_GetTick>
 80031a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ac:	f7ff fb14 	bl	80027d8 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e20e      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f0      	bne.n	80031ac <HAL_RCC_OscConfig+0x1e0>
 80031ca:	e000      	b.n	80031ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d041      	beq.n	800325e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d01c      	beq.n	800321c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b19      	ldr	r3, [pc, #100]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e8:	4a17      	ldr	r2, [pc, #92]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f2:	f7ff faf1 	bl	80027d8 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031fa:	f7ff faed 	bl	80027d8 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e1e7      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800320c:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800320e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d0ef      	beq.n	80031fa <HAL_RCC_OscConfig+0x22e>
 800321a:	e020      	b.n	800325e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 800321e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003222:	4a09      	ldr	r2, [pc, #36]	; (8003248 <HAL_RCC_OscConfig+0x27c>)
 8003224:	f023 0301 	bic.w	r3, r3, #1
 8003228:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322c:	f7ff fad4 	bl	80027d8 <HAL_GetTick>
 8003230:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003232:	e00d      	b.n	8003250 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003234:	f7ff fad0 	bl	80027d8 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b02      	cmp	r3, #2
 8003240:	d906      	bls.n	8003250 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e1ca      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
 8003246:	bf00      	nop
 8003248:	40021000 	.word	0x40021000
 800324c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003250:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ea      	bne.n	8003234 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 80a6 	beq.w	80033b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326c:	2300      	movs	r3, #0
 800326e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003270:	4b84      	ldr	r3, [pc, #528]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d101      	bne.n	8003280 <HAL_RCC_OscConfig+0x2b4>
 800327c:	2301      	movs	r3, #1
 800327e:	e000      	b.n	8003282 <HAL_RCC_OscConfig+0x2b6>
 8003280:	2300      	movs	r3, #0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00d      	beq.n	80032a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003286:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328a:	4a7e      	ldr	r2, [pc, #504]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800328c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003290:	6593      	str	r3, [r2, #88]	; 0x58
 8003292:	4b7c      	ldr	r3, [pc, #496]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800329e:	2301      	movs	r3, #1
 80032a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032a2:	4b79      	ldr	r3, [pc, #484]	; (8003488 <HAL_RCC_OscConfig+0x4bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d118      	bne.n	80032e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ae:	4b76      	ldr	r3, [pc, #472]	; (8003488 <HAL_RCC_OscConfig+0x4bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a75      	ldr	r2, [pc, #468]	; (8003488 <HAL_RCC_OscConfig+0x4bc>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ba:	f7ff fa8d 	bl	80027d8 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032c2:	f7ff fa89 	bl	80027d8 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e183      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d4:	4b6c      	ldr	r3, [pc, #432]	; (8003488 <HAL_RCC_OscConfig+0x4bc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d108      	bne.n	80032fa <HAL_RCC_OscConfig+0x32e>
 80032e8:	4b66      	ldr	r3, [pc, #408]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	4a65      	ldr	r2, [pc, #404]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f8:	e024      	b.n	8003344 <HAL_RCC_OscConfig+0x378>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b05      	cmp	r3, #5
 8003300:	d110      	bne.n	8003324 <HAL_RCC_OscConfig+0x358>
 8003302:	4b60      	ldr	r3, [pc, #384]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	4a5e      	ldr	r2, [pc, #376]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800330a:	f043 0304 	orr.w	r3, r3, #4
 800330e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003312:	4b5c      	ldr	r3, [pc, #368]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003318:	4a5a      	ldr	r2, [pc, #360]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003322:	e00f      	b.n	8003344 <HAL_RCC_OscConfig+0x378>
 8003324:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	4a56      	ldr	r2, [pc, #344]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800332c:	f023 0301 	bic.w	r3, r3, #1
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003334:	4b53      	ldr	r3, [pc, #332]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	4a52      	ldr	r2, [pc, #328]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800333c:	f023 0304 	bic.w	r3, r3, #4
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d016      	beq.n	800337a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7ff fa44 	bl	80027d8 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003354:	f7ff fa40 	bl	80027d8 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e138      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800336a:	4b46      	ldr	r3, [pc, #280]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800336c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0ed      	beq.n	8003354 <HAL_RCC_OscConfig+0x388>
 8003378:	e015      	b.n	80033a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7ff fa2d 	bl	80027d8 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7ff fa29 	bl	80027d8 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e121      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003398:	4b3a      	ldr	r3, [pc, #232]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800339a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1ed      	bne.n	8003382 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d105      	bne.n	80033b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033ac:	4b35      	ldr	r3, [pc, #212]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b0:	4a34      	ldr	r2, [pc, #208]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033b6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0320 	and.w	r3, r3, #32
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d03c      	beq.n	800343e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d01c      	beq.n	8003406 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033cc:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033d2:	4a2c      	ldr	r2, [pc, #176]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7ff f9fc 	bl	80027d8 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033e4:	f7ff f9f8 	bl	80027d8 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e0f2      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033f6:	4b23      	ldr	r3, [pc, #140]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 80033f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ef      	beq.n	80033e4 <HAL_RCC_OscConfig+0x418>
 8003404:	e01b      	b.n	800343e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800340c:	4a1d      	ldr	r2, [pc, #116]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800340e:	f023 0301 	bic.w	r3, r3, #1
 8003412:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7ff f9df 	bl	80027d8 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800341e:	f7ff f9db 	bl	80027d8 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e0d5      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003430:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003432:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1ef      	bne.n	800341e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	2b00      	cmp	r3, #0
 8003444:	f000 80c9 	beq.w	80035da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003448:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b0c      	cmp	r3, #12
 8003452:	f000 8083 	beq.w	800355c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d15e      	bne.n	800351c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a08      	ldr	r2, [pc, #32]	; (8003484 <HAL_RCC_OscConfig+0x4b8>)
 8003464:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003468:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346a:	f7ff f9b5 	bl	80027d8 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003470:	e00c      	b.n	800348c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003472:	f7ff f9b1 	bl	80027d8 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d905      	bls.n	800348c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e0ab      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
 8003484:	40021000 	.word	0x40021000
 8003488:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800348c:	4b55      	ldr	r3, [pc, #340]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1ec      	bne.n	8003472 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003498:	4b52      	ldr	r3, [pc, #328]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 800349a:	68da      	ldr	r2, [r3, #12]
 800349c:	4b52      	ldr	r3, [pc, #328]	; (80035e8 <HAL_RCC_OscConfig+0x61c>)
 800349e:	4013      	ands	r3, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6a11      	ldr	r1, [r2, #32]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034a8:	3a01      	subs	r2, #1
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	4311      	orrs	r1, r2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80034b2:	0212      	lsls	r2, r2, #8
 80034b4:	4311      	orrs	r1, r2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034ba:	0852      	lsrs	r2, r2, #1
 80034bc:	3a01      	subs	r2, #1
 80034be:	0552      	lsls	r2, r2, #21
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034c6:	0852      	lsrs	r2, r2, #1
 80034c8:	3a01      	subs	r2, #1
 80034ca:	0652      	lsls	r2, r2, #25
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034d2:	06d2      	lsls	r2, r2, #27
 80034d4:	430a      	orrs	r2, r1
 80034d6:	4943      	ldr	r1, [pc, #268]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034dc:	4b41      	ldr	r3, [pc, #260]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a40      	ldr	r2, [pc, #256]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 80034e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034e8:	4b3e      	ldr	r3, [pc, #248]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a3d      	ldr	r2, [pc, #244]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7ff f970 	bl	80027d8 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7ff f96c 	bl	80027d8 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e066      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800350e:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x530>
 800351a:	e05e      	b.n	80035da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800351c:	4b31      	ldr	r3, [pc, #196]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a30      	ldr	r2, [pc, #192]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 8003522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7ff f956 	bl	80027d8 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003530:	f7ff f952 	bl	80027d8 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e04c      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003542:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f0      	bne.n	8003530 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800354e:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	4924      	ldr	r1, [pc, #144]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 8003554:	4b25      	ldr	r3, [pc, #148]	; (80035ec <HAL_RCC_OscConfig+0x620>)
 8003556:	4013      	ands	r3, r2
 8003558:	60cb      	str	r3, [r1, #12]
 800355a:	e03e      	b.n	80035da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	2b01      	cmp	r3, #1
 8003562:	d101      	bne.n	8003568 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e039      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003568:	4b1e      	ldr	r3, [pc, #120]	; (80035e4 <HAL_RCC_OscConfig+0x618>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 0203 	and.w	r2, r3, #3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	429a      	cmp	r2, r3
 800357a:	d12c      	bne.n	80035d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	3b01      	subs	r3, #1
 8003588:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358a:	429a      	cmp	r2, r3
 800358c:	d123      	bne.n	80035d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800359a:	429a      	cmp	r2, r3
 800359c:	d11b      	bne.n	80035d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d113      	bne.n	80035d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	3b01      	subs	r3, #1
 80035bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035be:	429a      	cmp	r2, r3
 80035c0:	d109      	bne.n	80035d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035cc:	085b      	lsrs	r3, r3, #1
 80035ce:	3b01      	subs	r3, #1
 80035d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d001      	beq.n	80035da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e000      	b.n	80035dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3720      	adds	r7, #32
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	019f800c 	.word	0x019f800c
 80035ec:	feeefffc 	.word	0xfeeefffc

080035f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035fa:	2300      	movs	r3, #0
 80035fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e11e      	b.n	8003846 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003608:	4b91      	ldr	r3, [pc, #580]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 030f 	and.w	r3, r3, #15
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	429a      	cmp	r2, r3
 8003614:	d910      	bls.n	8003638 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003616:	4b8e      	ldr	r3, [pc, #568]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 020f 	bic.w	r2, r3, #15
 800361e:	498c      	ldr	r1, [pc, #560]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b8a      	ldr	r3, [pc, #552]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e106      	b.n	8003846 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d073      	beq.n	800372c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b03      	cmp	r3, #3
 800364a:	d129      	bne.n	80036a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800364c:	4b81      	ldr	r3, [pc, #516]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e0f4      	b.n	8003846 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800365c:	f000 f9d0 	bl	8003a00 <RCC_GetSysClockFreqFromPLLSource>
 8003660:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4a7c      	ldr	r2, [pc, #496]	; (8003858 <HAL_RCC_ClockConfig+0x268>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d93f      	bls.n	80036ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800366a:	4b7a      	ldr	r3, [pc, #488]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800367e:	2b00      	cmp	r3, #0
 8003680:	d033      	beq.n	80036ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003686:	2b00      	cmp	r3, #0
 8003688:	d12f      	bne.n	80036ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800368a:	4b72      	ldr	r3, [pc, #456]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003692:	4a70      	ldr	r2, [pc, #448]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 8003694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003698:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800369a:	2380      	movs	r3, #128	; 0x80
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	e024      	b.n	80036ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a8:	4b6a      	ldr	r3, [pc, #424]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0c6      	b.n	8003846 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036b8:	4b66      	ldr	r3, [pc, #408]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e0be      	b.n	8003846 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036c8:	f000 f8ce 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 80036cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4a61      	ldr	r2, [pc, #388]	; (8003858 <HAL_RCC_ClockConfig+0x268>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d909      	bls.n	80036ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036d6:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036de:	4a5d      	ldr	r2, [pc, #372]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 80036e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036e6:	2380      	movs	r3, #128	; 0x80
 80036e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036ea:	4b5a      	ldr	r3, [pc, #360]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	f023 0203 	bic.w	r2, r3, #3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4957      	ldr	r1, [pc, #348]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036fc:	f7ff f86c 	bl	80027d8 <HAL_GetTick>
 8003700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003702:	e00a      	b.n	800371a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003704:	f7ff f868 	bl	80027d8 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e095      	b.n	8003846 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371a:	4b4e      	ldr	r3, [pc, #312]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 020c 	and.w	r2, r3, #12
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	429a      	cmp	r2, r3
 800372a:	d1eb      	bne.n	8003704 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b00      	cmp	r3, #0
 8003736:	d023      	beq.n	8003780 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003744:	4b43      	ldr	r3, [pc, #268]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	4a42      	ldr	r2, [pc, #264]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 800374a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800374e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0308 	and.w	r3, r3, #8
 8003758:	2b00      	cmp	r3, #0
 800375a:	d007      	beq.n	800376c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800375c:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003764:	4a3b      	ldr	r2, [pc, #236]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 8003766:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800376a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800376c:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4936      	ldr	r1, [pc, #216]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 800377a:	4313      	orrs	r3, r2
 800377c:	608b      	str	r3, [r1, #8]
 800377e:	e008      	b.n	8003792 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d105      	bne.n	8003792 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003786:	4b33      	ldr	r3, [pc, #204]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	4a32      	ldr	r2, [pc, #200]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 800378c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003790:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003792:	4b2f      	ldr	r3, [pc, #188]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	683a      	ldr	r2, [r7, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d21d      	bcs.n	80037dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a0:	4b2b      	ldr	r3, [pc, #172]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f023 020f 	bic.w	r2, r3, #15
 80037a8:	4929      	ldr	r1, [pc, #164]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037b0:	f7ff f812 	bl	80027d8 <HAL_GetTick>
 80037b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b6:	e00a      	b.n	80037ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037b8:	f7ff f80e 	bl	80027d8 <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e03b      	b.n	8003846 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	; (8003850 <HAL_RCC_ClockConfig+0x260>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d1ed      	bne.n	80037b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037e8:	4b1a      	ldr	r3, [pc, #104]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4917      	ldr	r1, [pc, #92]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	2b00      	cmp	r3, #0
 8003804:	d009      	beq.n	800381a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003806:	4b13      	ldr	r3, [pc, #76]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	490f      	ldr	r1, [pc, #60]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800381a:	f000 f825 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 800381e:	4602      	mov	r2, r0
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_RCC_ClockConfig+0x264>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	091b      	lsrs	r3, r3, #4
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	490c      	ldr	r1, [pc, #48]	; (800385c <HAL_RCC_ClockConfig+0x26c>)
 800382c:	5ccb      	ldrb	r3, [r1, r3]
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_RCC_ClockConfig+0x270>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x274>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fe10 	bl	8002464 <HAL_InitTick>
 8003844:	4603      	mov	r3, r0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40022000 	.word	0x40022000
 8003854:	40021000 	.word	0x40021000
 8003858:	04c4b400 	.word	0x04c4b400
 800385c:	0800adf4 	.word	0x0800adf4
 8003860:	20000000 	.word	0x20000000
 8003864:	20000004 	.word	0x20000004

08003868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800386e:	4b2c      	ldr	r3, [pc, #176]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	2b04      	cmp	r3, #4
 8003878:	d102      	bne.n	8003880 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800387a:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <HAL_RCC_GetSysClockFreq+0xbc>)
 800387c:	613b      	str	r3, [r7, #16]
 800387e:	e047      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003880:	4b27      	ldr	r3, [pc, #156]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 030c 	and.w	r3, r3, #12
 8003888:	2b08      	cmp	r3, #8
 800388a:	d102      	bne.n	8003892 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800388c:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_RCC_GetSysClockFreq+0xc0>)
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	e03e      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003892:	4b23      	ldr	r3, [pc, #140]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b0c      	cmp	r3, #12
 800389c:	d136      	bne.n	800390c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800389e:	4b20      	ldr	r3, [pc, #128]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038a8:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	3301      	adds	r3, #1
 80038b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038bc:	4a1a      	ldr	r2, [pc, #104]	; (8003928 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c4:	4a16      	ldr	r2, [pc, #88]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038c6:	68d2      	ldr	r2, [r2, #12]
 80038c8:	0a12      	lsrs	r2, r2, #8
 80038ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038ce:	fb02 f303 	mul.w	r3, r2, r3
 80038d2:	617b      	str	r3, [r7, #20]
      break;
 80038d4:	e00c      	b.n	80038f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038d6:	4a13      	ldr	r2, [pc, #76]	; (8003924 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	fbb2 f3f3 	udiv	r3, r2, r3
 80038de:	4a10      	ldr	r2, [pc, #64]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	0a12      	lsrs	r2, r2, #8
 80038e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038e8:	fb02 f303 	mul.w	r3, r2, r3
 80038ec:	617b      	str	r3, [r7, #20]
      break;
 80038ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	0e5b      	lsrs	r3, r3, #25
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	3301      	adds	r3, #1
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	613b      	str	r3, [r7, #16]
 800390a:	e001      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003910:	693b      	ldr	r3, [r7, #16]
}
 8003912:	4618      	mov	r0, r3
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	40021000 	.word	0x40021000
 8003924:	00f42400 	.word	0x00f42400
 8003928:	016e3600 	.word	0x016e3600

0800392c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003930:	4b03      	ldr	r3, [pc, #12]	; (8003940 <HAL_RCC_GetHCLKFreq+0x14>)
 8003932:	681b      	ldr	r3, [r3, #0]
}
 8003934:	4618      	mov	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20000000 	.word	0x20000000

08003944 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003948:	f7ff fff0 	bl	800392c <HAL_RCC_GetHCLKFreq>
 800394c:	4602      	mov	r2, r0
 800394e:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	4904      	ldr	r1, [pc, #16]	; (800396c <HAL_RCC_GetPCLK1Freq+0x28>)
 800395a:	5ccb      	ldrb	r3, [r1, r3]
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	0800ae04 	.word	0x0800ae04

08003970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003974:	f7ff ffda 	bl	800392c <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_GetPCLK2Freq+0x24>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	0adb      	lsrs	r3, r3, #11
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4904      	ldr	r1, [pc, #16]	; (8003998 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000
 8003998:	0800ae04 	.word	0x0800ae04

0800399c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	220f      	movs	r2, #15
 80039aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80039ac:	4b12      	ldr	r3, [pc, #72]	; (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 0203 	and.w	r2, r3, #3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80039b8:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80039c4:	4b0c      	ldr	r3, [pc, #48]	; (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <HAL_RCC_GetClockConfig+0x5c>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	08db      	lsrs	r3, r3, #3
 80039d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80039de:	4b07      	ldr	r3, [pc, #28]	; (80039fc <HAL_RCC_GetClockConfig+0x60>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 020f 	and.w	r2, r3, #15
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	601a      	str	r2, [r3, #0]
}
 80039ea:	bf00      	nop
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40022000 	.word	0x40022000

08003a00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b087      	sub	sp, #28
 8003a04:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a06:	4b1e      	ldr	r3, [pc, #120]	; (8003a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	f003 0303 	and.w	r3, r3, #3
 8003a0e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a10:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d10c      	bne.n	8003a3e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a24:	4a17      	ldr	r2, [pc, #92]	; (8003a84 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2c:	4a14      	ldr	r2, [pc, #80]	; (8003a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a2e:	68d2      	ldr	r2, [r2, #12]
 8003a30:	0a12      	lsrs	r2, r2, #8
 8003a32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a36:	fb02 f303 	mul.w	r3, r2, r3
 8003a3a:	617b      	str	r3, [r7, #20]
    break;
 8003a3c:	e00c      	b.n	8003a58 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a46:	4a0e      	ldr	r2, [pc, #56]	; (8003a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a48:	68d2      	ldr	r2, [r2, #12]
 8003a4a:	0a12      	lsrs	r2, r2, #8
 8003a4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	617b      	str	r3, [r7, #20]
    break;
 8003a56:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	0e5b      	lsrs	r3, r3, #25
 8003a5e:	f003 0303 	and.w	r3, r3, #3
 8003a62:	3301      	adds	r3, #1
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a72:	687b      	ldr	r3, [r7, #4]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40021000 	.word	0x40021000
 8003a84:	016e3600 	.word	0x016e3600
 8003a88:	00f42400 	.word	0x00f42400

08003a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a94:	2300      	movs	r3, #0
 8003a96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a98:	2300      	movs	r3, #0
 8003a9a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 8098 	beq.w	8003bda <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aae:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10d      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4b40      	ldr	r3, [pc, #256]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	4a3f      	ldr	r2, [pc, #252]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac6:	4b3d      	ldr	r3, [pc, #244]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ad6:	4b3a      	ldr	r3, [pc, #232]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a39      	ldr	r2, [pc, #228]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ae2:	f7fe fe79 	bl	80027d8 <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ae8:	e009      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fe fe75 	bl	80027d8 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d902      	bls.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	74fb      	strb	r3, [r7, #19]
        break;
 8003afc:	e005      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003afe:	4b30      	ldr	r3, [pc, #192]	; (8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0ef      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b0a:	7cfb      	ldrb	r3, [r7, #19]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d159      	bne.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b10:	4b2a      	ldr	r3, [pc, #168]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b1a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d01e      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d019      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b2c:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b38:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	4a1f      	ldr	r2, [pc, #124]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b48:	4b1c      	ldr	r3, [pc, #112]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4e:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b58:	4a18      	ldr	r2, [pc, #96]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fe35 	bl	80027d8 <HAL_GetTick>
 8003b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b70:	e00b      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b72:	f7fe fe31 	bl	80027d8 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d902      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	74fb      	strb	r3, [r7, #19]
            break;
 8003b88:	e006      	b.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0ec      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b98:	7cfb      	ldrb	r3, [r7, #19]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bac:	4903      	ldr	r1, [pc, #12]	; (8003bbc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bb6:	7cfb      	ldrb	r3, [r7, #19]
 8003bb8:	74bb      	strb	r3, [r7, #18]
 8003bba:	e005      	b.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc4:	7cfb      	ldrb	r3, [r7, #19]
 8003bc6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bc8:	7c7b      	ldrb	r3, [r7, #17]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d105      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bce:	4ba7      	ldr	r3, [pc, #668]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	4aa6      	ldr	r2, [pc, #664]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bd8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d00a      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003be6:	4ba1      	ldr	r3, [pc, #644]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bec:	f023 0203 	bic.w	r2, r3, #3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	499d      	ldr	r1, [pc, #628]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00a      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c08:	4b98      	ldr	r3, [pc, #608]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0e:	f023 020c 	bic.w	r2, r3, #12
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4995      	ldr	r1, [pc, #596]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c2a:	4b90      	ldr	r3, [pc, #576]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c30:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	498c      	ldr	r1, [pc, #560]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0308 	and.w	r3, r3, #8
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00a      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c4c:	4b87      	ldr	r3, [pc, #540]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c52:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4984      	ldr	r1, [pc, #528]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00a      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c6e:	4b7f      	ldr	r3, [pc, #508]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	497b      	ldr	r1, [pc, #492]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d00a      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c90:	4b76      	ldr	r3, [pc, #472]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	4973      	ldr	r1, [pc, #460]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cb2:	4b6e      	ldr	r3, [pc, #440]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	496a      	ldr	r1, [pc, #424]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cd4:	4b65      	ldr	r3, [pc, #404]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cda:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4962      	ldr	r1, [pc, #392]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cf6:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	4959      	ldr	r1, [pc, #356]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d18:	4b54      	ldr	r3, [pc, #336]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d1e:	f023 0203 	bic.w	r2, r3, #3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	4951      	ldr	r1, [pc, #324]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	4948      	ldr	r1, [pc, #288]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d015      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d5c:	4b43      	ldr	r3, [pc, #268]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4940      	ldr	r1, [pc, #256]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d7a:	d105      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7c:	4b3b      	ldr	r3, [pc, #236]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4a3a      	ldr	r2, [pc, #232]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d94:	4b35      	ldr	r3, [pc, #212]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da2:	4932      	ldr	r1, [pc, #200]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db4:	4b2d      	ldr	r3, [pc, #180]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a2c      	ldr	r2, [pc, #176]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dbe:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d015      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003dcc:	4b27      	ldr	r3, [pc, #156]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dda:	4924      	ldr	r1, [pc, #144]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dea:	d105      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dec:	4b1f      	ldr	r3, [pc, #124]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a1e      	ldr	r2, [pc, #120]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003df6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e04:	4b19      	ldr	r3, [pc, #100]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e12:	4916      	ldr	r1, [pc, #88]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a10      	ldr	r2, [pc, #64]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e2e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d019      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e3c:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4908      	ldr	r1, [pc, #32]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e5a:	d109      	bne.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5c:	4b03      	ldr	r3, [pc, #12]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a02      	ldr	r2, [pc, #8]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e66:	60d3      	str	r3, [r2, #12]
 8003e68:	e002      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d015      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e7c:	4b29      	ldr	r3, [pc, #164]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8a:	4926      	ldr	r1, [pc, #152]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e9c:	4b21      	ldr	r3, [pc, #132]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	4a20      	ldr	r2, [pc, #128]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ea6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec2:	4918      	ldr	r1, [pc, #96]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ed4:	4b13      	ldr	r3, [pc, #76]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a12      	ldr	r2, [pc, #72]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ede:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d015      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003eec:	4b0d      	ldr	r3, [pc, #52]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003efa:	490a      	ldr	r1, [pc, #40]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f0c:	4b05      	ldr	r3, [pc, #20]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f16:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f18:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	40021000 	.word	0x40021000

08003f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e049      	b.n	8003fce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fe f920 	bl	8002194 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	4619      	mov	r1, r3
 8003f66:	4610      	mov	r0, r2
 8003f68:	f000 ff68 	bl	8004e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d001      	beq.n	8003ff0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e04c      	b.n	800408a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a26      	ldr	r2, [pc, #152]	; (8004098 <HAL_TIM_Base_Start+0xc0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d022      	beq.n	8004048 <HAL_TIM_Base_Start+0x70>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800400a:	d01d      	beq.n	8004048 <HAL_TIM_Base_Start+0x70>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a22      	ldr	r2, [pc, #136]	; (800409c <HAL_TIM_Base_Start+0xc4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d018      	beq.n	8004048 <HAL_TIM_Base_Start+0x70>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a21      	ldr	r2, [pc, #132]	; (80040a0 <HAL_TIM_Base_Start+0xc8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d013      	beq.n	8004048 <HAL_TIM_Base_Start+0x70>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1f      	ldr	r2, [pc, #124]	; (80040a4 <HAL_TIM_Base_Start+0xcc>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_TIM_Base_Start+0x70>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1e      	ldr	r2, [pc, #120]	; (80040a8 <HAL_TIM_Base_Start+0xd0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d009      	beq.n	8004048 <HAL_TIM_Base_Start+0x70>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <HAL_TIM_Base_Start+0xd4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_Base_Start+0x70>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a1b      	ldr	r2, [pc, #108]	; (80040b0 <HAL_TIM_Base_Start+0xd8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d115      	bne.n	8004074 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	4b19      	ldr	r3, [pc, #100]	; (80040b4 <HAL_TIM_Base_Start+0xdc>)
 8004050:	4013      	ands	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d015      	beq.n	8004086 <HAL_TIM_Base_Start+0xae>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004060:	d011      	beq.n	8004086 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004072:	e008      	b.n	8004086 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0201 	orr.w	r2, r2, #1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	e000      	b.n	8004088 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004086:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40012c00 	.word	0x40012c00
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40013400 	.word	0x40013400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40015000 	.word	0x40015000
 80040b4:	00010007 	.word	0x00010007

080040b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d001      	beq.n	80040d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e054      	b.n	800417a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a26      	ldr	r2, [pc, #152]	; (8004188 <HAL_TIM_Base_Start_IT+0xd0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d022      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040fa:	d01d      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <HAL_TIM_Base_Start_IT+0xd4>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d018      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a21      	ldr	r2, [pc, #132]	; (8004190 <HAL_TIM_Base_Start_IT+0xd8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d013      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <HAL_TIM_Base_Start_IT+0xdc>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d00e      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1e      	ldr	r2, [pc, #120]	; (8004198 <HAL_TIM_Base_Start_IT+0xe0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d009      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1c      	ldr	r2, [pc, #112]	; (800419c <HAL_TIM_Base_Start_IT+0xe4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_TIM_Base_Start_IT+0x80>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d115      	bne.n	8004164 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <HAL_TIM_Base_Start_IT+0xec>)
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b06      	cmp	r3, #6
 8004148:	d015      	beq.n	8004176 <HAL_TIM_Base_Start_IT+0xbe>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004150:	d011      	beq.n	8004176 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f042 0201 	orr.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004162:	e008      	b.n	8004176 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	e000      	b.n	8004178 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004176:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800
 8004194:	40000c00 	.word	0x40000c00
 8004198:	40013400 	.word	0x40013400
 800419c:	40014000 	.word	0x40014000
 80041a0:	40015000 	.word	0x40015000
 80041a4:	00010007 	.word	0x00010007

080041a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e049      	b.n	800424e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d106      	bne.n	80041d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f000 f841 	bl	8004256 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	4619      	mov	r1, r3
 80041e6:	4610      	mov	r0, r2
 80041e8:	f000 fe28 	bl	8004e3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
	...

0800426c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d109      	bne.n	8004290 <HAL_TIM_PWM_Start+0x24>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b01      	cmp	r3, #1
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	e03c      	b.n	800430a <HAL_TIM_PWM_Start+0x9e>
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	2b04      	cmp	r3, #4
 8004294:	d109      	bne.n	80042aa <HAL_TIM_PWM_Start+0x3e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	bf14      	ite	ne
 80042a2:	2301      	movne	r3, #1
 80042a4:	2300      	moveq	r3, #0
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	e02f      	b.n	800430a <HAL_TIM_PWM_Start+0x9e>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d109      	bne.n	80042c4 <HAL_TIM_PWM_Start+0x58>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	bf14      	ite	ne
 80042bc:	2301      	movne	r3, #1
 80042be:	2300      	moveq	r3, #0
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	e022      	b.n	800430a <HAL_TIM_PWM_Start+0x9e>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d109      	bne.n	80042de <HAL_TIM_PWM_Start+0x72>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	bf14      	ite	ne
 80042d6:	2301      	movne	r3, #1
 80042d8:	2300      	moveq	r3, #0
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	e015      	b.n	800430a <HAL_TIM_PWM_Start+0x9e>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d109      	bne.n	80042f8 <HAL_TIM_PWM_Start+0x8c>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	bf14      	ite	ne
 80042f0:	2301      	movne	r3, #1
 80042f2:	2300      	moveq	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	e008      	b.n	800430a <HAL_TIM_PWM_Start+0x9e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	bf14      	ite	ne
 8004304:	2301      	movne	r3, #1
 8004306:	2300      	moveq	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	d001      	beq.n	8004312 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e0a6      	b.n	8004460 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d104      	bne.n	8004322 <HAL_TIM_PWM_Start+0xb6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004320:	e023      	b.n	800436a <HAL_TIM_PWM_Start+0xfe>
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	2b04      	cmp	r3, #4
 8004326:	d104      	bne.n	8004332 <HAL_TIM_PWM_Start+0xc6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004330:	e01b      	b.n	800436a <HAL_TIM_PWM_Start+0xfe>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b08      	cmp	r3, #8
 8004336:	d104      	bne.n	8004342 <HAL_TIM_PWM_Start+0xd6>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004340:	e013      	b.n	800436a <HAL_TIM_PWM_Start+0xfe>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b0c      	cmp	r3, #12
 8004346:	d104      	bne.n	8004352 <HAL_TIM_PWM_Start+0xe6>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004350:	e00b      	b.n	800436a <HAL_TIM_PWM_Start+0xfe>
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b10      	cmp	r3, #16
 8004356:	d104      	bne.n	8004362 <HAL_TIM_PWM_Start+0xf6>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004360:	e003      	b.n	800436a <HAL_TIM_PWM_Start+0xfe>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2201      	movs	r2, #1
 8004370:	6839      	ldr	r1, [r7, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f001 f9dc 	bl	8005730 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a3a      	ldr	r2, [pc, #232]	; (8004468 <HAL_TIM_PWM_Start+0x1fc>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d018      	beq.n	80043b4 <HAL_TIM_PWM_Start+0x148>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a39      	ldr	r2, [pc, #228]	; (800446c <HAL_TIM_PWM_Start+0x200>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d013      	beq.n	80043b4 <HAL_TIM_PWM_Start+0x148>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a37      	ldr	r2, [pc, #220]	; (8004470 <HAL_TIM_PWM_Start+0x204>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00e      	beq.n	80043b4 <HAL_TIM_PWM_Start+0x148>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a36      	ldr	r2, [pc, #216]	; (8004474 <HAL_TIM_PWM_Start+0x208>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d009      	beq.n	80043b4 <HAL_TIM_PWM_Start+0x148>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a34      	ldr	r2, [pc, #208]	; (8004478 <HAL_TIM_PWM_Start+0x20c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_TIM_PWM_Start+0x148>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a33      	ldr	r2, [pc, #204]	; (800447c <HAL_TIM_PWM_Start+0x210>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d101      	bne.n	80043b8 <HAL_TIM_PWM_Start+0x14c>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_TIM_PWM_Start+0x14e>
 80043b8:	2300      	movs	r3, #0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a25      	ldr	r2, [pc, #148]	; (8004468 <HAL_TIM_PWM_Start+0x1fc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d022      	beq.n	800441e <HAL_TIM_PWM_Start+0x1b2>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043e0:	d01d      	beq.n	800441e <HAL_TIM_PWM_Start+0x1b2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a26      	ldr	r2, [pc, #152]	; (8004480 <HAL_TIM_PWM_Start+0x214>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d018      	beq.n	800441e <HAL_TIM_PWM_Start+0x1b2>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a24      	ldr	r2, [pc, #144]	; (8004484 <HAL_TIM_PWM_Start+0x218>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d013      	beq.n	800441e <HAL_TIM_PWM_Start+0x1b2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a23      	ldr	r2, [pc, #140]	; (8004488 <HAL_TIM_PWM_Start+0x21c>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00e      	beq.n	800441e <HAL_TIM_PWM_Start+0x1b2>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <HAL_TIM_PWM_Start+0x200>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d009      	beq.n	800441e <HAL_TIM_PWM_Start+0x1b2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a18      	ldr	r2, [pc, #96]	; (8004470 <HAL_TIM_PWM_Start+0x204>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d004      	beq.n	800441e <HAL_TIM_PWM_Start+0x1b2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a18      	ldr	r2, [pc, #96]	; (800447c <HAL_TIM_PWM_Start+0x210>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d115      	bne.n	800444a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	4b19      	ldr	r3, [pc, #100]	; (800448c <HAL_TIM_PWM_Start+0x220>)
 8004426:	4013      	ands	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2b06      	cmp	r3, #6
 800442e:	d015      	beq.n	800445c <HAL_TIM_PWM_Start+0x1f0>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004436:	d011      	beq.n	800445c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f042 0201 	orr.w	r2, r2, #1
 8004446:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004448:	e008      	b.n	800445c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f042 0201 	orr.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	e000      	b.n	800445e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800445c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	40012c00 	.word	0x40012c00
 800446c:	40013400 	.word	0x40013400
 8004470:	40014000 	.word	0x40014000
 8004474:	40014400 	.word	0x40014400
 8004478:	40014800 	.word	0x40014800
 800447c:	40015000 	.word	0x40015000
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	00010007 	.word	0x00010007

08004490 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b086      	sub	sp, #24
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e097      	b.n	80045d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fd fea5 	bl	8002208 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2202      	movs	r2, #2
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6812      	ldr	r2, [r2, #0]
 80044d0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80044d4:	f023 0307 	bic.w	r3, r3, #7
 80044d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4619      	mov	r1, r3
 80044e4:	4610      	mov	r0, r2
 80044e6:	f000 fca9 	bl	8004e3c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004512:	f023 0303 	bic.w	r3, r3, #3
 8004516:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	4313      	orrs	r3, r2
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004530:	f023 030c 	bic.w	r3, r3, #12
 8004534:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800453c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004540:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	4313      	orrs	r3, r2
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	011a      	lsls	r2, r3, #4
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	031b      	lsls	r3, r3, #12
 8004560:	4313      	orrs	r3, r2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800456e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	4313      	orrs	r3, r2
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045ec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045f4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004604:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d110      	bne.n	800462e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800460c:	7bfb      	ldrb	r3, [r7, #15]
 800460e:	2b01      	cmp	r3, #1
 8004610:	d102      	bne.n	8004618 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004612:	7b7b      	ldrb	r3, [r7, #13]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d001      	beq.n	800461c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e069      	b.n	80046f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800462c:	e031      	b.n	8004692 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b04      	cmp	r3, #4
 8004632:	d110      	bne.n	8004656 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004634:	7bbb      	ldrb	r3, [r7, #14]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d102      	bne.n	8004640 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800463a:	7b3b      	ldrb	r3, [r7, #12]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d001      	beq.n	8004644 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	e055      	b.n	80046f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2202      	movs	r2, #2
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004654:	e01d      	b.n	8004692 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d108      	bne.n	800466e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800465c:	7bbb      	ldrb	r3, [r7, #14]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d105      	bne.n	800466e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004662:	7b7b      	ldrb	r3, [r7, #13]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d102      	bne.n	800466e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004668:	7b3b      	ldrb	r3, [r7, #12]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d001      	beq.n	8004672 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e03e      	b.n	80046f0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <HAL_TIM_Encoder_Start+0xc4>
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b04      	cmp	r3, #4
 800469c:	d008      	beq.n	80046b0 <HAL_TIM_Encoder_Start+0xd4>
 800469e:	e00f      	b.n	80046c0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2201      	movs	r2, #1
 80046a6:	2100      	movs	r1, #0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f841 	bl	8005730 <TIM_CCxChannelCmd>
      break;
 80046ae:	e016      	b.n	80046de <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2201      	movs	r2, #1
 80046b6:	2104      	movs	r1, #4
 80046b8:	4618      	mov	r0, r3
 80046ba:	f001 f839 	bl	8005730 <TIM_CCxChannelCmd>
      break;
 80046be:	e00e      	b.n	80046de <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2201      	movs	r2, #1
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f001 f831 	bl	8005730 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	2104      	movs	r1, #4
 80046d6:	4618      	mov	r0, r3
 80046d8:	f001 f82a 	bl	8005730 <TIM_CCxChannelCmd>
      break;
 80046dc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	2b00      	cmp	r3, #0
 8004718:	d020      	beq.n	800475c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d01b      	beq.n	800475c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0202 	mvn.w	r2, #2
 800472c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2201      	movs	r2, #1
 8004732:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fb5c 	bl	8004e00 <HAL_TIM_IC_CaptureCallback>
 8004748:	e005      	b.n	8004756 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 fb4e 	bl	8004dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f000 fb5f 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 0304 	and.w	r3, r3, #4
 8004762:	2b00      	cmp	r3, #0
 8004764:	d020      	beq.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01b      	beq.n	80047a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0204 	mvn.w	r2, #4
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fb36 	bl	8004e00 <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fb28 	bl	8004dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fb39 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0308 	and.w	r3, r3, #8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d020      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0208 	mvn.w	r2, #8
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2204      	movs	r2, #4
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 fb10 	bl	8004e00 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 fb02 	bl	8004dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fb13 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d020      	beq.n	8004840 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01b      	beq.n	8004840 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0210 	mvn.w	r2, #16
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2208      	movs	r2, #8
 8004816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 faea 	bl	8004e00 <HAL_TIM_IC_CaptureCallback>
 800482c:	e005      	b.n	800483a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fadc 	bl	8004dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 faed 	bl	8004e14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00c      	beq.n	8004864 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d007      	beq.n	8004864 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0201 	mvn.w	r2, #1
 800485c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fd fba6 	bl	8001fb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486a:	2b00      	cmp	r3, #0
 800486c:	d104      	bne.n	8004878 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004874:	2b00      	cmp	r3, #0
 8004876:	d00c      	beq.n	8004892 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800488a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f001 f8a9 	bl	80059e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00c      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f001 f8a1 	bl	80059f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00c      	beq.n	80048da <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 faa7 	bl	8004e28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	f003 0320 	and.w	r3, r3, #32
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00c      	beq.n	80048fe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 0320 	and.w	r3, r3, #32
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d007      	beq.n	80048fe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f06f 0220 	mvn.w	r2, #32
 80048f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f001 f869 	bl	80059d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00c      	beq.n	8004922 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800491a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f001 f875 	bl	8005a0c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00c      	beq.n	8004946 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d007      	beq.n	8004946 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800493e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f001 f86d 	bl	8005a20 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004962:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f001 f865 	bl	8005a34 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00c      	beq.n	800498e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f001 f85d 	bl	8005a48 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800498e:	bf00      	nop
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d101      	bne.n	80049b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049b2:	2302      	movs	r3, #2
 80049b4:	e0ff      	b.n	8004bb6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2201      	movs	r2, #1
 80049ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2b14      	cmp	r3, #20
 80049c2:	f200 80f0 	bhi.w	8004ba6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	08004a21 	.word	0x08004a21
 80049d0:	08004ba7 	.word	0x08004ba7
 80049d4:	08004ba7 	.word	0x08004ba7
 80049d8:	08004ba7 	.word	0x08004ba7
 80049dc:	08004a61 	.word	0x08004a61
 80049e0:	08004ba7 	.word	0x08004ba7
 80049e4:	08004ba7 	.word	0x08004ba7
 80049e8:	08004ba7 	.word	0x08004ba7
 80049ec:	08004aa3 	.word	0x08004aa3
 80049f0:	08004ba7 	.word	0x08004ba7
 80049f4:	08004ba7 	.word	0x08004ba7
 80049f8:	08004ba7 	.word	0x08004ba7
 80049fc:	08004ae3 	.word	0x08004ae3
 8004a00:	08004ba7 	.word	0x08004ba7
 8004a04:	08004ba7 	.word	0x08004ba7
 8004a08:	08004ba7 	.word	0x08004ba7
 8004a0c:	08004b25 	.word	0x08004b25
 8004a10:	08004ba7 	.word	0x08004ba7
 8004a14:	08004ba7 	.word	0x08004ba7
 8004a18:	08004ba7 	.word	0x08004ba7
 8004a1c:	08004b65 	.word	0x08004b65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fabc 	bl	8004fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0208 	orr.w	r2, r2, #8
 8004a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f022 0204 	bic.w	r2, r2, #4
 8004a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6999      	ldr	r1, [r3, #24]
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	619a      	str	r2, [r3, #24]
      break;
 8004a5e:	e0a5      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fb36 	bl	80050d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6999      	ldr	r1, [r3, #24]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	021a      	lsls	r2, r3, #8
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	619a      	str	r2, [r3, #24]
      break;
 8004aa0:	e084      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fba9 	bl	8005200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69da      	ldr	r2, [r3, #28]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f042 0208 	orr.w	r2, r2, #8
 8004abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0204 	bic.w	r2, r2, #4
 8004acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69d9      	ldr	r1, [r3, #28]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	61da      	str	r2, [r3, #28]
      break;
 8004ae0:	e064      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fc1b 	bl	8005324 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69d9      	ldr	r1, [r3, #28]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	021a      	lsls	r2, r3, #8
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	61da      	str	r2, [r3, #28]
      break;
 8004b22:	e043      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fc8e 	bl	800544c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f042 0208 	orr.w	r2, r2, #8
 8004b3e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 0204 	bic.w	r2, r2, #4
 8004b4e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	691a      	ldr	r2, [r3, #16]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004b62:	e023      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68b9      	ldr	r1, [r7, #8]
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f000 fcd8 	bl	8005520 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b7e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b8e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	021a      	lsls	r2, r3, #8
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ba4:	e002      	b.n	8004bac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8004baa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop

08004bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_TIM_ConfigClockSource+0x1c>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e0f6      	b.n	8004dca <HAL_TIM_ConfigClockSource+0x20a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a6f      	ldr	r2, [pc, #444]	; (8004dd4 <HAL_TIM_ConfigClockSource+0x214>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	f000 80c1 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004c1c:	4a6d      	ldr	r2, [pc, #436]	; (8004dd4 <HAL_TIM_ConfigClockSource+0x214>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	f200 80c6 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c24:	4a6c      	ldr	r2, [pc, #432]	; (8004dd8 <HAL_TIM_ConfigClockSource+0x218>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	f000 80b9 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004c2c:	4a6a      	ldr	r2, [pc, #424]	; (8004dd8 <HAL_TIM_ConfigClockSource+0x218>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	f200 80be 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c34:	4a69      	ldr	r2, [pc, #420]	; (8004ddc <HAL_TIM_ConfigClockSource+0x21c>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	f000 80b1 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004c3c:	4a67      	ldr	r2, [pc, #412]	; (8004ddc <HAL_TIM_ConfigClockSource+0x21c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	f200 80b6 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c44:	4a66      	ldr	r2, [pc, #408]	; (8004de0 <HAL_TIM_ConfigClockSource+0x220>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	f000 80a9 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004c4c:	4a64      	ldr	r2, [pc, #400]	; (8004de0 <HAL_TIM_ConfigClockSource+0x220>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	f200 80ae 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c54:	4a63      	ldr	r2, [pc, #396]	; (8004de4 <HAL_TIM_ConfigClockSource+0x224>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	f000 80a1 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004c5c:	4a61      	ldr	r2, [pc, #388]	; (8004de4 <HAL_TIM_ConfigClockSource+0x224>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	f200 80a6 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c64:	4a60      	ldr	r2, [pc, #384]	; (8004de8 <HAL_TIM_ConfigClockSource+0x228>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	f000 8099 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004c6c:	4a5e      	ldr	r2, [pc, #376]	; (8004de8 <HAL_TIM_ConfigClockSource+0x228>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	f200 809e 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c78:	f000 8091 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004c7c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004c80:	f200 8096 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c88:	f000 8089 	beq.w	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c90:	f200 808e 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004c94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c98:	d03e      	beq.n	8004d18 <HAL_TIM_ConfigClockSource+0x158>
 8004c9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c9e:	f200 8087 	bhi.w	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	f000 8086 	beq.w	8004db6 <HAL_TIM_ConfigClockSource+0x1f6>
 8004caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cae:	d87f      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cb0:	2b70      	cmp	r3, #112	; 0x70
 8004cb2:	d01a      	beq.n	8004cea <HAL_TIM_ConfigClockSource+0x12a>
 8004cb4:	2b70      	cmp	r3, #112	; 0x70
 8004cb6:	d87b      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cb8:	2b60      	cmp	r3, #96	; 0x60
 8004cba:	d050      	beq.n	8004d5e <HAL_TIM_ConfigClockSource+0x19e>
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d877      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cc0:	2b50      	cmp	r3, #80	; 0x50
 8004cc2:	d03c      	beq.n	8004d3e <HAL_TIM_ConfigClockSource+0x17e>
 8004cc4:	2b50      	cmp	r3, #80	; 0x50
 8004cc6:	d873      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cc8:	2b40      	cmp	r3, #64	; 0x40
 8004cca:	d058      	beq.n	8004d7e <HAL_TIM_ConfigClockSource+0x1be>
 8004ccc:	2b40      	cmp	r3, #64	; 0x40
 8004cce:	d86f      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cd0:	2b30      	cmp	r3, #48	; 0x30
 8004cd2:	d064      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004cd4:	2b30      	cmp	r3, #48	; 0x30
 8004cd6:	d86b      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004cd8:	2b20      	cmp	r3, #32
 8004cda:	d060      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d867      	bhi.n	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d05c      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d05a      	beq.n	8004d9e <HAL_TIM_ConfigClockSource+0x1de>
 8004ce8:	e062      	b.n	8004db0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cfa:	f000 fcf9 	bl	80056f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	609a      	str	r2, [r3, #8]
      break;
 8004d16:	e04f      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	f000 fce2 	bl	80056f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689a      	ldr	r2, [r3, #8]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d3a:	609a      	str	r2, [r3, #8]
      break;
 8004d3c:	e03c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	f000 fc54 	bl	80055f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2150      	movs	r1, #80	; 0x50
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fcad 	bl	80056b6 <TIM_ITRx_SetConfig>
      break;
 8004d5c:	e02c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f000 fc73 	bl	8005656 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2160      	movs	r1, #96	; 0x60
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 fc9d 	bl	80056b6 <TIM_ITRx_SetConfig>
      break;
 8004d7c:	e01c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f000 fc34 	bl	80055f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2140      	movs	r1, #64	; 0x40
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fc8d 	bl	80056b6 <TIM_ITRx_SetConfig>
      break;
 8004d9c:	e00c      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4619      	mov	r1, r3
 8004da8:	4610      	mov	r0, r2
 8004daa:	f000 fc84 	bl	80056b6 <TIM_ITRx_SetConfig>
      break;
 8004dae:	e003      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	73fb      	strb	r3, [r7, #15]
      break;
 8004db4:	e000      	b.n	8004db8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	00100070 	.word	0x00100070
 8004dd8:	00100060 	.word	0x00100060
 8004ddc:	00100050 	.word	0x00100050
 8004de0:	00100040 	.word	0x00100040
 8004de4:	00100030 	.word	0x00100030
 8004de8:	00100020 	.word	0x00100020

08004dec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b083      	sub	sp, #12
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e08:	bf00      	nop
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a4c      	ldr	r2, [pc, #304]	; (8004f80 <TIM_Base_SetConfig+0x144>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d017      	beq.n	8004e84 <TIM_Base_SetConfig+0x48>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5a:	d013      	beq.n	8004e84 <TIM_Base_SetConfig+0x48>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	4a49      	ldr	r2, [pc, #292]	; (8004f84 <TIM_Base_SetConfig+0x148>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00f      	beq.n	8004e84 <TIM_Base_SetConfig+0x48>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a48      	ldr	r2, [pc, #288]	; (8004f88 <TIM_Base_SetConfig+0x14c>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d00b      	beq.n	8004e84 <TIM_Base_SetConfig+0x48>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a47      	ldr	r2, [pc, #284]	; (8004f8c <TIM_Base_SetConfig+0x150>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d007      	beq.n	8004e84 <TIM_Base_SetConfig+0x48>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a46      	ldr	r2, [pc, #280]	; (8004f90 <TIM_Base_SetConfig+0x154>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_Base_SetConfig+0x48>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a45      	ldr	r2, [pc, #276]	; (8004f94 <TIM_Base_SetConfig+0x158>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d108      	bne.n	8004e96 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a39      	ldr	r2, [pc, #228]	; (8004f80 <TIM_Base_SetConfig+0x144>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d023      	beq.n	8004ee6 <TIM_Base_SetConfig+0xaa>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea4:	d01f      	beq.n	8004ee6 <TIM_Base_SetConfig+0xaa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a36      	ldr	r2, [pc, #216]	; (8004f84 <TIM_Base_SetConfig+0x148>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01b      	beq.n	8004ee6 <TIM_Base_SetConfig+0xaa>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a35      	ldr	r2, [pc, #212]	; (8004f88 <TIM_Base_SetConfig+0x14c>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d017      	beq.n	8004ee6 <TIM_Base_SetConfig+0xaa>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a34      	ldr	r2, [pc, #208]	; (8004f8c <TIM_Base_SetConfig+0x150>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d013      	beq.n	8004ee6 <TIM_Base_SetConfig+0xaa>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a33      	ldr	r2, [pc, #204]	; (8004f90 <TIM_Base_SetConfig+0x154>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00f      	beq.n	8004ee6 <TIM_Base_SetConfig+0xaa>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a33      	ldr	r2, [pc, #204]	; (8004f98 <TIM_Base_SetConfig+0x15c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d00b      	beq.n	8004ee6 <TIM_Base_SetConfig+0xaa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a32      	ldr	r2, [pc, #200]	; (8004f9c <TIM_Base_SetConfig+0x160>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d007      	beq.n	8004ee6 <TIM_Base_SetConfig+0xaa>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a31      	ldr	r2, [pc, #196]	; (8004fa0 <TIM_Base_SetConfig+0x164>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_Base_SetConfig+0xaa>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a2c      	ldr	r2, [pc, #176]	; (8004f94 <TIM_Base_SetConfig+0x158>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d108      	bne.n	8004ef8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <TIM_Base_SetConfig+0x144>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d013      	beq.n	8004f4c <TIM_Base_SetConfig+0x110>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1a      	ldr	r2, [pc, #104]	; (8004f90 <TIM_Base_SetConfig+0x154>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00f      	beq.n	8004f4c <TIM_Base_SetConfig+0x110>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a1a      	ldr	r2, [pc, #104]	; (8004f98 <TIM_Base_SetConfig+0x15c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_Base_SetConfig+0x110>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a19      	ldr	r2, [pc, #100]	; (8004f9c <TIM_Base_SetConfig+0x160>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_Base_SetConfig+0x110>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <TIM_Base_SetConfig+0x164>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0x110>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <TIM_Base_SetConfig+0x158>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d103      	bne.n	8004f54 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	691a      	ldr	r2, [r3, #16]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d105      	bne.n	8004f72 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	611a      	str	r2, [r3, #16]
  }
}
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	40012c00 	.word	0x40012c00
 8004f84:	40000400 	.word	0x40000400
 8004f88:	40000800 	.word	0x40000800
 8004f8c:	40000c00 	.word	0x40000c00
 8004f90:	40013400 	.word	0x40013400
 8004f94:	40015000 	.word	0x40015000
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40014400 	.word	0x40014400
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b087      	sub	sp, #28
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f023 0201 	bic.w	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f023 0302 	bic.w	r3, r3, #2
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a30      	ldr	r2, [pc, #192]	; (80050c0 <TIM_OC1_SetConfig+0x11c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <TIM_OC1_SetConfig+0x88>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a2f      	ldr	r2, [pc, #188]	; (80050c4 <TIM_OC1_SetConfig+0x120>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00f      	beq.n	800502c <TIM_OC1_SetConfig+0x88>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a2e      	ldr	r2, [pc, #184]	; (80050c8 <TIM_OC1_SetConfig+0x124>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_OC1_SetConfig+0x88>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a2d      	ldr	r2, [pc, #180]	; (80050cc <TIM_OC1_SetConfig+0x128>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_OC1_SetConfig+0x88>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a2c      	ldr	r2, [pc, #176]	; (80050d0 <TIM_OC1_SetConfig+0x12c>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_OC1_SetConfig+0x88>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a2b      	ldr	r2, [pc, #172]	; (80050d4 <TIM_OC1_SetConfig+0x130>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d10c      	bne.n	8005046 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0308 	bic.w	r3, r3, #8
 8005032:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	4313      	orrs	r3, r2
 800503c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	f023 0304 	bic.w	r3, r3, #4
 8005044:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1d      	ldr	r2, [pc, #116]	; (80050c0 <TIM_OC1_SetConfig+0x11c>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <TIM_OC1_SetConfig+0xd2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a1c      	ldr	r2, [pc, #112]	; (80050c4 <TIM_OC1_SetConfig+0x120>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00f      	beq.n	8005076 <TIM_OC1_SetConfig+0xd2>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <TIM_OC1_SetConfig+0x124>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00b      	beq.n	8005076 <TIM_OC1_SetConfig+0xd2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1a      	ldr	r2, [pc, #104]	; (80050cc <TIM_OC1_SetConfig+0x128>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d007      	beq.n	8005076 <TIM_OC1_SetConfig+0xd2>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4a19      	ldr	r2, [pc, #100]	; (80050d0 <TIM_OC1_SetConfig+0x12c>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d003      	beq.n	8005076 <TIM_OC1_SetConfig+0xd2>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a18      	ldr	r2, [pc, #96]	; (80050d4 <TIM_OC1_SetConfig+0x130>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d111      	bne.n	800509a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800507c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	621a      	str	r2, [r3, #32]
}
 80050b4:	bf00      	nop
 80050b6:	371c      	adds	r7, #28
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	40012c00 	.word	0x40012c00
 80050c4:	40013400 	.word	0x40013400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40014400 	.word	0x40014400
 80050d0:	40014800 	.word	0x40014800
 80050d4:	40015000 	.word	0x40015000

080050d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f023 0210 	bic.w	r2, r3, #16
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800510a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0320 	bic.w	r3, r3, #32
 8005126:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	011b      	lsls	r3, r3, #4
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a2c      	ldr	r2, [pc, #176]	; (80051e8 <TIM_OC2_SetConfig+0x110>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d007      	beq.n	800514c <TIM_OC2_SetConfig+0x74>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a2b      	ldr	r2, [pc, #172]	; (80051ec <TIM_OC2_SetConfig+0x114>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d003      	beq.n	800514c <TIM_OC2_SetConfig+0x74>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a2a      	ldr	r2, [pc, #168]	; (80051f0 <TIM_OC2_SetConfig+0x118>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d10d      	bne.n	8005168 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005166:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a1f      	ldr	r2, [pc, #124]	; (80051e8 <TIM_OC2_SetConfig+0x110>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d013      	beq.n	8005198 <TIM_OC2_SetConfig+0xc0>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a1e      	ldr	r2, [pc, #120]	; (80051ec <TIM_OC2_SetConfig+0x114>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00f      	beq.n	8005198 <TIM_OC2_SetConfig+0xc0>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a1e      	ldr	r2, [pc, #120]	; (80051f4 <TIM_OC2_SetConfig+0x11c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d00b      	beq.n	8005198 <TIM_OC2_SetConfig+0xc0>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a1d      	ldr	r2, [pc, #116]	; (80051f8 <TIM_OC2_SetConfig+0x120>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d007      	beq.n	8005198 <TIM_OC2_SetConfig+0xc0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a1c      	ldr	r2, [pc, #112]	; (80051fc <TIM_OC2_SetConfig+0x124>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC2_SetConfig+0xc0>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <TIM_OC2_SetConfig+0x118>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d113      	bne.n	80051c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800519e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	621a      	str	r2, [r3, #32]
}
 80051da:	bf00      	nop
 80051dc:	371c      	adds	r7, #28
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40012c00 	.word	0x40012c00
 80051ec:	40013400 	.word	0x40013400
 80051f0:	40015000 	.word	0x40015000
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40014400 	.word	0x40014400
 80051fc:	40014800 	.word	0x40014800

08005200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005200:	b480      	push	{r7}
 8005202:	b087      	sub	sp, #28
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69db      	ldr	r3, [r3, #28]
 8005226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800522e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f023 0303 	bic.w	r3, r3, #3
 800523a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	4313      	orrs	r3, r2
 8005244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800524c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	4313      	orrs	r3, r2
 8005258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2b      	ldr	r2, [pc, #172]	; (800530c <TIM_OC3_SetConfig+0x10c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d007      	beq.n	8005272 <TIM_OC3_SetConfig+0x72>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2a      	ldr	r2, [pc, #168]	; (8005310 <TIM_OC3_SetConfig+0x110>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d003      	beq.n	8005272 <TIM_OC3_SetConfig+0x72>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a29      	ldr	r2, [pc, #164]	; (8005314 <TIM_OC3_SetConfig+0x114>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d10d      	bne.n	800528e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800528c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a1e      	ldr	r2, [pc, #120]	; (800530c <TIM_OC3_SetConfig+0x10c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <TIM_OC3_SetConfig+0xbe>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <TIM_OC3_SetConfig+0x110>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_OC3_SetConfig+0xbe>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a1d      	ldr	r2, [pc, #116]	; (8005318 <TIM_OC3_SetConfig+0x118>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_OC3_SetConfig+0xbe>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a1c      	ldr	r2, [pc, #112]	; (800531c <TIM_OC3_SetConfig+0x11c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_OC3_SetConfig+0xbe>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <TIM_OC3_SetConfig+0x120>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_OC3_SetConfig+0xbe>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a16      	ldr	r2, [pc, #88]	; (8005314 <TIM_OC3_SetConfig+0x114>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d113      	bne.n	80052e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	011b      	lsls	r3, r3, #4
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	685a      	ldr	r2, [r3, #4]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	621a      	str	r2, [r3, #32]
}
 8005300:	bf00      	nop
 8005302:	371c      	adds	r7, #28
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	40012c00 	.word	0x40012c00
 8005310:	40013400 	.word	0x40013400
 8005314:	40015000 	.word	0x40015000
 8005318:	40014000 	.word	0x40014000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800

08005324 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005324:	b480      	push	{r7}
 8005326:	b087      	sub	sp, #28
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a1b      	ldr	r3, [r3, #32]
 8005332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a1b      	ldr	r3, [r3, #32]
 8005338:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	021b      	lsls	r3, r3, #8
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4313      	orrs	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	031b      	lsls	r3, r3, #12
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a2c      	ldr	r2, [pc, #176]	; (8005434 <TIM_OC4_SetConfig+0x110>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d007      	beq.n	8005398 <TIM_OC4_SetConfig+0x74>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a2b      	ldr	r2, [pc, #172]	; (8005438 <TIM_OC4_SetConfig+0x114>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_OC4_SetConfig+0x74>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a2a      	ldr	r2, [pc, #168]	; (800543c <TIM_OC4_SetConfig+0x118>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d10d      	bne.n	80053b4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800539e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a1f      	ldr	r2, [pc, #124]	; (8005434 <TIM_OC4_SetConfig+0x110>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d013      	beq.n	80053e4 <TIM_OC4_SetConfig+0xc0>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a1e      	ldr	r2, [pc, #120]	; (8005438 <TIM_OC4_SetConfig+0x114>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00f      	beq.n	80053e4 <TIM_OC4_SetConfig+0xc0>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a1e      	ldr	r2, [pc, #120]	; (8005440 <TIM_OC4_SetConfig+0x11c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d00b      	beq.n	80053e4 <TIM_OC4_SetConfig+0xc0>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a1d      	ldr	r2, [pc, #116]	; (8005444 <TIM_OC4_SetConfig+0x120>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d007      	beq.n	80053e4 <TIM_OC4_SetConfig+0xc0>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a1c      	ldr	r2, [pc, #112]	; (8005448 <TIM_OC4_SetConfig+0x124>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d003      	beq.n	80053e4 <TIM_OC4_SetConfig+0xc0>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a17      	ldr	r2, [pc, #92]	; (800543c <TIM_OC4_SetConfig+0x118>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d113      	bne.n	800540c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053f2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	019b      	lsls	r3, r3, #6
 80053fa:	693a      	ldr	r2, [r7, #16]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	019b      	lsls	r3, r3, #6
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	621a      	str	r2, [r3, #32]
}
 8005426:	bf00      	nop
 8005428:	371c      	adds	r7, #28
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40013400 	.word	0x40013400
 800543c:	40015000 	.word	0x40015000
 8005440:	40014000 	.word	0x40014000
 8005444:	40014400 	.word	0x40014400
 8005448:	40014800 	.word	0x40014800

0800544c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005490:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <TIM_OC5_SetConfig+0xbc>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a18      	ldr	r2, [pc, #96]	; (800550c <TIM_OC5_SetConfig+0xc0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC5_SetConfig+0xc4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC5_SetConfig+0xc8>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a15      	ldr	r2, [pc, #84]	; (8005518 <TIM_OC5_SetConfig+0xcc>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_OC5_SetConfig+0x82>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a14      	ldr	r2, [pc, #80]	; (800551c <TIM_OC5_SetConfig+0xd0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d109      	bne.n	80054e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	021b      	lsls	r3, r3, #8
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	4313      	orrs	r3, r2
 80054e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	621a      	str	r2, [r3, #32]
}
 80054fc:	bf00      	nop
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	40012c00 	.word	0x40012c00
 800550c:	40013400 	.word	0x40013400
 8005510:	40014000 	.word	0x40014000
 8005514:	40014400 	.word	0x40014400
 8005518:	40014800 	.word	0x40014800
 800551c:	40015000 	.word	0x40015000

08005520 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a1b      	ldr	r3, [r3, #32]
 8005534:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005552:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	4313      	orrs	r3, r2
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005566:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	051b      	lsls	r3, r3, #20
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	4313      	orrs	r3, r2
 8005572:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a1a      	ldr	r2, [pc, #104]	; (80055e0 <TIM_OC6_SetConfig+0xc0>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d013      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <TIM_OC6_SetConfig+0xc4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00f      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <TIM_OC6_SetConfig+0xc8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d00b      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a17      	ldr	r2, [pc, #92]	; (80055ec <TIM_OC6_SetConfig+0xcc>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d007      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a16      	ldr	r2, [pc, #88]	; (80055f0 <TIM_OC6_SetConfig+0xd0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d003      	beq.n	80055a4 <TIM_OC6_SetConfig+0x84>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <TIM_OC6_SetConfig+0xd4>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d109      	bne.n	80055b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40013400 	.word	0x40013400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40014400 	.word	0x40014400
 80055f0:	40014800 	.word	0x40014800
 80055f4:	40015000 	.word	0x40015000

080055f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f023 0201 	bic.w	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005622:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f023 030a 	bic.w	r3, r3, #10
 8005634:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005636:	697a      	ldr	r2, [r7, #20]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005656:	b480      	push	{r7}
 8005658:	b087      	sub	sp, #28
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6a1b      	ldr	r3, [r3, #32]
 800566c:	f023 0210 	bic.w	r2, r3, #16
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	031b      	lsls	r3, r3, #12
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	4313      	orrs	r3, r2
 800568a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005692:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	621a      	str	r2, [r3, #32]
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b085      	sub	sp, #20
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f043 0307 	orr.w	r3, r3, #7
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	609a      	str	r2, [r3, #8]
}
 80056e4:	bf00      	nop
 80056e6:	3714      	adds	r7, #20
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800570a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	021a      	lsls	r2, r3, #8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	431a      	orrs	r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	4313      	orrs	r3, r2
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	4313      	orrs	r3, r2
 800571c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	609a      	str	r2, [r3, #8]
}
 8005724:	bf00      	nop
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005730:	b480      	push	{r7}
 8005732:	b087      	sub	sp, #28
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f003 031f 	and.w	r3, r3, #31
 8005742:	2201      	movs	r2, #1
 8005744:	fa02 f303 	lsl.w	r3, r2, r3
 8005748:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1a      	ldr	r2, [r3, #32]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	43db      	mvns	r3, r3
 8005752:	401a      	ands	r2, r3
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1a      	ldr	r2, [r3, #32]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	f003 031f 	and.w	r3, r3, #31
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	fa01 f303 	lsl.w	r3, r1, r3
 8005768:	431a      	orrs	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	621a      	str	r2, [r3, #32]
}
 800576e:	bf00      	nop
 8005770:	371c      	adds	r7, #28
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578c:	2b01      	cmp	r3, #1
 800578e:	d101      	bne.n	8005794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005790:	2302      	movs	r3, #2
 8005792:	e074      	b.n	800587e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2202      	movs	r2, #2
 80057a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a34      	ldr	r2, [pc, #208]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d009      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a33      	ldr	r2, [pc, #204]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d004      	beq.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a31      	ldr	r2, [pc, #196]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d108      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057d8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80057ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	68fa      	ldr	r2, [r7, #12]
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a21      	ldr	r2, [pc, #132]	; (800588c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d022      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005814:	d01d      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1f      	ldr	r2, [pc, #124]	; (8005898 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d018      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1d      	ldr	r2, [pc, #116]	; (800589c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1c      	ldr	r2, [pc, #112]	; (80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00e      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a15      	ldr	r2, [pc, #84]	; (8005890 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d009      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d004      	beq.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a11      	ldr	r2, [pc, #68]	; (8005894 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10c      	bne.n	800586c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005858:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	4313      	orrs	r3, r2
 8005862:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40012c00 	.word	0x40012c00
 8005890:	40013400 	.word	0x40013400
 8005894:	40015000 	.word	0x40015000
 8005898:	40000400 	.word	0x40000400
 800589c:	40000800 	.word	0x40000800
 80058a0:	40000c00 	.word	0x40000c00
 80058a4:	40014000 	.word	0x40014000

080058a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e078      	b.n	80059b6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4313      	orrs	r3, r2
 8005902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	4313      	orrs	r3, r2
 800591e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	041b      	lsls	r3, r3, #16
 800593a:	4313      	orrs	r3, r2
 800593c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	4313      	orrs	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d009      	beq.n	800596a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1b      	ldr	r2, [pc, #108]	; (80059c8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d004      	beq.n	800596a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a19      	ldr	r2, [pc, #100]	; (80059cc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d11c      	bne.n	80059a4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	051b      	lsls	r3, r3, #20
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	6a1b      	ldr	r3, [r3, #32]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005992:	4313      	orrs	r3, r2
 8005994:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40013400 	.word	0x40013400
 80059cc:	40015000 	.word	0x40015000

080059d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b083      	sub	sp, #12
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a00:	bf00      	nop
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d101      	bne.n	8005a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e042      	b.n	8005af4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d106      	bne.n	8005a86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7fc fae7 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2224      	movs	r2, #36	; 0x24
 8005a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0201 	bic.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 ff42 	bl	8006930 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fc43 	bl	8006338 <UART_SetConfig>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d101      	bne.n	8005abc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e01b      	b.n	8005af4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 ffc1 	bl	8006a74 <UART_CheckIdleState>
 8005af2:	4603      	mov	r3, r0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08a      	sub	sp, #40	; 0x28
 8005b00:	af02      	add	r7, sp, #8
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	2b20      	cmp	r3, #32
 8005b14:	d17b      	bne.n	8005c0e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <HAL_UART_Transmit+0x26>
 8005b1c:	88fb      	ldrh	r3, [r7, #6]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e074      	b.n	8005c10 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2221      	movs	r2, #33	; 0x21
 8005b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b36:	f7fc fe4f 	bl	80027d8 <HAL_GetTick>
 8005b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	88fa      	ldrh	r2, [r7, #6]
 8005b40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	88fa      	ldrh	r2, [r7, #6]
 8005b48:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b54:	d108      	bne.n	8005b68 <HAL_UART_Transmit+0x6c>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	e003      	b.n	8005b70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b70:	e030      	b.n	8005bd4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2180      	movs	r1, #128	; 0x80
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f001 f823 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d005      	beq.n	8005b94 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e03d      	b.n	8005c10 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10b      	bne.n	8005bb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ba8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005baa:	69bb      	ldr	r3, [r7, #24]
 8005bac:	3302      	adds	r3, #2
 8005bae:	61bb      	str	r3, [r7, #24]
 8005bb0:	e007      	b.n	8005bc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	b29a      	uxth	r2, r3
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d1c8      	bne.n	8005b72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	2200      	movs	r2, #0
 8005be8:	2140      	movs	r1, #64	; 0x40
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 ffec 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2220      	movs	r2, #32
 8005bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e006      	b.n	8005c10 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e000      	b.n	8005c10 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c0e:	2302      	movs	r3, #2
  }
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3720      	adds	r7, #32
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	4613      	mov	r3, r2
 8005c24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c2c:	2b20      	cmp	r3, #32
 8005c2e:	d137      	bne.n	8005ca0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_UART_Receive_IT+0x24>
 8005c36:	88fb      	ldrh	r3, [r7, #6]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d101      	bne.n	8005c40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e030      	b.n	8005ca2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a18      	ldr	r2, [pc, #96]	; (8005cac <HAL_UART_Receive_IT+0x94>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d01f      	beq.n	8005c90 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d018      	beq.n	8005c90 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c7c:	623b      	str	r3, [r7, #32]
 8005c7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	69f9      	ldr	r1, [r7, #28]
 8005c82:	6a3a      	ldr	r2, [r7, #32]
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e6      	bne.n	8005c5e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c90:	88fb      	ldrh	r3, [r7, #6]
 8005c92:	461a      	mov	r2, r3
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f001 f804 	bl	8006ca4 <UART_Start_Receive_IT>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	e000      	b.n	8005ca2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ca0:	2302      	movs	r3, #2
  }
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3728      	adds	r7, #40	; 0x28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	40008000 	.word	0x40008000

08005cb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b0ba      	sub	sp, #232	; 0xe8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005cd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005cda:	f640 030f 	movw	r3, #2063	; 0x80f
 8005cde:	4013      	ands	r3, r2
 8005ce0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d11b      	bne.n	8005d24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d015      	beq.n	8005d24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d105      	bne.n	8005d10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d009      	beq.n	8005d24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 82e3 	beq.w	80062e0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	4798      	blx	r3
      }
      return;
 8005d22:	e2dd      	b.n	80062e0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 8123 	beq.w	8005f74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005d32:	4b8d      	ldr	r3, [pc, #564]	; (8005f68 <HAL_UART_IRQHandler+0x2b8>)
 8005d34:	4013      	ands	r3, r2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d3e:	4b8b      	ldr	r3, [pc, #556]	; (8005f6c <HAL_UART_IRQHandler+0x2bc>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 8116 	beq.w	8005f74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d011      	beq.n	8005d78 <HAL_UART_IRQHandler+0xc8>
 8005d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00b      	beq.n	8005d78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2201      	movs	r2, #1
 8005d66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6e:	f043 0201 	orr.w	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d011      	beq.n	8005da8 <HAL_UART_IRQHandler+0xf8>
 8005d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d88:	f003 0301 	and.w	r3, r3, #1
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00b      	beq.n	8005da8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2202      	movs	r2, #2
 8005d96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9e:	f043 0204 	orr.w	r2, r3, #4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005da8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d011      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x128>
 8005db4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00b      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dce:	f043 0202 	orr.w	r2, r3, #2
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ddc:	f003 0308 	and.w	r3, r3, #8
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d017      	beq.n	8005e14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d105      	bne.n	8005dfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005df0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005df4:	4b5c      	ldr	r3, [pc, #368]	; (8005f68 <HAL_UART_IRQHandler+0x2b8>)
 8005df6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00b      	beq.n	8005e14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2208      	movs	r2, #8
 8005e02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0a:	f043 0208 	orr.w	r2, r3, #8
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d012      	beq.n	8005e46 <HAL_UART_IRQHandler+0x196>
 8005e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d00c      	beq.n	8005e46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f000 8249 	beq.w	80062e4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e56:	f003 0320 	and.w	r3, r3, #32
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d013      	beq.n	8005e86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e62:	f003 0320 	and.w	r3, r3, #32
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d105      	bne.n	8005e76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9a:	2b40      	cmp	r3, #64	; 0x40
 8005e9c:	d005      	beq.n	8005eaa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ea2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d054      	beq.n	8005f54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f001 f81c 	bl	8006ee8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d146      	bne.n	8005f4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ecc:	e853 3f00 	ldrex	r3, [r3]
 8005ed0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ed4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005edc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005eea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ef6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1d9      	bne.n	8005ebe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d017      	beq.n	8005f44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f1a:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <HAL_UART_IRQHandler+0x2c0>)
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fc fd9c 	bl	8002a62 <HAL_DMA_Abort_IT>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d019      	beq.n	8005f64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005f3e:	4610      	mov	r0, r2
 8005f40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f42:	e00f      	b.n	8005f64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f9e1 	bl	800630c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4a:	e00b      	b.n	8005f64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f9dd 	bl	800630c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f52:	e007      	b.n	8005f64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f9d9 	bl	800630c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005f62:	e1bf      	b.n	80062e4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f64:	bf00      	nop
    return;
 8005f66:	e1bd      	b.n	80062e4 <HAL_UART_IRQHandler+0x634>
 8005f68:	10000001 	.word	0x10000001
 8005f6c:	04000120 	.word	0x04000120
 8005f70:	08006fb5 	.word	0x08006fb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	f040 8153 	bne.w	8006224 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	f000 814c 	beq.w	8006224 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f90:	f003 0310 	and.w	r3, r3, #16
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	f000 8145 	beq.w	8006224 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2210      	movs	r2, #16
 8005fa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	f040 80bb 	bne.w	8006128 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 818f 	beq.w	80062e8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	f080 8187 	bcs.w	80062e8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fe0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f040 8087 	bne.w	8006106 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800600c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006014:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006022:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006026:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800602e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006032:	e841 2300 	strex	r3, r2, [r1]
 8006036:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800603a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d1da      	bne.n	8005ff8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	3308      	adds	r3, #8
 8006048:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800604c:	e853 3f00 	ldrex	r3, [r3]
 8006050:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006052:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	3308      	adds	r3, #8
 8006062:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006066:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800606a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800606e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006078:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e1      	bne.n	8006042 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800608e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006094:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	3308      	adds	r3, #8
 800609e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060a2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80060a4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80060a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80060b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d1e3      	bne.n	800607e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80060d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060d4:	f023 0310 	bic.w	r3, r3, #16
 80060d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80060e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ee:	e841 2300 	strex	r3, r2, [r1]
 80060f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1e4      	bne.n	80060c4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006100:	4618      	mov	r0, r3
 8006102:	f7fc fc55 	bl	80029b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2202      	movs	r2, #2
 800610a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006118:	b29b      	uxth	r3, r3
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	b29b      	uxth	r3, r3
 800611e:	4619      	mov	r1, r3
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f8fd 	bl	8006320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006126:	e0df      	b.n	80062e8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006134:	b29b      	uxth	r3, r3
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	f000 80d1 	beq.w	80062ec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800614a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80cc 	beq.w	80062ec <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800615c:	e853 3f00 	ldrex	r3, [r3]
 8006160:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006164:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006168:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	461a      	mov	r2, r3
 8006172:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006176:	647b      	str	r3, [r7, #68]	; 0x44
 8006178:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800617c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800617e:	e841 2300 	strex	r3, r2, [r1]
 8006182:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e4      	bne.n	8006154 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	623b      	str	r3, [r7, #32]
   return(result);
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a0:	f023 0301 	bic.w	r3, r3, #1
 80061a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3308      	adds	r3, #8
 80061ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80061b2:	633a      	str	r2, [r7, #48]	; 0x30
 80061b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ba:	e841 2300 	strex	r3, r2, [r1]
 80061be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e1      	bne.n	800618a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	e853 3f00 	ldrex	r3, [r3]
 80061e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0310 	bic.w	r3, r3, #16
 80061ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	69b9      	ldr	r1, [r7, #24]
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	617b      	str	r3, [r7, #20]
   return(result);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e4      	bne.n	80061da <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006216:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f87f 	bl	8006320 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006222:	e063      	b.n	80062ec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00e      	beq.n	800624e <HAL_UART_IRQHandler+0x59e>
 8006230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006244:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f001 fc12 	bl	8007a70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800624c:	e051      	b.n	80062f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800624e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006256:	2b00      	cmp	r3, #0
 8006258:	d014      	beq.n	8006284 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800625a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b00      	cmp	r3, #0
 8006264:	d105      	bne.n	8006272 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800626a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d008      	beq.n	8006284 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006276:	2b00      	cmp	r3, #0
 8006278:	d03a      	beq.n	80062f0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	4798      	blx	r3
    }
    return;
 8006282:	e035      	b.n	80062f0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628c:	2b00      	cmp	r3, #0
 800628e:	d009      	beq.n	80062a4 <HAL_UART_IRQHandler+0x5f4>
 8006290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fe9f 	bl	8006fe0 <UART_EndTransmit_IT>
    return;
 80062a2:	e026      	b.n	80062f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d009      	beq.n	80062c4 <HAL_UART_IRQHandler+0x614>
 80062b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d003      	beq.n	80062c4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f001 fbeb 	bl	8007a98 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062c2:	e016      	b.n	80062f2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80062c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d010      	beq.n	80062f2 <HAL_UART_IRQHandler+0x642>
 80062d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	da0c      	bge.n	80062f2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 fbd3 	bl	8007a84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062de:	e008      	b.n	80062f2 <HAL_UART_IRQHandler+0x642>
      return;
 80062e0:	bf00      	nop
 80062e2:	e006      	b.n	80062f2 <HAL_UART_IRQHandler+0x642>
    return;
 80062e4:	bf00      	nop
 80062e6:	e004      	b.n	80062f2 <HAL_UART_IRQHandler+0x642>
      return;
 80062e8:	bf00      	nop
 80062ea:	e002      	b.n	80062f2 <HAL_UART_IRQHandler+0x642>
      return;
 80062ec:	bf00      	nop
 80062ee:	e000      	b.n	80062f2 <HAL_UART_IRQHandler+0x642>
    return;
 80062f0:	bf00      	nop
  }
}
 80062f2:	37e8      	adds	r7, #232	; 0xe8
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800633c:	b08c      	sub	sp, #48	; 0x30
 800633e:	af00      	add	r7, sp, #0
 8006340:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	689a      	ldr	r2, [r3, #8]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	431a      	orrs	r2, r3
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	431a      	orrs	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	4313      	orrs	r3, r2
 800635e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	4baa      	ldr	r3, [pc, #680]	; (8006610 <UART_SetConfig+0x2d8>)
 8006368:	4013      	ands	r3, r2
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	6812      	ldr	r2, [r2, #0]
 800636e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006370:	430b      	orrs	r3, r1
 8006372:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	68da      	ldr	r2, [r3, #12]
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	430a      	orrs	r2, r1
 8006388:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a9f      	ldr	r2, [pc, #636]	; (8006614 <UART_SetConfig+0x2dc>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d004      	beq.n	80063a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a0:	4313      	orrs	r3, r2
 80063a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80063ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063b8:	430b      	orrs	r3, r1
 80063ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	f023 010f 	bic.w	r1, r3, #15
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	430a      	orrs	r2, r1
 80063d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a90      	ldr	r2, [pc, #576]	; (8006618 <UART_SetConfig+0x2e0>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d125      	bne.n	8006428 <UART_SetConfig+0xf0>
 80063dc:	4b8f      	ldr	r3, [pc, #572]	; (800661c <UART_SetConfig+0x2e4>)
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e2:	f003 0303 	and.w	r3, r3, #3
 80063e6:	2b03      	cmp	r3, #3
 80063e8:	d81a      	bhi.n	8006420 <UART_SetConfig+0xe8>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0xb8>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006401 	.word	0x08006401
 80063f4:	08006411 	.word	0x08006411
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006419 	.word	0x08006419
 8006400:	2301      	movs	r3, #1
 8006402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006406:	e116      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006408:	2302      	movs	r3, #2
 800640a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800640e:	e112      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006410:	2304      	movs	r3, #4
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006416:	e10e      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006418:	2308      	movs	r3, #8
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800641e:	e10a      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006420:	2310      	movs	r3, #16
 8006422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006426:	e106      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a7c      	ldr	r2, [pc, #496]	; (8006620 <UART_SetConfig+0x2e8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d138      	bne.n	80064a4 <UART_SetConfig+0x16c>
 8006432:	4b7a      	ldr	r3, [pc, #488]	; (800661c <UART_SetConfig+0x2e4>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006438:	f003 030c 	and.w	r3, r3, #12
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d82d      	bhi.n	800649c <UART_SetConfig+0x164>
 8006440:	a201      	add	r2, pc, #4	; (adr r2, 8006448 <UART_SetConfig+0x110>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	0800647d 	.word	0x0800647d
 800644c:	0800649d 	.word	0x0800649d
 8006450:	0800649d 	.word	0x0800649d
 8006454:	0800649d 	.word	0x0800649d
 8006458:	0800648d 	.word	0x0800648d
 800645c:	0800649d 	.word	0x0800649d
 8006460:	0800649d 	.word	0x0800649d
 8006464:	0800649d 	.word	0x0800649d
 8006468:	08006485 	.word	0x08006485
 800646c:	0800649d 	.word	0x0800649d
 8006470:	0800649d 	.word	0x0800649d
 8006474:	0800649d 	.word	0x0800649d
 8006478:	08006495 	.word	0x08006495
 800647c:	2300      	movs	r3, #0
 800647e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006482:	e0d8      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006484:	2302      	movs	r3, #2
 8006486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800648a:	e0d4      	b.n	8006636 <UART_SetConfig+0x2fe>
 800648c:	2304      	movs	r3, #4
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006492:	e0d0      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006494:	2308      	movs	r3, #8
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649a:	e0cc      	b.n	8006636 <UART_SetConfig+0x2fe>
 800649c:	2310      	movs	r3, #16
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a2:	e0c8      	b.n	8006636 <UART_SetConfig+0x2fe>
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a5e      	ldr	r2, [pc, #376]	; (8006624 <UART_SetConfig+0x2ec>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d125      	bne.n	80064fa <UART_SetConfig+0x1c2>
 80064ae:	4b5b      	ldr	r3, [pc, #364]	; (800661c <UART_SetConfig+0x2e4>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80064b8:	2b30      	cmp	r3, #48	; 0x30
 80064ba:	d016      	beq.n	80064ea <UART_SetConfig+0x1b2>
 80064bc:	2b30      	cmp	r3, #48	; 0x30
 80064be:	d818      	bhi.n	80064f2 <UART_SetConfig+0x1ba>
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d00a      	beq.n	80064da <UART_SetConfig+0x1a2>
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d814      	bhi.n	80064f2 <UART_SetConfig+0x1ba>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <UART_SetConfig+0x19a>
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d008      	beq.n	80064e2 <UART_SetConfig+0x1aa>
 80064d0:	e00f      	b.n	80064f2 <UART_SetConfig+0x1ba>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d8:	e0ad      	b.n	8006636 <UART_SetConfig+0x2fe>
 80064da:	2302      	movs	r3, #2
 80064dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e0:	e0a9      	b.n	8006636 <UART_SetConfig+0x2fe>
 80064e2:	2304      	movs	r3, #4
 80064e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e8:	e0a5      	b.n	8006636 <UART_SetConfig+0x2fe>
 80064ea:	2308      	movs	r3, #8
 80064ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f0:	e0a1      	b.n	8006636 <UART_SetConfig+0x2fe>
 80064f2:	2310      	movs	r3, #16
 80064f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064f8:	e09d      	b.n	8006636 <UART_SetConfig+0x2fe>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a4a      	ldr	r2, [pc, #296]	; (8006628 <UART_SetConfig+0x2f0>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d125      	bne.n	8006550 <UART_SetConfig+0x218>
 8006504:	4b45      	ldr	r3, [pc, #276]	; (800661c <UART_SetConfig+0x2e4>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800650e:	2bc0      	cmp	r3, #192	; 0xc0
 8006510:	d016      	beq.n	8006540 <UART_SetConfig+0x208>
 8006512:	2bc0      	cmp	r3, #192	; 0xc0
 8006514:	d818      	bhi.n	8006548 <UART_SetConfig+0x210>
 8006516:	2b80      	cmp	r3, #128	; 0x80
 8006518:	d00a      	beq.n	8006530 <UART_SetConfig+0x1f8>
 800651a:	2b80      	cmp	r3, #128	; 0x80
 800651c:	d814      	bhi.n	8006548 <UART_SetConfig+0x210>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <UART_SetConfig+0x1f0>
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d008      	beq.n	8006538 <UART_SetConfig+0x200>
 8006526:	e00f      	b.n	8006548 <UART_SetConfig+0x210>
 8006528:	2300      	movs	r3, #0
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652e:	e082      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006530:	2302      	movs	r3, #2
 8006532:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006536:	e07e      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006538:	2304      	movs	r3, #4
 800653a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653e:	e07a      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006540:	2308      	movs	r3, #8
 8006542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006546:	e076      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006548:	2310      	movs	r3, #16
 800654a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800654e:	e072      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a35      	ldr	r2, [pc, #212]	; (800662c <UART_SetConfig+0x2f4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d12a      	bne.n	80065b0 <UART_SetConfig+0x278>
 800655a:	4b30      	ldr	r3, [pc, #192]	; (800661c <UART_SetConfig+0x2e4>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006564:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006568:	d01a      	beq.n	80065a0 <UART_SetConfig+0x268>
 800656a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800656e:	d81b      	bhi.n	80065a8 <UART_SetConfig+0x270>
 8006570:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006574:	d00c      	beq.n	8006590 <UART_SetConfig+0x258>
 8006576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800657a:	d815      	bhi.n	80065a8 <UART_SetConfig+0x270>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <UART_SetConfig+0x250>
 8006580:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006584:	d008      	beq.n	8006598 <UART_SetConfig+0x260>
 8006586:	e00f      	b.n	80065a8 <UART_SetConfig+0x270>
 8006588:	2300      	movs	r3, #0
 800658a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800658e:	e052      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006590:	2302      	movs	r3, #2
 8006592:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006596:	e04e      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006598:	2304      	movs	r3, #4
 800659a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800659e:	e04a      	b.n	8006636 <UART_SetConfig+0x2fe>
 80065a0:	2308      	movs	r3, #8
 80065a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065a6:	e046      	b.n	8006636 <UART_SetConfig+0x2fe>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ae:	e042      	b.n	8006636 <UART_SetConfig+0x2fe>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a17      	ldr	r2, [pc, #92]	; (8006614 <UART_SetConfig+0x2dc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d13a      	bne.n	8006630 <UART_SetConfig+0x2f8>
 80065ba:	4b18      	ldr	r3, [pc, #96]	; (800661c <UART_SetConfig+0x2e4>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80065c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065c8:	d01a      	beq.n	8006600 <UART_SetConfig+0x2c8>
 80065ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065ce:	d81b      	bhi.n	8006608 <UART_SetConfig+0x2d0>
 80065d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065d4:	d00c      	beq.n	80065f0 <UART_SetConfig+0x2b8>
 80065d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065da:	d815      	bhi.n	8006608 <UART_SetConfig+0x2d0>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <UART_SetConfig+0x2b0>
 80065e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065e4:	d008      	beq.n	80065f8 <UART_SetConfig+0x2c0>
 80065e6:	e00f      	b.n	8006608 <UART_SetConfig+0x2d0>
 80065e8:	2300      	movs	r3, #0
 80065ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ee:	e022      	b.n	8006636 <UART_SetConfig+0x2fe>
 80065f0:	2302      	movs	r3, #2
 80065f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065f6:	e01e      	b.n	8006636 <UART_SetConfig+0x2fe>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065fe:	e01a      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006606:	e016      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800660e:	e012      	b.n	8006636 <UART_SetConfig+0x2fe>
 8006610:	cfff69f3 	.word	0xcfff69f3
 8006614:	40008000 	.word	0x40008000
 8006618:	40013800 	.word	0x40013800
 800661c:	40021000 	.word	0x40021000
 8006620:	40004400 	.word	0x40004400
 8006624:	40004800 	.word	0x40004800
 8006628:	40004c00 	.word	0x40004c00
 800662c:	40005000 	.word	0x40005000
 8006630:	2310      	movs	r3, #16
 8006632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4aae      	ldr	r2, [pc, #696]	; (80068f4 <UART_SetConfig+0x5bc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	f040 8097 	bne.w	8006770 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006642:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006646:	2b08      	cmp	r3, #8
 8006648:	d823      	bhi.n	8006692 <UART_SetConfig+0x35a>
 800664a:	a201      	add	r2, pc, #4	; (adr r2, 8006650 <UART_SetConfig+0x318>)
 800664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006650:	08006675 	.word	0x08006675
 8006654:	08006693 	.word	0x08006693
 8006658:	0800667d 	.word	0x0800667d
 800665c:	08006693 	.word	0x08006693
 8006660:	08006683 	.word	0x08006683
 8006664:	08006693 	.word	0x08006693
 8006668:	08006693 	.word	0x08006693
 800666c:	08006693 	.word	0x08006693
 8006670:	0800668b 	.word	0x0800668b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006674:	f7fd f966 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 8006678:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800667a:	e010      	b.n	800669e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800667c:	4b9e      	ldr	r3, [pc, #632]	; (80068f8 <UART_SetConfig+0x5c0>)
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006680:	e00d      	b.n	800669e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006682:	f7fd f8f1 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8006686:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006688:	e009      	b.n	800669e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006690:	e005      	b.n	800669e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800669c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800669e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 8130 	beq.w	8006906 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066aa:	4a94      	ldr	r2, [pc, #592]	; (80068fc <UART_SetConfig+0x5c4>)
 80066ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066b0:	461a      	mov	r2, r3
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	4413      	add	r3, r2
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d305      	bcc.n	80066d6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d903      	bls.n	80066de <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80066d6:	2301      	movs	r3, #1
 80066d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066dc:	e113      	b.n	8006906 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	2200      	movs	r2, #0
 80066e2:	60bb      	str	r3, [r7, #8]
 80066e4:	60fa      	str	r2, [r7, #12]
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	4a84      	ldr	r2, [pc, #528]	; (80068fc <UART_SetConfig+0x5c4>)
 80066ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2200      	movs	r2, #0
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006700:	f7fa fada 	bl	8000cb8 <__aeabi_uldivmod>
 8006704:	4602      	mov	r2, r0
 8006706:	460b      	mov	r3, r1
 8006708:	4610      	mov	r0, r2
 800670a:	4619      	mov	r1, r3
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	020b      	lsls	r3, r1, #8
 8006716:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800671a:	0202      	lsls	r2, r0, #8
 800671c:	6979      	ldr	r1, [r7, #20]
 800671e:	6849      	ldr	r1, [r1, #4]
 8006720:	0849      	lsrs	r1, r1, #1
 8006722:	2000      	movs	r0, #0
 8006724:	460c      	mov	r4, r1
 8006726:	4605      	mov	r5, r0
 8006728:	eb12 0804 	adds.w	r8, r2, r4
 800672c:	eb43 0905 	adc.w	r9, r3, r5
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	469a      	mov	sl, r3
 8006738:	4693      	mov	fp, r2
 800673a:	4652      	mov	r2, sl
 800673c:	465b      	mov	r3, fp
 800673e:	4640      	mov	r0, r8
 8006740:	4649      	mov	r1, r9
 8006742:	f7fa fab9 	bl	8000cb8 <__aeabi_uldivmod>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4613      	mov	r3, r2
 800674c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006754:	d308      	bcc.n	8006768 <UART_SetConfig+0x430>
 8006756:	6a3b      	ldr	r3, [r7, #32]
 8006758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800675c:	d204      	bcs.n	8006768 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a3a      	ldr	r2, [r7, #32]
 8006764:	60da      	str	r2, [r3, #12]
 8006766:	e0ce      	b.n	8006906 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800676e:	e0ca      	b.n	8006906 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006778:	d166      	bne.n	8006848 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800677a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800677e:	2b08      	cmp	r3, #8
 8006780:	d827      	bhi.n	80067d2 <UART_SetConfig+0x49a>
 8006782:	a201      	add	r2, pc, #4	; (adr r2, 8006788 <UART_SetConfig+0x450>)
 8006784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006788:	080067ad 	.word	0x080067ad
 800678c:	080067b5 	.word	0x080067b5
 8006790:	080067bd 	.word	0x080067bd
 8006794:	080067d3 	.word	0x080067d3
 8006798:	080067c3 	.word	0x080067c3
 800679c:	080067d3 	.word	0x080067d3
 80067a0:	080067d3 	.word	0x080067d3
 80067a4:	080067d3 	.word	0x080067d3
 80067a8:	080067cb 	.word	0x080067cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067ac:	f7fd f8ca 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 80067b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067b2:	e014      	b.n	80067de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b4:	f7fd f8dc 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 80067b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067ba:	e010      	b.n	80067de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067bc:	4b4e      	ldr	r3, [pc, #312]	; (80068f8 <UART_SetConfig+0x5c0>)
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067c0:	e00d      	b.n	80067de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c2:	f7fd f851 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 80067c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067c8:	e009      	b.n	80067de <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067d0:	e005      	b.n	80067de <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8090 	beq.w	8006906 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	4a44      	ldr	r2, [pc, #272]	; (80068fc <UART_SetConfig+0x5c4>)
 80067ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f0:	461a      	mov	r2, r3
 80067f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067f8:	005a      	lsls	r2, r3, #1
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	441a      	add	r2, r3
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	fbb2 f3f3 	udiv	r3, r2, r3
 800680a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	2b0f      	cmp	r3, #15
 8006810:	d916      	bls.n	8006840 <UART_SetConfig+0x508>
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	d212      	bcs.n	8006840 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f023 030f 	bic.w	r3, r3, #15
 8006822:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	085b      	lsrs	r3, r3, #1
 8006828:	b29b      	uxth	r3, r3
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	b29a      	uxth	r2, r3
 8006830:	8bfb      	ldrh	r3, [r7, #30]
 8006832:	4313      	orrs	r3, r2
 8006834:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	8bfa      	ldrh	r2, [r7, #30]
 800683c:	60da      	str	r2, [r3, #12]
 800683e:	e062      	b.n	8006906 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006846:	e05e      	b.n	8006906 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006848:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800684c:	2b08      	cmp	r3, #8
 800684e:	d828      	bhi.n	80068a2 <UART_SetConfig+0x56a>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0x520>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	0800687d 	.word	0x0800687d
 800685c:	08006885 	.word	0x08006885
 8006860:	0800688d 	.word	0x0800688d
 8006864:	080068a3 	.word	0x080068a3
 8006868:	08006893 	.word	0x08006893
 800686c:	080068a3 	.word	0x080068a3
 8006870:	080068a3 	.word	0x080068a3
 8006874:	080068a3 	.word	0x080068a3
 8006878:	0800689b 	.word	0x0800689b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800687c:	f7fd f862 	bl	8003944 <HAL_RCC_GetPCLK1Freq>
 8006880:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006882:	e014      	b.n	80068ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006884:	f7fd f874 	bl	8003970 <HAL_RCC_GetPCLK2Freq>
 8006888:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800688a:	e010      	b.n	80068ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800688c:	4b1a      	ldr	r3, [pc, #104]	; (80068f8 <UART_SetConfig+0x5c0>)
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006890:	e00d      	b.n	80068ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006892:	f7fc ffe9 	bl	8003868 <HAL_RCC_GetSysClockFreq>
 8006896:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006898:	e009      	b.n	80068ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800689a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80068a0:	e005      	b.n	80068ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80068ac:	bf00      	nop
    }

    if (pclk != 0U)
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d028      	beq.n	8006906 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	4a10      	ldr	r2, [pc, #64]	; (80068fc <UART_SetConfig+0x5c4>)
 80068ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068be:	461a      	mov	r2, r3
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	085b      	lsrs	r3, r3, #1
 80068cc:	441a      	add	r2, r3
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068d8:	6a3b      	ldr	r3, [r7, #32]
 80068da:	2b0f      	cmp	r3, #15
 80068dc:	d910      	bls.n	8006900 <UART_SetConfig+0x5c8>
 80068de:	6a3b      	ldr	r3, [r7, #32]
 80068e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e4:	d20c      	bcs.n	8006900 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	b29a      	uxth	r2, r3
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60da      	str	r2, [r3, #12]
 80068f0:	e009      	b.n	8006906 <UART_SetConfig+0x5ce>
 80068f2:	bf00      	nop
 80068f4:	40008000 	.word	0x40008000
 80068f8:	00f42400 	.word	0x00f42400
 80068fc:	0800ae0c 	.word	0x0800ae0c
      }
      else
      {
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	2201      	movs	r2, #1
 800690a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2201      	movs	r2, #1
 8006912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2200      	movs	r2, #0
 800691a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2200      	movs	r2, #0
 8006920:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006922:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006926:	4618      	mov	r0, r3
 8006928:	3730      	adds	r7, #48	; 0x30
 800692a:	46bd      	mov	sp, r7
 800692c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006930 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006930:	b480      	push	{r7}
 8006932:	b083      	sub	sp, #12
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00a      	beq.n	800695a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695e:	f003 0301 	and.w	r3, r3, #1
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00a      	beq.n	800697c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00a      	beq.n	800699e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	430a      	orrs	r2, r1
 800699c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00a      	beq.n	80069c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d00a      	beq.n	8006a04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	430a      	orrs	r2, r1
 8006a02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d01a      	beq.n	8006a46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a2e:	d10a      	bne.n	8006a46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00a      	beq.n	8006a68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	605a      	str	r2, [r3, #4]
  }
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr

08006a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b098      	sub	sp, #96	; 0x60
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a84:	f7fb fea8 	bl	80027d8 <HAL_GetTick>
 8006a88:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0308 	and.w	r3, r3, #8
 8006a94:	2b08      	cmp	r3, #8
 8006a96:	d12f      	bne.n	8006af8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f88e 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d022      	beq.n	8006af8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aba:	e853 3f00 	ldrex	r3, [r3]
 8006abe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ac2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ac6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	461a      	mov	r2, r3
 8006ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8006ad2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ad8:	e841 2300 	strex	r3, r2, [r1]
 8006adc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1e6      	bne.n	8006ab2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2220      	movs	r2, #32
 8006ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af4:	2303      	movs	r3, #3
 8006af6:	e063      	b.n	8006bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0304 	and.w	r3, r3, #4
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d149      	bne.n	8006b9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f857 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d03c      	beq.n	8006b9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	461a      	mov	r2, r3
 8006b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b40:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e6      	bne.n	8006b20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	3308      	adds	r3, #8
 8006b58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3308      	adds	r3, #8
 8006b70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b72:	61fa      	str	r2, [r7, #28]
 8006b74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b76:	69b9      	ldr	r1, [r7, #24]
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	e841 2300 	strex	r3, r2, [r1]
 8006b7e:	617b      	str	r3, [r7, #20]
   return(result);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1e5      	bne.n	8006b52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2220      	movs	r2, #32
 8006b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e012      	b.n	8006bc0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2220      	movs	r2, #32
 8006b9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3758      	adds	r7, #88	; 0x58
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd8:	e04f      	b.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be0:	d04b      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be2:	f7fb fdf9 	bl	80027d8 <HAL_GetTick>
 8006be6:	4602      	mov	r2, r0
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d302      	bcc.n	8006bf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e04e      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 0304 	and.w	r3, r3, #4
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d037      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b80      	cmp	r3, #128	; 0x80
 8006c0e:	d034      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b40      	cmp	r3, #64	; 0x40
 8006c14:	d031      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	69db      	ldr	r3, [r3, #28]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d110      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f95b 	bl	8006ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2208      	movs	r2, #8
 8006c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e029      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c54:	d111      	bne.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f941 	bl	8006ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e00f      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	69da      	ldr	r2, [r3, #28]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4013      	ands	r3, r2
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	bf0c      	ite	eq
 8006c8a:	2301      	moveq	r3, #1
 8006c8c:	2300      	movne	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d0a0      	beq.n	8006bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b0a3      	sub	sp, #140	; 0x8c
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	60f8      	str	r0, [r7, #12]
 8006cac:	60b9      	str	r1, [r7, #8]
 8006cae:	4613      	mov	r3, r2
 8006cb0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	88fa      	ldrh	r2, [r7, #6]
 8006cbc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	88fa      	ldrh	r2, [r7, #6]
 8006cc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd6:	d10e      	bne.n	8006cf6 <UART_Start_Receive_IT+0x52>
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d105      	bne.n	8006cec <UART_Start_Receive_IT+0x48>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ce6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cea:	e02d      	b.n	8006d48 <UART_Start_Receive_IT+0xa4>
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	22ff      	movs	r2, #255	; 0xff
 8006cf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006cf4:	e028      	b.n	8006d48 <UART_Start_Receive_IT+0xa4>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10d      	bne.n	8006d1a <UART_Start_Receive_IT+0x76>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d104      	bne.n	8006d10 <UART_Start_Receive_IT+0x6c>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	22ff      	movs	r2, #255	; 0xff
 8006d0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d0e:	e01b      	b.n	8006d48 <UART_Start_Receive_IT+0xa4>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	227f      	movs	r2, #127	; 0x7f
 8006d14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d18:	e016      	b.n	8006d48 <UART_Start_Receive_IT+0xa4>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d22:	d10d      	bne.n	8006d40 <UART_Start_Receive_IT+0x9c>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <UART_Start_Receive_IT+0x92>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	227f      	movs	r2, #127	; 0x7f
 8006d30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d34:	e008      	b.n	8006d48 <UART_Start_Receive_IT+0xa4>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	223f      	movs	r2, #63	; 0x3f
 8006d3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006d3e:	e003      	b.n	8006d48 <UART_Start_Receive_IT+0xa4>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2222      	movs	r2, #34	; 0x22
 8006d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3308      	adds	r3, #8
 8006d5e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	3308      	adds	r3, #8
 8006d78:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006d7c:	673a      	str	r2, [r7, #112]	; 0x70
 8006d7e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006d82:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006d8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e3      	bne.n	8006d58 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d98:	d14f      	bne.n	8006e3a <UART_Start_Receive_IT+0x196>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006da0:	88fa      	ldrh	r2, [r7, #6]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d349      	bcc.n	8006e3a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dae:	d107      	bne.n	8006dc0 <UART_Start_Receive_IT+0x11c>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d103      	bne.n	8006dc0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4a47      	ldr	r2, [pc, #284]	; (8006ed8 <UART_Start_Receive_IT+0x234>)
 8006dbc:	675a      	str	r2, [r3, #116]	; 0x74
 8006dbe:	e002      	b.n	8006dc6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4a46      	ldr	r2, [pc, #280]	; (8006edc <UART_Start_Receive_IT+0x238>)
 8006dc4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01a      	beq.n	8006e04 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ddc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006df0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006df2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006df6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e4      	bne.n	8006dce <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	3308      	adds	r3, #8
 8006e22:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e24:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e26:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e28:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e2c:	e841 2300 	strex	r3, r2, [r1]
 8006e30:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1e5      	bne.n	8006e04 <UART_Start_Receive_IT+0x160>
 8006e38:	e046      	b.n	8006ec8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e42:	d107      	bne.n	8006e54 <UART_Start_Receive_IT+0x1b0>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d103      	bne.n	8006e54 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4a24      	ldr	r2, [pc, #144]	; (8006ee0 <UART_Start_Receive_IT+0x23c>)
 8006e50:	675a      	str	r2, [r3, #116]	; 0x74
 8006e52:	e002      	b.n	8006e5a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4a23      	ldr	r2, [pc, #140]	; (8006ee4 <UART_Start_Receive_IT+0x240>)
 8006e58:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d019      	beq.n	8006e96 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006e76:	677b      	str	r3, [r7, #116]	; 0x74
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
 8006e82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e6      	bne.n	8006e62 <UART_Start_Receive_IT+0x1be>
 8006e94:	e018      	b.n	8006ec8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	f043 0320 	orr.w	r3, r3, #32
 8006eaa:	67bb      	str	r3, [r7, #120]	; 0x78
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006eb4:	623b      	str	r3, [r7, #32]
 8006eb6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	69f9      	ldr	r1, [r7, #28]
 8006eba:	6a3a      	ldr	r2, [r7, #32]
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e6      	bne.n	8006e96 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	378c      	adds	r7, #140	; 0x8c
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
 8006ed6:	bf00      	nop
 8006ed8:	08007709 	.word	0x08007709
 8006edc:	080073a9 	.word	0x080073a9
 8006ee0:	080071f1 	.word	0x080071f1
 8006ee4:	08007039 	.word	0x08007039

08006ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b095      	sub	sp, #84	; 0x54
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0e:	643b      	str	r3, [r7, #64]	; 0x40
 8006f10:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f16:	e841 2300 	strex	r3, r2, [r1]
 8006f1a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1e6      	bne.n	8006ef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	e853 3f00 	ldrex	r3, [r3]
 8006f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f38:	f023 0301 	bic.w	r3, r3, #1
 8006f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4e:	e841 2300 	strex	r3, r2, [r1]
 8006f52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1e3      	bne.n	8006f22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d118      	bne.n	8006f94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f023 0310 	bic.w	r3, r3, #16
 8006f76:	647b      	str	r3, [r7, #68]	; 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f80:	61bb      	str	r3, [r7, #24]
 8006f82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6979      	ldr	r1, [r7, #20]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e6      	bne.n	8006f62 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006fa8:	bf00      	nop
 8006faa:	3754      	adds	r7, #84	; 0x54
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f7ff f99a 	bl	800630c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fd8:	bf00      	nop
 8006fda:	3710      	adds	r7, #16
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	e853 3f00 	ldrex	r3, [r3]
 8006ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ffc:	61fb      	str	r3, [r7, #28]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	461a      	mov	r2, r3
 8007004:	69fb      	ldr	r3, [r7, #28]
 8007006:	61bb      	str	r3, [r7, #24]
 8007008:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700a:	6979      	ldr	r1, [r7, #20]
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	e841 2300 	strex	r3, r2, [r1]
 8007012:	613b      	str	r3, [r7, #16]
   return(result);
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1e6      	bne.n	8006fe8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2200      	movs	r2, #0
 8007026:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f7ff f965 	bl	80062f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702e:	bf00      	nop
 8007030:	3720      	adds	r7, #32
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
	...

08007038 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b09c      	sub	sp, #112	; 0x70
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007046:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007050:	2b22      	cmp	r3, #34	; 0x22
 8007052:	f040 80be 	bne.w	80071d2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007060:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007064:	b2d9      	uxtb	r1, r3
 8007066:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800706a:	b2da      	uxtb	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007070:	400a      	ands	r2, r1
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b29a      	uxth	r2, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007098:	b29b      	uxth	r3, r3
 800709a:	2b00      	cmp	r3, #0
 800709c:	f040 80a1 	bne.w	80071e2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070a8:	e853 3f00 	ldrex	r3, [r3]
 80070ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80070ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070be:	65bb      	str	r3, [r7, #88]	; 0x58
 80070c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070c6:	e841 2300 	strex	r3, r2, [r1]
 80070ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e6      	bne.n	80070a0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3308      	adds	r3, #8
 80070d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070dc:	e853 3f00 	ldrex	r3, [r3]
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e4:	f023 0301 	bic.w	r3, r3, #1
 80070e8:	667b      	str	r3, [r7, #100]	; 0x64
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3308      	adds	r3, #8
 80070f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070f2:	647a      	str	r2, [r7, #68]	; 0x44
 80070f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070fa:	e841 2300 	strex	r3, r2, [r1]
 80070fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1e5      	bne.n	80070d2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a33      	ldr	r2, [pc, #204]	; (80071ec <UART_RxISR_8BIT+0x1b4>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d01f      	beq.n	8007164 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d018      	beq.n	8007164 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	e853 3f00 	ldrex	r3, [r3]
 800713e:	623b      	str	r3, [r7, #32]
   return(result);
 8007140:	6a3b      	ldr	r3, [r7, #32]
 8007142:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007146:	663b      	str	r3, [r7, #96]	; 0x60
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007150:	633b      	str	r3, [r7, #48]	; 0x30
 8007152:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007156:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e6      	bne.n	8007132 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007168:	2b01      	cmp	r3, #1
 800716a:	d12e      	bne.n	80071ca <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	e853 3f00 	ldrex	r3, [r3]
 800717e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0310 	bic.w	r3, r3, #16
 8007186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	461a      	mov	r2, r3
 800718e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007194:	69b9      	ldr	r1, [r7, #24]
 8007196:	69fa      	ldr	r2, [r7, #28]
 8007198:	e841 2300 	strex	r3, r2, [r1]
 800719c:	617b      	str	r3, [r7, #20]
   return(result);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d1e6      	bne.n	8007172 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69db      	ldr	r3, [r3, #28]
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	2b10      	cmp	r3, #16
 80071b0:	d103      	bne.n	80071ba <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2210      	movs	r2, #16
 80071b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff f8ac 	bl	8006320 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071c8:	e00b      	b.n	80071e2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fa fed6 	bl	8001f7c <HAL_UART_RxCpltCallback>
}
 80071d0:	e007      	b.n	80071e2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0208 	orr.w	r2, r2, #8
 80071e0:	619a      	str	r2, [r3, #24]
}
 80071e2:	bf00      	nop
 80071e4:	3770      	adds	r7, #112	; 0x70
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40008000 	.word	0x40008000

080071f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b09c      	sub	sp, #112	; 0x70
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80071fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007208:	2b22      	cmp	r3, #34	; 0x22
 800720a:	f040 80be 	bne.w	800738a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800721c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800721e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007222:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007226:	4013      	ands	r3, r2
 8007228:	b29a      	uxth	r2, r3
 800722a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800722c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007232:	1c9a      	adds	r2, r3, #2
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007250:	b29b      	uxth	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	f040 80a1 	bne.w	800739a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007260:	e853 3f00 	ldrex	r3, [r3]
 8007264:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800726c:	667b      	str	r3, [r7, #100]	; 0x64
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007276:	657b      	str	r3, [r7, #84]	; 0x54
 8007278:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800727c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800727e:	e841 2300 	strex	r3, r2, [r1]
 8007282:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d1e6      	bne.n	8007258 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3308      	adds	r3, #8
 8007290:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	f023 0301 	bic.w	r3, r3, #1
 80072a0:	663b      	str	r3, [r7, #96]	; 0x60
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072aa:	643a      	str	r2, [r7, #64]	; 0x40
 80072ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e5      	bne.n	800728a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2220      	movs	r2, #32
 80072c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a33      	ldr	r2, [pc, #204]	; (80073a4 <UART_RxISR_16BIT+0x1b4>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d01f      	beq.n	800731c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d018      	beq.n	800731c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	6a3b      	ldr	r3, [r7, #32]
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800730a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800730e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d12e      	bne.n	8007382 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	e853 3f00 	ldrex	r3, [r3]
 8007336:	60bb      	str	r3, [r7, #8]
   return(result);
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f023 0310 	bic.w	r3, r3, #16
 800733e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734c:	6979      	ldr	r1, [r7, #20]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	e841 2300 	strex	r3, r2, [r1]
 8007354:	613b      	str	r3, [r7, #16]
   return(result);
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1e6      	bne.n	800732a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	69db      	ldr	r3, [r3, #28]
 8007362:	f003 0310 	and.w	r3, r3, #16
 8007366:	2b10      	cmp	r3, #16
 8007368:	d103      	bne.n	8007372 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2210      	movs	r2, #16
 8007370:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007378:	4619      	mov	r1, r3
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fe ffd0 	bl	8006320 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007380:	e00b      	b.n	800739a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7fa fdfa 	bl	8001f7c <HAL_UART_RxCpltCallback>
}
 8007388:	e007      	b.n	800739a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699a      	ldr	r2, [r3, #24]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f042 0208 	orr.w	r2, r2, #8
 8007398:	619a      	str	r2, [r3, #24]
}
 800739a:	bf00      	nop
 800739c:	3770      	adds	r7, #112	; 0x70
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	40008000 	.word	0x40008000

080073a8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b0ac      	sub	sp, #176	; 0xb0
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80073b6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69db      	ldr	r3, [r3, #28]
 80073c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073de:	2b22      	cmp	r3, #34	; 0x22
 80073e0:	f040 8182 	bne.w	80076e8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80073ea:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073ee:	e125      	b.n	800763c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073fa:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80073fe:	b2d9      	uxtb	r1, r3
 8007400:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007404:	b2da      	uxtb	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800740a:	400a      	ands	r2, r1
 800740c:	b2d2      	uxtb	r2, r2
 800740e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	69db      	ldr	r3, [r3, #28]
 8007432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	2b00      	cmp	r3, #0
 8007440:	d053      	beq.n	80074ea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007442:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d011      	beq.n	8007472 <UART_RxISR_8BIT_FIFOEN+0xca>
 800744e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00b      	beq.n	8007472 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	2201      	movs	r2, #1
 8007460:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007468:	f043 0201 	orr.w	r2, r3, #1
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007472:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d011      	beq.n	80074a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800747e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00b      	beq.n	80074a2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2202      	movs	r2, #2
 8007490:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007498:	f043 0204 	orr.w	r2, r3, #4
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d011      	beq.n	80074d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80074ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2204      	movs	r2, #4
 80074c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074c8:	f043 0202 	orr.w	r2, r3, #2
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d006      	beq.n	80074ea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7fe ff15 	bl	800630c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f040 80a2 	bne.w	800763c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007500:	e853 3f00 	ldrex	r3, [r3]
 8007504:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8007506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800750c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800751a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800751c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8007520:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007522:	e841 2300 	strex	r3, r2, [r1]
 8007526:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8007528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1e4      	bne.n	80074f8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3308      	adds	r3, #8
 8007534:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007538:	e853 3f00 	ldrex	r3, [r3]
 800753c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800753e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007544:	f023 0301 	bic.w	r3, r3, #1
 8007548:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3308      	adds	r3, #8
 8007552:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007556:	66ba      	str	r2, [r7, #104]	; 0x68
 8007558:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800755c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800755e:	e841 2300 	strex	r3, r2, [r1]
 8007562:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007564:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1e1      	bne.n	800752e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2220      	movs	r2, #32
 800756e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a5f      	ldr	r2, [pc, #380]	; (8007700 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d021      	beq.n	80075cc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d01a      	beq.n	80075cc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800759c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800759e:	e853 3f00 	ldrex	r3, [r3]
 80075a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80075a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80075b8:	657b      	str	r3, [r7, #84]	; 0x54
 80075ba:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075c0:	e841 2300 	strex	r3, r2, [r1]
 80075c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d1e4      	bne.n	8007596 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d130      	bne.n	8007636 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e2:	e853 3f00 	ldrex	r3, [r3]
 80075e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	f023 0310 	bic.w	r3, r3, #16
 80075ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80075fc:	643b      	str	r3, [r7, #64]	; 0x40
 80075fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007602:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800760a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e4      	bne.n	80075da <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	f003 0310 	and.w	r3, r3, #16
 800761a:	2b10      	cmp	r3, #16
 800761c:	d103      	bne.n	8007626 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2210      	movs	r2, #16
 8007624:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800762c:	4619      	mov	r1, r3
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f7fe fe76 	bl	8006320 <HAL_UARTEx_RxEventCallback>
 8007634:	e002      	b.n	800763c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7fa fca0 	bl	8001f7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800763c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007644:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007648:	f003 0320 	and.w	r3, r3, #32
 800764c:	2b00      	cmp	r3, #0
 800764e:	f47f aecf 	bne.w	80073f0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007658:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800765c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007660:	2b00      	cmp	r3, #0
 8007662:	d049      	beq.n	80076f8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800766a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800766e:	429a      	cmp	r2, r3
 8007670:	d242      	bcs.n	80076f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	3308      	adds	r3, #8
 8007678:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	e853 3f00 	ldrex	r3, [r3]
 8007680:	61fb      	str	r3, [r7, #28]
   return(result);
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3308      	adds	r3, #8
 8007692:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800769c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800769e:	e841 2300 	strex	r3, r2, [r1]
 80076a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d1e3      	bne.n	8007672 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a15      	ldr	r2, [pc, #84]	; (8007704 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80076ae:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f043 0320 	orr.w	r3, r3, #32
 80076c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076d2:	61bb      	str	r3, [r7, #24]
 80076d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6979      	ldr	r1, [r7, #20]
 80076d8:	69ba      	ldr	r2, [r7, #24]
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	613b      	str	r3, [r7, #16]
   return(result);
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e4      	bne.n	80076b0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076e6:	e007      	b.n	80076f8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	699a      	ldr	r2, [r3, #24]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f042 0208 	orr.w	r2, r2, #8
 80076f6:	619a      	str	r2, [r3, #24]
}
 80076f8:	bf00      	nop
 80076fa:	37b0      	adds	r7, #176	; 0xb0
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	40008000 	.word	0x40008000
 8007704:	08007039 	.word	0x08007039

08007708 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b0ae      	sub	sp, #184	; 0xb8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007716:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69db      	ldr	r3, [r3, #28]
 8007720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800773e:	2b22      	cmp	r3, #34	; 0x22
 8007740:	f040 8186 	bne.w	8007a50 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800774a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800774e:	e129      	b.n	80079a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007756:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800775e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007762:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007766:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800776a:	4013      	ands	r3, r2
 800776c:	b29a      	uxth	r2, r3
 800776e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007772:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007778:	1c9a      	adds	r2, r3, #2
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007784:	b29b      	uxth	r3, r3
 8007786:	3b01      	subs	r3, #1
 8007788:	b29a      	uxth	r2, r3
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	69db      	ldr	r3, [r3, #28]
 8007796:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800779a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800779e:	f003 0307 	and.w	r3, r3, #7
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d053      	beq.n	800784e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d011      	beq.n	80077d6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80077b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2201      	movs	r2, #1
 80077c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077cc:	f043 0201 	orr.w	r2, r3, #1
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d011      	beq.n	8007806 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80077e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00b      	beq.n	8007806 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2202      	movs	r2, #2
 80077f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077fc:	f043 0204 	orr.w	r2, r3, #4
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007806:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800780a:	f003 0304 	and.w	r3, r3, #4
 800780e:	2b00      	cmp	r3, #0
 8007810:	d011      	beq.n	8007836 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00b      	beq.n	8007836 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2204      	movs	r2, #4
 8007824:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782c:	f043 0202 	orr.w	r2, r3, #2
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800783c:	2b00      	cmp	r3, #0
 800783e:	d006      	beq.n	800784e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f7fe fd63 	bl	800630c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2200      	movs	r2, #0
 800784a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007854:	b29b      	uxth	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	f040 80a4 	bne.w	80079a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007864:	e853 3f00 	ldrex	r3, [r3]
 8007868:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800786a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800786c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007870:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	461a      	mov	r2, r3
 800787a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800787e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007882:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007884:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007886:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800788a:	e841 2300 	strex	r3, r2, [r1]
 800788e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1e2      	bne.n	800785c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3308      	adds	r3, #8
 800789c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800789e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a0:	e853 3f00 	ldrex	r3, [r3]
 80078a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80078a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ac:	f023 0301 	bic.w	r3, r3, #1
 80078b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3308      	adds	r3, #8
 80078ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80078be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80078c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80078c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80078c6:	e841 2300 	strex	r3, r2, [r1]
 80078ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80078cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e1      	bne.n	8007896 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2220      	movs	r2, #32
 80078d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2200      	movs	r2, #0
 80078de:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a5f      	ldr	r2, [pc, #380]	; (8007a68 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d021      	beq.n	8007934 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d01a      	beq.n	8007934 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007906:	e853 3f00 	ldrex	r3, [r3]
 800790a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800790c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800790e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007912:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007920:	65bb      	str	r3, [r7, #88]	; 0x58
 8007922:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800792e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e4      	bne.n	80078fe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d130      	bne.n	800799e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	e853 3f00 	ldrex	r3, [r3]
 800794e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007952:	f023 0310 	bic.w	r3, r3, #16
 8007956:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007964:	647b      	str	r3, [r7, #68]	; 0x44
 8007966:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800796a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800796c:	e841 2300 	strex	r3, r2, [r1]
 8007970:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1e4      	bne.n	8007942 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b10      	cmp	r3, #16
 8007984:	d103      	bne.n	800798e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2210      	movs	r2, #16
 800798c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f7fe fcc2 	bl	8006320 <HAL_UARTEx_RxEventCallback>
 800799c:	e002      	b.n	80079a4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f7fa faec 	bl	8001f7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079a4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d006      	beq.n	80079ba <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80079ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f47f aecb 	bne.w	8007750 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079c0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d049      	beq.n	8007a60 <UART_RxISR_16BIT_FIFOEN+0x358>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80079d2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d242      	bcs.n	8007a60 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	3308      	adds	r3, #8
 80079e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	623b      	str	r3, [r7, #32]
   return(result);
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	3308      	adds	r3, #8
 80079fa:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80079fe:	633a      	str	r2, [r7, #48]	; 0x30
 8007a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a06:	e841 2300 	strex	r3, r2, [r1]
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d1e3      	bne.n	80079da <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a15      	ldr	r2, [pc, #84]	; (8007a6c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007a16:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f043 0320 	orr.w	r3, r3, #32
 8007a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	461a      	mov	r2, r3
 8007a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	69b9      	ldr	r1, [r7, #24]
 8007a40:	69fa      	ldr	r2, [r7, #28]
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	617b      	str	r3, [r7, #20]
   return(result);
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e4      	bne.n	8007a18 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a4e:	e007      	b.n	8007a60 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0208 	orr.w	r2, r2, #8
 8007a5e:	619a      	str	r2, [r3, #24]
}
 8007a60:	bf00      	nop
 8007a62:	37b8      	adds	r7, #184	; 0xb8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	40008000 	.word	0x40008000
 8007a6c:	080071f1 	.word	0x080071f1

08007a70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d101      	bne.n	8007ac2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007abe:	2302      	movs	r3, #2
 8007ac0:	e027      	b.n	8007b12 <HAL_UARTEx_DisableFifoMode+0x66>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2224      	movs	r2, #36	; 0x24
 8007ace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f022 0201 	bic.w	r2, r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007af0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2220      	movs	r2, #32
 8007b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d101      	bne.n	8007b36 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b32:	2302      	movs	r3, #2
 8007b34:	e02d      	b.n	8007b92 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2224      	movs	r2, #36	; 0x24
 8007b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0201 	bic.w	r2, r2, #1
 8007b5c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	683a      	ldr	r2, [r7, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f850 	bl	8007c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	68fa      	ldr	r2, [r7, #12]
 8007b7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2220      	movs	r2, #32
 8007b84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}

08007b9a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d101      	bne.n	8007bb2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bae:	2302      	movs	r3, #2
 8007bb0:	e02d      	b.n	8007c0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2224      	movs	r2, #36	; 0x24
 8007bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f022 0201 	bic.w	r2, r2, #1
 8007bd8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	430a      	orrs	r2, r1
 8007bec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f812 	bl	8007c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68fa      	ldr	r2, [r7, #12]
 8007bfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2220      	movs	r2, #32
 8007c00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2200      	movs	r2, #0
 8007c08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d108      	bne.n	8007c3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2201      	movs	r2, #1
 8007c34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c38:	e031      	b.n	8007c9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c3a:	2308      	movs	r3, #8
 8007c3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c3e:	2308      	movs	r3, #8
 8007c40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	0e5b      	lsrs	r3, r3, #25
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 0307 	and.w	r3, r3, #7
 8007c50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	0f5b      	lsrs	r3, r3, #29
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	7b3a      	ldrb	r2, [r7, #12]
 8007c66:	4911      	ldr	r1, [pc, #68]	; (8007cac <UARTEx_SetNbDataToProcess+0x94>)
 8007c68:	5c8a      	ldrb	r2, [r1, r2]
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c6e:	7b3a      	ldrb	r2, [r7, #12]
 8007c70:	490f      	ldr	r1, [pc, #60]	; (8007cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8007c72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c74:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c78:	b29a      	uxth	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c80:	7bfb      	ldrb	r3, [r7, #15]
 8007c82:	7b7a      	ldrb	r2, [r7, #13]
 8007c84:	4909      	ldr	r1, [pc, #36]	; (8007cac <UARTEx_SetNbDataToProcess+0x94>)
 8007c86:	5c8a      	ldrb	r2, [r1, r2]
 8007c88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c8c:	7b7a      	ldrb	r2, [r7, #13]
 8007c8e:	4908      	ldr	r1, [pc, #32]	; (8007cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8007c90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c92:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c9e:	bf00      	nop
 8007ca0:	3714      	adds	r7, #20
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	0800ae24 	.word	0x0800ae24
 8007cb0:	0800ae2c 	.word	0x0800ae2c

08007cb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08a      	sub	sp, #40	; 0x28
 8007cb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cbe:	4b7d      	ldr	r3, [pc, #500]	; (8007eb4 <xTaskIncrementTick+0x200>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	f040 80ec 	bne.w	8007ea0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007cc8:	4b7b      	ldr	r3, [pc, #492]	; (8007eb8 <xTaskIncrementTick+0x204>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007cd0:	4a79      	ldr	r2, [pc, #484]	; (8007eb8 <xTaskIncrementTick+0x204>)
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d120      	bne.n	8007d1e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8007cdc:	4b77      	ldr	r3, [pc, #476]	; (8007ebc <xTaskIncrementTick+0x208>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8007cf8:	bf00      	nop
 8007cfa:	e7fe      	b.n	8007cfa <xTaskIncrementTick+0x46>
 8007cfc:	4b6f      	ldr	r3, [pc, #444]	; (8007ebc <xTaskIncrementTick+0x208>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	61fb      	str	r3, [r7, #28]
 8007d02:	4b6f      	ldr	r3, [pc, #444]	; (8007ec0 <xTaskIncrementTick+0x20c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a6d      	ldr	r2, [pc, #436]	; (8007ebc <xTaskIncrementTick+0x208>)
 8007d08:	6013      	str	r3, [r2, #0]
 8007d0a:	4a6d      	ldr	r2, [pc, #436]	; (8007ec0 <xTaskIncrementTick+0x20c>)
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	4b6c      	ldr	r3, [pc, #432]	; (8007ec4 <xTaskIncrementTick+0x210>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	3301      	adds	r3, #1
 8007d16:	4a6b      	ldr	r2, [pc, #428]	; (8007ec4 <xTaskIncrementTick+0x210>)
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	f000 f93d 	bl	8007f98 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007d1e:	4b6a      	ldr	r3, [pc, #424]	; (8007ec8 <xTaskIncrementTick+0x214>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6a3a      	ldr	r2, [r7, #32]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	f0c0 80a6 	bcc.w	8007e76 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d2a:	4b64      	ldr	r3, [pc, #400]	; (8007ebc <xTaskIncrementTick+0x208>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d34:	4b64      	ldr	r3, [pc, #400]	; (8007ec8 <xTaskIncrementTick+0x214>)
 8007d36:	f04f 32ff 	mov.w	r2, #4294967295
 8007d3a:	601a      	str	r2, [r3, #0]
                    break;
 8007d3c:	e09b      	b.n	8007e76 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d3e:	4b5f      	ldr	r3, [pc, #380]	; (8007ebc <xTaskIncrementTick+0x208>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8007d4e:	6a3a      	ldr	r2, [r7, #32]
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d203      	bcs.n	8007d5e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007d56:	4a5c      	ldr	r2, [pc, #368]	; (8007ec8 <xTaskIncrementTick+0x214>)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8007d5c:	e08b      	b.n	8007e76 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	613b      	str	r3, [r7, #16]
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	68d2      	ldr	r2, [r2, #12]
 8007d6c:	609a      	str	r2, [r3, #8]
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	69ba      	ldr	r2, [r7, #24]
 8007d74:	6892      	ldr	r2, [r2, #8]
 8007d76:	605a      	str	r2, [r3, #4]
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	685a      	ldr	r2, [r3, #4]
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	3304      	adds	r3, #4
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d103      	bne.n	8007d8c <xTaskIncrementTick+0xd8>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	68da      	ldr	r2, [r3, #12]
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	605a      	str	r2, [r3, #4]
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	615a      	str	r2, [r3, #20]
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	1e5a      	subs	r2, r3, #1
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01e      	beq.n	8007de2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007da4:	69bb      	ldr	r3, [r7, #24]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	69bb      	ldr	r3, [r7, #24]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	69ba      	ldr	r2, [r7, #24]
 8007db0:	6a12      	ldr	r2, [r2, #32]
 8007db2:	609a      	str	r2, [r3, #8]
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	69ba      	ldr	r2, [r7, #24]
 8007dba:	69d2      	ldr	r2, [r2, #28]
 8007dbc:	605a      	str	r2, [r3, #4]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	685a      	ldr	r2, [r3, #4]
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	3318      	adds	r3, #24
 8007dc6:	429a      	cmp	r2, r3
 8007dc8:	d103      	bne.n	8007dd2 <xTaskIncrementTick+0x11e>
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	605a      	str	r2, [r3, #4]
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	629a      	str	r2, [r3, #40]	; 0x28
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	1e5a      	subs	r2, r3, #1
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de6:	2201      	movs	r2, #1
 8007de8:	409a      	lsls	r2, r3
 8007dea:	4b38      	ldr	r3, [pc, #224]	; (8007ecc <xTaskIncrementTick+0x218>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	4a36      	ldr	r2, [pc, #216]	; (8007ecc <xTaskIncrementTick+0x218>)
 8007df2:	6013      	str	r3, [r2, #0]
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df8:	4935      	ldr	r1, [pc, #212]	; (8007ed0 <xTaskIncrementTick+0x21c>)
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	3304      	adds	r3, #4
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	609a      	str	r2, [r3, #8]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	689a      	ldr	r2, [r3, #8]
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	60da      	str	r2, [r3, #12]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	689b      	ldr	r3, [r3, #8]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	3204      	adds	r2, #4
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	1d1a      	adds	r2, r3, #4
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	609a      	str	r2, [r3, #8]
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2e:	4613      	mov	r3, r2
 8007e30:	009b      	lsls	r3, r3, #2
 8007e32:	4413      	add	r3, r2
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	4a26      	ldr	r2, [pc, #152]	; (8007ed0 <xTaskIncrementTick+0x21c>)
 8007e38:	441a      	add	r2, r3
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	615a      	str	r2, [r3, #20]
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e42:	4923      	ldr	r1, [pc, #140]	; (8007ed0 <xTaskIncrementTick+0x21c>)
 8007e44:	4613      	mov	r3, r2
 8007e46:	009b      	lsls	r3, r3, #2
 8007e48:	4413      	add	r3, r2
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	440b      	add	r3, r1
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	1c59      	adds	r1, r3, #1
 8007e52:	481f      	ldr	r0, [pc, #124]	; (8007ed0 <xTaskIncrementTick+0x21c>)
 8007e54:	4613      	mov	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4413      	add	r3, r2
 8007e5a:	009b      	lsls	r3, r3, #2
 8007e5c:	4403      	add	r3, r0
 8007e5e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e64:	4b1b      	ldr	r3, [pc, #108]	; (8007ed4 <xTaskIncrementTick+0x220>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	f67f af5d 	bls.w	8007d2a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8007e70:	2301      	movs	r3, #1
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e74:	e759      	b.n	8007d2a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007e76:	4b17      	ldr	r3, [pc, #92]	; (8007ed4 <xTaskIncrementTick+0x220>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e7c:	4914      	ldr	r1, [pc, #80]	; (8007ed0 <xTaskIncrementTick+0x21c>)
 8007e7e:	4613      	mov	r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	440b      	add	r3, r1
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d901      	bls.n	8007e92 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8007e92:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <xTaskIncrementTick+0x224>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d007      	beq.n	8007eaa <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9e:	e004      	b.n	8007eaa <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007ea0:	4b0e      	ldr	r3, [pc, #56]	; (8007edc <xTaskIncrementTick+0x228>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	4a0d      	ldr	r2, [pc, #52]	; (8007edc <xTaskIncrementTick+0x228>)
 8007ea8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3728      	adds	r7, #40	; 0x28
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000664 	.word	0x20000664
 8007eb8:	2000064c 	.word	0x2000064c
 8007ebc:	20000644 	.word	0x20000644
 8007ec0:	20000648 	.word	0x20000648
 8007ec4:	2000065c 	.word	0x2000065c
 8007ec8:	20000660 	.word	0x20000660
 8007ecc:	20000650 	.word	0x20000650
 8007ed0:	200005e0 	.word	0x200005e0
 8007ed4:	200005dc 	.word	0x200005dc
 8007ed8:	20000658 	.word	0x20000658
 8007edc:	20000654 	.word	0x20000654

08007ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	b087      	sub	sp, #28
 8007ee4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007ee6:	4b27      	ldr	r3, [pc, #156]	; (8007f84 <vTaskSwitchContext+0xa4>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007eee:	4b26      	ldr	r3, [pc, #152]	; (8007f88 <vTaskSwitchContext+0xa8>)
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007ef4:	e03f      	b.n	8007f76 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8007ef6:	4b24      	ldr	r3, [pc, #144]	; (8007f88 <vTaskSwitchContext+0xa8>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007efc:	4b23      	ldr	r3, [pc, #140]	; (8007f8c <vTaskSwitchContext+0xac>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	fab3 f383 	clz	r3, r3
 8007f08:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007f0a:	7afb      	ldrb	r3, [r7, #11]
 8007f0c:	f1c3 031f 	rsb	r3, r3, #31
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	491f      	ldr	r1, [pc, #124]	; (8007f90 <vTaskSwitchContext+0xb0>)
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	4613      	mov	r3, r2
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	440b      	add	r3, r1
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10a      	bne.n	8007f3c <vTaskSwitchContext+0x5c>
        __asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	607b      	str	r3, [r7, #4]
    }
 8007f38:	bf00      	nop
 8007f3a:	e7fe      	b.n	8007f3a <vTaskSwitchContext+0x5a>
 8007f3c:	697a      	ldr	r2, [r7, #20]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	4413      	add	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4a12      	ldr	r2, [pc, #72]	; (8007f90 <vTaskSwitchContext+0xb0>)
 8007f48:	4413      	add	r3, r2
 8007f4a:	613b      	str	r3, [r7, #16]
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	605a      	str	r2, [r3, #4]
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d104      	bne.n	8007f6c <vTaskSwitchContext+0x8c>
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	685a      	ldr	r2, [r3, #4]
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	605a      	str	r2, [r3, #4]
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	4a08      	ldr	r2, [pc, #32]	; (8007f94 <vTaskSwitchContext+0xb4>)
 8007f74:	6013      	str	r3, [r2, #0]
}
 8007f76:	bf00      	nop
 8007f78:	371c      	adds	r7, #28
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	20000664 	.word	0x20000664
 8007f88:	20000658 	.word	0x20000658
 8007f8c:	20000650 	.word	0x20000650
 8007f90:	200005e0 	.word	0x200005e0
 8007f94:	200005dc 	.word	0x200005dc

08007f98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f98:	b480      	push	{r7}
 8007f9a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f9c:	4b0a      	ldr	r3, [pc, #40]	; (8007fc8 <prvResetNextTaskUnblockTime+0x30>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d104      	bne.n	8007fb0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007fa6:	4b09      	ldr	r3, [pc, #36]	; (8007fcc <prvResetNextTaskUnblockTime+0x34>)
 8007fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007fae:	e005      	b.n	8007fbc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fb0:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <prvResetNextTaskUnblockTime+0x30>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a04      	ldr	r2, [pc, #16]	; (8007fcc <prvResetNextTaskUnblockTime+0x34>)
 8007fba:	6013      	str	r3, [r2, #0]
}
 8007fbc:	bf00      	nop
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	20000644 	.word	0x20000644
 8007fcc:	20000660 	.word	0x20000660

08007fd0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007fd0:	4b07      	ldr	r3, [pc, #28]	; (8007ff0 <pxCurrentTCBConst2>)
 8007fd2:	6819      	ldr	r1, [r3, #0]
 8007fd4:	6808      	ldr	r0, [r1, #0]
 8007fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fda:	f380 8809 	msr	PSP, r0
 8007fde:	f3bf 8f6f 	isb	sy
 8007fe2:	f04f 0000 	mov.w	r0, #0
 8007fe6:	f380 8811 	msr	BASEPRI, r0
 8007fea:	4770      	bx	lr
 8007fec:	f3af 8000 	nop.w

08007ff0 <pxCurrentTCBConst2>:
 8007ff0:	200005dc 	.word	0x200005dc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
	...

08008000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008000:	f3ef 8009 	mrs	r0, PSP
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	4b15      	ldr	r3, [pc, #84]	; (8008060 <pxCurrentTCBConst>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	f01e 0f10 	tst.w	lr, #16
 8008010:	bf08      	it	eq
 8008012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800801a:	6010      	str	r0, [r2, #0]
 800801c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008024:	f380 8811 	msr	BASEPRI, r0
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f7ff ff56 	bl	8007ee0 <vTaskSwitchContext>
 8008034:	f04f 0000 	mov.w	r0, #0
 8008038:	f380 8811 	msr	BASEPRI, r0
 800803c:	bc09      	pop	{r0, r3}
 800803e:	6819      	ldr	r1, [r3, #0]
 8008040:	6808      	ldr	r0, [r1, #0]
 8008042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008046:	f01e 0f10 	tst.w	lr, #16
 800804a:	bf08      	it	eq
 800804c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008050:	f380 8809 	msr	PSP, r0
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	f3af 8000 	nop.w

08008060 <pxCurrentTCBConst>:
 8008060:	200005dc 	.word	0x200005dc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop

08008068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
        __asm volatile
 800806e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008072:	f383 8811 	msr	BASEPRI, r3
 8008076:	f3bf 8f6f 	isb	sy
 800807a:	f3bf 8f4f 	dsb	sy
 800807e:	607b      	str	r3, [r7, #4]
    }
 8008080:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008082:	f7ff fe17 	bl	8007cb4 <xTaskIncrementTick>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800808c:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <SysTick_Handler+0x40>)
 800808e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008092:	601a      	str	r2, [r3, #0]
 8008094:	2300      	movs	r3, #0
 8008096:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800809e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80080a0:	bf00      	nop
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	e000ed04 	.word	0xe000ed04

080080ac <__cvt>:
 80080ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080b0:	ec55 4b10 	vmov	r4, r5, d0
 80080b4:	2d00      	cmp	r5, #0
 80080b6:	460e      	mov	r6, r1
 80080b8:	4619      	mov	r1, r3
 80080ba:	462b      	mov	r3, r5
 80080bc:	bfbb      	ittet	lt
 80080be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80080c2:	461d      	movlt	r5, r3
 80080c4:	2300      	movge	r3, #0
 80080c6:	232d      	movlt	r3, #45	; 0x2d
 80080c8:	700b      	strb	r3, [r1, #0]
 80080ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80080cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80080d0:	4691      	mov	r9, r2
 80080d2:	f023 0820 	bic.w	r8, r3, #32
 80080d6:	bfbc      	itt	lt
 80080d8:	4622      	movlt	r2, r4
 80080da:	4614      	movlt	r4, r2
 80080dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080e0:	d005      	beq.n	80080ee <__cvt+0x42>
 80080e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80080e6:	d100      	bne.n	80080ea <__cvt+0x3e>
 80080e8:	3601      	adds	r6, #1
 80080ea:	2102      	movs	r1, #2
 80080ec:	e000      	b.n	80080f0 <__cvt+0x44>
 80080ee:	2103      	movs	r1, #3
 80080f0:	ab03      	add	r3, sp, #12
 80080f2:	9301      	str	r3, [sp, #4]
 80080f4:	ab02      	add	r3, sp, #8
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	ec45 4b10 	vmov	d0, r4, r5
 80080fc:	4653      	mov	r3, sl
 80080fe:	4632      	mov	r2, r6
 8008100:	f000 fe76 	bl	8008df0 <_dtoa_r>
 8008104:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008108:	4607      	mov	r7, r0
 800810a:	d102      	bne.n	8008112 <__cvt+0x66>
 800810c:	f019 0f01 	tst.w	r9, #1
 8008110:	d022      	beq.n	8008158 <__cvt+0xac>
 8008112:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008116:	eb07 0906 	add.w	r9, r7, r6
 800811a:	d110      	bne.n	800813e <__cvt+0x92>
 800811c:	783b      	ldrb	r3, [r7, #0]
 800811e:	2b30      	cmp	r3, #48	; 0x30
 8008120:	d10a      	bne.n	8008138 <__cvt+0x8c>
 8008122:	2200      	movs	r2, #0
 8008124:	2300      	movs	r3, #0
 8008126:	4620      	mov	r0, r4
 8008128:	4629      	mov	r1, r5
 800812a:	f7f8 fd05 	bl	8000b38 <__aeabi_dcmpeq>
 800812e:	b918      	cbnz	r0, 8008138 <__cvt+0x8c>
 8008130:	f1c6 0601 	rsb	r6, r6, #1
 8008134:	f8ca 6000 	str.w	r6, [sl]
 8008138:	f8da 3000 	ldr.w	r3, [sl]
 800813c:	4499      	add	r9, r3
 800813e:	2200      	movs	r2, #0
 8008140:	2300      	movs	r3, #0
 8008142:	4620      	mov	r0, r4
 8008144:	4629      	mov	r1, r5
 8008146:	f7f8 fcf7 	bl	8000b38 <__aeabi_dcmpeq>
 800814a:	b108      	cbz	r0, 8008150 <__cvt+0xa4>
 800814c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008150:	2230      	movs	r2, #48	; 0x30
 8008152:	9b03      	ldr	r3, [sp, #12]
 8008154:	454b      	cmp	r3, r9
 8008156:	d307      	bcc.n	8008168 <__cvt+0xbc>
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800815c:	1bdb      	subs	r3, r3, r7
 800815e:	4638      	mov	r0, r7
 8008160:	6013      	str	r3, [r2, #0]
 8008162:	b004      	add	sp, #16
 8008164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008168:	1c59      	adds	r1, r3, #1
 800816a:	9103      	str	r1, [sp, #12]
 800816c:	701a      	strb	r2, [r3, #0]
 800816e:	e7f0      	b.n	8008152 <__cvt+0xa6>

08008170 <__exponent>:
 8008170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008172:	4603      	mov	r3, r0
 8008174:	2900      	cmp	r1, #0
 8008176:	bfb8      	it	lt
 8008178:	4249      	neglt	r1, r1
 800817a:	f803 2b02 	strb.w	r2, [r3], #2
 800817e:	bfb4      	ite	lt
 8008180:	222d      	movlt	r2, #45	; 0x2d
 8008182:	222b      	movge	r2, #43	; 0x2b
 8008184:	2909      	cmp	r1, #9
 8008186:	7042      	strb	r2, [r0, #1]
 8008188:	dd2a      	ble.n	80081e0 <__exponent+0x70>
 800818a:	f10d 0207 	add.w	r2, sp, #7
 800818e:	4617      	mov	r7, r2
 8008190:	260a      	movs	r6, #10
 8008192:	4694      	mov	ip, r2
 8008194:	fb91 f5f6 	sdiv	r5, r1, r6
 8008198:	fb06 1415 	mls	r4, r6, r5, r1
 800819c:	3430      	adds	r4, #48	; 0x30
 800819e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80081a2:	460c      	mov	r4, r1
 80081a4:	2c63      	cmp	r4, #99	; 0x63
 80081a6:	f102 32ff 	add.w	r2, r2, #4294967295
 80081aa:	4629      	mov	r1, r5
 80081ac:	dcf1      	bgt.n	8008192 <__exponent+0x22>
 80081ae:	3130      	adds	r1, #48	; 0x30
 80081b0:	f1ac 0402 	sub.w	r4, ip, #2
 80081b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80081b8:	1c41      	adds	r1, r0, #1
 80081ba:	4622      	mov	r2, r4
 80081bc:	42ba      	cmp	r2, r7
 80081be:	d30a      	bcc.n	80081d6 <__exponent+0x66>
 80081c0:	f10d 0209 	add.w	r2, sp, #9
 80081c4:	eba2 020c 	sub.w	r2, r2, ip
 80081c8:	42bc      	cmp	r4, r7
 80081ca:	bf88      	it	hi
 80081cc:	2200      	movhi	r2, #0
 80081ce:	4413      	add	r3, r2
 80081d0:	1a18      	subs	r0, r3, r0
 80081d2:	b003      	add	sp, #12
 80081d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80081da:	f801 5f01 	strb.w	r5, [r1, #1]!
 80081de:	e7ed      	b.n	80081bc <__exponent+0x4c>
 80081e0:	2330      	movs	r3, #48	; 0x30
 80081e2:	3130      	adds	r1, #48	; 0x30
 80081e4:	7083      	strb	r3, [r0, #2]
 80081e6:	70c1      	strb	r1, [r0, #3]
 80081e8:	1d03      	adds	r3, r0, #4
 80081ea:	e7f1      	b.n	80081d0 <__exponent+0x60>

080081ec <_printf_float>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	ed2d 8b02 	vpush	{d8}
 80081f4:	b08d      	sub	sp, #52	; 0x34
 80081f6:	460c      	mov	r4, r1
 80081f8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081fc:	4616      	mov	r6, r2
 80081fe:	461f      	mov	r7, r3
 8008200:	4605      	mov	r5, r0
 8008202:	f000 fce7 	bl	8008bd4 <_localeconv_r>
 8008206:	f8d0 a000 	ldr.w	sl, [r0]
 800820a:	4650      	mov	r0, sl
 800820c:	f7f8 f868 	bl	80002e0 <strlen>
 8008210:	2300      	movs	r3, #0
 8008212:	930a      	str	r3, [sp, #40]	; 0x28
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	9305      	str	r3, [sp, #20]
 8008218:	f8d8 3000 	ldr.w	r3, [r8]
 800821c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008220:	3307      	adds	r3, #7
 8008222:	f023 0307 	bic.w	r3, r3, #7
 8008226:	f103 0208 	add.w	r2, r3, #8
 800822a:	f8c8 2000 	str.w	r2, [r8]
 800822e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008232:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008236:	9307      	str	r3, [sp, #28]
 8008238:	f8cd 8018 	str.w	r8, [sp, #24]
 800823c:	ee08 0a10 	vmov	s16, r0
 8008240:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008244:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008248:	4b9e      	ldr	r3, [pc, #632]	; (80084c4 <_printf_float+0x2d8>)
 800824a:	f04f 32ff 	mov.w	r2, #4294967295
 800824e:	f7f8 fca5 	bl	8000b9c <__aeabi_dcmpun>
 8008252:	bb88      	cbnz	r0, 80082b8 <_printf_float+0xcc>
 8008254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008258:	4b9a      	ldr	r3, [pc, #616]	; (80084c4 <_printf_float+0x2d8>)
 800825a:	f04f 32ff 	mov.w	r2, #4294967295
 800825e:	f7f8 fc7f 	bl	8000b60 <__aeabi_dcmple>
 8008262:	bb48      	cbnz	r0, 80082b8 <_printf_float+0xcc>
 8008264:	2200      	movs	r2, #0
 8008266:	2300      	movs	r3, #0
 8008268:	4640      	mov	r0, r8
 800826a:	4649      	mov	r1, r9
 800826c:	f7f8 fc6e 	bl	8000b4c <__aeabi_dcmplt>
 8008270:	b110      	cbz	r0, 8008278 <_printf_float+0x8c>
 8008272:	232d      	movs	r3, #45	; 0x2d
 8008274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008278:	4a93      	ldr	r2, [pc, #588]	; (80084c8 <_printf_float+0x2dc>)
 800827a:	4b94      	ldr	r3, [pc, #592]	; (80084cc <_printf_float+0x2e0>)
 800827c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008280:	bf94      	ite	ls
 8008282:	4690      	movls	r8, r2
 8008284:	4698      	movhi	r8, r3
 8008286:	2303      	movs	r3, #3
 8008288:	6123      	str	r3, [r4, #16]
 800828a:	9b05      	ldr	r3, [sp, #20]
 800828c:	f023 0304 	bic.w	r3, r3, #4
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	f04f 0900 	mov.w	r9, #0
 8008296:	9700      	str	r7, [sp, #0]
 8008298:	4633      	mov	r3, r6
 800829a:	aa0b      	add	r2, sp, #44	; 0x2c
 800829c:	4621      	mov	r1, r4
 800829e:	4628      	mov	r0, r5
 80082a0:	f000 f9da 	bl	8008658 <_printf_common>
 80082a4:	3001      	adds	r0, #1
 80082a6:	f040 8090 	bne.w	80083ca <_printf_float+0x1de>
 80082aa:	f04f 30ff 	mov.w	r0, #4294967295
 80082ae:	b00d      	add	sp, #52	; 0x34
 80082b0:	ecbd 8b02 	vpop	{d8}
 80082b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	4640      	mov	r0, r8
 80082be:	4649      	mov	r1, r9
 80082c0:	f7f8 fc6c 	bl	8000b9c <__aeabi_dcmpun>
 80082c4:	b140      	cbz	r0, 80082d8 <_printf_float+0xec>
 80082c6:	464b      	mov	r3, r9
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	bfbc      	itt	lt
 80082cc:	232d      	movlt	r3, #45	; 0x2d
 80082ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80082d2:	4a7f      	ldr	r2, [pc, #508]	; (80084d0 <_printf_float+0x2e4>)
 80082d4:	4b7f      	ldr	r3, [pc, #508]	; (80084d4 <_printf_float+0x2e8>)
 80082d6:	e7d1      	b.n	800827c <_printf_float+0x90>
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80082de:	9206      	str	r2, [sp, #24]
 80082e0:	1c5a      	adds	r2, r3, #1
 80082e2:	d13f      	bne.n	8008364 <_printf_float+0x178>
 80082e4:	2306      	movs	r3, #6
 80082e6:	6063      	str	r3, [r4, #4]
 80082e8:	9b05      	ldr	r3, [sp, #20]
 80082ea:	6861      	ldr	r1, [r4, #4]
 80082ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082f0:	2300      	movs	r3, #0
 80082f2:	9303      	str	r3, [sp, #12]
 80082f4:	ab0a      	add	r3, sp, #40	; 0x28
 80082f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082fa:	ab09      	add	r3, sp, #36	; 0x24
 80082fc:	ec49 8b10 	vmov	d0, r8, r9
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	6022      	str	r2, [r4, #0]
 8008304:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008308:	4628      	mov	r0, r5
 800830a:	f7ff fecf 	bl	80080ac <__cvt>
 800830e:	9b06      	ldr	r3, [sp, #24]
 8008310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008312:	2b47      	cmp	r3, #71	; 0x47
 8008314:	4680      	mov	r8, r0
 8008316:	d108      	bne.n	800832a <_printf_float+0x13e>
 8008318:	1cc8      	adds	r0, r1, #3
 800831a:	db02      	blt.n	8008322 <_printf_float+0x136>
 800831c:	6863      	ldr	r3, [r4, #4]
 800831e:	4299      	cmp	r1, r3
 8008320:	dd41      	ble.n	80083a6 <_printf_float+0x1ba>
 8008322:	f1ab 0302 	sub.w	r3, fp, #2
 8008326:	fa5f fb83 	uxtb.w	fp, r3
 800832a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800832e:	d820      	bhi.n	8008372 <_printf_float+0x186>
 8008330:	3901      	subs	r1, #1
 8008332:	465a      	mov	r2, fp
 8008334:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008338:	9109      	str	r1, [sp, #36]	; 0x24
 800833a:	f7ff ff19 	bl	8008170 <__exponent>
 800833e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008340:	1813      	adds	r3, r2, r0
 8008342:	2a01      	cmp	r2, #1
 8008344:	4681      	mov	r9, r0
 8008346:	6123      	str	r3, [r4, #16]
 8008348:	dc02      	bgt.n	8008350 <_printf_float+0x164>
 800834a:	6822      	ldr	r2, [r4, #0]
 800834c:	07d2      	lsls	r2, r2, #31
 800834e:	d501      	bpl.n	8008354 <_printf_float+0x168>
 8008350:	3301      	adds	r3, #1
 8008352:	6123      	str	r3, [r4, #16]
 8008354:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008358:	2b00      	cmp	r3, #0
 800835a:	d09c      	beq.n	8008296 <_printf_float+0xaa>
 800835c:	232d      	movs	r3, #45	; 0x2d
 800835e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008362:	e798      	b.n	8008296 <_printf_float+0xaa>
 8008364:	9a06      	ldr	r2, [sp, #24]
 8008366:	2a47      	cmp	r2, #71	; 0x47
 8008368:	d1be      	bne.n	80082e8 <_printf_float+0xfc>
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1bc      	bne.n	80082e8 <_printf_float+0xfc>
 800836e:	2301      	movs	r3, #1
 8008370:	e7b9      	b.n	80082e6 <_printf_float+0xfa>
 8008372:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008376:	d118      	bne.n	80083aa <_printf_float+0x1be>
 8008378:	2900      	cmp	r1, #0
 800837a:	6863      	ldr	r3, [r4, #4]
 800837c:	dd0b      	ble.n	8008396 <_printf_float+0x1aa>
 800837e:	6121      	str	r1, [r4, #16]
 8008380:	b913      	cbnz	r3, 8008388 <_printf_float+0x19c>
 8008382:	6822      	ldr	r2, [r4, #0]
 8008384:	07d0      	lsls	r0, r2, #31
 8008386:	d502      	bpl.n	800838e <_printf_float+0x1a2>
 8008388:	3301      	adds	r3, #1
 800838a:	440b      	add	r3, r1
 800838c:	6123      	str	r3, [r4, #16]
 800838e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008390:	f04f 0900 	mov.w	r9, #0
 8008394:	e7de      	b.n	8008354 <_printf_float+0x168>
 8008396:	b913      	cbnz	r3, 800839e <_printf_float+0x1b2>
 8008398:	6822      	ldr	r2, [r4, #0]
 800839a:	07d2      	lsls	r2, r2, #31
 800839c:	d501      	bpl.n	80083a2 <_printf_float+0x1b6>
 800839e:	3302      	adds	r3, #2
 80083a0:	e7f4      	b.n	800838c <_printf_float+0x1a0>
 80083a2:	2301      	movs	r3, #1
 80083a4:	e7f2      	b.n	800838c <_printf_float+0x1a0>
 80083a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80083aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ac:	4299      	cmp	r1, r3
 80083ae:	db05      	blt.n	80083bc <_printf_float+0x1d0>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	6121      	str	r1, [r4, #16]
 80083b4:	07d8      	lsls	r0, r3, #31
 80083b6:	d5ea      	bpl.n	800838e <_printf_float+0x1a2>
 80083b8:	1c4b      	adds	r3, r1, #1
 80083ba:	e7e7      	b.n	800838c <_printf_float+0x1a0>
 80083bc:	2900      	cmp	r1, #0
 80083be:	bfd4      	ite	le
 80083c0:	f1c1 0202 	rsble	r2, r1, #2
 80083c4:	2201      	movgt	r2, #1
 80083c6:	4413      	add	r3, r2
 80083c8:	e7e0      	b.n	800838c <_printf_float+0x1a0>
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	055a      	lsls	r2, r3, #21
 80083ce:	d407      	bmi.n	80083e0 <_printf_float+0x1f4>
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	4642      	mov	r2, r8
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b8      	blx	r7
 80083da:	3001      	adds	r0, #1
 80083dc:	d12c      	bne.n	8008438 <_printf_float+0x24c>
 80083de:	e764      	b.n	80082aa <_printf_float+0xbe>
 80083e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80083e4:	f240 80e0 	bls.w	80085a8 <_printf_float+0x3bc>
 80083e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083ec:	2200      	movs	r2, #0
 80083ee:	2300      	movs	r3, #0
 80083f0:	f7f8 fba2 	bl	8000b38 <__aeabi_dcmpeq>
 80083f4:	2800      	cmp	r0, #0
 80083f6:	d034      	beq.n	8008462 <_printf_float+0x276>
 80083f8:	4a37      	ldr	r2, [pc, #220]	; (80084d8 <_printf_float+0x2ec>)
 80083fa:	2301      	movs	r3, #1
 80083fc:	4631      	mov	r1, r6
 80083fe:	4628      	mov	r0, r5
 8008400:	47b8      	blx	r7
 8008402:	3001      	adds	r0, #1
 8008404:	f43f af51 	beq.w	80082aa <_printf_float+0xbe>
 8008408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800840c:	429a      	cmp	r2, r3
 800840e:	db02      	blt.n	8008416 <_printf_float+0x22a>
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	07d8      	lsls	r0, r3, #31
 8008414:	d510      	bpl.n	8008438 <_printf_float+0x24c>
 8008416:	ee18 3a10 	vmov	r3, s16
 800841a:	4652      	mov	r2, sl
 800841c:	4631      	mov	r1, r6
 800841e:	4628      	mov	r0, r5
 8008420:	47b8      	blx	r7
 8008422:	3001      	adds	r0, #1
 8008424:	f43f af41 	beq.w	80082aa <_printf_float+0xbe>
 8008428:	f04f 0800 	mov.w	r8, #0
 800842c:	f104 091a 	add.w	r9, r4, #26
 8008430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008432:	3b01      	subs	r3, #1
 8008434:	4543      	cmp	r3, r8
 8008436:	dc09      	bgt.n	800844c <_printf_float+0x260>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	079b      	lsls	r3, r3, #30
 800843c:	f100 8107 	bmi.w	800864e <_printf_float+0x462>
 8008440:	68e0      	ldr	r0, [r4, #12]
 8008442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008444:	4298      	cmp	r0, r3
 8008446:	bfb8      	it	lt
 8008448:	4618      	movlt	r0, r3
 800844a:	e730      	b.n	80082ae <_printf_float+0xc2>
 800844c:	2301      	movs	r3, #1
 800844e:	464a      	mov	r2, r9
 8008450:	4631      	mov	r1, r6
 8008452:	4628      	mov	r0, r5
 8008454:	47b8      	blx	r7
 8008456:	3001      	adds	r0, #1
 8008458:	f43f af27 	beq.w	80082aa <_printf_float+0xbe>
 800845c:	f108 0801 	add.w	r8, r8, #1
 8008460:	e7e6      	b.n	8008430 <_printf_float+0x244>
 8008462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008464:	2b00      	cmp	r3, #0
 8008466:	dc39      	bgt.n	80084dc <_printf_float+0x2f0>
 8008468:	4a1b      	ldr	r2, [pc, #108]	; (80084d8 <_printf_float+0x2ec>)
 800846a:	2301      	movs	r3, #1
 800846c:	4631      	mov	r1, r6
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	f43f af19 	beq.w	80082aa <_printf_float+0xbe>
 8008478:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800847c:	4313      	orrs	r3, r2
 800847e:	d102      	bne.n	8008486 <_printf_float+0x29a>
 8008480:	6823      	ldr	r3, [r4, #0]
 8008482:	07d9      	lsls	r1, r3, #31
 8008484:	d5d8      	bpl.n	8008438 <_printf_float+0x24c>
 8008486:	ee18 3a10 	vmov	r3, s16
 800848a:	4652      	mov	r2, sl
 800848c:	4631      	mov	r1, r6
 800848e:	4628      	mov	r0, r5
 8008490:	47b8      	blx	r7
 8008492:	3001      	adds	r0, #1
 8008494:	f43f af09 	beq.w	80082aa <_printf_float+0xbe>
 8008498:	f04f 0900 	mov.w	r9, #0
 800849c:	f104 0a1a 	add.w	sl, r4, #26
 80084a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a2:	425b      	negs	r3, r3
 80084a4:	454b      	cmp	r3, r9
 80084a6:	dc01      	bgt.n	80084ac <_printf_float+0x2c0>
 80084a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084aa:	e792      	b.n	80083d2 <_printf_float+0x1e6>
 80084ac:	2301      	movs	r3, #1
 80084ae:	4652      	mov	r2, sl
 80084b0:	4631      	mov	r1, r6
 80084b2:	4628      	mov	r0, r5
 80084b4:	47b8      	blx	r7
 80084b6:	3001      	adds	r0, #1
 80084b8:	f43f aef7 	beq.w	80082aa <_printf_float+0xbe>
 80084bc:	f109 0901 	add.w	r9, r9, #1
 80084c0:	e7ee      	b.n	80084a0 <_printf_float+0x2b4>
 80084c2:	bf00      	nop
 80084c4:	7fefffff 	.word	0x7fefffff
 80084c8:	0800ae34 	.word	0x0800ae34
 80084cc:	0800ae38 	.word	0x0800ae38
 80084d0:	0800ae3c 	.word	0x0800ae3c
 80084d4:	0800ae40 	.word	0x0800ae40
 80084d8:	0800ae44 	.word	0x0800ae44
 80084dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084e0:	429a      	cmp	r2, r3
 80084e2:	bfa8      	it	ge
 80084e4:	461a      	movge	r2, r3
 80084e6:	2a00      	cmp	r2, #0
 80084e8:	4691      	mov	r9, r2
 80084ea:	dc37      	bgt.n	800855c <_printf_float+0x370>
 80084ec:	f04f 0b00 	mov.w	fp, #0
 80084f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084f4:	f104 021a 	add.w	r2, r4, #26
 80084f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084fa:	9305      	str	r3, [sp, #20]
 80084fc:	eba3 0309 	sub.w	r3, r3, r9
 8008500:	455b      	cmp	r3, fp
 8008502:	dc33      	bgt.n	800856c <_printf_float+0x380>
 8008504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008508:	429a      	cmp	r2, r3
 800850a:	db3b      	blt.n	8008584 <_printf_float+0x398>
 800850c:	6823      	ldr	r3, [r4, #0]
 800850e:	07da      	lsls	r2, r3, #31
 8008510:	d438      	bmi.n	8008584 <_printf_float+0x398>
 8008512:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008516:	eba2 0903 	sub.w	r9, r2, r3
 800851a:	9b05      	ldr	r3, [sp, #20]
 800851c:	1ad2      	subs	r2, r2, r3
 800851e:	4591      	cmp	r9, r2
 8008520:	bfa8      	it	ge
 8008522:	4691      	movge	r9, r2
 8008524:	f1b9 0f00 	cmp.w	r9, #0
 8008528:	dc35      	bgt.n	8008596 <_printf_float+0x3aa>
 800852a:	f04f 0800 	mov.w	r8, #0
 800852e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008532:	f104 0a1a 	add.w	sl, r4, #26
 8008536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800853a:	1a9b      	subs	r3, r3, r2
 800853c:	eba3 0309 	sub.w	r3, r3, r9
 8008540:	4543      	cmp	r3, r8
 8008542:	f77f af79 	ble.w	8008438 <_printf_float+0x24c>
 8008546:	2301      	movs	r3, #1
 8008548:	4652      	mov	r2, sl
 800854a:	4631      	mov	r1, r6
 800854c:	4628      	mov	r0, r5
 800854e:	47b8      	blx	r7
 8008550:	3001      	adds	r0, #1
 8008552:	f43f aeaa 	beq.w	80082aa <_printf_float+0xbe>
 8008556:	f108 0801 	add.w	r8, r8, #1
 800855a:	e7ec      	b.n	8008536 <_printf_float+0x34a>
 800855c:	4613      	mov	r3, r2
 800855e:	4631      	mov	r1, r6
 8008560:	4642      	mov	r2, r8
 8008562:	4628      	mov	r0, r5
 8008564:	47b8      	blx	r7
 8008566:	3001      	adds	r0, #1
 8008568:	d1c0      	bne.n	80084ec <_printf_float+0x300>
 800856a:	e69e      	b.n	80082aa <_printf_float+0xbe>
 800856c:	2301      	movs	r3, #1
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	9205      	str	r2, [sp, #20]
 8008574:	47b8      	blx	r7
 8008576:	3001      	adds	r0, #1
 8008578:	f43f ae97 	beq.w	80082aa <_printf_float+0xbe>
 800857c:	9a05      	ldr	r2, [sp, #20]
 800857e:	f10b 0b01 	add.w	fp, fp, #1
 8008582:	e7b9      	b.n	80084f8 <_printf_float+0x30c>
 8008584:	ee18 3a10 	vmov	r3, s16
 8008588:	4652      	mov	r2, sl
 800858a:	4631      	mov	r1, r6
 800858c:	4628      	mov	r0, r5
 800858e:	47b8      	blx	r7
 8008590:	3001      	adds	r0, #1
 8008592:	d1be      	bne.n	8008512 <_printf_float+0x326>
 8008594:	e689      	b.n	80082aa <_printf_float+0xbe>
 8008596:	9a05      	ldr	r2, [sp, #20]
 8008598:	464b      	mov	r3, r9
 800859a:	4442      	add	r2, r8
 800859c:	4631      	mov	r1, r6
 800859e:	4628      	mov	r0, r5
 80085a0:	47b8      	blx	r7
 80085a2:	3001      	adds	r0, #1
 80085a4:	d1c1      	bne.n	800852a <_printf_float+0x33e>
 80085a6:	e680      	b.n	80082aa <_printf_float+0xbe>
 80085a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085aa:	2a01      	cmp	r2, #1
 80085ac:	dc01      	bgt.n	80085b2 <_printf_float+0x3c6>
 80085ae:	07db      	lsls	r3, r3, #31
 80085b0:	d53a      	bpl.n	8008628 <_printf_float+0x43c>
 80085b2:	2301      	movs	r3, #1
 80085b4:	4642      	mov	r2, r8
 80085b6:	4631      	mov	r1, r6
 80085b8:	4628      	mov	r0, r5
 80085ba:	47b8      	blx	r7
 80085bc:	3001      	adds	r0, #1
 80085be:	f43f ae74 	beq.w	80082aa <_printf_float+0xbe>
 80085c2:	ee18 3a10 	vmov	r3, s16
 80085c6:	4652      	mov	r2, sl
 80085c8:	4631      	mov	r1, r6
 80085ca:	4628      	mov	r0, r5
 80085cc:	47b8      	blx	r7
 80085ce:	3001      	adds	r0, #1
 80085d0:	f43f ae6b 	beq.w	80082aa <_printf_float+0xbe>
 80085d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085d8:	2200      	movs	r2, #0
 80085da:	2300      	movs	r3, #0
 80085dc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80085e0:	f7f8 faaa 	bl	8000b38 <__aeabi_dcmpeq>
 80085e4:	b9d8      	cbnz	r0, 800861e <_printf_float+0x432>
 80085e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80085ea:	f108 0201 	add.w	r2, r8, #1
 80085ee:	4631      	mov	r1, r6
 80085f0:	4628      	mov	r0, r5
 80085f2:	47b8      	blx	r7
 80085f4:	3001      	adds	r0, #1
 80085f6:	d10e      	bne.n	8008616 <_printf_float+0x42a>
 80085f8:	e657      	b.n	80082aa <_printf_float+0xbe>
 80085fa:	2301      	movs	r3, #1
 80085fc:	4652      	mov	r2, sl
 80085fe:	4631      	mov	r1, r6
 8008600:	4628      	mov	r0, r5
 8008602:	47b8      	blx	r7
 8008604:	3001      	adds	r0, #1
 8008606:	f43f ae50 	beq.w	80082aa <_printf_float+0xbe>
 800860a:	f108 0801 	add.w	r8, r8, #1
 800860e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008610:	3b01      	subs	r3, #1
 8008612:	4543      	cmp	r3, r8
 8008614:	dcf1      	bgt.n	80085fa <_printf_float+0x40e>
 8008616:	464b      	mov	r3, r9
 8008618:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800861c:	e6da      	b.n	80083d4 <_printf_float+0x1e8>
 800861e:	f04f 0800 	mov.w	r8, #0
 8008622:	f104 0a1a 	add.w	sl, r4, #26
 8008626:	e7f2      	b.n	800860e <_printf_float+0x422>
 8008628:	2301      	movs	r3, #1
 800862a:	4642      	mov	r2, r8
 800862c:	e7df      	b.n	80085ee <_printf_float+0x402>
 800862e:	2301      	movs	r3, #1
 8008630:	464a      	mov	r2, r9
 8008632:	4631      	mov	r1, r6
 8008634:	4628      	mov	r0, r5
 8008636:	47b8      	blx	r7
 8008638:	3001      	adds	r0, #1
 800863a:	f43f ae36 	beq.w	80082aa <_printf_float+0xbe>
 800863e:	f108 0801 	add.w	r8, r8, #1
 8008642:	68e3      	ldr	r3, [r4, #12]
 8008644:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008646:	1a5b      	subs	r3, r3, r1
 8008648:	4543      	cmp	r3, r8
 800864a:	dcf0      	bgt.n	800862e <_printf_float+0x442>
 800864c:	e6f8      	b.n	8008440 <_printf_float+0x254>
 800864e:	f04f 0800 	mov.w	r8, #0
 8008652:	f104 0919 	add.w	r9, r4, #25
 8008656:	e7f4      	b.n	8008642 <_printf_float+0x456>

08008658 <_printf_common>:
 8008658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800865c:	4616      	mov	r6, r2
 800865e:	4699      	mov	r9, r3
 8008660:	688a      	ldr	r2, [r1, #8]
 8008662:	690b      	ldr	r3, [r1, #16]
 8008664:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008668:	4293      	cmp	r3, r2
 800866a:	bfb8      	it	lt
 800866c:	4613      	movlt	r3, r2
 800866e:	6033      	str	r3, [r6, #0]
 8008670:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008674:	4607      	mov	r7, r0
 8008676:	460c      	mov	r4, r1
 8008678:	b10a      	cbz	r2, 800867e <_printf_common+0x26>
 800867a:	3301      	adds	r3, #1
 800867c:	6033      	str	r3, [r6, #0]
 800867e:	6823      	ldr	r3, [r4, #0]
 8008680:	0699      	lsls	r1, r3, #26
 8008682:	bf42      	ittt	mi
 8008684:	6833      	ldrmi	r3, [r6, #0]
 8008686:	3302      	addmi	r3, #2
 8008688:	6033      	strmi	r3, [r6, #0]
 800868a:	6825      	ldr	r5, [r4, #0]
 800868c:	f015 0506 	ands.w	r5, r5, #6
 8008690:	d106      	bne.n	80086a0 <_printf_common+0x48>
 8008692:	f104 0a19 	add.w	sl, r4, #25
 8008696:	68e3      	ldr	r3, [r4, #12]
 8008698:	6832      	ldr	r2, [r6, #0]
 800869a:	1a9b      	subs	r3, r3, r2
 800869c:	42ab      	cmp	r3, r5
 800869e:	dc26      	bgt.n	80086ee <_printf_common+0x96>
 80086a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086a4:	1e13      	subs	r3, r2, #0
 80086a6:	6822      	ldr	r2, [r4, #0]
 80086a8:	bf18      	it	ne
 80086aa:	2301      	movne	r3, #1
 80086ac:	0692      	lsls	r2, r2, #26
 80086ae:	d42b      	bmi.n	8008708 <_printf_common+0xb0>
 80086b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086b4:	4649      	mov	r1, r9
 80086b6:	4638      	mov	r0, r7
 80086b8:	47c0      	blx	r8
 80086ba:	3001      	adds	r0, #1
 80086bc:	d01e      	beq.n	80086fc <_printf_common+0xa4>
 80086be:	6823      	ldr	r3, [r4, #0]
 80086c0:	6922      	ldr	r2, [r4, #16]
 80086c2:	f003 0306 	and.w	r3, r3, #6
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	bf02      	ittt	eq
 80086ca:	68e5      	ldreq	r5, [r4, #12]
 80086cc:	6833      	ldreq	r3, [r6, #0]
 80086ce:	1aed      	subeq	r5, r5, r3
 80086d0:	68a3      	ldr	r3, [r4, #8]
 80086d2:	bf0c      	ite	eq
 80086d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086d8:	2500      	movne	r5, #0
 80086da:	4293      	cmp	r3, r2
 80086dc:	bfc4      	itt	gt
 80086de:	1a9b      	subgt	r3, r3, r2
 80086e0:	18ed      	addgt	r5, r5, r3
 80086e2:	2600      	movs	r6, #0
 80086e4:	341a      	adds	r4, #26
 80086e6:	42b5      	cmp	r5, r6
 80086e8:	d11a      	bne.n	8008720 <_printf_common+0xc8>
 80086ea:	2000      	movs	r0, #0
 80086ec:	e008      	b.n	8008700 <_printf_common+0xa8>
 80086ee:	2301      	movs	r3, #1
 80086f0:	4652      	mov	r2, sl
 80086f2:	4649      	mov	r1, r9
 80086f4:	4638      	mov	r0, r7
 80086f6:	47c0      	blx	r8
 80086f8:	3001      	adds	r0, #1
 80086fa:	d103      	bne.n	8008704 <_printf_common+0xac>
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008704:	3501      	adds	r5, #1
 8008706:	e7c6      	b.n	8008696 <_printf_common+0x3e>
 8008708:	18e1      	adds	r1, r4, r3
 800870a:	1c5a      	adds	r2, r3, #1
 800870c:	2030      	movs	r0, #48	; 0x30
 800870e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008712:	4422      	add	r2, r4
 8008714:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008718:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800871c:	3302      	adds	r3, #2
 800871e:	e7c7      	b.n	80086b0 <_printf_common+0x58>
 8008720:	2301      	movs	r3, #1
 8008722:	4622      	mov	r2, r4
 8008724:	4649      	mov	r1, r9
 8008726:	4638      	mov	r0, r7
 8008728:	47c0      	blx	r8
 800872a:	3001      	adds	r0, #1
 800872c:	d0e6      	beq.n	80086fc <_printf_common+0xa4>
 800872e:	3601      	adds	r6, #1
 8008730:	e7d9      	b.n	80086e6 <_printf_common+0x8e>
	...

08008734 <_printf_i>:
 8008734:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008738:	7e0f      	ldrb	r7, [r1, #24]
 800873a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800873c:	2f78      	cmp	r7, #120	; 0x78
 800873e:	4691      	mov	r9, r2
 8008740:	4680      	mov	r8, r0
 8008742:	460c      	mov	r4, r1
 8008744:	469a      	mov	sl, r3
 8008746:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800874a:	d807      	bhi.n	800875c <_printf_i+0x28>
 800874c:	2f62      	cmp	r7, #98	; 0x62
 800874e:	d80a      	bhi.n	8008766 <_printf_i+0x32>
 8008750:	2f00      	cmp	r7, #0
 8008752:	f000 80d4 	beq.w	80088fe <_printf_i+0x1ca>
 8008756:	2f58      	cmp	r7, #88	; 0x58
 8008758:	f000 80c0 	beq.w	80088dc <_printf_i+0x1a8>
 800875c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008760:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008764:	e03a      	b.n	80087dc <_printf_i+0xa8>
 8008766:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800876a:	2b15      	cmp	r3, #21
 800876c:	d8f6      	bhi.n	800875c <_printf_i+0x28>
 800876e:	a101      	add	r1, pc, #4	; (adr r1, 8008774 <_printf_i+0x40>)
 8008770:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008774:	080087cd 	.word	0x080087cd
 8008778:	080087e1 	.word	0x080087e1
 800877c:	0800875d 	.word	0x0800875d
 8008780:	0800875d 	.word	0x0800875d
 8008784:	0800875d 	.word	0x0800875d
 8008788:	0800875d 	.word	0x0800875d
 800878c:	080087e1 	.word	0x080087e1
 8008790:	0800875d 	.word	0x0800875d
 8008794:	0800875d 	.word	0x0800875d
 8008798:	0800875d 	.word	0x0800875d
 800879c:	0800875d 	.word	0x0800875d
 80087a0:	080088e5 	.word	0x080088e5
 80087a4:	0800880d 	.word	0x0800880d
 80087a8:	0800889f 	.word	0x0800889f
 80087ac:	0800875d 	.word	0x0800875d
 80087b0:	0800875d 	.word	0x0800875d
 80087b4:	08008907 	.word	0x08008907
 80087b8:	0800875d 	.word	0x0800875d
 80087bc:	0800880d 	.word	0x0800880d
 80087c0:	0800875d 	.word	0x0800875d
 80087c4:	0800875d 	.word	0x0800875d
 80087c8:	080088a7 	.word	0x080088a7
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	1d1a      	adds	r2, r3, #4
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	602a      	str	r2, [r5, #0]
 80087d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087dc:	2301      	movs	r3, #1
 80087de:	e09f      	b.n	8008920 <_printf_i+0x1ec>
 80087e0:	6820      	ldr	r0, [r4, #0]
 80087e2:	682b      	ldr	r3, [r5, #0]
 80087e4:	0607      	lsls	r7, r0, #24
 80087e6:	f103 0104 	add.w	r1, r3, #4
 80087ea:	6029      	str	r1, [r5, #0]
 80087ec:	d501      	bpl.n	80087f2 <_printf_i+0xbe>
 80087ee:	681e      	ldr	r6, [r3, #0]
 80087f0:	e003      	b.n	80087fa <_printf_i+0xc6>
 80087f2:	0646      	lsls	r6, r0, #25
 80087f4:	d5fb      	bpl.n	80087ee <_printf_i+0xba>
 80087f6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087fa:	2e00      	cmp	r6, #0
 80087fc:	da03      	bge.n	8008806 <_printf_i+0xd2>
 80087fe:	232d      	movs	r3, #45	; 0x2d
 8008800:	4276      	negs	r6, r6
 8008802:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008806:	485a      	ldr	r0, [pc, #360]	; (8008970 <_printf_i+0x23c>)
 8008808:	230a      	movs	r3, #10
 800880a:	e012      	b.n	8008832 <_printf_i+0xfe>
 800880c:	682b      	ldr	r3, [r5, #0]
 800880e:	6820      	ldr	r0, [r4, #0]
 8008810:	1d19      	adds	r1, r3, #4
 8008812:	6029      	str	r1, [r5, #0]
 8008814:	0605      	lsls	r5, r0, #24
 8008816:	d501      	bpl.n	800881c <_printf_i+0xe8>
 8008818:	681e      	ldr	r6, [r3, #0]
 800881a:	e002      	b.n	8008822 <_printf_i+0xee>
 800881c:	0641      	lsls	r1, r0, #25
 800881e:	d5fb      	bpl.n	8008818 <_printf_i+0xe4>
 8008820:	881e      	ldrh	r6, [r3, #0]
 8008822:	4853      	ldr	r0, [pc, #332]	; (8008970 <_printf_i+0x23c>)
 8008824:	2f6f      	cmp	r7, #111	; 0x6f
 8008826:	bf0c      	ite	eq
 8008828:	2308      	moveq	r3, #8
 800882a:	230a      	movne	r3, #10
 800882c:	2100      	movs	r1, #0
 800882e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008832:	6865      	ldr	r5, [r4, #4]
 8008834:	60a5      	str	r5, [r4, #8]
 8008836:	2d00      	cmp	r5, #0
 8008838:	bfa2      	ittt	ge
 800883a:	6821      	ldrge	r1, [r4, #0]
 800883c:	f021 0104 	bicge.w	r1, r1, #4
 8008840:	6021      	strge	r1, [r4, #0]
 8008842:	b90e      	cbnz	r6, 8008848 <_printf_i+0x114>
 8008844:	2d00      	cmp	r5, #0
 8008846:	d04b      	beq.n	80088e0 <_printf_i+0x1ac>
 8008848:	4615      	mov	r5, r2
 800884a:	fbb6 f1f3 	udiv	r1, r6, r3
 800884e:	fb03 6711 	mls	r7, r3, r1, r6
 8008852:	5dc7      	ldrb	r7, [r0, r7]
 8008854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008858:	4637      	mov	r7, r6
 800885a:	42bb      	cmp	r3, r7
 800885c:	460e      	mov	r6, r1
 800885e:	d9f4      	bls.n	800884a <_printf_i+0x116>
 8008860:	2b08      	cmp	r3, #8
 8008862:	d10b      	bne.n	800887c <_printf_i+0x148>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	07de      	lsls	r6, r3, #31
 8008868:	d508      	bpl.n	800887c <_printf_i+0x148>
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	6861      	ldr	r1, [r4, #4]
 800886e:	4299      	cmp	r1, r3
 8008870:	bfde      	ittt	le
 8008872:	2330      	movle	r3, #48	; 0x30
 8008874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008878:	f105 35ff 	addle.w	r5, r5, #4294967295
 800887c:	1b52      	subs	r2, r2, r5
 800887e:	6122      	str	r2, [r4, #16]
 8008880:	f8cd a000 	str.w	sl, [sp]
 8008884:	464b      	mov	r3, r9
 8008886:	aa03      	add	r2, sp, #12
 8008888:	4621      	mov	r1, r4
 800888a:	4640      	mov	r0, r8
 800888c:	f7ff fee4 	bl	8008658 <_printf_common>
 8008890:	3001      	adds	r0, #1
 8008892:	d14a      	bne.n	800892a <_printf_i+0x1f6>
 8008894:	f04f 30ff 	mov.w	r0, #4294967295
 8008898:	b004      	add	sp, #16
 800889a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889e:	6823      	ldr	r3, [r4, #0]
 80088a0:	f043 0320 	orr.w	r3, r3, #32
 80088a4:	6023      	str	r3, [r4, #0]
 80088a6:	4833      	ldr	r0, [pc, #204]	; (8008974 <_printf_i+0x240>)
 80088a8:	2778      	movs	r7, #120	; 0x78
 80088aa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	6829      	ldr	r1, [r5, #0]
 80088b2:	061f      	lsls	r7, r3, #24
 80088b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80088b8:	d402      	bmi.n	80088c0 <_printf_i+0x18c>
 80088ba:	065f      	lsls	r7, r3, #25
 80088bc:	bf48      	it	mi
 80088be:	b2b6      	uxthmi	r6, r6
 80088c0:	07df      	lsls	r7, r3, #31
 80088c2:	bf48      	it	mi
 80088c4:	f043 0320 	orrmi.w	r3, r3, #32
 80088c8:	6029      	str	r1, [r5, #0]
 80088ca:	bf48      	it	mi
 80088cc:	6023      	strmi	r3, [r4, #0]
 80088ce:	b91e      	cbnz	r6, 80088d8 <_printf_i+0x1a4>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	f023 0320 	bic.w	r3, r3, #32
 80088d6:	6023      	str	r3, [r4, #0]
 80088d8:	2310      	movs	r3, #16
 80088da:	e7a7      	b.n	800882c <_printf_i+0xf8>
 80088dc:	4824      	ldr	r0, [pc, #144]	; (8008970 <_printf_i+0x23c>)
 80088de:	e7e4      	b.n	80088aa <_printf_i+0x176>
 80088e0:	4615      	mov	r5, r2
 80088e2:	e7bd      	b.n	8008860 <_printf_i+0x12c>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	6826      	ldr	r6, [r4, #0]
 80088e8:	6961      	ldr	r1, [r4, #20]
 80088ea:	1d18      	adds	r0, r3, #4
 80088ec:	6028      	str	r0, [r5, #0]
 80088ee:	0635      	lsls	r5, r6, #24
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	d501      	bpl.n	80088f8 <_printf_i+0x1c4>
 80088f4:	6019      	str	r1, [r3, #0]
 80088f6:	e002      	b.n	80088fe <_printf_i+0x1ca>
 80088f8:	0670      	lsls	r0, r6, #25
 80088fa:	d5fb      	bpl.n	80088f4 <_printf_i+0x1c0>
 80088fc:	8019      	strh	r1, [r3, #0]
 80088fe:	2300      	movs	r3, #0
 8008900:	6123      	str	r3, [r4, #16]
 8008902:	4615      	mov	r5, r2
 8008904:	e7bc      	b.n	8008880 <_printf_i+0x14c>
 8008906:	682b      	ldr	r3, [r5, #0]
 8008908:	1d1a      	adds	r2, r3, #4
 800890a:	602a      	str	r2, [r5, #0]
 800890c:	681d      	ldr	r5, [r3, #0]
 800890e:	6862      	ldr	r2, [r4, #4]
 8008910:	2100      	movs	r1, #0
 8008912:	4628      	mov	r0, r5
 8008914:	f7f7 fc94 	bl	8000240 <memchr>
 8008918:	b108      	cbz	r0, 800891e <_printf_i+0x1ea>
 800891a:	1b40      	subs	r0, r0, r5
 800891c:	6060      	str	r0, [r4, #4]
 800891e:	6863      	ldr	r3, [r4, #4]
 8008920:	6123      	str	r3, [r4, #16]
 8008922:	2300      	movs	r3, #0
 8008924:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008928:	e7aa      	b.n	8008880 <_printf_i+0x14c>
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	462a      	mov	r2, r5
 800892e:	4649      	mov	r1, r9
 8008930:	4640      	mov	r0, r8
 8008932:	47d0      	blx	sl
 8008934:	3001      	adds	r0, #1
 8008936:	d0ad      	beq.n	8008894 <_printf_i+0x160>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	079b      	lsls	r3, r3, #30
 800893c:	d413      	bmi.n	8008966 <_printf_i+0x232>
 800893e:	68e0      	ldr	r0, [r4, #12]
 8008940:	9b03      	ldr	r3, [sp, #12]
 8008942:	4298      	cmp	r0, r3
 8008944:	bfb8      	it	lt
 8008946:	4618      	movlt	r0, r3
 8008948:	e7a6      	b.n	8008898 <_printf_i+0x164>
 800894a:	2301      	movs	r3, #1
 800894c:	4632      	mov	r2, r6
 800894e:	4649      	mov	r1, r9
 8008950:	4640      	mov	r0, r8
 8008952:	47d0      	blx	sl
 8008954:	3001      	adds	r0, #1
 8008956:	d09d      	beq.n	8008894 <_printf_i+0x160>
 8008958:	3501      	adds	r5, #1
 800895a:	68e3      	ldr	r3, [r4, #12]
 800895c:	9903      	ldr	r1, [sp, #12]
 800895e:	1a5b      	subs	r3, r3, r1
 8008960:	42ab      	cmp	r3, r5
 8008962:	dcf2      	bgt.n	800894a <_printf_i+0x216>
 8008964:	e7eb      	b.n	800893e <_printf_i+0x20a>
 8008966:	2500      	movs	r5, #0
 8008968:	f104 0619 	add.w	r6, r4, #25
 800896c:	e7f5      	b.n	800895a <_printf_i+0x226>
 800896e:	bf00      	nop
 8008970:	0800ae46 	.word	0x0800ae46
 8008974:	0800ae57 	.word	0x0800ae57

08008978 <std>:
 8008978:	2300      	movs	r3, #0
 800897a:	b510      	push	{r4, lr}
 800897c:	4604      	mov	r4, r0
 800897e:	e9c0 3300 	strd	r3, r3, [r0]
 8008982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008986:	6083      	str	r3, [r0, #8]
 8008988:	8181      	strh	r1, [r0, #12]
 800898a:	6643      	str	r3, [r0, #100]	; 0x64
 800898c:	81c2      	strh	r2, [r0, #14]
 800898e:	6183      	str	r3, [r0, #24]
 8008990:	4619      	mov	r1, r3
 8008992:	2208      	movs	r2, #8
 8008994:	305c      	adds	r0, #92	; 0x5c
 8008996:	f000 f914 	bl	8008bc2 <memset>
 800899a:	4b0d      	ldr	r3, [pc, #52]	; (80089d0 <std+0x58>)
 800899c:	6263      	str	r3, [r4, #36]	; 0x24
 800899e:	4b0d      	ldr	r3, [pc, #52]	; (80089d4 <std+0x5c>)
 80089a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80089a2:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <std+0x60>)
 80089a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80089a6:	4b0d      	ldr	r3, [pc, #52]	; (80089dc <std+0x64>)
 80089a8:	6323      	str	r3, [r4, #48]	; 0x30
 80089aa:	4b0d      	ldr	r3, [pc, #52]	; (80089e0 <std+0x68>)
 80089ac:	6224      	str	r4, [r4, #32]
 80089ae:	429c      	cmp	r4, r3
 80089b0:	d006      	beq.n	80089c0 <std+0x48>
 80089b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80089b6:	4294      	cmp	r4, r2
 80089b8:	d002      	beq.n	80089c0 <std+0x48>
 80089ba:	33d0      	adds	r3, #208	; 0xd0
 80089bc:	429c      	cmp	r4, r3
 80089be:	d105      	bne.n	80089cc <std+0x54>
 80089c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80089c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089c8:	f000 b978 	b.w	8008cbc <__retarget_lock_init_recursive>
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	bf00      	nop
 80089d0:	08008b3d 	.word	0x08008b3d
 80089d4:	08008b5f 	.word	0x08008b5f
 80089d8:	08008b97 	.word	0x08008b97
 80089dc:	08008bbb 	.word	0x08008bbb
 80089e0:	20000668 	.word	0x20000668

080089e4 <stdio_exit_handler>:
 80089e4:	4a02      	ldr	r2, [pc, #8]	; (80089f0 <stdio_exit_handler+0xc>)
 80089e6:	4903      	ldr	r1, [pc, #12]	; (80089f4 <stdio_exit_handler+0x10>)
 80089e8:	4803      	ldr	r0, [pc, #12]	; (80089f8 <stdio_exit_handler+0x14>)
 80089ea:	f000 b869 	b.w	8008ac0 <_fwalk_sglue>
 80089ee:	bf00      	nop
 80089f0:	20000008 	.word	0x20000008
 80089f4:	0800a689 	.word	0x0800a689
 80089f8:	20000014 	.word	0x20000014

080089fc <cleanup_stdio>:
 80089fc:	6841      	ldr	r1, [r0, #4]
 80089fe:	4b0c      	ldr	r3, [pc, #48]	; (8008a30 <cleanup_stdio+0x34>)
 8008a00:	4299      	cmp	r1, r3
 8008a02:	b510      	push	{r4, lr}
 8008a04:	4604      	mov	r4, r0
 8008a06:	d001      	beq.n	8008a0c <cleanup_stdio+0x10>
 8008a08:	f001 fe3e 	bl	800a688 <_fflush_r>
 8008a0c:	68a1      	ldr	r1, [r4, #8]
 8008a0e:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <cleanup_stdio+0x38>)
 8008a10:	4299      	cmp	r1, r3
 8008a12:	d002      	beq.n	8008a1a <cleanup_stdio+0x1e>
 8008a14:	4620      	mov	r0, r4
 8008a16:	f001 fe37 	bl	800a688 <_fflush_r>
 8008a1a:	68e1      	ldr	r1, [r4, #12]
 8008a1c:	4b06      	ldr	r3, [pc, #24]	; (8008a38 <cleanup_stdio+0x3c>)
 8008a1e:	4299      	cmp	r1, r3
 8008a20:	d004      	beq.n	8008a2c <cleanup_stdio+0x30>
 8008a22:	4620      	mov	r0, r4
 8008a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a28:	f001 be2e 	b.w	800a688 <_fflush_r>
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	bf00      	nop
 8008a30:	20000668 	.word	0x20000668
 8008a34:	200006d0 	.word	0x200006d0
 8008a38:	20000738 	.word	0x20000738

08008a3c <global_stdio_init.part.0>:
 8008a3c:	b510      	push	{r4, lr}
 8008a3e:	4b0b      	ldr	r3, [pc, #44]	; (8008a6c <global_stdio_init.part.0+0x30>)
 8008a40:	4c0b      	ldr	r4, [pc, #44]	; (8008a70 <global_stdio_init.part.0+0x34>)
 8008a42:	4a0c      	ldr	r2, [pc, #48]	; (8008a74 <global_stdio_init.part.0+0x38>)
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	4620      	mov	r0, r4
 8008a48:	2200      	movs	r2, #0
 8008a4a:	2104      	movs	r1, #4
 8008a4c:	f7ff ff94 	bl	8008978 <std>
 8008a50:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008a54:	2201      	movs	r2, #1
 8008a56:	2109      	movs	r1, #9
 8008a58:	f7ff ff8e 	bl	8008978 <std>
 8008a5c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008a60:	2202      	movs	r2, #2
 8008a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a66:	2112      	movs	r1, #18
 8008a68:	f7ff bf86 	b.w	8008978 <std>
 8008a6c:	200007a0 	.word	0x200007a0
 8008a70:	20000668 	.word	0x20000668
 8008a74:	080089e5 	.word	0x080089e5

08008a78 <__sfp_lock_acquire>:
 8008a78:	4801      	ldr	r0, [pc, #4]	; (8008a80 <__sfp_lock_acquire+0x8>)
 8008a7a:	f000 b920 	b.w	8008cbe <__retarget_lock_acquire_recursive>
 8008a7e:	bf00      	nop
 8008a80:	200007a9 	.word	0x200007a9

08008a84 <__sfp_lock_release>:
 8008a84:	4801      	ldr	r0, [pc, #4]	; (8008a8c <__sfp_lock_release+0x8>)
 8008a86:	f000 b91b 	b.w	8008cc0 <__retarget_lock_release_recursive>
 8008a8a:	bf00      	nop
 8008a8c:	200007a9 	.word	0x200007a9

08008a90 <__sinit>:
 8008a90:	b510      	push	{r4, lr}
 8008a92:	4604      	mov	r4, r0
 8008a94:	f7ff fff0 	bl	8008a78 <__sfp_lock_acquire>
 8008a98:	6a23      	ldr	r3, [r4, #32]
 8008a9a:	b11b      	cbz	r3, 8008aa4 <__sinit+0x14>
 8008a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008aa0:	f7ff bff0 	b.w	8008a84 <__sfp_lock_release>
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <__sinit+0x28>)
 8008aa6:	6223      	str	r3, [r4, #32]
 8008aa8:	4b04      	ldr	r3, [pc, #16]	; (8008abc <__sinit+0x2c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1f5      	bne.n	8008a9c <__sinit+0xc>
 8008ab0:	f7ff ffc4 	bl	8008a3c <global_stdio_init.part.0>
 8008ab4:	e7f2      	b.n	8008a9c <__sinit+0xc>
 8008ab6:	bf00      	nop
 8008ab8:	080089fd 	.word	0x080089fd
 8008abc:	200007a0 	.word	0x200007a0

08008ac0 <_fwalk_sglue>:
 8008ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ac4:	4607      	mov	r7, r0
 8008ac6:	4688      	mov	r8, r1
 8008ac8:	4614      	mov	r4, r2
 8008aca:	2600      	movs	r6, #0
 8008acc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ad0:	f1b9 0901 	subs.w	r9, r9, #1
 8008ad4:	d505      	bpl.n	8008ae2 <_fwalk_sglue+0x22>
 8008ad6:	6824      	ldr	r4, [r4, #0]
 8008ad8:	2c00      	cmp	r4, #0
 8008ada:	d1f7      	bne.n	8008acc <_fwalk_sglue+0xc>
 8008adc:	4630      	mov	r0, r6
 8008ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ae2:	89ab      	ldrh	r3, [r5, #12]
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d907      	bls.n	8008af8 <_fwalk_sglue+0x38>
 8008ae8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008aec:	3301      	adds	r3, #1
 8008aee:	d003      	beq.n	8008af8 <_fwalk_sglue+0x38>
 8008af0:	4629      	mov	r1, r5
 8008af2:	4638      	mov	r0, r7
 8008af4:	47c0      	blx	r8
 8008af6:	4306      	orrs	r6, r0
 8008af8:	3568      	adds	r5, #104	; 0x68
 8008afa:	e7e9      	b.n	8008ad0 <_fwalk_sglue+0x10>

08008afc <siprintf>:
 8008afc:	b40e      	push	{r1, r2, r3}
 8008afe:	b500      	push	{lr}
 8008b00:	b09c      	sub	sp, #112	; 0x70
 8008b02:	ab1d      	add	r3, sp, #116	; 0x74
 8008b04:	9002      	str	r0, [sp, #8]
 8008b06:	9006      	str	r0, [sp, #24]
 8008b08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b0c:	4809      	ldr	r0, [pc, #36]	; (8008b34 <siprintf+0x38>)
 8008b0e:	9107      	str	r1, [sp, #28]
 8008b10:	9104      	str	r1, [sp, #16]
 8008b12:	4909      	ldr	r1, [pc, #36]	; (8008b38 <siprintf+0x3c>)
 8008b14:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b18:	9105      	str	r1, [sp, #20]
 8008b1a:	6800      	ldr	r0, [r0, #0]
 8008b1c:	9301      	str	r3, [sp, #4]
 8008b1e:	a902      	add	r1, sp, #8
 8008b20:	f001 fc2e 	bl	800a380 <_svfiprintf_r>
 8008b24:	9b02      	ldr	r3, [sp, #8]
 8008b26:	2200      	movs	r2, #0
 8008b28:	701a      	strb	r2, [r3, #0]
 8008b2a:	b01c      	add	sp, #112	; 0x70
 8008b2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b30:	b003      	add	sp, #12
 8008b32:	4770      	bx	lr
 8008b34:	20000060 	.word	0x20000060
 8008b38:	ffff0208 	.word	0xffff0208

08008b3c <__sread>:
 8008b3c:	b510      	push	{r4, lr}
 8008b3e:	460c      	mov	r4, r1
 8008b40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b44:	f000 f86c 	bl	8008c20 <_read_r>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	bfab      	itete	ge
 8008b4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b4e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b50:	181b      	addge	r3, r3, r0
 8008b52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b56:	bfac      	ite	ge
 8008b58:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b5a:	81a3      	strhlt	r3, [r4, #12]
 8008b5c:	bd10      	pop	{r4, pc}

08008b5e <__swrite>:
 8008b5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b62:	461f      	mov	r7, r3
 8008b64:	898b      	ldrh	r3, [r1, #12]
 8008b66:	05db      	lsls	r3, r3, #23
 8008b68:	4605      	mov	r5, r0
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	4616      	mov	r6, r2
 8008b6e:	d505      	bpl.n	8008b7c <__swrite+0x1e>
 8008b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b74:	2302      	movs	r3, #2
 8008b76:	2200      	movs	r2, #0
 8008b78:	f000 f840 	bl	8008bfc <_lseek_r>
 8008b7c:	89a3      	ldrh	r3, [r4, #12]
 8008b7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b86:	81a3      	strh	r3, [r4, #12]
 8008b88:	4632      	mov	r2, r6
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b92:	f000 b857 	b.w	8008c44 <_write_r>

08008b96 <__sseek>:
 8008b96:	b510      	push	{r4, lr}
 8008b98:	460c      	mov	r4, r1
 8008b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b9e:	f000 f82d 	bl	8008bfc <_lseek_r>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	89a3      	ldrh	r3, [r4, #12]
 8008ba6:	bf15      	itete	ne
 8008ba8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008baa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bb2:	81a3      	strheq	r3, [r4, #12]
 8008bb4:	bf18      	it	ne
 8008bb6:	81a3      	strhne	r3, [r4, #12]
 8008bb8:	bd10      	pop	{r4, pc}

08008bba <__sclose>:
 8008bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbe:	f000 b80d 	b.w	8008bdc <_close_r>

08008bc2 <memset>:
 8008bc2:	4402      	add	r2, r0
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d100      	bne.n	8008bcc <memset+0xa>
 8008bca:	4770      	bx	lr
 8008bcc:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd0:	e7f9      	b.n	8008bc6 <memset+0x4>
	...

08008bd4 <_localeconv_r>:
 8008bd4:	4800      	ldr	r0, [pc, #0]	; (8008bd8 <_localeconv_r+0x4>)
 8008bd6:	4770      	bx	lr
 8008bd8:	20000154 	.word	0x20000154

08008bdc <_close_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d06      	ldr	r5, [pc, #24]	; (8008bf8 <_close_r+0x1c>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7f9 fd37 	bl	800265a <_close>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_close_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_close_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	200007a4 	.word	0x200007a4

08008bfc <_lseek_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4d07      	ldr	r5, [pc, #28]	; (8008c1c <_lseek_r+0x20>)
 8008c00:	4604      	mov	r4, r0
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	2200      	movs	r2, #0
 8008c08:	602a      	str	r2, [r5, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f7f9 fd4c 	bl	80026a8 <_lseek>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_lseek_r+0x1e>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_lseek_r+0x1e>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	200007a4 	.word	0x200007a4

08008c20 <_read_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d07      	ldr	r5, [pc, #28]	; (8008c40 <_read_r+0x20>)
 8008c24:	4604      	mov	r4, r0
 8008c26:	4608      	mov	r0, r1
 8008c28:	4611      	mov	r1, r2
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	602a      	str	r2, [r5, #0]
 8008c2e:	461a      	mov	r2, r3
 8008c30:	f7f9 fcda 	bl	80025e8 <_read>
 8008c34:	1c43      	adds	r3, r0, #1
 8008c36:	d102      	bne.n	8008c3e <_read_r+0x1e>
 8008c38:	682b      	ldr	r3, [r5, #0]
 8008c3a:	b103      	cbz	r3, 8008c3e <_read_r+0x1e>
 8008c3c:	6023      	str	r3, [r4, #0]
 8008c3e:	bd38      	pop	{r3, r4, r5, pc}
 8008c40:	200007a4 	.word	0x200007a4

08008c44 <_write_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d07      	ldr	r5, [pc, #28]	; (8008c64 <_write_r+0x20>)
 8008c48:	4604      	mov	r4, r0
 8008c4a:	4608      	mov	r0, r1
 8008c4c:	4611      	mov	r1, r2
 8008c4e:	2200      	movs	r2, #0
 8008c50:	602a      	str	r2, [r5, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	f7f9 fce5 	bl	8002622 <_write>
 8008c58:	1c43      	adds	r3, r0, #1
 8008c5a:	d102      	bne.n	8008c62 <_write_r+0x1e>
 8008c5c:	682b      	ldr	r3, [r5, #0]
 8008c5e:	b103      	cbz	r3, 8008c62 <_write_r+0x1e>
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	bd38      	pop	{r3, r4, r5, pc}
 8008c64:	200007a4 	.word	0x200007a4

08008c68 <__errno>:
 8008c68:	4b01      	ldr	r3, [pc, #4]	; (8008c70 <__errno+0x8>)
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	20000060 	.word	0x20000060

08008c74 <__libc_init_array>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4d0d      	ldr	r5, [pc, #52]	; (8008cac <__libc_init_array+0x38>)
 8008c78:	4c0d      	ldr	r4, [pc, #52]	; (8008cb0 <__libc_init_array+0x3c>)
 8008c7a:	1b64      	subs	r4, r4, r5
 8008c7c:	10a4      	asrs	r4, r4, #2
 8008c7e:	2600      	movs	r6, #0
 8008c80:	42a6      	cmp	r6, r4
 8008c82:	d109      	bne.n	8008c98 <__libc_init_array+0x24>
 8008c84:	4d0b      	ldr	r5, [pc, #44]	; (8008cb4 <__libc_init_array+0x40>)
 8008c86:	4c0c      	ldr	r4, [pc, #48]	; (8008cb8 <__libc_init_array+0x44>)
 8008c88:	f002 f894 	bl	800adb4 <_init>
 8008c8c:	1b64      	subs	r4, r4, r5
 8008c8e:	10a4      	asrs	r4, r4, #2
 8008c90:	2600      	movs	r6, #0
 8008c92:	42a6      	cmp	r6, r4
 8008c94:	d105      	bne.n	8008ca2 <__libc_init_array+0x2e>
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9c:	4798      	blx	r3
 8008c9e:	3601      	adds	r6, #1
 8008ca0:	e7ee      	b.n	8008c80 <__libc_init_array+0xc>
 8008ca2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca6:	4798      	blx	r3
 8008ca8:	3601      	adds	r6, #1
 8008caa:	e7f2      	b.n	8008c92 <__libc_init_array+0x1e>
 8008cac:	0800b1ac 	.word	0x0800b1ac
 8008cb0:	0800b1ac 	.word	0x0800b1ac
 8008cb4:	0800b1ac 	.word	0x0800b1ac
 8008cb8:	0800b1b0 	.word	0x0800b1b0

08008cbc <__retarget_lock_init_recursive>:
 8008cbc:	4770      	bx	lr

08008cbe <__retarget_lock_acquire_recursive>:
 8008cbe:	4770      	bx	lr

08008cc0 <__retarget_lock_release_recursive>:
 8008cc0:	4770      	bx	lr

08008cc2 <memcpy>:
 8008cc2:	440a      	add	r2, r1
 8008cc4:	4291      	cmp	r1, r2
 8008cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cca:	d100      	bne.n	8008cce <memcpy+0xc>
 8008ccc:	4770      	bx	lr
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cd8:	4291      	cmp	r1, r2
 8008cda:	d1f9      	bne.n	8008cd0 <memcpy+0xe>
 8008cdc:	bd10      	pop	{r4, pc}

08008cde <quorem>:
 8008cde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce2:	6903      	ldr	r3, [r0, #16]
 8008ce4:	690c      	ldr	r4, [r1, #16]
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	4607      	mov	r7, r0
 8008cea:	db7e      	blt.n	8008dea <quorem+0x10c>
 8008cec:	3c01      	subs	r4, #1
 8008cee:	f101 0814 	add.w	r8, r1, #20
 8008cf2:	f100 0514 	add.w	r5, r0, #20
 8008cf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cfa:	9301      	str	r3, [sp, #4]
 8008cfc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008d00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d04:	3301      	adds	r3, #1
 8008d06:	429a      	cmp	r2, r3
 8008d08:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008d0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008d10:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d14:	d331      	bcc.n	8008d7a <quorem+0x9c>
 8008d16:	f04f 0e00 	mov.w	lr, #0
 8008d1a:	4640      	mov	r0, r8
 8008d1c:	46ac      	mov	ip, r5
 8008d1e:	46f2      	mov	sl, lr
 8008d20:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d24:	b293      	uxth	r3, r2
 8008d26:	fb06 e303 	mla	r3, r6, r3, lr
 8008d2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d2e:	0c1a      	lsrs	r2, r3, #16
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	ebaa 0303 	sub.w	r3, sl, r3
 8008d36:	f8dc a000 	ldr.w	sl, [ip]
 8008d3a:	fa13 f38a 	uxtah	r3, r3, sl
 8008d3e:	fb06 220e 	mla	r2, r6, lr, r2
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	9b00      	ldr	r3, [sp, #0]
 8008d46:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d4a:	b292      	uxth	r2, r2
 8008d4c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d50:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d54:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d58:	4581      	cmp	r9, r0
 8008d5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d5e:	f84c 3b04 	str.w	r3, [ip], #4
 8008d62:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d66:	d2db      	bcs.n	8008d20 <quorem+0x42>
 8008d68:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d6c:	b92b      	cbnz	r3, 8008d7a <quorem+0x9c>
 8008d6e:	9b01      	ldr	r3, [sp, #4]
 8008d70:	3b04      	subs	r3, #4
 8008d72:	429d      	cmp	r5, r3
 8008d74:	461a      	mov	r2, r3
 8008d76:	d32c      	bcc.n	8008dd2 <quorem+0xf4>
 8008d78:	613c      	str	r4, [r7, #16]
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	f001 f9a6 	bl	800a0cc <__mcmp>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	db22      	blt.n	8008dca <quorem+0xec>
 8008d84:	3601      	adds	r6, #1
 8008d86:	4629      	mov	r1, r5
 8008d88:	2000      	movs	r0, #0
 8008d8a:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d8e:	f8d1 c000 	ldr.w	ip, [r1]
 8008d92:	b293      	uxth	r3, r2
 8008d94:	1ac3      	subs	r3, r0, r3
 8008d96:	0c12      	lsrs	r2, r2, #16
 8008d98:	fa13 f38c 	uxtah	r3, r3, ip
 8008d9c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008da0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008da4:	b29b      	uxth	r3, r3
 8008da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008daa:	45c1      	cmp	r9, r8
 8008dac:	f841 3b04 	str.w	r3, [r1], #4
 8008db0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008db4:	d2e9      	bcs.n	8008d8a <quorem+0xac>
 8008db6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008dba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dbe:	b922      	cbnz	r2, 8008dca <quorem+0xec>
 8008dc0:	3b04      	subs	r3, #4
 8008dc2:	429d      	cmp	r5, r3
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	d30a      	bcc.n	8008dde <quorem+0x100>
 8008dc8:	613c      	str	r4, [r7, #16]
 8008dca:	4630      	mov	r0, r6
 8008dcc:	b003      	add	sp, #12
 8008dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd2:	6812      	ldr	r2, [r2, #0]
 8008dd4:	3b04      	subs	r3, #4
 8008dd6:	2a00      	cmp	r2, #0
 8008dd8:	d1ce      	bne.n	8008d78 <quorem+0x9a>
 8008dda:	3c01      	subs	r4, #1
 8008ddc:	e7c9      	b.n	8008d72 <quorem+0x94>
 8008dde:	6812      	ldr	r2, [r2, #0]
 8008de0:	3b04      	subs	r3, #4
 8008de2:	2a00      	cmp	r2, #0
 8008de4:	d1f0      	bne.n	8008dc8 <quorem+0xea>
 8008de6:	3c01      	subs	r4, #1
 8008de8:	e7eb      	b.n	8008dc2 <quorem+0xe4>
 8008dea:	2000      	movs	r0, #0
 8008dec:	e7ee      	b.n	8008dcc <quorem+0xee>
	...

08008df0 <_dtoa_r>:
 8008df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df4:	ed2d 8b04 	vpush	{d8-d9}
 8008df8:	69c5      	ldr	r5, [r0, #28]
 8008dfa:	b093      	sub	sp, #76	; 0x4c
 8008dfc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008e00:	ec57 6b10 	vmov	r6, r7, d0
 8008e04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008e08:	9107      	str	r1, [sp, #28]
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	920a      	str	r2, [sp, #40]	; 0x28
 8008e0e:	930d      	str	r3, [sp, #52]	; 0x34
 8008e10:	b975      	cbnz	r5, 8008e30 <_dtoa_r+0x40>
 8008e12:	2010      	movs	r0, #16
 8008e14:	f000 fe2a 	bl	8009a6c <malloc>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	61e0      	str	r0, [r4, #28]
 8008e1c:	b920      	cbnz	r0, 8008e28 <_dtoa_r+0x38>
 8008e1e:	4bae      	ldr	r3, [pc, #696]	; (80090d8 <_dtoa_r+0x2e8>)
 8008e20:	21ef      	movs	r1, #239	; 0xef
 8008e22:	48ae      	ldr	r0, [pc, #696]	; (80090dc <_dtoa_r+0x2ec>)
 8008e24:	f001 fc82 	bl	800a72c <__assert_func>
 8008e28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e2c:	6005      	str	r5, [r0, #0]
 8008e2e:	60c5      	str	r5, [r0, #12]
 8008e30:	69e3      	ldr	r3, [r4, #28]
 8008e32:	6819      	ldr	r1, [r3, #0]
 8008e34:	b151      	cbz	r1, 8008e4c <_dtoa_r+0x5c>
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	604a      	str	r2, [r1, #4]
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4093      	lsls	r3, r2
 8008e3e:	608b      	str	r3, [r1, #8]
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 ff07 	bl	8009c54 <_Bfree>
 8008e46:	69e3      	ldr	r3, [r4, #28]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	1e3b      	subs	r3, r7, #0
 8008e4e:	bfbb      	ittet	lt
 8008e50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e54:	9303      	strlt	r3, [sp, #12]
 8008e56:	2300      	movge	r3, #0
 8008e58:	2201      	movlt	r2, #1
 8008e5a:	bfac      	ite	ge
 8008e5c:	f8c8 3000 	strge.w	r3, [r8]
 8008e60:	f8c8 2000 	strlt.w	r2, [r8]
 8008e64:	4b9e      	ldr	r3, [pc, #632]	; (80090e0 <_dtoa_r+0x2f0>)
 8008e66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008e6a:	ea33 0308 	bics.w	r3, r3, r8
 8008e6e:	d11b      	bne.n	8008ea8 <_dtoa_r+0xb8>
 8008e70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e72:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008e7c:	4333      	orrs	r3, r6
 8008e7e:	f000 8593 	beq.w	80099a8 <_dtoa_r+0xbb8>
 8008e82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e84:	b963      	cbnz	r3, 8008ea0 <_dtoa_r+0xb0>
 8008e86:	4b97      	ldr	r3, [pc, #604]	; (80090e4 <_dtoa_r+0x2f4>)
 8008e88:	e027      	b.n	8008eda <_dtoa_r+0xea>
 8008e8a:	4b97      	ldr	r3, [pc, #604]	; (80090e8 <_dtoa_r+0x2f8>)
 8008e8c:	9300      	str	r3, [sp, #0]
 8008e8e:	3308      	adds	r3, #8
 8008e90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	9800      	ldr	r0, [sp, #0]
 8008e96:	b013      	add	sp, #76	; 0x4c
 8008e98:	ecbd 8b04 	vpop	{d8-d9}
 8008e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea0:	4b90      	ldr	r3, [pc, #576]	; (80090e4 <_dtoa_r+0x2f4>)
 8008ea2:	9300      	str	r3, [sp, #0]
 8008ea4:	3303      	adds	r3, #3
 8008ea6:	e7f3      	b.n	8008e90 <_dtoa_r+0xa0>
 8008ea8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008eac:	2200      	movs	r2, #0
 8008eae:	ec51 0b17 	vmov	r0, r1, d7
 8008eb2:	eeb0 8a47 	vmov.f32	s16, s14
 8008eb6:	eef0 8a67 	vmov.f32	s17, s15
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f7f7 fe3c 	bl	8000b38 <__aeabi_dcmpeq>
 8008ec0:	4681      	mov	r9, r0
 8008ec2:	b160      	cbz	r0, 8008ede <_dtoa_r+0xee>
 8008ec4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	6013      	str	r3, [r2, #0]
 8008eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f000 8568 	beq.w	80099a2 <_dtoa_r+0xbb2>
 8008ed2:	4b86      	ldr	r3, [pc, #536]	; (80090ec <_dtoa_r+0x2fc>)
 8008ed4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008ed6:	6013      	str	r3, [r2, #0]
 8008ed8:	3b01      	subs	r3, #1
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	e7da      	b.n	8008e94 <_dtoa_r+0xa4>
 8008ede:	aa10      	add	r2, sp, #64	; 0x40
 8008ee0:	a911      	add	r1, sp, #68	; 0x44
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	eeb0 0a48 	vmov.f32	s0, s16
 8008ee8:	eef0 0a68 	vmov.f32	s1, s17
 8008eec:	f001 f994 	bl	800a218 <__d2b>
 8008ef0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008ef4:	4682      	mov	sl, r0
 8008ef6:	2d00      	cmp	r5, #0
 8008ef8:	d07f      	beq.n	8008ffa <_dtoa_r+0x20a>
 8008efa:	ee18 3a90 	vmov	r3, s17
 8008efe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008f06:	ec51 0b18 	vmov	r0, r1, d8
 8008f0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008f0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008f12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008f16:	4619      	mov	r1, r3
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4b75      	ldr	r3, [pc, #468]	; (80090f0 <_dtoa_r+0x300>)
 8008f1c:	f7f7 f9ec 	bl	80002f8 <__aeabi_dsub>
 8008f20:	a367      	add	r3, pc, #412	; (adr r3, 80090c0 <_dtoa_r+0x2d0>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 fb9f 	bl	8000668 <__aeabi_dmul>
 8008f2a:	a367      	add	r3, pc, #412	; (adr r3, 80090c8 <_dtoa_r+0x2d8>)
 8008f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f30:	f7f7 f9e4 	bl	80002fc <__adddf3>
 8008f34:	4606      	mov	r6, r0
 8008f36:	4628      	mov	r0, r5
 8008f38:	460f      	mov	r7, r1
 8008f3a:	f7f7 fb2b 	bl	8000594 <__aeabi_i2d>
 8008f3e:	a364      	add	r3, pc, #400	; (adr r3, 80090d0 <_dtoa_r+0x2e0>)
 8008f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f44:	f7f7 fb90 	bl	8000668 <__aeabi_dmul>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	4639      	mov	r1, r7
 8008f50:	f7f7 f9d4 	bl	80002fc <__adddf3>
 8008f54:	4606      	mov	r6, r0
 8008f56:	460f      	mov	r7, r1
 8008f58:	f7f7 fe36 	bl	8000bc8 <__aeabi_d2iz>
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	4683      	mov	fp, r0
 8008f60:	2300      	movs	r3, #0
 8008f62:	4630      	mov	r0, r6
 8008f64:	4639      	mov	r1, r7
 8008f66:	f7f7 fdf1 	bl	8000b4c <__aeabi_dcmplt>
 8008f6a:	b148      	cbz	r0, 8008f80 <_dtoa_r+0x190>
 8008f6c:	4658      	mov	r0, fp
 8008f6e:	f7f7 fb11 	bl	8000594 <__aeabi_i2d>
 8008f72:	4632      	mov	r2, r6
 8008f74:	463b      	mov	r3, r7
 8008f76:	f7f7 fddf 	bl	8000b38 <__aeabi_dcmpeq>
 8008f7a:	b908      	cbnz	r0, 8008f80 <_dtoa_r+0x190>
 8008f7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f80:	f1bb 0f16 	cmp.w	fp, #22
 8008f84:	d857      	bhi.n	8009036 <_dtoa_r+0x246>
 8008f86:	4b5b      	ldr	r3, [pc, #364]	; (80090f4 <_dtoa_r+0x304>)
 8008f88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f90:	ec51 0b18 	vmov	r0, r1, d8
 8008f94:	f7f7 fdda 	bl	8000b4c <__aeabi_dcmplt>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d04e      	beq.n	800903a <_dtoa_r+0x24a>
 8008f9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	930c      	str	r3, [sp, #48]	; 0x30
 8008fa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008fa6:	1b5b      	subs	r3, r3, r5
 8008fa8:	1e5a      	subs	r2, r3, #1
 8008faa:	bf45      	ittet	mi
 8008fac:	f1c3 0301 	rsbmi	r3, r3, #1
 8008fb0:	9305      	strmi	r3, [sp, #20]
 8008fb2:	2300      	movpl	r3, #0
 8008fb4:	2300      	movmi	r3, #0
 8008fb6:	9206      	str	r2, [sp, #24]
 8008fb8:	bf54      	ite	pl
 8008fba:	9305      	strpl	r3, [sp, #20]
 8008fbc:	9306      	strmi	r3, [sp, #24]
 8008fbe:	f1bb 0f00 	cmp.w	fp, #0
 8008fc2:	db3c      	blt.n	800903e <_dtoa_r+0x24e>
 8008fc4:	9b06      	ldr	r3, [sp, #24]
 8008fc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008fca:	445b      	add	r3, fp
 8008fcc:	9306      	str	r3, [sp, #24]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9308      	str	r3, [sp, #32]
 8008fd2:	9b07      	ldr	r3, [sp, #28]
 8008fd4:	2b09      	cmp	r3, #9
 8008fd6:	d868      	bhi.n	80090aa <_dtoa_r+0x2ba>
 8008fd8:	2b05      	cmp	r3, #5
 8008fda:	bfc4      	itt	gt
 8008fdc:	3b04      	subgt	r3, #4
 8008fde:	9307      	strgt	r3, [sp, #28]
 8008fe0:	9b07      	ldr	r3, [sp, #28]
 8008fe2:	f1a3 0302 	sub.w	r3, r3, #2
 8008fe6:	bfcc      	ite	gt
 8008fe8:	2500      	movgt	r5, #0
 8008fea:	2501      	movle	r5, #1
 8008fec:	2b03      	cmp	r3, #3
 8008fee:	f200 8085 	bhi.w	80090fc <_dtoa_r+0x30c>
 8008ff2:	e8df f003 	tbb	[pc, r3]
 8008ff6:	3b2e      	.short	0x3b2e
 8008ff8:	5839      	.short	0x5839
 8008ffa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ffe:	441d      	add	r5, r3
 8009000:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009004:	2b20      	cmp	r3, #32
 8009006:	bfc1      	itttt	gt
 8009008:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800900c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009010:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009014:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009018:	bfd6      	itet	le
 800901a:	f1c3 0320 	rsble	r3, r3, #32
 800901e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009022:	fa06 f003 	lslle.w	r0, r6, r3
 8009026:	f7f7 faa5 	bl	8000574 <__aeabi_ui2d>
 800902a:	2201      	movs	r2, #1
 800902c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009030:	3d01      	subs	r5, #1
 8009032:	920e      	str	r2, [sp, #56]	; 0x38
 8009034:	e76f      	b.n	8008f16 <_dtoa_r+0x126>
 8009036:	2301      	movs	r3, #1
 8009038:	e7b3      	b.n	8008fa2 <_dtoa_r+0x1b2>
 800903a:	900c      	str	r0, [sp, #48]	; 0x30
 800903c:	e7b2      	b.n	8008fa4 <_dtoa_r+0x1b4>
 800903e:	9b05      	ldr	r3, [sp, #20]
 8009040:	eba3 030b 	sub.w	r3, r3, fp
 8009044:	9305      	str	r3, [sp, #20]
 8009046:	f1cb 0300 	rsb	r3, fp, #0
 800904a:	9308      	str	r3, [sp, #32]
 800904c:	2300      	movs	r3, #0
 800904e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009050:	e7bf      	b.n	8008fd2 <_dtoa_r+0x1e2>
 8009052:	2300      	movs	r3, #0
 8009054:	9309      	str	r3, [sp, #36]	; 0x24
 8009056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009058:	2b00      	cmp	r3, #0
 800905a:	dc52      	bgt.n	8009102 <_dtoa_r+0x312>
 800905c:	2301      	movs	r3, #1
 800905e:	9301      	str	r3, [sp, #4]
 8009060:	9304      	str	r3, [sp, #16]
 8009062:	461a      	mov	r2, r3
 8009064:	920a      	str	r2, [sp, #40]	; 0x28
 8009066:	e00b      	b.n	8009080 <_dtoa_r+0x290>
 8009068:	2301      	movs	r3, #1
 800906a:	e7f3      	b.n	8009054 <_dtoa_r+0x264>
 800906c:	2300      	movs	r3, #0
 800906e:	9309      	str	r3, [sp, #36]	; 0x24
 8009070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009072:	445b      	add	r3, fp
 8009074:	9301      	str	r3, [sp, #4]
 8009076:	3301      	adds	r3, #1
 8009078:	2b01      	cmp	r3, #1
 800907a:	9304      	str	r3, [sp, #16]
 800907c:	bfb8      	it	lt
 800907e:	2301      	movlt	r3, #1
 8009080:	69e0      	ldr	r0, [r4, #28]
 8009082:	2100      	movs	r1, #0
 8009084:	2204      	movs	r2, #4
 8009086:	f102 0614 	add.w	r6, r2, #20
 800908a:	429e      	cmp	r6, r3
 800908c:	d93d      	bls.n	800910a <_dtoa_r+0x31a>
 800908e:	6041      	str	r1, [r0, #4]
 8009090:	4620      	mov	r0, r4
 8009092:	f000 fd9f 	bl	8009bd4 <_Balloc>
 8009096:	9000      	str	r0, [sp, #0]
 8009098:	2800      	cmp	r0, #0
 800909a:	d139      	bne.n	8009110 <_dtoa_r+0x320>
 800909c:	4b16      	ldr	r3, [pc, #88]	; (80090f8 <_dtoa_r+0x308>)
 800909e:	4602      	mov	r2, r0
 80090a0:	f240 11af 	movw	r1, #431	; 0x1af
 80090a4:	e6bd      	b.n	8008e22 <_dtoa_r+0x32>
 80090a6:	2301      	movs	r3, #1
 80090a8:	e7e1      	b.n	800906e <_dtoa_r+0x27e>
 80090aa:	2501      	movs	r5, #1
 80090ac:	2300      	movs	r3, #0
 80090ae:	9307      	str	r3, [sp, #28]
 80090b0:	9509      	str	r5, [sp, #36]	; 0x24
 80090b2:	f04f 33ff 	mov.w	r3, #4294967295
 80090b6:	9301      	str	r3, [sp, #4]
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	2200      	movs	r2, #0
 80090bc:	2312      	movs	r3, #18
 80090be:	e7d1      	b.n	8009064 <_dtoa_r+0x274>
 80090c0:	636f4361 	.word	0x636f4361
 80090c4:	3fd287a7 	.word	0x3fd287a7
 80090c8:	8b60c8b3 	.word	0x8b60c8b3
 80090cc:	3fc68a28 	.word	0x3fc68a28
 80090d0:	509f79fb 	.word	0x509f79fb
 80090d4:	3fd34413 	.word	0x3fd34413
 80090d8:	0800ae75 	.word	0x0800ae75
 80090dc:	0800ae8c 	.word	0x0800ae8c
 80090e0:	7ff00000 	.word	0x7ff00000
 80090e4:	0800ae71 	.word	0x0800ae71
 80090e8:	0800ae68 	.word	0x0800ae68
 80090ec:	0800ae45 	.word	0x0800ae45
 80090f0:	3ff80000 	.word	0x3ff80000
 80090f4:	0800af78 	.word	0x0800af78
 80090f8:	0800aee4 	.word	0x0800aee4
 80090fc:	2301      	movs	r3, #1
 80090fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009100:	e7d7      	b.n	80090b2 <_dtoa_r+0x2c2>
 8009102:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	9304      	str	r3, [sp, #16]
 8009108:	e7ba      	b.n	8009080 <_dtoa_r+0x290>
 800910a:	3101      	adds	r1, #1
 800910c:	0052      	lsls	r2, r2, #1
 800910e:	e7ba      	b.n	8009086 <_dtoa_r+0x296>
 8009110:	69e3      	ldr	r3, [r4, #28]
 8009112:	9a00      	ldr	r2, [sp, #0]
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	9b04      	ldr	r3, [sp, #16]
 8009118:	2b0e      	cmp	r3, #14
 800911a:	f200 80a8 	bhi.w	800926e <_dtoa_r+0x47e>
 800911e:	2d00      	cmp	r5, #0
 8009120:	f000 80a5 	beq.w	800926e <_dtoa_r+0x47e>
 8009124:	f1bb 0f00 	cmp.w	fp, #0
 8009128:	dd38      	ble.n	800919c <_dtoa_r+0x3ac>
 800912a:	4bc0      	ldr	r3, [pc, #768]	; (800942c <_dtoa_r+0x63c>)
 800912c:	f00b 020f 	and.w	r2, fp, #15
 8009130:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009134:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009138:	e9d3 6700 	ldrd	r6, r7, [r3]
 800913c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009140:	d019      	beq.n	8009176 <_dtoa_r+0x386>
 8009142:	4bbb      	ldr	r3, [pc, #748]	; (8009430 <_dtoa_r+0x640>)
 8009144:	ec51 0b18 	vmov	r0, r1, d8
 8009148:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800914c:	f7f7 fbb6 	bl	80008bc <__aeabi_ddiv>
 8009150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009154:	f008 080f 	and.w	r8, r8, #15
 8009158:	2503      	movs	r5, #3
 800915a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009430 <_dtoa_r+0x640>
 800915e:	f1b8 0f00 	cmp.w	r8, #0
 8009162:	d10a      	bne.n	800917a <_dtoa_r+0x38a>
 8009164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009168:	4632      	mov	r2, r6
 800916a:	463b      	mov	r3, r7
 800916c:	f7f7 fba6 	bl	80008bc <__aeabi_ddiv>
 8009170:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009174:	e02b      	b.n	80091ce <_dtoa_r+0x3de>
 8009176:	2502      	movs	r5, #2
 8009178:	e7ef      	b.n	800915a <_dtoa_r+0x36a>
 800917a:	f018 0f01 	tst.w	r8, #1
 800917e:	d008      	beq.n	8009192 <_dtoa_r+0x3a2>
 8009180:	4630      	mov	r0, r6
 8009182:	4639      	mov	r1, r7
 8009184:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009188:	f7f7 fa6e 	bl	8000668 <__aeabi_dmul>
 800918c:	3501      	adds	r5, #1
 800918e:	4606      	mov	r6, r0
 8009190:	460f      	mov	r7, r1
 8009192:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009196:	f109 0908 	add.w	r9, r9, #8
 800919a:	e7e0      	b.n	800915e <_dtoa_r+0x36e>
 800919c:	f000 809f 	beq.w	80092de <_dtoa_r+0x4ee>
 80091a0:	f1cb 0600 	rsb	r6, fp, #0
 80091a4:	4ba1      	ldr	r3, [pc, #644]	; (800942c <_dtoa_r+0x63c>)
 80091a6:	4fa2      	ldr	r7, [pc, #648]	; (8009430 <_dtoa_r+0x640>)
 80091a8:	f006 020f 	and.w	r2, r6, #15
 80091ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80091b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b4:	ec51 0b18 	vmov	r0, r1, d8
 80091b8:	f7f7 fa56 	bl	8000668 <__aeabi_dmul>
 80091bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091c0:	1136      	asrs	r6, r6, #4
 80091c2:	2300      	movs	r3, #0
 80091c4:	2502      	movs	r5, #2
 80091c6:	2e00      	cmp	r6, #0
 80091c8:	d17e      	bne.n	80092c8 <_dtoa_r+0x4d8>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d1d0      	bne.n	8009170 <_dtoa_r+0x380>
 80091ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091d0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8084 	beq.w	80092e2 <_dtoa_r+0x4f2>
 80091da:	4b96      	ldr	r3, [pc, #600]	; (8009434 <_dtoa_r+0x644>)
 80091dc:	2200      	movs	r2, #0
 80091de:	4640      	mov	r0, r8
 80091e0:	4649      	mov	r1, r9
 80091e2:	f7f7 fcb3 	bl	8000b4c <__aeabi_dcmplt>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d07b      	beq.n	80092e2 <_dtoa_r+0x4f2>
 80091ea:	9b04      	ldr	r3, [sp, #16]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d078      	beq.n	80092e2 <_dtoa_r+0x4f2>
 80091f0:	9b01      	ldr	r3, [sp, #4]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	dd39      	ble.n	800926a <_dtoa_r+0x47a>
 80091f6:	4b90      	ldr	r3, [pc, #576]	; (8009438 <_dtoa_r+0x648>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	4640      	mov	r0, r8
 80091fc:	4649      	mov	r1, r9
 80091fe:	f7f7 fa33 	bl	8000668 <__aeabi_dmul>
 8009202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009206:	9e01      	ldr	r6, [sp, #4]
 8009208:	f10b 37ff 	add.w	r7, fp, #4294967295
 800920c:	3501      	adds	r5, #1
 800920e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009212:	4628      	mov	r0, r5
 8009214:	f7f7 f9be 	bl	8000594 <__aeabi_i2d>
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	f7f7 fa24 	bl	8000668 <__aeabi_dmul>
 8009220:	4b86      	ldr	r3, [pc, #536]	; (800943c <_dtoa_r+0x64c>)
 8009222:	2200      	movs	r2, #0
 8009224:	f7f7 f86a 	bl	80002fc <__adddf3>
 8009228:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800922c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009230:	9303      	str	r3, [sp, #12]
 8009232:	2e00      	cmp	r6, #0
 8009234:	d158      	bne.n	80092e8 <_dtoa_r+0x4f8>
 8009236:	4b82      	ldr	r3, [pc, #520]	; (8009440 <_dtoa_r+0x650>)
 8009238:	2200      	movs	r2, #0
 800923a:	4640      	mov	r0, r8
 800923c:	4649      	mov	r1, r9
 800923e:	f7f7 f85b 	bl	80002f8 <__aeabi_dsub>
 8009242:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009246:	4680      	mov	r8, r0
 8009248:	4689      	mov	r9, r1
 800924a:	f7f7 fc9d 	bl	8000b88 <__aeabi_dcmpgt>
 800924e:	2800      	cmp	r0, #0
 8009250:	f040 8296 	bne.w	8009780 <_dtoa_r+0x990>
 8009254:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009258:	4640      	mov	r0, r8
 800925a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800925e:	4649      	mov	r1, r9
 8009260:	f7f7 fc74 	bl	8000b4c <__aeabi_dcmplt>
 8009264:	2800      	cmp	r0, #0
 8009266:	f040 8289 	bne.w	800977c <_dtoa_r+0x98c>
 800926a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800926e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009270:	2b00      	cmp	r3, #0
 8009272:	f2c0 814e 	blt.w	8009512 <_dtoa_r+0x722>
 8009276:	f1bb 0f0e 	cmp.w	fp, #14
 800927a:	f300 814a 	bgt.w	8009512 <_dtoa_r+0x722>
 800927e:	4b6b      	ldr	r3, [pc, #428]	; (800942c <_dtoa_r+0x63c>)
 8009280:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009284:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009288:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800928a:	2b00      	cmp	r3, #0
 800928c:	f280 80dc 	bge.w	8009448 <_dtoa_r+0x658>
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f300 80d8 	bgt.w	8009448 <_dtoa_r+0x658>
 8009298:	f040 826f 	bne.w	800977a <_dtoa_r+0x98a>
 800929c:	4b68      	ldr	r3, [pc, #416]	; (8009440 <_dtoa_r+0x650>)
 800929e:	2200      	movs	r2, #0
 80092a0:	4640      	mov	r0, r8
 80092a2:	4649      	mov	r1, r9
 80092a4:	f7f7 f9e0 	bl	8000668 <__aeabi_dmul>
 80092a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80092ac:	f7f7 fc62 	bl	8000b74 <__aeabi_dcmpge>
 80092b0:	9e04      	ldr	r6, [sp, #16]
 80092b2:	4637      	mov	r7, r6
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f040 8245 	bne.w	8009744 <_dtoa_r+0x954>
 80092ba:	9d00      	ldr	r5, [sp, #0]
 80092bc:	2331      	movs	r3, #49	; 0x31
 80092be:	f805 3b01 	strb.w	r3, [r5], #1
 80092c2:	f10b 0b01 	add.w	fp, fp, #1
 80092c6:	e241      	b.n	800974c <_dtoa_r+0x95c>
 80092c8:	07f2      	lsls	r2, r6, #31
 80092ca:	d505      	bpl.n	80092d8 <_dtoa_r+0x4e8>
 80092cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092d0:	f7f7 f9ca 	bl	8000668 <__aeabi_dmul>
 80092d4:	3501      	adds	r5, #1
 80092d6:	2301      	movs	r3, #1
 80092d8:	1076      	asrs	r6, r6, #1
 80092da:	3708      	adds	r7, #8
 80092dc:	e773      	b.n	80091c6 <_dtoa_r+0x3d6>
 80092de:	2502      	movs	r5, #2
 80092e0:	e775      	b.n	80091ce <_dtoa_r+0x3de>
 80092e2:	9e04      	ldr	r6, [sp, #16]
 80092e4:	465f      	mov	r7, fp
 80092e6:	e792      	b.n	800920e <_dtoa_r+0x41e>
 80092e8:	9900      	ldr	r1, [sp, #0]
 80092ea:	4b50      	ldr	r3, [pc, #320]	; (800942c <_dtoa_r+0x63c>)
 80092ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092f0:	4431      	add	r1, r6
 80092f2:	9102      	str	r1, [sp, #8]
 80092f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80092f6:	eeb0 9a47 	vmov.f32	s18, s14
 80092fa:	eef0 9a67 	vmov.f32	s19, s15
 80092fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009302:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009306:	2900      	cmp	r1, #0
 8009308:	d044      	beq.n	8009394 <_dtoa_r+0x5a4>
 800930a:	494e      	ldr	r1, [pc, #312]	; (8009444 <_dtoa_r+0x654>)
 800930c:	2000      	movs	r0, #0
 800930e:	f7f7 fad5 	bl	80008bc <__aeabi_ddiv>
 8009312:	ec53 2b19 	vmov	r2, r3, d9
 8009316:	f7f6 ffef 	bl	80002f8 <__aeabi_dsub>
 800931a:	9d00      	ldr	r5, [sp, #0]
 800931c:	ec41 0b19 	vmov	d9, r0, r1
 8009320:	4649      	mov	r1, r9
 8009322:	4640      	mov	r0, r8
 8009324:	f7f7 fc50 	bl	8000bc8 <__aeabi_d2iz>
 8009328:	4606      	mov	r6, r0
 800932a:	f7f7 f933 	bl	8000594 <__aeabi_i2d>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4640      	mov	r0, r8
 8009334:	4649      	mov	r1, r9
 8009336:	f7f6 ffdf 	bl	80002f8 <__aeabi_dsub>
 800933a:	3630      	adds	r6, #48	; 0x30
 800933c:	f805 6b01 	strb.w	r6, [r5], #1
 8009340:	ec53 2b19 	vmov	r2, r3, d9
 8009344:	4680      	mov	r8, r0
 8009346:	4689      	mov	r9, r1
 8009348:	f7f7 fc00 	bl	8000b4c <__aeabi_dcmplt>
 800934c:	2800      	cmp	r0, #0
 800934e:	d164      	bne.n	800941a <_dtoa_r+0x62a>
 8009350:	4642      	mov	r2, r8
 8009352:	464b      	mov	r3, r9
 8009354:	4937      	ldr	r1, [pc, #220]	; (8009434 <_dtoa_r+0x644>)
 8009356:	2000      	movs	r0, #0
 8009358:	f7f6 ffce 	bl	80002f8 <__aeabi_dsub>
 800935c:	ec53 2b19 	vmov	r2, r3, d9
 8009360:	f7f7 fbf4 	bl	8000b4c <__aeabi_dcmplt>
 8009364:	2800      	cmp	r0, #0
 8009366:	f040 80b6 	bne.w	80094d6 <_dtoa_r+0x6e6>
 800936a:	9b02      	ldr	r3, [sp, #8]
 800936c:	429d      	cmp	r5, r3
 800936e:	f43f af7c 	beq.w	800926a <_dtoa_r+0x47a>
 8009372:	4b31      	ldr	r3, [pc, #196]	; (8009438 <_dtoa_r+0x648>)
 8009374:	ec51 0b19 	vmov	r0, r1, d9
 8009378:	2200      	movs	r2, #0
 800937a:	f7f7 f975 	bl	8000668 <__aeabi_dmul>
 800937e:	4b2e      	ldr	r3, [pc, #184]	; (8009438 <_dtoa_r+0x648>)
 8009380:	ec41 0b19 	vmov	d9, r0, r1
 8009384:	2200      	movs	r2, #0
 8009386:	4640      	mov	r0, r8
 8009388:	4649      	mov	r1, r9
 800938a:	f7f7 f96d 	bl	8000668 <__aeabi_dmul>
 800938e:	4680      	mov	r8, r0
 8009390:	4689      	mov	r9, r1
 8009392:	e7c5      	b.n	8009320 <_dtoa_r+0x530>
 8009394:	ec51 0b17 	vmov	r0, r1, d7
 8009398:	f7f7 f966 	bl	8000668 <__aeabi_dmul>
 800939c:	9b02      	ldr	r3, [sp, #8]
 800939e:	9d00      	ldr	r5, [sp, #0]
 80093a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80093a2:	ec41 0b19 	vmov	d9, r0, r1
 80093a6:	4649      	mov	r1, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	f7f7 fc0d 	bl	8000bc8 <__aeabi_d2iz>
 80093ae:	4606      	mov	r6, r0
 80093b0:	f7f7 f8f0 	bl	8000594 <__aeabi_i2d>
 80093b4:	3630      	adds	r6, #48	; 0x30
 80093b6:	4602      	mov	r2, r0
 80093b8:	460b      	mov	r3, r1
 80093ba:	4640      	mov	r0, r8
 80093bc:	4649      	mov	r1, r9
 80093be:	f7f6 ff9b 	bl	80002f8 <__aeabi_dsub>
 80093c2:	f805 6b01 	strb.w	r6, [r5], #1
 80093c6:	9b02      	ldr	r3, [sp, #8]
 80093c8:	429d      	cmp	r5, r3
 80093ca:	4680      	mov	r8, r0
 80093cc:	4689      	mov	r9, r1
 80093ce:	f04f 0200 	mov.w	r2, #0
 80093d2:	d124      	bne.n	800941e <_dtoa_r+0x62e>
 80093d4:	4b1b      	ldr	r3, [pc, #108]	; (8009444 <_dtoa_r+0x654>)
 80093d6:	ec51 0b19 	vmov	r0, r1, d9
 80093da:	f7f6 ff8f 	bl	80002fc <__adddf3>
 80093de:	4602      	mov	r2, r0
 80093e0:	460b      	mov	r3, r1
 80093e2:	4640      	mov	r0, r8
 80093e4:	4649      	mov	r1, r9
 80093e6:	f7f7 fbcf 	bl	8000b88 <__aeabi_dcmpgt>
 80093ea:	2800      	cmp	r0, #0
 80093ec:	d173      	bne.n	80094d6 <_dtoa_r+0x6e6>
 80093ee:	ec53 2b19 	vmov	r2, r3, d9
 80093f2:	4914      	ldr	r1, [pc, #80]	; (8009444 <_dtoa_r+0x654>)
 80093f4:	2000      	movs	r0, #0
 80093f6:	f7f6 ff7f 	bl	80002f8 <__aeabi_dsub>
 80093fa:	4602      	mov	r2, r0
 80093fc:	460b      	mov	r3, r1
 80093fe:	4640      	mov	r0, r8
 8009400:	4649      	mov	r1, r9
 8009402:	f7f7 fba3 	bl	8000b4c <__aeabi_dcmplt>
 8009406:	2800      	cmp	r0, #0
 8009408:	f43f af2f 	beq.w	800926a <_dtoa_r+0x47a>
 800940c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800940e:	1e6b      	subs	r3, r5, #1
 8009410:	930f      	str	r3, [sp, #60]	; 0x3c
 8009412:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009416:	2b30      	cmp	r3, #48	; 0x30
 8009418:	d0f8      	beq.n	800940c <_dtoa_r+0x61c>
 800941a:	46bb      	mov	fp, r7
 800941c:	e04a      	b.n	80094b4 <_dtoa_r+0x6c4>
 800941e:	4b06      	ldr	r3, [pc, #24]	; (8009438 <_dtoa_r+0x648>)
 8009420:	f7f7 f922 	bl	8000668 <__aeabi_dmul>
 8009424:	4680      	mov	r8, r0
 8009426:	4689      	mov	r9, r1
 8009428:	e7bd      	b.n	80093a6 <_dtoa_r+0x5b6>
 800942a:	bf00      	nop
 800942c:	0800af78 	.word	0x0800af78
 8009430:	0800af50 	.word	0x0800af50
 8009434:	3ff00000 	.word	0x3ff00000
 8009438:	40240000 	.word	0x40240000
 800943c:	401c0000 	.word	0x401c0000
 8009440:	40140000 	.word	0x40140000
 8009444:	3fe00000 	.word	0x3fe00000
 8009448:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800944c:	9d00      	ldr	r5, [sp, #0]
 800944e:	4642      	mov	r2, r8
 8009450:	464b      	mov	r3, r9
 8009452:	4630      	mov	r0, r6
 8009454:	4639      	mov	r1, r7
 8009456:	f7f7 fa31 	bl	80008bc <__aeabi_ddiv>
 800945a:	f7f7 fbb5 	bl	8000bc8 <__aeabi_d2iz>
 800945e:	9001      	str	r0, [sp, #4]
 8009460:	f7f7 f898 	bl	8000594 <__aeabi_i2d>
 8009464:	4642      	mov	r2, r8
 8009466:	464b      	mov	r3, r9
 8009468:	f7f7 f8fe 	bl	8000668 <__aeabi_dmul>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4630      	mov	r0, r6
 8009472:	4639      	mov	r1, r7
 8009474:	f7f6 ff40 	bl	80002f8 <__aeabi_dsub>
 8009478:	9e01      	ldr	r6, [sp, #4]
 800947a:	9f04      	ldr	r7, [sp, #16]
 800947c:	3630      	adds	r6, #48	; 0x30
 800947e:	f805 6b01 	strb.w	r6, [r5], #1
 8009482:	9e00      	ldr	r6, [sp, #0]
 8009484:	1bae      	subs	r6, r5, r6
 8009486:	42b7      	cmp	r7, r6
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	d134      	bne.n	80094f8 <_dtoa_r+0x708>
 800948e:	f7f6 ff35 	bl	80002fc <__adddf3>
 8009492:	4642      	mov	r2, r8
 8009494:	464b      	mov	r3, r9
 8009496:	4606      	mov	r6, r0
 8009498:	460f      	mov	r7, r1
 800949a:	f7f7 fb75 	bl	8000b88 <__aeabi_dcmpgt>
 800949e:	b9c8      	cbnz	r0, 80094d4 <_dtoa_r+0x6e4>
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	4630      	mov	r0, r6
 80094a6:	4639      	mov	r1, r7
 80094a8:	f7f7 fb46 	bl	8000b38 <__aeabi_dcmpeq>
 80094ac:	b110      	cbz	r0, 80094b4 <_dtoa_r+0x6c4>
 80094ae:	9b01      	ldr	r3, [sp, #4]
 80094b0:	07db      	lsls	r3, r3, #31
 80094b2:	d40f      	bmi.n	80094d4 <_dtoa_r+0x6e4>
 80094b4:	4651      	mov	r1, sl
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 fbcc 	bl	8009c54 <_Bfree>
 80094bc:	2300      	movs	r3, #0
 80094be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80094c0:	702b      	strb	r3, [r5, #0]
 80094c2:	f10b 0301 	add.w	r3, fp, #1
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f43f ace2 	beq.w	8008e94 <_dtoa_r+0xa4>
 80094d0:	601d      	str	r5, [r3, #0]
 80094d2:	e4df      	b.n	8008e94 <_dtoa_r+0xa4>
 80094d4:	465f      	mov	r7, fp
 80094d6:	462b      	mov	r3, r5
 80094d8:	461d      	mov	r5, r3
 80094da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094de:	2a39      	cmp	r2, #57	; 0x39
 80094e0:	d106      	bne.n	80094f0 <_dtoa_r+0x700>
 80094e2:	9a00      	ldr	r2, [sp, #0]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d1f7      	bne.n	80094d8 <_dtoa_r+0x6e8>
 80094e8:	9900      	ldr	r1, [sp, #0]
 80094ea:	2230      	movs	r2, #48	; 0x30
 80094ec:	3701      	adds	r7, #1
 80094ee:	700a      	strb	r2, [r1, #0]
 80094f0:	781a      	ldrb	r2, [r3, #0]
 80094f2:	3201      	adds	r2, #1
 80094f4:	701a      	strb	r2, [r3, #0]
 80094f6:	e790      	b.n	800941a <_dtoa_r+0x62a>
 80094f8:	4ba3      	ldr	r3, [pc, #652]	; (8009788 <_dtoa_r+0x998>)
 80094fa:	2200      	movs	r2, #0
 80094fc:	f7f7 f8b4 	bl	8000668 <__aeabi_dmul>
 8009500:	2200      	movs	r2, #0
 8009502:	2300      	movs	r3, #0
 8009504:	4606      	mov	r6, r0
 8009506:	460f      	mov	r7, r1
 8009508:	f7f7 fb16 	bl	8000b38 <__aeabi_dcmpeq>
 800950c:	2800      	cmp	r0, #0
 800950e:	d09e      	beq.n	800944e <_dtoa_r+0x65e>
 8009510:	e7d0      	b.n	80094b4 <_dtoa_r+0x6c4>
 8009512:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009514:	2a00      	cmp	r2, #0
 8009516:	f000 80ca 	beq.w	80096ae <_dtoa_r+0x8be>
 800951a:	9a07      	ldr	r2, [sp, #28]
 800951c:	2a01      	cmp	r2, #1
 800951e:	f300 80ad 	bgt.w	800967c <_dtoa_r+0x88c>
 8009522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009524:	2a00      	cmp	r2, #0
 8009526:	f000 80a5 	beq.w	8009674 <_dtoa_r+0x884>
 800952a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800952e:	9e08      	ldr	r6, [sp, #32]
 8009530:	9d05      	ldr	r5, [sp, #20]
 8009532:	9a05      	ldr	r2, [sp, #20]
 8009534:	441a      	add	r2, r3
 8009536:	9205      	str	r2, [sp, #20]
 8009538:	9a06      	ldr	r2, [sp, #24]
 800953a:	2101      	movs	r1, #1
 800953c:	441a      	add	r2, r3
 800953e:	4620      	mov	r0, r4
 8009540:	9206      	str	r2, [sp, #24]
 8009542:	f000 fc3d 	bl	8009dc0 <__i2b>
 8009546:	4607      	mov	r7, r0
 8009548:	b165      	cbz	r5, 8009564 <_dtoa_r+0x774>
 800954a:	9b06      	ldr	r3, [sp, #24]
 800954c:	2b00      	cmp	r3, #0
 800954e:	dd09      	ble.n	8009564 <_dtoa_r+0x774>
 8009550:	42ab      	cmp	r3, r5
 8009552:	9a05      	ldr	r2, [sp, #20]
 8009554:	bfa8      	it	ge
 8009556:	462b      	movge	r3, r5
 8009558:	1ad2      	subs	r2, r2, r3
 800955a:	9205      	str	r2, [sp, #20]
 800955c:	9a06      	ldr	r2, [sp, #24]
 800955e:	1aed      	subs	r5, r5, r3
 8009560:	1ad3      	subs	r3, r2, r3
 8009562:	9306      	str	r3, [sp, #24]
 8009564:	9b08      	ldr	r3, [sp, #32]
 8009566:	b1f3      	cbz	r3, 80095a6 <_dtoa_r+0x7b6>
 8009568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800956a:	2b00      	cmp	r3, #0
 800956c:	f000 80a3 	beq.w	80096b6 <_dtoa_r+0x8c6>
 8009570:	2e00      	cmp	r6, #0
 8009572:	dd10      	ble.n	8009596 <_dtoa_r+0x7a6>
 8009574:	4639      	mov	r1, r7
 8009576:	4632      	mov	r2, r6
 8009578:	4620      	mov	r0, r4
 800957a:	f000 fce1 	bl	8009f40 <__pow5mult>
 800957e:	4652      	mov	r2, sl
 8009580:	4601      	mov	r1, r0
 8009582:	4607      	mov	r7, r0
 8009584:	4620      	mov	r0, r4
 8009586:	f000 fc31 	bl	8009dec <__multiply>
 800958a:	4651      	mov	r1, sl
 800958c:	4680      	mov	r8, r0
 800958e:	4620      	mov	r0, r4
 8009590:	f000 fb60 	bl	8009c54 <_Bfree>
 8009594:	46c2      	mov	sl, r8
 8009596:	9b08      	ldr	r3, [sp, #32]
 8009598:	1b9a      	subs	r2, r3, r6
 800959a:	d004      	beq.n	80095a6 <_dtoa_r+0x7b6>
 800959c:	4651      	mov	r1, sl
 800959e:	4620      	mov	r0, r4
 80095a0:	f000 fcce 	bl	8009f40 <__pow5mult>
 80095a4:	4682      	mov	sl, r0
 80095a6:	2101      	movs	r1, #1
 80095a8:	4620      	mov	r0, r4
 80095aa:	f000 fc09 	bl	8009dc0 <__i2b>
 80095ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	4606      	mov	r6, r0
 80095b4:	f340 8081 	ble.w	80096ba <_dtoa_r+0x8ca>
 80095b8:	461a      	mov	r2, r3
 80095ba:	4601      	mov	r1, r0
 80095bc:	4620      	mov	r0, r4
 80095be:	f000 fcbf 	bl	8009f40 <__pow5mult>
 80095c2:	9b07      	ldr	r3, [sp, #28]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	4606      	mov	r6, r0
 80095c8:	dd7a      	ble.n	80096c0 <_dtoa_r+0x8d0>
 80095ca:	f04f 0800 	mov.w	r8, #0
 80095ce:	6933      	ldr	r3, [r6, #16]
 80095d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095d4:	6918      	ldr	r0, [r3, #16]
 80095d6:	f000 fba5 	bl	8009d24 <__hi0bits>
 80095da:	f1c0 0020 	rsb	r0, r0, #32
 80095de:	9b06      	ldr	r3, [sp, #24]
 80095e0:	4418      	add	r0, r3
 80095e2:	f010 001f 	ands.w	r0, r0, #31
 80095e6:	f000 8094 	beq.w	8009712 <_dtoa_r+0x922>
 80095ea:	f1c0 0320 	rsb	r3, r0, #32
 80095ee:	2b04      	cmp	r3, #4
 80095f0:	f340 8085 	ble.w	80096fe <_dtoa_r+0x90e>
 80095f4:	9b05      	ldr	r3, [sp, #20]
 80095f6:	f1c0 001c 	rsb	r0, r0, #28
 80095fa:	4403      	add	r3, r0
 80095fc:	9305      	str	r3, [sp, #20]
 80095fe:	9b06      	ldr	r3, [sp, #24]
 8009600:	4403      	add	r3, r0
 8009602:	4405      	add	r5, r0
 8009604:	9306      	str	r3, [sp, #24]
 8009606:	9b05      	ldr	r3, [sp, #20]
 8009608:	2b00      	cmp	r3, #0
 800960a:	dd05      	ble.n	8009618 <_dtoa_r+0x828>
 800960c:	4651      	mov	r1, sl
 800960e:	461a      	mov	r2, r3
 8009610:	4620      	mov	r0, r4
 8009612:	f000 fcef 	bl	8009ff4 <__lshift>
 8009616:	4682      	mov	sl, r0
 8009618:	9b06      	ldr	r3, [sp, #24]
 800961a:	2b00      	cmp	r3, #0
 800961c:	dd05      	ble.n	800962a <_dtoa_r+0x83a>
 800961e:	4631      	mov	r1, r6
 8009620:	461a      	mov	r2, r3
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fce6 	bl	8009ff4 <__lshift>
 8009628:	4606      	mov	r6, r0
 800962a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800962c:	2b00      	cmp	r3, #0
 800962e:	d072      	beq.n	8009716 <_dtoa_r+0x926>
 8009630:	4631      	mov	r1, r6
 8009632:	4650      	mov	r0, sl
 8009634:	f000 fd4a 	bl	800a0cc <__mcmp>
 8009638:	2800      	cmp	r0, #0
 800963a:	da6c      	bge.n	8009716 <_dtoa_r+0x926>
 800963c:	2300      	movs	r3, #0
 800963e:	4651      	mov	r1, sl
 8009640:	220a      	movs	r2, #10
 8009642:	4620      	mov	r0, r4
 8009644:	f000 fb28 	bl	8009c98 <__multadd>
 8009648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800964a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800964e:	4682      	mov	sl, r0
 8009650:	2b00      	cmp	r3, #0
 8009652:	f000 81b0 	beq.w	80099b6 <_dtoa_r+0xbc6>
 8009656:	2300      	movs	r3, #0
 8009658:	4639      	mov	r1, r7
 800965a:	220a      	movs	r2, #10
 800965c:	4620      	mov	r0, r4
 800965e:	f000 fb1b 	bl	8009c98 <__multadd>
 8009662:	9b01      	ldr	r3, [sp, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	4607      	mov	r7, r0
 8009668:	f300 8096 	bgt.w	8009798 <_dtoa_r+0x9a8>
 800966c:	9b07      	ldr	r3, [sp, #28]
 800966e:	2b02      	cmp	r3, #2
 8009670:	dc59      	bgt.n	8009726 <_dtoa_r+0x936>
 8009672:	e091      	b.n	8009798 <_dtoa_r+0x9a8>
 8009674:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009676:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800967a:	e758      	b.n	800952e <_dtoa_r+0x73e>
 800967c:	9b04      	ldr	r3, [sp, #16]
 800967e:	1e5e      	subs	r6, r3, #1
 8009680:	9b08      	ldr	r3, [sp, #32]
 8009682:	42b3      	cmp	r3, r6
 8009684:	bfbf      	itttt	lt
 8009686:	9b08      	ldrlt	r3, [sp, #32]
 8009688:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800968a:	9608      	strlt	r6, [sp, #32]
 800968c:	1af3      	sublt	r3, r6, r3
 800968e:	bfb4      	ite	lt
 8009690:	18d2      	addlt	r2, r2, r3
 8009692:	1b9e      	subge	r6, r3, r6
 8009694:	9b04      	ldr	r3, [sp, #16]
 8009696:	bfbc      	itt	lt
 8009698:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800969a:	2600      	movlt	r6, #0
 800969c:	2b00      	cmp	r3, #0
 800969e:	bfb7      	itett	lt
 80096a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80096a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80096a8:	1a9d      	sublt	r5, r3, r2
 80096aa:	2300      	movlt	r3, #0
 80096ac:	e741      	b.n	8009532 <_dtoa_r+0x742>
 80096ae:	9e08      	ldr	r6, [sp, #32]
 80096b0:	9d05      	ldr	r5, [sp, #20]
 80096b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80096b4:	e748      	b.n	8009548 <_dtoa_r+0x758>
 80096b6:	9a08      	ldr	r2, [sp, #32]
 80096b8:	e770      	b.n	800959c <_dtoa_r+0x7ac>
 80096ba:	9b07      	ldr	r3, [sp, #28]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	dc19      	bgt.n	80096f4 <_dtoa_r+0x904>
 80096c0:	9b02      	ldr	r3, [sp, #8]
 80096c2:	b9bb      	cbnz	r3, 80096f4 <_dtoa_r+0x904>
 80096c4:	9b03      	ldr	r3, [sp, #12]
 80096c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096ca:	b99b      	cbnz	r3, 80096f4 <_dtoa_r+0x904>
 80096cc:	9b03      	ldr	r3, [sp, #12]
 80096ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096d2:	0d1b      	lsrs	r3, r3, #20
 80096d4:	051b      	lsls	r3, r3, #20
 80096d6:	b183      	cbz	r3, 80096fa <_dtoa_r+0x90a>
 80096d8:	9b05      	ldr	r3, [sp, #20]
 80096da:	3301      	adds	r3, #1
 80096dc:	9305      	str	r3, [sp, #20]
 80096de:	9b06      	ldr	r3, [sp, #24]
 80096e0:	3301      	adds	r3, #1
 80096e2:	9306      	str	r3, [sp, #24]
 80096e4:	f04f 0801 	mov.w	r8, #1
 80096e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f47f af6f 	bne.w	80095ce <_dtoa_r+0x7de>
 80096f0:	2001      	movs	r0, #1
 80096f2:	e774      	b.n	80095de <_dtoa_r+0x7ee>
 80096f4:	f04f 0800 	mov.w	r8, #0
 80096f8:	e7f6      	b.n	80096e8 <_dtoa_r+0x8f8>
 80096fa:	4698      	mov	r8, r3
 80096fc:	e7f4      	b.n	80096e8 <_dtoa_r+0x8f8>
 80096fe:	d082      	beq.n	8009606 <_dtoa_r+0x816>
 8009700:	9a05      	ldr	r2, [sp, #20]
 8009702:	331c      	adds	r3, #28
 8009704:	441a      	add	r2, r3
 8009706:	9205      	str	r2, [sp, #20]
 8009708:	9a06      	ldr	r2, [sp, #24]
 800970a:	441a      	add	r2, r3
 800970c:	441d      	add	r5, r3
 800970e:	9206      	str	r2, [sp, #24]
 8009710:	e779      	b.n	8009606 <_dtoa_r+0x816>
 8009712:	4603      	mov	r3, r0
 8009714:	e7f4      	b.n	8009700 <_dtoa_r+0x910>
 8009716:	9b04      	ldr	r3, [sp, #16]
 8009718:	2b00      	cmp	r3, #0
 800971a:	dc37      	bgt.n	800978c <_dtoa_r+0x99c>
 800971c:	9b07      	ldr	r3, [sp, #28]
 800971e:	2b02      	cmp	r3, #2
 8009720:	dd34      	ble.n	800978c <_dtoa_r+0x99c>
 8009722:	9b04      	ldr	r3, [sp, #16]
 8009724:	9301      	str	r3, [sp, #4]
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	b963      	cbnz	r3, 8009744 <_dtoa_r+0x954>
 800972a:	4631      	mov	r1, r6
 800972c:	2205      	movs	r2, #5
 800972e:	4620      	mov	r0, r4
 8009730:	f000 fab2 	bl	8009c98 <__multadd>
 8009734:	4601      	mov	r1, r0
 8009736:	4606      	mov	r6, r0
 8009738:	4650      	mov	r0, sl
 800973a:	f000 fcc7 	bl	800a0cc <__mcmp>
 800973e:	2800      	cmp	r0, #0
 8009740:	f73f adbb 	bgt.w	80092ba <_dtoa_r+0x4ca>
 8009744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009746:	9d00      	ldr	r5, [sp, #0]
 8009748:	ea6f 0b03 	mvn.w	fp, r3
 800974c:	f04f 0800 	mov.w	r8, #0
 8009750:	4631      	mov	r1, r6
 8009752:	4620      	mov	r0, r4
 8009754:	f000 fa7e 	bl	8009c54 <_Bfree>
 8009758:	2f00      	cmp	r7, #0
 800975a:	f43f aeab 	beq.w	80094b4 <_dtoa_r+0x6c4>
 800975e:	f1b8 0f00 	cmp.w	r8, #0
 8009762:	d005      	beq.n	8009770 <_dtoa_r+0x980>
 8009764:	45b8      	cmp	r8, r7
 8009766:	d003      	beq.n	8009770 <_dtoa_r+0x980>
 8009768:	4641      	mov	r1, r8
 800976a:	4620      	mov	r0, r4
 800976c:	f000 fa72 	bl	8009c54 <_Bfree>
 8009770:	4639      	mov	r1, r7
 8009772:	4620      	mov	r0, r4
 8009774:	f000 fa6e 	bl	8009c54 <_Bfree>
 8009778:	e69c      	b.n	80094b4 <_dtoa_r+0x6c4>
 800977a:	2600      	movs	r6, #0
 800977c:	4637      	mov	r7, r6
 800977e:	e7e1      	b.n	8009744 <_dtoa_r+0x954>
 8009780:	46bb      	mov	fp, r7
 8009782:	4637      	mov	r7, r6
 8009784:	e599      	b.n	80092ba <_dtoa_r+0x4ca>
 8009786:	bf00      	nop
 8009788:	40240000 	.word	0x40240000
 800978c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 80c8 	beq.w	8009924 <_dtoa_r+0xb34>
 8009794:	9b04      	ldr	r3, [sp, #16]
 8009796:	9301      	str	r3, [sp, #4]
 8009798:	2d00      	cmp	r5, #0
 800979a:	dd05      	ble.n	80097a8 <_dtoa_r+0x9b8>
 800979c:	4639      	mov	r1, r7
 800979e:	462a      	mov	r2, r5
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 fc27 	bl	8009ff4 <__lshift>
 80097a6:	4607      	mov	r7, r0
 80097a8:	f1b8 0f00 	cmp.w	r8, #0
 80097ac:	d05b      	beq.n	8009866 <_dtoa_r+0xa76>
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	4620      	mov	r0, r4
 80097b2:	f000 fa0f 	bl	8009bd4 <_Balloc>
 80097b6:	4605      	mov	r5, r0
 80097b8:	b928      	cbnz	r0, 80097c6 <_dtoa_r+0x9d6>
 80097ba:	4b83      	ldr	r3, [pc, #524]	; (80099c8 <_dtoa_r+0xbd8>)
 80097bc:	4602      	mov	r2, r0
 80097be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80097c2:	f7ff bb2e 	b.w	8008e22 <_dtoa_r+0x32>
 80097c6:	693a      	ldr	r2, [r7, #16]
 80097c8:	3202      	adds	r2, #2
 80097ca:	0092      	lsls	r2, r2, #2
 80097cc:	f107 010c 	add.w	r1, r7, #12
 80097d0:	300c      	adds	r0, #12
 80097d2:	f7ff fa76 	bl	8008cc2 <memcpy>
 80097d6:	2201      	movs	r2, #1
 80097d8:	4629      	mov	r1, r5
 80097da:	4620      	mov	r0, r4
 80097dc:	f000 fc0a 	bl	8009ff4 <__lshift>
 80097e0:	9b00      	ldr	r3, [sp, #0]
 80097e2:	3301      	adds	r3, #1
 80097e4:	9304      	str	r3, [sp, #16]
 80097e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097ea:	4413      	add	r3, r2
 80097ec:	9308      	str	r3, [sp, #32]
 80097ee:	9b02      	ldr	r3, [sp, #8]
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	46b8      	mov	r8, r7
 80097f6:	9306      	str	r3, [sp, #24]
 80097f8:	4607      	mov	r7, r0
 80097fa:	9b04      	ldr	r3, [sp, #16]
 80097fc:	4631      	mov	r1, r6
 80097fe:	3b01      	subs	r3, #1
 8009800:	4650      	mov	r0, sl
 8009802:	9301      	str	r3, [sp, #4]
 8009804:	f7ff fa6b 	bl	8008cde <quorem>
 8009808:	4641      	mov	r1, r8
 800980a:	9002      	str	r0, [sp, #8]
 800980c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009810:	4650      	mov	r0, sl
 8009812:	f000 fc5b 	bl	800a0cc <__mcmp>
 8009816:	463a      	mov	r2, r7
 8009818:	9005      	str	r0, [sp, #20]
 800981a:	4631      	mov	r1, r6
 800981c:	4620      	mov	r0, r4
 800981e:	f000 fc71 	bl	800a104 <__mdiff>
 8009822:	68c2      	ldr	r2, [r0, #12]
 8009824:	4605      	mov	r5, r0
 8009826:	bb02      	cbnz	r2, 800986a <_dtoa_r+0xa7a>
 8009828:	4601      	mov	r1, r0
 800982a:	4650      	mov	r0, sl
 800982c:	f000 fc4e 	bl	800a0cc <__mcmp>
 8009830:	4602      	mov	r2, r0
 8009832:	4629      	mov	r1, r5
 8009834:	4620      	mov	r0, r4
 8009836:	9209      	str	r2, [sp, #36]	; 0x24
 8009838:	f000 fa0c 	bl	8009c54 <_Bfree>
 800983c:	9b07      	ldr	r3, [sp, #28]
 800983e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009840:	9d04      	ldr	r5, [sp, #16]
 8009842:	ea43 0102 	orr.w	r1, r3, r2
 8009846:	9b06      	ldr	r3, [sp, #24]
 8009848:	4319      	orrs	r1, r3
 800984a:	d110      	bne.n	800986e <_dtoa_r+0xa7e>
 800984c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009850:	d029      	beq.n	80098a6 <_dtoa_r+0xab6>
 8009852:	9b05      	ldr	r3, [sp, #20]
 8009854:	2b00      	cmp	r3, #0
 8009856:	dd02      	ble.n	800985e <_dtoa_r+0xa6e>
 8009858:	9b02      	ldr	r3, [sp, #8]
 800985a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800985e:	9b01      	ldr	r3, [sp, #4]
 8009860:	f883 9000 	strb.w	r9, [r3]
 8009864:	e774      	b.n	8009750 <_dtoa_r+0x960>
 8009866:	4638      	mov	r0, r7
 8009868:	e7ba      	b.n	80097e0 <_dtoa_r+0x9f0>
 800986a:	2201      	movs	r2, #1
 800986c:	e7e1      	b.n	8009832 <_dtoa_r+0xa42>
 800986e:	9b05      	ldr	r3, [sp, #20]
 8009870:	2b00      	cmp	r3, #0
 8009872:	db04      	blt.n	800987e <_dtoa_r+0xa8e>
 8009874:	9907      	ldr	r1, [sp, #28]
 8009876:	430b      	orrs	r3, r1
 8009878:	9906      	ldr	r1, [sp, #24]
 800987a:	430b      	orrs	r3, r1
 800987c:	d120      	bne.n	80098c0 <_dtoa_r+0xad0>
 800987e:	2a00      	cmp	r2, #0
 8009880:	dded      	ble.n	800985e <_dtoa_r+0xa6e>
 8009882:	4651      	mov	r1, sl
 8009884:	2201      	movs	r2, #1
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fbb4 	bl	8009ff4 <__lshift>
 800988c:	4631      	mov	r1, r6
 800988e:	4682      	mov	sl, r0
 8009890:	f000 fc1c 	bl	800a0cc <__mcmp>
 8009894:	2800      	cmp	r0, #0
 8009896:	dc03      	bgt.n	80098a0 <_dtoa_r+0xab0>
 8009898:	d1e1      	bne.n	800985e <_dtoa_r+0xa6e>
 800989a:	f019 0f01 	tst.w	r9, #1
 800989e:	d0de      	beq.n	800985e <_dtoa_r+0xa6e>
 80098a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80098a4:	d1d8      	bne.n	8009858 <_dtoa_r+0xa68>
 80098a6:	9a01      	ldr	r2, [sp, #4]
 80098a8:	2339      	movs	r3, #57	; 0x39
 80098aa:	7013      	strb	r3, [r2, #0]
 80098ac:	462b      	mov	r3, r5
 80098ae:	461d      	mov	r5, r3
 80098b0:	3b01      	subs	r3, #1
 80098b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80098b6:	2a39      	cmp	r2, #57	; 0x39
 80098b8:	d06c      	beq.n	8009994 <_dtoa_r+0xba4>
 80098ba:	3201      	adds	r2, #1
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	e747      	b.n	8009750 <_dtoa_r+0x960>
 80098c0:	2a00      	cmp	r2, #0
 80098c2:	dd07      	ble.n	80098d4 <_dtoa_r+0xae4>
 80098c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80098c8:	d0ed      	beq.n	80098a6 <_dtoa_r+0xab6>
 80098ca:	9a01      	ldr	r2, [sp, #4]
 80098cc:	f109 0301 	add.w	r3, r9, #1
 80098d0:	7013      	strb	r3, [r2, #0]
 80098d2:	e73d      	b.n	8009750 <_dtoa_r+0x960>
 80098d4:	9b04      	ldr	r3, [sp, #16]
 80098d6:	9a08      	ldr	r2, [sp, #32]
 80098d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80098dc:	4293      	cmp	r3, r2
 80098de:	d043      	beq.n	8009968 <_dtoa_r+0xb78>
 80098e0:	4651      	mov	r1, sl
 80098e2:	2300      	movs	r3, #0
 80098e4:	220a      	movs	r2, #10
 80098e6:	4620      	mov	r0, r4
 80098e8:	f000 f9d6 	bl	8009c98 <__multadd>
 80098ec:	45b8      	cmp	r8, r7
 80098ee:	4682      	mov	sl, r0
 80098f0:	f04f 0300 	mov.w	r3, #0
 80098f4:	f04f 020a 	mov.w	r2, #10
 80098f8:	4641      	mov	r1, r8
 80098fa:	4620      	mov	r0, r4
 80098fc:	d107      	bne.n	800990e <_dtoa_r+0xb1e>
 80098fe:	f000 f9cb 	bl	8009c98 <__multadd>
 8009902:	4680      	mov	r8, r0
 8009904:	4607      	mov	r7, r0
 8009906:	9b04      	ldr	r3, [sp, #16]
 8009908:	3301      	adds	r3, #1
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	e775      	b.n	80097fa <_dtoa_r+0xa0a>
 800990e:	f000 f9c3 	bl	8009c98 <__multadd>
 8009912:	4639      	mov	r1, r7
 8009914:	4680      	mov	r8, r0
 8009916:	2300      	movs	r3, #0
 8009918:	220a      	movs	r2, #10
 800991a:	4620      	mov	r0, r4
 800991c:	f000 f9bc 	bl	8009c98 <__multadd>
 8009920:	4607      	mov	r7, r0
 8009922:	e7f0      	b.n	8009906 <_dtoa_r+0xb16>
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	9301      	str	r3, [sp, #4]
 8009928:	9d00      	ldr	r5, [sp, #0]
 800992a:	4631      	mov	r1, r6
 800992c:	4650      	mov	r0, sl
 800992e:	f7ff f9d6 	bl	8008cde <quorem>
 8009932:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009936:	9b00      	ldr	r3, [sp, #0]
 8009938:	f805 9b01 	strb.w	r9, [r5], #1
 800993c:	1aea      	subs	r2, r5, r3
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	4293      	cmp	r3, r2
 8009942:	dd07      	ble.n	8009954 <_dtoa_r+0xb64>
 8009944:	4651      	mov	r1, sl
 8009946:	2300      	movs	r3, #0
 8009948:	220a      	movs	r2, #10
 800994a:	4620      	mov	r0, r4
 800994c:	f000 f9a4 	bl	8009c98 <__multadd>
 8009950:	4682      	mov	sl, r0
 8009952:	e7ea      	b.n	800992a <_dtoa_r+0xb3a>
 8009954:	9b01      	ldr	r3, [sp, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfc8      	it	gt
 800995a:	461d      	movgt	r5, r3
 800995c:	9b00      	ldr	r3, [sp, #0]
 800995e:	bfd8      	it	le
 8009960:	2501      	movle	r5, #1
 8009962:	441d      	add	r5, r3
 8009964:	f04f 0800 	mov.w	r8, #0
 8009968:	4651      	mov	r1, sl
 800996a:	2201      	movs	r2, #1
 800996c:	4620      	mov	r0, r4
 800996e:	f000 fb41 	bl	8009ff4 <__lshift>
 8009972:	4631      	mov	r1, r6
 8009974:	4682      	mov	sl, r0
 8009976:	f000 fba9 	bl	800a0cc <__mcmp>
 800997a:	2800      	cmp	r0, #0
 800997c:	dc96      	bgt.n	80098ac <_dtoa_r+0xabc>
 800997e:	d102      	bne.n	8009986 <_dtoa_r+0xb96>
 8009980:	f019 0f01 	tst.w	r9, #1
 8009984:	d192      	bne.n	80098ac <_dtoa_r+0xabc>
 8009986:	462b      	mov	r3, r5
 8009988:	461d      	mov	r5, r3
 800998a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800998e:	2a30      	cmp	r2, #48	; 0x30
 8009990:	d0fa      	beq.n	8009988 <_dtoa_r+0xb98>
 8009992:	e6dd      	b.n	8009750 <_dtoa_r+0x960>
 8009994:	9a00      	ldr	r2, [sp, #0]
 8009996:	429a      	cmp	r2, r3
 8009998:	d189      	bne.n	80098ae <_dtoa_r+0xabe>
 800999a:	f10b 0b01 	add.w	fp, fp, #1
 800999e:	2331      	movs	r3, #49	; 0x31
 80099a0:	e796      	b.n	80098d0 <_dtoa_r+0xae0>
 80099a2:	4b0a      	ldr	r3, [pc, #40]	; (80099cc <_dtoa_r+0xbdc>)
 80099a4:	f7ff ba99 	b.w	8008eda <_dtoa_r+0xea>
 80099a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f47f aa6d 	bne.w	8008e8a <_dtoa_r+0x9a>
 80099b0:	4b07      	ldr	r3, [pc, #28]	; (80099d0 <_dtoa_r+0xbe0>)
 80099b2:	f7ff ba92 	b.w	8008eda <_dtoa_r+0xea>
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	dcb5      	bgt.n	8009928 <_dtoa_r+0xb38>
 80099bc:	9b07      	ldr	r3, [sp, #28]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	f73f aeb1 	bgt.w	8009726 <_dtoa_r+0x936>
 80099c4:	e7b0      	b.n	8009928 <_dtoa_r+0xb38>
 80099c6:	bf00      	nop
 80099c8:	0800aee4 	.word	0x0800aee4
 80099cc:	0800ae44 	.word	0x0800ae44
 80099d0:	0800ae68 	.word	0x0800ae68

080099d4 <_free_r>:
 80099d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099d6:	2900      	cmp	r1, #0
 80099d8:	d044      	beq.n	8009a64 <_free_r+0x90>
 80099da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099de:	9001      	str	r0, [sp, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f1a1 0404 	sub.w	r4, r1, #4
 80099e6:	bfb8      	it	lt
 80099e8:	18e4      	addlt	r4, r4, r3
 80099ea:	f000 f8e7 	bl	8009bbc <__malloc_lock>
 80099ee:	4a1e      	ldr	r2, [pc, #120]	; (8009a68 <_free_r+0x94>)
 80099f0:	9801      	ldr	r0, [sp, #4]
 80099f2:	6813      	ldr	r3, [r2, #0]
 80099f4:	b933      	cbnz	r3, 8009a04 <_free_r+0x30>
 80099f6:	6063      	str	r3, [r4, #4]
 80099f8:	6014      	str	r4, [r2, #0]
 80099fa:	b003      	add	sp, #12
 80099fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a00:	f000 b8e2 	b.w	8009bc8 <__malloc_unlock>
 8009a04:	42a3      	cmp	r3, r4
 8009a06:	d908      	bls.n	8009a1a <_free_r+0x46>
 8009a08:	6825      	ldr	r5, [r4, #0]
 8009a0a:	1961      	adds	r1, r4, r5
 8009a0c:	428b      	cmp	r3, r1
 8009a0e:	bf01      	itttt	eq
 8009a10:	6819      	ldreq	r1, [r3, #0]
 8009a12:	685b      	ldreq	r3, [r3, #4]
 8009a14:	1949      	addeq	r1, r1, r5
 8009a16:	6021      	streq	r1, [r4, #0]
 8009a18:	e7ed      	b.n	80099f6 <_free_r+0x22>
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	b10b      	cbz	r3, 8009a24 <_free_r+0x50>
 8009a20:	42a3      	cmp	r3, r4
 8009a22:	d9fa      	bls.n	8009a1a <_free_r+0x46>
 8009a24:	6811      	ldr	r1, [r2, #0]
 8009a26:	1855      	adds	r5, r2, r1
 8009a28:	42a5      	cmp	r5, r4
 8009a2a:	d10b      	bne.n	8009a44 <_free_r+0x70>
 8009a2c:	6824      	ldr	r4, [r4, #0]
 8009a2e:	4421      	add	r1, r4
 8009a30:	1854      	adds	r4, r2, r1
 8009a32:	42a3      	cmp	r3, r4
 8009a34:	6011      	str	r1, [r2, #0]
 8009a36:	d1e0      	bne.n	80099fa <_free_r+0x26>
 8009a38:	681c      	ldr	r4, [r3, #0]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	6053      	str	r3, [r2, #4]
 8009a3e:	440c      	add	r4, r1
 8009a40:	6014      	str	r4, [r2, #0]
 8009a42:	e7da      	b.n	80099fa <_free_r+0x26>
 8009a44:	d902      	bls.n	8009a4c <_free_r+0x78>
 8009a46:	230c      	movs	r3, #12
 8009a48:	6003      	str	r3, [r0, #0]
 8009a4a:	e7d6      	b.n	80099fa <_free_r+0x26>
 8009a4c:	6825      	ldr	r5, [r4, #0]
 8009a4e:	1961      	adds	r1, r4, r5
 8009a50:	428b      	cmp	r3, r1
 8009a52:	bf04      	itt	eq
 8009a54:	6819      	ldreq	r1, [r3, #0]
 8009a56:	685b      	ldreq	r3, [r3, #4]
 8009a58:	6063      	str	r3, [r4, #4]
 8009a5a:	bf04      	itt	eq
 8009a5c:	1949      	addeq	r1, r1, r5
 8009a5e:	6021      	streq	r1, [r4, #0]
 8009a60:	6054      	str	r4, [r2, #4]
 8009a62:	e7ca      	b.n	80099fa <_free_r+0x26>
 8009a64:	b003      	add	sp, #12
 8009a66:	bd30      	pop	{r4, r5, pc}
 8009a68:	200007ac 	.word	0x200007ac

08009a6c <malloc>:
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <malloc+0xc>)
 8009a6e:	4601      	mov	r1, r0
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	f000 b823 	b.w	8009abc <_malloc_r>
 8009a76:	bf00      	nop
 8009a78:	20000060 	.word	0x20000060

08009a7c <sbrk_aligned>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	4e0e      	ldr	r6, [pc, #56]	; (8009ab8 <sbrk_aligned+0x3c>)
 8009a80:	460c      	mov	r4, r1
 8009a82:	6831      	ldr	r1, [r6, #0]
 8009a84:	4605      	mov	r5, r0
 8009a86:	b911      	cbnz	r1, 8009a8e <sbrk_aligned+0x12>
 8009a88:	f000 fe40 	bl	800a70c <_sbrk_r>
 8009a8c:	6030      	str	r0, [r6, #0]
 8009a8e:	4621      	mov	r1, r4
 8009a90:	4628      	mov	r0, r5
 8009a92:	f000 fe3b 	bl	800a70c <_sbrk_r>
 8009a96:	1c43      	adds	r3, r0, #1
 8009a98:	d00a      	beq.n	8009ab0 <sbrk_aligned+0x34>
 8009a9a:	1cc4      	adds	r4, r0, #3
 8009a9c:	f024 0403 	bic.w	r4, r4, #3
 8009aa0:	42a0      	cmp	r0, r4
 8009aa2:	d007      	beq.n	8009ab4 <sbrk_aligned+0x38>
 8009aa4:	1a21      	subs	r1, r4, r0
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f000 fe30 	bl	800a70c <_sbrk_r>
 8009aac:	3001      	adds	r0, #1
 8009aae:	d101      	bne.n	8009ab4 <sbrk_aligned+0x38>
 8009ab0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	200007b0 	.word	0x200007b0

08009abc <_malloc_r>:
 8009abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac0:	1ccd      	adds	r5, r1, #3
 8009ac2:	f025 0503 	bic.w	r5, r5, #3
 8009ac6:	3508      	adds	r5, #8
 8009ac8:	2d0c      	cmp	r5, #12
 8009aca:	bf38      	it	cc
 8009acc:	250c      	movcc	r5, #12
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	4607      	mov	r7, r0
 8009ad2:	db01      	blt.n	8009ad8 <_malloc_r+0x1c>
 8009ad4:	42a9      	cmp	r1, r5
 8009ad6:	d905      	bls.n	8009ae4 <_malloc_r+0x28>
 8009ad8:	230c      	movs	r3, #12
 8009ada:	603b      	str	r3, [r7, #0]
 8009adc:	2600      	movs	r6, #0
 8009ade:	4630      	mov	r0, r6
 8009ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009bb8 <_malloc_r+0xfc>
 8009ae8:	f000 f868 	bl	8009bbc <__malloc_lock>
 8009aec:	f8d8 3000 	ldr.w	r3, [r8]
 8009af0:	461c      	mov	r4, r3
 8009af2:	bb5c      	cbnz	r4, 8009b4c <_malloc_r+0x90>
 8009af4:	4629      	mov	r1, r5
 8009af6:	4638      	mov	r0, r7
 8009af8:	f7ff ffc0 	bl	8009a7c <sbrk_aligned>
 8009afc:	1c43      	adds	r3, r0, #1
 8009afe:	4604      	mov	r4, r0
 8009b00:	d155      	bne.n	8009bae <_malloc_r+0xf2>
 8009b02:	f8d8 4000 	ldr.w	r4, [r8]
 8009b06:	4626      	mov	r6, r4
 8009b08:	2e00      	cmp	r6, #0
 8009b0a:	d145      	bne.n	8009b98 <_malloc_r+0xdc>
 8009b0c:	2c00      	cmp	r4, #0
 8009b0e:	d048      	beq.n	8009ba2 <_malloc_r+0xe6>
 8009b10:	6823      	ldr	r3, [r4, #0]
 8009b12:	4631      	mov	r1, r6
 8009b14:	4638      	mov	r0, r7
 8009b16:	eb04 0903 	add.w	r9, r4, r3
 8009b1a:	f000 fdf7 	bl	800a70c <_sbrk_r>
 8009b1e:	4581      	cmp	r9, r0
 8009b20:	d13f      	bne.n	8009ba2 <_malloc_r+0xe6>
 8009b22:	6821      	ldr	r1, [r4, #0]
 8009b24:	1a6d      	subs	r5, r5, r1
 8009b26:	4629      	mov	r1, r5
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f7ff ffa7 	bl	8009a7c <sbrk_aligned>
 8009b2e:	3001      	adds	r0, #1
 8009b30:	d037      	beq.n	8009ba2 <_malloc_r+0xe6>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	442b      	add	r3, r5
 8009b36:	6023      	str	r3, [r4, #0]
 8009b38:	f8d8 3000 	ldr.w	r3, [r8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d038      	beq.n	8009bb2 <_malloc_r+0xf6>
 8009b40:	685a      	ldr	r2, [r3, #4]
 8009b42:	42a2      	cmp	r2, r4
 8009b44:	d12b      	bne.n	8009b9e <_malloc_r+0xe2>
 8009b46:	2200      	movs	r2, #0
 8009b48:	605a      	str	r2, [r3, #4]
 8009b4a:	e00f      	b.n	8009b6c <_malloc_r+0xb0>
 8009b4c:	6822      	ldr	r2, [r4, #0]
 8009b4e:	1b52      	subs	r2, r2, r5
 8009b50:	d41f      	bmi.n	8009b92 <_malloc_r+0xd6>
 8009b52:	2a0b      	cmp	r2, #11
 8009b54:	d917      	bls.n	8009b86 <_malloc_r+0xca>
 8009b56:	1961      	adds	r1, r4, r5
 8009b58:	42a3      	cmp	r3, r4
 8009b5a:	6025      	str	r5, [r4, #0]
 8009b5c:	bf18      	it	ne
 8009b5e:	6059      	strne	r1, [r3, #4]
 8009b60:	6863      	ldr	r3, [r4, #4]
 8009b62:	bf08      	it	eq
 8009b64:	f8c8 1000 	streq.w	r1, [r8]
 8009b68:	5162      	str	r2, [r4, r5]
 8009b6a:	604b      	str	r3, [r1, #4]
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f104 060b 	add.w	r6, r4, #11
 8009b72:	f000 f829 	bl	8009bc8 <__malloc_unlock>
 8009b76:	f026 0607 	bic.w	r6, r6, #7
 8009b7a:	1d23      	adds	r3, r4, #4
 8009b7c:	1af2      	subs	r2, r6, r3
 8009b7e:	d0ae      	beq.n	8009ade <_malloc_r+0x22>
 8009b80:	1b9b      	subs	r3, r3, r6
 8009b82:	50a3      	str	r3, [r4, r2]
 8009b84:	e7ab      	b.n	8009ade <_malloc_r+0x22>
 8009b86:	42a3      	cmp	r3, r4
 8009b88:	6862      	ldr	r2, [r4, #4]
 8009b8a:	d1dd      	bne.n	8009b48 <_malloc_r+0x8c>
 8009b8c:	f8c8 2000 	str.w	r2, [r8]
 8009b90:	e7ec      	b.n	8009b6c <_malloc_r+0xb0>
 8009b92:	4623      	mov	r3, r4
 8009b94:	6864      	ldr	r4, [r4, #4]
 8009b96:	e7ac      	b.n	8009af2 <_malloc_r+0x36>
 8009b98:	4634      	mov	r4, r6
 8009b9a:	6876      	ldr	r6, [r6, #4]
 8009b9c:	e7b4      	b.n	8009b08 <_malloc_r+0x4c>
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	e7cc      	b.n	8009b3c <_malloc_r+0x80>
 8009ba2:	230c      	movs	r3, #12
 8009ba4:	603b      	str	r3, [r7, #0]
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	f000 f80e 	bl	8009bc8 <__malloc_unlock>
 8009bac:	e797      	b.n	8009ade <_malloc_r+0x22>
 8009bae:	6025      	str	r5, [r4, #0]
 8009bb0:	e7dc      	b.n	8009b6c <_malloc_r+0xb0>
 8009bb2:	605b      	str	r3, [r3, #4]
 8009bb4:	deff      	udf	#255	; 0xff
 8009bb6:	bf00      	nop
 8009bb8:	200007ac 	.word	0x200007ac

08009bbc <__malloc_lock>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	; (8009bc4 <__malloc_lock+0x8>)
 8009bbe:	f7ff b87e 	b.w	8008cbe <__retarget_lock_acquire_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	200007a8 	.word	0x200007a8

08009bc8 <__malloc_unlock>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	; (8009bd0 <__malloc_unlock+0x8>)
 8009bca:	f7ff b879 	b.w	8008cc0 <__retarget_lock_release_recursive>
 8009bce:	bf00      	nop
 8009bd0:	200007a8 	.word	0x200007a8

08009bd4 <_Balloc>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	69c6      	ldr	r6, [r0, #28]
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	b976      	cbnz	r6, 8009bfc <_Balloc+0x28>
 8009bde:	2010      	movs	r0, #16
 8009be0:	f7ff ff44 	bl	8009a6c <malloc>
 8009be4:	4602      	mov	r2, r0
 8009be6:	61e0      	str	r0, [r4, #28]
 8009be8:	b920      	cbnz	r0, 8009bf4 <_Balloc+0x20>
 8009bea:	4b18      	ldr	r3, [pc, #96]	; (8009c4c <_Balloc+0x78>)
 8009bec:	4818      	ldr	r0, [pc, #96]	; (8009c50 <_Balloc+0x7c>)
 8009bee:	216b      	movs	r1, #107	; 0x6b
 8009bf0:	f000 fd9c 	bl	800a72c <__assert_func>
 8009bf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009bf8:	6006      	str	r6, [r0, #0]
 8009bfa:	60c6      	str	r6, [r0, #12]
 8009bfc:	69e6      	ldr	r6, [r4, #28]
 8009bfe:	68f3      	ldr	r3, [r6, #12]
 8009c00:	b183      	cbz	r3, 8009c24 <_Balloc+0x50>
 8009c02:	69e3      	ldr	r3, [r4, #28]
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009c0a:	b9b8      	cbnz	r0, 8009c3c <_Balloc+0x68>
 8009c0c:	2101      	movs	r1, #1
 8009c0e:	fa01 f605 	lsl.w	r6, r1, r5
 8009c12:	1d72      	adds	r2, r6, #5
 8009c14:	0092      	lsls	r2, r2, #2
 8009c16:	4620      	mov	r0, r4
 8009c18:	f000 fda6 	bl	800a768 <_calloc_r>
 8009c1c:	b160      	cbz	r0, 8009c38 <_Balloc+0x64>
 8009c1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009c22:	e00e      	b.n	8009c42 <_Balloc+0x6e>
 8009c24:	2221      	movs	r2, #33	; 0x21
 8009c26:	2104      	movs	r1, #4
 8009c28:	4620      	mov	r0, r4
 8009c2a:	f000 fd9d 	bl	800a768 <_calloc_r>
 8009c2e:	69e3      	ldr	r3, [r4, #28]
 8009c30:	60f0      	str	r0, [r6, #12]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e4      	bne.n	8009c02 <_Balloc+0x2e>
 8009c38:	2000      	movs	r0, #0
 8009c3a:	bd70      	pop	{r4, r5, r6, pc}
 8009c3c:	6802      	ldr	r2, [r0, #0]
 8009c3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009c42:	2300      	movs	r3, #0
 8009c44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c48:	e7f7      	b.n	8009c3a <_Balloc+0x66>
 8009c4a:	bf00      	nop
 8009c4c:	0800ae75 	.word	0x0800ae75
 8009c50:	0800aef5 	.word	0x0800aef5

08009c54 <_Bfree>:
 8009c54:	b570      	push	{r4, r5, r6, lr}
 8009c56:	69c6      	ldr	r6, [r0, #28]
 8009c58:	4605      	mov	r5, r0
 8009c5a:	460c      	mov	r4, r1
 8009c5c:	b976      	cbnz	r6, 8009c7c <_Bfree+0x28>
 8009c5e:	2010      	movs	r0, #16
 8009c60:	f7ff ff04 	bl	8009a6c <malloc>
 8009c64:	4602      	mov	r2, r0
 8009c66:	61e8      	str	r0, [r5, #28]
 8009c68:	b920      	cbnz	r0, 8009c74 <_Bfree+0x20>
 8009c6a:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <_Bfree+0x3c>)
 8009c6c:	4809      	ldr	r0, [pc, #36]	; (8009c94 <_Bfree+0x40>)
 8009c6e:	218f      	movs	r1, #143	; 0x8f
 8009c70:	f000 fd5c 	bl	800a72c <__assert_func>
 8009c74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009c78:	6006      	str	r6, [r0, #0]
 8009c7a:	60c6      	str	r6, [r0, #12]
 8009c7c:	b13c      	cbz	r4, 8009c8e <_Bfree+0x3a>
 8009c7e:	69eb      	ldr	r3, [r5, #28]
 8009c80:	6862      	ldr	r2, [r4, #4]
 8009c82:	68db      	ldr	r3, [r3, #12]
 8009c84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c88:	6021      	str	r1, [r4, #0]
 8009c8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009c8e:	bd70      	pop	{r4, r5, r6, pc}
 8009c90:	0800ae75 	.word	0x0800ae75
 8009c94:	0800aef5 	.word	0x0800aef5

08009c98 <__multadd>:
 8009c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c9c:	690d      	ldr	r5, [r1, #16]
 8009c9e:	4607      	mov	r7, r0
 8009ca0:	460c      	mov	r4, r1
 8009ca2:	461e      	mov	r6, r3
 8009ca4:	f101 0c14 	add.w	ip, r1, #20
 8009ca8:	2000      	movs	r0, #0
 8009caa:	f8dc 3000 	ldr.w	r3, [ip]
 8009cae:	b299      	uxth	r1, r3
 8009cb0:	fb02 6101 	mla	r1, r2, r1, r6
 8009cb4:	0c1e      	lsrs	r6, r3, #16
 8009cb6:	0c0b      	lsrs	r3, r1, #16
 8009cb8:	fb02 3306 	mla	r3, r2, r6, r3
 8009cbc:	b289      	uxth	r1, r1
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009cc4:	4285      	cmp	r5, r0
 8009cc6:	f84c 1b04 	str.w	r1, [ip], #4
 8009cca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009cce:	dcec      	bgt.n	8009caa <__multadd+0x12>
 8009cd0:	b30e      	cbz	r6, 8009d16 <__multadd+0x7e>
 8009cd2:	68a3      	ldr	r3, [r4, #8]
 8009cd4:	42ab      	cmp	r3, r5
 8009cd6:	dc19      	bgt.n	8009d0c <__multadd+0x74>
 8009cd8:	6861      	ldr	r1, [r4, #4]
 8009cda:	4638      	mov	r0, r7
 8009cdc:	3101      	adds	r1, #1
 8009cde:	f7ff ff79 	bl	8009bd4 <_Balloc>
 8009ce2:	4680      	mov	r8, r0
 8009ce4:	b928      	cbnz	r0, 8009cf2 <__multadd+0x5a>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <__multadd+0x84>)
 8009cea:	480d      	ldr	r0, [pc, #52]	; (8009d20 <__multadd+0x88>)
 8009cec:	21ba      	movs	r1, #186	; 0xba
 8009cee:	f000 fd1d 	bl	800a72c <__assert_func>
 8009cf2:	6922      	ldr	r2, [r4, #16]
 8009cf4:	3202      	adds	r2, #2
 8009cf6:	f104 010c 	add.w	r1, r4, #12
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	300c      	adds	r0, #12
 8009cfe:	f7fe ffe0 	bl	8008cc2 <memcpy>
 8009d02:	4621      	mov	r1, r4
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff ffa5 	bl	8009c54 <_Bfree>
 8009d0a:	4644      	mov	r4, r8
 8009d0c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009d10:	3501      	adds	r5, #1
 8009d12:	615e      	str	r6, [r3, #20]
 8009d14:	6125      	str	r5, [r4, #16]
 8009d16:	4620      	mov	r0, r4
 8009d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d1c:	0800aee4 	.word	0x0800aee4
 8009d20:	0800aef5 	.word	0x0800aef5

08009d24 <__hi0bits>:
 8009d24:	0c03      	lsrs	r3, r0, #16
 8009d26:	041b      	lsls	r3, r3, #16
 8009d28:	b9d3      	cbnz	r3, 8009d60 <__hi0bits+0x3c>
 8009d2a:	0400      	lsls	r0, r0, #16
 8009d2c:	2310      	movs	r3, #16
 8009d2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009d32:	bf04      	itt	eq
 8009d34:	0200      	lsleq	r0, r0, #8
 8009d36:	3308      	addeq	r3, #8
 8009d38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009d3c:	bf04      	itt	eq
 8009d3e:	0100      	lsleq	r0, r0, #4
 8009d40:	3304      	addeq	r3, #4
 8009d42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009d46:	bf04      	itt	eq
 8009d48:	0080      	lsleq	r0, r0, #2
 8009d4a:	3302      	addeq	r3, #2
 8009d4c:	2800      	cmp	r0, #0
 8009d4e:	db05      	blt.n	8009d5c <__hi0bits+0x38>
 8009d50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009d54:	f103 0301 	add.w	r3, r3, #1
 8009d58:	bf08      	it	eq
 8009d5a:	2320      	moveq	r3, #32
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	4770      	bx	lr
 8009d60:	2300      	movs	r3, #0
 8009d62:	e7e4      	b.n	8009d2e <__hi0bits+0xa>

08009d64 <__lo0bits>:
 8009d64:	6803      	ldr	r3, [r0, #0]
 8009d66:	f013 0207 	ands.w	r2, r3, #7
 8009d6a:	d00c      	beq.n	8009d86 <__lo0bits+0x22>
 8009d6c:	07d9      	lsls	r1, r3, #31
 8009d6e:	d422      	bmi.n	8009db6 <__lo0bits+0x52>
 8009d70:	079a      	lsls	r2, r3, #30
 8009d72:	bf49      	itett	mi
 8009d74:	085b      	lsrmi	r3, r3, #1
 8009d76:	089b      	lsrpl	r3, r3, #2
 8009d78:	6003      	strmi	r3, [r0, #0]
 8009d7a:	2201      	movmi	r2, #1
 8009d7c:	bf5c      	itt	pl
 8009d7e:	6003      	strpl	r3, [r0, #0]
 8009d80:	2202      	movpl	r2, #2
 8009d82:	4610      	mov	r0, r2
 8009d84:	4770      	bx	lr
 8009d86:	b299      	uxth	r1, r3
 8009d88:	b909      	cbnz	r1, 8009d8e <__lo0bits+0x2a>
 8009d8a:	0c1b      	lsrs	r3, r3, #16
 8009d8c:	2210      	movs	r2, #16
 8009d8e:	b2d9      	uxtb	r1, r3
 8009d90:	b909      	cbnz	r1, 8009d96 <__lo0bits+0x32>
 8009d92:	3208      	adds	r2, #8
 8009d94:	0a1b      	lsrs	r3, r3, #8
 8009d96:	0719      	lsls	r1, r3, #28
 8009d98:	bf04      	itt	eq
 8009d9a:	091b      	lsreq	r3, r3, #4
 8009d9c:	3204      	addeq	r2, #4
 8009d9e:	0799      	lsls	r1, r3, #30
 8009da0:	bf04      	itt	eq
 8009da2:	089b      	lsreq	r3, r3, #2
 8009da4:	3202      	addeq	r2, #2
 8009da6:	07d9      	lsls	r1, r3, #31
 8009da8:	d403      	bmi.n	8009db2 <__lo0bits+0x4e>
 8009daa:	085b      	lsrs	r3, r3, #1
 8009dac:	f102 0201 	add.w	r2, r2, #1
 8009db0:	d003      	beq.n	8009dba <__lo0bits+0x56>
 8009db2:	6003      	str	r3, [r0, #0]
 8009db4:	e7e5      	b.n	8009d82 <__lo0bits+0x1e>
 8009db6:	2200      	movs	r2, #0
 8009db8:	e7e3      	b.n	8009d82 <__lo0bits+0x1e>
 8009dba:	2220      	movs	r2, #32
 8009dbc:	e7e1      	b.n	8009d82 <__lo0bits+0x1e>
	...

08009dc0 <__i2b>:
 8009dc0:	b510      	push	{r4, lr}
 8009dc2:	460c      	mov	r4, r1
 8009dc4:	2101      	movs	r1, #1
 8009dc6:	f7ff ff05 	bl	8009bd4 <_Balloc>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	b928      	cbnz	r0, 8009dda <__i2b+0x1a>
 8009dce:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <__i2b+0x24>)
 8009dd0:	4805      	ldr	r0, [pc, #20]	; (8009de8 <__i2b+0x28>)
 8009dd2:	f240 1145 	movw	r1, #325	; 0x145
 8009dd6:	f000 fca9 	bl	800a72c <__assert_func>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	6144      	str	r4, [r0, #20]
 8009dde:	6103      	str	r3, [r0, #16]
 8009de0:	bd10      	pop	{r4, pc}
 8009de2:	bf00      	nop
 8009de4:	0800aee4 	.word	0x0800aee4
 8009de8:	0800aef5 	.word	0x0800aef5

08009dec <__multiply>:
 8009dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df0:	4691      	mov	r9, r2
 8009df2:	690a      	ldr	r2, [r1, #16]
 8009df4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	bfb8      	it	lt
 8009dfc:	460b      	movlt	r3, r1
 8009dfe:	460c      	mov	r4, r1
 8009e00:	bfbc      	itt	lt
 8009e02:	464c      	movlt	r4, r9
 8009e04:	4699      	movlt	r9, r3
 8009e06:	6927      	ldr	r7, [r4, #16]
 8009e08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009e0c:	68a3      	ldr	r3, [r4, #8]
 8009e0e:	6861      	ldr	r1, [r4, #4]
 8009e10:	eb07 060a 	add.w	r6, r7, sl
 8009e14:	42b3      	cmp	r3, r6
 8009e16:	b085      	sub	sp, #20
 8009e18:	bfb8      	it	lt
 8009e1a:	3101      	addlt	r1, #1
 8009e1c:	f7ff feda 	bl	8009bd4 <_Balloc>
 8009e20:	b930      	cbnz	r0, 8009e30 <__multiply+0x44>
 8009e22:	4602      	mov	r2, r0
 8009e24:	4b44      	ldr	r3, [pc, #272]	; (8009f38 <__multiply+0x14c>)
 8009e26:	4845      	ldr	r0, [pc, #276]	; (8009f3c <__multiply+0x150>)
 8009e28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009e2c:	f000 fc7e 	bl	800a72c <__assert_func>
 8009e30:	f100 0514 	add.w	r5, r0, #20
 8009e34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009e38:	462b      	mov	r3, r5
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	4543      	cmp	r3, r8
 8009e3e:	d321      	bcc.n	8009e84 <__multiply+0x98>
 8009e40:	f104 0314 	add.w	r3, r4, #20
 8009e44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009e48:	f109 0314 	add.w	r3, r9, #20
 8009e4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009e50:	9202      	str	r2, [sp, #8]
 8009e52:	1b3a      	subs	r2, r7, r4
 8009e54:	3a15      	subs	r2, #21
 8009e56:	f022 0203 	bic.w	r2, r2, #3
 8009e5a:	3204      	adds	r2, #4
 8009e5c:	f104 0115 	add.w	r1, r4, #21
 8009e60:	428f      	cmp	r7, r1
 8009e62:	bf38      	it	cc
 8009e64:	2204      	movcc	r2, #4
 8009e66:	9201      	str	r2, [sp, #4]
 8009e68:	9a02      	ldr	r2, [sp, #8]
 8009e6a:	9303      	str	r3, [sp, #12]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d80c      	bhi.n	8009e8a <__multiply+0x9e>
 8009e70:	2e00      	cmp	r6, #0
 8009e72:	dd03      	ble.n	8009e7c <__multiply+0x90>
 8009e74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d05b      	beq.n	8009f34 <__multiply+0x148>
 8009e7c:	6106      	str	r6, [r0, #16]
 8009e7e:	b005      	add	sp, #20
 8009e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e84:	f843 2b04 	str.w	r2, [r3], #4
 8009e88:	e7d8      	b.n	8009e3c <__multiply+0x50>
 8009e8a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009e8e:	f1ba 0f00 	cmp.w	sl, #0
 8009e92:	d024      	beq.n	8009ede <__multiply+0xf2>
 8009e94:	f104 0e14 	add.w	lr, r4, #20
 8009e98:	46a9      	mov	r9, r5
 8009e9a:	f04f 0c00 	mov.w	ip, #0
 8009e9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009ea2:	f8d9 1000 	ldr.w	r1, [r9]
 8009ea6:	fa1f fb82 	uxth.w	fp, r2
 8009eaa:	b289      	uxth	r1, r1
 8009eac:	fb0a 110b 	mla	r1, sl, fp, r1
 8009eb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8009eb8:	4461      	add	r1, ip
 8009eba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ebe:	fb0a c20b 	mla	r2, sl, fp, ip
 8009ec2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009ec6:	b289      	uxth	r1, r1
 8009ec8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ecc:	4577      	cmp	r7, lr
 8009ece:	f849 1b04 	str.w	r1, [r9], #4
 8009ed2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009ed6:	d8e2      	bhi.n	8009e9e <__multiply+0xb2>
 8009ed8:	9a01      	ldr	r2, [sp, #4]
 8009eda:	f845 c002 	str.w	ip, [r5, r2]
 8009ede:	9a03      	ldr	r2, [sp, #12]
 8009ee0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	f1b9 0f00 	cmp.w	r9, #0
 8009eea:	d021      	beq.n	8009f30 <__multiply+0x144>
 8009eec:	6829      	ldr	r1, [r5, #0]
 8009eee:	f104 0c14 	add.w	ip, r4, #20
 8009ef2:	46ae      	mov	lr, r5
 8009ef4:	f04f 0a00 	mov.w	sl, #0
 8009ef8:	f8bc b000 	ldrh.w	fp, [ip]
 8009efc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009f00:	fb09 220b 	mla	r2, r9, fp, r2
 8009f04:	4452      	add	r2, sl
 8009f06:	b289      	uxth	r1, r1
 8009f08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f0c:	f84e 1b04 	str.w	r1, [lr], #4
 8009f10:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009f14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f18:	f8be 1000 	ldrh.w	r1, [lr]
 8009f1c:	fb09 110a 	mla	r1, r9, sl, r1
 8009f20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009f24:	4567      	cmp	r7, ip
 8009f26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009f2a:	d8e5      	bhi.n	8009ef8 <__multiply+0x10c>
 8009f2c:	9a01      	ldr	r2, [sp, #4]
 8009f2e:	50a9      	str	r1, [r5, r2]
 8009f30:	3504      	adds	r5, #4
 8009f32:	e799      	b.n	8009e68 <__multiply+0x7c>
 8009f34:	3e01      	subs	r6, #1
 8009f36:	e79b      	b.n	8009e70 <__multiply+0x84>
 8009f38:	0800aee4 	.word	0x0800aee4
 8009f3c:	0800aef5 	.word	0x0800aef5

08009f40 <__pow5mult>:
 8009f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f44:	4615      	mov	r5, r2
 8009f46:	f012 0203 	ands.w	r2, r2, #3
 8009f4a:	4606      	mov	r6, r0
 8009f4c:	460f      	mov	r7, r1
 8009f4e:	d007      	beq.n	8009f60 <__pow5mult+0x20>
 8009f50:	4c25      	ldr	r4, [pc, #148]	; (8009fe8 <__pow5mult+0xa8>)
 8009f52:	3a01      	subs	r2, #1
 8009f54:	2300      	movs	r3, #0
 8009f56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f5a:	f7ff fe9d 	bl	8009c98 <__multadd>
 8009f5e:	4607      	mov	r7, r0
 8009f60:	10ad      	asrs	r5, r5, #2
 8009f62:	d03d      	beq.n	8009fe0 <__pow5mult+0xa0>
 8009f64:	69f4      	ldr	r4, [r6, #28]
 8009f66:	b97c      	cbnz	r4, 8009f88 <__pow5mult+0x48>
 8009f68:	2010      	movs	r0, #16
 8009f6a:	f7ff fd7f 	bl	8009a6c <malloc>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	61f0      	str	r0, [r6, #28]
 8009f72:	b928      	cbnz	r0, 8009f80 <__pow5mult+0x40>
 8009f74:	4b1d      	ldr	r3, [pc, #116]	; (8009fec <__pow5mult+0xac>)
 8009f76:	481e      	ldr	r0, [pc, #120]	; (8009ff0 <__pow5mult+0xb0>)
 8009f78:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009f7c:	f000 fbd6 	bl	800a72c <__assert_func>
 8009f80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f84:	6004      	str	r4, [r0, #0]
 8009f86:	60c4      	str	r4, [r0, #12]
 8009f88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009f8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f90:	b94c      	cbnz	r4, 8009fa6 <__pow5mult+0x66>
 8009f92:	f240 2171 	movw	r1, #625	; 0x271
 8009f96:	4630      	mov	r0, r6
 8009f98:	f7ff ff12 	bl	8009dc0 <__i2b>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	f04f 0900 	mov.w	r9, #0
 8009faa:	07eb      	lsls	r3, r5, #31
 8009fac:	d50a      	bpl.n	8009fc4 <__pow5mult+0x84>
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4622      	mov	r2, r4
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7ff ff1a 	bl	8009dec <__multiply>
 8009fb8:	4639      	mov	r1, r7
 8009fba:	4680      	mov	r8, r0
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f7ff fe49 	bl	8009c54 <_Bfree>
 8009fc2:	4647      	mov	r7, r8
 8009fc4:	106d      	asrs	r5, r5, #1
 8009fc6:	d00b      	beq.n	8009fe0 <__pow5mult+0xa0>
 8009fc8:	6820      	ldr	r0, [r4, #0]
 8009fca:	b938      	cbnz	r0, 8009fdc <__pow5mult+0x9c>
 8009fcc:	4622      	mov	r2, r4
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7ff ff0b 	bl	8009dec <__multiply>
 8009fd6:	6020      	str	r0, [r4, #0]
 8009fd8:	f8c0 9000 	str.w	r9, [r0]
 8009fdc:	4604      	mov	r4, r0
 8009fde:	e7e4      	b.n	8009faa <__pow5mult+0x6a>
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0800b040 	.word	0x0800b040
 8009fec:	0800ae75 	.word	0x0800ae75
 8009ff0:	0800aef5 	.word	0x0800aef5

08009ff4 <__lshift>:
 8009ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff8:	460c      	mov	r4, r1
 8009ffa:	6849      	ldr	r1, [r1, #4]
 8009ffc:	6923      	ldr	r3, [r4, #16]
 8009ffe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a002:	68a3      	ldr	r3, [r4, #8]
 800a004:	4607      	mov	r7, r0
 800a006:	4691      	mov	r9, r2
 800a008:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a00c:	f108 0601 	add.w	r6, r8, #1
 800a010:	42b3      	cmp	r3, r6
 800a012:	db0b      	blt.n	800a02c <__lshift+0x38>
 800a014:	4638      	mov	r0, r7
 800a016:	f7ff fddd 	bl	8009bd4 <_Balloc>
 800a01a:	4605      	mov	r5, r0
 800a01c:	b948      	cbnz	r0, 800a032 <__lshift+0x3e>
 800a01e:	4602      	mov	r2, r0
 800a020:	4b28      	ldr	r3, [pc, #160]	; (800a0c4 <__lshift+0xd0>)
 800a022:	4829      	ldr	r0, [pc, #164]	; (800a0c8 <__lshift+0xd4>)
 800a024:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a028:	f000 fb80 	bl	800a72c <__assert_func>
 800a02c:	3101      	adds	r1, #1
 800a02e:	005b      	lsls	r3, r3, #1
 800a030:	e7ee      	b.n	800a010 <__lshift+0x1c>
 800a032:	2300      	movs	r3, #0
 800a034:	f100 0114 	add.w	r1, r0, #20
 800a038:	f100 0210 	add.w	r2, r0, #16
 800a03c:	4618      	mov	r0, r3
 800a03e:	4553      	cmp	r3, sl
 800a040:	db33      	blt.n	800a0aa <__lshift+0xb6>
 800a042:	6920      	ldr	r0, [r4, #16]
 800a044:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a048:	f104 0314 	add.w	r3, r4, #20
 800a04c:	f019 091f 	ands.w	r9, r9, #31
 800a050:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a054:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a058:	d02b      	beq.n	800a0b2 <__lshift+0xbe>
 800a05a:	f1c9 0e20 	rsb	lr, r9, #32
 800a05e:	468a      	mov	sl, r1
 800a060:	2200      	movs	r2, #0
 800a062:	6818      	ldr	r0, [r3, #0]
 800a064:	fa00 f009 	lsl.w	r0, r0, r9
 800a068:	4310      	orrs	r0, r2
 800a06a:	f84a 0b04 	str.w	r0, [sl], #4
 800a06e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a072:	459c      	cmp	ip, r3
 800a074:	fa22 f20e 	lsr.w	r2, r2, lr
 800a078:	d8f3      	bhi.n	800a062 <__lshift+0x6e>
 800a07a:	ebac 0304 	sub.w	r3, ip, r4
 800a07e:	3b15      	subs	r3, #21
 800a080:	f023 0303 	bic.w	r3, r3, #3
 800a084:	3304      	adds	r3, #4
 800a086:	f104 0015 	add.w	r0, r4, #21
 800a08a:	4584      	cmp	ip, r0
 800a08c:	bf38      	it	cc
 800a08e:	2304      	movcc	r3, #4
 800a090:	50ca      	str	r2, [r1, r3]
 800a092:	b10a      	cbz	r2, 800a098 <__lshift+0xa4>
 800a094:	f108 0602 	add.w	r6, r8, #2
 800a098:	3e01      	subs	r6, #1
 800a09a:	4638      	mov	r0, r7
 800a09c:	612e      	str	r6, [r5, #16]
 800a09e:	4621      	mov	r1, r4
 800a0a0:	f7ff fdd8 	bl	8009c54 <_Bfree>
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	e7c5      	b.n	800a03e <__lshift+0x4a>
 800a0b2:	3904      	subs	r1, #4
 800a0b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a0b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800a0bc:	459c      	cmp	ip, r3
 800a0be:	d8f9      	bhi.n	800a0b4 <__lshift+0xc0>
 800a0c0:	e7ea      	b.n	800a098 <__lshift+0xa4>
 800a0c2:	bf00      	nop
 800a0c4:	0800aee4 	.word	0x0800aee4
 800a0c8:	0800aef5 	.word	0x0800aef5

0800a0cc <__mcmp>:
 800a0cc:	b530      	push	{r4, r5, lr}
 800a0ce:	6902      	ldr	r2, [r0, #16]
 800a0d0:	690c      	ldr	r4, [r1, #16]
 800a0d2:	1b12      	subs	r2, r2, r4
 800a0d4:	d10e      	bne.n	800a0f4 <__mcmp+0x28>
 800a0d6:	f100 0314 	add.w	r3, r0, #20
 800a0da:	3114      	adds	r1, #20
 800a0dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a0e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a0e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a0e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a0ec:	42a5      	cmp	r5, r4
 800a0ee:	d003      	beq.n	800a0f8 <__mcmp+0x2c>
 800a0f0:	d305      	bcc.n	800a0fe <__mcmp+0x32>
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	bd30      	pop	{r4, r5, pc}
 800a0f8:	4283      	cmp	r3, r0
 800a0fa:	d3f3      	bcc.n	800a0e4 <__mcmp+0x18>
 800a0fc:	e7fa      	b.n	800a0f4 <__mcmp+0x28>
 800a0fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a102:	e7f7      	b.n	800a0f4 <__mcmp+0x28>

0800a104 <__mdiff>:
 800a104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a108:	460c      	mov	r4, r1
 800a10a:	4606      	mov	r6, r0
 800a10c:	4611      	mov	r1, r2
 800a10e:	4620      	mov	r0, r4
 800a110:	4690      	mov	r8, r2
 800a112:	f7ff ffdb 	bl	800a0cc <__mcmp>
 800a116:	1e05      	subs	r5, r0, #0
 800a118:	d110      	bne.n	800a13c <__mdiff+0x38>
 800a11a:	4629      	mov	r1, r5
 800a11c:	4630      	mov	r0, r6
 800a11e:	f7ff fd59 	bl	8009bd4 <_Balloc>
 800a122:	b930      	cbnz	r0, 800a132 <__mdiff+0x2e>
 800a124:	4b3a      	ldr	r3, [pc, #232]	; (800a210 <__mdiff+0x10c>)
 800a126:	4602      	mov	r2, r0
 800a128:	f240 2137 	movw	r1, #567	; 0x237
 800a12c:	4839      	ldr	r0, [pc, #228]	; (800a214 <__mdiff+0x110>)
 800a12e:	f000 fafd 	bl	800a72c <__assert_func>
 800a132:	2301      	movs	r3, #1
 800a134:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a138:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a13c:	bfa4      	itt	ge
 800a13e:	4643      	movge	r3, r8
 800a140:	46a0      	movge	r8, r4
 800a142:	4630      	mov	r0, r6
 800a144:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a148:	bfa6      	itte	ge
 800a14a:	461c      	movge	r4, r3
 800a14c:	2500      	movge	r5, #0
 800a14e:	2501      	movlt	r5, #1
 800a150:	f7ff fd40 	bl	8009bd4 <_Balloc>
 800a154:	b920      	cbnz	r0, 800a160 <__mdiff+0x5c>
 800a156:	4b2e      	ldr	r3, [pc, #184]	; (800a210 <__mdiff+0x10c>)
 800a158:	4602      	mov	r2, r0
 800a15a:	f240 2145 	movw	r1, #581	; 0x245
 800a15e:	e7e5      	b.n	800a12c <__mdiff+0x28>
 800a160:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a164:	6926      	ldr	r6, [r4, #16]
 800a166:	60c5      	str	r5, [r0, #12]
 800a168:	f104 0914 	add.w	r9, r4, #20
 800a16c:	f108 0514 	add.w	r5, r8, #20
 800a170:	f100 0e14 	add.w	lr, r0, #20
 800a174:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a178:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a17c:	f108 0210 	add.w	r2, r8, #16
 800a180:	46f2      	mov	sl, lr
 800a182:	2100      	movs	r1, #0
 800a184:	f859 3b04 	ldr.w	r3, [r9], #4
 800a188:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a18c:	fa11 f88b 	uxtah	r8, r1, fp
 800a190:	b299      	uxth	r1, r3
 800a192:	0c1b      	lsrs	r3, r3, #16
 800a194:	eba8 0801 	sub.w	r8, r8, r1
 800a198:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a19c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a1a0:	fa1f f888 	uxth.w	r8, r8
 800a1a4:	1419      	asrs	r1, r3, #16
 800a1a6:	454e      	cmp	r6, r9
 800a1a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a1ac:	f84a 3b04 	str.w	r3, [sl], #4
 800a1b0:	d8e8      	bhi.n	800a184 <__mdiff+0x80>
 800a1b2:	1b33      	subs	r3, r6, r4
 800a1b4:	3b15      	subs	r3, #21
 800a1b6:	f023 0303 	bic.w	r3, r3, #3
 800a1ba:	3304      	adds	r3, #4
 800a1bc:	3415      	adds	r4, #21
 800a1be:	42a6      	cmp	r6, r4
 800a1c0:	bf38      	it	cc
 800a1c2:	2304      	movcc	r3, #4
 800a1c4:	441d      	add	r5, r3
 800a1c6:	4473      	add	r3, lr
 800a1c8:	469e      	mov	lr, r3
 800a1ca:	462e      	mov	r6, r5
 800a1cc:	4566      	cmp	r6, ip
 800a1ce:	d30e      	bcc.n	800a1ee <__mdiff+0xea>
 800a1d0:	f10c 0203 	add.w	r2, ip, #3
 800a1d4:	1b52      	subs	r2, r2, r5
 800a1d6:	f022 0203 	bic.w	r2, r2, #3
 800a1da:	3d03      	subs	r5, #3
 800a1dc:	45ac      	cmp	ip, r5
 800a1de:	bf38      	it	cc
 800a1e0:	2200      	movcc	r2, #0
 800a1e2:	4413      	add	r3, r2
 800a1e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a1e8:	b17a      	cbz	r2, 800a20a <__mdiff+0x106>
 800a1ea:	6107      	str	r7, [r0, #16]
 800a1ec:	e7a4      	b.n	800a138 <__mdiff+0x34>
 800a1ee:	f856 8b04 	ldr.w	r8, [r6], #4
 800a1f2:	fa11 f288 	uxtah	r2, r1, r8
 800a1f6:	1414      	asrs	r4, r2, #16
 800a1f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a1fc:	b292      	uxth	r2, r2
 800a1fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a202:	f84e 2b04 	str.w	r2, [lr], #4
 800a206:	1421      	asrs	r1, r4, #16
 800a208:	e7e0      	b.n	800a1cc <__mdiff+0xc8>
 800a20a:	3f01      	subs	r7, #1
 800a20c:	e7ea      	b.n	800a1e4 <__mdiff+0xe0>
 800a20e:	bf00      	nop
 800a210:	0800aee4 	.word	0x0800aee4
 800a214:	0800aef5 	.word	0x0800aef5

0800a218 <__d2b>:
 800a218:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a21c:	460f      	mov	r7, r1
 800a21e:	2101      	movs	r1, #1
 800a220:	ec59 8b10 	vmov	r8, r9, d0
 800a224:	4616      	mov	r6, r2
 800a226:	f7ff fcd5 	bl	8009bd4 <_Balloc>
 800a22a:	4604      	mov	r4, r0
 800a22c:	b930      	cbnz	r0, 800a23c <__d2b+0x24>
 800a22e:	4602      	mov	r2, r0
 800a230:	4b24      	ldr	r3, [pc, #144]	; (800a2c4 <__d2b+0xac>)
 800a232:	4825      	ldr	r0, [pc, #148]	; (800a2c8 <__d2b+0xb0>)
 800a234:	f240 310f 	movw	r1, #783	; 0x30f
 800a238:	f000 fa78 	bl	800a72c <__assert_func>
 800a23c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a244:	bb2d      	cbnz	r5, 800a292 <__d2b+0x7a>
 800a246:	9301      	str	r3, [sp, #4]
 800a248:	f1b8 0300 	subs.w	r3, r8, #0
 800a24c:	d026      	beq.n	800a29c <__d2b+0x84>
 800a24e:	4668      	mov	r0, sp
 800a250:	9300      	str	r3, [sp, #0]
 800a252:	f7ff fd87 	bl	8009d64 <__lo0bits>
 800a256:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a25a:	b1e8      	cbz	r0, 800a298 <__d2b+0x80>
 800a25c:	f1c0 0320 	rsb	r3, r0, #32
 800a260:	fa02 f303 	lsl.w	r3, r2, r3
 800a264:	430b      	orrs	r3, r1
 800a266:	40c2      	lsrs	r2, r0
 800a268:	6163      	str	r3, [r4, #20]
 800a26a:	9201      	str	r2, [sp, #4]
 800a26c:	9b01      	ldr	r3, [sp, #4]
 800a26e:	61a3      	str	r3, [r4, #24]
 800a270:	2b00      	cmp	r3, #0
 800a272:	bf14      	ite	ne
 800a274:	2202      	movne	r2, #2
 800a276:	2201      	moveq	r2, #1
 800a278:	6122      	str	r2, [r4, #16]
 800a27a:	b1bd      	cbz	r5, 800a2ac <__d2b+0x94>
 800a27c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a280:	4405      	add	r5, r0
 800a282:	603d      	str	r5, [r7, #0]
 800a284:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a288:	6030      	str	r0, [r6, #0]
 800a28a:	4620      	mov	r0, r4
 800a28c:	b003      	add	sp, #12
 800a28e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a292:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a296:	e7d6      	b.n	800a246 <__d2b+0x2e>
 800a298:	6161      	str	r1, [r4, #20]
 800a29a:	e7e7      	b.n	800a26c <__d2b+0x54>
 800a29c:	a801      	add	r0, sp, #4
 800a29e:	f7ff fd61 	bl	8009d64 <__lo0bits>
 800a2a2:	9b01      	ldr	r3, [sp, #4]
 800a2a4:	6163      	str	r3, [r4, #20]
 800a2a6:	3020      	adds	r0, #32
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	e7e5      	b.n	800a278 <__d2b+0x60>
 800a2ac:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2b0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2b4:	6038      	str	r0, [r7, #0]
 800a2b6:	6918      	ldr	r0, [r3, #16]
 800a2b8:	f7ff fd34 	bl	8009d24 <__hi0bits>
 800a2bc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2c0:	e7e2      	b.n	800a288 <__d2b+0x70>
 800a2c2:	bf00      	nop
 800a2c4:	0800aee4 	.word	0x0800aee4
 800a2c8:	0800aef5 	.word	0x0800aef5

0800a2cc <__ssputs_r>:
 800a2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d0:	688e      	ldr	r6, [r1, #8]
 800a2d2:	461f      	mov	r7, r3
 800a2d4:	42be      	cmp	r6, r7
 800a2d6:	680b      	ldr	r3, [r1, #0]
 800a2d8:	4682      	mov	sl, r0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	4690      	mov	r8, r2
 800a2de:	d82c      	bhi.n	800a33a <__ssputs_r+0x6e>
 800a2e0:	898a      	ldrh	r2, [r1, #12]
 800a2e2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2e6:	d026      	beq.n	800a336 <__ssputs_r+0x6a>
 800a2e8:	6965      	ldr	r5, [r4, #20]
 800a2ea:	6909      	ldr	r1, [r1, #16]
 800a2ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2f0:	eba3 0901 	sub.w	r9, r3, r1
 800a2f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2f8:	1c7b      	adds	r3, r7, #1
 800a2fa:	444b      	add	r3, r9
 800a2fc:	106d      	asrs	r5, r5, #1
 800a2fe:	429d      	cmp	r5, r3
 800a300:	bf38      	it	cc
 800a302:	461d      	movcc	r5, r3
 800a304:	0553      	lsls	r3, r2, #21
 800a306:	d527      	bpl.n	800a358 <__ssputs_r+0x8c>
 800a308:	4629      	mov	r1, r5
 800a30a:	f7ff fbd7 	bl	8009abc <_malloc_r>
 800a30e:	4606      	mov	r6, r0
 800a310:	b360      	cbz	r0, 800a36c <__ssputs_r+0xa0>
 800a312:	6921      	ldr	r1, [r4, #16]
 800a314:	464a      	mov	r2, r9
 800a316:	f7fe fcd4 	bl	8008cc2 <memcpy>
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a324:	81a3      	strh	r3, [r4, #12]
 800a326:	6126      	str	r6, [r4, #16]
 800a328:	6165      	str	r5, [r4, #20]
 800a32a:	444e      	add	r6, r9
 800a32c:	eba5 0509 	sub.w	r5, r5, r9
 800a330:	6026      	str	r6, [r4, #0]
 800a332:	60a5      	str	r5, [r4, #8]
 800a334:	463e      	mov	r6, r7
 800a336:	42be      	cmp	r6, r7
 800a338:	d900      	bls.n	800a33c <__ssputs_r+0x70>
 800a33a:	463e      	mov	r6, r7
 800a33c:	6820      	ldr	r0, [r4, #0]
 800a33e:	4632      	mov	r2, r6
 800a340:	4641      	mov	r1, r8
 800a342:	f000 f9c9 	bl	800a6d8 <memmove>
 800a346:	68a3      	ldr	r3, [r4, #8]
 800a348:	1b9b      	subs	r3, r3, r6
 800a34a:	60a3      	str	r3, [r4, #8]
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	4433      	add	r3, r6
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	2000      	movs	r0, #0
 800a354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a358:	462a      	mov	r2, r5
 800a35a:	f000 fa2d 	bl	800a7b8 <_realloc_r>
 800a35e:	4606      	mov	r6, r0
 800a360:	2800      	cmp	r0, #0
 800a362:	d1e0      	bne.n	800a326 <__ssputs_r+0x5a>
 800a364:	6921      	ldr	r1, [r4, #16]
 800a366:	4650      	mov	r0, sl
 800a368:	f7ff fb34 	bl	80099d4 <_free_r>
 800a36c:	230c      	movs	r3, #12
 800a36e:	f8ca 3000 	str.w	r3, [sl]
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a378:	81a3      	strh	r3, [r4, #12]
 800a37a:	f04f 30ff 	mov.w	r0, #4294967295
 800a37e:	e7e9      	b.n	800a354 <__ssputs_r+0x88>

0800a380 <_svfiprintf_r>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	4698      	mov	r8, r3
 800a386:	898b      	ldrh	r3, [r1, #12]
 800a388:	061b      	lsls	r3, r3, #24
 800a38a:	b09d      	sub	sp, #116	; 0x74
 800a38c:	4607      	mov	r7, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	4614      	mov	r4, r2
 800a392:	d50e      	bpl.n	800a3b2 <_svfiprintf_r+0x32>
 800a394:	690b      	ldr	r3, [r1, #16]
 800a396:	b963      	cbnz	r3, 800a3b2 <_svfiprintf_r+0x32>
 800a398:	2140      	movs	r1, #64	; 0x40
 800a39a:	f7ff fb8f 	bl	8009abc <_malloc_r>
 800a39e:	6028      	str	r0, [r5, #0]
 800a3a0:	6128      	str	r0, [r5, #16]
 800a3a2:	b920      	cbnz	r0, 800a3ae <_svfiprintf_r+0x2e>
 800a3a4:	230c      	movs	r3, #12
 800a3a6:	603b      	str	r3, [r7, #0]
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e0d0      	b.n	800a550 <_svfiprintf_r+0x1d0>
 800a3ae:	2340      	movs	r3, #64	; 0x40
 800a3b0:	616b      	str	r3, [r5, #20]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3b6:	2320      	movs	r3, #32
 800a3b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3c0:	2330      	movs	r3, #48	; 0x30
 800a3c2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a568 <_svfiprintf_r+0x1e8>
 800a3c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3ca:	f04f 0901 	mov.w	r9, #1
 800a3ce:	4623      	mov	r3, r4
 800a3d0:	469a      	mov	sl, r3
 800a3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d6:	b10a      	cbz	r2, 800a3dc <_svfiprintf_r+0x5c>
 800a3d8:	2a25      	cmp	r2, #37	; 0x25
 800a3da:	d1f9      	bne.n	800a3d0 <_svfiprintf_r+0x50>
 800a3dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a3e0:	d00b      	beq.n	800a3fa <_svfiprintf_r+0x7a>
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	f7ff ff6f 	bl	800a2cc <__ssputs_r>
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	f000 80a9 	beq.w	800a546 <_svfiprintf_r+0x1c6>
 800a3f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3f6:	445a      	add	r2, fp
 800a3f8:	9209      	str	r2, [sp, #36]	; 0x24
 800a3fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f000 80a1 	beq.w	800a546 <_svfiprintf_r+0x1c6>
 800a404:	2300      	movs	r3, #0
 800a406:	f04f 32ff 	mov.w	r2, #4294967295
 800a40a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a40e:	f10a 0a01 	add.w	sl, sl, #1
 800a412:	9304      	str	r3, [sp, #16]
 800a414:	9307      	str	r3, [sp, #28]
 800a416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a41a:	931a      	str	r3, [sp, #104]	; 0x68
 800a41c:	4654      	mov	r4, sl
 800a41e:	2205      	movs	r2, #5
 800a420:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a424:	4850      	ldr	r0, [pc, #320]	; (800a568 <_svfiprintf_r+0x1e8>)
 800a426:	f7f5 ff0b 	bl	8000240 <memchr>
 800a42a:	9a04      	ldr	r2, [sp, #16]
 800a42c:	b9d8      	cbnz	r0, 800a466 <_svfiprintf_r+0xe6>
 800a42e:	06d0      	lsls	r0, r2, #27
 800a430:	bf44      	itt	mi
 800a432:	2320      	movmi	r3, #32
 800a434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a438:	0711      	lsls	r1, r2, #28
 800a43a:	bf44      	itt	mi
 800a43c:	232b      	movmi	r3, #43	; 0x2b
 800a43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a442:	f89a 3000 	ldrb.w	r3, [sl]
 800a446:	2b2a      	cmp	r3, #42	; 0x2a
 800a448:	d015      	beq.n	800a476 <_svfiprintf_r+0xf6>
 800a44a:	9a07      	ldr	r2, [sp, #28]
 800a44c:	4654      	mov	r4, sl
 800a44e:	2000      	movs	r0, #0
 800a450:	f04f 0c0a 	mov.w	ip, #10
 800a454:	4621      	mov	r1, r4
 800a456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a45a:	3b30      	subs	r3, #48	; 0x30
 800a45c:	2b09      	cmp	r3, #9
 800a45e:	d94d      	bls.n	800a4fc <_svfiprintf_r+0x17c>
 800a460:	b1b0      	cbz	r0, 800a490 <_svfiprintf_r+0x110>
 800a462:	9207      	str	r2, [sp, #28]
 800a464:	e014      	b.n	800a490 <_svfiprintf_r+0x110>
 800a466:	eba0 0308 	sub.w	r3, r0, r8
 800a46a:	fa09 f303 	lsl.w	r3, r9, r3
 800a46e:	4313      	orrs	r3, r2
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	46a2      	mov	sl, r4
 800a474:	e7d2      	b.n	800a41c <_svfiprintf_r+0x9c>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	1d19      	adds	r1, r3, #4
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	9103      	str	r1, [sp, #12]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	bfbb      	ittet	lt
 800a482:	425b      	neglt	r3, r3
 800a484:	f042 0202 	orrlt.w	r2, r2, #2
 800a488:	9307      	strge	r3, [sp, #28]
 800a48a:	9307      	strlt	r3, [sp, #28]
 800a48c:	bfb8      	it	lt
 800a48e:	9204      	strlt	r2, [sp, #16]
 800a490:	7823      	ldrb	r3, [r4, #0]
 800a492:	2b2e      	cmp	r3, #46	; 0x2e
 800a494:	d10c      	bne.n	800a4b0 <_svfiprintf_r+0x130>
 800a496:	7863      	ldrb	r3, [r4, #1]
 800a498:	2b2a      	cmp	r3, #42	; 0x2a
 800a49a:	d134      	bne.n	800a506 <_svfiprintf_r+0x186>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	1d1a      	adds	r2, r3, #4
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	9203      	str	r2, [sp, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	bfb8      	it	lt
 800a4a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a4ac:	3402      	adds	r4, #2
 800a4ae:	9305      	str	r3, [sp, #20]
 800a4b0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a578 <_svfiprintf_r+0x1f8>
 800a4b4:	7821      	ldrb	r1, [r4, #0]
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	f7f5 fec1 	bl	8000240 <memchr>
 800a4be:	b138      	cbz	r0, 800a4d0 <_svfiprintf_r+0x150>
 800a4c0:	9b04      	ldr	r3, [sp, #16]
 800a4c2:	eba0 000a 	sub.w	r0, r0, sl
 800a4c6:	2240      	movs	r2, #64	; 0x40
 800a4c8:	4082      	lsls	r2, r0
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	3401      	adds	r4, #1
 800a4ce:	9304      	str	r3, [sp, #16]
 800a4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d4:	4825      	ldr	r0, [pc, #148]	; (800a56c <_svfiprintf_r+0x1ec>)
 800a4d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4da:	2206      	movs	r2, #6
 800a4dc:	f7f5 feb0 	bl	8000240 <memchr>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d038      	beq.n	800a556 <_svfiprintf_r+0x1d6>
 800a4e4:	4b22      	ldr	r3, [pc, #136]	; (800a570 <_svfiprintf_r+0x1f0>)
 800a4e6:	bb1b      	cbnz	r3, 800a530 <_svfiprintf_r+0x1b0>
 800a4e8:	9b03      	ldr	r3, [sp, #12]
 800a4ea:	3307      	adds	r3, #7
 800a4ec:	f023 0307 	bic.w	r3, r3, #7
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	9303      	str	r3, [sp, #12]
 800a4f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f6:	4433      	add	r3, r6
 800a4f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a4fa:	e768      	b.n	800a3ce <_svfiprintf_r+0x4e>
 800a4fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a500:	460c      	mov	r4, r1
 800a502:	2001      	movs	r0, #1
 800a504:	e7a6      	b.n	800a454 <_svfiprintf_r+0xd4>
 800a506:	2300      	movs	r3, #0
 800a508:	3401      	adds	r4, #1
 800a50a:	9305      	str	r3, [sp, #20]
 800a50c:	4619      	mov	r1, r3
 800a50e:	f04f 0c0a 	mov.w	ip, #10
 800a512:	4620      	mov	r0, r4
 800a514:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a518:	3a30      	subs	r2, #48	; 0x30
 800a51a:	2a09      	cmp	r2, #9
 800a51c:	d903      	bls.n	800a526 <_svfiprintf_r+0x1a6>
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d0c6      	beq.n	800a4b0 <_svfiprintf_r+0x130>
 800a522:	9105      	str	r1, [sp, #20]
 800a524:	e7c4      	b.n	800a4b0 <_svfiprintf_r+0x130>
 800a526:	fb0c 2101 	mla	r1, ip, r1, r2
 800a52a:	4604      	mov	r4, r0
 800a52c:	2301      	movs	r3, #1
 800a52e:	e7f0      	b.n	800a512 <_svfiprintf_r+0x192>
 800a530:	ab03      	add	r3, sp, #12
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	462a      	mov	r2, r5
 800a536:	4b0f      	ldr	r3, [pc, #60]	; (800a574 <_svfiprintf_r+0x1f4>)
 800a538:	a904      	add	r1, sp, #16
 800a53a:	4638      	mov	r0, r7
 800a53c:	f7fd fe56 	bl	80081ec <_printf_float>
 800a540:	1c42      	adds	r2, r0, #1
 800a542:	4606      	mov	r6, r0
 800a544:	d1d6      	bne.n	800a4f4 <_svfiprintf_r+0x174>
 800a546:	89ab      	ldrh	r3, [r5, #12]
 800a548:	065b      	lsls	r3, r3, #25
 800a54a:	f53f af2d 	bmi.w	800a3a8 <_svfiprintf_r+0x28>
 800a54e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a550:	b01d      	add	sp, #116	; 0x74
 800a552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a556:	ab03      	add	r3, sp, #12
 800a558:	9300      	str	r3, [sp, #0]
 800a55a:	462a      	mov	r2, r5
 800a55c:	4b05      	ldr	r3, [pc, #20]	; (800a574 <_svfiprintf_r+0x1f4>)
 800a55e:	a904      	add	r1, sp, #16
 800a560:	4638      	mov	r0, r7
 800a562:	f7fe f8e7 	bl	8008734 <_printf_i>
 800a566:	e7eb      	b.n	800a540 <_svfiprintf_r+0x1c0>
 800a568:	0800b04c 	.word	0x0800b04c
 800a56c:	0800b056 	.word	0x0800b056
 800a570:	080081ed 	.word	0x080081ed
 800a574:	0800a2cd 	.word	0x0800a2cd
 800a578:	0800b052 	.word	0x0800b052

0800a57c <__sflush_r>:
 800a57c:	898a      	ldrh	r2, [r1, #12]
 800a57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a582:	4605      	mov	r5, r0
 800a584:	0710      	lsls	r0, r2, #28
 800a586:	460c      	mov	r4, r1
 800a588:	d458      	bmi.n	800a63c <__sflush_r+0xc0>
 800a58a:	684b      	ldr	r3, [r1, #4]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	dc05      	bgt.n	800a59c <__sflush_r+0x20>
 800a590:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a592:	2b00      	cmp	r3, #0
 800a594:	dc02      	bgt.n	800a59c <__sflush_r+0x20>
 800a596:	2000      	movs	r0, #0
 800a598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a59c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a59e:	2e00      	cmp	r6, #0
 800a5a0:	d0f9      	beq.n	800a596 <__sflush_r+0x1a>
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a5a8:	682f      	ldr	r7, [r5, #0]
 800a5aa:	6a21      	ldr	r1, [r4, #32]
 800a5ac:	602b      	str	r3, [r5, #0]
 800a5ae:	d032      	beq.n	800a616 <__sflush_r+0x9a>
 800a5b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	075a      	lsls	r2, r3, #29
 800a5b6:	d505      	bpl.n	800a5c4 <__sflush_r+0x48>
 800a5b8:	6863      	ldr	r3, [r4, #4]
 800a5ba:	1ac0      	subs	r0, r0, r3
 800a5bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5be:	b10b      	cbz	r3, 800a5c4 <__sflush_r+0x48>
 800a5c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5c2:	1ac0      	subs	r0, r0, r3
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5ca:	6a21      	ldr	r1, [r4, #32]
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	47b0      	blx	r6
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	d106      	bne.n	800a5e4 <__sflush_r+0x68>
 800a5d6:	6829      	ldr	r1, [r5, #0]
 800a5d8:	291d      	cmp	r1, #29
 800a5da:	d82b      	bhi.n	800a634 <__sflush_r+0xb8>
 800a5dc:	4a29      	ldr	r2, [pc, #164]	; (800a684 <__sflush_r+0x108>)
 800a5de:	410a      	asrs	r2, r1
 800a5e0:	07d6      	lsls	r6, r2, #31
 800a5e2:	d427      	bmi.n	800a634 <__sflush_r+0xb8>
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	6062      	str	r2, [r4, #4]
 800a5e8:	04d9      	lsls	r1, r3, #19
 800a5ea:	6922      	ldr	r2, [r4, #16]
 800a5ec:	6022      	str	r2, [r4, #0]
 800a5ee:	d504      	bpl.n	800a5fa <__sflush_r+0x7e>
 800a5f0:	1c42      	adds	r2, r0, #1
 800a5f2:	d101      	bne.n	800a5f8 <__sflush_r+0x7c>
 800a5f4:	682b      	ldr	r3, [r5, #0]
 800a5f6:	b903      	cbnz	r3, 800a5fa <__sflush_r+0x7e>
 800a5f8:	6560      	str	r0, [r4, #84]	; 0x54
 800a5fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5fc:	602f      	str	r7, [r5, #0]
 800a5fe:	2900      	cmp	r1, #0
 800a600:	d0c9      	beq.n	800a596 <__sflush_r+0x1a>
 800a602:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a606:	4299      	cmp	r1, r3
 800a608:	d002      	beq.n	800a610 <__sflush_r+0x94>
 800a60a:	4628      	mov	r0, r5
 800a60c:	f7ff f9e2 	bl	80099d4 <_free_r>
 800a610:	2000      	movs	r0, #0
 800a612:	6360      	str	r0, [r4, #52]	; 0x34
 800a614:	e7c0      	b.n	800a598 <__sflush_r+0x1c>
 800a616:	2301      	movs	r3, #1
 800a618:	4628      	mov	r0, r5
 800a61a:	47b0      	blx	r6
 800a61c:	1c41      	adds	r1, r0, #1
 800a61e:	d1c8      	bne.n	800a5b2 <__sflush_r+0x36>
 800a620:	682b      	ldr	r3, [r5, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d0c5      	beq.n	800a5b2 <__sflush_r+0x36>
 800a626:	2b1d      	cmp	r3, #29
 800a628:	d001      	beq.n	800a62e <__sflush_r+0xb2>
 800a62a:	2b16      	cmp	r3, #22
 800a62c:	d101      	bne.n	800a632 <__sflush_r+0xb6>
 800a62e:	602f      	str	r7, [r5, #0]
 800a630:	e7b1      	b.n	800a596 <__sflush_r+0x1a>
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	e7ad      	b.n	800a598 <__sflush_r+0x1c>
 800a63c:	690f      	ldr	r7, [r1, #16]
 800a63e:	2f00      	cmp	r7, #0
 800a640:	d0a9      	beq.n	800a596 <__sflush_r+0x1a>
 800a642:	0793      	lsls	r3, r2, #30
 800a644:	680e      	ldr	r6, [r1, #0]
 800a646:	bf08      	it	eq
 800a648:	694b      	ldreq	r3, [r1, #20]
 800a64a:	600f      	str	r7, [r1, #0]
 800a64c:	bf18      	it	ne
 800a64e:	2300      	movne	r3, #0
 800a650:	eba6 0807 	sub.w	r8, r6, r7
 800a654:	608b      	str	r3, [r1, #8]
 800a656:	f1b8 0f00 	cmp.w	r8, #0
 800a65a:	dd9c      	ble.n	800a596 <__sflush_r+0x1a>
 800a65c:	6a21      	ldr	r1, [r4, #32]
 800a65e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a660:	4643      	mov	r3, r8
 800a662:	463a      	mov	r2, r7
 800a664:	4628      	mov	r0, r5
 800a666:	47b0      	blx	r6
 800a668:	2800      	cmp	r0, #0
 800a66a:	dc06      	bgt.n	800a67a <__sflush_r+0xfe>
 800a66c:	89a3      	ldrh	r3, [r4, #12]
 800a66e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a672:	81a3      	strh	r3, [r4, #12]
 800a674:	f04f 30ff 	mov.w	r0, #4294967295
 800a678:	e78e      	b.n	800a598 <__sflush_r+0x1c>
 800a67a:	4407      	add	r7, r0
 800a67c:	eba8 0800 	sub.w	r8, r8, r0
 800a680:	e7e9      	b.n	800a656 <__sflush_r+0xda>
 800a682:	bf00      	nop
 800a684:	dfbffffe 	.word	0xdfbffffe

0800a688 <_fflush_r>:
 800a688:	b538      	push	{r3, r4, r5, lr}
 800a68a:	690b      	ldr	r3, [r1, #16]
 800a68c:	4605      	mov	r5, r0
 800a68e:	460c      	mov	r4, r1
 800a690:	b913      	cbnz	r3, 800a698 <_fflush_r+0x10>
 800a692:	2500      	movs	r5, #0
 800a694:	4628      	mov	r0, r5
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	b118      	cbz	r0, 800a6a2 <_fflush_r+0x1a>
 800a69a:	6a03      	ldr	r3, [r0, #32]
 800a69c:	b90b      	cbnz	r3, 800a6a2 <_fflush_r+0x1a>
 800a69e:	f7fe f9f7 	bl	8008a90 <__sinit>
 800a6a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d0f3      	beq.n	800a692 <_fflush_r+0xa>
 800a6aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a6ac:	07d0      	lsls	r0, r2, #31
 800a6ae:	d404      	bmi.n	800a6ba <_fflush_r+0x32>
 800a6b0:	0599      	lsls	r1, r3, #22
 800a6b2:	d402      	bmi.n	800a6ba <_fflush_r+0x32>
 800a6b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6b6:	f7fe fb02 	bl	8008cbe <__retarget_lock_acquire_recursive>
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	4621      	mov	r1, r4
 800a6be:	f7ff ff5d 	bl	800a57c <__sflush_r>
 800a6c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6c4:	07da      	lsls	r2, r3, #31
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	d4e4      	bmi.n	800a694 <_fflush_r+0xc>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	059b      	lsls	r3, r3, #22
 800a6ce:	d4e1      	bmi.n	800a694 <_fflush_r+0xc>
 800a6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6d2:	f7fe faf5 	bl	8008cc0 <__retarget_lock_release_recursive>
 800a6d6:	e7dd      	b.n	800a694 <_fflush_r+0xc>

0800a6d8 <memmove>:
 800a6d8:	4288      	cmp	r0, r1
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	eb01 0402 	add.w	r4, r1, r2
 800a6e0:	d902      	bls.n	800a6e8 <memmove+0x10>
 800a6e2:	4284      	cmp	r4, r0
 800a6e4:	4623      	mov	r3, r4
 800a6e6:	d807      	bhi.n	800a6f8 <memmove+0x20>
 800a6e8:	1e43      	subs	r3, r0, #1
 800a6ea:	42a1      	cmp	r1, r4
 800a6ec:	d008      	beq.n	800a700 <memmove+0x28>
 800a6ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6f6:	e7f8      	b.n	800a6ea <memmove+0x12>
 800a6f8:	4402      	add	r2, r0
 800a6fa:	4601      	mov	r1, r0
 800a6fc:	428a      	cmp	r2, r1
 800a6fe:	d100      	bne.n	800a702 <memmove+0x2a>
 800a700:	bd10      	pop	{r4, pc}
 800a702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a70a:	e7f7      	b.n	800a6fc <memmove+0x24>

0800a70c <_sbrk_r>:
 800a70c:	b538      	push	{r3, r4, r5, lr}
 800a70e:	4d06      	ldr	r5, [pc, #24]	; (800a728 <_sbrk_r+0x1c>)
 800a710:	2300      	movs	r3, #0
 800a712:	4604      	mov	r4, r0
 800a714:	4608      	mov	r0, r1
 800a716:	602b      	str	r3, [r5, #0]
 800a718:	f7f7 ffd4 	bl	80026c4 <_sbrk>
 800a71c:	1c43      	adds	r3, r0, #1
 800a71e:	d102      	bne.n	800a726 <_sbrk_r+0x1a>
 800a720:	682b      	ldr	r3, [r5, #0]
 800a722:	b103      	cbz	r3, 800a726 <_sbrk_r+0x1a>
 800a724:	6023      	str	r3, [r4, #0]
 800a726:	bd38      	pop	{r3, r4, r5, pc}
 800a728:	200007a4 	.word	0x200007a4

0800a72c <__assert_func>:
 800a72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a72e:	4614      	mov	r4, r2
 800a730:	461a      	mov	r2, r3
 800a732:	4b09      	ldr	r3, [pc, #36]	; (800a758 <__assert_func+0x2c>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4605      	mov	r5, r0
 800a738:	68d8      	ldr	r0, [r3, #12]
 800a73a:	b14c      	cbz	r4, 800a750 <__assert_func+0x24>
 800a73c:	4b07      	ldr	r3, [pc, #28]	; (800a75c <__assert_func+0x30>)
 800a73e:	9100      	str	r1, [sp, #0]
 800a740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a744:	4906      	ldr	r1, [pc, #24]	; (800a760 <__assert_func+0x34>)
 800a746:	462b      	mov	r3, r5
 800a748:	f000 f872 	bl	800a830 <fiprintf>
 800a74c:	f000 f882 	bl	800a854 <abort>
 800a750:	4b04      	ldr	r3, [pc, #16]	; (800a764 <__assert_func+0x38>)
 800a752:	461c      	mov	r4, r3
 800a754:	e7f3      	b.n	800a73e <__assert_func+0x12>
 800a756:	bf00      	nop
 800a758:	20000060 	.word	0x20000060
 800a75c:	0800b067 	.word	0x0800b067
 800a760:	0800b074 	.word	0x0800b074
 800a764:	0800b0a2 	.word	0x0800b0a2

0800a768 <_calloc_r>:
 800a768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a76a:	fba1 2402 	umull	r2, r4, r1, r2
 800a76e:	b94c      	cbnz	r4, 800a784 <_calloc_r+0x1c>
 800a770:	4611      	mov	r1, r2
 800a772:	9201      	str	r2, [sp, #4]
 800a774:	f7ff f9a2 	bl	8009abc <_malloc_r>
 800a778:	9a01      	ldr	r2, [sp, #4]
 800a77a:	4605      	mov	r5, r0
 800a77c:	b930      	cbnz	r0, 800a78c <_calloc_r+0x24>
 800a77e:	4628      	mov	r0, r5
 800a780:	b003      	add	sp, #12
 800a782:	bd30      	pop	{r4, r5, pc}
 800a784:	220c      	movs	r2, #12
 800a786:	6002      	str	r2, [r0, #0]
 800a788:	2500      	movs	r5, #0
 800a78a:	e7f8      	b.n	800a77e <_calloc_r+0x16>
 800a78c:	4621      	mov	r1, r4
 800a78e:	f7fe fa18 	bl	8008bc2 <memset>
 800a792:	e7f4      	b.n	800a77e <_calloc_r+0x16>

0800a794 <__ascii_mbtowc>:
 800a794:	b082      	sub	sp, #8
 800a796:	b901      	cbnz	r1, 800a79a <__ascii_mbtowc+0x6>
 800a798:	a901      	add	r1, sp, #4
 800a79a:	b142      	cbz	r2, 800a7ae <__ascii_mbtowc+0x1a>
 800a79c:	b14b      	cbz	r3, 800a7b2 <__ascii_mbtowc+0x1e>
 800a79e:	7813      	ldrb	r3, [r2, #0]
 800a7a0:	600b      	str	r3, [r1, #0]
 800a7a2:	7812      	ldrb	r2, [r2, #0]
 800a7a4:	1e10      	subs	r0, r2, #0
 800a7a6:	bf18      	it	ne
 800a7a8:	2001      	movne	r0, #1
 800a7aa:	b002      	add	sp, #8
 800a7ac:	4770      	bx	lr
 800a7ae:	4610      	mov	r0, r2
 800a7b0:	e7fb      	b.n	800a7aa <__ascii_mbtowc+0x16>
 800a7b2:	f06f 0001 	mvn.w	r0, #1
 800a7b6:	e7f8      	b.n	800a7aa <__ascii_mbtowc+0x16>

0800a7b8 <_realloc_r>:
 800a7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7bc:	4680      	mov	r8, r0
 800a7be:	4614      	mov	r4, r2
 800a7c0:	460e      	mov	r6, r1
 800a7c2:	b921      	cbnz	r1, 800a7ce <_realloc_r+0x16>
 800a7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	f7ff b977 	b.w	8009abc <_malloc_r>
 800a7ce:	b92a      	cbnz	r2, 800a7dc <_realloc_r+0x24>
 800a7d0:	f7ff f900 	bl	80099d4 <_free_r>
 800a7d4:	4625      	mov	r5, r4
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7dc:	f000 f841 	bl	800a862 <_malloc_usable_size_r>
 800a7e0:	4284      	cmp	r4, r0
 800a7e2:	4607      	mov	r7, r0
 800a7e4:	d802      	bhi.n	800a7ec <_realloc_r+0x34>
 800a7e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a7ea:	d812      	bhi.n	800a812 <_realloc_r+0x5a>
 800a7ec:	4621      	mov	r1, r4
 800a7ee:	4640      	mov	r0, r8
 800a7f0:	f7ff f964 	bl	8009abc <_malloc_r>
 800a7f4:	4605      	mov	r5, r0
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d0ed      	beq.n	800a7d6 <_realloc_r+0x1e>
 800a7fa:	42bc      	cmp	r4, r7
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	4631      	mov	r1, r6
 800a800:	bf28      	it	cs
 800a802:	463a      	movcs	r2, r7
 800a804:	f7fe fa5d 	bl	8008cc2 <memcpy>
 800a808:	4631      	mov	r1, r6
 800a80a:	4640      	mov	r0, r8
 800a80c:	f7ff f8e2 	bl	80099d4 <_free_r>
 800a810:	e7e1      	b.n	800a7d6 <_realloc_r+0x1e>
 800a812:	4635      	mov	r5, r6
 800a814:	e7df      	b.n	800a7d6 <_realloc_r+0x1e>

0800a816 <__ascii_wctomb>:
 800a816:	b149      	cbz	r1, 800a82c <__ascii_wctomb+0x16>
 800a818:	2aff      	cmp	r2, #255	; 0xff
 800a81a:	bf85      	ittet	hi
 800a81c:	238a      	movhi	r3, #138	; 0x8a
 800a81e:	6003      	strhi	r3, [r0, #0]
 800a820:	700a      	strbls	r2, [r1, #0]
 800a822:	f04f 30ff 	movhi.w	r0, #4294967295
 800a826:	bf98      	it	ls
 800a828:	2001      	movls	r0, #1
 800a82a:	4770      	bx	lr
 800a82c:	4608      	mov	r0, r1
 800a82e:	4770      	bx	lr

0800a830 <fiprintf>:
 800a830:	b40e      	push	{r1, r2, r3}
 800a832:	b503      	push	{r0, r1, lr}
 800a834:	4601      	mov	r1, r0
 800a836:	ab03      	add	r3, sp, #12
 800a838:	4805      	ldr	r0, [pc, #20]	; (800a850 <fiprintf+0x20>)
 800a83a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a83e:	6800      	ldr	r0, [r0, #0]
 800a840:	9301      	str	r3, [sp, #4]
 800a842:	f000 f83f 	bl	800a8c4 <_vfiprintf_r>
 800a846:	b002      	add	sp, #8
 800a848:	f85d eb04 	ldr.w	lr, [sp], #4
 800a84c:	b003      	add	sp, #12
 800a84e:	4770      	bx	lr
 800a850:	20000060 	.word	0x20000060

0800a854 <abort>:
 800a854:	b508      	push	{r3, lr}
 800a856:	2006      	movs	r0, #6
 800a858:	f000 fa0c 	bl	800ac74 <raise>
 800a85c:	2001      	movs	r0, #1
 800a85e:	f7f7 feb9 	bl	80025d4 <_exit>

0800a862 <_malloc_usable_size_r>:
 800a862:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a866:	1f18      	subs	r0, r3, #4
 800a868:	2b00      	cmp	r3, #0
 800a86a:	bfbc      	itt	lt
 800a86c:	580b      	ldrlt	r3, [r1, r0]
 800a86e:	18c0      	addlt	r0, r0, r3
 800a870:	4770      	bx	lr

0800a872 <__sfputc_r>:
 800a872:	6893      	ldr	r3, [r2, #8]
 800a874:	3b01      	subs	r3, #1
 800a876:	2b00      	cmp	r3, #0
 800a878:	b410      	push	{r4}
 800a87a:	6093      	str	r3, [r2, #8]
 800a87c:	da08      	bge.n	800a890 <__sfputc_r+0x1e>
 800a87e:	6994      	ldr	r4, [r2, #24]
 800a880:	42a3      	cmp	r3, r4
 800a882:	db01      	blt.n	800a888 <__sfputc_r+0x16>
 800a884:	290a      	cmp	r1, #10
 800a886:	d103      	bne.n	800a890 <__sfputc_r+0x1e>
 800a888:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a88c:	f000 b934 	b.w	800aaf8 <__swbuf_r>
 800a890:	6813      	ldr	r3, [r2, #0]
 800a892:	1c58      	adds	r0, r3, #1
 800a894:	6010      	str	r0, [r2, #0]
 800a896:	7019      	strb	r1, [r3, #0]
 800a898:	4608      	mov	r0, r1
 800a89a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <__sfputs_r>:
 800a8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	460f      	mov	r7, r1
 800a8a6:	4614      	mov	r4, r2
 800a8a8:	18d5      	adds	r5, r2, r3
 800a8aa:	42ac      	cmp	r4, r5
 800a8ac:	d101      	bne.n	800a8b2 <__sfputs_r+0x12>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e007      	b.n	800a8c2 <__sfputs_r+0x22>
 800a8b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8b6:	463a      	mov	r2, r7
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f7ff ffda 	bl	800a872 <__sfputc_r>
 800a8be:	1c43      	adds	r3, r0, #1
 800a8c0:	d1f3      	bne.n	800a8aa <__sfputs_r+0xa>
 800a8c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a8c4 <_vfiprintf_r>:
 800a8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c8:	460d      	mov	r5, r1
 800a8ca:	b09d      	sub	sp, #116	; 0x74
 800a8cc:	4614      	mov	r4, r2
 800a8ce:	4698      	mov	r8, r3
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	b118      	cbz	r0, 800a8dc <_vfiprintf_r+0x18>
 800a8d4:	6a03      	ldr	r3, [r0, #32]
 800a8d6:	b90b      	cbnz	r3, 800a8dc <_vfiprintf_r+0x18>
 800a8d8:	f7fe f8da 	bl	8008a90 <__sinit>
 800a8dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8de:	07d9      	lsls	r1, r3, #31
 800a8e0:	d405      	bmi.n	800a8ee <_vfiprintf_r+0x2a>
 800a8e2:	89ab      	ldrh	r3, [r5, #12]
 800a8e4:	059a      	lsls	r2, r3, #22
 800a8e6:	d402      	bmi.n	800a8ee <_vfiprintf_r+0x2a>
 800a8e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ea:	f7fe f9e8 	bl	8008cbe <__retarget_lock_acquire_recursive>
 800a8ee:	89ab      	ldrh	r3, [r5, #12]
 800a8f0:	071b      	lsls	r3, r3, #28
 800a8f2:	d501      	bpl.n	800a8f8 <_vfiprintf_r+0x34>
 800a8f4:	692b      	ldr	r3, [r5, #16]
 800a8f6:	b99b      	cbnz	r3, 800a920 <_vfiprintf_r+0x5c>
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	f000 f93a 	bl	800ab74 <__swsetup_r>
 800a900:	b170      	cbz	r0, 800a920 <_vfiprintf_r+0x5c>
 800a902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a904:	07dc      	lsls	r4, r3, #31
 800a906:	d504      	bpl.n	800a912 <_vfiprintf_r+0x4e>
 800a908:	f04f 30ff 	mov.w	r0, #4294967295
 800a90c:	b01d      	add	sp, #116	; 0x74
 800a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a912:	89ab      	ldrh	r3, [r5, #12]
 800a914:	0598      	lsls	r0, r3, #22
 800a916:	d4f7      	bmi.n	800a908 <_vfiprintf_r+0x44>
 800a918:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a91a:	f7fe f9d1 	bl	8008cc0 <__retarget_lock_release_recursive>
 800a91e:	e7f3      	b.n	800a908 <_vfiprintf_r+0x44>
 800a920:	2300      	movs	r3, #0
 800a922:	9309      	str	r3, [sp, #36]	; 0x24
 800a924:	2320      	movs	r3, #32
 800a926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a92a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a92e:	2330      	movs	r3, #48	; 0x30
 800a930:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aae4 <_vfiprintf_r+0x220>
 800a934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a938:	f04f 0901 	mov.w	r9, #1
 800a93c:	4623      	mov	r3, r4
 800a93e:	469a      	mov	sl, r3
 800a940:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a944:	b10a      	cbz	r2, 800a94a <_vfiprintf_r+0x86>
 800a946:	2a25      	cmp	r2, #37	; 0x25
 800a948:	d1f9      	bne.n	800a93e <_vfiprintf_r+0x7a>
 800a94a:	ebba 0b04 	subs.w	fp, sl, r4
 800a94e:	d00b      	beq.n	800a968 <_vfiprintf_r+0xa4>
 800a950:	465b      	mov	r3, fp
 800a952:	4622      	mov	r2, r4
 800a954:	4629      	mov	r1, r5
 800a956:	4630      	mov	r0, r6
 800a958:	f7ff ffa2 	bl	800a8a0 <__sfputs_r>
 800a95c:	3001      	adds	r0, #1
 800a95e:	f000 80a9 	beq.w	800aab4 <_vfiprintf_r+0x1f0>
 800a962:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a964:	445a      	add	r2, fp
 800a966:	9209      	str	r2, [sp, #36]	; 0x24
 800a968:	f89a 3000 	ldrb.w	r3, [sl]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 80a1 	beq.w	800aab4 <_vfiprintf_r+0x1f0>
 800a972:	2300      	movs	r3, #0
 800a974:	f04f 32ff 	mov.w	r2, #4294967295
 800a978:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a97c:	f10a 0a01 	add.w	sl, sl, #1
 800a980:	9304      	str	r3, [sp, #16]
 800a982:	9307      	str	r3, [sp, #28]
 800a984:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a988:	931a      	str	r3, [sp, #104]	; 0x68
 800a98a:	4654      	mov	r4, sl
 800a98c:	2205      	movs	r2, #5
 800a98e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a992:	4854      	ldr	r0, [pc, #336]	; (800aae4 <_vfiprintf_r+0x220>)
 800a994:	f7f5 fc54 	bl	8000240 <memchr>
 800a998:	9a04      	ldr	r2, [sp, #16]
 800a99a:	b9d8      	cbnz	r0, 800a9d4 <_vfiprintf_r+0x110>
 800a99c:	06d1      	lsls	r1, r2, #27
 800a99e:	bf44      	itt	mi
 800a9a0:	2320      	movmi	r3, #32
 800a9a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9a6:	0713      	lsls	r3, r2, #28
 800a9a8:	bf44      	itt	mi
 800a9aa:	232b      	movmi	r3, #43	; 0x2b
 800a9ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a9b0:	f89a 3000 	ldrb.w	r3, [sl]
 800a9b4:	2b2a      	cmp	r3, #42	; 0x2a
 800a9b6:	d015      	beq.n	800a9e4 <_vfiprintf_r+0x120>
 800a9b8:	9a07      	ldr	r2, [sp, #28]
 800a9ba:	4654      	mov	r4, sl
 800a9bc:	2000      	movs	r0, #0
 800a9be:	f04f 0c0a 	mov.w	ip, #10
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9c8:	3b30      	subs	r3, #48	; 0x30
 800a9ca:	2b09      	cmp	r3, #9
 800a9cc:	d94d      	bls.n	800aa6a <_vfiprintf_r+0x1a6>
 800a9ce:	b1b0      	cbz	r0, 800a9fe <_vfiprintf_r+0x13a>
 800a9d0:	9207      	str	r2, [sp, #28]
 800a9d2:	e014      	b.n	800a9fe <_vfiprintf_r+0x13a>
 800a9d4:	eba0 0308 	sub.w	r3, r0, r8
 800a9d8:	fa09 f303 	lsl.w	r3, r9, r3
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	9304      	str	r3, [sp, #16]
 800a9e0:	46a2      	mov	sl, r4
 800a9e2:	e7d2      	b.n	800a98a <_vfiprintf_r+0xc6>
 800a9e4:	9b03      	ldr	r3, [sp, #12]
 800a9e6:	1d19      	adds	r1, r3, #4
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	9103      	str	r1, [sp, #12]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	bfbb      	ittet	lt
 800a9f0:	425b      	neglt	r3, r3
 800a9f2:	f042 0202 	orrlt.w	r2, r2, #2
 800a9f6:	9307      	strge	r3, [sp, #28]
 800a9f8:	9307      	strlt	r3, [sp, #28]
 800a9fa:	bfb8      	it	lt
 800a9fc:	9204      	strlt	r2, [sp, #16]
 800a9fe:	7823      	ldrb	r3, [r4, #0]
 800aa00:	2b2e      	cmp	r3, #46	; 0x2e
 800aa02:	d10c      	bne.n	800aa1e <_vfiprintf_r+0x15a>
 800aa04:	7863      	ldrb	r3, [r4, #1]
 800aa06:	2b2a      	cmp	r3, #42	; 0x2a
 800aa08:	d134      	bne.n	800aa74 <_vfiprintf_r+0x1b0>
 800aa0a:	9b03      	ldr	r3, [sp, #12]
 800aa0c:	1d1a      	adds	r2, r3, #4
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	9203      	str	r2, [sp, #12]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	bfb8      	it	lt
 800aa16:	f04f 33ff 	movlt.w	r3, #4294967295
 800aa1a:	3402      	adds	r4, #2
 800aa1c:	9305      	str	r3, [sp, #20]
 800aa1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aaf4 <_vfiprintf_r+0x230>
 800aa22:	7821      	ldrb	r1, [r4, #0]
 800aa24:	2203      	movs	r2, #3
 800aa26:	4650      	mov	r0, sl
 800aa28:	f7f5 fc0a 	bl	8000240 <memchr>
 800aa2c:	b138      	cbz	r0, 800aa3e <_vfiprintf_r+0x17a>
 800aa2e:	9b04      	ldr	r3, [sp, #16]
 800aa30:	eba0 000a 	sub.w	r0, r0, sl
 800aa34:	2240      	movs	r2, #64	; 0x40
 800aa36:	4082      	lsls	r2, r0
 800aa38:	4313      	orrs	r3, r2
 800aa3a:	3401      	adds	r4, #1
 800aa3c:	9304      	str	r3, [sp, #16]
 800aa3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa42:	4829      	ldr	r0, [pc, #164]	; (800aae8 <_vfiprintf_r+0x224>)
 800aa44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa48:	2206      	movs	r2, #6
 800aa4a:	f7f5 fbf9 	bl	8000240 <memchr>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d03f      	beq.n	800aad2 <_vfiprintf_r+0x20e>
 800aa52:	4b26      	ldr	r3, [pc, #152]	; (800aaec <_vfiprintf_r+0x228>)
 800aa54:	bb1b      	cbnz	r3, 800aa9e <_vfiprintf_r+0x1da>
 800aa56:	9b03      	ldr	r3, [sp, #12]
 800aa58:	3307      	adds	r3, #7
 800aa5a:	f023 0307 	bic.w	r3, r3, #7
 800aa5e:	3308      	adds	r3, #8
 800aa60:	9303      	str	r3, [sp, #12]
 800aa62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa64:	443b      	add	r3, r7
 800aa66:	9309      	str	r3, [sp, #36]	; 0x24
 800aa68:	e768      	b.n	800a93c <_vfiprintf_r+0x78>
 800aa6a:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa6e:	460c      	mov	r4, r1
 800aa70:	2001      	movs	r0, #1
 800aa72:	e7a6      	b.n	800a9c2 <_vfiprintf_r+0xfe>
 800aa74:	2300      	movs	r3, #0
 800aa76:	3401      	adds	r4, #1
 800aa78:	9305      	str	r3, [sp, #20]
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	f04f 0c0a 	mov.w	ip, #10
 800aa80:	4620      	mov	r0, r4
 800aa82:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa86:	3a30      	subs	r2, #48	; 0x30
 800aa88:	2a09      	cmp	r2, #9
 800aa8a:	d903      	bls.n	800aa94 <_vfiprintf_r+0x1d0>
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d0c6      	beq.n	800aa1e <_vfiprintf_r+0x15a>
 800aa90:	9105      	str	r1, [sp, #20]
 800aa92:	e7c4      	b.n	800aa1e <_vfiprintf_r+0x15a>
 800aa94:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa98:	4604      	mov	r4, r0
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	e7f0      	b.n	800aa80 <_vfiprintf_r+0x1bc>
 800aa9e:	ab03      	add	r3, sp, #12
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	462a      	mov	r2, r5
 800aaa4:	4b12      	ldr	r3, [pc, #72]	; (800aaf0 <_vfiprintf_r+0x22c>)
 800aaa6:	a904      	add	r1, sp, #16
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7fd fb9f 	bl	80081ec <_printf_float>
 800aaae:	4607      	mov	r7, r0
 800aab0:	1c78      	adds	r0, r7, #1
 800aab2:	d1d6      	bne.n	800aa62 <_vfiprintf_r+0x19e>
 800aab4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aab6:	07d9      	lsls	r1, r3, #31
 800aab8:	d405      	bmi.n	800aac6 <_vfiprintf_r+0x202>
 800aaba:	89ab      	ldrh	r3, [r5, #12]
 800aabc:	059a      	lsls	r2, r3, #22
 800aabe:	d402      	bmi.n	800aac6 <_vfiprintf_r+0x202>
 800aac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aac2:	f7fe f8fd 	bl	8008cc0 <__retarget_lock_release_recursive>
 800aac6:	89ab      	ldrh	r3, [r5, #12]
 800aac8:	065b      	lsls	r3, r3, #25
 800aaca:	f53f af1d 	bmi.w	800a908 <_vfiprintf_r+0x44>
 800aace:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aad0:	e71c      	b.n	800a90c <_vfiprintf_r+0x48>
 800aad2:	ab03      	add	r3, sp, #12
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	462a      	mov	r2, r5
 800aad8:	4b05      	ldr	r3, [pc, #20]	; (800aaf0 <_vfiprintf_r+0x22c>)
 800aada:	a904      	add	r1, sp, #16
 800aadc:	4630      	mov	r0, r6
 800aade:	f7fd fe29 	bl	8008734 <_printf_i>
 800aae2:	e7e4      	b.n	800aaae <_vfiprintf_r+0x1ea>
 800aae4:	0800b04c 	.word	0x0800b04c
 800aae8:	0800b056 	.word	0x0800b056
 800aaec:	080081ed 	.word	0x080081ed
 800aaf0:	0800a8a1 	.word	0x0800a8a1
 800aaf4:	0800b052 	.word	0x0800b052

0800aaf8 <__swbuf_r>:
 800aaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aafa:	460e      	mov	r6, r1
 800aafc:	4614      	mov	r4, r2
 800aafe:	4605      	mov	r5, r0
 800ab00:	b118      	cbz	r0, 800ab0a <__swbuf_r+0x12>
 800ab02:	6a03      	ldr	r3, [r0, #32]
 800ab04:	b90b      	cbnz	r3, 800ab0a <__swbuf_r+0x12>
 800ab06:	f7fd ffc3 	bl	8008a90 <__sinit>
 800ab0a:	69a3      	ldr	r3, [r4, #24]
 800ab0c:	60a3      	str	r3, [r4, #8]
 800ab0e:	89a3      	ldrh	r3, [r4, #12]
 800ab10:	071a      	lsls	r2, r3, #28
 800ab12:	d525      	bpl.n	800ab60 <__swbuf_r+0x68>
 800ab14:	6923      	ldr	r3, [r4, #16]
 800ab16:	b31b      	cbz	r3, 800ab60 <__swbuf_r+0x68>
 800ab18:	6823      	ldr	r3, [r4, #0]
 800ab1a:	6922      	ldr	r2, [r4, #16]
 800ab1c:	1a98      	subs	r0, r3, r2
 800ab1e:	6963      	ldr	r3, [r4, #20]
 800ab20:	b2f6      	uxtb	r6, r6
 800ab22:	4283      	cmp	r3, r0
 800ab24:	4637      	mov	r7, r6
 800ab26:	dc04      	bgt.n	800ab32 <__swbuf_r+0x3a>
 800ab28:	4621      	mov	r1, r4
 800ab2a:	4628      	mov	r0, r5
 800ab2c:	f7ff fdac 	bl	800a688 <_fflush_r>
 800ab30:	b9e0      	cbnz	r0, 800ab6c <__swbuf_r+0x74>
 800ab32:	68a3      	ldr	r3, [r4, #8]
 800ab34:	3b01      	subs	r3, #1
 800ab36:	60a3      	str	r3, [r4, #8]
 800ab38:	6823      	ldr	r3, [r4, #0]
 800ab3a:	1c5a      	adds	r2, r3, #1
 800ab3c:	6022      	str	r2, [r4, #0]
 800ab3e:	701e      	strb	r6, [r3, #0]
 800ab40:	6962      	ldr	r2, [r4, #20]
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d004      	beq.n	800ab52 <__swbuf_r+0x5a>
 800ab48:	89a3      	ldrh	r3, [r4, #12]
 800ab4a:	07db      	lsls	r3, r3, #31
 800ab4c:	d506      	bpl.n	800ab5c <__swbuf_r+0x64>
 800ab4e:	2e0a      	cmp	r6, #10
 800ab50:	d104      	bne.n	800ab5c <__swbuf_r+0x64>
 800ab52:	4621      	mov	r1, r4
 800ab54:	4628      	mov	r0, r5
 800ab56:	f7ff fd97 	bl	800a688 <_fflush_r>
 800ab5a:	b938      	cbnz	r0, 800ab6c <__swbuf_r+0x74>
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab60:	4621      	mov	r1, r4
 800ab62:	4628      	mov	r0, r5
 800ab64:	f000 f806 	bl	800ab74 <__swsetup_r>
 800ab68:	2800      	cmp	r0, #0
 800ab6a:	d0d5      	beq.n	800ab18 <__swbuf_r+0x20>
 800ab6c:	f04f 37ff 	mov.w	r7, #4294967295
 800ab70:	e7f4      	b.n	800ab5c <__swbuf_r+0x64>
	...

0800ab74 <__swsetup_r>:
 800ab74:	b538      	push	{r3, r4, r5, lr}
 800ab76:	4b2a      	ldr	r3, [pc, #168]	; (800ac20 <__swsetup_r+0xac>)
 800ab78:	4605      	mov	r5, r0
 800ab7a:	6818      	ldr	r0, [r3, #0]
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	b118      	cbz	r0, 800ab88 <__swsetup_r+0x14>
 800ab80:	6a03      	ldr	r3, [r0, #32]
 800ab82:	b90b      	cbnz	r3, 800ab88 <__swsetup_r+0x14>
 800ab84:	f7fd ff84 	bl	8008a90 <__sinit>
 800ab88:	89a3      	ldrh	r3, [r4, #12]
 800ab8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ab8e:	0718      	lsls	r0, r3, #28
 800ab90:	d422      	bmi.n	800abd8 <__swsetup_r+0x64>
 800ab92:	06d9      	lsls	r1, r3, #27
 800ab94:	d407      	bmi.n	800aba6 <__swsetup_r+0x32>
 800ab96:	2309      	movs	r3, #9
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ab9e:	81a3      	strh	r3, [r4, #12]
 800aba0:	f04f 30ff 	mov.w	r0, #4294967295
 800aba4:	e034      	b.n	800ac10 <__swsetup_r+0x9c>
 800aba6:	0758      	lsls	r0, r3, #29
 800aba8:	d512      	bpl.n	800abd0 <__swsetup_r+0x5c>
 800abaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800abac:	b141      	cbz	r1, 800abc0 <__swsetup_r+0x4c>
 800abae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800abb2:	4299      	cmp	r1, r3
 800abb4:	d002      	beq.n	800abbc <__swsetup_r+0x48>
 800abb6:	4628      	mov	r0, r5
 800abb8:	f7fe ff0c 	bl	80099d4 <_free_r>
 800abbc:	2300      	movs	r3, #0
 800abbe:	6363      	str	r3, [r4, #52]	; 0x34
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800abc6:	81a3      	strh	r3, [r4, #12]
 800abc8:	2300      	movs	r3, #0
 800abca:	6063      	str	r3, [r4, #4]
 800abcc:	6923      	ldr	r3, [r4, #16]
 800abce:	6023      	str	r3, [r4, #0]
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	f043 0308 	orr.w	r3, r3, #8
 800abd6:	81a3      	strh	r3, [r4, #12]
 800abd8:	6923      	ldr	r3, [r4, #16]
 800abda:	b94b      	cbnz	r3, 800abf0 <__swsetup_r+0x7c>
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800abe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abe6:	d003      	beq.n	800abf0 <__swsetup_r+0x7c>
 800abe8:	4621      	mov	r1, r4
 800abea:	4628      	mov	r0, r5
 800abec:	f000 f884 	bl	800acf8 <__smakebuf_r>
 800abf0:	89a0      	ldrh	r0, [r4, #12]
 800abf2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abf6:	f010 0301 	ands.w	r3, r0, #1
 800abfa:	d00a      	beq.n	800ac12 <__swsetup_r+0x9e>
 800abfc:	2300      	movs	r3, #0
 800abfe:	60a3      	str	r3, [r4, #8]
 800ac00:	6963      	ldr	r3, [r4, #20]
 800ac02:	425b      	negs	r3, r3
 800ac04:	61a3      	str	r3, [r4, #24]
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	b943      	cbnz	r3, 800ac1c <__swsetup_r+0xa8>
 800ac0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac0e:	d1c4      	bne.n	800ab9a <__swsetup_r+0x26>
 800ac10:	bd38      	pop	{r3, r4, r5, pc}
 800ac12:	0781      	lsls	r1, r0, #30
 800ac14:	bf58      	it	pl
 800ac16:	6963      	ldrpl	r3, [r4, #20]
 800ac18:	60a3      	str	r3, [r4, #8]
 800ac1a:	e7f4      	b.n	800ac06 <__swsetup_r+0x92>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	e7f7      	b.n	800ac10 <__swsetup_r+0x9c>
 800ac20:	20000060 	.word	0x20000060

0800ac24 <_raise_r>:
 800ac24:	291f      	cmp	r1, #31
 800ac26:	b538      	push	{r3, r4, r5, lr}
 800ac28:	4604      	mov	r4, r0
 800ac2a:	460d      	mov	r5, r1
 800ac2c:	d904      	bls.n	800ac38 <_raise_r+0x14>
 800ac2e:	2316      	movs	r3, #22
 800ac30:	6003      	str	r3, [r0, #0]
 800ac32:	f04f 30ff 	mov.w	r0, #4294967295
 800ac36:	bd38      	pop	{r3, r4, r5, pc}
 800ac38:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ac3a:	b112      	cbz	r2, 800ac42 <_raise_r+0x1e>
 800ac3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac40:	b94b      	cbnz	r3, 800ac56 <_raise_r+0x32>
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 f830 	bl	800aca8 <_getpid_r>
 800ac48:	462a      	mov	r2, r5
 800ac4a:	4601      	mov	r1, r0
 800ac4c:	4620      	mov	r0, r4
 800ac4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac52:	f000 b817 	b.w	800ac84 <_kill_r>
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d00a      	beq.n	800ac70 <_raise_r+0x4c>
 800ac5a:	1c59      	adds	r1, r3, #1
 800ac5c:	d103      	bne.n	800ac66 <_raise_r+0x42>
 800ac5e:	2316      	movs	r3, #22
 800ac60:	6003      	str	r3, [r0, #0]
 800ac62:	2001      	movs	r0, #1
 800ac64:	e7e7      	b.n	800ac36 <_raise_r+0x12>
 800ac66:	2400      	movs	r4, #0
 800ac68:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	4798      	blx	r3
 800ac70:	2000      	movs	r0, #0
 800ac72:	e7e0      	b.n	800ac36 <_raise_r+0x12>

0800ac74 <raise>:
 800ac74:	4b02      	ldr	r3, [pc, #8]	; (800ac80 <raise+0xc>)
 800ac76:	4601      	mov	r1, r0
 800ac78:	6818      	ldr	r0, [r3, #0]
 800ac7a:	f7ff bfd3 	b.w	800ac24 <_raise_r>
 800ac7e:	bf00      	nop
 800ac80:	20000060 	.word	0x20000060

0800ac84 <_kill_r>:
 800ac84:	b538      	push	{r3, r4, r5, lr}
 800ac86:	4d07      	ldr	r5, [pc, #28]	; (800aca4 <_kill_r+0x20>)
 800ac88:	2300      	movs	r3, #0
 800ac8a:	4604      	mov	r4, r0
 800ac8c:	4608      	mov	r0, r1
 800ac8e:	4611      	mov	r1, r2
 800ac90:	602b      	str	r3, [r5, #0]
 800ac92:	f7f7 fc8f 	bl	80025b4 <_kill>
 800ac96:	1c43      	adds	r3, r0, #1
 800ac98:	d102      	bne.n	800aca0 <_kill_r+0x1c>
 800ac9a:	682b      	ldr	r3, [r5, #0]
 800ac9c:	b103      	cbz	r3, 800aca0 <_kill_r+0x1c>
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	bd38      	pop	{r3, r4, r5, pc}
 800aca2:	bf00      	nop
 800aca4:	200007a4 	.word	0x200007a4

0800aca8 <_getpid_r>:
 800aca8:	f7f7 bc7c 	b.w	80025a4 <_getpid>

0800acac <__swhatbuf_r>:
 800acac:	b570      	push	{r4, r5, r6, lr}
 800acae:	460c      	mov	r4, r1
 800acb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb4:	2900      	cmp	r1, #0
 800acb6:	b096      	sub	sp, #88	; 0x58
 800acb8:	4615      	mov	r5, r2
 800acba:	461e      	mov	r6, r3
 800acbc:	da0d      	bge.n	800acda <__swhatbuf_r+0x2e>
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800acc4:	f04f 0100 	mov.w	r1, #0
 800acc8:	bf0c      	ite	eq
 800acca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800acce:	2340      	movne	r3, #64	; 0x40
 800acd0:	2000      	movs	r0, #0
 800acd2:	6031      	str	r1, [r6, #0]
 800acd4:	602b      	str	r3, [r5, #0]
 800acd6:	b016      	add	sp, #88	; 0x58
 800acd8:	bd70      	pop	{r4, r5, r6, pc}
 800acda:	466a      	mov	r2, sp
 800acdc:	f000 f848 	bl	800ad70 <_fstat_r>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	dbec      	blt.n	800acbe <__swhatbuf_r+0x12>
 800ace4:	9901      	ldr	r1, [sp, #4]
 800ace6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800acea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800acee:	4259      	negs	r1, r3
 800acf0:	4159      	adcs	r1, r3
 800acf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf6:	e7eb      	b.n	800acd0 <__swhatbuf_r+0x24>

0800acf8 <__smakebuf_r>:
 800acf8:	898b      	ldrh	r3, [r1, #12]
 800acfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800acfc:	079d      	lsls	r5, r3, #30
 800acfe:	4606      	mov	r6, r0
 800ad00:	460c      	mov	r4, r1
 800ad02:	d507      	bpl.n	800ad14 <__smakebuf_r+0x1c>
 800ad04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad08:	6023      	str	r3, [r4, #0]
 800ad0a:	6123      	str	r3, [r4, #16]
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	6163      	str	r3, [r4, #20]
 800ad10:	b002      	add	sp, #8
 800ad12:	bd70      	pop	{r4, r5, r6, pc}
 800ad14:	ab01      	add	r3, sp, #4
 800ad16:	466a      	mov	r2, sp
 800ad18:	f7ff ffc8 	bl	800acac <__swhatbuf_r>
 800ad1c:	9900      	ldr	r1, [sp, #0]
 800ad1e:	4605      	mov	r5, r0
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7fe fecb 	bl	8009abc <_malloc_r>
 800ad26:	b948      	cbnz	r0, 800ad3c <__smakebuf_r+0x44>
 800ad28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2c:	059a      	lsls	r2, r3, #22
 800ad2e:	d4ef      	bmi.n	800ad10 <__smakebuf_r+0x18>
 800ad30:	f023 0303 	bic.w	r3, r3, #3
 800ad34:	f043 0302 	orr.w	r3, r3, #2
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	e7e3      	b.n	800ad04 <__smakebuf_r+0xc>
 800ad3c:	89a3      	ldrh	r3, [r4, #12]
 800ad3e:	6020      	str	r0, [r4, #0]
 800ad40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad44:	81a3      	strh	r3, [r4, #12]
 800ad46:	9b00      	ldr	r3, [sp, #0]
 800ad48:	6163      	str	r3, [r4, #20]
 800ad4a:	9b01      	ldr	r3, [sp, #4]
 800ad4c:	6120      	str	r0, [r4, #16]
 800ad4e:	b15b      	cbz	r3, 800ad68 <__smakebuf_r+0x70>
 800ad50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad54:	4630      	mov	r0, r6
 800ad56:	f000 f81d 	bl	800ad94 <_isatty_r>
 800ad5a:	b128      	cbz	r0, 800ad68 <__smakebuf_r+0x70>
 800ad5c:	89a3      	ldrh	r3, [r4, #12]
 800ad5e:	f023 0303 	bic.w	r3, r3, #3
 800ad62:	f043 0301 	orr.w	r3, r3, #1
 800ad66:	81a3      	strh	r3, [r4, #12]
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	431d      	orrs	r5, r3
 800ad6c:	81a5      	strh	r5, [r4, #12]
 800ad6e:	e7cf      	b.n	800ad10 <__smakebuf_r+0x18>

0800ad70 <_fstat_r>:
 800ad70:	b538      	push	{r3, r4, r5, lr}
 800ad72:	4d07      	ldr	r5, [pc, #28]	; (800ad90 <_fstat_r+0x20>)
 800ad74:	2300      	movs	r3, #0
 800ad76:	4604      	mov	r4, r0
 800ad78:	4608      	mov	r0, r1
 800ad7a:	4611      	mov	r1, r2
 800ad7c:	602b      	str	r3, [r5, #0]
 800ad7e:	f7f7 fc78 	bl	8002672 <_fstat>
 800ad82:	1c43      	adds	r3, r0, #1
 800ad84:	d102      	bne.n	800ad8c <_fstat_r+0x1c>
 800ad86:	682b      	ldr	r3, [r5, #0]
 800ad88:	b103      	cbz	r3, 800ad8c <_fstat_r+0x1c>
 800ad8a:	6023      	str	r3, [r4, #0]
 800ad8c:	bd38      	pop	{r3, r4, r5, pc}
 800ad8e:	bf00      	nop
 800ad90:	200007a4 	.word	0x200007a4

0800ad94 <_isatty_r>:
 800ad94:	b538      	push	{r3, r4, r5, lr}
 800ad96:	4d06      	ldr	r5, [pc, #24]	; (800adb0 <_isatty_r+0x1c>)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	4604      	mov	r4, r0
 800ad9c:	4608      	mov	r0, r1
 800ad9e:	602b      	str	r3, [r5, #0]
 800ada0:	f7f7 fc77 	bl	8002692 <_isatty>
 800ada4:	1c43      	adds	r3, r0, #1
 800ada6:	d102      	bne.n	800adae <_isatty_r+0x1a>
 800ada8:	682b      	ldr	r3, [r5, #0]
 800adaa:	b103      	cbz	r3, 800adae <_isatty_r+0x1a>
 800adac:	6023      	str	r3, [r4, #0]
 800adae:	bd38      	pop	{r3, r4, r5, pc}
 800adb0:	200007a4 	.word	0x200007a4

0800adb4 <_init>:
 800adb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adb6:	bf00      	nop
 800adb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adba:	bc08      	pop	{r3}
 800adbc:	469e      	mov	lr, r3
 800adbe:	4770      	bx	lr

0800adc0 <_fini>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	bf00      	nop
 800adc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adc6:	bc08      	pop	{r3}
 800adc8:	469e      	mov	lr, r3
 800adca:	4770      	bx	lr
