
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008efc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080090e0  080090e0  000190e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009494  08009494  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009494  08009494  00019494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800949c  0800949c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800949c  0800949c  0001949c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094a0  080094a0  000194a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080094a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001f0  08009694  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  08009694  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a0fe  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b55  00000000  00000000  0003a361  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a8  00000000  00000000  0003deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fea  00000000  00000000  0003f360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028b57  00000000  00000000  0004034a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b584  00000000  00000000  00068ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105837  00000000  00000000  00084425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006438  00000000  00000000  00189c5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00190094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f0 	.word	0x200001f0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080090c4 	.word	0x080090c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f4 	.word	0x200001f4
 800021c:	080090c4 	.word	0x080090c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b094      	sub	sp, #80	; 0x50
 8000f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	2238      	movs	r2, #56	; 0x38
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f006 f93d 	bl	8007222 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa8:	1d3b      	adds	r3, r7, #4
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f001 fd5c 	bl	8002a74 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fd6:	2355      	movs	r3, #85	; 0x55
 8000fd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fdf6 	bl	8002bdc <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ff6:	f000 fedd 	bl	8001db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ffe:	2303      	movs	r3, #3
 8001000:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	2104      	movs	r1, #4
 8001012:	4618      	mov	r0, r3
 8001014:	f002 f8f4 	bl	8003200 <HAL_RCC_ClockConfig>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800101e:	f000 fec9 	bl	8001db4 <Error_Handler>
  }
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	; 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <MX_GPIO_Init>:

#include "gpio_configuration.h"


void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0304 	and.w	r3, r3, #4
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	4b29      	ldr	r3, [pc, #164]	; (8001100 <MX_GPIO_Init+0xd4>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a28      	ldr	r2, [pc, #160]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a22      	ldr	r2, [pc, #136]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001078:	f043 0301 	orr.w	r3, r3, #1
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b20      	ldr	r3, [pc, #128]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60bb      	str	r3, [r7, #8]
 8001088:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <MX_GPIO_Init+0xd4>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <MX_GPIO_Init+0xd4>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2123      	movs	r1, #35	; 0x23
 80010a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010aa:	f001 fccb 	bl	8002a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010be:	f107 0314 	add.w	r3, r7, #20
 80010c2:	4619      	mov	r1, r3
 80010c4:	480f      	ldr	r0, [pc, #60]	; (8001104 <MX_GPIO_Init+0xd8>)
 80010c6:	f001 fb3b 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin;
 80010ca:	2323      	movs	r3, #35	; 0x23
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f001 fb2c 	bl	8002740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e8:	2200      	movs	r2, #0
 80010ea:	2100      	movs	r1, #0
 80010ec:	2028      	movs	r0, #40	; 0x28
 80010ee:	f001 faff 	bl	80026f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f001 fb16 	bl	8002724 <HAL_NVIC_EnableIRQ>

}
 80010f8:	bf00      	nop
 80010fa:	3728      	adds	r7, #40	; 0x28
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	48000800 	.word	0x48000800

08001108 <MX_TIM1_Init>:




void MX_TIM1_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09c      	sub	sp, #112	; 0x70
 800110c:	af00      	add	r7, sp, #0


  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800110e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800111c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001128:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	615a      	str	r2, [r3, #20]
 800113a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800113c:	1d3b      	adds	r3, r7, #4
 800113e:	2234      	movs	r2, #52	; 0x34
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f006 f86d 	bl	8007222 <memset>

  htim1.Instance = TIM1;
 8001148:	4b57      	ldr	r3, [pc, #348]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800114a:	4a58      	ldr	r2, [pc, #352]	; (80012ac <MX_TIM1_Init+0x1a4>)
 800114c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 170000-1;
 800114e:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001150:	4a57      	ldr	r2, [pc, #348]	; (80012b0 <MX_TIM1_Init+0x1a8>)
 8001152:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 800115a:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800115c:	2263      	movs	r2, #99	; 0x63
 800115e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001162:	2200      	movs	r2, #0
 8001164:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001168:	2200      	movs	r2, #0
 800116a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b4e      	ldr	r3, [pc, #312]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001172:	484d      	ldr	r0, [pc, #308]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001174:	f002 fce0 	bl	8003b38 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800117e:	f000 fe19 	bl	8001db4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001188:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800118c:	4619      	mov	r1, r3
 800118e:	4846      	ldr	r0, [pc, #280]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001190:	f003 fb1e 	bl	80047d0 <HAL_TIM_ConfigClockSource>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800119a:	f000 fe0b 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800119e:	4842      	ldr	r0, [pc, #264]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 80011a0:	f002 fe0a 	bl	8003db8 <HAL_TIM_PWM_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80011aa:	f000 fe03 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011b6:	2300      	movs	r3, #0
 80011b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011be:	4619      	mov	r1, r3
 80011c0:	4839      	ldr	r0, [pc, #228]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 80011c2:	f004 f8e3 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80011cc:	f000 fdf2 	bl	8001db4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d0:	2360      	movs	r3, #96	; 0x60
 80011d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d8:	2300      	movs	r3, #0
 80011da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011f0:	2200      	movs	r2, #0
 80011f2:	4619      	mov	r1, r3
 80011f4:	482c      	ldr	r0, [pc, #176]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 80011f6:	f003 f9d7 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001200:	f000 fdd8 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001208:	2204      	movs	r2, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4826      	ldr	r0, [pc, #152]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800120e:	f003 f9cb 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001218:	f000 fdcc 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800121c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001220:	2208      	movs	r2, #8
 8001222:	4619      	mov	r1, r3
 8001224:	4820      	ldr	r0, [pc, #128]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 8001226:	f003 f9bf 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001230:	f000 fdc0 	bl	8001db4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001234:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001238:	220c      	movs	r2, #12
 800123a:	4619      	mov	r1, r3
 800123c:	481a      	ldr	r0, [pc, #104]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800123e:	f003 f9b3 	bl	80045a8 <HAL_TIM_PWM_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001248:	f000 fdb4 	bl	8001db4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001250:	2300      	movs	r3, #0
 8001252:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001254:	2300      	movs	r3, #0
 8001256:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001264:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001280:	2300      	movs	r3, #0
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	4619      	mov	r1, r3
 8001288:	4807      	ldr	r0, [pc, #28]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800128a:	f004 f915 	bl	80054b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8001294:	f000 fd8e 	bl	8001db4 <Error_Handler>
  }

  HAL_TIM_MspPostInit(&htim1);
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <MX_TIM1_Init+0x1a0>)
 800129a:	f000 ff7d 	bl	8002198 <HAL_TIM_MspPostInit>

}
 800129e:	bf00      	nop
 80012a0:	3770      	adds	r7, #112	; 0x70
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000020c 	.word	0x2000020c
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	0002980f 	.word	0x0002980f

080012b4 <MX_TIM3_Init>:

void MX_TIM3_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2224      	movs	r2, #36	; 0x24
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 ffad 	bl	8007222 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012d2:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012d4:	4a21      	ldr	r2, [pc, #132]	; (800135c <MX_TIM3_Init+0xa8>)
 80012d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012d8:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012de:	4b1e      	ldr	r3, [pc, #120]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012e4:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f2:	4b19      	ldr	r3, [pc, #100]	; (8001358 <MX_TIM3_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012f8:	2303      	movs	r3, #3
 80012fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012fc:	2300      	movs	r3, #0
 80012fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001300:	2301      	movs	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800130c:	2300      	movs	r3, #0
 800130e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001310:	2301      	movs	r3, #1
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4619      	mov	r1, r3
 8001322:	480d      	ldr	r0, [pc, #52]	; (8001358 <MX_TIM3_Init+0xa4>)
 8001324:	f002 febc 	bl	80040a0 <HAL_TIM_Encoder_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800132e:	f000 fd41 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800133a:	463b      	mov	r3, r7
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM3_Init+0xa4>)
 8001340:	f004 f824 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800134a:	f000 fd33 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000258 	.word	0x20000258
 800135c:	40000400 	.word	0x40000400

08001360 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM4_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f005 ff57 	bl	8007222 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_TIM4_Init+0xa4>)
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <MX_TIM4_Init+0xa8>)
 8001382:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_TIM4_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_TIM4_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM4_Init+0xa4>)
 8001392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001396:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM4_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_TIM4_Init+0xa4>)
 80013a0:	2280      	movs	r2, #128	; 0x80
 80013a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013a4:	2303      	movs	r3, #3
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013b4:	230a      	movs	r3, #10
 80013b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_TIM4_Init+0xa4>)
 80013d0:	f002 fe66 	bl	80040a0 <HAL_TIM_Encoder_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80013da:	f000 fceb 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_TIM4_Init+0xa4>)
 80013ec:	f003 ffce 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80013f6:	f000 fcdd 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200002a4 	.word	0x200002a4
 8001408:	40000800 	.word	0x40000800

0800140c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001412:	f107 030c 	add.w	r3, r7, #12
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f005 ff01 	bl	8007222 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800142a:	4b21      	ldr	r3, [pc, #132]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800142c:	4a21      	ldr	r2, [pc, #132]	; (80014b4 <MX_TIM5_Init+0xa8>)
 800142e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001430:	4b1f      	ldr	r3, [pc, #124]	; (80014b0 <MX_TIM5_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001436:	4b1e      	ldr	r3, [pc, #120]	; (80014b0 <MX_TIM5_Init+0xa4>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4.294967295E9;
 800143c:	4b1c      	ldr	r3, [pc, #112]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800143e:	f04f 32ff 	mov.w	r2, #4294967295
 8001442:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001444:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_TIM5_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800144c:	2200      	movs	r2, #0
 800144e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001450:	2303      	movs	r3, #3
 8001452:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001458:	2301      	movs	r3, #1
 800145a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001468:	2301      	movs	r3, #1
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <MX_TIM5_Init+0xa4>)
 800147c:	f002 fe10 	bl	80040a0 <HAL_TIM_Encoder_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM5_Init+0x7e>
  {
    Error_Handler();
 8001486:	f000 fc95 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001492:	463b      	mov	r3, r7
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	; (80014b0 <MX_TIM5_Init+0xa4>)
 8001498:	f003 ff78 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80014a2:	f000 fc87 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	; 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200002f0 	.word	0x200002f0
 80014b4:	40000c00 	.word	0x40000c00

080014b8 <MX_TIM7_Init>:

void MX_TIM7_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014c8:	4b14      	ldr	r3, [pc, #80]	; (800151c <MX_TIM7_Init+0x64>)
 80014ca:	4a15      	ldr	r2, [pc, #84]	; (8001520 <MX_TIM7_Init+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 170-1;
 80014ce:	4b13      	ldr	r3, [pc, #76]	; (800151c <MX_TIM7_Init+0x64>)
 80014d0:	22a9      	movs	r2, #169	; 0xa9
 80014d2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_TIM7_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50000;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_TIM7_Init+0x64>)
 80014dc:	f24c 3250 	movw	r2, #50000	; 0xc350
 80014e0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_TIM7_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014e8:	480c      	ldr	r0, [pc, #48]	; (800151c <MX_TIM7_Init+0x64>)
 80014ea:	f002 fb25 	bl	8003b38 <HAL_TIM_Base_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80014f4:	f000 fc5e 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014f8:	2300      	movs	r3, #0
 80014fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_TIM7_Init+0x64>)
 8001506:	f003 ff41 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001510:	f000 fc50 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000033c 	.word	0x2000033c
 8001520:	40001400 	.word	0x40001400

08001524 <MX_TIM8_Init>:

void MX_TIM8_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08c      	sub	sp, #48	; 0x30
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	2224      	movs	r2, #36	; 0x24
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f005 fe75 	bl	8007222 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	463b      	mov	r3, r7
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001542:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <MX_TIM8_Init+0xac>)
 8001544:	4a23      	ldr	r2, [pc, #140]	; (80015d4 <MX_TIM8_Init+0xb0>)
 8001546:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001548:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <MX_TIM8_Init+0xac>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800154e:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <MX_TIM8_Init+0xac>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001554:	4b1e      	ldr	r3, [pc, #120]	; (80015d0 <MX_TIM8_Init+0xac>)
 8001556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800155c:	4b1c      	ldr	r3, [pc, #112]	; (80015d0 <MX_TIM8_Init+0xac>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001562:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <MX_TIM8_Init+0xac>)
 8001564:	2200      	movs	r2, #0
 8001566:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <MX_TIM8_Init+0xac>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800156e:	2303      	movs	r3, #3
 8001570:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4619      	mov	r1, r3
 8001598:	480d      	ldr	r0, [pc, #52]	; (80015d0 <MX_TIM8_Init+0xac>)
 800159a:	f002 fd81 	bl	80040a0 <HAL_TIM_Encoder_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80015a4:	f000 fc06 	bl	8001db4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015ac:	2300      	movs	r3, #0
 80015ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015b4:	463b      	mov	r3, r7
 80015b6:	4619      	mov	r1, r3
 80015b8:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_TIM8_Init+0xac>)
 80015ba:	f003 fee7 	bl	800538c <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80015c4:	f000 fbf6 	bl	8001db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	3730      	adds	r7, #48	; 0x30
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000388 	.word	0x20000388
 80015d4:	40013400 	.word	0x40013400

080015d8 <MX_LPUART1_UART_Init>:

 UART_HandleTypeDef huart1;
 UART_HandleTypeDef hlpuart1;

void MX_LPUART1_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  hlpuart1.Instance = LPUART1;
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015de:	4a22      	ldr	r2, [pc, #136]	; (8001668 <MX_LPUART1_UART_Init+0x90>)
 80015e0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800160e:	4b15      	ldr	r3, [pc, #84]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800161a:	4812      	ldr	r0, [pc, #72]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 800161c:	f004 f826 	bl	800566c <HAL_UART_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8001626:	f000 fbc5 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 800162e:	f004 fdc1 	bl	80061b4 <HAL_UARTEx_SetTxFifoThreshold>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8001638:	f000 fbbc 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	4809      	ldr	r0, [pc, #36]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001640:	f004 fdf6 	bl	8006230 <HAL_UARTEx_SetRxFifoThreshold>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800164a:	f000 fbb3 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	; (8001664 <MX_LPUART1_UART_Init+0x8c>)
 8001650:	f004 fd77 	bl	8006142 <HAL_UARTEx_DisableFifoMode>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800165a:	f000 fbab 	bl	8001db4 <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000468 	.word	0x20000468
 8001668:	40008000 	.word	0x40008000

0800166c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001670:	4b22      	ldr	r3, [pc, #136]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001672:	4a23      	ldr	r2, [pc, #140]	; (8001700 <MX_USART1_UART_Init+0x94>)
 8001674:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800167c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167e:	4b1f      	ldr	r3, [pc, #124]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001680:	2200      	movs	r2, #0
 8001682:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001686:	2200      	movs	r2, #0
 8001688:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800168a:	4b1c      	ldr	r3, [pc, #112]	; (80016fc <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001690:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001692:	220c      	movs	r2, #12
 8001694:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001696:	4b19      	ldr	r3, [pc, #100]	; (80016fc <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800169c:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_USART1_UART_Init+0x90>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a8:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ae:	4b13      	ldr	r3, [pc, #76]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b4:	4811      	ldr	r0, [pc, #68]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016b6:	f003 ffd9 	bl	800566c <HAL_UART_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016c0:	f000 fb78 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c4:	2100      	movs	r1, #0
 80016c6:	480d      	ldr	r0, [pc, #52]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016c8:	f004 fd74 	bl	80061b4 <HAL_UARTEx_SetTxFifoThreshold>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016d2:	f000 fb6f 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016da:	f004 fda9 	bl	8006230 <HAL_UARTEx_SetRxFifoThreshold>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016e4:	f000 fb66 	bl	8001db4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <MX_USART1_UART_Init+0x90>)
 80016ea:	f004 fd2a 	bl	8006142 <HAL_UARTEx_DisableFifoMode>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016f4:	f000 fb5e 	bl	8001db4 <Error_Handler>
  }

}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200003d4 	.word	0x200003d4
 8001700:	40013800 	.word	0x40013800

08001704 <L298N_update_pwm>:

#include "L298N_driver.h"
#include "timers_configuration.h"

void L298N_update_pwm(L298N_driver* L298_driver, uint8_t pwm_count)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	460b      	mov	r3, r1
 800170e:	70fb      	strb	r3, [r7, #3]
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, pwm_count);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d105      	bne.n	8001724 <L298N_update_pwm+0x20>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	78fa      	ldrb	r2, [r7, #3]
 8001720:	635a      	str	r2, [r3, #52]	; 0x34

}
 8001722:	e02c      	b.n	800177e <L298N_update_pwm+0x7a>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, pwm_count);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2b04      	cmp	r3, #4
 800172a:	d105      	bne.n	8001738 <L298N_update_pwm+0x34>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001736:	e022      	b.n	800177e <L298N_update_pwm+0x7a>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, pwm_count);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b08      	cmp	r3, #8
 800173e:	d105      	bne.n	800174c <L298N_update_pwm+0x48>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800174a:	e018      	b.n	800177e <L298N_update_pwm+0x7a>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, pwm_count);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d105      	bne.n	8001760 <L298N_update_pwm+0x5c>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800175e:	e00e      	b.n	800177e <L298N_update_pwm+0x7a>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, pwm_count);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b10      	cmp	r3, #16
 8001766:	d105      	bne.n	8001774 <L298N_update_pwm+0x70>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	78fb      	ldrb	r3, [r7, #3]
 8001770:	6493      	str	r3, [r2, #72]	; 0x48
}
 8001772:	e004      	b.n	800177e <L298N_update_pwm+0x7a>
	__HAL_TIM_SetCompare(L298_driver->pwm_timer, L298_driver->pwm_channel, pwm_count);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	78fb      	ldrb	r3, [r7, #3]
 800177c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr

0800178a <L298N_set_input_configuration>:


void L298N_set_input_configuration(L298N_driver* L298_driver, E_L298N_MODE l298n_mode)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b082      	sub	sp, #8
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
 8001792:	460b      	mov	r3, r1
 8001794:	70fb      	strb	r3, [r7, #3]

	if(l298n_mode == BACKWARD)
 8001796:	78fb      	ldrb	r3, [r7, #3]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d110      	bne.n	80017be <L298N_set_input_configuration+0x34>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_SET);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6898      	ldr	r0, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	899b      	ldrh	r3, [r3, #12]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4619      	mov	r1, r3
 80017a8:	f001 f94c 	bl	8002a44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6918      	ldr	r0, [r3, #16]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	8a9b      	ldrh	r3, [r3, #20]
 80017b4:	2200      	movs	r2, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	f001 f944 	bl	8002a44 <HAL_GPIO_WritePin>
	{
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
	}

}
 80017bc:	e026      	b.n	800180c <L298N_set_input_configuration+0x82>
	}else if(l298n_mode == FORWARD)
 80017be:	78fb      	ldrb	r3, [r7, #3]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d110      	bne.n	80017e6 <L298N_set_input_configuration+0x5c>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6898      	ldr	r0, [r3, #8]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	899b      	ldrh	r3, [r3, #12]
 80017cc:	2200      	movs	r2, #0
 80017ce:	4619      	mov	r1, r3
 80017d0:	f001 f938 	bl	8002a44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_SET);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6918      	ldr	r0, [r3, #16]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	8a9b      	ldrh	r3, [r3, #20]
 80017dc:	2201      	movs	r2, #1
 80017de:	4619      	mov	r1, r3
 80017e0:	f001 f930 	bl	8002a44 <HAL_GPIO_WritePin>
}
 80017e4:	e012      	b.n	800180c <L298N_set_input_configuration+0x82>
	else if(l298n_mode == STOP)
 80017e6:	78fb      	ldrb	r3, [r7, #3]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d10f      	bne.n	800180c <L298N_set_input_configuration+0x82>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_1, L298_driver->GPIO_Pin_1, GPIO_PIN_RESET);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6898      	ldr	r0, [r3, #8]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	899b      	ldrh	r3, [r3, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	4619      	mov	r1, r3
 80017f8:	f001 f924 	bl	8002a44 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(L298_driver->GPIOx_2, L298_driver->GPIO_Pin_2, GPIO_PIN_RESET);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6918      	ldr	r0, [r3, #16]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	8a9b      	ldrh	r3, [r3, #20]
 8001804:	2200      	movs	r2, #0
 8001806:	4619      	mov	r1, r3
 8001808:	f001 f91c 	bl	8002a44 <HAL_GPIO_WritePin>
}
 800180c:	bf00      	nop
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <update_encoder_info>:
 *      Author: pawel
 */

#include "encoder_driver.h"

void update_encoder_info(EncoderInfo* encoder_info){
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

	encoder_info->last_counter_value = encoder_info->counter_value;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	889a      	ldrh	r2, [r3, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	80da      	strh	r2, [r3, #6]
	encoder_info->counter_value = __HAL_TIM_GET_COUNTER(encoder_info->encoder_timer);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182c:	b29a      	uxth	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	809a      	strh	r2, [r3, #4]

}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <init_motor>:
#include "timers_configuration.h"
#include "engine_features.h"


void init_motor(MotorInfo *motor, TIM_HandleTypeDef *updater_tim, EncoderInfo *enc_inf_param, PIDController *pid_controller_, L298N_driver *L298N_)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	603b      	str	r3, [r7, #0]
	motor->engine_updater_tim = updater_tim;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	61da      	str	r2, [r3, #28]
	motor->encoder_info = enc_inf_param;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	687a      	ldr	r2, [r7, #4]
 8001856:	619a      	str	r2, [r3, #24]
	motor->measured_velocity = 0;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
	motor->set_velocity = 0;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	605a      	str	r2, [r3, #4]
	motor->L298N_driver = L298N_;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	621a      	str	r2, [r3, #32]
	motor->pid_controller = pid_controller_;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	60da      	str	r2, [r3, #12]

}
 8001874:	bf00      	nop
 8001876:	3714      	adds	r7, #20
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <regulate_velocity>:


void regulate_velocity(MotorInfo *motor_info)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
	int pwm_value = pid_calculate(motor_info->pid_controller, motor_info->set_velocity, motor_info->measured_velocity);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	ed93 7a00 	vldr	s14, [r3]
 8001898:	eef0 0a47 	vmov.f32	s1, s14
 800189c:	eeb0 0a67 	vmov.f32	s0, s15
 80018a0:	4610      	mov	r0, r2
 80018a2:	f000 f8fe 	bl	8001aa2 <pid_calculate>
 80018a6:	60f8      	str	r0, [r7, #12]
	motor_info->current_PWM = saturate_pwm(pwm_value);
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f810 	bl	80018ce <saturate_pwm>
 80018ae:	4603      	mov	r3, r0
 80018b0:	461a      	mov	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	721a      	strb	r2, [r3, #8]
	L298N_update_pwm(motor_info->L298N_driver, motor_info->current_PWM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a1a      	ldr	r2, [r3, #32]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7a1b      	ldrb	r3, [r3, #8]
 80018be:	4619      	mov	r1, r3
 80018c0:	4610      	mov	r0, r2
 80018c2:	f7ff ff1f 	bl	8001704 <L298N_update_pwm>

}
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <saturate_pwm>:

uint8_t saturate_pwm(int pwm_value){
 80018ce:	b480      	push	{r7}
 80018d0:	b083      	sub	sp, #12
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]


	if (pwm_value < 0){
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da02      	bge.n	80018e2 <saturate_pwm+0x14>
		pwm_value = 0;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	e004      	b.n	80018ec <saturate_pwm+0x1e>
	}else if(pwm_value > 100){
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b64      	cmp	r3, #100	; 0x64
 80018e6:	dd01      	ble.n	80018ec <saturate_pwm+0x1e>
		pwm_value = 100;
 80018e8:	2364      	movs	r3, #100	; 0x64
 80018ea:	607b      	str	r3, [r7, #4]
	}
	return (uint8_t)pwm_value;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	b2db      	uxtb	r3, r3

}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <update_position>:

void update_position(MotorInfo* eng_info)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]

	eng_info->last_position = eng_info->position;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691a      	ldr	r2, [r3, #16]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	615a      	str	r2, [r3, #20]
	EncoderInfo* encoder_info = eng_info->encoder_info;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	61bb      	str	r3, [r7, #24]
	update_encoder_info(encoder_info);
 8001912:	69b8      	ldr	r0, [r7, #24]
 8001914:	f7ff ff7e 	bl	8001814 <update_encoder_info>
	int16_t encoder_diff = encoder_info->counter_value - encoder_info->last_counter_value;
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	889a      	ldrh	r2, [r3, #4]
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	88db      	ldrh	r3, [r3, #6]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	82fb      	strh	r3, [r7, #22]
	int16_t position_change = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	83fb      	strh	r3, [r7, #30]
	//encoder increase
	if (encoder_diff > 0){
 800192a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800192e:	2b00      	cmp	r3, #0
 8001930:	dd1f      	ble.n	8001972 <update_position+0x76>

		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0310 	and.w	r3, r3, #16
 800193e:	2b10      	cmp	r3, #16
 8001940:	d114      	bne.n	800196c <update_position+0x70>

			uint16_t postreload_count = abs(encoder_info->counter_value - __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer));
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	889b      	ldrh	r3, [r3, #4]
 8001946:	461a      	mov	r2, r3
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	bfb8      	it	lt
 8001956:	425b      	neglt	r3, r3
 8001958:	81fb      	strh	r3, [r7, #14]
			position_change = -(encoder_info->last_counter_value + postreload_count); //- because its decreasing
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	88da      	ldrh	r2, [r3, #6]
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	4413      	add	r3, r2
 8001962:	b29b      	uxth	r3, r3
 8001964:	425b      	negs	r3, r3
 8001966:	b29b      	uxth	r3, r3
 8001968:	83fb      	strh	r3, [r7, #30]
 800196a:	e023      	b.n	80019b4 <update_position+0xb8>

		}else{
			position_change = encoder_diff;
 800196c:	8afb      	ldrh	r3, [r7, #22]
 800196e:	83fb      	strh	r3, [r7, #30]
 8001970:	e020      	b.n	80019b4 <update_position+0xb8>
		}
	}else if(encoder_diff < 0) //encoder decrease
 8001972:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001976:	2b00      	cmp	r3, #0
 8001978:	da1c      	bge.n	80019b4 <update_position+0xb8>
	{
		if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder_info->encoder_timer)){
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b10      	cmp	r3, #16
 8001988:	d012      	beq.n	80019b0 <update_position+0xb4>

			int16_t postreload_count = encoder_info->counter_value;
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	889b      	ldrh	r3, [r3, #4]
 800198e:	82bb      	strh	r3, [r7, #20]
			int16_t prereload_count = __HAL_TIM_GET_AUTORELOAD(encoder_info->encoder_timer) - encoder_info->last_counter_value;
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	b29a      	uxth	r2, r3
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	88db      	ldrh	r3, [r3, #6]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	827b      	strh	r3, [r7, #18]
			int16_t position_change = postreload_count + prereload_count;
 80019a4:	8aba      	ldrh	r2, [r7, #20]
 80019a6:	8a7b      	ldrh	r3, [r7, #18]
 80019a8:	4413      	add	r3, r2
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	823b      	strh	r3, [r7, #16]
 80019ae:	e001      	b.n	80019b4 <update_position+0xb8>

		}else{
			position_change = encoder_diff;
 80019b0:	8afb      	ldrh	r3, [r7, #22]
 80019b2:	83fb      	strh	r3, [r7, #30]
		}
	}

	float position_change_rad = convert_to_radians(position_change);
 80019b4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 f905 	bl	8001bc8 <convert_to_radians>
 80019be:	ed87 0a02 	vstr	s0, [r7, #8]
	eng_info->position = eng_info->last_position - position_change_rad;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	ed93 7a05 	vldr	s14, [r3, #20]
 80019c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80019cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edc3 7a04 	vstr	s15, [r3, #16]

}
 80019d6:	bf00      	nop
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <set_velocity>:

void set_velocity(MotorInfo *motor, float velocity)
{
 80019de:	b480      	push	{r7}
 80019e0:	b083      	sub	sp, #12
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	ed87 0a00 	vstr	s0, [r7]
	motor->set_velocity = velocity;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	605a      	str	r2, [r3, #4]
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <update_measured_velocity>:

void update_measured_velocity(MotorInfo* eng_info)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	float rotary_displacement_ = rotary_displacement(eng_info);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f816 	bl	8001a36 <rotary_displacement>
 8001a0a:	ed87 0a03 	vstr	s0, [r7, #12]
	float updater_timer_periods = CountPeriodS(eng_info->engine_updater_tim);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	69db      	ldr	r3, [r3, #28]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f90c 	bl	8001c30 <CountPeriodS>
 8001a18:	ed87 0a02 	vstr	s0, [r7, #8]

	eng_info->measured_velocity = (float)rotary_displacement_ /updater_timer_periods;
 8001a1c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001a20:	ed97 7a02 	vldr	s14, [r7, #8]
 8001a24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edc3 7a00 	vstr	s15, [r3]

}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <rotary_displacement>:


float rotary_displacement(MotorInfo* eng_info){
 8001a36:	b480      	push	{r7}
 8001a38:	b083      	sub	sp, #12
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

	return eng_info->position - eng_info->last_position;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <pid_init>:


#include "pid_controller.h"

void pid_init(PIDController *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6178      	str	r0, [r7, #20]
 8001a64:	ed87 0a04 	vstr	s0, [r7, #16]
 8001a68:	edc7 0a03 	vstr	s1, [r7, #12]
 8001a6c:	ed87 1a02 	vstr	s2, [r7, #8]
 8001a70:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	615a      	str	r2, [r3, #20]
}
 8001a96:	bf00      	nop
 8001a98:	371c      	adds	r7, #28
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <pid_calculate>:
	pid_data->previous_error = 0;
}


int pid_calculate(PIDController *pid_data, float setpoint, float process_variable)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b089      	sub	sp, #36	; 0x24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	ed87 0a02 	vstr	s0, [r7, #8]
 8001aae:	edc7 0a01 	vstr	s1, [r7, #4]
	float error;
	float p_term, i_term, d_term;


	error = setpoint - process_variable;
 8001ab2:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ab6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001abe:	edc7 7a06 	vstr	s15, [r7, #24]
	pid_data->total_error += error;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ace:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ad2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ad6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ada:	ee17 2a90 	vmov	r2, s15
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ae8:	ed97 7a06 	vldr	s14, [r7, #24]
 8001aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af0:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	ed93 7a03 	vldr	s14, [r3, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0a:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	ee07 3a90 	vmov	s15, r3
 8001b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b20:	edd7 6a06 	vldr	s13, [r7, #24]
 8001b24:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b2c:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	db08      	blt.n	8001b5c <pid_calculate+0xba>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	ee07 3a90 	vmov	s15, r3
 8001b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b56:	edc7 7a07 	vstr	s15, [r7, #28]
 8001b5a:	e016      	b.n	8001b8a <pid_calculate+0xe8>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	425b      	negs	r3, r3
 8001b62:	ee07 3a90 	vmov	s15, r3
 8001b66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b6a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b76:	d808      	bhi.n	8001b8a <pid_calculate+0xe8>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	425b      	negs	r3, r3
 8001b7e:	ee07 3a90 	vmov	s15, r3
 8001b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b86:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;
 8001b8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b92:	ee17 2a90 	vmov	r2, s15
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);
 8001b9a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ba2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ba6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001baa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb2:	ee17 3a90 	vmov	r3, s15
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3724      	adds	r7, #36	; 0x24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	0000      	movs	r0, r0
 8001bc4:	0000      	movs	r0, r0
	...

08001bc8 <convert_to_radians>:
 *      Author: pawel
 */

#include "engine_features.h"

float convert_to_radians(int32_t enc_position){
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

	return 2* M_PI * (float)enc_position / (float) ONE_ROTATION_TICKS;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	ee07 3a90 	vmov	s15, r3
 8001bd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bda:	ee17 0a90 	vmov	r0, s15
 8001bde:	f7fe fcdb 	bl	8000598 <__aeabi_f2d>
 8001be2:	a30f      	add	r3, pc, #60	; (adr r3, 8001c20 <convert_to_radians+0x58>)
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	f7fe fd2e 	bl	8000648 <__aeabi_dmul>
 8001bec:	4602      	mov	r2, r0
 8001bee:	460b      	mov	r3, r1
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	a30c      	add	r3, pc, #48	; (adr r3, 8001c28 <convert_to_radians+0x60>)
 8001bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfa:	f7fe fe4f 	bl	800089c <__aeabi_ddiv>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	460b      	mov	r3, r1
 8001c02:	4610      	mov	r0, r2
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7fe fff7 	bl	8000bf8 <__aeabi_d2f>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	ee07 3a90 	vmov	s15, r3

}
 8001c10:	eeb0 0a67 	vmov.f32	s0, s15
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	f3af 8000 	nop.w
 8001c20:	54442d18 	.word	0x54442d18
 8001c24:	401921fb 	.word	0x401921fb
 8001c28:	00000000 	.word	0x00000000
 8001c2c:	40ae6400 	.word	0x40ae6400

08001c30 <CountPeriodS>:
 */

#include "timers_feature.h"

// Funkcja obliczająca okres w sekundach
float CountPeriodS(TIM_HandleTypeDef *htim) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
    uint32_t prescaler = htim->Init.Prescaler;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	617b      	str	r3, [r7, #20]
    uint32_t period = htim->Init.Period;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	613b      	str	r3, [r7, #16]
    uint32_t clock_freq = HAL_RCC_GetHCLKFreq();
 8001c44:	f001 fc7a 	bl	800353c <HAL_RCC_GetHCLKFreq>
 8001c48:	60f8      	str	r0, [r7, #12]

    float period_seconds = (float)(prescaler * period) / (float)clock_freq;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	fb02 f303 	mul.w	r3, r2, r3
 8001c52:	ee07 3a90 	vmov	s15, r3
 8001c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c68:	edc7 7a02 	vstr	s15, [r7, #8]

    return period_seconds;
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	ee07 3a90 	vmov	s15, r3
}
 8001c72:	eeb0 0a67 	vmov.f32	s0, s15
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <main>:
};
int period;
float updater_timer_periods;

int main(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af02      	add	r7, sp, #8

  HAL_Init();
 8001c82:	f000 fc58 	bl	8002536 <HAL_Init>
  SystemClock_Config();
 8001c86:	f7ff f985 	bl	8000f94 <SystemClock_Config>
  MX_GPIO_Init();
 8001c8a:	f7ff f9cf 	bl	800102c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001c8e:	f7ff fca3 	bl	80015d8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8001c92:	f7ff fceb 	bl	800166c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001c96:	f7ff fa37 	bl	8001108 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001c9a:	f7ff fb0b 	bl	80012b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001c9e:	f7ff fb5f 	bl	8001360 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001ca2:	f7ff fbb3 	bl	800140c <MX_TIM5_Init>
  MX_TIM7_Init();
 8001ca6:	f7ff fc07 	bl	80014b8 <MX_TIM7_Init>
  MX_TIM8_Init();
 8001caa:	f7ff fc3b 	bl	8001524 <MX_TIM8_Init>

  pid_init(&pid_controller, MOTOR_Kp , MOTOR_Ki, MOTOR_Kd, MOTOR_ANTI_WINDUP);
 8001cae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb2:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8001d4c <main+0xd0>
 8001cb6:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001cba:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001d50 <main+0xd4>
 8001cbe:	4825      	ldr	r0, [pc, #148]	; (8001d54 <main+0xd8>)
 8001cc0:	f7ff fecc 	bl	8001a5c <pid_init>
  init_motor(&motor, &htim7, &encoder_info, &pid_controller, &L298N_left_back);
 8001cc4:	4b24      	ldr	r3, [pc, #144]	; (8001d58 <main+0xdc>)
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <main+0xd8>)
 8001cca:	4a24      	ldr	r2, [pc, #144]	; (8001d5c <main+0xe0>)
 8001ccc:	4924      	ldr	r1, [pc, #144]	; (8001d60 <main+0xe4>)
 8001cce:	4825      	ldr	r0, [pc, #148]	; (8001d64 <main+0xe8>)
 8001cd0:	f7ff fdb5 	bl	800183e <init_motor>

  static __IO uint16_t pulseCounter = 0;
  static __IO uint16_t previous_pulseCounter = 0;


  HAL_TIM_Base_Start_IT(&htim7);
 8001cd4:	4822      	ldr	r0, [pc, #136]	; (8001d60 <main+0xe4>)
 8001cd6:	f001 fff7 	bl	8003cc8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim8);
 8001cda:	4823      	ldr	r0, [pc, #140]	; (8001d68 <main+0xec>)
 8001cdc:	f001 ff84 	bl	8003be8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4822      	ldr	r0, [pc, #136]	; (8001d6c <main+0xf0>)
 8001ce4:	f002 f8ca 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001ce8:	2104      	movs	r1, #4
 8001cea:	4820      	ldr	r0, [pc, #128]	; (8001d6c <main+0xf0>)
 8001cec:	f002 f8c6 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001cf0:	2108      	movs	r1, #8
 8001cf2:	481e      	ldr	r0, [pc, #120]	; (8001d6c <main+0xf0>)
 8001cf4:	f002 f8c2 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001cf8:	210c      	movs	r1, #12
 8001cfa:	481c      	ldr	r0, [pc, #112]	; (8001d6c <main+0xf0>)
 8001cfc:	f002 f8be 	bl	8003e7c <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001d00:	213c      	movs	r1, #60	; 0x3c
 8001d02:	481b      	ldr	r0, [pc, #108]	; (8001d70 <main+0xf4>)
 8001d04:	f002 fa72 	bl	80041ec <HAL_TIM_Encoder_Start>


  L298N_set_input_configuration(&L298N_left_back, FORWARD);
 8001d08:	2101      	movs	r1, #1
 8001d0a:	4813      	ldr	r0, [pc, #76]	; (8001d58 <main+0xdc>)
 8001d0c:	f7ff fd3d 	bl	800178a <L298N_set_input_configuration>
  set_velocity(&motor, 4);
 8001d10:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <main+0xe8>)
 8001d16:	f7ff fe62 	bl	80019de <set_velocity>

  TIM1->CCR2 = 40;
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <main+0xf8>)
 8001d1c:	2228      	movs	r2, #40	; 0x28
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 40;
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <main+0xf8>)
 8001d22:	2228      	movs	r2, #40	; 0x28
 8001d24:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 40;
 8001d26:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <main+0xf8>)
 8001d28:	2228      	movs	r2, #40	; 0x28
 8001d2a:	641a      	str	r2, [r3, #64]	; 0x40


  timer_counter = 1;
 8001d2c:	4b12      	ldr	r3, [pc, #72]	; (8001d78 <main+0xfc>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 2 */

  static int diff;
  static int received_data_int;

  period = CountPeriodS(&htim7);
 8001d32:	480b      	ldr	r0, [pc, #44]	; (8001d60 <main+0xe4>)
 8001d34:	f7ff ff7c 	bl	8001c30 <CountPeriodS>
 8001d38:	eef0 7a40 	vmov.f32	s15, s0
 8001d3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d40:	ee17 2a90 	vmov	r2, s15
 8001d44:	4b0d      	ldr	r3, [pc, #52]	; (8001d7c <main+0x100>)
 8001d46:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8001d48:	e7fe      	b.n	8001d48 <main+0xcc>
 8001d4a:	bf00      	nop
 8001d4c:	00000000 	.word	0x00000000
 8001d50:	3f19999a 	.word	0x3f19999a
 8001d54:	20000524 	.word	0x20000524
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000000 	.word	0x20000000
 8001d60:	2000033c 	.word	0x2000033c
 8001d64:	20000500 	.word	0x20000500
 8001d68:	20000388 	.word	0x20000388
 8001d6c:	2000020c 	.word	0x2000020c
 8001d70:	200002a4 	.word	0x200002a4
 8001d74:	40012c00 	.word	0x40012c00
 8001d78:	200004fc 	.word	0x200004fc
 8001d7c:	2000053c 	.word	0x2000053c

08001d80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]

    if (htim->Instance == (TIM_TypeDef *)motor.engine_updater_tim->Instance) {
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b08      	ldr	r3, [pc, #32]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d108      	bne.n	8001da8 <HAL_TIM_PeriodElapsedCallback+0x28>

    	update_position(&motor);
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d98:	f7ff fdb0 	bl	80018fc <update_position>
    	update_measured_velocity(&motor);
 8001d9c:	4804      	ldr	r0, [pc, #16]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001d9e:	f7ff fe2d 	bl	80019fc <update_measured_velocity>
    	regulate_velocity(&motor);
 8001da2:	4803      	ldr	r0, [pc, #12]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001da4:	f7ff fd6c 	bl	8001880 <regulate_velocity>
    }



//  /* USER CODE END Callback 1 */
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	20000500 	.word	0x20000500

08001db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
}
 8001dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dbc:	e7fe      	b.n	8001dbc <Error_Handler+0x8>
	...

08001dc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <HAL_MspInit+0x44>)
 8001dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dca:	4a0e      	ldr	r2, [pc, #56]	; (8001e04 <HAL_MspInit+0x44>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6613      	str	r3, [r2, #96]	; 0x60
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_MspInit+0x44>)
 8001dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_MspInit+0x44>)
 8001de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de2:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <HAL_MspInit+0x44>)
 8001de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_MspInit+0x44>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001df6:	f000 fee1 	bl	8002bbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40021000 	.word	0x40021000

08001e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b0a0      	sub	sp, #128	; 0x80
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e20:	f107 0318 	add.w	r3, r7, #24
 8001e24:	2254      	movs	r2, #84	; 0x54
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f005 f9fa 	bl	8007222 <memset>
  if(huart->Instance==LPUART1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a3d      	ldr	r2, [pc, #244]	; (8001f28 <HAL_UART_MspInit+0x120>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d137      	bne.n	8001ea8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e38:	2320      	movs	r3, #32
 8001e3a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e40:	f107 0318 	add.w	r3, r7, #24
 8001e44:	4618      	mov	r0, r3
 8001e46:	f001 fc29 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e50:	f7ff ffb0 	bl	8001db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e54:	4b35      	ldr	r3, [pc, #212]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	4a34      	ldr	r2, [pc, #208]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	4a2e      	ldr	r2, [pc, #184]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e78:	4b2c      	ldr	r3, [pc, #176]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e84:	230c      	movs	r3, #12
 8001e86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e90:	2300      	movs	r3, #0
 8001e92:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001e94:	230c      	movs	r3, #12
 8001e96:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea2:	f000 fc4d 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ea6:	e03a      	b.n	8001f1e <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a20      	ldr	r2, [pc, #128]	; (8001f30 <HAL_UART_MspInit+0x128>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d135      	bne.n	8001f1e <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eba:	f107 0318 	add.w	r3, r7, #24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f001 fbec 	bl	800369c <HAL_RCCEx_PeriphCLKConfig>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8001eca:	f7ff ff73 	bl	8001db4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ece:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed2:	4a16      	ldr	r2, [pc, #88]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	4a10      	ldr	r2, [pc, #64]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <HAL_UART_MspInit+0x124>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001efe:	2330      	movs	r3, #48	; 0x30
 8001f00:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f0e:	2307      	movs	r3, #7
 8001f10:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001f16:	4619      	mov	r1, r3
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <HAL_UART_MspInit+0x12c>)
 8001f1a:	f000 fc11 	bl	8002740 <HAL_GPIO_Init>
}
 8001f1e:	bf00      	nop
 8001f20:	3780      	adds	r7, #128	; 0x80
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40008000 	.word	0x40008000
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40013800 	.word	0x40013800
 8001f34:	48000800 	.word	0x48000800

08001f38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a16      	ldr	r2, [pc, #88]	; (8001fa0 <HAL_TIM_Base_MspInit+0x68>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d10c      	bne.n	8001f64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4e:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f54:	6613      	str	r3, [r2, #96]	; 0x60
 8001f56:	4b13      	ldr	r3, [pc, #76]	; (8001fa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f62:	e018      	b.n	8001f96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <HAL_TIM_Base_MspInit+0x70>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d113      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f72:	4a0c      	ldr	r2, [pc, #48]	; (8001fa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f74:	f043 0320 	orr.w	r3, r3, #32
 8001f78:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_TIM_Base_MspInit+0x6c>)
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_DAC_IRQn, 0, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2037      	movs	r0, #55	; 0x37
 8001f8c:	f000 fbb0 	bl	80026f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC_IRQn);
 8001f90:	2037      	movs	r0, #55	; 0x37
 8001f92:	f000 fbc7 	bl	8002724 <HAL_NVIC_EnableIRQ>
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40012c00 	.word	0x40012c00
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	40001400 	.word	0x40001400

08001fac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b090      	sub	sp, #64	; 0x40
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6c      	ldr	r2, [pc, #432]	; (800217c <HAL_TIM_Encoder_MspInit+0x1d0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d129      	bne.n	8002022 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fce:	4b6c      	ldr	r3, [pc, #432]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd2:	4a6b      	ldr	r2, [pc, #428]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001fda:	4b69      	ldr	r3, [pc, #420]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	4b66      	ldr	r3, [pc, #408]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a65      	ldr	r2, [pc, #404]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001ffe:	2350      	movs	r3, #80	; 0x50
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002002:	2302      	movs	r3, #2
 8002004:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200a:	2300      	movs	r3, #0
 800200c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800200e:	2302      	movs	r3, #2
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002012:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002016:	4619      	mov	r1, r3
 8002018:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800201c:	f000 fb90 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002020:	e0a7      	b.n	8002172 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM4)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a57      	ldr	r2, [pc, #348]	; (8002184 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d12a      	bne.n	8002082 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800202c:	4b54      	ldr	r3, [pc, #336]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4a53      	ldr	r2, [pc, #332]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6593      	str	r3, [r2, #88]	; 0x58
 8002038:	4b51      	ldr	r3, [pc, #324]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800203a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	623b      	str	r3, [r7, #32]
 8002042:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	4b4e      	ldr	r3, [pc, #312]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002048:	4a4d      	ldr	r2, [pc, #308]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002050:	4b4b      	ldr	r3, [pc, #300]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800205c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 800206e:	230a      	movs	r3, #10
 8002070:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002076:	4619      	mov	r1, r3
 8002078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207c:	f000 fb60 	bl	8002740 <HAL_GPIO_Init>
}
 8002080:	e077      	b.n	8002172 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM5)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a40      	ldr	r2, [pc, #256]	; (8002188 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d145      	bne.n	8002118 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800208c:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a3b      	ldr	r2, [pc, #236]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	61bb      	str	r3, [r7, #24]
 80020a2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a8:	4a35      	ldr	r2, [pc, #212]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020b0:	4b33      	ldr	r3, [pc, #204]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b4:	f003 0302 	and.w	r3, r3, #2
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020bc:	4b30      	ldr	r3, [pc, #192]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c0:	4a2f      	ldr	r2, [pc, #188]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c8:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80020ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020d4:	2304      	movs	r3, #4
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d8:	2302      	movs	r3, #2
 80020da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e0:	2300      	movs	r3, #0
 80020e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80020e4:	2302      	movs	r3, #2
 80020e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020ec:	4619      	mov	r1, r3
 80020ee:	4827      	ldr	r0, [pc, #156]	; (800218c <HAL_TIM_Encoder_MspInit+0x1e0>)
 80020f0:	f000 fb26 	bl	8002740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80020f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM5;
 8002106:	2301      	movs	r3, #1
 8002108:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800210a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210e:	4619      	mov	r1, r3
 8002110:	481f      	ldr	r0, [pc, #124]	; (8002190 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8002112:	f000 fb15 	bl	8002740 <HAL_GPIO_Init>
}
 8002116:	e02c      	b.n	8002172 <HAL_TIM_Encoder_MspInit+0x1c6>
  else if(htim_encoder->Instance==TIM8)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a1d      	ldr	r2, [pc, #116]	; (8002194 <HAL_TIM_Encoder_MspInit+0x1e8>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d127      	bne.n	8002172 <HAL_TIM_Encoder_MspInit+0x1c6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002122:	4b17      	ldr	r3, [pc, #92]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002126:	4a16      	ldr	r2, [pc, #88]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800212c:	6613      	str	r3, [r2, #96]	; 0x60
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002130:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002132:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	4a10      	ldr	r2, [pc, #64]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002152:	23c0      	movs	r3, #192	; 0xc0
 8002154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002156:	2302      	movs	r3, #2
 8002158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	2300      	movs	r3, #0
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215e:	2300      	movs	r3, #0
 8002160:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002162:	2304      	movs	r3, #4
 8002164:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800216a:	4619      	mov	r1, r3
 800216c:	4808      	ldr	r0, [pc, #32]	; (8002190 <HAL_TIM_Encoder_MspInit+0x1e4>)
 800216e:	f000 fae7 	bl	8002740 <HAL_GPIO_Init>
}
 8002172:	bf00      	nop
 8002174:	3740      	adds	r7, #64	; 0x40
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40000400 	.word	0x40000400
 8002180:	40021000 	.word	0x40021000
 8002184:	40000800 	.word	0x40000800
 8002188:	40000c00 	.word	0x40000c00
 800218c:	48000400 	.word	0x48000400
 8002190:	48000800 	.word	0x48000800
 8002194:	40013400 	.word	0x40013400

08002198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 030c 	add.w	r3, r7, #12
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a11      	ldr	r2, [pc, #68]	; (80021fc <HAL_TIM_MspPostInit+0x64>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d11b      	bne.n	80021f2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_TIM_MspPostInit+0x68>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_TIM_MspPostInit+0x68>)
 80021c0:	f043 0304 	orr.w	r3, r3, #4
 80021c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <HAL_TIM_MspPostInit+0x68>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f003 0304 	and.w	r3, r3, #4
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80021d2:	230f      	movs	r3, #15
 80021d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d6:	2302      	movs	r3, #2
 80021d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021e2:	2302      	movs	r3, #2
 80021e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021e6:	f107 030c 	add.w	r3, r7, #12
 80021ea:	4619      	mov	r1, r3
 80021ec:	4805      	ldr	r0, [pc, #20]	; (8002204 <HAL_TIM_MspPostInit+0x6c>)
 80021ee:	f000 faa7 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021f2:	bf00      	nop
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40012c00 	.word	0x40012c00
 8002200:	40021000 	.word	0x40021000
 8002204:	48000800 	.word	0x48000800

08002208 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08c      	sub	sp, #48	; 0x30
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002210:	2300      	movs	r3, #0
 8002212:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002218:	4b2c      	ldr	r3, [pc, #176]	; (80022cc <HAL_InitTick+0xc4>)
 800221a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221c:	4a2b      	ldr	r2, [pc, #172]	; (80022cc <HAL_InitTick+0xc4>)
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	6593      	str	r3, [r2, #88]	; 0x58
 8002224:	4b29      	ldr	r3, [pc, #164]	; (80022cc <HAL_InitTick+0xc4>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002230:	f107 020c 	add.w	r2, r7, #12
 8002234:	f107 0310 	add.w	r3, r7, #16
 8002238:	4611      	mov	r1, r2
 800223a:	4618      	mov	r0, r3
 800223c:	f001 f9b6 	bl	80035ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002240:	f001 f988 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8002244:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002248:	4a21      	ldr	r2, [pc, #132]	; (80022d0 <HAL_InitTick+0xc8>)
 800224a:	fba2 2303 	umull	r2, r3, r2, r3
 800224e:	0c9b      	lsrs	r3, r3, #18
 8002250:	3b01      	subs	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <HAL_InitTick+0xcc>)
 8002256:	4a20      	ldr	r2, [pc, #128]	; (80022d8 <HAL_InitTick+0xd0>)
 8002258:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <HAL_InitTick+0xcc>)
 800225c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002260:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002262:	4a1c      	ldr	r2, [pc, #112]	; (80022d4 <HAL_InitTick+0xcc>)
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_InitTick+0xcc>)
 800226a:	2200      	movs	r2, #0
 800226c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <HAL_InitTick+0xcc>)
 8002270:	2200      	movs	r2, #0
 8002272:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002274:	4817      	ldr	r0, [pc, #92]	; (80022d4 <HAL_InitTick+0xcc>)
 8002276:	f001 fc5f 	bl	8003b38 <HAL_TIM_Base_Init>
 800227a:	4603      	mov	r3, r0
 800227c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8002280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002284:	2b00      	cmp	r3, #0
 8002286:	d11b      	bne.n	80022c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002288:	4812      	ldr	r0, [pc, #72]	; (80022d4 <HAL_InitTick+0xcc>)
 800228a:	f001 fd1d 	bl	8003cc8 <HAL_TIM_Base_Start_IT>
 800228e:	4603      	mov	r3, r0
 8002290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8002294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002298:	2b00      	cmp	r3, #0
 800229a:	d111      	bne.n	80022c0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800229c:	2036      	movs	r0, #54	; 0x36
 800229e:	f000 fa41 	bl	8002724 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b0f      	cmp	r3, #15
 80022a6:	d808      	bhi.n	80022ba <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80022a8:	2200      	movs	r2, #0
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	2036      	movs	r0, #54	; 0x36
 80022ae:	f000 fa1f 	bl	80026f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <HAL_InitTick+0xd4>)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e002      	b.n	80022c0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80022c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3730      	adds	r7, #48	; 0x30
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	431bde83 	.word	0x431bde83
 80022d4:	20000540 	.word	0x20000540
 80022d8:	40001000 	.word	0x40001000
 80022dc:	20000024 	.word	0x20000024

080022e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <NMI_Handler+0x4>

080022e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ea:	e7fe      	b.n	80022ea <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	e7fe      	b.n	80022f0 <MemManage_Handler+0x4>

080022f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f6:	e7fe      	b.n	80022f6 <BusFault_Handler+0x4>

080022f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <UsageFault_Handler+0x4>

080022fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022fe:	b480      	push	{r7}
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM6_DAC_IRQHandler+0x10>)
 8002312:	f001 fff9 	bl	8004308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	20000540 	.word	0x20000540

08002320 <TIM7_DAC_IRQHandler>:

void TIM7_DAC_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_DAC_IRQn 0 */

  /* USER CODE END TIM7_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <TIM7_DAC_IRQHandler+0x10>)
 8002326:	f001 ffef 	bl	8004308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC_IRQn 1 */

  /* USER CODE END TIM7_DAC_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000033c 	.word	0x2000033c

08002334 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
	return 1;
 8002338:	2301      	movs	r3, #1
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_kill>:

int _kill(int pid, int sig)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800234e:	f004 ffbb 	bl	80072c8 <__errno>
 8002352:	4603      	mov	r3, r0
 8002354:	2216      	movs	r2, #22
 8002356:	601a      	str	r2, [r3, #0]
	return -1;
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_exit>:

void _exit (int status)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800236c:	f04f 31ff 	mov.w	r1, #4294967295
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ffe7 	bl	8002344 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002376:	e7fe      	b.n	8002376 <_exit+0x12>

08002378 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	e00a      	b.n	80023a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800238a:	f3af 8000 	nop.w
 800238e:	4601      	mov	r1, r0
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	60ba      	str	r2, [r7, #8]
 8002396:	b2ca      	uxtb	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	3301      	adds	r3, #1
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbf0      	blt.n	800238a <_read+0x12>
	}

return len;
 80023a8:	687b      	ldr	r3, [r7, #4]
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b086      	sub	sp, #24
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	60f8      	str	r0, [r7, #12]
 80023ba:	60b9      	str	r1, [r7, #8]
 80023bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	2300      	movs	r3, #0
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	e009      	b.n	80023d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	60ba      	str	r2, [r7, #8]
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	617b      	str	r3, [r7, #20]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	429a      	cmp	r2, r3
 80023de:	dbf1      	blt.n	80023c4 <_write+0x12>
	}
	return len;
 80023e0:	687b      	ldr	r3, [r7, #4]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <_close>:

int _close(int file)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b083      	sub	sp, #12
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
	return -1;
 80023f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002412:	605a      	str	r2, [r3, #4]
	return 0;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <_isatty>:

int _isatty(int file)
{
 8002422:	b480      	push	{r7}
 8002424:	b083      	sub	sp, #12
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
	return 1;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800245c:	4a14      	ldr	r2, [pc, #80]	; (80024b0 <_sbrk+0x5c>)
 800245e:	4b15      	ldr	r3, [pc, #84]	; (80024b4 <_sbrk+0x60>)
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <_sbrk+0x64>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d102      	bne.n	8002476 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002470:	4b11      	ldr	r3, [pc, #68]	; (80024b8 <_sbrk+0x64>)
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <_sbrk+0x68>)
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002476:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <_sbrk+0x64>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	429a      	cmp	r2, r3
 8002482:	d207      	bcs.n	8002494 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002484:	f004 ff20 	bl	80072c8 <__errno>
 8002488:	4603      	mov	r3, r0
 800248a:	220c      	movs	r2, #12
 800248c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	e009      	b.n	80024a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002494:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <_sbrk+0x64>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <_sbrk+0x64>)
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4413      	add	r3, r2
 80024a2:	4a05      	ldr	r2, [pc, #20]	; (80024b8 <_sbrk+0x64>)
 80024a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	20020000 	.word	0x20020000
 80024b4:	00000400 	.word	0x00000400
 80024b8:	2000058c 	.word	0x2000058c
 80024bc:	20000770 	.word	0x20000770

080024c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <SystemInit+0x20>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <SystemInit+0x20>)
 80024cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024e6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024e8:	f7ff ffea 	bl	80024c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024ec:	480c      	ldr	r0, [pc, #48]	; (8002520 <LoopForever+0x6>)
  ldr r1, =_edata
 80024ee:	490d      	ldr	r1, [pc, #52]	; (8002524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <LoopForever+0xe>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80024f4:	e002      	b.n	80024fc <LoopCopyDataInit>

080024f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024fa:	3304      	adds	r3, #4

080024fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002500:	d3f9      	bcc.n	80024f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002504:	4c0a      	ldr	r4, [pc, #40]	; (8002530 <LoopForever+0x16>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002508:	e001      	b.n	800250e <LoopFillZerobss>

0800250a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800250a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800250c:	3204      	adds	r2, #4

0800250e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800250e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002510:	d3fb      	bcc.n	800250a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002512:	f004 fedf 	bl	80072d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002516:	f7ff fbb1 	bl	8001c7c <main>

0800251a <LoopForever>:

LoopForever:
    b LoopForever
 800251a:	e7fe      	b.n	800251a <LoopForever>
  ldr   r0, =_estack
 800251c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002524:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002528:	080094a4 	.word	0x080094a4
  ldr r2, =_sbss
 800252c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002530:	2000076c 	.word	0x2000076c

08002534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC1_2_IRQHandler>

08002536 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f000 f8ca 	bl	80026da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002546:	200f      	movs	r0, #15
 8002548:	f7ff fe5e 	bl	8002208 <HAL_InitTick>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	71fb      	strb	r3, [r7, #7]
 8002556:	e001      	b.n	800255c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002558:	f7ff fc32 	bl	8001dc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800255c:	79fb      	ldrb	r3, [r7, #7]

}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return uwTick;
 800256c:	4b03      	ldr	r3, [pc, #12]	; (800257c <HAL_GetTick+0x14>)
 800256e:	681b      	ldr	r3, [r3, #0]
 }
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	20000590 	.word	0x20000590

08002580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800259c:	4013      	ands	r3, r2
 800259e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	60d3      	str	r3, [r2, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	0a1b      	lsrs	r3, r3, #8
 80025d2:	f003 0307 	and.w	r3, r3, #7
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	db0b      	blt.n	800260e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	f003 021f 	and.w	r2, r3, #31
 80025fc:	4907      	ldr	r1, [pc, #28]	; (800261c <__NVIC_EnableIRQ+0x38>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2001      	movs	r0, #1
 8002606:	fa00 f202 	lsl.w	r2, r0, r2
 800260a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800262c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0a      	blt.n	800264a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	490c      	ldr	r1, [pc, #48]	; (800266c <__NVIC_SetPriority+0x4c>)
 800263a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263e:	0112      	lsls	r2, r2, #4
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	440b      	add	r3, r1
 8002644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002648:	e00a      	b.n	8002660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4908      	ldr	r1, [pc, #32]	; (8002670 <__NVIC_SetPriority+0x50>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	3b04      	subs	r3, #4
 8002658:	0112      	lsls	r2, r2, #4
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	440b      	add	r3, r1
 800265e:	761a      	strb	r2, [r3, #24]
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	e000e100 	.word	0xe000e100
 8002670:	e000ed00 	.word	0xe000ed00

08002674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	f1c3 0307 	rsb	r3, r3, #7
 800268e:	2b04      	cmp	r3, #4
 8002690:	bf28      	it	cs
 8002692:	2304      	movcs	r3, #4
 8002694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	3304      	adds	r3, #4
 800269a:	2b06      	cmp	r3, #6
 800269c:	d902      	bls.n	80026a4 <NVIC_EncodePriority+0x30>
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3b03      	subs	r3, #3
 80026a2:	e000      	b.n	80026a6 <NVIC_EncodePriority+0x32>
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a8:	f04f 32ff 	mov.w	r2, #4294967295
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43da      	mvns	r2, r3
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	401a      	ands	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026bc:	f04f 31ff 	mov.w	r1, #4294967295
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	fa01 f303 	lsl.w	r3, r1, r3
 80026c6:	43d9      	mvns	r1, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026cc:	4313      	orrs	r3, r2
         );
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3724      	adds	r7, #36	; 0x24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026da:	b580      	push	{r7, lr}
 80026dc:	b082      	sub	sp, #8
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff ff4c 	bl	8002580 <__NVIC_SetPriorityGrouping>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
 80026fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026fe:	f7ff ff63 	bl	80025c8 <__NVIC_GetPriorityGrouping>
 8002702:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	6978      	ldr	r0, [r7, #20]
 800270a:	f7ff ffb3 	bl	8002674 <NVIC_EncodePriority>
 800270e:	4602      	mov	r2, r0
 8002710:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ff82 	bl	8002620 <__NVIC_SetPriority>
}
 800271c:	bf00      	nop
 800271e:	3718      	adds	r7, #24
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	4618      	mov	r0, r3
 8002734:	f7ff ff56 	bl	80025e4 <__NVIC_EnableIRQ>
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800274e:	e15a      	b.n	8002a06 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2101      	movs	r1, #1
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	fa01 f303 	lsl.w	r3, r1, r3
 800275c:	4013      	ands	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 814c 	beq.w	8002a00 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 0303 	and.w	r3, r3, #3
 8002770:	2b01      	cmp	r3, #1
 8002772:	d005      	beq.n	8002780 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800277c:	2b02      	cmp	r3, #2
 800277e:	d130      	bne.n	80027e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027b6:	2201      	movs	r2, #1
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	091b      	lsrs	r3, r3, #4
 80027cc:	f003 0201 	and.w	r2, r3, #1
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b03      	cmp	r3, #3
 80027ec:	d017      	beq.n	800281e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	693a      	ldr	r2, [r7, #16]
 8002802:	4013      	ands	r3, r2
 8002804:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d123      	bne.n	8002872 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002836:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	220f      	movs	r2, #15
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	6939      	ldr	r1, [r7, #16]
 800286e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	2203      	movs	r2, #3
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f000 80a6 	beq.w	8002a00 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b4:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <HAL_GPIO_Init+0x2e4>)
 80028b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b8:	4a5a      	ldr	r2, [pc, #360]	; (8002a24 <HAL_GPIO_Init+0x2e4>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	6613      	str	r3, [r2, #96]	; 0x60
 80028c0:	4b58      	ldr	r3, [pc, #352]	; (8002a24 <HAL_GPIO_Init+0x2e4>)
 80028c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028cc:	4a56      	ldr	r2, [pc, #344]	; (8002a28 <HAL_GPIO_Init+0x2e8>)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f003 0303 	and.w	r3, r3, #3
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	220f      	movs	r2, #15
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4013      	ands	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80028f6:	d01f      	beq.n	8002938 <HAL_GPIO_Init+0x1f8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a4c      	ldr	r2, [pc, #304]	; (8002a2c <HAL_GPIO_Init+0x2ec>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d019      	beq.n	8002934 <HAL_GPIO_Init+0x1f4>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a4b      	ldr	r2, [pc, #300]	; (8002a30 <HAL_GPIO_Init+0x2f0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d013      	beq.n	8002930 <HAL_GPIO_Init+0x1f0>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_GPIO_Init+0x2f4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00d      	beq.n	800292c <HAL_GPIO_Init+0x1ec>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a49      	ldr	r2, [pc, #292]	; (8002a38 <HAL_GPIO_Init+0x2f8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <HAL_GPIO_Init+0x1e8>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a48      	ldr	r2, [pc, #288]	; (8002a3c <HAL_GPIO_Init+0x2fc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d101      	bne.n	8002924 <HAL_GPIO_Init+0x1e4>
 8002920:	2305      	movs	r3, #5
 8002922:	e00a      	b.n	800293a <HAL_GPIO_Init+0x1fa>
 8002924:	2306      	movs	r3, #6
 8002926:	e008      	b.n	800293a <HAL_GPIO_Init+0x1fa>
 8002928:	2304      	movs	r3, #4
 800292a:	e006      	b.n	800293a <HAL_GPIO_Init+0x1fa>
 800292c:	2303      	movs	r3, #3
 800292e:	e004      	b.n	800293a <HAL_GPIO_Init+0x1fa>
 8002930:	2302      	movs	r3, #2
 8002932:	e002      	b.n	800293a <HAL_GPIO_Init+0x1fa>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_GPIO_Init+0x1fa>
 8002938:	2300      	movs	r3, #0
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	f002 0203 	and.w	r2, r2, #3
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	4093      	lsls	r3, r2
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800294a:	4937      	ldr	r1, [pc, #220]	; (8002a28 <HAL_GPIO_Init+0x2e8>)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	3302      	adds	r3, #2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002958:	4b39      	ldr	r3, [pc, #228]	; (8002a40 <HAL_GPIO_Init+0x300>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	43db      	mvns	r3, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4313      	orrs	r3, r2
 800297a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800297c:	4a30      	ldr	r2, [pc, #192]	; (8002a40 <HAL_GPIO_Init+0x300>)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002982:	4b2f      	ldr	r3, [pc, #188]	; (8002a40 <HAL_GPIO_Init+0x300>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80029a6:	4a26      	ldr	r2, [pc, #152]	; (8002a40 <HAL_GPIO_Init+0x300>)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80029ac:	4b24      	ldr	r3, [pc, #144]	; (8002a40 <HAL_GPIO_Init+0x300>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80029d0:	4a1b      	ldr	r2, [pc, #108]	; (8002a40 <HAL_GPIO_Init+0x300>)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_GPIO_Init+0x300>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	43db      	mvns	r3, r3
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	4013      	ands	r3, r2
 80029e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80029fa:	4a11      	ldr	r2, [pc, #68]	; (8002a40 <HAL_GPIO_Init+0x300>)
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3301      	adds	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f47f ae9d 	bne.w	8002750 <HAL_GPIO_Init+0x10>
  }
}
 8002a16:	bf00      	nop
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40010000 	.word	0x40010000
 8002a2c:	48000400 	.word	0x48000400
 8002a30:	48000800 	.word	0x48000800
 8002a34:	48000c00 	.word	0x48000c00
 8002a38:	48001000 	.word	0x48001000
 8002a3c:	48001400 	.word	0x48001400
 8002a40:	40010400 	.word	0x40010400

08002a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
 8002a50:	4613      	mov	r3, r2
 8002a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a54:	787b      	ldrb	r3, [r7, #1]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002a5a:	887a      	ldrh	r2, [r7, #2]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002a60:	e002      	b.n	8002a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002a62:	887a      	ldrh	r2, [r7, #2]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d141      	bne.n	8002b06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a82:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a8e:	d131      	bne.n	8002af4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a90:	4b47      	ldr	r3, [pc, #284]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a96:	4a46      	ldr	r2, [pc, #280]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aa0:	4b43      	ldr	r3, [pc, #268]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aa8:	4a41      	ldr	r2, [pc, #260]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002aae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ab0:	4b40      	ldr	r3, [pc, #256]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2232      	movs	r2, #50	; 0x32
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	4a3f      	ldr	r2, [pc, #252]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	0c9b      	lsrs	r3, r3, #18
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ac6:	e002      	b.n	8002ace <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ada:	d102      	bne.n	8002ae2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f2      	bne.n	8002ac8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ae2:	4b33      	ldr	r3, [pc, #204]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d158      	bne.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e057      	b.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002af4:	4b2e      	ldr	r3, [pc, #184]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002afa:	4a2d      	ldr	r2, [pc, #180]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b04:	e04d      	b.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b0c:	d141      	bne.n	8002b92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b1a:	d131      	bne.n	8002b80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b1c:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b22:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b2c:	4b20      	ldr	r3, [pc, #128]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b34:	4a1e      	ldr	r2, [pc, #120]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2232      	movs	r2, #50	; 0x32
 8002b42:	fb02 f303 	mul.w	r3, r2, r3
 8002b46:	4a1c      	ldr	r2, [pc, #112]	; (8002bb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002b48:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4c:	0c9b      	lsrs	r3, r3, #18
 8002b4e:	3301      	adds	r3, #1
 8002b50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b52:	e002      	b.n	8002b5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b5a:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b66:	d102      	bne.n	8002b6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1f2      	bne.n	8002b54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b6e:	4b10      	ldr	r3, [pc, #64]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b7a:	d112      	bne.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e011      	b.n	8002ba4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b86:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b90:	e007      	b.n	8002ba2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b9a:	4a05      	ldr	r2, [pc, #20]	; (8002bb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ba0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3714      	adds	r7, #20
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	40007000 	.word	0x40007000
 8002bb4:	20000020 	.word	0x20000020
 8002bb8:	431bde83 	.word	0x431bde83

08002bbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002bc0:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	4a04      	ldr	r2, [pc, #16]	; (8002bd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002bc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bca:	6093      	str	r3, [r2, #8]
}
 8002bcc:	bf00      	nop
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	40007000 	.word	0x40007000

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b088      	sub	sp, #32
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e2fe      	b.n	80031ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d075      	beq.n	8002ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfa:	4b97      	ldr	r3, [pc, #604]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c04:	4b94      	ldr	r3, [pc, #592]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b0c      	cmp	r3, #12
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_OscConfig+0x3e>
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d002      	beq.n	8002c20 <HAL_RCC_OscConfig+0x44>
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d10b      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	4b8d      	ldr	r3, [pc, #564]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d05b      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x108>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d157      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e2d9      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c40:	d106      	bne.n	8002c50 <HAL_RCC_OscConfig+0x74>
 8002c42:	4b85      	ldr	r3, [pc, #532]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a84      	ldr	r2, [pc, #528]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	e01d      	b.n	8002c8c <HAL_RCC_OscConfig+0xb0>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c58:	d10c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x98>
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a7e      	ldr	r2, [pc, #504]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	4b7c      	ldr	r3, [pc, #496]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a7b      	ldr	r2, [pc, #492]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e00b      	b.n	8002c8c <HAL_RCC_OscConfig+0xb0>
 8002c74:	4b78      	ldr	r3, [pc, #480]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a77      	ldr	r2, [pc, #476]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	4b75      	ldr	r3, [pc, #468]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a74      	ldr	r2, [pc, #464]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c94:	f7ff fc68 	bl	8002568 <HAL_GetTick>
 8002c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c9a:	e008      	b.n	8002cae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c9c:	f7ff fc64 	bl	8002568 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b64      	cmp	r3, #100	; 0x64
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e29e      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cae:	4b6a      	ldr	r3, [pc, #424]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCC_OscConfig+0xc0>
 8002cba:	e014      	b.n	8002ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7ff fc54 	bl	8002568 <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cc4:	f7ff fc50 	bl	8002568 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b64      	cmp	r3, #100	; 0x64
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e28a      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cd6:	4b60      	ldr	r3, [pc, #384]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0xe8>
 8002ce2:	e000      	b.n	8002ce6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d075      	beq.n	8002dde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cf2:	4b59      	ldr	r3, [pc, #356]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cfc:	4b56      	ldr	r3, [pc, #344]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b0c      	cmp	r3, #12
 8002d0a:	d102      	bne.n	8002d12 <HAL_RCC_OscConfig+0x136>
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d002      	beq.n	8002d18 <HAL_RCC_OscConfig+0x13c>
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	2b04      	cmp	r3, #4
 8002d16:	d11f      	bne.n	8002d58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d18:	4b4f      	ldr	r3, [pc, #316]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_OscConfig+0x154>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e25d      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d30:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	061b      	lsls	r3, r3, #24
 8002d3e:	4946      	ldr	r1, [pc, #280]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002d44:	4b45      	ldr	r3, [pc, #276]	; (8002e5c <HAL_RCC_OscConfig+0x280>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff fa5d 	bl	8002208 <HAL_InitTick>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d043      	beq.n	8002ddc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e249      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d023      	beq.n	8002da8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d60:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a3c      	ldr	r2, [pc, #240]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fbfc 	bl	8002568 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d74:	f7ff fbf8 	bl	8002568 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e232      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d86:	4b34      	ldr	r3, [pc, #208]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d92:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	061b      	lsls	r3, r3, #24
 8002da0:	492d      	ldr	r1, [pc, #180]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	604b      	str	r3, [r1, #4]
 8002da6:	e01a      	b.n	8002dde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da8:	4b2b      	ldr	r3, [pc, #172]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7ff fbd8 	bl	8002568 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dbc:	f7ff fbd4 	bl	8002568 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e20e      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dce:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x1e0>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d041      	beq.n	8002e6e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01c      	beq.n	8002e2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002df8:	4a17      	ldr	r2, [pc, #92]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e02:	f7ff fbb1 	bl	8002568 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e0a:	f7ff fbad 	bl	8002568 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1e7      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e1c:	4b0e      	ldr	r3, [pc, #56]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ef      	beq.n	8002e0a <HAL_RCC_OscConfig+0x22e>
 8002e2a:	e020      	b.n	8002e6e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e2c:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e32:	4a09      	ldr	r2, [pc, #36]	; (8002e58 <HAL_RCC_OscConfig+0x27c>)
 8002e34:	f023 0301 	bic.w	r3, r3, #1
 8002e38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7ff fb94 	bl	8002568 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e42:	e00d      	b.n	8002e60 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e44:	f7ff fb90 	bl	8002568 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d906      	bls.n	8002e60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1ca      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e60:	4b8c      	ldr	r3, [pc, #560]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1ea      	bne.n	8002e44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80a6 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e80:	4b84      	ldr	r3, [pc, #528]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <HAL_RCC_OscConfig+0x2b4>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_RCC_OscConfig+0x2b6>
 8002e90:	2300      	movs	r3, #0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	4b7f      	ldr	r3, [pc, #508]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	4a7e      	ldr	r2, [pc, #504]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8002ea2:	4b7c      	ldr	r3, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eb2:	4b79      	ldr	r3, [pc, #484]	; (8003098 <HAL_RCC_OscConfig+0x4bc>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d118      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ebe:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x4bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x4bc>)
 8002ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ec8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eca:	f7ff fb4d 	bl	8002568 <HAL_GetTick>
 8002ece:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed2:	f7ff fb49 	bl	8002568 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e183      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ee4:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <HAL_RCC_OscConfig+0x4bc>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d0f0      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d108      	bne.n	8002f0a <HAL_RCC_OscConfig+0x32e>
 8002ef8:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efe:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f08:	e024      	b.n	8002f54 <HAL_RCC_OscConfig+0x378>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d110      	bne.n	8002f34 <HAL_RCC_OscConfig+0x358>
 8002f12:	4b60      	ldr	r3, [pc, #384]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	4a5e      	ldr	r2, [pc, #376]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f1a:	f043 0304 	orr.w	r3, r3, #4
 8002f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f22:	4b5c      	ldr	r3, [pc, #368]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f28:	4a5a      	ldr	r2, [pc, #360]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f32:	e00f      	b.n	8002f54 <HAL_RCC_OscConfig+0x378>
 8002f34:	4b57      	ldr	r3, [pc, #348]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	4a56      	ldr	r2, [pc, #344]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f44:	4b53      	ldr	r3, [pc, #332]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f4c:	f023 0304 	bic.w	r3, r3, #4
 8002f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d016      	beq.n	8002f8a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f5c:	f7ff fb04 	bl	8002568 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f62:	e00a      	b.n	8002f7a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f64:	f7ff fb00 	bl	8002568 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e138      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f7a:	4b46      	ldr	r3, [pc, #280]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d0ed      	beq.n	8002f64 <HAL_RCC_OscConfig+0x388>
 8002f88:	e015      	b.n	8002fb6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f8a:	f7ff faed 	bl	8002568 <HAL_GetTick>
 8002f8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f90:	e00a      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7ff fae9 	bl	8002568 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e121      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1ed      	bne.n	8002f92 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002fb6:	7ffb      	ldrb	r3, [r7, #31]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d105      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc0:	4a34      	ldr	r2, [pc, #208]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002fc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0320 	and.w	r3, r3, #32
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d03c      	beq.n	800304e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d01c      	beq.n	8003016 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002fde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fe2:	4a2c      	ldr	r2, [pc, #176]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8002fe4:	f043 0301 	orr.w	r3, r3, #1
 8002fe8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7ff fabc 	bl	8002568 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ff4:	f7ff fab8 	bl	8002568 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e0f2      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003006:	4b23      	ldr	r3, [pc, #140]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8003008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ef      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x418>
 8003014:	e01b      	b.n	800304e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003016:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8003018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800301c:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7ff fa9f 	bl	8002568 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800302e:	f7ff fa9b 	bl	8002568 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e0d5      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003040:	4b14      	ldr	r3, [pc, #80]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8003042:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1ef      	bne.n	800302e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80c9 	beq.w	80031ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003058:	4b0e      	ldr	r3, [pc, #56]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b0c      	cmp	r3, #12
 8003062:	f000 8083 	beq.w	800316c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69db      	ldr	r3, [r3, #28]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d15e      	bne.n	800312c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306e:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a08      	ldr	r2, [pc, #32]	; (8003094 <HAL_RCC_OscConfig+0x4b8>)
 8003074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307a:	f7ff fa75 	bl	8002568 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003080:	e00c      	b.n	800309c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003082:	f7ff fa71 	bl	8002568 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d905      	bls.n	800309c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e0ab      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
 8003094:	40021000 	.word	0x40021000
 8003098:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309c:	4b55      	ldr	r3, [pc, #340]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1ec      	bne.n	8003082 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030a8:	4b52      	ldr	r3, [pc, #328]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	4b52      	ldr	r3, [pc, #328]	; (80031f8 <HAL_RCC_OscConfig+0x61c>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6a11      	ldr	r1, [r2, #32]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030b8:	3a01      	subs	r2, #1
 80030ba:	0112      	lsls	r2, r2, #4
 80030bc:	4311      	orrs	r1, r2
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80030c2:	0212      	lsls	r2, r2, #8
 80030c4:	4311      	orrs	r1, r2
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030ca:	0852      	lsrs	r2, r2, #1
 80030cc:	3a01      	subs	r2, #1
 80030ce:	0552      	lsls	r2, r2, #21
 80030d0:	4311      	orrs	r1, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030d6:	0852      	lsrs	r2, r2, #1
 80030d8:	3a01      	subs	r2, #1
 80030da:	0652      	lsls	r2, r2, #25
 80030dc:	4311      	orrs	r1, r2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80030e2:	06d2      	lsls	r2, r2, #27
 80030e4:	430a      	orrs	r2, r1
 80030e6:	4943      	ldr	r1, [pc, #268]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ec:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a40      	ldr	r2, [pc, #256]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030f8:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a3d      	ldr	r2, [pc, #244]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 80030fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003102:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003104:	f7ff fa30 	bl	8002568 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800310c:	f7ff fa2c 	bl	8002568 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e066      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311e:	4b35      	ldr	r3, [pc, #212]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x530>
 800312a:	e05e      	b.n	80031ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800312c:	4b31      	ldr	r3, [pc, #196]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a30      	ldr	r2, [pc, #192]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 8003132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003138:	f7ff fa16 	bl	8002568 <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003140:	f7ff fa12 	bl	8002568 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e04c      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003152:	4b28      	ldr	r3, [pc, #160]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	4924      	ldr	r1, [pc, #144]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 8003164:	4b25      	ldr	r3, [pc, #148]	; (80031fc <HAL_RCC_OscConfig+0x620>)
 8003166:	4013      	ands	r3, r2
 8003168:	60cb      	str	r3, [r1, #12]
 800316a:	e03e      	b.n	80031ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69db      	ldr	r3, [r3, #28]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d101      	bne.n	8003178 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e039      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003178:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <HAL_RCC_OscConfig+0x618>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f003 0203 	and.w	r2, r3, #3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	429a      	cmp	r2, r3
 800318a:	d12c      	bne.n	80031e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	3b01      	subs	r3, #1
 8003198:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319a:	429a      	cmp	r2, r3
 800319c:	d123      	bne.n	80031e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d11b      	bne.n	80031e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d113      	bne.n	80031e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	3b01      	subs	r3, #1
 80031cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d109      	bne.n	80031e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	085b      	lsrs	r3, r3, #1
 80031de:	3b01      	subs	r3, #1
 80031e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3720      	adds	r7, #32
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40021000 	.word	0x40021000
 80031f8:	019f800c 	.word	0x019f800c
 80031fc:	feeefffc 	.word	0xfeeefffc

08003200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d101      	bne.n	8003218 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e11e      	b.n	8003456 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003218:	4b91      	ldr	r3, [pc, #580]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	683a      	ldr	r2, [r7, #0]
 8003222:	429a      	cmp	r2, r3
 8003224:	d910      	bls.n	8003248 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003226:	4b8e      	ldr	r3, [pc, #568]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f023 020f 	bic.w	r2, r3, #15
 800322e:	498c      	ldr	r1, [pc, #560]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	4313      	orrs	r3, r2
 8003234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003236:	4b8a      	ldr	r3, [pc, #552]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	683a      	ldr	r2, [r7, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d001      	beq.n	8003248 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e106      	b.n	8003456 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d073      	beq.n	800333c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d129      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800325c:	4b81      	ldr	r3, [pc, #516]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	e0f4      	b.n	8003456 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800326c:	f000 f9d0 	bl	8003610 <RCC_GetSysClockFreqFromPLLSource>
 8003270:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4a7c      	ldr	r2, [pc, #496]	; (8003468 <HAL_RCC_ClockConfig+0x268>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d93f      	bls.n	80032fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800327a:	4b7a      	ldr	r3, [pc, #488]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d009      	beq.n	800329a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800328e:	2b00      	cmp	r3, #0
 8003290:	d033      	beq.n	80032fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003296:	2b00      	cmp	r3, #0
 8003298:	d12f      	bne.n	80032fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800329a:	4b72      	ldr	r3, [pc, #456]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032a2:	4a70      	ldr	r2, [pc, #448]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 80032a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	e024      	b.n	80032fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d107      	bne.n	80032c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032b8:	4b6a      	ldr	r3, [pc, #424]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d109      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0c6      	b.n	8003456 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c8:	4b66      	ldr	r3, [pc, #408]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e0be      	b.n	8003456 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80032d8:	f000 f8ce 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4a61      	ldr	r2, [pc, #388]	; (8003468 <HAL_RCC_ClockConfig+0x268>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d909      	bls.n	80032fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032e6:	4b5f      	ldr	r3, [pc, #380]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ee:	4a5d      	ldr	r2, [pc, #372]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 80032f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b5a      	ldr	r3, [pc, #360]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4957      	ldr	r1, [pc, #348]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330c:	f7ff f92c 	bl	8002568 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7ff f928 	bl	8002568 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e095      	b.n	8003456 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b4e      	ldr	r3, [pc, #312]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d023      	beq.n	8003390 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0304 	and.w	r3, r3, #4
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003354:	4b43      	ldr	r3, [pc, #268]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a42      	ldr	r2, [pc, #264]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 800335a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800335e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0308 	and.w	r3, r3, #8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d007      	beq.n	800337c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800336c:	4b3d      	ldr	r3, [pc, #244]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003374:	4a3b      	ldr	r2, [pc, #236]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 8003376:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800337a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337c:	4b39      	ldr	r3, [pc, #228]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4936      	ldr	r1, [pc, #216]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
 800338e:	e008      	b.n	80033a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	2b80      	cmp	r3, #128	; 0x80
 8003394:	d105      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003396:	4b33      	ldr	r3, [pc, #204]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	4a32      	ldr	r2, [pc, #200]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 800339c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033a2:	4b2f      	ldr	r3, [pc, #188]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d21d      	bcs.n	80033ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b0:	4b2b      	ldr	r3, [pc, #172]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f023 020f 	bic.w	r2, r3, #15
 80033b8:	4929      	ldr	r1, [pc, #164]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	4313      	orrs	r3, r2
 80033be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033c0:	f7ff f8d2 	bl	8002568 <HAL_GetTick>
 80033c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c8:	f7ff f8ce 	bl	8002568 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e03b      	b.n	8003456 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_RCC_ClockConfig+0x260>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1ed      	bne.n	80033c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0304 	and.w	r3, r3, #4
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d008      	beq.n	800340a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033f8:	4b1a      	ldr	r3, [pc, #104]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4917      	ldr	r1, [pc, #92]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 8003406:	4313      	orrs	r3, r2
 8003408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003416:	4b13      	ldr	r3, [pc, #76]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	490f      	ldr	r1, [pc, #60]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 8003426:	4313      	orrs	r3, r2
 8003428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800342a:	f000 f825 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 800342e:	4602      	mov	r2, r0
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <HAL_RCC_ClockConfig+0x264>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	490c      	ldr	r1, [pc, #48]	; (800346c <HAL_RCC_ClockConfig+0x26c>)
 800343c:	5ccb      	ldrb	r3, [r1, r3]
 800343e:	f003 031f 	and.w	r3, r3, #31
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	4a0a      	ldr	r2, [pc, #40]	; (8003470 <HAL_RCC_ClockConfig+0x270>)
 8003448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800344a:	4b0a      	ldr	r3, [pc, #40]	; (8003474 <HAL_RCC_ClockConfig+0x274>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe feda 	bl	8002208 <HAL_InitTick>
 8003454:	4603      	mov	r3, r0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40022000 	.word	0x40022000
 8003464:	40021000 	.word	0x40021000
 8003468:	04c4b400 	.word	0x04c4b400
 800346c:	080090e0 	.word	0x080090e0
 8003470:	20000020 	.word	0x20000020
 8003474:	20000024 	.word	0x20000024

08003478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800347e:	4b2c      	ldr	r3, [pc, #176]	; (8003530 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b04      	cmp	r3, #4
 8003488:	d102      	bne.n	8003490 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800348a:	4b2a      	ldr	r3, [pc, #168]	; (8003534 <HAL_RCC_GetSysClockFreq+0xbc>)
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	e047      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003490:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b08      	cmp	r3, #8
 800349a:	d102      	bne.n	80034a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800349c:	4b26      	ldr	r3, [pc, #152]	; (8003538 <HAL_RCC_GetSysClockFreq+0xc0>)
 800349e:	613b      	str	r3, [r7, #16]
 80034a0:	e03e      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80034a2:	4b23      	ldr	r3, [pc, #140]	; (8003530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f003 030c 	and.w	r3, r3, #12
 80034aa:	2b0c      	cmp	r3, #12
 80034ac:	d136      	bne.n	800351c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ae:	4b20      	ldr	r3, [pc, #128]	; (8003530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034b8:	4b1d      	ldr	r3, [pc, #116]	; (8003530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	091b      	lsrs	r3, r3, #4
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	3301      	adds	r3, #1
 80034c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d10c      	bne.n	80034e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034cc:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d4:	4a16      	ldr	r2, [pc, #88]	; (8003530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034d6:	68d2      	ldr	r2, [r2, #12]
 80034d8:	0a12      	lsrs	r2, r2, #8
 80034da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034de:	fb02 f303 	mul.w	r3, r2, r3
 80034e2:	617b      	str	r3, [r7, #20]
      break;
 80034e4:	e00c      	b.n	8003500 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034e6:	4a13      	ldr	r2, [pc, #76]	; (8003534 <HAL_RCC_GetSysClockFreq+0xbc>)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ee:	4a10      	ldr	r2, [pc, #64]	; (8003530 <HAL_RCC_GetSysClockFreq+0xb8>)
 80034f0:	68d2      	ldr	r2, [r2, #12]
 80034f2:	0a12      	lsrs	r2, r2, #8
 80034f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034f8:	fb02 f303 	mul.w	r3, r2, r3
 80034fc:	617b      	str	r3, [r7, #20]
      break;
 80034fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	0e5b      	lsrs	r3, r3, #25
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	3301      	adds	r3, #1
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003510:	697a      	ldr	r2, [r7, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	e001      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003520:	693b      	ldr	r3, [r7, #16]
}
 8003522:	4618      	mov	r0, r3
 8003524:	371c      	adds	r7, #28
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40021000 	.word	0x40021000
 8003534:	00f42400 	.word	0x00f42400
 8003538:	016e3600 	.word	0x016e3600

0800353c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_RCC_GetHCLKFreq+0x14>)
 8003542:	681b      	ldr	r3, [r3, #0]
}
 8003544:	4618      	mov	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000020 	.word	0x20000020

08003554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003558:	f7ff fff0 	bl	800353c <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4904      	ldr	r1, [pc, #16]	; (800357c <HAL_RCC_GetPCLK1Freq+0x28>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	f003 031f 	and.w	r3, r3, #31
 8003570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003574:	4618      	mov	r0, r3
 8003576:	bd80      	pop	{r7, pc}
 8003578:	40021000 	.word	0x40021000
 800357c:	080090f0 	.word	0x080090f0

08003580 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003584:	f7ff ffda 	bl	800353c <HAL_RCC_GetHCLKFreq>
 8003588:	4602      	mov	r2, r0
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	0adb      	lsrs	r3, r3, #11
 8003590:	f003 0307 	and.w	r3, r3, #7
 8003594:	4904      	ldr	r1, [pc, #16]	; (80035a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003596:	5ccb      	ldrb	r3, [r1, r3]
 8003598:	f003 031f 	and.w	r3, r3, #31
 800359c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40021000 	.word	0x40021000
 80035a8:	080090f0 	.word	0x080090f0

080035ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	220f      	movs	r2, #15
 80035ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80035bc:	4b12      	ldr	r3, [pc, #72]	; (8003608 <HAL_RCC_GetClockConfig+0x5c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 0203 	and.w	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80035c8:	4b0f      	ldr	r3, [pc, #60]	; (8003608 <HAL_RCC_GetClockConfig+0x5c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <HAL_RCC_GetClockConfig+0x5c>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <HAL_RCC_GetClockConfig+0x5c>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80035ee:	4b07      	ldr	r3, [pc, #28]	; (800360c <HAL_RCC_GetClockConfig+0x60>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 020f 	and.w	r2, r3, #15
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	601a      	str	r2, [r3, #0]
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	40022000 	.word	0x40022000

08003610 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003610:	b480      	push	{r7}
 8003612:	b087      	sub	sp, #28
 8003614:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003616:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	f003 0303 	and.w	r3, r3, #3
 800361e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	3301      	adds	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b03      	cmp	r3, #3
 8003632:	d10c      	bne.n	800364e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003634:	4a17      	ldr	r2, [pc, #92]	; (8003694 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	4a14      	ldr	r2, [pc, #80]	; (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800363e:	68d2      	ldr	r2, [r2, #12]
 8003640:	0a12      	lsrs	r2, r2, #8
 8003642:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003646:	fb02 f303 	mul.w	r3, r2, r3
 800364a:	617b      	str	r3, [r7, #20]
    break;
 800364c:	e00c      	b.n	8003668 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800364e:	4a12      	ldr	r2, [pc, #72]	; (8003698 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	4a0e      	ldr	r2, [pc, #56]	; (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003658:	68d2      	ldr	r2, [r2, #12]
 800365a:	0a12      	lsrs	r2, r2, #8
 800365c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003660:	fb02 f303 	mul.w	r3, r2, r3
 8003664:	617b      	str	r3, [r7, #20]
    break;
 8003666:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	0e5b      	lsrs	r3, r3, #25
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	3301      	adds	r3, #1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003682:	687b      	ldr	r3, [r7, #4]
}
 8003684:	4618      	mov	r0, r3
 8003686:	371c      	adds	r7, #28
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	40021000 	.word	0x40021000
 8003694:	016e3600 	.word	0x016e3600
 8003698:	00f42400 	.word	0x00f42400

0800369c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036a4:	2300      	movs	r3, #0
 80036a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80036a8:	2300      	movs	r3, #0
 80036aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8098 	beq.w	80037ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ba:	2300      	movs	r3, #0
 80036bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036be:	4b43      	ldr	r3, [pc, #268]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d10d      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ca:	4b40      	ldr	r3, [pc, #256]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ce:	4a3f      	ldr	r2, [pc, #252]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d4:	6593      	str	r3, [r2, #88]	; 0x58
 80036d6:	4b3d      	ldr	r3, [pc, #244]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80036d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e2:	2301      	movs	r3, #1
 80036e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036e6:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a39      	ldr	r2, [pc, #228]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036f2:	f7fe ff39 	bl	8002568 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f8:	e009      	b.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036fa:	f7fe ff35 	bl	8002568 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d902      	bls.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	74fb      	strb	r3, [r7, #19]
        break;
 800370c:	e005      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800370e:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0ef      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800371a:	7cfb      	ldrb	r3, [r7, #19]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d159      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003720:	4b2a      	ldr	r3, [pc, #168]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800372a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d01e      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	429a      	cmp	r2, r3
 800373a:	d019      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800373c:	4b23      	ldr	r3, [pc, #140]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003746:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003748:	4b20      	ldr	r3, [pc, #128]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800374a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374e:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003758:	4b1c      	ldr	r3, [pc, #112]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800375a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375e:	4a1b      	ldr	r2, [pc, #108]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003768:	4a18      	ldr	r2, [pc, #96]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d016      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377a:	f7fe fef5 	bl	8002568 <HAL_GetTick>
 800377e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003780:	e00b      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003782:	f7fe fef1 	bl	8002568 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003790:	4293      	cmp	r3, r2
 8003792:	d902      	bls.n	800379a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	74fb      	strb	r3, [r7, #19]
            break;
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d0ec      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037ae:	4b07      	ldr	r3, [pc, #28]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037bc:	4903      	ldr	r1, [pc, #12]	; (80037cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	74bb      	strb	r3, [r7, #18]
 80037ca:	e005      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d4:	7cfb      	ldrb	r3, [r7, #19]
 80037d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037d8:	7c7b      	ldrb	r3, [r7, #17]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d105      	bne.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037de:	4ba7      	ldr	r3, [pc, #668]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e2:	4aa6      	ldr	r2, [pc, #664]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00a      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037f6:	4ba1      	ldr	r3, [pc, #644]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fc:	f023 0203 	bic.w	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	499d      	ldr	r1, [pc, #628]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003806:	4313      	orrs	r3, r2
 8003808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00a      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003818:	4b98      	ldr	r3, [pc, #608]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800381a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800381e:	f023 020c 	bic.w	r2, r3, #12
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4995      	ldr	r1, [pc, #596]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003828:	4313      	orrs	r3, r2
 800382a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0304 	and.w	r3, r3, #4
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800383a:	4b90      	ldr	r3, [pc, #576]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800383c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003840:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	498c      	ldr	r1, [pc, #560]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d00a      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800385c:	4b87      	ldr	r3, [pc, #540]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800385e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003862:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	4984      	ldr	r1, [pc, #528]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800386c:	4313      	orrs	r3, r2
 800386e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800387e:	4b7f      	ldr	r3, [pc, #508]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003884:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	497b      	ldr	r1, [pc, #492]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800388e:	4313      	orrs	r3, r2
 8003890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0320 	and.w	r3, r3, #32
 800389c:	2b00      	cmp	r3, #0
 800389e:	d00a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038a0:	4b76      	ldr	r3, [pc, #472]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	4973      	ldr	r1, [pc, #460]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00a      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038c2:	4b6e      	ldr	r3, [pc, #440]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69db      	ldr	r3, [r3, #28]
 80038d0:	496a      	ldr	r1, [pc, #424]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80038e4:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4962      	ldr	r1, [pc, #392]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003906:	4b5d      	ldr	r3, [pc, #372]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	4959      	ldr	r1, [pc, #356]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003916:	4313      	orrs	r3, r2
 8003918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00a      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003928:	4b54      	ldr	r3, [pc, #336]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800392a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	4951      	ldr	r1, [pc, #324]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003938:	4313      	orrs	r3, r2
 800393a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00a      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800394a:	4b4c      	ldr	r3, [pc, #304]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800394c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003950:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4948      	ldr	r1, [pc, #288]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800396c:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003972:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4940      	ldr	r1, [pc, #256]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800397c:	4313      	orrs	r3, r2
 800397e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800398a:	d105      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800398c:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a3a      	ldr	r2, [pc, #232]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003996:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d015      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039a4:	4b35      	ldr	r3, [pc, #212]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	4932      	ldr	r1, [pc, #200]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c2:	d105      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c4:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	4a2c      	ldr	r2, [pc, #176]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d015      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	4924      	ldr	r1, [pc, #144]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039fa:	d105      	bne.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	4a1e      	ldr	r2, [pc, #120]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a06:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a22:	4916      	ldr	r1, [pc, #88]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a32:	d105      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a10      	ldr	r2, [pc, #64]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d019      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a52:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	4908      	ldr	r1, [pc, #32]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a6a:	d109      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a6c:	4b03      	ldr	r3, [pc, #12]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a02      	ldr	r2, [pc, #8]	; (8003a7c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a76:	60d3      	str	r3, [r2, #12]
 8003a78:	e002      	b.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d015      	beq.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a8c:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	4926      	ldr	r1, [pc, #152]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003aaa:	d105      	bne.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d015      	beq.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003ac4:	4b1b      	ldr	r3, [pc, #108]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad2:	4918      	ldr	r1, [pc, #96]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ae2:	d105      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ae4:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a12      	ldr	r2, [pc, #72]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003aea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d015      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003afc:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0a:	490a      	ldr	r1, [pc, #40]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b1c:	4b05      	ldr	r3, [pc, #20]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003b22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003b28:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	40021000 	.word	0x40021000

08003b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e049      	b.n	8003bde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d106      	bne.n	8003b64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7fe f9ea 	bl	8001f38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2202      	movs	r2, #2
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3304      	adds	r3, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f000 ff68 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d001      	beq.n	8003c00 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e04c      	b.n	8003c9a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a26      	ldr	r2, [pc, #152]	; (8003ca8 <HAL_TIM_Base_Start+0xc0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <HAL_TIM_Base_Start+0x70>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c1a:	d01d      	beq.n	8003c58 <HAL_TIM_Base_Start+0x70>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a22      	ldr	r2, [pc, #136]	; (8003cac <HAL_TIM_Base_Start+0xc4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d018      	beq.n	8003c58 <HAL_TIM_Base_Start+0x70>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a21      	ldr	r2, [pc, #132]	; (8003cb0 <HAL_TIM_Base_Start+0xc8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <HAL_TIM_Base_Start+0x70>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1f      	ldr	r2, [pc, #124]	; (8003cb4 <HAL_TIM_Base_Start+0xcc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <HAL_TIM_Base_Start+0x70>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	; (8003cb8 <HAL_TIM_Base_Start+0xd0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_TIM_Base_Start+0x70>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1c      	ldr	r2, [pc, #112]	; (8003cbc <HAL_TIM_Base_Start+0xd4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_TIM_Base_Start+0x70>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1b      	ldr	r2, [pc, #108]	; (8003cc0 <HAL_TIM_Base_Start+0xd8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d115      	bne.n	8003c84 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	4b19      	ldr	r3, [pc, #100]	; (8003cc4 <HAL_TIM_Base_Start+0xdc>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d015      	beq.n	8003c96 <HAL_TIM_Base_Start+0xae>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	d011      	beq.n	8003c96 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f042 0201 	orr.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c82:	e008      	b.n	8003c96 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e000      	b.n	8003c98 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40000400 	.word	0x40000400
 8003cb0:	40000800 	.word	0x40000800
 8003cb4:	40000c00 	.word	0x40000c00
 8003cb8:	40013400 	.word	0x40013400
 8003cbc:	40014000 	.word	0x40014000
 8003cc0:	40015000 	.word	0x40015000
 8003cc4:	00010007 	.word	0x00010007

08003cc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d001      	beq.n	8003ce0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e054      	b.n	8003d8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a26      	ldr	r2, [pc, #152]	; (8003d98 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d022      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x80>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d01d      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x80>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a22      	ldr	r2, [pc, #136]	; (8003d9c <HAL_TIM_Base_Start_IT+0xd4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d018      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x80>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d013      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x80>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a1f      	ldr	r2, [pc, #124]	; (8003da4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00e      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x80>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a1e      	ldr	r2, [pc, #120]	; (8003da8 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d009      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x80>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <HAL_TIM_Base_Start_IT+0xe4>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d004      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x80>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1b      	ldr	r2, [pc, #108]	; (8003db0 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d115      	bne.n	8003d74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	4b19      	ldr	r3, [pc, #100]	; (8003db4 <HAL_TIM_Base_Start_IT+0xec>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b06      	cmp	r3, #6
 8003d58:	d015      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0xbe>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d011      	beq.n	8003d86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f042 0201 	orr.w	r2, r2, #1
 8003d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d72:	e008      	b.n	8003d86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e000      	b.n	8003d88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
 8003d96:	bf00      	nop
 8003d98:	40012c00 	.word	0x40012c00
 8003d9c:	40000400 	.word	0x40000400
 8003da0:	40000800 	.word	0x40000800
 8003da4:	40000c00 	.word	0x40000c00
 8003da8:	40013400 	.word	0x40013400
 8003dac:	40014000 	.word	0x40014000
 8003db0:	40015000 	.word	0x40015000
 8003db4:	00010007 	.word	0x00010007

08003db8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e049      	b.n	8003e5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f841 	bl	8003e66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 fe28 	bl	8004a4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d109      	bne.n	8003ea0 <HAL_TIM_PWM_Start+0x24>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	bf14      	ite	ne
 8003e98:	2301      	movne	r3, #1
 8003e9a:	2300      	moveq	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	e03c      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d109      	bne.n	8003eba <HAL_TIM_PWM_Start+0x3e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	bf14      	ite	ne
 8003eb2:	2301      	movne	r3, #1
 8003eb4:	2300      	moveq	r3, #0
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	e02f      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b08      	cmp	r3, #8
 8003ebe:	d109      	bne.n	8003ed4 <HAL_TIM_PWM_Start+0x58>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e022      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	d109      	bne.n	8003eee <HAL_TIM_PWM_Start+0x72>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	bf14      	ite	ne
 8003ee6:	2301      	movne	r3, #1
 8003ee8:	2300      	moveq	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e015      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b10      	cmp	r3, #16
 8003ef2:	d109      	bne.n	8003f08 <HAL_TIM_PWM_Start+0x8c>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e008      	b.n	8003f1a <HAL_TIM_PWM_Start+0x9e>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	bf14      	ite	ne
 8003f14:	2301      	movne	r3, #1
 8003f16:	2300      	moveq	r3, #0
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d001      	beq.n	8003f22 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0a6      	b.n	8004070 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d104      	bne.n	8003f32 <HAL_TIM_PWM_Start+0xb6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f30:	e023      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d104      	bne.n	8003f42 <HAL_TIM_PWM_Start+0xc6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f40:	e01b      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d104      	bne.n	8003f52 <HAL_TIM_PWM_Start+0xd6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f50:	e013      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b0c      	cmp	r3, #12
 8003f56:	d104      	bne.n	8003f62 <HAL_TIM_PWM_Start+0xe6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f60:	e00b      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2b10      	cmp	r3, #16
 8003f66:	d104      	bne.n	8003f72 <HAL_TIM_PWM_Start+0xf6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2202      	movs	r2, #2
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f70:	e003      	b.n	8003f7a <HAL_TIM_PWM_Start+0xfe>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2202      	movs	r2, #2
 8003f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f001 f9dc 	bl	8005340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a3a      	ldr	r2, [pc, #232]	; (8004078 <HAL_TIM_PWM_Start+0x1fc>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d018      	beq.n	8003fc4 <HAL_TIM_PWM_Start+0x148>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a39      	ldr	r2, [pc, #228]	; (800407c <HAL_TIM_PWM_Start+0x200>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d013      	beq.n	8003fc4 <HAL_TIM_PWM_Start+0x148>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a37      	ldr	r2, [pc, #220]	; (8004080 <HAL_TIM_PWM_Start+0x204>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d00e      	beq.n	8003fc4 <HAL_TIM_PWM_Start+0x148>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a36      	ldr	r2, [pc, #216]	; (8004084 <HAL_TIM_PWM_Start+0x208>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d009      	beq.n	8003fc4 <HAL_TIM_PWM_Start+0x148>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a34      	ldr	r2, [pc, #208]	; (8004088 <HAL_TIM_PWM_Start+0x20c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d004      	beq.n	8003fc4 <HAL_TIM_PWM_Start+0x148>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a33      	ldr	r2, [pc, #204]	; (800408c <HAL_TIM_PWM_Start+0x210>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d101      	bne.n	8003fc8 <HAL_TIM_PWM_Start+0x14c>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <HAL_TIM_PWM_Start+0x14e>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a25      	ldr	r2, [pc, #148]	; (8004078 <HAL_TIM_PWM_Start+0x1fc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d022      	beq.n	800402e <HAL_TIM_PWM_Start+0x1b2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d01d      	beq.n	800402e <HAL_TIM_PWM_Start+0x1b2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a26      	ldr	r2, [pc, #152]	; (8004090 <HAL_TIM_PWM_Start+0x214>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_TIM_PWM_Start+0x1b2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a24      	ldr	r2, [pc, #144]	; (8004094 <HAL_TIM_PWM_Start+0x218>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_TIM_PWM_Start+0x1b2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a23      	ldr	r2, [pc, #140]	; (8004098 <HAL_TIM_PWM_Start+0x21c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_TIM_PWM_Start+0x1b2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a19      	ldr	r2, [pc, #100]	; (800407c <HAL_TIM_PWM_Start+0x200>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_TIM_PWM_Start+0x1b2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a18      	ldr	r2, [pc, #96]	; (8004080 <HAL_TIM_PWM_Start+0x204>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIM_PWM_Start+0x1b2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_TIM_PWM_Start+0x210>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d115      	bne.n	800405a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	4b19      	ldr	r3, [pc, #100]	; (800409c <HAL_TIM_PWM_Start+0x220>)
 8004036:	4013      	ands	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b06      	cmp	r3, #6
 800403e:	d015      	beq.n	800406c <HAL_TIM_PWM_Start+0x1f0>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004046:	d011      	beq.n	800406c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004058:	e008      	b.n	800406c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
 800406a:	e000      	b.n	800406e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40012c00 	.word	0x40012c00
 800407c:	40013400 	.word	0x40013400
 8004080:	40014000 	.word	0x40014000
 8004084:	40014400 	.word	0x40014400
 8004088:	40014800 	.word	0x40014800
 800408c:	40015000 	.word	0x40015000
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800
 8004098:	40000c00 	.word	0x40000c00
 800409c:	00010007 	.word	0x00010007

080040a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e097      	b.n	80041e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f7fd ff6f 	bl	8001fac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80040e4:	f023 0307 	bic.w	r3, r3, #7
 80040e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 fca9 	bl	8004a4c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800411c:	693b      	ldr	r3, [r7, #16]
 800411e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004122:	f023 0303 	bic.w	r3, r3, #3
 8004126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	021b      	lsls	r3, r3, #8
 8004132:	4313      	orrs	r3, r2
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	4313      	orrs	r3, r2
 8004138:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004140:	f023 030c 	bic.w	r3, r3, #12
 8004144:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800414c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	4313      	orrs	r3, r2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	011a      	lsls	r2, r3, #4
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	031b      	lsls	r3, r3, #12
 8004170:	4313      	orrs	r3, r2
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	011b      	lsls	r3, r3, #4
 8004192:	4313      	orrs	r3, r2
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2201      	movs	r2, #1
 80041c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004204:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800420c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004214:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d110      	bne.n	800423e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800421c:	7bfb      	ldrb	r3, [r7, #15]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d102      	bne.n	8004228 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004222:	7b7b      	ldrb	r3, [r7, #13]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d001      	beq.n	800422c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e069      	b.n	8004300 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2202      	movs	r2, #2
 8004230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800423c:	e031      	b.n	80042a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b04      	cmp	r3, #4
 8004242:	d110      	bne.n	8004266 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004244:	7bbb      	ldrb	r3, [r7, #14]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d102      	bne.n	8004250 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800424a:	7b3b      	ldrb	r3, [r7, #12]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d001      	beq.n	8004254 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e055      	b.n	8004300 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004264:	e01d      	b.n	80042a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004266:	7bfb      	ldrb	r3, [r7, #15]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d108      	bne.n	800427e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800426c:	7bbb      	ldrb	r3, [r7, #14]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d105      	bne.n	800427e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004272:	7b7b      	ldrb	r3, [r7, #13]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d102      	bne.n	800427e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004278:	7b3b      	ldrb	r3, [r7, #12]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d001      	beq.n	8004282 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e03e      	b.n	8004300 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2202      	movs	r2, #2
 8004286:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2202      	movs	r2, #2
 800429e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d003      	beq.n	80042b0 <HAL_TIM_Encoder_Start+0xc4>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d008      	beq.n	80042c0 <HAL_TIM_Encoder_Start+0xd4>
 80042ae:	e00f      	b.n	80042d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2201      	movs	r2, #1
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f001 f841 	bl	8005340 <TIM_CCxChannelCmd>
      break;
 80042be:	e016      	b.n	80042ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2201      	movs	r2, #1
 80042c6:	2104      	movs	r1, #4
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 f839 	bl	8005340 <TIM_CCxChannelCmd>
      break;
 80042ce:	e00e      	b.n	80042ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2201      	movs	r2, #1
 80042d6:	2100      	movs	r1, #0
 80042d8:	4618      	mov	r0, r3
 80042da:	f001 f831 	bl	8005340 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	2104      	movs	r1, #4
 80042e6:	4618      	mov	r0, r3
 80042e8:	f001 f82a 	bl	8005340 <TIM_CCxChannelCmd>
      break;
 80042ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f042 0201 	orr.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d020      	beq.n	800436c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d01b      	beq.n	800436c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f06f 0202 	mvn.w	r2, #2
 800433c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2201      	movs	r2, #1
 8004342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	699b      	ldr	r3, [r3, #24]
 800434a:	f003 0303 	and.w	r3, r3, #3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fb5c 	bl	8004a10 <HAL_TIM_IC_CaptureCallback>
 8004358:	e005      	b.n	8004366 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fb4e 	bl	80049fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 fb5f 	bl	8004a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b00      	cmp	r3, #0
 8004374:	d020      	beq.n	80043b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01b      	beq.n	80043b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f06f 0204 	mvn.w	r2, #4
 8004388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2202      	movs	r2, #2
 800438e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fb36 	bl	8004a10 <HAL_TIM_IC_CaptureCallback>
 80043a4:	e005      	b.n	80043b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 fb28 	bl	80049fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 fb39 	bl	8004a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d020      	beq.n	8004404 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01b      	beq.n	8004404 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f06f 0208 	mvn.w	r2, #8
 80043d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2204      	movs	r2, #4
 80043da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 fb10 	bl	8004a10 <HAL_TIM_IC_CaptureCallback>
 80043f0:	e005      	b.n	80043fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fb02 	bl	80049fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 fb13 	bl	8004a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f003 0310 	and.w	r3, r3, #16
 800440a:	2b00      	cmp	r3, #0
 800440c:	d020      	beq.n	8004450 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01b      	beq.n	8004450 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0210 	mvn.w	r2, #16
 8004420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2208      	movs	r2, #8
 8004426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 faea 	bl	8004a10 <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fadc 	bl	80049fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 faed 	bl	8004a24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00c      	beq.n	8004474 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b00      	cmp	r3, #0
 8004462:	d007      	beq.n	8004474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0201 	mvn.w	r2, #1
 800446c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fd fc86 	bl	8001d80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447a:	2b00      	cmp	r3, #0
 800447c:	d104      	bne.n	8004488 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00c      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800449a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f001 f8a9 	bl	80055f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00c      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d007      	beq.n	80044c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f001 f8a1 	bl	8005608 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00c      	beq.n	80044ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80044e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 faa7 	bl	8004a38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00c      	beq.n	800450e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f06f 0220 	mvn.w	r2, #32
 8004506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f001 f869 	bl	80055e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00c      	beq.n	8004532 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d007      	beq.n	8004532 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800452a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f001 f875 	bl	800561c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00c      	beq.n	8004556 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d007      	beq.n	8004556 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800454e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f001 f86d 	bl	8005630 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00c      	beq.n	800457a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f001 f865 	bl	8005644 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00c      	beq.n	800459e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f001 f85d 	bl	8005658 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
	...

080045a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b4:	2300      	movs	r3, #0
 80045b6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d101      	bne.n	80045c6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80045c2:	2302      	movs	r3, #2
 80045c4:	e0ff      	b.n	80047c6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b14      	cmp	r3, #20
 80045d2:	f200 80f0 	bhi.w	80047b6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	08004631 	.word	0x08004631
 80045e0:	080047b7 	.word	0x080047b7
 80045e4:	080047b7 	.word	0x080047b7
 80045e8:	080047b7 	.word	0x080047b7
 80045ec:	08004671 	.word	0x08004671
 80045f0:	080047b7 	.word	0x080047b7
 80045f4:	080047b7 	.word	0x080047b7
 80045f8:	080047b7 	.word	0x080047b7
 80045fc:	080046b3 	.word	0x080046b3
 8004600:	080047b7 	.word	0x080047b7
 8004604:	080047b7 	.word	0x080047b7
 8004608:	080047b7 	.word	0x080047b7
 800460c:	080046f3 	.word	0x080046f3
 8004610:	080047b7 	.word	0x080047b7
 8004614:	080047b7 	.word	0x080047b7
 8004618:	080047b7 	.word	0x080047b7
 800461c:	08004735 	.word	0x08004735
 8004620:	080047b7 	.word	0x080047b7
 8004624:	080047b7 	.word	0x080047b7
 8004628:	080047b7 	.word	0x080047b7
 800462c:	08004775 	.word	0x08004775
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68b9      	ldr	r1, [r7, #8]
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fabc 	bl	8004bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699a      	ldr	r2, [r3, #24]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0208 	orr.w	r2, r2, #8
 800464a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	699a      	ldr	r2, [r3, #24]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0204 	bic.w	r2, r2, #4
 800465a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	6999      	ldr	r1, [r3, #24]
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	691a      	ldr	r2, [r3, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	619a      	str	r2, [r3, #24]
      break;
 800466e:	e0a5      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68b9      	ldr	r1, [r7, #8]
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fb36 	bl	8004ce8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800468a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	699a      	ldr	r2, [r3, #24]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800469a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6999      	ldr	r1, [r3, #24]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	021a      	lsls	r2, r3, #8
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	619a      	str	r2, [r3, #24]
      break;
 80046b0:	e084      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fba9 	bl	8004e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f042 0208 	orr.w	r2, r2, #8
 80046cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	69da      	ldr	r2, [r3, #28]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0204 	bic.w	r2, r2, #4
 80046dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69d9      	ldr	r1, [r3, #28]
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	61da      	str	r2, [r3, #28]
      break;
 80046f0:	e064      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68b9      	ldr	r1, [r7, #8]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fc1b 	bl	8004f34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800470c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	69da      	ldr	r2, [r3, #28]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	69d9      	ldr	r1, [r3, #28]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	021a      	lsls	r2, r3, #8
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	61da      	str	r2, [r3, #28]
      break;
 8004732:	e043      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	4618      	mov	r0, r3
 800473c:	f000 fc8e 	bl	800505c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f042 0208 	orr.w	r2, r2, #8
 800474e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0204 	bic.w	r2, r2, #4
 800475e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004772:	e023      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68b9      	ldr	r1, [r7, #8]
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fcd8 	bl	8005130 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800478e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800479e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	021a      	lsls	r2, r3, #8
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80047b4:	e002      	b.n	80047bc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	75fb      	strb	r3, [r7, #23]
      break;
 80047ba:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop

080047d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_TIM_ConfigClockSource+0x1c>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e0f6      	b.n	80049da <HAL_TIM_ConfigClockSource+0x20a>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800480a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800480e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a6f      	ldr	r2, [pc, #444]	; (80049e4 <HAL_TIM_ConfigClockSource+0x214>)
 8004826:	4293      	cmp	r3, r2
 8004828:	f000 80c1 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 800482c:	4a6d      	ldr	r2, [pc, #436]	; (80049e4 <HAL_TIM_ConfigClockSource+0x214>)
 800482e:	4293      	cmp	r3, r2
 8004830:	f200 80c6 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004834:	4a6c      	ldr	r2, [pc, #432]	; (80049e8 <HAL_TIM_ConfigClockSource+0x218>)
 8004836:	4293      	cmp	r3, r2
 8004838:	f000 80b9 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 800483c:	4a6a      	ldr	r2, [pc, #424]	; (80049e8 <HAL_TIM_ConfigClockSource+0x218>)
 800483e:	4293      	cmp	r3, r2
 8004840:	f200 80be 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004844:	4a69      	ldr	r2, [pc, #420]	; (80049ec <HAL_TIM_ConfigClockSource+0x21c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	f000 80b1 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 800484c:	4a67      	ldr	r2, [pc, #412]	; (80049ec <HAL_TIM_ConfigClockSource+0x21c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	f200 80b6 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004854:	4a66      	ldr	r2, [pc, #408]	; (80049f0 <HAL_TIM_ConfigClockSource+0x220>)
 8004856:	4293      	cmp	r3, r2
 8004858:	f000 80a9 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 800485c:	4a64      	ldr	r2, [pc, #400]	; (80049f0 <HAL_TIM_ConfigClockSource+0x220>)
 800485e:	4293      	cmp	r3, r2
 8004860:	f200 80ae 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004864:	4a63      	ldr	r2, [pc, #396]	; (80049f4 <HAL_TIM_ConfigClockSource+0x224>)
 8004866:	4293      	cmp	r3, r2
 8004868:	f000 80a1 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 800486c:	4a61      	ldr	r2, [pc, #388]	; (80049f4 <HAL_TIM_ConfigClockSource+0x224>)
 800486e:	4293      	cmp	r3, r2
 8004870:	f200 80a6 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004874:	4a60      	ldr	r2, [pc, #384]	; (80049f8 <HAL_TIM_ConfigClockSource+0x228>)
 8004876:	4293      	cmp	r3, r2
 8004878:	f000 8099 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 800487c:	4a5e      	ldr	r2, [pc, #376]	; (80049f8 <HAL_TIM_ConfigClockSource+0x228>)
 800487e:	4293      	cmp	r3, r2
 8004880:	f200 809e 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004884:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004888:	f000 8091 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 800488c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004890:	f200 8096 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 8004894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004898:	f000 8089 	beq.w	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 800489c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a0:	f200 808e 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a8:	d03e      	beq.n	8004928 <HAL_TIM_ConfigClockSource+0x158>
 80048aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ae:	f200 8087 	bhi.w	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b6:	f000 8086 	beq.w	80049c6 <HAL_TIM_ConfigClockSource+0x1f6>
 80048ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048be:	d87f      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048c0:	2b70      	cmp	r3, #112	; 0x70
 80048c2:	d01a      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0x12a>
 80048c4:	2b70      	cmp	r3, #112	; 0x70
 80048c6:	d87b      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048c8:	2b60      	cmp	r3, #96	; 0x60
 80048ca:	d050      	beq.n	800496e <HAL_TIM_ConfigClockSource+0x19e>
 80048cc:	2b60      	cmp	r3, #96	; 0x60
 80048ce:	d877      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048d0:	2b50      	cmp	r3, #80	; 0x50
 80048d2:	d03c      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x17e>
 80048d4:	2b50      	cmp	r3, #80	; 0x50
 80048d6:	d873      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048d8:	2b40      	cmp	r3, #64	; 0x40
 80048da:	d058      	beq.n	800498e <HAL_TIM_ConfigClockSource+0x1be>
 80048dc:	2b40      	cmp	r3, #64	; 0x40
 80048de:	d86f      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048e0:	2b30      	cmp	r3, #48	; 0x30
 80048e2:	d064      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 80048e4:	2b30      	cmp	r3, #48	; 0x30
 80048e6:	d86b      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d060      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d867      	bhi.n	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d05c      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d05a      	beq.n	80049ae <HAL_TIM_ConfigClockSource+0x1de>
 80048f8:	e062      	b.n	80049c0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800490a:	f000 fcf9 	bl	8005300 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800491c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68ba      	ldr	r2, [r7, #8]
 8004924:	609a      	str	r2, [r3, #8]
      break;
 8004926:	e04f      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004938:	f000 fce2 	bl	8005300 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800494a:	609a      	str	r2, [r3, #8]
      break;
 800494c:	e03c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800495a:	461a      	mov	r2, r3
 800495c:	f000 fc54 	bl	8005208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2150      	movs	r1, #80	; 0x50
 8004966:	4618      	mov	r0, r3
 8004968:	f000 fcad 	bl	80052c6 <TIM_ITRx_SetConfig>
      break;
 800496c:	e02c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800497a:	461a      	mov	r2, r3
 800497c:	f000 fc73 	bl	8005266 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2160      	movs	r1, #96	; 0x60
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fc9d 	bl	80052c6 <TIM_ITRx_SetConfig>
      break;
 800498c:	e01c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	461a      	mov	r2, r3
 800499c:	f000 fc34 	bl	8005208 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	2140      	movs	r1, #64	; 0x40
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 fc8d 	bl	80052c6 <TIM_ITRx_SetConfig>
      break;
 80049ac:	e00c      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f000 fc84 	bl	80052c6 <TIM_ITRx_SetConfig>
      break;
 80049be:	e003      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      break;
 80049c4:	e000      	b.n	80049c8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80049c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
 80049e2:	bf00      	nop
 80049e4:	00100070 	.word	0x00100070
 80049e8:	00100060 	.word	0x00100060
 80049ec:	00100050 	.word	0x00100050
 80049f0:	00100040 	.word	0x00100040
 80049f4:	00100030 	.word	0x00100030
 80049f8:	00100020 	.word	0x00100020

080049fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a4c      	ldr	r2, [pc, #304]	; (8004b90 <TIM_Base_SetConfig+0x144>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d017      	beq.n	8004a94 <TIM_Base_SetConfig+0x48>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a6a:	d013      	beq.n	8004a94 <TIM_Base_SetConfig+0x48>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a49      	ldr	r2, [pc, #292]	; (8004b94 <TIM_Base_SetConfig+0x148>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00f      	beq.n	8004a94 <TIM_Base_SetConfig+0x48>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a48      	ldr	r2, [pc, #288]	; (8004b98 <TIM_Base_SetConfig+0x14c>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00b      	beq.n	8004a94 <TIM_Base_SetConfig+0x48>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a47      	ldr	r2, [pc, #284]	; (8004b9c <TIM_Base_SetConfig+0x150>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d007      	beq.n	8004a94 <TIM_Base_SetConfig+0x48>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a46      	ldr	r2, [pc, #280]	; (8004ba0 <TIM_Base_SetConfig+0x154>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_Base_SetConfig+0x48>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a45      	ldr	r2, [pc, #276]	; (8004ba4 <TIM_Base_SetConfig+0x158>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d108      	bne.n	8004aa6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a39      	ldr	r2, [pc, #228]	; (8004b90 <TIM_Base_SetConfig+0x144>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d023      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab4:	d01f      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a36      	ldr	r2, [pc, #216]	; (8004b94 <TIM_Base_SetConfig+0x148>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01b      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a35      	ldr	r2, [pc, #212]	; (8004b98 <TIM_Base_SetConfig+0x14c>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d017      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a34      	ldr	r2, [pc, #208]	; (8004b9c <TIM_Base_SetConfig+0x150>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d013      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a33      	ldr	r2, [pc, #204]	; (8004ba0 <TIM_Base_SetConfig+0x154>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00f      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a33      	ldr	r2, [pc, #204]	; (8004ba8 <TIM_Base_SetConfig+0x15c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00b      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a32      	ldr	r2, [pc, #200]	; (8004bac <TIM_Base_SetConfig+0x160>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d007      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a31      	ldr	r2, [pc, #196]	; (8004bb0 <TIM_Base_SetConfig+0x164>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d003      	beq.n	8004af6 <TIM_Base_SetConfig+0xaa>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2c      	ldr	r2, [pc, #176]	; (8004ba4 <TIM_Base_SetConfig+0x158>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d108      	bne.n	8004b08 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689a      	ldr	r2, [r3, #8]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <TIM_Base_SetConfig+0x144>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d013      	beq.n	8004b5c <TIM_Base_SetConfig+0x110>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	4a1a      	ldr	r2, [pc, #104]	; (8004ba0 <TIM_Base_SetConfig+0x154>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00f      	beq.n	8004b5c <TIM_Base_SetConfig+0x110>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a1a      	ldr	r2, [pc, #104]	; (8004ba8 <TIM_Base_SetConfig+0x15c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00b      	beq.n	8004b5c <TIM_Base_SetConfig+0x110>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a19      	ldr	r2, [pc, #100]	; (8004bac <TIM_Base_SetConfig+0x160>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d007      	beq.n	8004b5c <TIM_Base_SetConfig+0x110>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <TIM_Base_SetConfig+0x164>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_Base_SetConfig+0x110>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <TIM_Base_SetConfig+0x158>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d103      	bne.n	8004b64 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d105      	bne.n	8004b82 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	611a      	str	r2, [r3, #16]
  }
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800
 8004b9c:	40000c00 	.word	0x40000c00
 8004ba0:	40013400 	.word	0x40013400
 8004ba4:	40015000 	.word	0x40015000
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40014400 	.word	0x40014400
 8004bb0:	40014800 	.word	0x40014800

08004bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	f023 0201 	bic.w	r2, r3, #1
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0303 	bic.w	r3, r3, #3
 8004bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f023 0302 	bic.w	r3, r3, #2
 8004c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a30      	ldr	r2, [pc, #192]	; (8004cd0 <TIM_OC1_SetConfig+0x11c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <TIM_OC1_SetConfig+0x88>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <TIM_OC1_SetConfig+0x120>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d00f      	beq.n	8004c3c <TIM_OC1_SetConfig+0x88>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a2e      	ldr	r2, [pc, #184]	; (8004cd8 <TIM_OC1_SetConfig+0x124>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00b      	beq.n	8004c3c <TIM_OC1_SetConfig+0x88>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a2d      	ldr	r2, [pc, #180]	; (8004cdc <TIM_OC1_SetConfig+0x128>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <TIM_OC1_SetConfig+0x88>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ce0 <TIM_OC1_SetConfig+0x12c>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_OC1_SetConfig+0x88>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a2b      	ldr	r2, [pc, #172]	; (8004ce4 <TIM_OC1_SetConfig+0x130>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d10c      	bne.n	8004c56 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f023 0308 	bic.w	r3, r3, #8
 8004c42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f023 0304 	bic.w	r3, r3, #4
 8004c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <TIM_OC1_SetConfig+0x11c>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <TIM_OC1_SetConfig+0xd2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a1c      	ldr	r2, [pc, #112]	; (8004cd4 <TIM_OC1_SetConfig+0x120>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00f      	beq.n	8004c86 <TIM_OC1_SetConfig+0xd2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a1b      	ldr	r2, [pc, #108]	; (8004cd8 <TIM_OC1_SetConfig+0x124>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_OC1_SetConfig+0xd2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a1a      	ldr	r2, [pc, #104]	; (8004cdc <TIM_OC1_SetConfig+0x128>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_OC1_SetConfig+0xd2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <TIM_OC1_SetConfig+0x12c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_OC1_SetConfig+0xd2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a18      	ldr	r2, [pc, #96]	; (8004ce4 <TIM_OC1_SetConfig+0x130>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d111      	bne.n	8004caa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	621a      	str	r2, [r3, #32]
}
 8004cc4:	bf00      	nop
 8004cc6:	371c      	adds	r7, #28
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr
 8004cd0:	40012c00 	.word	0x40012c00
 8004cd4:	40013400 	.word	0x40013400
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800
 8004ce4:	40015000 	.word	0x40015000

08004ce8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	f023 0210 	bic.w	r2, r3, #16
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	021b      	lsls	r3, r3, #8
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0320 	bic.w	r3, r3, #32
 8004d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	011b      	lsls	r3, r3, #4
 8004d3e:	697a      	ldr	r2, [r7, #20]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a2c      	ldr	r2, [pc, #176]	; (8004df8 <TIM_OC2_SetConfig+0x110>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d007      	beq.n	8004d5c <TIM_OC2_SetConfig+0x74>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a2b      	ldr	r2, [pc, #172]	; (8004dfc <TIM_OC2_SetConfig+0x114>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <TIM_OC2_SetConfig+0x74>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <TIM_OC2_SetConfig+0x118>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d10d      	bne.n	8004d78 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	011b      	lsls	r3, r3, #4
 8004d6a:	697a      	ldr	r2, [r7, #20]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a1f      	ldr	r2, [pc, #124]	; (8004df8 <TIM_OC2_SetConfig+0x110>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d013      	beq.n	8004da8 <TIM_OC2_SetConfig+0xc0>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a1e      	ldr	r2, [pc, #120]	; (8004dfc <TIM_OC2_SetConfig+0x114>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00f      	beq.n	8004da8 <TIM_OC2_SetConfig+0xc0>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a1e      	ldr	r2, [pc, #120]	; (8004e04 <TIM_OC2_SetConfig+0x11c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <TIM_OC2_SetConfig+0xc0>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a1d      	ldr	r2, [pc, #116]	; (8004e08 <TIM_OC2_SetConfig+0x120>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <TIM_OC2_SetConfig+0xc0>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1c      	ldr	r2, [pc, #112]	; (8004e0c <TIM_OC2_SetConfig+0x124>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_OC2_SetConfig+0xc0>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <TIM_OC2_SetConfig+0x118>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d113      	bne.n	8004dd0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	699b      	ldr	r3, [r3, #24]
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	693a      	ldr	r2, [r7, #16]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	621a      	str	r2, [r3, #32]
}
 8004dea:	bf00      	nop
 8004dec:	371c      	adds	r7, #28
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40012c00 	.word	0x40012c00
 8004dfc:	40013400 	.word	0x40013400
 8004e00:	40015000 	.word	0x40015000
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800

08004e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b087      	sub	sp, #28
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 0303 	bic.w	r3, r3, #3
 8004e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	021b      	lsls	r3, r3, #8
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	4a2b      	ldr	r2, [pc, #172]	; (8004f1c <TIM_OC3_SetConfig+0x10c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d007      	beq.n	8004e82 <TIM_OC3_SetConfig+0x72>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a2a      	ldr	r2, [pc, #168]	; (8004f20 <TIM_OC3_SetConfig+0x110>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d003      	beq.n	8004e82 <TIM_OC3_SetConfig+0x72>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a29      	ldr	r2, [pc, #164]	; (8004f24 <TIM_OC3_SetConfig+0x114>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d10d      	bne.n	8004e9e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a1e      	ldr	r2, [pc, #120]	; (8004f1c <TIM_OC3_SetConfig+0x10c>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <TIM_OC3_SetConfig+0xbe>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	; (8004f20 <TIM_OC3_SetConfig+0x110>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00f      	beq.n	8004ece <TIM_OC3_SetConfig+0xbe>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a1d      	ldr	r2, [pc, #116]	; (8004f28 <TIM_OC3_SetConfig+0x118>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00b      	beq.n	8004ece <TIM_OC3_SetConfig+0xbe>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	4a1c      	ldr	r2, [pc, #112]	; (8004f2c <TIM_OC3_SetConfig+0x11c>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d007      	beq.n	8004ece <TIM_OC3_SetConfig+0xbe>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a1b      	ldr	r2, [pc, #108]	; (8004f30 <TIM_OC3_SetConfig+0x120>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <TIM_OC3_SetConfig+0xbe>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a16      	ldr	r2, [pc, #88]	; (8004f24 <TIM_OC3_SetConfig+0x114>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d113      	bne.n	8004ef6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	011b      	lsls	r3, r3, #4
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	011b      	lsls	r3, r3, #4
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	621a      	str	r2, [r3, #32]
}
 8004f10:	bf00      	nop
 8004f12:	371c      	adds	r7, #28
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40012c00 	.word	0x40012c00
 8004f20:	40013400 	.word	0x40013400
 8004f24:	40015000 	.word	0x40015000
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	40014400 	.word	0x40014400
 8004f30:	40014800 	.word	0x40014800

08004f34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69db      	ldr	r3, [r3, #28]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	031b      	lsls	r3, r3, #12
 8004f8a:	697a      	ldr	r2, [r7, #20]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a2c      	ldr	r2, [pc, #176]	; (8005044 <TIM_OC4_SetConfig+0x110>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d007      	beq.n	8004fa8 <TIM_OC4_SetConfig+0x74>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a2b      	ldr	r2, [pc, #172]	; (8005048 <TIM_OC4_SetConfig+0x114>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d003      	beq.n	8004fa8 <TIM_OC4_SetConfig+0x74>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a2a      	ldr	r2, [pc, #168]	; (800504c <TIM_OC4_SetConfig+0x118>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d10d      	bne.n	8004fc4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	031b      	lsls	r3, r3, #12
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <TIM_OC4_SetConfig+0x110>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d013      	beq.n	8004ff4 <TIM_OC4_SetConfig+0xc0>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <TIM_OC4_SetConfig+0x114>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d00f      	beq.n	8004ff4 <TIM_OC4_SetConfig+0xc0>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a1e      	ldr	r2, [pc, #120]	; (8005050 <TIM_OC4_SetConfig+0x11c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00b      	beq.n	8004ff4 <TIM_OC4_SetConfig+0xc0>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a1d      	ldr	r2, [pc, #116]	; (8005054 <TIM_OC4_SetConfig+0x120>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d007      	beq.n	8004ff4 <TIM_OC4_SetConfig+0xc0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	; (8005058 <TIM_OC4_SetConfig+0x124>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d003      	beq.n	8004ff4 <TIM_OC4_SetConfig+0xc0>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a17      	ldr	r2, [pc, #92]	; (800504c <TIM_OC4_SetConfig+0x118>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d113      	bne.n	800501c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ffa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005002:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	019b      	lsls	r3, r3, #6
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	4313      	orrs	r3, r2
 800501a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	621a      	str	r2, [r3, #32]
}
 8005036:	bf00      	nop
 8005038:	371c      	adds	r7, #28
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40012c00 	.word	0x40012c00
 8005048:	40013400 	.word	0x40013400
 800504c:	40015000 	.word	0x40015000
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800

0800505c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800505c:	b480      	push	{r7}
 800505e:	b087      	sub	sp, #28
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
 8005070:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800508a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80050a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	041b      	lsls	r3, r3, #16
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a19      	ldr	r2, [pc, #100]	; (8005118 <TIM_OC5_SetConfig+0xbc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <TIM_OC5_SetConfig+0x82>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a18      	ldr	r2, [pc, #96]	; (800511c <TIM_OC5_SetConfig+0xc0>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00f      	beq.n	80050de <TIM_OC5_SetConfig+0x82>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a17      	ldr	r2, [pc, #92]	; (8005120 <TIM_OC5_SetConfig+0xc4>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d00b      	beq.n	80050de <TIM_OC5_SetConfig+0x82>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a16      	ldr	r2, [pc, #88]	; (8005124 <TIM_OC5_SetConfig+0xc8>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <TIM_OC5_SetConfig+0x82>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a15      	ldr	r2, [pc, #84]	; (8005128 <TIM_OC5_SetConfig+0xcc>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_OC5_SetConfig+0x82>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a14      	ldr	r2, [pc, #80]	; (800512c <TIM_OC5_SetConfig+0xd0>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d109      	bne.n	80050f2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	697a      	ldr	r2, [r7, #20]
 80050f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68fa      	ldr	r2, [r7, #12]
 80050fc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	621a      	str	r2, [r3, #32]
}
 800510c:	bf00      	nop
 800510e:	371c      	adds	r7, #28
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr
 8005118:	40012c00 	.word	0x40012c00
 800511c:	40013400 	.word	0x40013400
 8005120:	40014000 	.word	0x40014000
 8005124:	40014400 	.word	0x40014400
 8005128:	40014800 	.word	0x40014800
 800512c:	40015000 	.word	0x40015000

08005130 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800515e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	021b      	lsls	r3, r3, #8
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005176:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a1a      	ldr	r2, [pc, #104]	; (80051f0 <TIM_OC6_SetConfig+0xc0>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <TIM_OC6_SetConfig+0x84>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a19      	ldr	r2, [pc, #100]	; (80051f4 <TIM_OC6_SetConfig+0xc4>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00f      	beq.n	80051b4 <TIM_OC6_SetConfig+0x84>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <TIM_OC6_SetConfig+0xc8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d00b      	beq.n	80051b4 <TIM_OC6_SetConfig+0x84>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a17      	ldr	r2, [pc, #92]	; (80051fc <TIM_OC6_SetConfig+0xcc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d007      	beq.n	80051b4 <TIM_OC6_SetConfig+0x84>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a16      	ldr	r2, [pc, #88]	; (8005200 <TIM_OC6_SetConfig+0xd0>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d003      	beq.n	80051b4 <TIM_OC6_SetConfig+0x84>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a15      	ldr	r2, [pc, #84]	; (8005204 <TIM_OC6_SetConfig+0xd4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d109      	bne.n	80051c8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80051ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	029b      	lsls	r3, r3, #10
 80051c2:	697a      	ldr	r2, [r7, #20]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	685a      	ldr	r2, [r3, #4]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	693a      	ldr	r2, [r7, #16]
 80051e0:	621a      	str	r2, [r3, #32]
}
 80051e2:	bf00      	nop
 80051e4:	371c      	adds	r7, #28
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	40012c00 	.word	0x40012c00
 80051f4:	40013400 	.word	0x40013400
 80051f8:	40014000 	.word	0x40014000
 80051fc:	40014400 	.word	0x40014400
 8005200:	40014800 	.word	0x40014800
 8005204:	40015000 	.word	0x40015000

08005208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a1b      	ldr	r3, [r3, #32]
 800521e:	f023 0201 	bic.w	r2, r3, #1
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	011b      	lsls	r3, r3, #4
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 030a 	bic.w	r3, r3, #10
 8005244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	693a      	ldr	r2, [r7, #16]
 8005252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	621a      	str	r2, [r3, #32]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005264:	4770      	bx	lr

08005266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005266:	b480      	push	{r7}
 8005268:	b087      	sub	sp, #28
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f023 0210 	bic.w	r2, r3, #16
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005290:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	031b      	lsls	r3, r3, #12
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	4313      	orrs	r3, r2
 800529a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b085      	sub	sp, #20
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80052dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f043 0307 	orr.w	r3, r3, #7
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800531a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	021a      	lsls	r2, r3, #8
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	431a      	orrs	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	4313      	orrs	r3, r2
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005340:	b480      	push	{r7}
 8005342:	b087      	sub	sp, #28
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	2201      	movs	r2, #1
 8005354:	fa02 f303 	lsl.w	r3, r2, r3
 8005358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6a1a      	ldr	r2, [r3, #32]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	43db      	mvns	r3, r3
 8005362:	401a      	ands	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 031f 	and.w	r3, r3, #31
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	fa01 f303 	lsl.w	r3, r1, r3
 8005378:	431a      	orrs	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	bf00      	nop
 8005380:	371c      	adds	r7, #28
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr
	...

0800538c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800538c:	b480      	push	{r7}
 800538e:	b085      	sub	sp, #20
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e074      	b.n	800548e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a34      	ldr	r2, [pc, #208]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d009      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a33      	ldr	r2, [pc, #204]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a31      	ldr	r2, [pc, #196]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d108      	bne.n	80053f4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80053e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	4313      	orrs	r3, r2
 8005408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a21      	ldr	r2, [pc, #132]	; (800549c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d022      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005424:	d01d      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a1f      	ldr	r2, [pc, #124]	; (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d018      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d013      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00e      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a15      	ldr	r2, [pc, #84]	; (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d009      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a11      	ldr	r2, [pc, #68]	; (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d10c      	bne.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	4313      	orrs	r3, r2
 8005472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68ba      	ldr	r2, [r7, #8]
 800547a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	40012c00 	.word	0x40012c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40015000 	.word	0x40015000
 80054a8:	40000400 	.word	0x40000400
 80054ac:	40000800 	.word	0x40000800
 80054b0:	40000c00 	.word	0x40000c00
 80054b4:	40014000 	.word	0x40014000

080054b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054c2:	2300      	movs	r3, #0
 80054c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e078      	b.n	80055c6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	4313      	orrs	r3, r2
 8005504:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	041b      	lsls	r3, r3, #16
 800554a:	4313      	orrs	r3, r2
 800554c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a1c      	ldr	r2, [pc, #112]	; (80055d4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1b      	ldr	r2, [pc, #108]	; (80055d8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d004      	beq.n	800557a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a19      	ldr	r2, [pc, #100]	; (80055dc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d11c      	bne.n	80055b4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005584:	051b      	lsls	r3, r3, #20
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	4313      	orrs	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055c4:	2300      	movs	r3, #0
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3714      	adds	r7, #20
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	40012c00 	.word	0x40012c00
 80055d8:	40013400 	.word	0x40013400
 80055dc:	40015000 	.word	0x40015000

080055e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005644:	b480      	push	{r7}
 8005646:	b083      	sub	sp, #12
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e042      	b.n	8005704 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005684:	2b00      	cmp	r3, #0
 8005686:	d106      	bne.n	8005696 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7fc fbb9 	bl	8001e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2224      	movs	r2, #36	; 0x24
 800569a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f022 0201 	bic.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 fb24 	bl	8005d04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f825 	bl	800570c <UART_SetConfig>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e01b      	b.n	8005704 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 fba3 	bl	8005e48 <UART_CheckIdleState>
 8005702:	4603      	mov	r3, r0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3708      	adds	r7, #8
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}

0800570c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800570c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005710:	b08c      	sub	sp, #48	; 0x30
 8005712:	af00      	add	r7, sp, #0
 8005714:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	431a      	orrs	r2, r3
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	431a      	orrs	r2, r3
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	4313      	orrs	r3, r2
 8005732:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4baa      	ldr	r3, [pc, #680]	; (80059e4 <UART_SetConfig+0x2d8>)
 800573c:	4013      	ands	r3, r2
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005744:	430b      	orrs	r3, r1
 8005746:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a9f      	ldr	r2, [pc, #636]	; (80059e8 <UART_SetConfig+0x2dc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d004      	beq.n	8005778 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005774:	4313      	orrs	r3, r2
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005782:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800578c:	430b      	orrs	r3, r1
 800578e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005796:	f023 010f 	bic.w	r1, r3, #15
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a90      	ldr	r2, [pc, #576]	; (80059ec <UART_SetConfig+0x2e0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d125      	bne.n	80057fc <UART_SetConfig+0xf0>
 80057b0:	4b8f      	ldr	r3, [pc, #572]	; (80059f0 <UART_SetConfig+0x2e4>)
 80057b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d81a      	bhi.n	80057f4 <UART_SetConfig+0xe8>
 80057be:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0xb8>)
 80057c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c4:	080057d5 	.word	0x080057d5
 80057c8:	080057e5 	.word	0x080057e5
 80057cc:	080057dd 	.word	0x080057dd
 80057d0:	080057ed 	.word	0x080057ed
 80057d4:	2301      	movs	r3, #1
 80057d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057da:	e116      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80057dc:	2302      	movs	r3, #2
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057e2:	e112      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80057e4:	2304      	movs	r3, #4
 80057e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057ea:	e10e      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80057ec:	2308      	movs	r3, #8
 80057ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057f2:	e10a      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80057f4:	2310      	movs	r3, #16
 80057f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80057fa:	e106      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a7c      	ldr	r2, [pc, #496]	; (80059f4 <UART_SetConfig+0x2e8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d138      	bne.n	8005878 <UART_SetConfig+0x16c>
 8005806:	4b7a      	ldr	r3, [pc, #488]	; (80059f0 <UART_SetConfig+0x2e4>)
 8005808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800580c:	f003 030c 	and.w	r3, r3, #12
 8005810:	2b0c      	cmp	r3, #12
 8005812:	d82d      	bhi.n	8005870 <UART_SetConfig+0x164>
 8005814:	a201      	add	r2, pc, #4	; (adr r2, 800581c <UART_SetConfig+0x110>)
 8005816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581a:	bf00      	nop
 800581c:	08005851 	.word	0x08005851
 8005820:	08005871 	.word	0x08005871
 8005824:	08005871 	.word	0x08005871
 8005828:	08005871 	.word	0x08005871
 800582c:	08005861 	.word	0x08005861
 8005830:	08005871 	.word	0x08005871
 8005834:	08005871 	.word	0x08005871
 8005838:	08005871 	.word	0x08005871
 800583c:	08005859 	.word	0x08005859
 8005840:	08005871 	.word	0x08005871
 8005844:	08005871 	.word	0x08005871
 8005848:	08005871 	.word	0x08005871
 800584c:	08005869 	.word	0x08005869
 8005850:	2300      	movs	r3, #0
 8005852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005856:	e0d8      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005858:	2302      	movs	r3, #2
 800585a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800585e:	e0d4      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005860:	2304      	movs	r3, #4
 8005862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005866:	e0d0      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005868:	2308      	movs	r3, #8
 800586a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800586e:	e0cc      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005870:	2310      	movs	r3, #16
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005876:	e0c8      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a5e      	ldr	r2, [pc, #376]	; (80059f8 <UART_SetConfig+0x2ec>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d125      	bne.n	80058ce <UART_SetConfig+0x1c2>
 8005882:	4b5b      	ldr	r3, [pc, #364]	; (80059f0 <UART_SetConfig+0x2e4>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800588c:	2b30      	cmp	r3, #48	; 0x30
 800588e:	d016      	beq.n	80058be <UART_SetConfig+0x1b2>
 8005890:	2b30      	cmp	r3, #48	; 0x30
 8005892:	d818      	bhi.n	80058c6 <UART_SetConfig+0x1ba>
 8005894:	2b20      	cmp	r3, #32
 8005896:	d00a      	beq.n	80058ae <UART_SetConfig+0x1a2>
 8005898:	2b20      	cmp	r3, #32
 800589a:	d814      	bhi.n	80058c6 <UART_SetConfig+0x1ba>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <UART_SetConfig+0x19a>
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d008      	beq.n	80058b6 <UART_SetConfig+0x1aa>
 80058a4:	e00f      	b.n	80058c6 <UART_SetConfig+0x1ba>
 80058a6:	2300      	movs	r3, #0
 80058a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058ac:	e0ad      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80058ae:	2302      	movs	r3, #2
 80058b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058b4:	e0a9      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80058b6:	2304      	movs	r3, #4
 80058b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058bc:	e0a5      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80058be:	2308      	movs	r3, #8
 80058c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058c4:	e0a1      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80058c6:	2310      	movs	r3, #16
 80058c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80058cc:	e09d      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a4a      	ldr	r2, [pc, #296]	; (80059fc <UART_SetConfig+0x2f0>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d125      	bne.n	8005924 <UART_SetConfig+0x218>
 80058d8:	4b45      	ldr	r3, [pc, #276]	; (80059f0 <UART_SetConfig+0x2e4>)
 80058da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80058e2:	2bc0      	cmp	r3, #192	; 0xc0
 80058e4:	d016      	beq.n	8005914 <UART_SetConfig+0x208>
 80058e6:	2bc0      	cmp	r3, #192	; 0xc0
 80058e8:	d818      	bhi.n	800591c <UART_SetConfig+0x210>
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d00a      	beq.n	8005904 <UART_SetConfig+0x1f8>
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	d814      	bhi.n	800591c <UART_SetConfig+0x210>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <UART_SetConfig+0x1f0>
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d008      	beq.n	800590c <UART_SetConfig+0x200>
 80058fa:	e00f      	b.n	800591c <UART_SetConfig+0x210>
 80058fc:	2300      	movs	r3, #0
 80058fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005902:	e082      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005904:	2302      	movs	r3, #2
 8005906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800590a:	e07e      	b.n	8005a0a <UART_SetConfig+0x2fe>
 800590c:	2304      	movs	r3, #4
 800590e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005912:	e07a      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005914:	2308      	movs	r3, #8
 8005916:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800591a:	e076      	b.n	8005a0a <UART_SetConfig+0x2fe>
 800591c:	2310      	movs	r3, #16
 800591e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005922:	e072      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a35      	ldr	r2, [pc, #212]	; (8005a00 <UART_SetConfig+0x2f4>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d12a      	bne.n	8005984 <UART_SetConfig+0x278>
 800592e:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <UART_SetConfig+0x2e4>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005938:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800593c:	d01a      	beq.n	8005974 <UART_SetConfig+0x268>
 800593e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005942:	d81b      	bhi.n	800597c <UART_SetConfig+0x270>
 8005944:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005948:	d00c      	beq.n	8005964 <UART_SetConfig+0x258>
 800594a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800594e:	d815      	bhi.n	800597c <UART_SetConfig+0x270>
 8005950:	2b00      	cmp	r3, #0
 8005952:	d003      	beq.n	800595c <UART_SetConfig+0x250>
 8005954:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005958:	d008      	beq.n	800596c <UART_SetConfig+0x260>
 800595a:	e00f      	b.n	800597c <UART_SetConfig+0x270>
 800595c:	2300      	movs	r3, #0
 800595e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005962:	e052      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005964:	2302      	movs	r3, #2
 8005966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800596a:	e04e      	b.n	8005a0a <UART_SetConfig+0x2fe>
 800596c:	2304      	movs	r3, #4
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005972:	e04a      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005974:	2308      	movs	r3, #8
 8005976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800597a:	e046      	b.n	8005a0a <UART_SetConfig+0x2fe>
 800597c:	2310      	movs	r3, #16
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005982:	e042      	b.n	8005a0a <UART_SetConfig+0x2fe>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a17      	ldr	r2, [pc, #92]	; (80059e8 <UART_SetConfig+0x2dc>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d13a      	bne.n	8005a04 <UART_SetConfig+0x2f8>
 800598e:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <UART_SetConfig+0x2e4>)
 8005990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005994:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800599c:	d01a      	beq.n	80059d4 <UART_SetConfig+0x2c8>
 800599e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80059a2:	d81b      	bhi.n	80059dc <UART_SetConfig+0x2d0>
 80059a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059a8:	d00c      	beq.n	80059c4 <UART_SetConfig+0x2b8>
 80059aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059ae:	d815      	bhi.n	80059dc <UART_SetConfig+0x2d0>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d003      	beq.n	80059bc <UART_SetConfig+0x2b0>
 80059b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059b8:	d008      	beq.n	80059cc <UART_SetConfig+0x2c0>
 80059ba:	e00f      	b.n	80059dc <UART_SetConfig+0x2d0>
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059c2:	e022      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80059c4:	2302      	movs	r3, #2
 80059c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059ca:	e01e      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80059cc:	2304      	movs	r3, #4
 80059ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059d2:	e01a      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80059d4:	2308      	movs	r3, #8
 80059d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059da:	e016      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80059dc:	2310      	movs	r3, #16
 80059de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80059e2:	e012      	b.n	8005a0a <UART_SetConfig+0x2fe>
 80059e4:	cfff69f3 	.word	0xcfff69f3
 80059e8:	40008000 	.word	0x40008000
 80059ec:	40013800 	.word	0x40013800
 80059f0:	40021000 	.word	0x40021000
 80059f4:	40004400 	.word	0x40004400
 80059f8:	40004800 	.word	0x40004800
 80059fc:	40004c00 	.word	0x40004c00
 8005a00:	40005000 	.word	0x40005000
 8005a04:	2310      	movs	r3, #16
 8005a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4aae      	ldr	r2, [pc, #696]	; (8005cc8 <UART_SetConfig+0x5bc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	f040 8097 	bne.w	8005b44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005a1a:	2b08      	cmp	r3, #8
 8005a1c:	d823      	bhi.n	8005a66 <UART_SetConfig+0x35a>
 8005a1e:	a201      	add	r2, pc, #4	; (adr r2, 8005a24 <UART_SetConfig+0x318>)
 8005a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a24:	08005a49 	.word	0x08005a49
 8005a28:	08005a67 	.word	0x08005a67
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a67 	.word	0x08005a67
 8005a34:	08005a57 	.word	0x08005a57
 8005a38:	08005a67 	.word	0x08005a67
 8005a3c:	08005a67 	.word	0x08005a67
 8005a40:	08005a67 	.word	0x08005a67
 8005a44:	08005a5f 	.word	0x08005a5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a48:	f7fd fd84 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a4e:	e010      	b.n	8005a72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005a50:	4b9e      	ldr	r3, [pc, #632]	; (8005ccc <UART_SetConfig+0x5c0>)
 8005a52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a54:	e00d      	b.n	8005a72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a56:	f7fd fd0f 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8005a5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005a5c:	e009      	b.n	8005a72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005a64:	e005      	b.n	8005a72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005a70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8130 	beq.w	8005cda <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a7e:	4a94      	ldr	r2, [pc, #592]	; (8005cd0 <UART_SetConfig+0x5c4>)
 8005a80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d305      	bcc.n	8005aaa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d903      	bls.n	8005ab2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005ab0:	e113      	b.n	8005cda <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	60fa      	str	r2, [r7, #12]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abe:	4a84      	ldr	r2, [pc, #528]	; (8005cd0 <UART_SetConfig+0x5c4>)
 8005ac0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	607a      	str	r2, [r7, #4]
 8005acc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ad0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ad4:	f7fb f8e0 	bl	8000c98 <__aeabi_uldivmod>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	4610      	mov	r0, r2
 8005ade:	4619      	mov	r1, r3
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	020b      	lsls	r3, r1, #8
 8005aea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005aee:	0202      	lsls	r2, r0, #8
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	6849      	ldr	r1, [r1, #4]
 8005af4:	0849      	lsrs	r1, r1, #1
 8005af6:	2000      	movs	r0, #0
 8005af8:	460c      	mov	r4, r1
 8005afa:	4605      	mov	r5, r0
 8005afc:	eb12 0804 	adds.w	r8, r2, r4
 8005b00:	eb43 0905 	adc.w	r9, r3, r5
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	469a      	mov	sl, r3
 8005b0c:	4693      	mov	fp, r2
 8005b0e:	4652      	mov	r2, sl
 8005b10:	465b      	mov	r3, fp
 8005b12:	4640      	mov	r0, r8
 8005b14:	4649      	mov	r1, r9
 8005b16:	f7fb f8bf 	bl	8000c98 <__aeabi_uldivmod>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4613      	mov	r3, r2
 8005b20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b28:	d308      	bcc.n	8005b3c <UART_SetConfig+0x430>
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b30:	d204      	bcs.n	8005b3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	6a3a      	ldr	r2, [r7, #32]
 8005b38:	60da      	str	r2, [r3, #12]
 8005b3a:	e0ce      	b.n	8005cda <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005b42:	e0ca      	b.n	8005cda <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b4c:	d166      	bne.n	8005c1c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005b4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b52:	2b08      	cmp	r3, #8
 8005b54:	d827      	bhi.n	8005ba6 <UART_SetConfig+0x49a>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <UART_SetConfig+0x450>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b81 	.word	0x08005b81
 8005b60:	08005b89 	.word	0x08005b89
 8005b64:	08005b91 	.word	0x08005b91
 8005b68:	08005ba7 	.word	0x08005ba7
 8005b6c:	08005b97 	.word	0x08005b97
 8005b70:	08005ba7 	.word	0x08005ba7
 8005b74:	08005ba7 	.word	0x08005ba7
 8005b78:	08005ba7 	.word	0x08005ba7
 8005b7c:	08005b9f 	.word	0x08005b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b80:	f7fd fce8 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8005b84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b86:	e014      	b.n	8005bb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b88:	f7fd fcfa 	bl	8003580 <HAL_RCC_GetPCLK2Freq>
 8005b8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b8e:	e010      	b.n	8005bb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b90:	4b4e      	ldr	r3, [pc, #312]	; (8005ccc <UART_SetConfig+0x5c0>)
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b94:	e00d      	b.n	8005bb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b96:	f7fd fc6f 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8005b9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b9c:	e009      	b.n	8005bb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ba4:	e005      	b.n	8005bb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f000 8090 	beq.w	8005cda <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbe:	4a44      	ldr	r2, [pc, #272]	; (8005cd0 <UART_SetConfig+0x5c4>)
 8005bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bcc:	005a      	lsls	r2, r3, #1
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	085b      	lsrs	r3, r3, #1
 8005bd4:	441a      	add	r2, r3
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	2b0f      	cmp	r3, #15
 8005be4:	d916      	bls.n	8005c14 <UART_SetConfig+0x508>
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bec:	d212      	bcs.n	8005c14 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	f023 030f 	bic.w	r3, r3, #15
 8005bf6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	085b      	lsrs	r3, r3, #1
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f003 0307 	and.w	r3, r3, #7
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	8bfb      	ldrh	r3, [r7, #30]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	8bfa      	ldrh	r2, [r7, #30]
 8005c10:	60da      	str	r2, [r3, #12]
 8005c12:	e062      	b.n	8005cda <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c1a:	e05e      	b.n	8005cda <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c1c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d828      	bhi.n	8005c76 <UART_SetConfig+0x56a>
 8005c24:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x520>)
 8005c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2a:	bf00      	nop
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c59 	.word	0x08005c59
 8005c34:	08005c61 	.word	0x08005c61
 8005c38:	08005c77 	.word	0x08005c77
 8005c3c:	08005c67 	.word	0x08005c67
 8005c40:	08005c77 	.word	0x08005c77
 8005c44:	08005c77 	.word	0x08005c77
 8005c48:	08005c77 	.word	0x08005c77
 8005c4c:	08005c6f 	.word	0x08005c6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005c50:	f7fd fc80 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8005c54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c56:	e014      	b.n	8005c82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005c58:	f7fd fc92 	bl	8003580 <HAL_RCC_GetPCLK2Freq>
 8005c5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c5e:	e010      	b.n	8005c82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c60:	4b1a      	ldr	r3, [pc, #104]	; (8005ccc <UART_SetConfig+0x5c0>)
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c64:	e00d      	b.n	8005c82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c66:	f7fd fc07 	bl	8003478 <HAL_RCC_GetSysClockFreq>
 8005c6a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005c6c:	e009      	b.n	8005c82 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005c74:	e005      	b.n	8005c82 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005c76:	2300      	movs	r3, #0
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005c80:	bf00      	nop
    }

    if (pclk != 0U)
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d028      	beq.n	8005cda <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	4a10      	ldr	r2, [pc, #64]	; (8005cd0 <UART_SetConfig+0x5c4>)
 8005c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c92:	461a      	mov	r2, r3
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	441a      	add	r2, r3
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005caa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	2b0f      	cmp	r3, #15
 8005cb0:	d910      	bls.n	8005cd4 <UART_SetConfig+0x5c8>
 8005cb2:	6a3b      	ldr	r3, [r7, #32]
 8005cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb8:	d20c      	bcs.n	8005cd4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	60da      	str	r2, [r3, #12]
 8005cc4:	e009      	b.n	8005cda <UART_SetConfig+0x5ce>
 8005cc6:	bf00      	nop
 8005cc8:	40008000 	.word	0x40008000
 8005ccc:	00f42400 	.word	0x00f42400
 8005cd0:	080090f8 	.word	0x080090f8
      }
      else
      {
        ret = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2200      	movs	r2, #0
 8005cee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005cf6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3730      	adds	r7, #48	; 0x30
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005d04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	f003 0308 	and.w	r3, r3, #8
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00a      	beq.n	8005d2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	f003 0310 	and.w	r3, r3, #16
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01a      	beq.n	8005e1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	430a      	orrs	r2, r1
 8005df8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e02:	d10a      	bne.n	8005e1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00a      	beq.n	8005e3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	605a      	str	r2, [r3, #4]
  }
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b098      	sub	sp, #96	; 0x60
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e58:	f7fc fb86 	bl	8002568 <HAL_GetTick>
 8005e5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b08      	cmp	r3, #8
 8005e6a:	d12f      	bne.n	8005ecc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e74:	2200      	movs	r2, #0
 8005e76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f88e 	bl	8005f9c <UART_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d022      	beq.n	8005ecc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e8e:	e853 3f00 	ldrex	r3, [r3]
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8005ea6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005eaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eac:	e841 2300 	strex	r3, r2, [r1]
 8005eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e6      	bne.n	8005e86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e063      	b.n	8005f94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d149      	bne.n	8005f6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f857 	bl	8005f9c <UART_WaitOnFlagUntilTimeout>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d03c      	beq.n	8005f6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	623b      	str	r3, [r7, #32]
   return(result);
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f12:	633b      	str	r3, [r7, #48]	; 0x30
 8005f14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e6      	bne.n	8005ef4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3308      	adds	r3, #8
 8005f44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f46:	61fa      	str	r2, [r7, #28]
 8005f48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	69b9      	ldr	r1, [r7, #24]
 8005f4c:	69fa      	ldr	r2, [r7, #28]
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	617b      	str	r3, [r7, #20]
   return(result);
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e5      	bne.n	8005f26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e012      	b.n	8005f94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2220      	movs	r2, #32
 8005f72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2220      	movs	r2, #32
 8005f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3758      	adds	r7, #88	; 0x58
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fac:	e04f      	b.n	800604e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d04b      	beq.n	800604e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fb6:	f7fc fad7 	bl	8002568 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	69ba      	ldr	r2, [r7, #24]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d302      	bcc.n	8005fcc <UART_WaitOnFlagUntilTimeout+0x30>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e04e      	b.n	800606e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0304 	and.w	r3, r3, #4
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d037      	beq.n	800604e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b80      	cmp	r3, #128	; 0x80
 8005fe2:	d034      	beq.n	800604e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b40      	cmp	r3, #64	; 0x40
 8005fe8:	d031      	beq.n	800604e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69db      	ldr	r3, [r3, #28]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d110      	bne.n	800601a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2208      	movs	r2, #8
 8005ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f838 	bl	8006076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2208      	movs	r2, #8
 800600a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	e029      	b.n	800606e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	69db      	ldr	r3, [r3, #28]
 8006020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006028:	d111      	bne.n	800604e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f81e 	bl	8006076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2220      	movs	r2, #32
 800603e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e00f      	b.n	800606e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	69da      	ldr	r2, [r3, #28]
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4013      	ands	r3, r2
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	429a      	cmp	r2, r3
 800605c:	bf0c      	ite	eq
 800605e:	2301      	moveq	r3, #1
 8006060:	2300      	movne	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	461a      	mov	r2, r3
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	429a      	cmp	r2, r3
 800606a:	d0a0      	beq.n	8005fae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}

08006076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006076:	b480      	push	{r7}
 8006078:	b095      	sub	sp, #84	; 0x54
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006086:	e853 3f00 	ldrex	r3, [r3]
 800608a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800609c:	643b      	str	r3, [r7, #64]	; 0x40
 800609e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80060a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80060a4:	e841 2300 	strex	r3, r2, [r1]
 80060a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e6      	bne.n	800607e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	e853 3f00 	ldrex	r3, [r3]
 80060be:	61fb      	str	r3, [r7, #28]
   return(result);
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060c6:	f023 0301 	bic.w	r3, r3, #1
 80060ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3308      	adds	r3, #8
 80060d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80060da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060dc:	e841 2300 	strex	r3, r2, [r1]
 80060e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1e3      	bne.n	80060b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d118      	bne.n	8006122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	f023 0310 	bic.w	r3, r3, #16
 8006104:	647b      	str	r3, [r7, #68]	; 0x44
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800610e:	61bb      	str	r3, [r7, #24]
 8006110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006112:	6979      	ldr	r1, [r7, #20]
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	e841 2300 	strex	r3, r2, [r1]
 800611a:	613b      	str	r3, [r7, #16]
   return(result);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1e6      	bne.n	80060f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2220      	movs	r2, #32
 8006126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006136:	bf00      	nop
 8006138:	3754      	adds	r7, #84	; 0x54
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr

08006142 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006142:	b480      	push	{r7}
 8006144:	b085      	sub	sp, #20
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006150:	2b01      	cmp	r3, #1
 8006152:	d101      	bne.n	8006158 <HAL_UARTEx_DisableFifoMode+0x16>
 8006154:	2302      	movs	r3, #2
 8006156:	e027      	b.n	80061a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2224      	movs	r2, #36	; 0x24
 8006164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0201 	bic.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006186:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2220      	movs	r2, #32
 800619a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061a6:	2300      	movs	r3, #0
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d101      	bne.n	80061cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061c8:	2302      	movs	r3, #2
 80061ca:	e02d      	b.n	8006228 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2224      	movs	r2, #36	; 0x24
 80061d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0201 	bic.w	r2, r2, #1
 80061f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	683a      	ldr	r2, [r7, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f84f 	bl	80062ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006240:	2b01      	cmp	r3, #1
 8006242:	d101      	bne.n	8006248 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006244:	2302      	movs	r3, #2
 8006246:	e02d      	b.n	80062a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2224      	movs	r2, #36	; 0x24
 8006254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f022 0201 	bic.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f811 	bl	80062ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68fa      	ldr	r2, [r7, #12]
 8006290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2220      	movs	r2, #32
 8006296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d108      	bne.n	80062ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062cc:	e031      	b.n	8006332 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062ce:	2308      	movs	r3, #8
 80062d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062d2:	2308      	movs	r3, #8
 80062d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	0e5b      	lsrs	r3, r3, #25
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	0f5b      	lsrs	r3, r3, #29
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	f003 0307 	and.w	r3, r3, #7
 80062f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	7b3a      	ldrb	r2, [r7, #12]
 80062fa:	4911      	ldr	r1, [pc, #68]	; (8006340 <UARTEx_SetNbDataToProcess+0x94>)
 80062fc:	5c8a      	ldrb	r2, [r1, r2]
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006302:	7b3a      	ldrb	r2, [r7, #12]
 8006304:	490f      	ldr	r1, [pc, #60]	; (8006344 <UARTEx_SetNbDataToProcess+0x98>)
 8006306:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006308:	fb93 f3f2 	sdiv	r3, r3, r2
 800630c:	b29a      	uxth	r2, r3
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	7b7a      	ldrb	r2, [r7, #13]
 8006318:	4909      	ldr	r1, [pc, #36]	; (8006340 <UARTEx_SetNbDataToProcess+0x94>)
 800631a:	5c8a      	ldrb	r2, [r1, r2]
 800631c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006320:	7b7a      	ldrb	r2, [r7, #13]
 8006322:	4908      	ldr	r1, [pc, #32]	; (8006344 <UARTEx_SetNbDataToProcess+0x98>)
 8006324:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006326:	fb93 f3f2 	sdiv	r3, r3, r2
 800632a:	b29a      	uxth	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006332:	bf00      	nop
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	08009110 	.word	0x08009110
 8006344:	08009118 	.word	0x08009118

08006348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	; 0x28
 800634c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800634e:	2300      	movs	r3, #0
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006352:	4b7d      	ldr	r3, [pc, #500]	; (8006548 <xTaskIncrementTick+0x200>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f040 80ec 	bne.w	8006534 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800635c:	4b7b      	ldr	r3, [pc, #492]	; (800654c <xTaskIncrementTick+0x204>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	3301      	adds	r3, #1
 8006362:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006364:	4a79      	ldr	r2, [pc, #484]	; (800654c <xTaskIncrementTick+0x204>)
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d120      	bne.n	80063b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8006370:	4b77      	ldr	r3, [pc, #476]	; (8006550 <xTaskIncrementTick+0x208>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	607b      	str	r3, [r7, #4]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xTaskIncrementTick+0x46>
 8006390:	4b6f      	ldr	r3, [pc, #444]	; (8006550 <xTaskIncrementTick+0x208>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	4b6f      	ldr	r3, [pc, #444]	; (8006554 <xTaskIncrementTick+0x20c>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a6d      	ldr	r2, [pc, #436]	; (8006550 <xTaskIncrementTick+0x208>)
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4a6d      	ldr	r2, [pc, #436]	; (8006554 <xTaskIncrementTick+0x20c>)
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	6013      	str	r3, [r2, #0]
 80063a4:	4b6c      	ldr	r3, [pc, #432]	; (8006558 <xTaskIncrementTick+0x210>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	4a6b      	ldr	r2, [pc, #428]	; (8006558 <xTaskIncrementTick+0x210>)
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	f000 f93d 	bl	800662c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80063b2:	4b6a      	ldr	r3, [pc, #424]	; (800655c <xTaskIncrementTick+0x214>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6a3a      	ldr	r2, [r7, #32]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	f0c0 80a6 	bcc.w	800650a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063be:	4b64      	ldr	r3, [pc, #400]	; (8006550 <xTaskIncrementTick+0x208>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063c8:	4b64      	ldr	r3, [pc, #400]	; (800655c <xTaskIncrementTick+0x214>)
 80063ca:	f04f 32ff 	mov.w	r2, #4294967295
 80063ce:	601a      	str	r2, [r3, #0]
                    break;
 80063d0:	e09b      	b.n	800650a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d2:	4b5f      	ldr	r3, [pc, #380]	; (8006550 <xTaskIncrementTick+0x208>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80063e2:	6a3a      	ldr	r2, [r7, #32]
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d203      	bcs.n	80063f2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80063ea:	4a5c      	ldr	r2, [pc, #368]	; (800655c <xTaskIncrementTick+0x214>)
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80063f0:	e08b      	b.n	800650a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	69ba      	ldr	r2, [r7, #24]
 80063fe:	68d2      	ldr	r2, [r2, #12]
 8006400:	609a      	str	r2, [r3, #8]
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	6892      	ldr	r2, [r2, #8]
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	3304      	adds	r3, #4
 8006414:	429a      	cmp	r2, r3
 8006416:	d103      	bne.n	8006420 <xTaskIncrementTick+0xd8>
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	605a      	str	r2, [r3, #4]
 8006420:	69bb      	ldr	r3, [r7, #24]
 8006422:	2200      	movs	r2, #0
 8006424:	615a      	str	r2, [r3, #20]
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	1e5a      	subs	r2, r3, #1
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006434:	2b00      	cmp	r3, #0
 8006436:	d01e      	beq.n	8006476 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	6a12      	ldr	r2, [r2, #32]
 8006446:	609a      	str	r2, [r3, #8]
 8006448:	69bb      	ldr	r3, [r7, #24]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	69d2      	ldr	r2, [r2, #28]
 8006450:	605a      	str	r2, [r3, #4]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	3318      	adds	r3, #24
 800645a:	429a      	cmp	r2, r3
 800645c:	d103      	bne.n	8006466 <xTaskIncrementTick+0x11e>
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	6a1a      	ldr	r2, [r3, #32]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2200      	movs	r2, #0
 800646a:	629a      	str	r2, [r3, #40]	; 0x28
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	1e5a      	subs	r2, r3, #1
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	2201      	movs	r2, #1
 800647c:	409a      	lsls	r2, r3
 800647e:	4b38      	ldr	r3, [pc, #224]	; (8006560 <xTaskIncrementTick+0x218>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4313      	orrs	r3, r2
 8006484:	4a36      	ldr	r2, [pc, #216]	; (8006560 <xTaskIncrementTick+0x218>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	69bb      	ldr	r3, [r7, #24]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4935      	ldr	r1, [pc, #212]	; (8006564 <xTaskIncrementTick+0x21c>)
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	3304      	adds	r3, #4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60bb      	str	r3, [r7, #8]
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	609a      	str	r2, [r3, #8]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	60da      	str	r2, [r3, #12]
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	3204      	adds	r2, #4
 80064b4:	605a      	str	r2, [r3, #4]
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	1d1a      	adds	r2, r3, #4
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	609a      	str	r2, [r3, #8]
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064c2:	4613      	mov	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4413      	add	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4a26      	ldr	r2, [pc, #152]	; (8006564 <xTaskIncrementTick+0x21c>)
 80064cc:	441a      	add	r2, r3
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	615a      	str	r2, [r3, #20]
 80064d2:	69bb      	ldr	r3, [r7, #24]
 80064d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d6:	4923      	ldr	r1, [pc, #140]	; (8006564 <xTaskIncrementTick+0x21c>)
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	440b      	add	r3, r1
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	1c59      	adds	r1, r3, #1
 80064e6:	481f      	ldr	r0, [pc, #124]	; (8006564 <xTaskIncrementTick+0x21c>)
 80064e8:	4613      	mov	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4403      	add	r3, r0
 80064f2:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f8:	4b1b      	ldr	r3, [pc, #108]	; (8006568 <xTaskIncrementTick+0x220>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fe:	429a      	cmp	r2, r3
 8006500:	f67f af5d 	bls.w	80063be <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006508:	e759      	b.n	80063be <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800650a:	4b17      	ldr	r3, [pc, #92]	; (8006568 <xTaskIncrementTick+0x220>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006510:	4914      	ldr	r1, [pc, #80]	; (8006564 <xTaskIncrementTick+0x21c>)
 8006512:	4613      	mov	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	440b      	add	r3, r1
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d901      	bls.n	8006526 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8006522:	2301      	movs	r3, #1
 8006524:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8006526:	4b11      	ldr	r3, [pc, #68]	; (800656c <xTaskIncrementTick+0x224>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d007      	beq.n	800653e <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	627b      	str	r3, [r7, #36]	; 0x24
 8006532:	e004      	b.n	800653e <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006534:	4b0e      	ldr	r3, [pc, #56]	; (8006570 <xTaskIncrementTick+0x228>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	3301      	adds	r3, #1
 800653a:	4a0d      	ldr	r2, [pc, #52]	; (8006570 <xTaskIncrementTick+0x228>)
 800653c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006540:	4618      	mov	r0, r3
 8006542:	3728      	adds	r7, #40	; 0x28
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	2000061c 	.word	0x2000061c
 800654c:	20000604 	.word	0x20000604
 8006550:	200005fc 	.word	0x200005fc
 8006554:	20000600 	.word	0x20000600
 8006558:	20000614 	.word	0x20000614
 800655c:	20000618 	.word	0x20000618
 8006560:	20000608 	.word	0x20000608
 8006564:	20000598 	.word	0x20000598
 8006568:	20000594 	.word	0x20000594
 800656c:	20000610 	.word	0x20000610
 8006570:	2000060c 	.word	0x2000060c

08006574 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006574:	b480      	push	{r7}
 8006576:	b087      	sub	sp, #28
 8006578:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800657a:	4b27      	ldr	r3, [pc, #156]	; (8006618 <vTaskSwitchContext+0xa4>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d003      	beq.n	800658a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006582:	4b26      	ldr	r3, [pc, #152]	; (800661c <vTaskSwitchContext+0xa8>)
 8006584:	2201      	movs	r2, #1
 8006586:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8006588:	e03f      	b.n	800660a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800658a:	4b24      	ldr	r3, [pc, #144]	; (800661c <vTaskSwitchContext+0xa8>)
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006590:	4b23      	ldr	r3, [pc, #140]	; (8006620 <vTaskSwitchContext+0xac>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	fab3 f383 	clz	r3, r3
 800659c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800659e:	7afb      	ldrb	r3, [r7, #11]
 80065a0:	f1c3 031f 	rsb	r3, r3, #31
 80065a4:	617b      	str	r3, [r7, #20]
 80065a6:	491f      	ldr	r1, [pc, #124]	; (8006624 <vTaskSwitchContext+0xb0>)
 80065a8:	697a      	ldr	r2, [r7, #20]
 80065aa:	4613      	mov	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	4413      	add	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	440b      	add	r3, r1
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
    }
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <vTaskSwitchContext+0x5a>
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4613      	mov	r3, r2
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4a12      	ldr	r2, [pc, #72]	; (8006624 <vTaskSwitchContext+0xb0>)
 80065dc:	4413      	add	r3, r2
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	685a      	ldr	r2, [r3, #4]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	605a      	str	r2, [r3, #4]
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	3308      	adds	r3, #8
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d104      	bne.n	8006600 <vTaskSwitchContext+0x8c>
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	605a      	str	r2, [r3, #4]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	4a08      	ldr	r2, [pc, #32]	; (8006628 <vTaskSwitchContext+0xb4>)
 8006608:	6013      	str	r3, [r2, #0]
}
 800660a:	bf00      	nop
 800660c:	371c      	adds	r7, #28
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
 8006616:	bf00      	nop
 8006618:	2000061c 	.word	0x2000061c
 800661c:	20000610 	.word	0x20000610
 8006620:	20000608 	.word	0x20000608
 8006624:	20000598 	.word	0x20000598
 8006628:	20000594 	.word	0x20000594

0800662c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800662c:	b480      	push	{r7}
 800662e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006630:	4b0a      	ldr	r3, [pc, #40]	; (800665c <prvResetNextTaskUnblockTime+0x30>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d104      	bne.n	8006644 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800663a:	4b09      	ldr	r3, [pc, #36]	; (8006660 <prvResetNextTaskUnblockTime+0x34>)
 800663c:	f04f 32ff 	mov.w	r2, #4294967295
 8006640:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006642:	e005      	b.n	8006650 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006644:	4b05      	ldr	r3, [pc, #20]	; (800665c <prvResetNextTaskUnblockTime+0x30>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a04      	ldr	r2, [pc, #16]	; (8006660 <prvResetNextTaskUnblockTime+0x34>)
 800664e:	6013      	str	r3, [r2, #0]
}
 8006650:	bf00      	nop
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	200005fc 	.word	0x200005fc
 8006660:	20000618 	.word	0x20000618
	...

08006670 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <pxCurrentTCBConst2>)
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	6808      	ldr	r0, [r1, #0]
 8006676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	f380 8809 	msr	PSP, r0
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	4770      	bx	lr
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst2>:
 8006690:	20000594 	.word	0x20000594
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
	...

080066a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80066a0:	f3ef 8009 	mrs	r0, PSP
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	4b15      	ldr	r3, [pc, #84]	; (8006700 <pxCurrentTCBConst>)
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	f01e 0f10 	tst.w	lr, #16
 80066b0:	bf08      	it	eq
 80066b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ba:	6010      	str	r0, [r2, #0]
 80066bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066c4:	f380 8811 	msr	BASEPRI, r0
 80066c8:	f3bf 8f4f 	dsb	sy
 80066cc:	f3bf 8f6f 	isb	sy
 80066d0:	f7ff ff50 	bl	8006574 <vTaskSwitchContext>
 80066d4:	f04f 0000 	mov.w	r0, #0
 80066d8:	f380 8811 	msr	BASEPRI, r0
 80066dc:	bc09      	pop	{r0, r3}
 80066de:	6819      	ldr	r1, [r3, #0]
 80066e0:	6808      	ldr	r0, [r1, #0]
 80066e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e6:	f01e 0f10 	tst.w	lr, #16
 80066ea:	bf08      	it	eq
 80066ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066f0:	f380 8809 	msr	PSP, r0
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	f3af 8000 	nop.w

08006700 <pxCurrentTCBConst>:
 8006700:	20000594 	.word	0x20000594
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop

08006708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
        __asm volatile
 800670e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006712:	f383 8811 	msr	BASEPRI, r3
 8006716:	f3bf 8f6f 	isb	sy
 800671a:	f3bf 8f4f 	dsb	sy
 800671e:	607b      	str	r3, [r7, #4]
    }
 8006720:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006722:	f7ff fe11 	bl	8006348 <xTaskIncrementTick>
 8006726:	4603      	mov	r3, r0
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800672c:	4b06      	ldr	r3, [pc, #24]	; (8006748 <SysTick_Handler+0x40>)
 800672e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800673e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006740:	bf00      	nop
 8006742:	3708      	adds	r7, #8
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	e000ed04 	.word	0xe000ed04

0800674c <__cvt>:
 800674c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	ec55 4b10 	vmov	r4, r5, d0
 8006754:	2d00      	cmp	r5, #0
 8006756:	460e      	mov	r6, r1
 8006758:	4619      	mov	r1, r3
 800675a:	462b      	mov	r3, r5
 800675c:	bfbb      	ittet	lt
 800675e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006762:	461d      	movlt	r5, r3
 8006764:	2300      	movge	r3, #0
 8006766:	232d      	movlt	r3, #45	; 0x2d
 8006768:	700b      	strb	r3, [r1, #0]
 800676a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800676c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006770:	4691      	mov	r9, r2
 8006772:	f023 0820 	bic.w	r8, r3, #32
 8006776:	bfbc      	itt	lt
 8006778:	4622      	movlt	r2, r4
 800677a:	4614      	movlt	r4, r2
 800677c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006780:	d005      	beq.n	800678e <__cvt+0x42>
 8006782:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006786:	d100      	bne.n	800678a <__cvt+0x3e>
 8006788:	3601      	adds	r6, #1
 800678a:	2102      	movs	r1, #2
 800678c:	e000      	b.n	8006790 <__cvt+0x44>
 800678e:	2103      	movs	r1, #3
 8006790:	ab03      	add	r3, sp, #12
 8006792:	9301      	str	r3, [sp, #4]
 8006794:	ab02      	add	r3, sp, #8
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	ec45 4b10 	vmov	d0, r4, r5
 800679c:	4653      	mov	r3, sl
 800679e:	4632      	mov	r2, r6
 80067a0:	f000 fe56 	bl	8007450 <_dtoa_r>
 80067a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80067a8:	4607      	mov	r7, r0
 80067aa:	d102      	bne.n	80067b2 <__cvt+0x66>
 80067ac:	f019 0f01 	tst.w	r9, #1
 80067b0:	d022      	beq.n	80067f8 <__cvt+0xac>
 80067b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80067b6:	eb07 0906 	add.w	r9, r7, r6
 80067ba:	d110      	bne.n	80067de <__cvt+0x92>
 80067bc:	783b      	ldrb	r3, [r7, #0]
 80067be:	2b30      	cmp	r3, #48	; 0x30
 80067c0:	d10a      	bne.n	80067d8 <__cvt+0x8c>
 80067c2:	2200      	movs	r2, #0
 80067c4:	2300      	movs	r3, #0
 80067c6:	4620      	mov	r0, r4
 80067c8:	4629      	mov	r1, r5
 80067ca:	f7fa f9a5 	bl	8000b18 <__aeabi_dcmpeq>
 80067ce:	b918      	cbnz	r0, 80067d8 <__cvt+0x8c>
 80067d0:	f1c6 0601 	rsb	r6, r6, #1
 80067d4:	f8ca 6000 	str.w	r6, [sl]
 80067d8:	f8da 3000 	ldr.w	r3, [sl]
 80067dc:	4499      	add	r9, r3
 80067de:	2200      	movs	r2, #0
 80067e0:	2300      	movs	r3, #0
 80067e2:	4620      	mov	r0, r4
 80067e4:	4629      	mov	r1, r5
 80067e6:	f7fa f997 	bl	8000b18 <__aeabi_dcmpeq>
 80067ea:	b108      	cbz	r0, 80067f0 <__cvt+0xa4>
 80067ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80067f0:	2230      	movs	r2, #48	; 0x30
 80067f2:	9b03      	ldr	r3, [sp, #12]
 80067f4:	454b      	cmp	r3, r9
 80067f6:	d307      	bcc.n	8006808 <__cvt+0xbc>
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067fc:	1bdb      	subs	r3, r3, r7
 80067fe:	4638      	mov	r0, r7
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	b004      	add	sp, #16
 8006804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006808:	1c59      	adds	r1, r3, #1
 800680a:	9103      	str	r1, [sp, #12]
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e7f0      	b.n	80067f2 <__cvt+0xa6>

08006810 <__exponent>:
 8006810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006812:	4603      	mov	r3, r0
 8006814:	2900      	cmp	r1, #0
 8006816:	bfb8      	it	lt
 8006818:	4249      	neglt	r1, r1
 800681a:	f803 2b02 	strb.w	r2, [r3], #2
 800681e:	bfb4      	ite	lt
 8006820:	222d      	movlt	r2, #45	; 0x2d
 8006822:	222b      	movge	r2, #43	; 0x2b
 8006824:	2909      	cmp	r1, #9
 8006826:	7042      	strb	r2, [r0, #1]
 8006828:	dd2a      	ble.n	8006880 <__exponent+0x70>
 800682a:	f10d 0207 	add.w	r2, sp, #7
 800682e:	4617      	mov	r7, r2
 8006830:	260a      	movs	r6, #10
 8006832:	4694      	mov	ip, r2
 8006834:	fb91 f5f6 	sdiv	r5, r1, r6
 8006838:	fb06 1415 	mls	r4, r6, r5, r1
 800683c:	3430      	adds	r4, #48	; 0x30
 800683e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006842:	460c      	mov	r4, r1
 8006844:	2c63      	cmp	r4, #99	; 0x63
 8006846:	f102 32ff 	add.w	r2, r2, #4294967295
 800684a:	4629      	mov	r1, r5
 800684c:	dcf1      	bgt.n	8006832 <__exponent+0x22>
 800684e:	3130      	adds	r1, #48	; 0x30
 8006850:	f1ac 0402 	sub.w	r4, ip, #2
 8006854:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006858:	1c41      	adds	r1, r0, #1
 800685a:	4622      	mov	r2, r4
 800685c:	42ba      	cmp	r2, r7
 800685e:	d30a      	bcc.n	8006876 <__exponent+0x66>
 8006860:	f10d 0209 	add.w	r2, sp, #9
 8006864:	eba2 020c 	sub.w	r2, r2, ip
 8006868:	42bc      	cmp	r4, r7
 800686a:	bf88      	it	hi
 800686c:	2200      	movhi	r2, #0
 800686e:	4413      	add	r3, r2
 8006870:	1a18      	subs	r0, r3, r0
 8006872:	b003      	add	sp, #12
 8006874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006876:	f812 5b01 	ldrb.w	r5, [r2], #1
 800687a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800687e:	e7ed      	b.n	800685c <__exponent+0x4c>
 8006880:	2330      	movs	r3, #48	; 0x30
 8006882:	3130      	adds	r1, #48	; 0x30
 8006884:	7083      	strb	r3, [r0, #2]
 8006886:	70c1      	strb	r1, [r0, #3]
 8006888:	1d03      	adds	r3, r0, #4
 800688a:	e7f1      	b.n	8006870 <__exponent+0x60>

0800688c <_printf_float>:
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	ed2d 8b02 	vpush	{d8}
 8006894:	b08d      	sub	sp, #52	; 0x34
 8006896:	460c      	mov	r4, r1
 8006898:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800689c:	4616      	mov	r6, r2
 800689e:	461f      	mov	r7, r3
 80068a0:	4605      	mov	r5, r0
 80068a2:	f000 fcc7 	bl	8007234 <_localeconv_r>
 80068a6:	f8d0 a000 	ldr.w	sl, [r0]
 80068aa:	4650      	mov	r0, sl
 80068ac:	f7f9 fd08 	bl	80002c0 <strlen>
 80068b0:	2300      	movs	r3, #0
 80068b2:	930a      	str	r3, [sp, #40]	; 0x28
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	9305      	str	r3, [sp, #20]
 80068b8:	f8d8 3000 	ldr.w	r3, [r8]
 80068bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80068c0:	3307      	adds	r3, #7
 80068c2:	f023 0307 	bic.w	r3, r3, #7
 80068c6:	f103 0208 	add.w	r2, r3, #8
 80068ca:	f8c8 2000 	str.w	r2, [r8]
 80068ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80068dc:	ee08 0a10 	vmov	s16, r0
 80068e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80068e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068e8:	4b9e      	ldr	r3, [pc, #632]	; (8006b64 <_printf_float+0x2d8>)
 80068ea:	f04f 32ff 	mov.w	r2, #4294967295
 80068ee:	f7fa f945 	bl	8000b7c <__aeabi_dcmpun>
 80068f2:	bb88      	cbnz	r0, 8006958 <_printf_float+0xcc>
 80068f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068f8:	4b9a      	ldr	r3, [pc, #616]	; (8006b64 <_printf_float+0x2d8>)
 80068fa:	f04f 32ff 	mov.w	r2, #4294967295
 80068fe:	f7fa f91f 	bl	8000b40 <__aeabi_dcmple>
 8006902:	bb48      	cbnz	r0, 8006958 <_printf_float+0xcc>
 8006904:	2200      	movs	r2, #0
 8006906:	2300      	movs	r3, #0
 8006908:	4640      	mov	r0, r8
 800690a:	4649      	mov	r1, r9
 800690c:	f7fa f90e 	bl	8000b2c <__aeabi_dcmplt>
 8006910:	b110      	cbz	r0, 8006918 <_printf_float+0x8c>
 8006912:	232d      	movs	r3, #45	; 0x2d
 8006914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006918:	4a93      	ldr	r2, [pc, #588]	; (8006b68 <_printf_float+0x2dc>)
 800691a:	4b94      	ldr	r3, [pc, #592]	; (8006b6c <_printf_float+0x2e0>)
 800691c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006920:	bf94      	ite	ls
 8006922:	4690      	movls	r8, r2
 8006924:	4698      	movhi	r8, r3
 8006926:	2303      	movs	r3, #3
 8006928:	6123      	str	r3, [r4, #16]
 800692a:	9b05      	ldr	r3, [sp, #20]
 800692c:	f023 0304 	bic.w	r3, r3, #4
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	f04f 0900 	mov.w	r9, #0
 8006936:	9700      	str	r7, [sp, #0]
 8006938:	4633      	mov	r3, r6
 800693a:	aa0b      	add	r2, sp, #44	; 0x2c
 800693c:	4621      	mov	r1, r4
 800693e:	4628      	mov	r0, r5
 8006940:	f000 f9da 	bl	8006cf8 <_printf_common>
 8006944:	3001      	adds	r0, #1
 8006946:	f040 8090 	bne.w	8006a6a <_printf_float+0x1de>
 800694a:	f04f 30ff 	mov.w	r0, #4294967295
 800694e:	b00d      	add	sp, #52	; 0x34
 8006950:	ecbd 8b02 	vpop	{d8}
 8006954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006958:	4642      	mov	r2, r8
 800695a:	464b      	mov	r3, r9
 800695c:	4640      	mov	r0, r8
 800695e:	4649      	mov	r1, r9
 8006960:	f7fa f90c 	bl	8000b7c <__aeabi_dcmpun>
 8006964:	b140      	cbz	r0, 8006978 <_printf_float+0xec>
 8006966:	464b      	mov	r3, r9
 8006968:	2b00      	cmp	r3, #0
 800696a:	bfbc      	itt	lt
 800696c:	232d      	movlt	r3, #45	; 0x2d
 800696e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006972:	4a7f      	ldr	r2, [pc, #508]	; (8006b70 <_printf_float+0x2e4>)
 8006974:	4b7f      	ldr	r3, [pc, #508]	; (8006b74 <_printf_float+0x2e8>)
 8006976:	e7d1      	b.n	800691c <_printf_float+0x90>
 8006978:	6863      	ldr	r3, [r4, #4]
 800697a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800697e:	9206      	str	r2, [sp, #24]
 8006980:	1c5a      	adds	r2, r3, #1
 8006982:	d13f      	bne.n	8006a04 <_printf_float+0x178>
 8006984:	2306      	movs	r3, #6
 8006986:	6063      	str	r3, [r4, #4]
 8006988:	9b05      	ldr	r3, [sp, #20]
 800698a:	6861      	ldr	r1, [r4, #4]
 800698c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006990:	2300      	movs	r3, #0
 8006992:	9303      	str	r3, [sp, #12]
 8006994:	ab0a      	add	r3, sp, #40	; 0x28
 8006996:	e9cd b301 	strd	fp, r3, [sp, #4]
 800699a:	ab09      	add	r3, sp, #36	; 0x24
 800699c:	ec49 8b10 	vmov	d0, r8, r9
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	6022      	str	r2, [r4, #0]
 80069a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80069a8:	4628      	mov	r0, r5
 80069aa:	f7ff fecf 	bl	800674c <__cvt>
 80069ae:	9b06      	ldr	r3, [sp, #24]
 80069b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069b2:	2b47      	cmp	r3, #71	; 0x47
 80069b4:	4680      	mov	r8, r0
 80069b6:	d108      	bne.n	80069ca <_printf_float+0x13e>
 80069b8:	1cc8      	adds	r0, r1, #3
 80069ba:	db02      	blt.n	80069c2 <_printf_float+0x136>
 80069bc:	6863      	ldr	r3, [r4, #4]
 80069be:	4299      	cmp	r1, r3
 80069c0:	dd41      	ble.n	8006a46 <_printf_float+0x1ba>
 80069c2:	f1ab 0302 	sub.w	r3, fp, #2
 80069c6:	fa5f fb83 	uxtb.w	fp, r3
 80069ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80069ce:	d820      	bhi.n	8006a12 <_printf_float+0x186>
 80069d0:	3901      	subs	r1, #1
 80069d2:	465a      	mov	r2, fp
 80069d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80069d8:	9109      	str	r1, [sp, #36]	; 0x24
 80069da:	f7ff ff19 	bl	8006810 <__exponent>
 80069de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069e0:	1813      	adds	r3, r2, r0
 80069e2:	2a01      	cmp	r2, #1
 80069e4:	4681      	mov	r9, r0
 80069e6:	6123      	str	r3, [r4, #16]
 80069e8:	dc02      	bgt.n	80069f0 <_printf_float+0x164>
 80069ea:	6822      	ldr	r2, [r4, #0]
 80069ec:	07d2      	lsls	r2, r2, #31
 80069ee:	d501      	bpl.n	80069f4 <_printf_float+0x168>
 80069f0:	3301      	adds	r3, #1
 80069f2:	6123      	str	r3, [r4, #16]
 80069f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d09c      	beq.n	8006936 <_printf_float+0xaa>
 80069fc:	232d      	movs	r3, #45	; 0x2d
 80069fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a02:	e798      	b.n	8006936 <_printf_float+0xaa>
 8006a04:	9a06      	ldr	r2, [sp, #24]
 8006a06:	2a47      	cmp	r2, #71	; 0x47
 8006a08:	d1be      	bne.n	8006988 <_printf_float+0xfc>
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1bc      	bne.n	8006988 <_printf_float+0xfc>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e7b9      	b.n	8006986 <_printf_float+0xfa>
 8006a12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006a16:	d118      	bne.n	8006a4a <_printf_float+0x1be>
 8006a18:	2900      	cmp	r1, #0
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	dd0b      	ble.n	8006a36 <_printf_float+0x1aa>
 8006a1e:	6121      	str	r1, [r4, #16]
 8006a20:	b913      	cbnz	r3, 8006a28 <_printf_float+0x19c>
 8006a22:	6822      	ldr	r2, [r4, #0]
 8006a24:	07d0      	lsls	r0, r2, #31
 8006a26:	d502      	bpl.n	8006a2e <_printf_float+0x1a2>
 8006a28:	3301      	adds	r3, #1
 8006a2a:	440b      	add	r3, r1
 8006a2c:	6123      	str	r3, [r4, #16]
 8006a2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8006a30:	f04f 0900 	mov.w	r9, #0
 8006a34:	e7de      	b.n	80069f4 <_printf_float+0x168>
 8006a36:	b913      	cbnz	r3, 8006a3e <_printf_float+0x1b2>
 8006a38:	6822      	ldr	r2, [r4, #0]
 8006a3a:	07d2      	lsls	r2, r2, #31
 8006a3c:	d501      	bpl.n	8006a42 <_printf_float+0x1b6>
 8006a3e:	3302      	adds	r3, #2
 8006a40:	e7f4      	b.n	8006a2c <_printf_float+0x1a0>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e7f2      	b.n	8006a2c <_printf_float+0x1a0>
 8006a46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006a4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a4c:	4299      	cmp	r1, r3
 8006a4e:	db05      	blt.n	8006a5c <_printf_float+0x1d0>
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	6121      	str	r1, [r4, #16]
 8006a54:	07d8      	lsls	r0, r3, #31
 8006a56:	d5ea      	bpl.n	8006a2e <_printf_float+0x1a2>
 8006a58:	1c4b      	adds	r3, r1, #1
 8006a5a:	e7e7      	b.n	8006a2c <_printf_float+0x1a0>
 8006a5c:	2900      	cmp	r1, #0
 8006a5e:	bfd4      	ite	le
 8006a60:	f1c1 0202 	rsble	r2, r1, #2
 8006a64:	2201      	movgt	r2, #1
 8006a66:	4413      	add	r3, r2
 8006a68:	e7e0      	b.n	8006a2c <_printf_float+0x1a0>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	055a      	lsls	r2, r3, #21
 8006a6e:	d407      	bmi.n	8006a80 <_printf_float+0x1f4>
 8006a70:	6923      	ldr	r3, [r4, #16]
 8006a72:	4642      	mov	r2, r8
 8006a74:	4631      	mov	r1, r6
 8006a76:	4628      	mov	r0, r5
 8006a78:	47b8      	blx	r7
 8006a7a:	3001      	adds	r0, #1
 8006a7c:	d12c      	bne.n	8006ad8 <_printf_float+0x24c>
 8006a7e:	e764      	b.n	800694a <_printf_float+0xbe>
 8006a80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006a84:	f240 80e0 	bls.w	8006c48 <_printf_float+0x3bc>
 8006a88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f7fa f842 	bl	8000b18 <__aeabi_dcmpeq>
 8006a94:	2800      	cmp	r0, #0
 8006a96:	d034      	beq.n	8006b02 <_printf_float+0x276>
 8006a98:	4a37      	ldr	r2, [pc, #220]	; (8006b78 <_printf_float+0x2ec>)
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	47b8      	blx	r7
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	f43f af51 	beq.w	800694a <_printf_float+0xbe>
 8006aa8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006aac:	429a      	cmp	r2, r3
 8006aae:	db02      	blt.n	8006ab6 <_printf_float+0x22a>
 8006ab0:	6823      	ldr	r3, [r4, #0]
 8006ab2:	07d8      	lsls	r0, r3, #31
 8006ab4:	d510      	bpl.n	8006ad8 <_printf_float+0x24c>
 8006ab6:	ee18 3a10 	vmov	r3, s16
 8006aba:	4652      	mov	r2, sl
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	47b8      	blx	r7
 8006ac2:	3001      	adds	r0, #1
 8006ac4:	f43f af41 	beq.w	800694a <_printf_float+0xbe>
 8006ac8:	f04f 0800 	mov.w	r8, #0
 8006acc:	f104 091a 	add.w	r9, r4, #26
 8006ad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	4543      	cmp	r3, r8
 8006ad6:	dc09      	bgt.n	8006aec <_printf_float+0x260>
 8006ad8:	6823      	ldr	r3, [r4, #0]
 8006ada:	079b      	lsls	r3, r3, #30
 8006adc:	f100 8107 	bmi.w	8006cee <_printf_float+0x462>
 8006ae0:	68e0      	ldr	r0, [r4, #12]
 8006ae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ae4:	4298      	cmp	r0, r3
 8006ae6:	bfb8      	it	lt
 8006ae8:	4618      	movlt	r0, r3
 8006aea:	e730      	b.n	800694e <_printf_float+0xc2>
 8006aec:	2301      	movs	r3, #1
 8006aee:	464a      	mov	r2, r9
 8006af0:	4631      	mov	r1, r6
 8006af2:	4628      	mov	r0, r5
 8006af4:	47b8      	blx	r7
 8006af6:	3001      	adds	r0, #1
 8006af8:	f43f af27 	beq.w	800694a <_printf_float+0xbe>
 8006afc:	f108 0801 	add.w	r8, r8, #1
 8006b00:	e7e6      	b.n	8006ad0 <_printf_float+0x244>
 8006b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	dc39      	bgt.n	8006b7c <_printf_float+0x2f0>
 8006b08:	4a1b      	ldr	r2, [pc, #108]	; (8006b78 <_printf_float+0x2ec>)
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	4631      	mov	r1, r6
 8006b0e:	4628      	mov	r0, r5
 8006b10:	47b8      	blx	r7
 8006b12:	3001      	adds	r0, #1
 8006b14:	f43f af19 	beq.w	800694a <_printf_float+0xbe>
 8006b18:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	d102      	bne.n	8006b26 <_printf_float+0x29a>
 8006b20:	6823      	ldr	r3, [r4, #0]
 8006b22:	07d9      	lsls	r1, r3, #31
 8006b24:	d5d8      	bpl.n	8006ad8 <_printf_float+0x24c>
 8006b26:	ee18 3a10 	vmov	r3, s16
 8006b2a:	4652      	mov	r2, sl
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4628      	mov	r0, r5
 8006b30:	47b8      	blx	r7
 8006b32:	3001      	adds	r0, #1
 8006b34:	f43f af09 	beq.w	800694a <_printf_float+0xbe>
 8006b38:	f04f 0900 	mov.w	r9, #0
 8006b3c:	f104 0a1a 	add.w	sl, r4, #26
 8006b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b42:	425b      	negs	r3, r3
 8006b44:	454b      	cmp	r3, r9
 8006b46:	dc01      	bgt.n	8006b4c <_printf_float+0x2c0>
 8006b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b4a:	e792      	b.n	8006a72 <_printf_float+0x1e6>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	4652      	mov	r2, sl
 8006b50:	4631      	mov	r1, r6
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b8      	blx	r7
 8006b56:	3001      	adds	r0, #1
 8006b58:	f43f aef7 	beq.w	800694a <_printf_float+0xbe>
 8006b5c:	f109 0901 	add.w	r9, r9, #1
 8006b60:	e7ee      	b.n	8006b40 <_printf_float+0x2b4>
 8006b62:	bf00      	nop
 8006b64:	7fefffff 	.word	0x7fefffff
 8006b68:	08009120 	.word	0x08009120
 8006b6c:	08009124 	.word	0x08009124
 8006b70:	08009128 	.word	0x08009128
 8006b74:	0800912c 	.word	0x0800912c
 8006b78:	08009130 	.word	0x08009130
 8006b7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b80:	429a      	cmp	r2, r3
 8006b82:	bfa8      	it	ge
 8006b84:	461a      	movge	r2, r3
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	4691      	mov	r9, r2
 8006b8a:	dc37      	bgt.n	8006bfc <_printf_float+0x370>
 8006b8c:	f04f 0b00 	mov.w	fp, #0
 8006b90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b94:	f104 021a 	add.w	r2, r4, #26
 8006b98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	eba3 0309 	sub.w	r3, r3, r9
 8006ba0:	455b      	cmp	r3, fp
 8006ba2:	dc33      	bgt.n	8006c0c <_printf_float+0x380>
 8006ba4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	db3b      	blt.n	8006c24 <_printf_float+0x398>
 8006bac:	6823      	ldr	r3, [r4, #0]
 8006bae:	07da      	lsls	r2, r3, #31
 8006bb0:	d438      	bmi.n	8006c24 <_printf_float+0x398>
 8006bb2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006bb6:	eba2 0903 	sub.w	r9, r2, r3
 8006bba:	9b05      	ldr	r3, [sp, #20]
 8006bbc:	1ad2      	subs	r2, r2, r3
 8006bbe:	4591      	cmp	r9, r2
 8006bc0:	bfa8      	it	ge
 8006bc2:	4691      	movge	r9, r2
 8006bc4:	f1b9 0f00 	cmp.w	r9, #0
 8006bc8:	dc35      	bgt.n	8006c36 <_printf_float+0x3aa>
 8006bca:	f04f 0800 	mov.w	r8, #0
 8006bce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bd2:	f104 0a1a 	add.w	sl, r4, #26
 8006bd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006bda:	1a9b      	subs	r3, r3, r2
 8006bdc:	eba3 0309 	sub.w	r3, r3, r9
 8006be0:	4543      	cmp	r3, r8
 8006be2:	f77f af79 	ble.w	8006ad8 <_printf_float+0x24c>
 8006be6:	2301      	movs	r3, #1
 8006be8:	4652      	mov	r2, sl
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	f43f aeaa 	beq.w	800694a <_printf_float+0xbe>
 8006bf6:	f108 0801 	add.w	r8, r8, #1
 8006bfa:	e7ec      	b.n	8006bd6 <_printf_float+0x34a>
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	4631      	mov	r1, r6
 8006c00:	4642      	mov	r2, r8
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	d1c0      	bne.n	8006b8c <_printf_float+0x300>
 8006c0a:	e69e      	b.n	800694a <_printf_float+0xbe>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	9205      	str	r2, [sp, #20]
 8006c14:	47b8      	blx	r7
 8006c16:	3001      	adds	r0, #1
 8006c18:	f43f ae97 	beq.w	800694a <_printf_float+0xbe>
 8006c1c:	9a05      	ldr	r2, [sp, #20]
 8006c1e:	f10b 0b01 	add.w	fp, fp, #1
 8006c22:	e7b9      	b.n	8006b98 <_printf_float+0x30c>
 8006c24:	ee18 3a10 	vmov	r3, s16
 8006c28:	4652      	mov	r2, sl
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	47b8      	blx	r7
 8006c30:	3001      	adds	r0, #1
 8006c32:	d1be      	bne.n	8006bb2 <_printf_float+0x326>
 8006c34:	e689      	b.n	800694a <_printf_float+0xbe>
 8006c36:	9a05      	ldr	r2, [sp, #20]
 8006c38:	464b      	mov	r3, r9
 8006c3a:	4442      	add	r2, r8
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4628      	mov	r0, r5
 8006c40:	47b8      	blx	r7
 8006c42:	3001      	adds	r0, #1
 8006c44:	d1c1      	bne.n	8006bca <_printf_float+0x33e>
 8006c46:	e680      	b.n	800694a <_printf_float+0xbe>
 8006c48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c4a:	2a01      	cmp	r2, #1
 8006c4c:	dc01      	bgt.n	8006c52 <_printf_float+0x3c6>
 8006c4e:	07db      	lsls	r3, r3, #31
 8006c50:	d53a      	bpl.n	8006cc8 <_printf_float+0x43c>
 8006c52:	2301      	movs	r3, #1
 8006c54:	4642      	mov	r2, r8
 8006c56:	4631      	mov	r1, r6
 8006c58:	4628      	mov	r0, r5
 8006c5a:	47b8      	blx	r7
 8006c5c:	3001      	adds	r0, #1
 8006c5e:	f43f ae74 	beq.w	800694a <_printf_float+0xbe>
 8006c62:	ee18 3a10 	vmov	r3, s16
 8006c66:	4652      	mov	r2, sl
 8006c68:	4631      	mov	r1, r6
 8006c6a:	4628      	mov	r0, r5
 8006c6c:	47b8      	blx	r7
 8006c6e:	3001      	adds	r0, #1
 8006c70:	f43f ae6b 	beq.w	800694a <_printf_float+0xbe>
 8006c74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006c80:	f7f9 ff4a 	bl	8000b18 <__aeabi_dcmpeq>
 8006c84:	b9d8      	cbnz	r0, 8006cbe <_printf_float+0x432>
 8006c86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006c8a:	f108 0201 	add.w	r2, r8, #1
 8006c8e:	4631      	mov	r1, r6
 8006c90:	4628      	mov	r0, r5
 8006c92:	47b8      	blx	r7
 8006c94:	3001      	adds	r0, #1
 8006c96:	d10e      	bne.n	8006cb6 <_printf_float+0x42a>
 8006c98:	e657      	b.n	800694a <_printf_float+0xbe>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	4652      	mov	r2, sl
 8006c9e:	4631      	mov	r1, r6
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	47b8      	blx	r7
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	f43f ae50 	beq.w	800694a <_printf_float+0xbe>
 8006caa:	f108 0801 	add.w	r8, r8, #1
 8006cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	4543      	cmp	r3, r8
 8006cb4:	dcf1      	bgt.n	8006c9a <_printf_float+0x40e>
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006cbc:	e6da      	b.n	8006a74 <_printf_float+0x1e8>
 8006cbe:	f04f 0800 	mov.w	r8, #0
 8006cc2:	f104 0a1a 	add.w	sl, r4, #26
 8006cc6:	e7f2      	b.n	8006cae <_printf_float+0x422>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	4642      	mov	r2, r8
 8006ccc:	e7df      	b.n	8006c8e <_printf_float+0x402>
 8006cce:	2301      	movs	r3, #1
 8006cd0:	464a      	mov	r2, r9
 8006cd2:	4631      	mov	r1, r6
 8006cd4:	4628      	mov	r0, r5
 8006cd6:	47b8      	blx	r7
 8006cd8:	3001      	adds	r0, #1
 8006cda:	f43f ae36 	beq.w	800694a <_printf_float+0xbe>
 8006cde:	f108 0801 	add.w	r8, r8, #1
 8006ce2:	68e3      	ldr	r3, [r4, #12]
 8006ce4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006ce6:	1a5b      	subs	r3, r3, r1
 8006ce8:	4543      	cmp	r3, r8
 8006cea:	dcf0      	bgt.n	8006cce <_printf_float+0x442>
 8006cec:	e6f8      	b.n	8006ae0 <_printf_float+0x254>
 8006cee:	f04f 0800 	mov.w	r8, #0
 8006cf2:	f104 0919 	add.w	r9, r4, #25
 8006cf6:	e7f4      	b.n	8006ce2 <_printf_float+0x456>

08006cf8 <_printf_common>:
 8006cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	4699      	mov	r9, r3
 8006d00:	688a      	ldr	r2, [r1, #8]
 8006d02:	690b      	ldr	r3, [r1, #16]
 8006d04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	bfb8      	it	lt
 8006d0c:	4613      	movlt	r3, r2
 8006d0e:	6033      	str	r3, [r6, #0]
 8006d10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d14:	4607      	mov	r7, r0
 8006d16:	460c      	mov	r4, r1
 8006d18:	b10a      	cbz	r2, 8006d1e <_printf_common+0x26>
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	6033      	str	r3, [r6, #0]
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	0699      	lsls	r1, r3, #26
 8006d22:	bf42      	ittt	mi
 8006d24:	6833      	ldrmi	r3, [r6, #0]
 8006d26:	3302      	addmi	r3, #2
 8006d28:	6033      	strmi	r3, [r6, #0]
 8006d2a:	6825      	ldr	r5, [r4, #0]
 8006d2c:	f015 0506 	ands.w	r5, r5, #6
 8006d30:	d106      	bne.n	8006d40 <_printf_common+0x48>
 8006d32:	f104 0a19 	add.w	sl, r4, #25
 8006d36:	68e3      	ldr	r3, [r4, #12]
 8006d38:	6832      	ldr	r2, [r6, #0]
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	42ab      	cmp	r3, r5
 8006d3e:	dc26      	bgt.n	8006d8e <_printf_common+0x96>
 8006d40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d44:	1e13      	subs	r3, r2, #0
 8006d46:	6822      	ldr	r2, [r4, #0]
 8006d48:	bf18      	it	ne
 8006d4a:	2301      	movne	r3, #1
 8006d4c:	0692      	lsls	r2, r2, #26
 8006d4e:	d42b      	bmi.n	8006da8 <_printf_common+0xb0>
 8006d50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d54:	4649      	mov	r1, r9
 8006d56:	4638      	mov	r0, r7
 8006d58:	47c0      	blx	r8
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d01e      	beq.n	8006d9c <_printf_common+0xa4>
 8006d5e:	6823      	ldr	r3, [r4, #0]
 8006d60:	6922      	ldr	r2, [r4, #16]
 8006d62:	f003 0306 	and.w	r3, r3, #6
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	bf02      	ittt	eq
 8006d6a:	68e5      	ldreq	r5, [r4, #12]
 8006d6c:	6833      	ldreq	r3, [r6, #0]
 8006d6e:	1aed      	subeq	r5, r5, r3
 8006d70:	68a3      	ldr	r3, [r4, #8]
 8006d72:	bf0c      	ite	eq
 8006d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d78:	2500      	movne	r5, #0
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	bfc4      	itt	gt
 8006d7e:	1a9b      	subgt	r3, r3, r2
 8006d80:	18ed      	addgt	r5, r5, r3
 8006d82:	2600      	movs	r6, #0
 8006d84:	341a      	adds	r4, #26
 8006d86:	42b5      	cmp	r5, r6
 8006d88:	d11a      	bne.n	8006dc0 <_printf_common+0xc8>
 8006d8a:	2000      	movs	r0, #0
 8006d8c:	e008      	b.n	8006da0 <_printf_common+0xa8>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4652      	mov	r2, sl
 8006d92:	4649      	mov	r1, r9
 8006d94:	4638      	mov	r0, r7
 8006d96:	47c0      	blx	r8
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d103      	bne.n	8006da4 <_printf_common+0xac>
 8006d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006da4:	3501      	adds	r5, #1
 8006da6:	e7c6      	b.n	8006d36 <_printf_common+0x3e>
 8006da8:	18e1      	adds	r1, r4, r3
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	2030      	movs	r0, #48	; 0x30
 8006dae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006db2:	4422      	add	r2, r4
 8006db4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006db8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006dbc:	3302      	adds	r3, #2
 8006dbe:	e7c7      	b.n	8006d50 <_printf_common+0x58>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	4622      	mov	r2, r4
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	47c0      	blx	r8
 8006dca:	3001      	adds	r0, #1
 8006dcc:	d0e6      	beq.n	8006d9c <_printf_common+0xa4>
 8006dce:	3601      	adds	r6, #1
 8006dd0:	e7d9      	b.n	8006d86 <_printf_common+0x8e>
	...

08006dd4 <_printf_i>:
 8006dd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	7e0f      	ldrb	r7, [r1, #24]
 8006dda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ddc:	2f78      	cmp	r7, #120	; 0x78
 8006dde:	4691      	mov	r9, r2
 8006de0:	4680      	mov	r8, r0
 8006de2:	460c      	mov	r4, r1
 8006de4:	469a      	mov	sl, r3
 8006de6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006dea:	d807      	bhi.n	8006dfc <_printf_i+0x28>
 8006dec:	2f62      	cmp	r7, #98	; 0x62
 8006dee:	d80a      	bhi.n	8006e06 <_printf_i+0x32>
 8006df0:	2f00      	cmp	r7, #0
 8006df2:	f000 80d4 	beq.w	8006f9e <_printf_i+0x1ca>
 8006df6:	2f58      	cmp	r7, #88	; 0x58
 8006df8:	f000 80c0 	beq.w	8006f7c <_printf_i+0x1a8>
 8006dfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e04:	e03a      	b.n	8006e7c <_printf_i+0xa8>
 8006e06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e0a:	2b15      	cmp	r3, #21
 8006e0c:	d8f6      	bhi.n	8006dfc <_printf_i+0x28>
 8006e0e:	a101      	add	r1, pc, #4	; (adr r1, 8006e14 <_printf_i+0x40>)
 8006e10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e14:	08006e6d 	.word	0x08006e6d
 8006e18:	08006e81 	.word	0x08006e81
 8006e1c:	08006dfd 	.word	0x08006dfd
 8006e20:	08006dfd 	.word	0x08006dfd
 8006e24:	08006dfd 	.word	0x08006dfd
 8006e28:	08006dfd 	.word	0x08006dfd
 8006e2c:	08006e81 	.word	0x08006e81
 8006e30:	08006dfd 	.word	0x08006dfd
 8006e34:	08006dfd 	.word	0x08006dfd
 8006e38:	08006dfd 	.word	0x08006dfd
 8006e3c:	08006dfd 	.word	0x08006dfd
 8006e40:	08006f85 	.word	0x08006f85
 8006e44:	08006ead 	.word	0x08006ead
 8006e48:	08006f3f 	.word	0x08006f3f
 8006e4c:	08006dfd 	.word	0x08006dfd
 8006e50:	08006dfd 	.word	0x08006dfd
 8006e54:	08006fa7 	.word	0x08006fa7
 8006e58:	08006dfd 	.word	0x08006dfd
 8006e5c:	08006ead 	.word	0x08006ead
 8006e60:	08006dfd 	.word	0x08006dfd
 8006e64:	08006dfd 	.word	0x08006dfd
 8006e68:	08006f47 	.word	0x08006f47
 8006e6c:	682b      	ldr	r3, [r5, #0]
 8006e6e:	1d1a      	adds	r2, r3, #4
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	602a      	str	r2, [r5, #0]
 8006e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e09f      	b.n	8006fc0 <_printf_i+0x1ec>
 8006e80:	6820      	ldr	r0, [r4, #0]
 8006e82:	682b      	ldr	r3, [r5, #0]
 8006e84:	0607      	lsls	r7, r0, #24
 8006e86:	f103 0104 	add.w	r1, r3, #4
 8006e8a:	6029      	str	r1, [r5, #0]
 8006e8c:	d501      	bpl.n	8006e92 <_printf_i+0xbe>
 8006e8e:	681e      	ldr	r6, [r3, #0]
 8006e90:	e003      	b.n	8006e9a <_printf_i+0xc6>
 8006e92:	0646      	lsls	r6, r0, #25
 8006e94:	d5fb      	bpl.n	8006e8e <_printf_i+0xba>
 8006e96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	da03      	bge.n	8006ea6 <_printf_i+0xd2>
 8006e9e:	232d      	movs	r3, #45	; 0x2d
 8006ea0:	4276      	negs	r6, r6
 8006ea2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ea6:	485a      	ldr	r0, [pc, #360]	; (8007010 <_printf_i+0x23c>)
 8006ea8:	230a      	movs	r3, #10
 8006eaa:	e012      	b.n	8006ed2 <_printf_i+0xfe>
 8006eac:	682b      	ldr	r3, [r5, #0]
 8006eae:	6820      	ldr	r0, [r4, #0]
 8006eb0:	1d19      	adds	r1, r3, #4
 8006eb2:	6029      	str	r1, [r5, #0]
 8006eb4:	0605      	lsls	r5, r0, #24
 8006eb6:	d501      	bpl.n	8006ebc <_printf_i+0xe8>
 8006eb8:	681e      	ldr	r6, [r3, #0]
 8006eba:	e002      	b.n	8006ec2 <_printf_i+0xee>
 8006ebc:	0641      	lsls	r1, r0, #25
 8006ebe:	d5fb      	bpl.n	8006eb8 <_printf_i+0xe4>
 8006ec0:	881e      	ldrh	r6, [r3, #0]
 8006ec2:	4853      	ldr	r0, [pc, #332]	; (8007010 <_printf_i+0x23c>)
 8006ec4:	2f6f      	cmp	r7, #111	; 0x6f
 8006ec6:	bf0c      	ite	eq
 8006ec8:	2308      	moveq	r3, #8
 8006eca:	230a      	movne	r3, #10
 8006ecc:	2100      	movs	r1, #0
 8006ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ed2:	6865      	ldr	r5, [r4, #4]
 8006ed4:	60a5      	str	r5, [r4, #8]
 8006ed6:	2d00      	cmp	r5, #0
 8006ed8:	bfa2      	ittt	ge
 8006eda:	6821      	ldrge	r1, [r4, #0]
 8006edc:	f021 0104 	bicge.w	r1, r1, #4
 8006ee0:	6021      	strge	r1, [r4, #0]
 8006ee2:	b90e      	cbnz	r6, 8006ee8 <_printf_i+0x114>
 8006ee4:	2d00      	cmp	r5, #0
 8006ee6:	d04b      	beq.n	8006f80 <_printf_i+0x1ac>
 8006ee8:	4615      	mov	r5, r2
 8006eea:	fbb6 f1f3 	udiv	r1, r6, r3
 8006eee:	fb03 6711 	mls	r7, r3, r1, r6
 8006ef2:	5dc7      	ldrb	r7, [r0, r7]
 8006ef4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ef8:	4637      	mov	r7, r6
 8006efa:	42bb      	cmp	r3, r7
 8006efc:	460e      	mov	r6, r1
 8006efe:	d9f4      	bls.n	8006eea <_printf_i+0x116>
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d10b      	bne.n	8006f1c <_printf_i+0x148>
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	07de      	lsls	r6, r3, #31
 8006f08:	d508      	bpl.n	8006f1c <_printf_i+0x148>
 8006f0a:	6923      	ldr	r3, [r4, #16]
 8006f0c:	6861      	ldr	r1, [r4, #4]
 8006f0e:	4299      	cmp	r1, r3
 8006f10:	bfde      	ittt	le
 8006f12:	2330      	movle	r3, #48	; 0x30
 8006f14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f1c:	1b52      	subs	r2, r2, r5
 8006f1e:	6122      	str	r2, [r4, #16]
 8006f20:	f8cd a000 	str.w	sl, [sp]
 8006f24:	464b      	mov	r3, r9
 8006f26:	aa03      	add	r2, sp, #12
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	f7ff fee4 	bl	8006cf8 <_printf_common>
 8006f30:	3001      	adds	r0, #1
 8006f32:	d14a      	bne.n	8006fca <_printf_i+0x1f6>
 8006f34:	f04f 30ff 	mov.w	r0, #4294967295
 8006f38:	b004      	add	sp, #16
 8006f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3e:	6823      	ldr	r3, [r4, #0]
 8006f40:	f043 0320 	orr.w	r3, r3, #32
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	4833      	ldr	r0, [pc, #204]	; (8007014 <_printf_i+0x240>)
 8006f48:	2778      	movs	r7, #120	; 0x78
 8006f4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f4e:	6823      	ldr	r3, [r4, #0]
 8006f50:	6829      	ldr	r1, [r5, #0]
 8006f52:	061f      	lsls	r7, r3, #24
 8006f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f58:	d402      	bmi.n	8006f60 <_printf_i+0x18c>
 8006f5a:	065f      	lsls	r7, r3, #25
 8006f5c:	bf48      	it	mi
 8006f5e:	b2b6      	uxthmi	r6, r6
 8006f60:	07df      	lsls	r7, r3, #31
 8006f62:	bf48      	it	mi
 8006f64:	f043 0320 	orrmi.w	r3, r3, #32
 8006f68:	6029      	str	r1, [r5, #0]
 8006f6a:	bf48      	it	mi
 8006f6c:	6023      	strmi	r3, [r4, #0]
 8006f6e:	b91e      	cbnz	r6, 8006f78 <_printf_i+0x1a4>
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	f023 0320 	bic.w	r3, r3, #32
 8006f76:	6023      	str	r3, [r4, #0]
 8006f78:	2310      	movs	r3, #16
 8006f7a:	e7a7      	b.n	8006ecc <_printf_i+0xf8>
 8006f7c:	4824      	ldr	r0, [pc, #144]	; (8007010 <_printf_i+0x23c>)
 8006f7e:	e7e4      	b.n	8006f4a <_printf_i+0x176>
 8006f80:	4615      	mov	r5, r2
 8006f82:	e7bd      	b.n	8006f00 <_printf_i+0x12c>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	6826      	ldr	r6, [r4, #0]
 8006f88:	6961      	ldr	r1, [r4, #20]
 8006f8a:	1d18      	adds	r0, r3, #4
 8006f8c:	6028      	str	r0, [r5, #0]
 8006f8e:	0635      	lsls	r5, r6, #24
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	d501      	bpl.n	8006f98 <_printf_i+0x1c4>
 8006f94:	6019      	str	r1, [r3, #0]
 8006f96:	e002      	b.n	8006f9e <_printf_i+0x1ca>
 8006f98:	0670      	lsls	r0, r6, #25
 8006f9a:	d5fb      	bpl.n	8006f94 <_printf_i+0x1c0>
 8006f9c:	8019      	strh	r1, [r3, #0]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	4615      	mov	r5, r2
 8006fa4:	e7bc      	b.n	8006f20 <_printf_i+0x14c>
 8006fa6:	682b      	ldr	r3, [r5, #0]
 8006fa8:	1d1a      	adds	r2, r3, #4
 8006faa:	602a      	str	r2, [r5, #0]
 8006fac:	681d      	ldr	r5, [r3, #0]
 8006fae:	6862      	ldr	r2, [r4, #4]
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7f9 f934 	bl	8000220 <memchr>
 8006fb8:	b108      	cbz	r0, 8006fbe <_printf_i+0x1ea>
 8006fba:	1b40      	subs	r0, r0, r5
 8006fbc:	6060      	str	r0, [r4, #4]
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc8:	e7aa      	b.n	8006f20 <_printf_i+0x14c>
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	462a      	mov	r2, r5
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	47d0      	blx	sl
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d0ad      	beq.n	8006f34 <_printf_i+0x160>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	079b      	lsls	r3, r3, #30
 8006fdc:	d413      	bmi.n	8007006 <_printf_i+0x232>
 8006fde:	68e0      	ldr	r0, [r4, #12]
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	4298      	cmp	r0, r3
 8006fe4:	bfb8      	it	lt
 8006fe6:	4618      	movlt	r0, r3
 8006fe8:	e7a6      	b.n	8006f38 <_printf_i+0x164>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4632      	mov	r2, r6
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	47d0      	blx	sl
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d09d      	beq.n	8006f34 <_printf_i+0x160>
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	68e3      	ldr	r3, [r4, #12]
 8006ffc:	9903      	ldr	r1, [sp, #12]
 8006ffe:	1a5b      	subs	r3, r3, r1
 8007000:	42ab      	cmp	r3, r5
 8007002:	dcf2      	bgt.n	8006fea <_printf_i+0x216>
 8007004:	e7eb      	b.n	8006fde <_printf_i+0x20a>
 8007006:	2500      	movs	r5, #0
 8007008:	f104 0619 	add.w	r6, r4, #25
 800700c:	e7f5      	b.n	8006ffa <_printf_i+0x226>
 800700e:	bf00      	nop
 8007010:	08009132 	.word	0x08009132
 8007014:	08009143 	.word	0x08009143

08007018 <std>:
 8007018:	2300      	movs	r3, #0
 800701a:	b510      	push	{r4, lr}
 800701c:	4604      	mov	r4, r0
 800701e:	e9c0 3300 	strd	r3, r3, [r0]
 8007022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007026:	6083      	str	r3, [r0, #8]
 8007028:	8181      	strh	r1, [r0, #12]
 800702a:	6643      	str	r3, [r0, #100]	; 0x64
 800702c:	81c2      	strh	r2, [r0, #14]
 800702e:	6183      	str	r3, [r0, #24]
 8007030:	4619      	mov	r1, r3
 8007032:	2208      	movs	r2, #8
 8007034:	305c      	adds	r0, #92	; 0x5c
 8007036:	f000 f8f4 	bl	8007222 <memset>
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <std+0x58>)
 800703c:	6263      	str	r3, [r4, #36]	; 0x24
 800703e:	4b0d      	ldr	r3, [pc, #52]	; (8007074 <std+0x5c>)
 8007040:	62a3      	str	r3, [r4, #40]	; 0x28
 8007042:	4b0d      	ldr	r3, [pc, #52]	; (8007078 <std+0x60>)
 8007044:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <std+0x64>)
 8007048:	6323      	str	r3, [r4, #48]	; 0x30
 800704a:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <std+0x68>)
 800704c:	6224      	str	r4, [r4, #32]
 800704e:	429c      	cmp	r4, r3
 8007050:	d006      	beq.n	8007060 <std+0x48>
 8007052:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007056:	4294      	cmp	r4, r2
 8007058:	d002      	beq.n	8007060 <std+0x48>
 800705a:	33d0      	adds	r3, #208	; 0xd0
 800705c:	429c      	cmp	r4, r3
 800705e:	d105      	bne.n	800706c <std+0x54>
 8007060:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007068:	f000 b958 	b.w	800731c <__retarget_lock_init_recursive>
 800706c:	bd10      	pop	{r4, pc}
 800706e:	bf00      	nop
 8007070:	0800719d 	.word	0x0800719d
 8007074:	080071bf 	.word	0x080071bf
 8007078:	080071f7 	.word	0x080071f7
 800707c:	0800721b 	.word	0x0800721b
 8007080:	20000620 	.word	0x20000620

08007084 <stdio_exit_handler>:
 8007084:	4a02      	ldr	r2, [pc, #8]	; (8007090 <stdio_exit_handler+0xc>)
 8007086:	4903      	ldr	r1, [pc, #12]	; (8007094 <stdio_exit_handler+0x10>)
 8007088:	4803      	ldr	r0, [pc, #12]	; (8007098 <stdio_exit_handler+0x14>)
 800708a:	f000 b869 	b.w	8007160 <_fwalk_sglue>
 800708e:	bf00      	nop
 8007090:	20000028 	.word	0x20000028
 8007094:	08008a39 	.word	0x08008a39
 8007098:	20000034 	.word	0x20000034

0800709c <cleanup_stdio>:
 800709c:	6841      	ldr	r1, [r0, #4]
 800709e:	4b0c      	ldr	r3, [pc, #48]	; (80070d0 <cleanup_stdio+0x34>)
 80070a0:	4299      	cmp	r1, r3
 80070a2:	b510      	push	{r4, lr}
 80070a4:	4604      	mov	r4, r0
 80070a6:	d001      	beq.n	80070ac <cleanup_stdio+0x10>
 80070a8:	f001 fcc6 	bl	8008a38 <_fflush_r>
 80070ac:	68a1      	ldr	r1, [r4, #8]
 80070ae:	4b09      	ldr	r3, [pc, #36]	; (80070d4 <cleanup_stdio+0x38>)
 80070b0:	4299      	cmp	r1, r3
 80070b2:	d002      	beq.n	80070ba <cleanup_stdio+0x1e>
 80070b4:	4620      	mov	r0, r4
 80070b6:	f001 fcbf 	bl	8008a38 <_fflush_r>
 80070ba:	68e1      	ldr	r1, [r4, #12]
 80070bc:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <cleanup_stdio+0x3c>)
 80070be:	4299      	cmp	r1, r3
 80070c0:	d004      	beq.n	80070cc <cleanup_stdio+0x30>
 80070c2:	4620      	mov	r0, r4
 80070c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070c8:	f001 bcb6 	b.w	8008a38 <_fflush_r>
 80070cc:	bd10      	pop	{r4, pc}
 80070ce:	bf00      	nop
 80070d0:	20000620 	.word	0x20000620
 80070d4:	20000688 	.word	0x20000688
 80070d8:	200006f0 	.word	0x200006f0

080070dc <global_stdio_init.part.0>:
 80070dc:	b510      	push	{r4, lr}
 80070de:	4b0b      	ldr	r3, [pc, #44]	; (800710c <global_stdio_init.part.0+0x30>)
 80070e0:	4c0b      	ldr	r4, [pc, #44]	; (8007110 <global_stdio_init.part.0+0x34>)
 80070e2:	4a0c      	ldr	r2, [pc, #48]	; (8007114 <global_stdio_init.part.0+0x38>)
 80070e4:	601a      	str	r2, [r3, #0]
 80070e6:	4620      	mov	r0, r4
 80070e8:	2200      	movs	r2, #0
 80070ea:	2104      	movs	r1, #4
 80070ec:	f7ff ff94 	bl	8007018 <std>
 80070f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80070f4:	2201      	movs	r2, #1
 80070f6:	2109      	movs	r1, #9
 80070f8:	f7ff ff8e 	bl	8007018 <std>
 80070fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007100:	2202      	movs	r2, #2
 8007102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007106:	2112      	movs	r1, #18
 8007108:	f7ff bf86 	b.w	8007018 <std>
 800710c:	20000758 	.word	0x20000758
 8007110:	20000620 	.word	0x20000620
 8007114:	08007085 	.word	0x08007085

08007118 <__sfp_lock_acquire>:
 8007118:	4801      	ldr	r0, [pc, #4]	; (8007120 <__sfp_lock_acquire+0x8>)
 800711a:	f000 b900 	b.w	800731e <__retarget_lock_acquire_recursive>
 800711e:	bf00      	nop
 8007120:	20000761 	.word	0x20000761

08007124 <__sfp_lock_release>:
 8007124:	4801      	ldr	r0, [pc, #4]	; (800712c <__sfp_lock_release+0x8>)
 8007126:	f000 b8fb 	b.w	8007320 <__retarget_lock_release_recursive>
 800712a:	bf00      	nop
 800712c:	20000761 	.word	0x20000761

08007130 <__sinit>:
 8007130:	b510      	push	{r4, lr}
 8007132:	4604      	mov	r4, r0
 8007134:	f7ff fff0 	bl	8007118 <__sfp_lock_acquire>
 8007138:	6a23      	ldr	r3, [r4, #32]
 800713a:	b11b      	cbz	r3, 8007144 <__sinit+0x14>
 800713c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007140:	f7ff bff0 	b.w	8007124 <__sfp_lock_release>
 8007144:	4b04      	ldr	r3, [pc, #16]	; (8007158 <__sinit+0x28>)
 8007146:	6223      	str	r3, [r4, #32]
 8007148:	4b04      	ldr	r3, [pc, #16]	; (800715c <__sinit+0x2c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f5      	bne.n	800713c <__sinit+0xc>
 8007150:	f7ff ffc4 	bl	80070dc <global_stdio_init.part.0>
 8007154:	e7f2      	b.n	800713c <__sinit+0xc>
 8007156:	bf00      	nop
 8007158:	0800709d 	.word	0x0800709d
 800715c:	20000758 	.word	0x20000758

08007160 <_fwalk_sglue>:
 8007160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007164:	4607      	mov	r7, r0
 8007166:	4688      	mov	r8, r1
 8007168:	4614      	mov	r4, r2
 800716a:	2600      	movs	r6, #0
 800716c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007170:	f1b9 0901 	subs.w	r9, r9, #1
 8007174:	d505      	bpl.n	8007182 <_fwalk_sglue+0x22>
 8007176:	6824      	ldr	r4, [r4, #0]
 8007178:	2c00      	cmp	r4, #0
 800717a:	d1f7      	bne.n	800716c <_fwalk_sglue+0xc>
 800717c:	4630      	mov	r0, r6
 800717e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007182:	89ab      	ldrh	r3, [r5, #12]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d907      	bls.n	8007198 <_fwalk_sglue+0x38>
 8007188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800718c:	3301      	adds	r3, #1
 800718e:	d003      	beq.n	8007198 <_fwalk_sglue+0x38>
 8007190:	4629      	mov	r1, r5
 8007192:	4638      	mov	r0, r7
 8007194:	47c0      	blx	r8
 8007196:	4306      	orrs	r6, r0
 8007198:	3568      	adds	r5, #104	; 0x68
 800719a:	e7e9      	b.n	8007170 <_fwalk_sglue+0x10>

0800719c <__sread>:
 800719c:	b510      	push	{r4, lr}
 800719e:	460c      	mov	r4, r1
 80071a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a4:	f000 f86c 	bl	8007280 <_read_r>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	bfab      	itete	ge
 80071ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ae:	89a3      	ldrhlt	r3, [r4, #12]
 80071b0:	181b      	addge	r3, r3, r0
 80071b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071b6:	bfac      	ite	ge
 80071b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071ba:	81a3      	strhlt	r3, [r4, #12]
 80071bc:	bd10      	pop	{r4, pc}

080071be <__swrite>:
 80071be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c2:	461f      	mov	r7, r3
 80071c4:	898b      	ldrh	r3, [r1, #12]
 80071c6:	05db      	lsls	r3, r3, #23
 80071c8:	4605      	mov	r5, r0
 80071ca:	460c      	mov	r4, r1
 80071cc:	4616      	mov	r6, r2
 80071ce:	d505      	bpl.n	80071dc <__swrite+0x1e>
 80071d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d4:	2302      	movs	r3, #2
 80071d6:	2200      	movs	r2, #0
 80071d8:	f000 f840 	bl	800725c <_lseek_r>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e6:	81a3      	strh	r3, [r4, #12]
 80071e8:	4632      	mov	r2, r6
 80071ea:	463b      	mov	r3, r7
 80071ec:	4628      	mov	r0, r5
 80071ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071f2:	f000 b857 	b.w	80072a4 <_write_r>

080071f6 <__sseek>:
 80071f6:	b510      	push	{r4, lr}
 80071f8:	460c      	mov	r4, r1
 80071fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fe:	f000 f82d 	bl	800725c <_lseek_r>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	bf15      	itete	ne
 8007208:	6560      	strne	r0, [r4, #84]	; 0x54
 800720a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800720e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007212:	81a3      	strheq	r3, [r4, #12]
 8007214:	bf18      	it	ne
 8007216:	81a3      	strhne	r3, [r4, #12]
 8007218:	bd10      	pop	{r4, pc}

0800721a <__sclose>:
 800721a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721e:	f000 b80d 	b.w	800723c <_close_r>

08007222 <memset>:
 8007222:	4402      	add	r2, r0
 8007224:	4603      	mov	r3, r0
 8007226:	4293      	cmp	r3, r2
 8007228:	d100      	bne.n	800722c <memset+0xa>
 800722a:	4770      	bx	lr
 800722c:	f803 1b01 	strb.w	r1, [r3], #1
 8007230:	e7f9      	b.n	8007226 <memset+0x4>
	...

08007234 <_localeconv_r>:
 8007234:	4800      	ldr	r0, [pc, #0]	; (8007238 <_localeconv_r+0x4>)
 8007236:	4770      	bx	lr
 8007238:	20000174 	.word	0x20000174

0800723c <_close_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4d06      	ldr	r5, [pc, #24]	; (8007258 <_close_r+0x1c>)
 8007240:	2300      	movs	r3, #0
 8007242:	4604      	mov	r4, r0
 8007244:	4608      	mov	r0, r1
 8007246:	602b      	str	r3, [r5, #0]
 8007248:	f7fb f8cf 	bl	80023ea <_close>
 800724c:	1c43      	adds	r3, r0, #1
 800724e:	d102      	bne.n	8007256 <_close_r+0x1a>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	b103      	cbz	r3, 8007256 <_close_r+0x1a>
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	bd38      	pop	{r3, r4, r5, pc}
 8007258:	2000075c 	.word	0x2000075c

0800725c <_lseek_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d07      	ldr	r5, [pc, #28]	; (800727c <_lseek_r+0x20>)
 8007260:	4604      	mov	r4, r0
 8007262:	4608      	mov	r0, r1
 8007264:	4611      	mov	r1, r2
 8007266:	2200      	movs	r2, #0
 8007268:	602a      	str	r2, [r5, #0]
 800726a:	461a      	mov	r2, r3
 800726c:	f7fb f8e4 	bl	8002438 <_lseek>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d102      	bne.n	800727a <_lseek_r+0x1e>
 8007274:	682b      	ldr	r3, [r5, #0]
 8007276:	b103      	cbz	r3, 800727a <_lseek_r+0x1e>
 8007278:	6023      	str	r3, [r4, #0]
 800727a:	bd38      	pop	{r3, r4, r5, pc}
 800727c:	2000075c 	.word	0x2000075c

08007280 <_read_r>:
 8007280:	b538      	push	{r3, r4, r5, lr}
 8007282:	4d07      	ldr	r5, [pc, #28]	; (80072a0 <_read_r+0x20>)
 8007284:	4604      	mov	r4, r0
 8007286:	4608      	mov	r0, r1
 8007288:	4611      	mov	r1, r2
 800728a:	2200      	movs	r2, #0
 800728c:	602a      	str	r2, [r5, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7fb f872 	bl	8002378 <_read>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	d102      	bne.n	800729e <_read_r+0x1e>
 8007298:	682b      	ldr	r3, [r5, #0]
 800729a:	b103      	cbz	r3, 800729e <_read_r+0x1e>
 800729c:	6023      	str	r3, [r4, #0]
 800729e:	bd38      	pop	{r3, r4, r5, pc}
 80072a0:	2000075c 	.word	0x2000075c

080072a4 <_write_r>:
 80072a4:	b538      	push	{r3, r4, r5, lr}
 80072a6:	4d07      	ldr	r5, [pc, #28]	; (80072c4 <_write_r+0x20>)
 80072a8:	4604      	mov	r4, r0
 80072aa:	4608      	mov	r0, r1
 80072ac:	4611      	mov	r1, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	602a      	str	r2, [r5, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	f7fb f87d 	bl	80023b2 <_write>
 80072b8:	1c43      	adds	r3, r0, #1
 80072ba:	d102      	bne.n	80072c2 <_write_r+0x1e>
 80072bc:	682b      	ldr	r3, [r5, #0]
 80072be:	b103      	cbz	r3, 80072c2 <_write_r+0x1e>
 80072c0:	6023      	str	r3, [r4, #0]
 80072c2:	bd38      	pop	{r3, r4, r5, pc}
 80072c4:	2000075c 	.word	0x2000075c

080072c8 <__errno>:
 80072c8:	4b01      	ldr	r3, [pc, #4]	; (80072d0 <__errno+0x8>)
 80072ca:	6818      	ldr	r0, [r3, #0]
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20000080 	.word	0x20000080

080072d4 <__libc_init_array>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4d0d      	ldr	r5, [pc, #52]	; (800730c <__libc_init_array+0x38>)
 80072d8:	4c0d      	ldr	r4, [pc, #52]	; (8007310 <__libc_init_array+0x3c>)
 80072da:	1b64      	subs	r4, r4, r5
 80072dc:	10a4      	asrs	r4, r4, #2
 80072de:	2600      	movs	r6, #0
 80072e0:	42a6      	cmp	r6, r4
 80072e2:	d109      	bne.n	80072f8 <__libc_init_array+0x24>
 80072e4:	4d0b      	ldr	r5, [pc, #44]	; (8007314 <__libc_init_array+0x40>)
 80072e6:	4c0c      	ldr	r4, [pc, #48]	; (8007318 <__libc_init_array+0x44>)
 80072e8:	f001 feec 	bl	80090c4 <_init>
 80072ec:	1b64      	subs	r4, r4, r5
 80072ee:	10a4      	asrs	r4, r4, #2
 80072f0:	2600      	movs	r6, #0
 80072f2:	42a6      	cmp	r6, r4
 80072f4:	d105      	bne.n	8007302 <__libc_init_array+0x2e>
 80072f6:	bd70      	pop	{r4, r5, r6, pc}
 80072f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072fc:	4798      	blx	r3
 80072fe:	3601      	adds	r6, #1
 8007300:	e7ee      	b.n	80072e0 <__libc_init_array+0xc>
 8007302:	f855 3b04 	ldr.w	r3, [r5], #4
 8007306:	4798      	blx	r3
 8007308:	3601      	adds	r6, #1
 800730a:	e7f2      	b.n	80072f2 <__libc_init_array+0x1e>
 800730c:	0800949c 	.word	0x0800949c
 8007310:	0800949c 	.word	0x0800949c
 8007314:	0800949c 	.word	0x0800949c
 8007318:	080094a0 	.word	0x080094a0

0800731c <__retarget_lock_init_recursive>:
 800731c:	4770      	bx	lr

0800731e <__retarget_lock_acquire_recursive>:
 800731e:	4770      	bx	lr

08007320 <__retarget_lock_release_recursive>:
 8007320:	4770      	bx	lr

08007322 <memcpy>:
 8007322:	440a      	add	r2, r1
 8007324:	4291      	cmp	r1, r2
 8007326:	f100 33ff 	add.w	r3, r0, #4294967295
 800732a:	d100      	bne.n	800732e <memcpy+0xc>
 800732c:	4770      	bx	lr
 800732e:	b510      	push	{r4, lr}
 8007330:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007334:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007338:	4291      	cmp	r1, r2
 800733a:	d1f9      	bne.n	8007330 <memcpy+0xe>
 800733c:	bd10      	pop	{r4, pc}

0800733e <quorem>:
 800733e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007342:	6903      	ldr	r3, [r0, #16]
 8007344:	690c      	ldr	r4, [r1, #16]
 8007346:	42a3      	cmp	r3, r4
 8007348:	4607      	mov	r7, r0
 800734a:	db7e      	blt.n	800744a <quorem+0x10c>
 800734c:	3c01      	subs	r4, #1
 800734e:	f101 0814 	add.w	r8, r1, #20
 8007352:	f100 0514 	add.w	r5, r0, #20
 8007356:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007360:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007364:	3301      	adds	r3, #1
 8007366:	429a      	cmp	r2, r3
 8007368:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800736c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007370:	fbb2 f6f3 	udiv	r6, r2, r3
 8007374:	d331      	bcc.n	80073da <quorem+0x9c>
 8007376:	f04f 0e00 	mov.w	lr, #0
 800737a:	4640      	mov	r0, r8
 800737c:	46ac      	mov	ip, r5
 800737e:	46f2      	mov	sl, lr
 8007380:	f850 2b04 	ldr.w	r2, [r0], #4
 8007384:	b293      	uxth	r3, r2
 8007386:	fb06 e303 	mla	r3, r6, r3, lr
 800738a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800738e:	0c1a      	lsrs	r2, r3, #16
 8007390:	b29b      	uxth	r3, r3
 8007392:	ebaa 0303 	sub.w	r3, sl, r3
 8007396:	f8dc a000 	ldr.w	sl, [ip]
 800739a:	fa13 f38a 	uxtah	r3, r3, sl
 800739e:	fb06 220e 	mla	r2, r6, lr, r2
 80073a2:	9300      	str	r3, [sp, #0]
 80073a4:	9b00      	ldr	r3, [sp, #0]
 80073a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80073aa:	b292      	uxth	r2, r2
 80073ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80073b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80073b4:	f8bd 3000 	ldrh.w	r3, [sp]
 80073b8:	4581      	cmp	r9, r0
 80073ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073be:	f84c 3b04 	str.w	r3, [ip], #4
 80073c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80073c6:	d2db      	bcs.n	8007380 <quorem+0x42>
 80073c8:	f855 300b 	ldr.w	r3, [r5, fp]
 80073cc:	b92b      	cbnz	r3, 80073da <quorem+0x9c>
 80073ce:	9b01      	ldr	r3, [sp, #4]
 80073d0:	3b04      	subs	r3, #4
 80073d2:	429d      	cmp	r5, r3
 80073d4:	461a      	mov	r2, r3
 80073d6:	d32c      	bcc.n	8007432 <quorem+0xf4>
 80073d8:	613c      	str	r4, [r7, #16]
 80073da:	4638      	mov	r0, r7
 80073dc:	f001 f9a6 	bl	800872c <__mcmp>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	db22      	blt.n	800742a <quorem+0xec>
 80073e4:	3601      	adds	r6, #1
 80073e6:	4629      	mov	r1, r5
 80073e8:	2000      	movs	r0, #0
 80073ea:	f858 2b04 	ldr.w	r2, [r8], #4
 80073ee:	f8d1 c000 	ldr.w	ip, [r1]
 80073f2:	b293      	uxth	r3, r2
 80073f4:	1ac3      	subs	r3, r0, r3
 80073f6:	0c12      	lsrs	r2, r2, #16
 80073f8:	fa13 f38c 	uxtah	r3, r3, ip
 80073fc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007400:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007404:	b29b      	uxth	r3, r3
 8007406:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800740a:	45c1      	cmp	r9, r8
 800740c:	f841 3b04 	str.w	r3, [r1], #4
 8007410:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007414:	d2e9      	bcs.n	80073ea <quorem+0xac>
 8007416:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800741a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800741e:	b922      	cbnz	r2, 800742a <quorem+0xec>
 8007420:	3b04      	subs	r3, #4
 8007422:	429d      	cmp	r5, r3
 8007424:	461a      	mov	r2, r3
 8007426:	d30a      	bcc.n	800743e <quorem+0x100>
 8007428:	613c      	str	r4, [r7, #16]
 800742a:	4630      	mov	r0, r6
 800742c:	b003      	add	sp, #12
 800742e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007432:	6812      	ldr	r2, [r2, #0]
 8007434:	3b04      	subs	r3, #4
 8007436:	2a00      	cmp	r2, #0
 8007438:	d1ce      	bne.n	80073d8 <quorem+0x9a>
 800743a:	3c01      	subs	r4, #1
 800743c:	e7c9      	b.n	80073d2 <quorem+0x94>
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	3b04      	subs	r3, #4
 8007442:	2a00      	cmp	r2, #0
 8007444:	d1f0      	bne.n	8007428 <quorem+0xea>
 8007446:	3c01      	subs	r4, #1
 8007448:	e7eb      	b.n	8007422 <quorem+0xe4>
 800744a:	2000      	movs	r0, #0
 800744c:	e7ee      	b.n	800742c <quorem+0xee>
	...

08007450 <_dtoa_r>:
 8007450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007454:	ed2d 8b04 	vpush	{d8-d9}
 8007458:	69c5      	ldr	r5, [r0, #28]
 800745a:	b093      	sub	sp, #76	; 0x4c
 800745c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007460:	ec57 6b10 	vmov	r6, r7, d0
 8007464:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007468:	9107      	str	r1, [sp, #28]
 800746a:	4604      	mov	r4, r0
 800746c:	920a      	str	r2, [sp, #40]	; 0x28
 800746e:	930d      	str	r3, [sp, #52]	; 0x34
 8007470:	b975      	cbnz	r5, 8007490 <_dtoa_r+0x40>
 8007472:	2010      	movs	r0, #16
 8007474:	f000 fe2a 	bl	80080cc <malloc>
 8007478:	4602      	mov	r2, r0
 800747a:	61e0      	str	r0, [r4, #28]
 800747c:	b920      	cbnz	r0, 8007488 <_dtoa_r+0x38>
 800747e:	4bae      	ldr	r3, [pc, #696]	; (8007738 <_dtoa_r+0x2e8>)
 8007480:	21ef      	movs	r1, #239	; 0xef
 8007482:	48ae      	ldr	r0, [pc, #696]	; (800773c <_dtoa_r+0x2ec>)
 8007484:	f001 fb10 	bl	8008aa8 <__assert_func>
 8007488:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800748c:	6005      	str	r5, [r0, #0]
 800748e:	60c5      	str	r5, [r0, #12]
 8007490:	69e3      	ldr	r3, [r4, #28]
 8007492:	6819      	ldr	r1, [r3, #0]
 8007494:	b151      	cbz	r1, 80074ac <_dtoa_r+0x5c>
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	604a      	str	r2, [r1, #4]
 800749a:	2301      	movs	r3, #1
 800749c:	4093      	lsls	r3, r2
 800749e:	608b      	str	r3, [r1, #8]
 80074a0:	4620      	mov	r0, r4
 80074a2:	f000 ff07 	bl	80082b4 <_Bfree>
 80074a6:	69e3      	ldr	r3, [r4, #28]
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	1e3b      	subs	r3, r7, #0
 80074ae:	bfbb      	ittet	lt
 80074b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80074b4:	9303      	strlt	r3, [sp, #12]
 80074b6:	2300      	movge	r3, #0
 80074b8:	2201      	movlt	r2, #1
 80074ba:	bfac      	ite	ge
 80074bc:	f8c8 3000 	strge.w	r3, [r8]
 80074c0:	f8c8 2000 	strlt.w	r2, [r8]
 80074c4:	4b9e      	ldr	r3, [pc, #632]	; (8007740 <_dtoa_r+0x2f0>)
 80074c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80074ca:	ea33 0308 	bics.w	r3, r3, r8
 80074ce:	d11b      	bne.n	8007508 <_dtoa_r+0xb8>
 80074d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80074d2:	f242 730f 	movw	r3, #9999	; 0x270f
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80074dc:	4333      	orrs	r3, r6
 80074de:	f000 8593 	beq.w	8008008 <_dtoa_r+0xbb8>
 80074e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80074e4:	b963      	cbnz	r3, 8007500 <_dtoa_r+0xb0>
 80074e6:	4b97      	ldr	r3, [pc, #604]	; (8007744 <_dtoa_r+0x2f4>)
 80074e8:	e027      	b.n	800753a <_dtoa_r+0xea>
 80074ea:	4b97      	ldr	r3, [pc, #604]	; (8007748 <_dtoa_r+0x2f8>)
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	3308      	adds	r3, #8
 80074f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80074f2:	6013      	str	r3, [r2, #0]
 80074f4:	9800      	ldr	r0, [sp, #0]
 80074f6:	b013      	add	sp, #76	; 0x4c
 80074f8:	ecbd 8b04 	vpop	{d8-d9}
 80074fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007500:	4b90      	ldr	r3, [pc, #576]	; (8007744 <_dtoa_r+0x2f4>)
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	3303      	adds	r3, #3
 8007506:	e7f3      	b.n	80074f0 <_dtoa_r+0xa0>
 8007508:	ed9d 7b02 	vldr	d7, [sp, #8]
 800750c:	2200      	movs	r2, #0
 800750e:	ec51 0b17 	vmov	r0, r1, d7
 8007512:	eeb0 8a47 	vmov.f32	s16, s14
 8007516:	eef0 8a67 	vmov.f32	s17, s15
 800751a:	2300      	movs	r3, #0
 800751c:	f7f9 fafc 	bl	8000b18 <__aeabi_dcmpeq>
 8007520:	4681      	mov	r9, r0
 8007522:	b160      	cbz	r0, 800753e <_dtoa_r+0xee>
 8007524:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007526:	2301      	movs	r3, #1
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 8568 	beq.w	8008002 <_dtoa_r+0xbb2>
 8007532:	4b86      	ldr	r3, [pc, #536]	; (800774c <_dtoa_r+0x2fc>)
 8007534:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007536:	6013      	str	r3, [r2, #0]
 8007538:	3b01      	subs	r3, #1
 800753a:	9300      	str	r3, [sp, #0]
 800753c:	e7da      	b.n	80074f4 <_dtoa_r+0xa4>
 800753e:	aa10      	add	r2, sp, #64	; 0x40
 8007540:	a911      	add	r1, sp, #68	; 0x44
 8007542:	4620      	mov	r0, r4
 8007544:	eeb0 0a48 	vmov.f32	s0, s16
 8007548:	eef0 0a68 	vmov.f32	s1, s17
 800754c:	f001 f994 	bl	8008878 <__d2b>
 8007550:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007554:	4682      	mov	sl, r0
 8007556:	2d00      	cmp	r5, #0
 8007558:	d07f      	beq.n	800765a <_dtoa_r+0x20a>
 800755a:	ee18 3a90 	vmov	r3, s17
 800755e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007562:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007566:	ec51 0b18 	vmov	r0, r1, d8
 800756a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800756e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007572:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007576:	4619      	mov	r1, r3
 8007578:	2200      	movs	r2, #0
 800757a:	4b75      	ldr	r3, [pc, #468]	; (8007750 <_dtoa_r+0x300>)
 800757c:	f7f8 feac 	bl	80002d8 <__aeabi_dsub>
 8007580:	a367      	add	r3, pc, #412	; (adr r3, 8007720 <_dtoa_r+0x2d0>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f9 f85f 	bl	8000648 <__aeabi_dmul>
 800758a:	a367      	add	r3, pc, #412	; (adr r3, 8007728 <_dtoa_r+0x2d8>)
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	f7f8 fea4 	bl	80002dc <__adddf3>
 8007594:	4606      	mov	r6, r0
 8007596:	4628      	mov	r0, r5
 8007598:	460f      	mov	r7, r1
 800759a:	f7f8 ffeb 	bl	8000574 <__aeabi_i2d>
 800759e:	a364      	add	r3, pc, #400	; (adr r3, 8007730 <_dtoa_r+0x2e0>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f7f9 f850 	bl	8000648 <__aeabi_dmul>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4630      	mov	r0, r6
 80075ae:	4639      	mov	r1, r7
 80075b0:	f7f8 fe94 	bl	80002dc <__adddf3>
 80075b4:	4606      	mov	r6, r0
 80075b6:	460f      	mov	r7, r1
 80075b8:	f7f9 faf6 	bl	8000ba8 <__aeabi_d2iz>
 80075bc:	2200      	movs	r2, #0
 80075be:	4683      	mov	fp, r0
 80075c0:	2300      	movs	r3, #0
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f9 fab1 	bl	8000b2c <__aeabi_dcmplt>
 80075ca:	b148      	cbz	r0, 80075e0 <_dtoa_r+0x190>
 80075cc:	4658      	mov	r0, fp
 80075ce:	f7f8 ffd1 	bl	8000574 <__aeabi_i2d>
 80075d2:	4632      	mov	r2, r6
 80075d4:	463b      	mov	r3, r7
 80075d6:	f7f9 fa9f 	bl	8000b18 <__aeabi_dcmpeq>
 80075da:	b908      	cbnz	r0, 80075e0 <_dtoa_r+0x190>
 80075dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80075e0:	f1bb 0f16 	cmp.w	fp, #22
 80075e4:	d857      	bhi.n	8007696 <_dtoa_r+0x246>
 80075e6:	4b5b      	ldr	r3, [pc, #364]	; (8007754 <_dtoa_r+0x304>)
 80075e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	ec51 0b18 	vmov	r0, r1, d8
 80075f4:	f7f9 fa9a 	bl	8000b2c <__aeabi_dcmplt>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d04e      	beq.n	800769a <_dtoa_r+0x24a>
 80075fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007600:	2300      	movs	r3, #0
 8007602:	930c      	str	r3, [sp, #48]	; 0x30
 8007604:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007606:	1b5b      	subs	r3, r3, r5
 8007608:	1e5a      	subs	r2, r3, #1
 800760a:	bf45      	ittet	mi
 800760c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007610:	9305      	strmi	r3, [sp, #20]
 8007612:	2300      	movpl	r3, #0
 8007614:	2300      	movmi	r3, #0
 8007616:	9206      	str	r2, [sp, #24]
 8007618:	bf54      	ite	pl
 800761a:	9305      	strpl	r3, [sp, #20]
 800761c:	9306      	strmi	r3, [sp, #24]
 800761e:	f1bb 0f00 	cmp.w	fp, #0
 8007622:	db3c      	blt.n	800769e <_dtoa_r+0x24e>
 8007624:	9b06      	ldr	r3, [sp, #24]
 8007626:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800762a:	445b      	add	r3, fp
 800762c:	9306      	str	r3, [sp, #24]
 800762e:	2300      	movs	r3, #0
 8007630:	9308      	str	r3, [sp, #32]
 8007632:	9b07      	ldr	r3, [sp, #28]
 8007634:	2b09      	cmp	r3, #9
 8007636:	d868      	bhi.n	800770a <_dtoa_r+0x2ba>
 8007638:	2b05      	cmp	r3, #5
 800763a:	bfc4      	itt	gt
 800763c:	3b04      	subgt	r3, #4
 800763e:	9307      	strgt	r3, [sp, #28]
 8007640:	9b07      	ldr	r3, [sp, #28]
 8007642:	f1a3 0302 	sub.w	r3, r3, #2
 8007646:	bfcc      	ite	gt
 8007648:	2500      	movgt	r5, #0
 800764a:	2501      	movle	r5, #1
 800764c:	2b03      	cmp	r3, #3
 800764e:	f200 8085 	bhi.w	800775c <_dtoa_r+0x30c>
 8007652:	e8df f003 	tbb	[pc, r3]
 8007656:	3b2e      	.short	0x3b2e
 8007658:	5839      	.short	0x5839
 800765a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800765e:	441d      	add	r5, r3
 8007660:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007664:	2b20      	cmp	r3, #32
 8007666:	bfc1      	itttt	gt
 8007668:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800766c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007670:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007674:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007678:	bfd6      	itet	le
 800767a:	f1c3 0320 	rsble	r3, r3, #32
 800767e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007682:	fa06 f003 	lslle.w	r0, r6, r3
 8007686:	f7f8 ff65 	bl	8000554 <__aeabi_ui2d>
 800768a:	2201      	movs	r2, #1
 800768c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007690:	3d01      	subs	r5, #1
 8007692:	920e      	str	r2, [sp, #56]	; 0x38
 8007694:	e76f      	b.n	8007576 <_dtoa_r+0x126>
 8007696:	2301      	movs	r3, #1
 8007698:	e7b3      	b.n	8007602 <_dtoa_r+0x1b2>
 800769a:	900c      	str	r0, [sp, #48]	; 0x30
 800769c:	e7b2      	b.n	8007604 <_dtoa_r+0x1b4>
 800769e:	9b05      	ldr	r3, [sp, #20]
 80076a0:	eba3 030b 	sub.w	r3, r3, fp
 80076a4:	9305      	str	r3, [sp, #20]
 80076a6:	f1cb 0300 	rsb	r3, fp, #0
 80076aa:	9308      	str	r3, [sp, #32]
 80076ac:	2300      	movs	r3, #0
 80076ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80076b0:	e7bf      	b.n	8007632 <_dtoa_r+0x1e2>
 80076b2:	2300      	movs	r3, #0
 80076b4:	9309      	str	r3, [sp, #36]	; 0x24
 80076b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dc52      	bgt.n	8007762 <_dtoa_r+0x312>
 80076bc:	2301      	movs	r3, #1
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	9304      	str	r3, [sp, #16]
 80076c2:	461a      	mov	r2, r3
 80076c4:	920a      	str	r2, [sp, #40]	; 0x28
 80076c6:	e00b      	b.n	80076e0 <_dtoa_r+0x290>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e7f3      	b.n	80076b4 <_dtoa_r+0x264>
 80076cc:	2300      	movs	r3, #0
 80076ce:	9309      	str	r3, [sp, #36]	; 0x24
 80076d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d2:	445b      	add	r3, fp
 80076d4:	9301      	str	r3, [sp, #4]
 80076d6:	3301      	adds	r3, #1
 80076d8:	2b01      	cmp	r3, #1
 80076da:	9304      	str	r3, [sp, #16]
 80076dc:	bfb8      	it	lt
 80076de:	2301      	movlt	r3, #1
 80076e0:	69e0      	ldr	r0, [r4, #28]
 80076e2:	2100      	movs	r1, #0
 80076e4:	2204      	movs	r2, #4
 80076e6:	f102 0614 	add.w	r6, r2, #20
 80076ea:	429e      	cmp	r6, r3
 80076ec:	d93d      	bls.n	800776a <_dtoa_r+0x31a>
 80076ee:	6041      	str	r1, [r0, #4]
 80076f0:	4620      	mov	r0, r4
 80076f2:	f000 fd9f 	bl	8008234 <_Balloc>
 80076f6:	9000      	str	r0, [sp, #0]
 80076f8:	2800      	cmp	r0, #0
 80076fa:	d139      	bne.n	8007770 <_dtoa_r+0x320>
 80076fc:	4b16      	ldr	r3, [pc, #88]	; (8007758 <_dtoa_r+0x308>)
 80076fe:	4602      	mov	r2, r0
 8007700:	f240 11af 	movw	r1, #431	; 0x1af
 8007704:	e6bd      	b.n	8007482 <_dtoa_r+0x32>
 8007706:	2301      	movs	r3, #1
 8007708:	e7e1      	b.n	80076ce <_dtoa_r+0x27e>
 800770a:	2501      	movs	r5, #1
 800770c:	2300      	movs	r3, #0
 800770e:	9307      	str	r3, [sp, #28]
 8007710:	9509      	str	r5, [sp, #36]	; 0x24
 8007712:	f04f 33ff 	mov.w	r3, #4294967295
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	9304      	str	r3, [sp, #16]
 800771a:	2200      	movs	r2, #0
 800771c:	2312      	movs	r3, #18
 800771e:	e7d1      	b.n	80076c4 <_dtoa_r+0x274>
 8007720:	636f4361 	.word	0x636f4361
 8007724:	3fd287a7 	.word	0x3fd287a7
 8007728:	8b60c8b3 	.word	0x8b60c8b3
 800772c:	3fc68a28 	.word	0x3fc68a28
 8007730:	509f79fb 	.word	0x509f79fb
 8007734:	3fd34413 	.word	0x3fd34413
 8007738:	08009161 	.word	0x08009161
 800773c:	08009178 	.word	0x08009178
 8007740:	7ff00000 	.word	0x7ff00000
 8007744:	0800915d 	.word	0x0800915d
 8007748:	08009154 	.word	0x08009154
 800774c:	08009131 	.word	0x08009131
 8007750:	3ff80000 	.word	0x3ff80000
 8007754:	08009268 	.word	0x08009268
 8007758:	080091d0 	.word	0x080091d0
 800775c:	2301      	movs	r3, #1
 800775e:	9309      	str	r3, [sp, #36]	; 0x24
 8007760:	e7d7      	b.n	8007712 <_dtoa_r+0x2c2>
 8007762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	9304      	str	r3, [sp, #16]
 8007768:	e7ba      	b.n	80076e0 <_dtoa_r+0x290>
 800776a:	3101      	adds	r1, #1
 800776c:	0052      	lsls	r2, r2, #1
 800776e:	e7ba      	b.n	80076e6 <_dtoa_r+0x296>
 8007770:	69e3      	ldr	r3, [r4, #28]
 8007772:	9a00      	ldr	r2, [sp, #0]
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	9b04      	ldr	r3, [sp, #16]
 8007778:	2b0e      	cmp	r3, #14
 800777a:	f200 80a8 	bhi.w	80078ce <_dtoa_r+0x47e>
 800777e:	2d00      	cmp	r5, #0
 8007780:	f000 80a5 	beq.w	80078ce <_dtoa_r+0x47e>
 8007784:	f1bb 0f00 	cmp.w	fp, #0
 8007788:	dd38      	ble.n	80077fc <_dtoa_r+0x3ac>
 800778a:	4bc0      	ldr	r3, [pc, #768]	; (8007a8c <_dtoa_r+0x63c>)
 800778c:	f00b 020f 	and.w	r2, fp, #15
 8007790:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007794:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007798:	e9d3 6700 	ldrd	r6, r7, [r3]
 800779c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80077a0:	d019      	beq.n	80077d6 <_dtoa_r+0x386>
 80077a2:	4bbb      	ldr	r3, [pc, #748]	; (8007a90 <_dtoa_r+0x640>)
 80077a4:	ec51 0b18 	vmov	r0, r1, d8
 80077a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80077ac:	f7f9 f876 	bl	800089c <__aeabi_ddiv>
 80077b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b4:	f008 080f 	and.w	r8, r8, #15
 80077b8:	2503      	movs	r5, #3
 80077ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007a90 <_dtoa_r+0x640>
 80077be:	f1b8 0f00 	cmp.w	r8, #0
 80077c2:	d10a      	bne.n	80077da <_dtoa_r+0x38a>
 80077c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077c8:	4632      	mov	r2, r6
 80077ca:	463b      	mov	r3, r7
 80077cc:	f7f9 f866 	bl	800089c <__aeabi_ddiv>
 80077d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077d4:	e02b      	b.n	800782e <_dtoa_r+0x3de>
 80077d6:	2502      	movs	r5, #2
 80077d8:	e7ef      	b.n	80077ba <_dtoa_r+0x36a>
 80077da:	f018 0f01 	tst.w	r8, #1
 80077de:	d008      	beq.n	80077f2 <_dtoa_r+0x3a2>
 80077e0:	4630      	mov	r0, r6
 80077e2:	4639      	mov	r1, r7
 80077e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80077e8:	f7f8 ff2e 	bl	8000648 <__aeabi_dmul>
 80077ec:	3501      	adds	r5, #1
 80077ee:	4606      	mov	r6, r0
 80077f0:	460f      	mov	r7, r1
 80077f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80077f6:	f109 0908 	add.w	r9, r9, #8
 80077fa:	e7e0      	b.n	80077be <_dtoa_r+0x36e>
 80077fc:	f000 809f 	beq.w	800793e <_dtoa_r+0x4ee>
 8007800:	f1cb 0600 	rsb	r6, fp, #0
 8007804:	4ba1      	ldr	r3, [pc, #644]	; (8007a8c <_dtoa_r+0x63c>)
 8007806:	4fa2      	ldr	r7, [pc, #648]	; (8007a90 <_dtoa_r+0x640>)
 8007808:	f006 020f 	and.w	r2, r6, #15
 800780c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007814:	ec51 0b18 	vmov	r0, r1, d8
 8007818:	f7f8 ff16 	bl	8000648 <__aeabi_dmul>
 800781c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007820:	1136      	asrs	r6, r6, #4
 8007822:	2300      	movs	r3, #0
 8007824:	2502      	movs	r5, #2
 8007826:	2e00      	cmp	r6, #0
 8007828:	d17e      	bne.n	8007928 <_dtoa_r+0x4d8>
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1d0      	bne.n	80077d0 <_dtoa_r+0x380>
 800782e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007830:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8084 	beq.w	8007942 <_dtoa_r+0x4f2>
 800783a:	4b96      	ldr	r3, [pc, #600]	; (8007a94 <_dtoa_r+0x644>)
 800783c:	2200      	movs	r2, #0
 800783e:	4640      	mov	r0, r8
 8007840:	4649      	mov	r1, r9
 8007842:	f7f9 f973 	bl	8000b2c <__aeabi_dcmplt>
 8007846:	2800      	cmp	r0, #0
 8007848:	d07b      	beq.n	8007942 <_dtoa_r+0x4f2>
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d078      	beq.n	8007942 <_dtoa_r+0x4f2>
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	2b00      	cmp	r3, #0
 8007854:	dd39      	ble.n	80078ca <_dtoa_r+0x47a>
 8007856:	4b90      	ldr	r3, [pc, #576]	; (8007a98 <_dtoa_r+0x648>)
 8007858:	2200      	movs	r2, #0
 800785a:	4640      	mov	r0, r8
 800785c:	4649      	mov	r1, r9
 800785e:	f7f8 fef3 	bl	8000648 <__aeabi_dmul>
 8007862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007866:	9e01      	ldr	r6, [sp, #4]
 8007868:	f10b 37ff 	add.w	r7, fp, #4294967295
 800786c:	3501      	adds	r5, #1
 800786e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007872:	4628      	mov	r0, r5
 8007874:	f7f8 fe7e 	bl	8000574 <__aeabi_i2d>
 8007878:	4642      	mov	r2, r8
 800787a:	464b      	mov	r3, r9
 800787c:	f7f8 fee4 	bl	8000648 <__aeabi_dmul>
 8007880:	4b86      	ldr	r3, [pc, #536]	; (8007a9c <_dtoa_r+0x64c>)
 8007882:	2200      	movs	r2, #0
 8007884:	f7f8 fd2a 	bl	80002dc <__adddf3>
 8007888:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800788c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007890:	9303      	str	r3, [sp, #12]
 8007892:	2e00      	cmp	r6, #0
 8007894:	d158      	bne.n	8007948 <_dtoa_r+0x4f8>
 8007896:	4b82      	ldr	r3, [pc, #520]	; (8007aa0 <_dtoa_r+0x650>)
 8007898:	2200      	movs	r2, #0
 800789a:	4640      	mov	r0, r8
 800789c:	4649      	mov	r1, r9
 800789e:	f7f8 fd1b 	bl	80002d8 <__aeabi_dsub>
 80078a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078a6:	4680      	mov	r8, r0
 80078a8:	4689      	mov	r9, r1
 80078aa:	f7f9 f95d 	bl	8000b68 <__aeabi_dcmpgt>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f040 8296 	bne.w	8007de0 <_dtoa_r+0x990>
 80078b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80078b8:	4640      	mov	r0, r8
 80078ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078be:	4649      	mov	r1, r9
 80078c0:	f7f9 f934 	bl	8000b2c <__aeabi_dcmplt>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	f040 8289 	bne.w	8007ddc <_dtoa_r+0x98c>
 80078ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80078ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f2c0 814e 	blt.w	8007b72 <_dtoa_r+0x722>
 80078d6:	f1bb 0f0e 	cmp.w	fp, #14
 80078da:	f300 814a 	bgt.w	8007b72 <_dtoa_r+0x722>
 80078de:	4b6b      	ldr	r3, [pc, #428]	; (8007a8c <_dtoa_r+0x63c>)
 80078e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80078e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	f280 80dc 	bge.w	8007aa8 <_dtoa_r+0x658>
 80078f0:	9b04      	ldr	r3, [sp, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f300 80d8 	bgt.w	8007aa8 <_dtoa_r+0x658>
 80078f8:	f040 826f 	bne.w	8007dda <_dtoa_r+0x98a>
 80078fc:	4b68      	ldr	r3, [pc, #416]	; (8007aa0 <_dtoa_r+0x650>)
 80078fe:	2200      	movs	r2, #0
 8007900:	4640      	mov	r0, r8
 8007902:	4649      	mov	r1, r9
 8007904:	f7f8 fea0 	bl	8000648 <__aeabi_dmul>
 8007908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800790c:	f7f9 f922 	bl	8000b54 <__aeabi_dcmpge>
 8007910:	9e04      	ldr	r6, [sp, #16]
 8007912:	4637      	mov	r7, r6
 8007914:	2800      	cmp	r0, #0
 8007916:	f040 8245 	bne.w	8007da4 <_dtoa_r+0x954>
 800791a:	9d00      	ldr	r5, [sp, #0]
 800791c:	2331      	movs	r3, #49	; 0x31
 800791e:	f805 3b01 	strb.w	r3, [r5], #1
 8007922:	f10b 0b01 	add.w	fp, fp, #1
 8007926:	e241      	b.n	8007dac <_dtoa_r+0x95c>
 8007928:	07f2      	lsls	r2, r6, #31
 800792a:	d505      	bpl.n	8007938 <_dtoa_r+0x4e8>
 800792c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007930:	f7f8 fe8a 	bl	8000648 <__aeabi_dmul>
 8007934:	3501      	adds	r5, #1
 8007936:	2301      	movs	r3, #1
 8007938:	1076      	asrs	r6, r6, #1
 800793a:	3708      	adds	r7, #8
 800793c:	e773      	b.n	8007826 <_dtoa_r+0x3d6>
 800793e:	2502      	movs	r5, #2
 8007940:	e775      	b.n	800782e <_dtoa_r+0x3de>
 8007942:	9e04      	ldr	r6, [sp, #16]
 8007944:	465f      	mov	r7, fp
 8007946:	e792      	b.n	800786e <_dtoa_r+0x41e>
 8007948:	9900      	ldr	r1, [sp, #0]
 800794a:	4b50      	ldr	r3, [pc, #320]	; (8007a8c <_dtoa_r+0x63c>)
 800794c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007950:	4431      	add	r1, r6
 8007952:	9102      	str	r1, [sp, #8]
 8007954:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007956:	eeb0 9a47 	vmov.f32	s18, s14
 800795a:	eef0 9a67 	vmov.f32	s19, s15
 800795e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007962:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007966:	2900      	cmp	r1, #0
 8007968:	d044      	beq.n	80079f4 <_dtoa_r+0x5a4>
 800796a:	494e      	ldr	r1, [pc, #312]	; (8007aa4 <_dtoa_r+0x654>)
 800796c:	2000      	movs	r0, #0
 800796e:	f7f8 ff95 	bl	800089c <__aeabi_ddiv>
 8007972:	ec53 2b19 	vmov	r2, r3, d9
 8007976:	f7f8 fcaf 	bl	80002d8 <__aeabi_dsub>
 800797a:	9d00      	ldr	r5, [sp, #0]
 800797c:	ec41 0b19 	vmov	d9, r0, r1
 8007980:	4649      	mov	r1, r9
 8007982:	4640      	mov	r0, r8
 8007984:	f7f9 f910 	bl	8000ba8 <__aeabi_d2iz>
 8007988:	4606      	mov	r6, r0
 800798a:	f7f8 fdf3 	bl	8000574 <__aeabi_i2d>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4640      	mov	r0, r8
 8007994:	4649      	mov	r1, r9
 8007996:	f7f8 fc9f 	bl	80002d8 <__aeabi_dsub>
 800799a:	3630      	adds	r6, #48	; 0x30
 800799c:	f805 6b01 	strb.w	r6, [r5], #1
 80079a0:	ec53 2b19 	vmov	r2, r3, d9
 80079a4:	4680      	mov	r8, r0
 80079a6:	4689      	mov	r9, r1
 80079a8:	f7f9 f8c0 	bl	8000b2c <__aeabi_dcmplt>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	d164      	bne.n	8007a7a <_dtoa_r+0x62a>
 80079b0:	4642      	mov	r2, r8
 80079b2:	464b      	mov	r3, r9
 80079b4:	4937      	ldr	r1, [pc, #220]	; (8007a94 <_dtoa_r+0x644>)
 80079b6:	2000      	movs	r0, #0
 80079b8:	f7f8 fc8e 	bl	80002d8 <__aeabi_dsub>
 80079bc:	ec53 2b19 	vmov	r2, r3, d9
 80079c0:	f7f9 f8b4 	bl	8000b2c <__aeabi_dcmplt>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	f040 80b6 	bne.w	8007b36 <_dtoa_r+0x6e6>
 80079ca:	9b02      	ldr	r3, [sp, #8]
 80079cc:	429d      	cmp	r5, r3
 80079ce:	f43f af7c 	beq.w	80078ca <_dtoa_r+0x47a>
 80079d2:	4b31      	ldr	r3, [pc, #196]	; (8007a98 <_dtoa_r+0x648>)
 80079d4:	ec51 0b19 	vmov	r0, r1, d9
 80079d8:	2200      	movs	r2, #0
 80079da:	f7f8 fe35 	bl	8000648 <__aeabi_dmul>
 80079de:	4b2e      	ldr	r3, [pc, #184]	; (8007a98 <_dtoa_r+0x648>)
 80079e0:	ec41 0b19 	vmov	d9, r0, r1
 80079e4:	2200      	movs	r2, #0
 80079e6:	4640      	mov	r0, r8
 80079e8:	4649      	mov	r1, r9
 80079ea:	f7f8 fe2d 	bl	8000648 <__aeabi_dmul>
 80079ee:	4680      	mov	r8, r0
 80079f0:	4689      	mov	r9, r1
 80079f2:	e7c5      	b.n	8007980 <_dtoa_r+0x530>
 80079f4:	ec51 0b17 	vmov	r0, r1, d7
 80079f8:	f7f8 fe26 	bl	8000648 <__aeabi_dmul>
 80079fc:	9b02      	ldr	r3, [sp, #8]
 80079fe:	9d00      	ldr	r5, [sp, #0]
 8007a00:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a02:	ec41 0b19 	vmov	d9, r0, r1
 8007a06:	4649      	mov	r1, r9
 8007a08:	4640      	mov	r0, r8
 8007a0a:	f7f9 f8cd 	bl	8000ba8 <__aeabi_d2iz>
 8007a0e:	4606      	mov	r6, r0
 8007a10:	f7f8 fdb0 	bl	8000574 <__aeabi_i2d>
 8007a14:	3630      	adds	r6, #48	; 0x30
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	4640      	mov	r0, r8
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	f7f8 fc5b 	bl	80002d8 <__aeabi_dsub>
 8007a22:	f805 6b01 	strb.w	r6, [r5], #1
 8007a26:	9b02      	ldr	r3, [sp, #8]
 8007a28:	429d      	cmp	r5, r3
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	4689      	mov	r9, r1
 8007a2e:	f04f 0200 	mov.w	r2, #0
 8007a32:	d124      	bne.n	8007a7e <_dtoa_r+0x62e>
 8007a34:	4b1b      	ldr	r3, [pc, #108]	; (8007aa4 <_dtoa_r+0x654>)
 8007a36:	ec51 0b19 	vmov	r0, r1, d9
 8007a3a:	f7f8 fc4f 	bl	80002dc <__adddf3>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4640      	mov	r0, r8
 8007a44:	4649      	mov	r1, r9
 8007a46:	f7f9 f88f 	bl	8000b68 <__aeabi_dcmpgt>
 8007a4a:	2800      	cmp	r0, #0
 8007a4c:	d173      	bne.n	8007b36 <_dtoa_r+0x6e6>
 8007a4e:	ec53 2b19 	vmov	r2, r3, d9
 8007a52:	4914      	ldr	r1, [pc, #80]	; (8007aa4 <_dtoa_r+0x654>)
 8007a54:	2000      	movs	r0, #0
 8007a56:	f7f8 fc3f 	bl	80002d8 <__aeabi_dsub>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4640      	mov	r0, r8
 8007a60:	4649      	mov	r1, r9
 8007a62:	f7f9 f863 	bl	8000b2c <__aeabi_dcmplt>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	f43f af2f 	beq.w	80078ca <_dtoa_r+0x47a>
 8007a6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007a6e:	1e6b      	subs	r3, r5, #1
 8007a70:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a76:	2b30      	cmp	r3, #48	; 0x30
 8007a78:	d0f8      	beq.n	8007a6c <_dtoa_r+0x61c>
 8007a7a:	46bb      	mov	fp, r7
 8007a7c:	e04a      	b.n	8007b14 <_dtoa_r+0x6c4>
 8007a7e:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <_dtoa_r+0x648>)
 8007a80:	f7f8 fde2 	bl	8000648 <__aeabi_dmul>
 8007a84:	4680      	mov	r8, r0
 8007a86:	4689      	mov	r9, r1
 8007a88:	e7bd      	b.n	8007a06 <_dtoa_r+0x5b6>
 8007a8a:	bf00      	nop
 8007a8c:	08009268 	.word	0x08009268
 8007a90:	08009240 	.word	0x08009240
 8007a94:	3ff00000 	.word	0x3ff00000
 8007a98:	40240000 	.word	0x40240000
 8007a9c:	401c0000 	.word	0x401c0000
 8007aa0:	40140000 	.word	0x40140000
 8007aa4:	3fe00000 	.word	0x3fe00000
 8007aa8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007aac:	9d00      	ldr	r5, [sp, #0]
 8007aae:	4642      	mov	r2, r8
 8007ab0:	464b      	mov	r3, r9
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	4639      	mov	r1, r7
 8007ab6:	f7f8 fef1 	bl	800089c <__aeabi_ddiv>
 8007aba:	f7f9 f875 	bl	8000ba8 <__aeabi_d2iz>
 8007abe:	9001      	str	r0, [sp, #4]
 8007ac0:	f7f8 fd58 	bl	8000574 <__aeabi_i2d>
 8007ac4:	4642      	mov	r2, r8
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	f7f8 fdbe 	bl	8000648 <__aeabi_dmul>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4639      	mov	r1, r7
 8007ad4:	f7f8 fc00 	bl	80002d8 <__aeabi_dsub>
 8007ad8:	9e01      	ldr	r6, [sp, #4]
 8007ada:	9f04      	ldr	r7, [sp, #16]
 8007adc:	3630      	adds	r6, #48	; 0x30
 8007ade:	f805 6b01 	strb.w	r6, [r5], #1
 8007ae2:	9e00      	ldr	r6, [sp, #0]
 8007ae4:	1bae      	subs	r6, r5, r6
 8007ae6:	42b7      	cmp	r7, r6
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	d134      	bne.n	8007b58 <_dtoa_r+0x708>
 8007aee:	f7f8 fbf5 	bl	80002dc <__adddf3>
 8007af2:	4642      	mov	r2, r8
 8007af4:	464b      	mov	r3, r9
 8007af6:	4606      	mov	r6, r0
 8007af8:	460f      	mov	r7, r1
 8007afa:	f7f9 f835 	bl	8000b68 <__aeabi_dcmpgt>
 8007afe:	b9c8      	cbnz	r0, 8007b34 <_dtoa_r+0x6e4>
 8007b00:	4642      	mov	r2, r8
 8007b02:	464b      	mov	r3, r9
 8007b04:	4630      	mov	r0, r6
 8007b06:	4639      	mov	r1, r7
 8007b08:	f7f9 f806 	bl	8000b18 <__aeabi_dcmpeq>
 8007b0c:	b110      	cbz	r0, 8007b14 <_dtoa_r+0x6c4>
 8007b0e:	9b01      	ldr	r3, [sp, #4]
 8007b10:	07db      	lsls	r3, r3, #31
 8007b12:	d40f      	bmi.n	8007b34 <_dtoa_r+0x6e4>
 8007b14:	4651      	mov	r1, sl
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 fbcc 	bl	80082b4 <_Bfree>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b20:	702b      	strb	r3, [r5, #0]
 8007b22:	f10b 0301 	add.w	r3, fp, #1
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	f43f ace2 	beq.w	80074f4 <_dtoa_r+0xa4>
 8007b30:	601d      	str	r5, [r3, #0]
 8007b32:	e4df      	b.n	80074f4 <_dtoa_r+0xa4>
 8007b34:	465f      	mov	r7, fp
 8007b36:	462b      	mov	r3, r5
 8007b38:	461d      	mov	r5, r3
 8007b3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b3e:	2a39      	cmp	r2, #57	; 0x39
 8007b40:	d106      	bne.n	8007b50 <_dtoa_r+0x700>
 8007b42:	9a00      	ldr	r2, [sp, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d1f7      	bne.n	8007b38 <_dtoa_r+0x6e8>
 8007b48:	9900      	ldr	r1, [sp, #0]
 8007b4a:	2230      	movs	r2, #48	; 0x30
 8007b4c:	3701      	adds	r7, #1
 8007b4e:	700a      	strb	r2, [r1, #0]
 8007b50:	781a      	ldrb	r2, [r3, #0]
 8007b52:	3201      	adds	r2, #1
 8007b54:	701a      	strb	r2, [r3, #0]
 8007b56:	e790      	b.n	8007a7a <_dtoa_r+0x62a>
 8007b58:	4ba3      	ldr	r3, [pc, #652]	; (8007de8 <_dtoa_r+0x998>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f7f8 fd74 	bl	8000648 <__aeabi_dmul>
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	4606      	mov	r6, r0
 8007b66:	460f      	mov	r7, r1
 8007b68:	f7f8 ffd6 	bl	8000b18 <__aeabi_dcmpeq>
 8007b6c:	2800      	cmp	r0, #0
 8007b6e:	d09e      	beq.n	8007aae <_dtoa_r+0x65e>
 8007b70:	e7d0      	b.n	8007b14 <_dtoa_r+0x6c4>
 8007b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b74:	2a00      	cmp	r2, #0
 8007b76:	f000 80ca 	beq.w	8007d0e <_dtoa_r+0x8be>
 8007b7a:	9a07      	ldr	r2, [sp, #28]
 8007b7c:	2a01      	cmp	r2, #1
 8007b7e:	f300 80ad 	bgt.w	8007cdc <_dtoa_r+0x88c>
 8007b82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	f000 80a5 	beq.w	8007cd4 <_dtoa_r+0x884>
 8007b8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007b8e:	9e08      	ldr	r6, [sp, #32]
 8007b90:	9d05      	ldr	r5, [sp, #20]
 8007b92:	9a05      	ldr	r2, [sp, #20]
 8007b94:	441a      	add	r2, r3
 8007b96:	9205      	str	r2, [sp, #20]
 8007b98:	9a06      	ldr	r2, [sp, #24]
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	441a      	add	r2, r3
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	9206      	str	r2, [sp, #24]
 8007ba2:	f000 fc3d 	bl	8008420 <__i2b>
 8007ba6:	4607      	mov	r7, r0
 8007ba8:	b165      	cbz	r5, 8007bc4 <_dtoa_r+0x774>
 8007baa:	9b06      	ldr	r3, [sp, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dd09      	ble.n	8007bc4 <_dtoa_r+0x774>
 8007bb0:	42ab      	cmp	r3, r5
 8007bb2:	9a05      	ldr	r2, [sp, #20]
 8007bb4:	bfa8      	it	ge
 8007bb6:	462b      	movge	r3, r5
 8007bb8:	1ad2      	subs	r2, r2, r3
 8007bba:	9205      	str	r2, [sp, #20]
 8007bbc:	9a06      	ldr	r2, [sp, #24]
 8007bbe:	1aed      	subs	r5, r5, r3
 8007bc0:	1ad3      	subs	r3, r2, r3
 8007bc2:	9306      	str	r3, [sp, #24]
 8007bc4:	9b08      	ldr	r3, [sp, #32]
 8007bc6:	b1f3      	cbz	r3, 8007c06 <_dtoa_r+0x7b6>
 8007bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80a3 	beq.w	8007d16 <_dtoa_r+0x8c6>
 8007bd0:	2e00      	cmp	r6, #0
 8007bd2:	dd10      	ble.n	8007bf6 <_dtoa_r+0x7a6>
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4632      	mov	r2, r6
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f000 fce1 	bl	80085a0 <__pow5mult>
 8007bde:	4652      	mov	r2, sl
 8007be0:	4601      	mov	r1, r0
 8007be2:	4607      	mov	r7, r0
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 fc31 	bl	800844c <__multiply>
 8007bea:	4651      	mov	r1, sl
 8007bec:	4680      	mov	r8, r0
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 fb60 	bl	80082b4 <_Bfree>
 8007bf4:	46c2      	mov	sl, r8
 8007bf6:	9b08      	ldr	r3, [sp, #32]
 8007bf8:	1b9a      	subs	r2, r3, r6
 8007bfa:	d004      	beq.n	8007c06 <_dtoa_r+0x7b6>
 8007bfc:	4651      	mov	r1, sl
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f000 fcce 	bl	80085a0 <__pow5mult>
 8007c04:	4682      	mov	sl, r0
 8007c06:	2101      	movs	r1, #1
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f000 fc09 	bl	8008420 <__i2b>
 8007c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	4606      	mov	r6, r0
 8007c14:	f340 8081 	ble.w	8007d1a <_dtoa_r+0x8ca>
 8007c18:	461a      	mov	r2, r3
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 fcbf 	bl	80085a0 <__pow5mult>
 8007c22:	9b07      	ldr	r3, [sp, #28]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	4606      	mov	r6, r0
 8007c28:	dd7a      	ble.n	8007d20 <_dtoa_r+0x8d0>
 8007c2a:	f04f 0800 	mov.w	r8, #0
 8007c2e:	6933      	ldr	r3, [r6, #16]
 8007c30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007c34:	6918      	ldr	r0, [r3, #16]
 8007c36:	f000 fba5 	bl	8008384 <__hi0bits>
 8007c3a:	f1c0 0020 	rsb	r0, r0, #32
 8007c3e:	9b06      	ldr	r3, [sp, #24]
 8007c40:	4418      	add	r0, r3
 8007c42:	f010 001f 	ands.w	r0, r0, #31
 8007c46:	f000 8094 	beq.w	8007d72 <_dtoa_r+0x922>
 8007c4a:	f1c0 0320 	rsb	r3, r0, #32
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	f340 8085 	ble.w	8007d5e <_dtoa_r+0x90e>
 8007c54:	9b05      	ldr	r3, [sp, #20]
 8007c56:	f1c0 001c 	rsb	r0, r0, #28
 8007c5a:	4403      	add	r3, r0
 8007c5c:	9305      	str	r3, [sp, #20]
 8007c5e:	9b06      	ldr	r3, [sp, #24]
 8007c60:	4403      	add	r3, r0
 8007c62:	4405      	add	r5, r0
 8007c64:	9306      	str	r3, [sp, #24]
 8007c66:	9b05      	ldr	r3, [sp, #20]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dd05      	ble.n	8007c78 <_dtoa_r+0x828>
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	461a      	mov	r2, r3
 8007c70:	4620      	mov	r0, r4
 8007c72:	f000 fcef 	bl	8008654 <__lshift>
 8007c76:	4682      	mov	sl, r0
 8007c78:	9b06      	ldr	r3, [sp, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	dd05      	ble.n	8007c8a <_dtoa_r+0x83a>
 8007c7e:	4631      	mov	r1, r6
 8007c80:	461a      	mov	r2, r3
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 fce6 	bl	8008654 <__lshift>
 8007c88:	4606      	mov	r6, r0
 8007c8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d072      	beq.n	8007d76 <_dtoa_r+0x926>
 8007c90:	4631      	mov	r1, r6
 8007c92:	4650      	mov	r0, sl
 8007c94:	f000 fd4a 	bl	800872c <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	da6c      	bge.n	8007d76 <_dtoa_r+0x926>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	4651      	mov	r1, sl
 8007ca0:	220a      	movs	r2, #10
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	f000 fb28 	bl	80082f8 <__multadd>
 8007ca8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007caa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007cae:	4682      	mov	sl, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	f000 81b0 	beq.w	8008016 <_dtoa_r+0xbc6>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	4639      	mov	r1, r7
 8007cba:	220a      	movs	r2, #10
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	f000 fb1b 	bl	80082f8 <__multadd>
 8007cc2:	9b01      	ldr	r3, [sp, #4]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	f300 8096 	bgt.w	8007df8 <_dtoa_r+0x9a8>
 8007ccc:	9b07      	ldr	r3, [sp, #28]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	dc59      	bgt.n	8007d86 <_dtoa_r+0x936>
 8007cd2:	e091      	b.n	8007df8 <_dtoa_r+0x9a8>
 8007cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007cda:	e758      	b.n	8007b8e <_dtoa_r+0x73e>
 8007cdc:	9b04      	ldr	r3, [sp, #16]
 8007cde:	1e5e      	subs	r6, r3, #1
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	42b3      	cmp	r3, r6
 8007ce4:	bfbf      	itttt	lt
 8007ce6:	9b08      	ldrlt	r3, [sp, #32]
 8007ce8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007cea:	9608      	strlt	r6, [sp, #32]
 8007cec:	1af3      	sublt	r3, r6, r3
 8007cee:	bfb4      	ite	lt
 8007cf0:	18d2      	addlt	r2, r2, r3
 8007cf2:	1b9e      	subge	r6, r3, r6
 8007cf4:	9b04      	ldr	r3, [sp, #16]
 8007cf6:	bfbc      	itt	lt
 8007cf8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007cfa:	2600      	movlt	r6, #0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	bfb7      	itett	lt
 8007d00:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007d04:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007d08:	1a9d      	sublt	r5, r3, r2
 8007d0a:	2300      	movlt	r3, #0
 8007d0c:	e741      	b.n	8007b92 <_dtoa_r+0x742>
 8007d0e:	9e08      	ldr	r6, [sp, #32]
 8007d10:	9d05      	ldr	r5, [sp, #20]
 8007d12:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d14:	e748      	b.n	8007ba8 <_dtoa_r+0x758>
 8007d16:	9a08      	ldr	r2, [sp, #32]
 8007d18:	e770      	b.n	8007bfc <_dtoa_r+0x7ac>
 8007d1a:	9b07      	ldr	r3, [sp, #28]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	dc19      	bgt.n	8007d54 <_dtoa_r+0x904>
 8007d20:	9b02      	ldr	r3, [sp, #8]
 8007d22:	b9bb      	cbnz	r3, 8007d54 <_dtoa_r+0x904>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d2a:	b99b      	cbnz	r3, 8007d54 <_dtoa_r+0x904>
 8007d2c:	9b03      	ldr	r3, [sp, #12]
 8007d2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d32:	0d1b      	lsrs	r3, r3, #20
 8007d34:	051b      	lsls	r3, r3, #20
 8007d36:	b183      	cbz	r3, 8007d5a <_dtoa_r+0x90a>
 8007d38:	9b05      	ldr	r3, [sp, #20]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	9305      	str	r3, [sp, #20]
 8007d3e:	9b06      	ldr	r3, [sp, #24]
 8007d40:	3301      	adds	r3, #1
 8007d42:	9306      	str	r3, [sp, #24]
 8007d44:	f04f 0801 	mov.w	r8, #1
 8007d48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f47f af6f 	bne.w	8007c2e <_dtoa_r+0x7de>
 8007d50:	2001      	movs	r0, #1
 8007d52:	e774      	b.n	8007c3e <_dtoa_r+0x7ee>
 8007d54:	f04f 0800 	mov.w	r8, #0
 8007d58:	e7f6      	b.n	8007d48 <_dtoa_r+0x8f8>
 8007d5a:	4698      	mov	r8, r3
 8007d5c:	e7f4      	b.n	8007d48 <_dtoa_r+0x8f8>
 8007d5e:	d082      	beq.n	8007c66 <_dtoa_r+0x816>
 8007d60:	9a05      	ldr	r2, [sp, #20]
 8007d62:	331c      	adds	r3, #28
 8007d64:	441a      	add	r2, r3
 8007d66:	9205      	str	r2, [sp, #20]
 8007d68:	9a06      	ldr	r2, [sp, #24]
 8007d6a:	441a      	add	r2, r3
 8007d6c:	441d      	add	r5, r3
 8007d6e:	9206      	str	r2, [sp, #24]
 8007d70:	e779      	b.n	8007c66 <_dtoa_r+0x816>
 8007d72:	4603      	mov	r3, r0
 8007d74:	e7f4      	b.n	8007d60 <_dtoa_r+0x910>
 8007d76:	9b04      	ldr	r3, [sp, #16]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	dc37      	bgt.n	8007dec <_dtoa_r+0x99c>
 8007d7c:	9b07      	ldr	r3, [sp, #28]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	dd34      	ble.n	8007dec <_dtoa_r+0x99c>
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	9301      	str	r3, [sp, #4]
 8007d86:	9b01      	ldr	r3, [sp, #4]
 8007d88:	b963      	cbnz	r3, 8007da4 <_dtoa_r+0x954>
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	2205      	movs	r2, #5
 8007d8e:	4620      	mov	r0, r4
 8007d90:	f000 fab2 	bl	80082f8 <__multadd>
 8007d94:	4601      	mov	r1, r0
 8007d96:	4606      	mov	r6, r0
 8007d98:	4650      	mov	r0, sl
 8007d9a:	f000 fcc7 	bl	800872c <__mcmp>
 8007d9e:	2800      	cmp	r0, #0
 8007da0:	f73f adbb 	bgt.w	800791a <_dtoa_r+0x4ca>
 8007da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da6:	9d00      	ldr	r5, [sp, #0]
 8007da8:	ea6f 0b03 	mvn.w	fp, r3
 8007dac:	f04f 0800 	mov.w	r8, #0
 8007db0:	4631      	mov	r1, r6
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 fa7e 	bl	80082b4 <_Bfree>
 8007db8:	2f00      	cmp	r7, #0
 8007dba:	f43f aeab 	beq.w	8007b14 <_dtoa_r+0x6c4>
 8007dbe:	f1b8 0f00 	cmp.w	r8, #0
 8007dc2:	d005      	beq.n	8007dd0 <_dtoa_r+0x980>
 8007dc4:	45b8      	cmp	r8, r7
 8007dc6:	d003      	beq.n	8007dd0 <_dtoa_r+0x980>
 8007dc8:	4641      	mov	r1, r8
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f000 fa72 	bl	80082b4 <_Bfree>
 8007dd0:	4639      	mov	r1, r7
 8007dd2:	4620      	mov	r0, r4
 8007dd4:	f000 fa6e 	bl	80082b4 <_Bfree>
 8007dd8:	e69c      	b.n	8007b14 <_dtoa_r+0x6c4>
 8007dda:	2600      	movs	r6, #0
 8007ddc:	4637      	mov	r7, r6
 8007dde:	e7e1      	b.n	8007da4 <_dtoa_r+0x954>
 8007de0:	46bb      	mov	fp, r7
 8007de2:	4637      	mov	r7, r6
 8007de4:	e599      	b.n	800791a <_dtoa_r+0x4ca>
 8007de6:	bf00      	nop
 8007de8:	40240000 	.word	0x40240000
 8007dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80c8 	beq.w	8007f84 <_dtoa_r+0xb34>
 8007df4:	9b04      	ldr	r3, [sp, #16]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	2d00      	cmp	r5, #0
 8007dfa:	dd05      	ble.n	8007e08 <_dtoa_r+0x9b8>
 8007dfc:	4639      	mov	r1, r7
 8007dfe:	462a      	mov	r2, r5
 8007e00:	4620      	mov	r0, r4
 8007e02:	f000 fc27 	bl	8008654 <__lshift>
 8007e06:	4607      	mov	r7, r0
 8007e08:	f1b8 0f00 	cmp.w	r8, #0
 8007e0c:	d05b      	beq.n	8007ec6 <_dtoa_r+0xa76>
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4620      	mov	r0, r4
 8007e12:	f000 fa0f 	bl	8008234 <_Balloc>
 8007e16:	4605      	mov	r5, r0
 8007e18:	b928      	cbnz	r0, 8007e26 <_dtoa_r+0x9d6>
 8007e1a:	4b83      	ldr	r3, [pc, #524]	; (8008028 <_dtoa_r+0xbd8>)
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007e22:	f7ff bb2e 	b.w	8007482 <_dtoa_r+0x32>
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	3202      	adds	r2, #2
 8007e2a:	0092      	lsls	r2, r2, #2
 8007e2c:	f107 010c 	add.w	r1, r7, #12
 8007e30:	300c      	adds	r0, #12
 8007e32:	f7ff fa76 	bl	8007322 <memcpy>
 8007e36:	2201      	movs	r2, #1
 8007e38:	4629      	mov	r1, r5
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f000 fc0a 	bl	8008654 <__lshift>
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	3301      	adds	r3, #1
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	9308      	str	r3, [sp, #32]
 8007e4e:	9b02      	ldr	r3, [sp, #8]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	46b8      	mov	r8, r7
 8007e56:	9306      	str	r3, [sp, #24]
 8007e58:	4607      	mov	r7, r0
 8007e5a:	9b04      	ldr	r3, [sp, #16]
 8007e5c:	4631      	mov	r1, r6
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	4650      	mov	r0, sl
 8007e62:	9301      	str	r3, [sp, #4]
 8007e64:	f7ff fa6b 	bl	800733e <quorem>
 8007e68:	4641      	mov	r1, r8
 8007e6a:	9002      	str	r0, [sp, #8]
 8007e6c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007e70:	4650      	mov	r0, sl
 8007e72:	f000 fc5b 	bl	800872c <__mcmp>
 8007e76:	463a      	mov	r2, r7
 8007e78:	9005      	str	r0, [sp, #20]
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	f000 fc71 	bl	8008764 <__mdiff>
 8007e82:	68c2      	ldr	r2, [r0, #12]
 8007e84:	4605      	mov	r5, r0
 8007e86:	bb02      	cbnz	r2, 8007eca <_dtoa_r+0xa7a>
 8007e88:	4601      	mov	r1, r0
 8007e8a:	4650      	mov	r0, sl
 8007e8c:	f000 fc4e 	bl	800872c <__mcmp>
 8007e90:	4602      	mov	r2, r0
 8007e92:	4629      	mov	r1, r5
 8007e94:	4620      	mov	r0, r4
 8007e96:	9209      	str	r2, [sp, #36]	; 0x24
 8007e98:	f000 fa0c 	bl	80082b4 <_Bfree>
 8007e9c:	9b07      	ldr	r3, [sp, #28]
 8007e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea0:	9d04      	ldr	r5, [sp, #16]
 8007ea2:	ea43 0102 	orr.w	r1, r3, r2
 8007ea6:	9b06      	ldr	r3, [sp, #24]
 8007ea8:	4319      	orrs	r1, r3
 8007eaa:	d110      	bne.n	8007ece <_dtoa_r+0xa7e>
 8007eac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007eb0:	d029      	beq.n	8007f06 <_dtoa_r+0xab6>
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	dd02      	ble.n	8007ebe <_dtoa_r+0xa6e>
 8007eb8:	9b02      	ldr	r3, [sp, #8]
 8007eba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007ebe:	9b01      	ldr	r3, [sp, #4]
 8007ec0:	f883 9000 	strb.w	r9, [r3]
 8007ec4:	e774      	b.n	8007db0 <_dtoa_r+0x960>
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	e7ba      	b.n	8007e40 <_dtoa_r+0x9f0>
 8007eca:	2201      	movs	r2, #1
 8007ecc:	e7e1      	b.n	8007e92 <_dtoa_r+0xa42>
 8007ece:	9b05      	ldr	r3, [sp, #20]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	db04      	blt.n	8007ede <_dtoa_r+0xa8e>
 8007ed4:	9907      	ldr	r1, [sp, #28]
 8007ed6:	430b      	orrs	r3, r1
 8007ed8:	9906      	ldr	r1, [sp, #24]
 8007eda:	430b      	orrs	r3, r1
 8007edc:	d120      	bne.n	8007f20 <_dtoa_r+0xad0>
 8007ede:	2a00      	cmp	r2, #0
 8007ee0:	dded      	ble.n	8007ebe <_dtoa_r+0xa6e>
 8007ee2:	4651      	mov	r1, sl
 8007ee4:	2201      	movs	r2, #1
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 fbb4 	bl	8008654 <__lshift>
 8007eec:	4631      	mov	r1, r6
 8007eee:	4682      	mov	sl, r0
 8007ef0:	f000 fc1c 	bl	800872c <__mcmp>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	dc03      	bgt.n	8007f00 <_dtoa_r+0xab0>
 8007ef8:	d1e1      	bne.n	8007ebe <_dtoa_r+0xa6e>
 8007efa:	f019 0f01 	tst.w	r9, #1
 8007efe:	d0de      	beq.n	8007ebe <_dtoa_r+0xa6e>
 8007f00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f04:	d1d8      	bne.n	8007eb8 <_dtoa_r+0xa68>
 8007f06:	9a01      	ldr	r2, [sp, #4]
 8007f08:	2339      	movs	r3, #57	; 0x39
 8007f0a:	7013      	strb	r3, [r2, #0]
 8007f0c:	462b      	mov	r3, r5
 8007f0e:	461d      	mov	r5, r3
 8007f10:	3b01      	subs	r3, #1
 8007f12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007f16:	2a39      	cmp	r2, #57	; 0x39
 8007f18:	d06c      	beq.n	8007ff4 <_dtoa_r+0xba4>
 8007f1a:	3201      	adds	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
 8007f1e:	e747      	b.n	8007db0 <_dtoa_r+0x960>
 8007f20:	2a00      	cmp	r2, #0
 8007f22:	dd07      	ble.n	8007f34 <_dtoa_r+0xae4>
 8007f24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007f28:	d0ed      	beq.n	8007f06 <_dtoa_r+0xab6>
 8007f2a:	9a01      	ldr	r2, [sp, #4]
 8007f2c:	f109 0301 	add.w	r3, r9, #1
 8007f30:	7013      	strb	r3, [r2, #0]
 8007f32:	e73d      	b.n	8007db0 <_dtoa_r+0x960>
 8007f34:	9b04      	ldr	r3, [sp, #16]
 8007f36:	9a08      	ldr	r2, [sp, #32]
 8007f38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d043      	beq.n	8007fc8 <_dtoa_r+0xb78>
 8007f40:	4651      	mov	r1, sl
 8007f42:	2300      	movs	r3, #0
 8007f44:	220a      	movs	r2, #10
 8007f46:	4620      	mov	r0, r4
 8007f48:	f000 f9d6 	bl	80082f8 <__multadd>
 8007f4c:	45b8      	cmp	r8, r7
 8007f4e:	4682      	mov	sl, r0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	f04f 020a 	mov.w	r2, #10
 8007f58:	4641      	mov	r1, r8
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	d107      	bne.n	8007f6e <_dtoa_r+0xb1e>
 8007f5e:	f000 f9cb 	bl	80082f8 <__multadd>
 8007f62:	4680      	mov	r8, r0
 8007f64:	4607      	mov	r7, r0
 8007f66:	9b04      	ldr	r3, [sp, #16]
 8007f68:	3301      	adds	r3, #1
 8007f6a:	9304      	str	r3, [sp, #16]
 8007f6c:	e775      	b.n	8007e5a <_dtoa_r+0xa0a>
 8007f6e:	f000 f9c3 	bl	80082f8 <__multadd>
 8007f72:	4639      	mov	r1, r7
 8007f74:	4680      	mov	r8, r0
 8007f76:	2300      	movs	r3, #0
 8007f78:	220a      	movs	r2, #10
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	f000 f9bc 	bl	80082f8 <__multadd>
 8007f80:	4607      	mov	r7, r0
 8007f82:	e7f0      	b.n	8007f66 <_dtoa_r+0xb16>
 8007f84:	9b04      	ldr	r3, [sp, #16]
 8007f86:	9301      	str	r3, [sp, #4]
 8007f88:	9d00      	ldr	r5, [sp, #0]
 8007f8a:	4631      	mov	r1, r6
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	f7ff f9d6 	bl	800733e <quorem>
 8007f92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007f96:	9b00      	ldr	r3, [sp, #0]
 8007f98:	f805 9b01 	strb.w	r9, [r5], #1
 8007f9c:	1aea      	subs	r2, r5, r3
 8007f9e:	9b01      	ldr	r3, [sp, #4]
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	dd07      	ble.n	8007fb4 <_dtoa_r+0xb64>
 8007fa4:	4651      	mov	r1, sl
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	220a      	movs	r2, #10
 8007faa:	4620      	mov	r0, r4
 8007fac:	f000 f9a4 	bl	80082f8 <__multadd>
 8007fb0:	4682      	mov	sl, r0
 8007fb2:	e7ea      	b.n	8007f8a <_dtoa_r+0xb3a>
 8007fb4:	9b01      	ldr	r3, [sp, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfc8      	it	gt
 8007fba:	461d      	movgt	r5, r3
 8007fbc:	9b00      	ldr	r3, [sp, #0]
 8007fbe:	bfd8      	it	le
 8007fc0:	2501      	movle	r5, #1
 8007fc2:	441d      	add	r5, r3
 8007fc4:	f04f 0800 	mov.w	r8, #0
 8007fc8:	4651      	mov	r1, sl
 8007fca:	2201      	movs	r2, #1
 8007fcc:	4620      	mov	r0, r4
 8007fce:	f000 fb41 	bl	8008654 <__lshift>
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4682      	mov	sl, r0
 8007fd6:	f000 fba9 	bl	800872c <__mcmp>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	dc96      	bgt.n	8007f0c <_dtoa_r+0xabc>
 8007fde:	d102      	bne.n	8007fe6 <_dtoa_r+0xb96>
 8007fe0:	f019 0f01 	tst.w	r9, #1
 8007fe4:	d192      	bne.n	8007f0c <_dtoa_r+0xabc>
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	461d      	mov	r5, r3
 8007fea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fee:	2a30      	cmp	r2, #48	; 0x30
 8007ff0:	d0fa      	beq.n	8007fe8 <_dtoa_r+0xb98>
 8007ff2:	e6dd      	b.n	8007db0 <_dtoa_r+0x960>
 8007ff4:	9a00      	ldr	r2, [sp, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d189      	bne.n	8007f0e <_dtoa_r+0xabe>
 8007ffa:	f10b 0b01 	add.w	fp, fp, #1
 8007ffe:	2331      	movs	r3, #49	; 0x31
 8008000:	e796      	b.n	8007f30 <_dtoa_r+0xae0>
 8008002:	4b0a      	ldr	r3, [pc, #40]	; (800802c <_dtoa_r+0xbdc>)
 8008004:	f7ff ba99 	b.w	800753a <_dtoa_r+0xea>
 8008008:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800800a:	2b00      	cmp	r3, #0
 800800c:	f47f aa6d 	bne.w	80074ea <_dtoa_r+0x9a>
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <_dtoa_r+0xbe0>)
 8008012:	f7ff ba92 	b.w	800753a <_dtoa_r+0xea>
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	dcb5      	bgt.n	8007f88 <_dtoa_r+0xb38>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	2b02      	cmp	r3, #2
 8008020:	f73f aeb1 	bgt.w	8007d86 <_dtoa_r+0x936>
 8008024:	e7b0      	b.n	8007f88 <_dtoa_r+0xb38>
 8008026:	bf00      	nop
 8008028:	080091d0 	.word	0x080091d0
 800802c:	08009130 	.word	0x08009130
 8008030:	08009154 	.word	0x08009154

08008034 <_free_r>:
 8008034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008036:	2900      	cmp	r1, #0
 8008038:	d044      	beq.n	80080c4 <_free_r+0x90>
 800803a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803e:	9001      	str	r0, [sp, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	f1a1 0404 	sub.w	r4, r1, #4
 8008046:	bfb8      	it	lt
 8008048:	18e4      	addlt	r4, r4, r3
 800804a:	f000 f8e7 	bl	800821c <__malloc_lock>
 800804e:	4a1e      	ldr	r2, [pc, #120]	; (80080c8 <_free_r+0x94>)
 8008050:	9801      	ldr	r0, [sp, #4]
 8008052:	6813      	ldr	r3, [r2, #0]
 8008054:	b933      	cbnz	r3, 8008064 <_free_r+0x30>
 8008056:	6063      	str	r3, [r4, #4]
 8008058:	6014      	str	r4, [r2, #0]
 800805a:	b003      	add	sp, #12
 800805c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008060:	f000 b8e2 	b.w	8008228 <__malloc_unlock>
 8008064:	42a3      	cmp	r3, r4
 8008066:	d908      	bls.n	800807a <_free_r+0x46>
 8008068:	6825      	ldr	r5, [r4, #0]
 800806a:	1961      	adds	r1, r4, r5
 800806c:	428b      	cmp	r3, r1
 800806e:	bf01      	itttt	eq
 8008070:	6819      	ldreq	r1, [r3, #0]
 8008072:	685b      	ldreq	r3, [r3, #4]
 8008074:	1949      	addeq	r1, r1, r5
 8008076:	6021      	streq	r1, [r4, #0]
 8008078:	e7ed      	b.n	8008056 <_free_r+0x22>
 800807a:	461a      	mov	r2, r3
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	b10b      	cbz	r3, 8008084 <_free_r+0x50>
 8008080:	42a3      	cmp	r3, r4
 8008082:	d9fa      	bls.n	800807a <_free_r+0x46>
 8008084:	6811      	ldr	r1, [r2, #0]
 8008086:	1855      	adds	r5, r2, r1
 8008088:	42a5      	cmp	r5, r4
 800808a:	d10b      	bne.n	80080a4 <_free_r+0x70>
 800808c:	6824      	ldr	r4, [r4, #0]
 800808e:	4421      	add	r1, r4
 8008090:	1854      	adds	r4, r2, r1
 8008092:	42a3      	cmp	r3, r4
 8008094:	6011      	str	r1, [r2, #0]
 8008096:	d1e0      	bne.n	800805a <_free_r+0x26>
 8008098:	681c      	ldr	r4, [r3, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	6053      	str	r3, [r2, #4]
 800809e:	440c      	add	r4, r1
 80080a0:	6014      	str	r4, [r2, #0]
 80080a2:	e7da      	b.n	800805a <_free_r+0x26>
 80080a4:	d902      	bls.n	80080ac <_free_r+0x78>
 80080a6:	230c      	movs	r3, #12
 80080a8:	6003      	str	r3, [r0, #0]
 80080aa:	e7d6      	b.n	800805a <_free_r+0x26>
 80080ac:	6825      	ldr	r5, [r4, #0]
 80080ae:	1961      	adds	r1, r4, r5
 80080b0:	428b      	cmp	r3, r1
 80080b2:	bf04      	itt	eq
 80080b4:	6819      	ldreq	r1, [r3, #0]
 80080b6:	685b      	ldreq	r3, [r3, #4]
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	bf04      	itt	eq
 80080bc:	1949      	addeq	r1, r1, r5
 80080be:	6021      	streq	r1, [r4, #0]
 80080c0:	6054      	str	r4, [r2, #4]
 80080c2:	e7ca      	b.n	800805a <_free_r+0x26>
 80080c4:	b003      	add	sp, #12
 80080c6:	bd30      	pop	{r4, r5, pc}
 80080c8:	20000764 	.word	0x20000764

080080cc <malloc>:
 80080cc:	4b02      	ldr	r3, [pc, #8]	; (80080d8 <malloc+0xc>)
 80080ce:	4601      	mov	r1, r0
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	f000 b823 	b.w	800811c <_malloc_r>
 80080d6:	bf00      	nop
 80080d8:	20000080 	.word	0x20000080

080080dc <sbrk_aligned>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4e0e      	ldr	r6, [pc, #56]	; (8008118 <sbrk_aligned+0x3c>)
 80080e0:	460c      	mov	r4, r1
 80080e2:	6831      	ldr	r1, [r6, #0]
 80080e4:	4605      	mov	r5, r0
 80080e6:	b911      	cbnz	r1, 80080ee <sbrk_aligned+0x12>
 80080e8:	f000 fcce 	bl	8008a88 <_sbrk_r>
 80080ec:	6030      	str	r0, [r6, #0]
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 fcc9 	bl	8008a88 <_sbrk_r>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	d00a      	beq.n	8008110 <sbrk_aligned+0x34>
 80080fa:	1cc4      	adds	r4, r0, #3
 80080fc:	f024 0403 	bic.w	r4, r4, #3
 8008100:	42a0      	cmp	r0, r4
 8008102:	d007      	beq.n	8008114 <sbrk_aligned+0x38>
 8008104:	1a21      	subs	r1, r4, r0
 8008106:	4628      	mov	r0, r5
 8008108:	f000 fcbe 	bl	8008a88 <_sbrk_r>
 800810c:	3001      	adds	r0, #1
 800810e:	d101      	bne.n	8008114 <sbrk_aligned+0x38>
 8008110:	f04f 34ff 	mov.w	r4, #4294967295
 8008114:	4620      	mov	r0, r4
 8008116:	bd70      	pop	{r4, r5, r6, pc}
 8008118:	20000768 	.word	0x20000768

0800811c <_malloc_r>:
 800811c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008120:	1ccd      	adds	r5, r1, #3
 8008122:	f025 0503 	bic.w	r5, r5, #3
 8008126:	3508      	adds	r5, #8
 8008128:	2d0c      	cmp	r5, #12
 800812a:	bf38      	it	cc
 800812c:	250c      	movcc	r5, #12
 800812e:	2d00      	cmp	r5, #0
 8008130:	4607      	mov	r7, r0
 8008132:	db01      	blt.n	8008138 <_malloc_r+0x1c>
 8008134:	42a9      	cmp	r1, r5
 8008136:	d905      	bls.n	8008144 <_malloc_r+0x28>
 8008138:	230c      	movs	r3, #12
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	2600      	movs	r6, #0
 800813e:	4630      	mov	r0, r6
 8008140:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008144:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008218 <_malloc_r+0xfc>
 8008148:	f000 f868 	bl	800821c <__malloc_lock>
 800814c:	f8d8 3000 	ldr.w	r3, [r8]
 8008150:	461c      	mov	r4, r3
 8008152:	bb5c      	cbnz	r4, 80081ac <_malloc_r+0x90>
 8008154:	4629      	mov	r1, r5
 8008156:	4638      	mov	r0, r7
 8008158:	f7ff ffc0 	bl	80080dc <sbrk_aligned>
 800815c:	1c43      	adds	r3, r0, #1
 800815e:	4604      	mov	r4, r0
 8008160:	d155      	bne.n	800820e <_malloc_r+0xf2>
 8008162:	f8d8 4000 	ldr.w	r4, [r8]
 8008166:	4626      	mov	r6, r4
 8008168:	2e00      	cmp	r6, #0
 800816a:	d145      	bne.n	80081f8 <_malloc_r+0xdc>
 800816c:	2c00      	cmp	r4, #0
 800816e:	d048      	beq.n	8008202 <_malloc_r+0xe6>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	4631      	mov	r1, r6
 8008174:	4638      	mov	r0, r7
 8008176:	eb04 0903 	add.w	r9, r4, r3
 800817a:	f000 fc85 	bl	8008a88 <_sbrk_r>
 800817e:	4581      	cmp	r9, r0
 8008180:	d13f      	bne.n	8008202 <_malloc_r+0xe6>
 8008182:	6821      	ldr	r1, [r4, #0]
 8008184:	1a6d      	subs	r5, r5, r1
 8008186:	4629      	mov	r1, r5
 8008188:	4638      	mov	r0, r7
 800818a:	f7ff ffa7 	bl	80080dc <sbrk_aligned>
 800818e:	3001      	adds	r0, #1
 8008190:	d037      	beq.n	8008202 <_malloc_r+0xe6>
 8008192:	6823      	ldr	r3, [r4, #0]
 8008194:	442b      	add	r3, r5
 8008196:	6023      	str	r3, [r4, #0]
 8008198:	f8d8 3000 	ldr.w	r3, [r8]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d038      	beq.n	8008212 <_malloc_r+0xf6>
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	42a2      	cmp	r2, r4
 80081a4:	d12b      	bne.n	80081fe <_malloc_r+0xe2>
 80081a6:	2200      	movs	r2, #0
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	e00f      	b.n	80081cc <_malloc_r+0xb0>
 80081ac:	6822      	ldr	r2, [r4, #0]
 80081ae:	1b52      	subs	r2, r2, r5
 80081b0:	d41f      	bmi.n	80081f2 <_malloc_r+0xd6>
 80081b2:	2a0b      	cmp	r2, #11
 80081b4:	d917      	bls.n	80081e6 <_malloc_r+0xca>
 80081b6:	1961      	adds	r1, r4, r5
 80081b8:	42a3      	cmp	r3, r4
 80081ba:	6025      	str	r5, [r4, #0]
 80081bc:	bf18      	it	ne
 80081be:	6059      	strne	r1, [r3, #4]
 80081c0:	6863      	ldr	r3, [r4, #4]
 80081c2:	bf08      	it	eq
 80081c4:	f8c8 1000 	streq.w	r1, [r8]
 80081c8:	5162      	str	r2, [r4, r5]
 80081ca:	604b      	str	r3, [r1, #4]
 80081cc:	4638      	mov	r0, r7
 80081ce:	f104 060b 	add.w	r6, r4, #11
 80081d2:	f000 f829 	bl	8008228 <__malloc_unlock>
 80081d6:	f026 0607 	bic.w	r6, r6, #7
 80081da:	1d23      	adds	r3, r4, #4
 80081dc:	1af2      	subs	r2, r6, r3
 80081de:	d0ae      	beq.n	800813e <_malloc_r+0x22>
 80081e0:	1b9b      	subs	r3, r3, r6
 80081e2:	50a3      	str	r3, [r4, r2]
 80081e4:	e7ab      	b.n	800813e <_malloc_r+0x22>
 80081e6:	42a3      	cmp	r3, r4
 80081e8:	6862      	ldr	r2, [r4, #4]
 80081ea:	d1dd      	bne.n	80081a8 <_malloc_r+0x8c>
 80081ec:	f8c8 2000 	str.w	r2, [r8]
 80081f0:	e7ec      	b.n	80081cc <_malloc_r+0xb0>
 80081f2:	4623      	mov	r3, r4
 80081f4:	6864      	ldr	r4, [r4, #4]
 80081f6:	e7ac      	b.n	8008152 <_malloc_r+0x36>
 80081f8:	4634      	mov	r4, r6
 80081fa:	6876      	ldr	r6, [r6, #4]
 80081fc:	e7b4      	b.n	8008168 <_malloc_r+0x4c>
 80081fe:	4613      	mov	r3, r2
 8008200:	e7cc      	b.n	800819c <_malloc_r+0x80>
 8008202:	230c      	movs	r3, #12
 8008204:	603b      	str	r3, [r7, #0]
 8008206:	4638      	mov	r0, r7
 8008208:	f000 f80e 	bl	8008228 <__malloc_unlock>
 800820c:	e797      	b.n	800813e <_malloc_r+0x22>
 800820e:	6025      	str	r5, [r4, #0]
 8008210:	e7dc      	b.n	80081cc <_malloc_r+0xb0>
 8008212:	605b      	str	r3, [r3, #4]
 8008214:	deff      	udf	#255	; 0xff
 8008216:	bf00      	nop
 8008218:	20000764 	.word	0x20000764

0800821c <__malloc_lock>:
 800821c:	4801      	ldr	r0, [pc, #4]	; (8008224 <__malloc_lock+0x8>)
 800821e:	f7ff b87e 	b.w	800731e <__retarget_lock_acquire_recursive>
 8008222:	bf00      	nop
 8008224:	20000760 	.word	0x20000760

08008228 <__malloc_unlock>:
 8008228:	4801      	ldr	r0, [pc, #4]	; (8008230 <__malloc_unlock+0x8>)
 800822a:	f7ff b879 	b.w	8007320 <__retarget_lock_release_recursive>
 800822e:	bf00      	nop
 8008230:	20000760 	.word	0x20000760

08008234 <_Balloc>:
 8008234:	b570      	push	{r4, r5, r6, lr}
 8008236:	69c6      	ldr	r6, [r0, #28]
 8008238:	4604      	mov	r4, r0
 800823a:	460d      	mov	r5, r1
 800823c:	b976      	cbnz	r6, 800825c <_Balloc+0x28>
 800823e:	2010      	movs	r0, #16
 8008240:	f7ff ff44 	bl	80080cc <malloc>
 8008244:	4602      	mov	r2, r0
 8008246:	61e0      	str	r0, [r4, #28]
 8008248:	b920      	cbnz	r0, 8008254 <_Balloc+0x20>
 800824a:	4b18      	ldr	r3, [pc, #96]	; (80082ac <_Balloc+0x78>)
 800824c:	4818      	ldr	r0, [pc, #96]	; (80082b0 <_Balloc+0x7c>)
 800824e:	216b      	movs	r1, #107	; 0x6b
 8008250:	f000 fc2a 	bl	8008aa8 <__assert_func>
 8008254:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008258:	6006      	str	r6, [r0, #0]
 800825a:	60c6      	str	r6, [r0, #12]
 800825c:	69e6      	ldr	r6, [r4, #28]
 800825e:	68f3      	ldr	r3, [r6, #12]
 8008260:	b183      	cbz	r3, 8008284 <_Balloc+0x50>
 8008262:	69e3      	ldr	r3, [r4, #28]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800826a:	b9b8      	cbnz	r0, 800829c <_Balloc+0x68>
 800826c:	2101      	movs	r1, #1
 800826e:	fa01 f605 	lsl.w	r6, r1, r5
 8008272:	1d72      	adds	r2, r6, #5
 8008274:	0092      	lsls	r2, r2, #2
 8008276:	4620      	mov	r0, r4
 8008278:	f000 fc34 	bl	8008ae4 <_calloc_r>
 800827c:	b160      	cbz	r0, 8008298 <_Balloc+0x64>
 800827e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008282:	e00e      	b.n	80082a2 <_Balloc+0x6e>
 8008284:	2221      	movs	r2, #33	; 0x21
 8008286:	2104      	movs	r1, #4
 8008288:	4620      	mov	r0, r4
 800828a:	f000 fc2b 	bl	8008ae4 <_calloc_r>
 800828e:	69e3      	ldr	r3, [r4, #28]
 8008290:	60f0      	str	r0, [r6, #12]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1e4      	bne.n	8008262 <_Balloc+0x2e>
 8008298:	2000      	movs	r0, #0
 800829a:	bd70      	pop	{r4, r5, r6, pc}
 800829c:	6802      	ldr	r2, [r0, #0]
 800829e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80082a2:	2300      	movs	r3, #0
 80082a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80082a8:	e7f7      	b.n	800829a <_Balloc+0x66>
 80082aa:	bf00      	nop
 80082ac:	08009161 	.word	0x08009161
 80082b0:	080091e1 	.word	0x080091e1

080082b4 <_Bfree>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	69c6      	ldr	r6, [r0, #28]
 80082b8:	4605      	mov	r5, r0
 80082ba:	460c      	mov	r4, r1
 80082bc:	b976      	cbnz	r6, 80082dc <_Bfree+0x28>
 80082be:	2010      	movs	r0, #16
 80082c0:	f7ff ff04 	bl	80080cc <malloc>
 80082c4:	4602      	mov	r2, r0
 80082c6:	61e8      	str	r0, [r5, #28]
 80082c8:	b920      	cbnz	r0, 80082d4 <_Bfree+0x20>
 80082ca:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <_Bfree+0x3c>)
 80082cc:	4809      	ldr	r0, [pc, #36]	; (80082f4 <_Bfree+0x40>)
 80082ce:	218f      	movs	r1, #143	; 0x8f
 80082d0:	f000 fbea 	bl	8008aa8 <__assert_func>
 80082d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082d8:	6006      	str	r6, [r0, #0]
 80082da:	60c6      	str	r6, [r0, #12]
 80082dc:	b13c      	cbz	r4, 80082ee <_Bfree+0x3a>
 80082de:	69eb      	ldr	r3, [r5, #28]
 80082e0:	6862      	ldr	r2, [r4, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082e8:	6021      	str	r1, [r4, #0]
 80082ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082ee:	bd70      	pop	{r4, r5, r6, pc}
 80082f0:	08009161 	.word	0x08009161
 80082f4:	080091e1 	.word	0x080091e1

080082f8 <__multadd>:
 80082f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fc:	690d      	ldr	r5, [r1, #16]
 80082fe:	4607      	mov	r7, r0
 8008300:	460c      	mov	r4, r1
 8008302:	461e      	mov	r6, r3
 8008304:	f101 0c14 	add.w	ip, r1, #20
 8008308:	2000      	movs	r0, #0
 800830a:	f8dc 3000 	ldr.w	r3, [ip]
 800830e:	b299      	uxth	r1, r3
 8008310:	fb02 6101 	mla	r1, r2, r1, r6
 8008314:	0c1e      	lsrs	r6, r3, #16
 8008316:	0c0b      	lsrs	r3, r1, #16
 8008318:	fb02 3306 	mla	r3, r2, r6, r3
 800831c:	b289      	uxth	r1, r1
 800831e:	3001      	adds	r0, #1
 8008320:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008324:	4285      	cmp	r5, r0
 8008326:	f84c 1b04 	str.w	r1, [ip], #4
 800832a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800832e:	dcec      	bgt.n	800830a <__multadd+0x12>
 8008330:	b30e      	cbz	r6, 8008376 <__multadd+0x7e>
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	42ab      	cmp	r3, r5
 8008336:	dc19      	bgt.n	800836c <__multadd+0x74>
 8008338:	6861      	ldr	r1, [r4, #4]
 800833a:	4638      	mov	r0, r7
 800833c:	3101      	adds	r1, #1
 800833e:	f7ff ff79 	bl	8008234 <_Balloc>
 8008342:	4680      	mov	r8, r0
 8008344:	b928      	cbnz	r0, 8008352 <__multadd+0x5a>
 8008346:	4602      	mov	r2, r0
 8008348:	4b0c      	ldr	r3, [pc, #48]	; (800837c <__multadd+0x84>)
 800834a:	480d      	ldr	r0, [pc, #52]	; (8008380 <__multadd+0x88>)
 800834c:	21ba      	movs	r1, #186	; 0xba
 800834e:	f000 fbab 	bl	8008aa8 <__assert_func>
 8008352:	6922      	ldr	r2, [r4, #16]
 8008354:	3202      	adds	r2, #2
 8008356:	f104 010c 	add.w	r1, r4, #12
 800835a:	0092      	lsls	r2, r2, #2
 800835c:	300c      	adds	r0, #12
 800835e:	f7fe ffe0 	bl	8007322 <memcpy>
 8008362:	4621      	mov	r1, r4
 8008364:	4638      	mov	r0, r7
 8008366:	f7ff ffa5 	bl	80082b4 <_Bfree>
 800836a:	4644      	mov	r4, r8
 800836c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008370:	3501      	adds	r5, #1
 8008372:	615e      	str	r6, [r3, #20]
 8008374:	6125      	str	r5, [r4, #16]
 8008376:	4620      	mov	r0, r4
 8008378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800837c:	080091d0 	.word	0x080091d0
 8008380:	080091e1 	.word	0x080091e1

08008384 <__hi0bits>:
 8008384:	0c03      	lsrs	r3, r0, #16
 8008386:	041b      	lsls	r3, r3, #16
 8008388:	b9d3      	cbnz	r3, 80083c0 <__hi0bits+0x3c>
 800838a:	0400      	lsls	r0, r0, #16
 800838c:	2310      	movs	r3, #16
 800838e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008392:	bf04      	itt	eq
 8008394:	0200      	lsleq	r0, r0, #8
 8008396:	3308      	addeq	r3, #8
 8008398:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800839c:	bf04      	itt	eq
 800839e:	0100      	lsleq	r0, r0, #4
 80083a0:	3304      	addeq	r3, #4
 80083a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80083a6:	bf04      	itt	eq
 80083a8:	0080      	lsleq	r0, r0, #2
 80083aa:	3302      	addeq	r3, #2
 80083ac:	2800      	cmp	r0, #0
 80083ae:	db05      	blt.n	80083bc <__hi0bits+0x38>
 80083b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80083b4:	f103 0301 	add.w	r3, r3, #1
 80083b8:	bf08      	it	eq
 80083ba:	2320      	moveq	r3, #32
 80083bc:	4618      	mov	r0, r3
 80083be:	4770      	bx	lr
 80083c0:	2300      	movs	r3, #0
 80083c2:	e7e4      	b.n	800838e <__hi0bits+0xa>

080083c4 <__lo0bits>:
 80083c4:	6803      	ldr	r3, [r0, #0]
 80083c6:	f013 0207 	ands.w	r2, r3, #7
 80083ca:	d00c      	beq.n	80083e6 <__lo0bits+0x22>
 80083cc:	07d9      	lsls	r1, r3, #31
 80083ce:	d422      	bmi.n	8008416 <__lo0bits+0x52>
 80083d0:	079a      	lsls	r2, r3, #30
 80083d2:	bf49      	itett	mi
 80083d4:	085b      	lsrmi	r3, r3, #1
 80083d6:	089b      	lsrpl	r3, r3, #2
 80083d8:	6003      	strmi	r3, [r0, #0]
 80083da:	2201      	movmi	r2, #1
 80083dc:	bf5c      	itt	pl
 80083de:	6003      	strpl	r3, [r0, #0]
 80083e0:	2202      	movpl	r2, #2
 80083e2:	4610      	mov	r0, r2
 80083e4:	4770      	bx	lr
 80083e6:	b299      	uxth	r1, r3
 80083e8:	b909      	cbnz	r1, 80083ee <__lo0bits+0x2a>
 80083ea:	0c1b      	lsrs	r3, r3, #16
 80083ec:	2210      	movs	r2, #16
 80083ee:	b2d9      	uxtb	r1, r3
 80083f0:	b909      	cbnz	r1, 80083f6 <__lo0bits+0x32>
 80083f2:	3208      	adds	r2, #8
 80083f4:	0a1b      	lsrs	r3, r3, #8
 80083f6:	0719      	lsls	r1, r3, #28
 80083f8:	bf04      	itt	eq
 80083fa:	091b      	lsreq	r3, r3, #4
 80083fc:	3204      	addeq	r2, #4
 80083fe:	0799      	lsls	r1, r3, #30
 8008400:	bf04      	itt	eq
 8008402:	089b      	lsreq	r3, r3, #2
 8008404:	3202      	addeq	r2, #2
 8008406:	07d9      	lsls	r1, r3, #31
 8008408:	d403      	bmi.n	8008412 <__lo0bits+0x4e>
 800840a:	085b      	lsrs	r3, r3, #1
 800840c:	f102 0201 	add.w	r2, r2, #1
 8008410:	d003      	beq.n	800841a <__lo0bits+0x56>
 8008412:	6003      	str	r3, [r0, #0]
 8008414:	e7e5      	b.n	80083e2 <__lo0bits+0x1e>
 8008416:	2200      	movs	r2, #0
 8008418:	e7e3      	b.n	80083e2 <__lo0bits+0x1e>
 800841a:	2220      	movs	r2, #32
 800841c:	e7e1      	b.n	80083e2 <__lo0bits+0x1e>
	...

08008420 <__i2b>:
 8008420:	b510      	push	{r4, lr}
 8008422:	460c      	mov	r4, r1
 8008424:	2101      	movs	r1, #1
 8008426:	f7ff ff05 	bl	8008234 <_Balloc>
 800842a:	4602      	mov	r2, r0
 800842c:	b928      	cbnz	r0, 800843a <__i2b+0x1a>
 800842e:	4b05      	ldr	r3, [pc, #20]	; (8008444 <__i2b+0x24>)
 8008430:	4805      	ldr	r0, [pc, #20]	; (8008448 <__i2b+0x28>)
 8008432:	f240 1145 	movw	r1, #325	; 0x145
 8008436:	f000 fb37 	bl	8008aa8 <__assert_func>
 800843a:	2301      	movs	r3, #1
 800843c:	6144      	str	r4, [r0, #20]
 800843e:	6103      	str	r3, [r0, #16]
 8008440:	bd10      	pop	{r4, pc}
 8008442:	bf00      	nop
 8008444:	080091d0 	.word	0x080091d0
 8008448:	080091e1 	.word	0x080091e1

0800844c <__multiply>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	4691      	mov	r9, r2
 8008452:	690a      	ldr	r2, [r1, #16]
 8008454:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008458:	429a      	cmp	r2, r3
 800845a:	bfb8      	it	lt
 800845c:	460b      	movlt	r3, r1
 800845e:	460c      	mov	r4, r1
 8008460:	bfbc      	itt	lt
 8008462:	464c      	movlt	r4, r9
 8008464:	4699      	movlt	r9, r3
 8008466:	6927      	ldr	r7, [r4, #16]
 8008468:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800846c:	68a3      	ldr	r3, [r4, #8]
 800846e:	6861      	ldr	r1, [r4, #4]
 8008470:	eb07 060a 	add.w	r6, r7, sl
 8008474:	42b3      	cmp	r3, r6
 8008476:	b085      	sub	sp, #20
 8008478:	bfb8      	it	lt
 800847a:	3101      	addlt	r1, #1
 800847c:	f7ff feda 	bl	8008234 <_Balloc>
 8008480:	b930      	cbnz	r0, 8008490 <__multiply+0x44>
 8008482:	4602      	mov	r2, r0
 8008484:	4b44      	ldr	r3, [pc, #272]	; (8008598 <__multiply+0x14c>)
 8008486:	4845      	ldr	r0, [pc, #276]	; (800859c <__multiply+0x150>)
 8008488:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800848c:	f000 fb0c 	bl	8008aa8 <__assert_func>
 8008490:	f100 0514 	add.w	r5, r0, #20
 8008494:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008498:	462b      	mov	r3, r5
 800849a:	2200      	movs	r2, #0
 800849c:	4543      	cmp	r3, r8
 800849e:	d321      	bcc.n	80084e4 <__multiply+0x98>
 80084a0:	f104 0314 	add.w	r3, r4, #20
 80084a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80084a8:	f109 0314 	add.w	r3, r9, #20
 80084ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084b0:	9202      	str	r2, [sp, #8]
 80084b2:	1b3a      	subs	r2, r7, r4
 80084b4:	3a15      	subs	r2, #21
 80084b6:	f022 0203 	bic.w	r2, r2, #3
 80084ba:	3204      	adds	r2, #4
 80084bc:	f104 0115 	add.w	r1, r4, #21
 80084c0:	428f      	cmp	r7, r1
 80084c2:	bf38      	it	cc
 80084c4:	2204      	movcc	r2, #4
 80084c6:	9201      	str	r2, [sp, #4]
 80084c8:	9a02      	ldr	r2, [sp, #8]
 80084ca:	9303      	str	r3, [sp, #12]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d80c      	bhi.n	80084ea <__multiply+0x9e>
 80084d0:	2e00      	cmp	r6, #0
 80084d2:	dd03      	ble.n	80084dc <__multiply+0x90>
 80084d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d05b      	beq.n	8008594 <__multiply+0x148>
 80084dc:	6106      	str	r6, [r0, #16]
 80084de:	b005      	add	sp, #20
 80084e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084e4:	f843 2b04 	str.w	r2, [r3], #4
 80084e8:	e7d8      	b.n	800849c <__multiply+0x50>
 80084ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80084ee:	f1ba 0f00 	cmp.w	sl, #0
 80084f2:	d024      	beq.n	800853e <__multiply+0xf2>
 80084f4:	f104 0e14 	add.w	lr, r4, #20
 80084f8:	46a9      	mov	r9, r5
 80084fa:	f04f 0c00 	mov.w	ip, #0
 80084fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008502:	f8d9 1000 	ldr.w	r1, [r9]
 8008506:	fa1f fb82 	uxth.w	fp, r2
 800850a:	b289      	uxth	r1, r1
 800850c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008510:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008514:	f8d9 2000 	ldr.w	r2, [r9]
 8008518:	4461      	add	r1, ip
 800851a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800851e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008522:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008526:	b289      	uxth	r1, r1
 8008528:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800852c:	4577      	cmp	r7, lr
 800852e:	f849 1b04 	str.w	r1, [r9], #4
 8008532:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008536:	d8e2      	bhi.n	80084fe <__multiply+0xb2>
 8008538:	9a01      	ldr	r2, [sp, #4]
 800853a:	f845 c002 	str.w	ip, [r5, r2]
 800853e:	9a03      	ldr	r2, [sp, #12]
 8008540:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008544:	3304      	adds	r3, #4
 8008546:	f1b9 0f00 	cmp.w	r9, #0
 800854a:	d021      	beq.n	8008590 <__multiply+0x144>
 800854c:	6829      	ldr	r1, [r5, #0]
 800854e:	f104 0c14 	add.w	ip, r4, #20
 8008552:	46ae      	mov	lr, r5
 8008554:	f04f 0a00 	mov.w	sl, #0
 8008558:	f8bc b000 	ldrh.w	fp, [ip]
 800855c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008560:	fb09 220b 	mla	r2, r9, fp, r2
 8008564:	4452      	add	r2, sl
 8008566:	b289      	uxth	r1, r1
 8008568:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800856c:	f84e 1b04 	str.w	r1, [lr], #4
 8008570:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008574:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008578:	f8be 1000 	ldrh.w	r1, [lr]
 800857c:	fb09 110a 	mla	r1, r9, sl, r1
 8008580:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008584:	4567      	cmp	r7, ip
 8008586:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800858a:	d8e5      	bhi.n	8008558 <__multiply+0x10c>
 800858c:	9a01      	ldr	r2, [sp, #4]
 800858e:	50a9      	str	r1, [r5, r2]
 8008590:	3504      	adds	r5, #4
 8008592:	e799      	b.n	80084c8 <__multiply+0x7c>
 8008594:	3e01      	subs	r6, #1
 8008596:	e79b      	b.n	80084d0 <__multiply+0x84>
 8008598:	080091d0 	.word	0x080091d0
 800859c:	080091e1 	.word	0x080091e1

080085a0 <__pow5mult>:
 80085a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085a4:	4615      	mov	r5, r2
 80085a6:	f012 0203 	ands.w	r2, r2, #3
 80085aa:	4606      	mov	r6, r0
 80085ac:	460f      	mov	r7, r1
 80085ae:	d007      	beq.n	80085c0 <__pow5mult+0x20>
 80085b0:	4c25      	ldr	r4, [pc, #148]	; (8008648 <__pow5mult+0xa8>)
 80085b2:	3a01      	subs	r2, #1
 80085b4:	2300      	movs	r3, #0
 80085b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085ba:	f7ff fe9d 	bl	80082f8 <__multadd>
 80085be:	4607      	mov	r7, r0
 80085c0:	10ad      	asrs	r5, r5, #2
 80085c2:	d03d      	beq.n	8008640 <__pow5mult+0xa0>
 80085c4:	69f4      	ldr	r4, [r6, #28]
 80085c6:	b97c      	cbnz	r4, 80085e8 <__pow5mult+0x48>
 80085c8:	2010      	movs	r0, #16
 80085ca:	f7ff fd7f 	bl	80080cc <malloc>
 80085ce:	4602      	mov	r2, r0
 80085d0:	61f0      	str	r0, [r6, #28]
 80085d2:	b928      	cbnz	r0, 80085e0 <__pow5mult+0x40>
 80085d4:	4b1d      	ldr	r3, [pc, #116]	; (800864c <__pow5mult+0xac>)
 80085d6:	481e      	ldr	r0, [pc, #120]	; (8008650 <__pow5mult+0xb0>)
 80085d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80085dc:	f000 fa64 	bl	8008aa8 <__assert_func>
 80085e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085e4:	6004      	str	r4, [r0, #0]
 80085e6:	60c4      	str	r4, [r0, #12]
 80085e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80085ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085f0:	b94c      	cbnz	r4, 8008606 <__pow5mult+0x66>
 80085f2:	f240 2171 	movw	r1, #625	; 0x271
 80085f6:	4630      	mov	r0, r6
 80085f8:	f7ff ff12 	bl	8008420 <__i2b>
 80085fc:	2300      	movs	r3, #0
 80085fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8008602:	4604      	mov	r4, r0
 8008604:	6003      	str	r3, [r0, #0]
 8008606:	f04f 0900 	mov.w	r9, #0
 800860a:	07eb      	lsls	r3, r5, #31
 800860c:	d50a      	bpl.n	8008624 <__pow5mult+0x84>
 800860e:	4639      	mov	r1, r7
 8008610:	4622      	mov	r2, r4
 8008612:	4630      	mov	r0, r6
 8008614:	f7ff ff1a 	bl	800844c <__multiply>
 8008618:	4639      	mov	r1, r7
 800861a:	4680      	mov	r8, r0
 800861c:	4630      	mov	r0, r6
 800861e:	f7ff fe49 	bl	80082b4 <_Bfree>
 8008622:	4647      	mov	r7, r8
 8008624:	106d      	asrs	r5, r5, #1
 8008626:	d00b      	beq.n	8008640 <__pow5mult+0xa0>
 8008628:	6820      	ldr	r0, [r4, #0]
 800862a:	b938      	cbnz	r0, 800863c <__pow5mult+0x9c>
 800862c:	4622      	mov	r2, r4
 800862e:	4621      	mov	r1, r4
 8008630:	4630      	mov	r0, r6
 8008632:	f7ff ff0b 	bl	800844c <__multiply>
 8008636:	6020      	str	r0, [r4, #0]
 8008638:	f8c0 9000 	str.w	r9, [r0]
 800863c:	4604      	mov	r4, r0
 800863e:	e7e4      	b.n	800860a <__pow5mult+0x6a>
 8008640:	4638      	mov	r0, r7
 8008642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008646:	bf00      	nop
 8008648:	08009330 	.word	0x08009330
 800864c:	08009161 	.word	0x08009161
 8008650:	080091e1 	.word	0x080091e1

08008654 <__lshift>:
 8008654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008658:	460c      	mov	r4, r1
 800865a:	6849      	ldr	r1, [r1, #4]
 800865c:	6923      	ldr	r3, [r4, #16]
 800865e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008662:	68a3      	ldr	r3, [r4, #8]
 8008664:	4607      	mov	r7, r0
 8008666:	4691      	mov	r9, r2
 8008668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800866c:	f108 0601 	add.w	r6, r8, #1
 8008670:	42b3      	cmp	r3, r6
 8008672:	db0b      	blt.n	800868c <__lshift+0x38>
 8008674:	4638      	mov	r0, r7
 8008676:	f7ff fddd 	bl	8008234 <_Balloc>
 800867a:	4605      	mov	r5, r0
 800867c:	b948      	cbnz	r0, 8008692 <__lshift+0x3e>
 800867e:	4602      	mov	r2, r0
 8008680:	4b28      	ldr	r3, [pc, #160]	; (8008724 <__lshift+0xd0>)
 8008682:	4829      	ldr	r0, [pc, #164]	; (8008728 <__lshift+0xd4>)
 8008684:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008688:	f000 fa0e 	bl	8008aa8 <__assert_func>
 800868c:	3101      	adds	r1, #1
 800868e:	005b      	lsls	r3, r3, #1
 8008690:	e7ee      	b.n	8008670 <__lshift+0x1c>
 8008692:	2300      	movs	r3, #0
 8008694:	f100 0114 	add.w	r1, r0, #20
 8008698:	f100 0210 	add.w	r2, r0, #16
 800869c:	4618      	mov	r0, r3
 800869e:	4553      	cmp	r3, sl
 80086a0:	db33      	blt.n	800870a <__lshift+0xb6>
 80086a2:	6920      	ldr	r0, [r4, #16]
 80086a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80086a8:	f104 0314 	add.w	r3, r4, #20
 80086ac:	f019 091f 	ands.w	r9, r9, #31
 80086b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086b8:	d02b      	beq.n	8008712 <__lshift+0xbe>
 80086ba:	f1c9 0e20 	rsb	lr, r9, #32
 80086be:	468a      	mov	sl, r1
 80086c0:	2200      	movs	r2, #0
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	fa00 f009 	lsl.w	r0, r0, r9
 80086c8:	4310      	orrs	r0, r2
 80086ca:	f84a 0b04 	str.w	r0, [sl], #4
 80086ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80086d2:	459c      	cmp	ip, r3
 80086d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80086d8:	d8f3      	bhi.n	80086c2 <__lshift+0x6e>
 80086da:	ebac 0304 	sub.w	r3, ip, r4
 80086de:	3b15      	subs	r3, #21
 80086e0:	f023 0303 	bic.w	r3, r3, #3
 80086e4:	3304      	adds	r3, #4
 80086e6:	f104 0015 	add.w	r0, r4, #21
 80086ea:	4584      	cmp	ip, r0
 80086ec:	bf38      	it	cc
 80086ee:	2304      	movcc	r3, #4
 80086f0:	50ca      	str	r2, [r1, r3]
 80086f2:	b10a      	cbz	r2, 80086f8 <__lshift+0xa4>
 80086f4:	f108 0602 	add.w	r6, r8, #2
 80086f8:	3e01      	subs	r6, #1
 80086fa:	4638      	mov	r0, r7
 80086fc:	612e      	str	r6, [r5, #16]
 80086fe:	4621      	mov	r1, r4
 8008700:	f7ff fdd8 	bl	80082b4 <_Bfree>
 8008704:	4628      	mov	r0, r5
 8008706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800870a:	f842 0f04 	str.w	r0, [r2, #4]!
 800870e:	3301      	adds	r3, #1
 8008710:	e7c5      	b.n	800869e <__lshift+0x4a>
 8008712:	3904      	subs	r1, #4
 8008714:	f853 2b04 	ldr.w	r2, [r3], #4
 8008718:	f841 2f04 	str.w	r2, [r1, #4]!
 800871c:	459c      	cmp	ip, r3
 800871e:	d8f9      	bhi.n	8008714 <__lshift+0xc0>
 8008720:	e7ea      	b.n	80086f8 <__lshift+0xa4>
 8008722:	bf00      	nop
 8008724:	080091d0 	.word	0x080091d0
 8008728:	080091e1 	.word	0x080091e1

0800872c <__mcmp>:
 800872c:	b530      	push	{r4, r5, lr}
 800872e:	6902      	ldr	r2, [r0, #16]
 8008730:	690c      	ldr	r4, [r1, #16]
 8008732:	1b12      	subs	r2, r2, r4
 8008734:	d10e      	bne.n	8008754 <__mcmp+0x28>
 8008736:	f100 0314 	add.w	r3, r0, #20
 800873a:	3114      	adds	r1, #20
 800873c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008740:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008744:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008748:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800874c:	42a5      	cmp	r5, r4
 800874e:	d003      	beq.n	8008758 <__mcmp+0x2c>
 8008750:	d305      	bcc.n	800875e <__mcmp+0x32>
 8008752:	2201      	movs	r2, #1
 8008754:	4610      	mov	r0, r2
 8008756:	bd30      	pop	{r4, r5, pc}
 8008758:	4283      	cmp	r3, r0
 800875a:	d3f3      	bcc.n	8008744 <__mcmp+0x18>
 800875c:	e7fa      	b.n	8008754 <__mcmp+0x28>
 800875e:	f04f 32ff 	mov.w	r2, #4294967295
 8008762:	e7f7      	b.n	8008754 <__mcmp+0x28>

08008764 <__mdiff>:
 8008764:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	460c      	mov	r4, r1
 800876a:	4606      	mov	r6, r0
 800876c:	4611      	mov	r1, r2
 800876e:	4620      	mov	r0, r4
 8008770:	4690      	mov	r8, r2
 8008772:	f7ff ffdb 	bl	800872c <__mcmp>
 8008776:	1e05      	subs	r5, r0, #0
 8008778:	d110      	bne.n	800879c <__mdiff+0x38>
 800877a:	4629      	mov	r1, r5
 800877c:	4630      	mov	r0, r6
 800877e:	f7ff fd59 	bl	8008234 <_Balloc>
 8008782:	b930      	cbnz	r0, 8008792 <__mdiff+0x2e>
 8008784:	4b3a      	ldr	r3, [pc, #232]	; (8008870 <__mdiff+0x10c>)
 8008786:	4602      	mov	r2, r0
 8008788:	f240 2137 	movw	r1, #567	; 0x237
 800878c:	4839      	ldr	r0, [pc, #228]	; (8008874 <__mdiff+0x110>)
 800878e:	f000 f98b 	bl	8008aa8 <__assert_func>
 8008792:	2301      	movs	r3, #1
 8008794:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800879c:	bfa4      	itt	ge
 800879e:	4643      	movge	r3, r8
 80087a0:	46a0      	movge	r8, r4
 80087a2:	4630      	mov	r0, r6
 80087a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80087a8:	bfa6      	itte	ge
 80087aa:	461c      	movge	r4, r3
 80087ac:	2500      	movge	r5, #0
 80087ae:	2501      	movlt	r5, #1
 80087b0:	f7ff fd40 	bl	8008234 <_Balloc>
 80087b4:	b920      	cbnz	r0, 80087c0 <__mdiff+0x5c>
 80087b6:	4b2e      	ldr	r3, [pc, #184]	; (8008870 <__mdiff+0x10c>)
 80087b8:	4602      	mov	r2, r0
 80087ba:	f240 2145 	movw	r1, #581	; 0x245
 80087be:	e7e5      	b.n	800878c <__mdiff+0x28>
 80087c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80087c4:	6926      	ldr	r6, [r4, #16]
 80087c6:	60c5      	str	r5, [r0, #12]
 80087c8:	f104 0914 	add.w	r9, r4, #20
 80087cc:	f108 0514 	add.w	r5, r8, #20
 80087d0:	f100 0e14 	add.w	lr, r0, #20
 80087d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80087d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087dc:	f108 0210 	add.w	r2, r8, #16
 80087e0:	46f2      	mov	sl, lr
 80087e2:	2100      	movs	r1, #0
 80087e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80087e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80087ec:	fa11 f88b 	uxtah	r8, r1, fp
 80087f0:	b299      	uxth	r1, r3
 80087f2:	0c1b      	lsrs	r3, r3, #16
 80087f4:	eba8 0801 	sub.w	r8, r8, r1
 80087f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008800:	fa1f f888 	uxth.w	r8, r8
 8008804:	1419      	asrs	r1, r3, #16
 8008806:	454e      	cmp	r6, r9
 8008808:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800880c:	f84a 3b04 	str.w	r3, [sl], #4
 8008810:	d8e8      	bhi.n	80087e4 <__mdiff+0x80>
 8008812:	1b33      	subs	r3, r6, r4
 8008814:	3b15      	subs	r3, #21
 8008816:	f023 0303 	bic.w	r3, r3, #3
 800881a:	3304      	adds	r3, #4
 800881c:	3415      	adds	r4, #21
 800881e:	42a6      	cmp	r6, r4
 8008820:	bf38      	it	cc
 8008822:	2304      	movcc	r3, #4
 8008824:	441d      	add	r5, r3
 8008826:	4473      	add	r3, lr
 8008828:	469e      	mov	lr, r3
 800882a:	462e      	mov	r6, r5
 800882c:	4566      	cmp	r6, ip
 800882e:	d30e      	bcc.n	800884e <__mdiff+0xea>
 8008830:	f10c 0203 	add.w	r2, ip, #3
 8008834:	1b52      	subs	r2, r2, r5
 8008836:	f022 0203 	bic.w	r2, r2, #3
 800883a:	3d03      	subs	r5, #3
 800883c:	45ac      	cmp	ip, r5
 800883e:	bf38      	it	cc
 8008840:	2200      	movcc	r2, #0
 8008842:	4413      	add	r3, r2
 8008844:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008848:	b17a      	cbz	r2, 800886a <__mdiff+0x106>
 800884a:	6107      	str	r7, [r0, #16]
 800884c:	e7a4      	b.n	8008798 <__mdiff+0x34>
 800884e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008852:	fa11 f288 	uxtah	r2, r1, r8
 8008856:	1414      	asrs	r4, r2, #16
 8008858:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800885c:	b292      	uxth	r2, r2
 800885e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008862:	f84e 2b04 	str.w	r2, [lr], #4
 8008866:	1421      	asrs	r1, r4, #16
 8008868:	e7e0      	b.n	800882c <__mdiff+0xc8>
 800886a:	3f01      	subs	r7, #1
 800886c:	e7ea      	b.n	8008844 <__mdiff+0xe0>
 800886e:	bf00      	nop
 8008870:	080091d0 	.word	0x080091d0
 8008874:	080091e1 	.word	0x080091e1

08008878 <__d2b>:
 8008878:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800887c:	460f      	mov	r7, r1
 800887e:	2101      	movs	r1, #1
 8008880:	ec59 8b10 	vmov	r8, r9, d0
 8008884:	4616      	mov	r6, r2
 8008886:	f7ff fcd5 	bl	8008234 <_Balloc>
 800888a:	4604      	mov	r4, r0
 800888c:	b930      	cbnz	r0, 800889c <__d2b+0x24>
 800888e:	4602      	mov	r2, r0
 8008890:	4b24      	ldr	r3, [pc, #144]	; (8008924 <__d2b+0xac>)
 8008892:	4825      	ldr	r0, [pc, #148]	; (8008928 <__d2b+0xb0>)
 8008894:	f240 310f 	movw	r1, #783	; 0x30f
 8008898:	f000 f906 	bl	8008aa8 <__assert_func>
 800889c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80088a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80088a4:	bb2d      	cbnz	r5, 80088f2 <__d2b+0x7a>
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	f1b8 0300 	subs.w	r3, r8, #0
 80088ac:	d026      	beq.n	80088fc <__d2b+0x84>
 80088ae:	4668      	mov	r0, sp
 80088b0:	9300      	str	r3, [sp, #0]
 80088b2:	f7ff fd87 	bl	80083c4 <__lo0bits>
 80088b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80088ba:	b1e8      	cbz	r0, 80088f8 <__d2b+0x80>
 80088bc:	f1c0 0320 	rsb	r3, r0, #32
 80088c0:	fa02 f303 	lsl.w	r3, r2, r3
 80088c4:	430b      	orrs	r3, r1
 80088c6:	40c2      	lsrs	r2, r0
 80088c8:	6163      	str	r3, [r4, #20]
 80088ca:	9201      	str	r2, [sp, #4]
 80088cc:	9b01      	ldr	r3, [sp, #4]
 80088ce:	61a3      	str	r3, [r4, #24]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	bf14      	ite	ne
 80088d4:	2202      	movne	r2, #2
 80088d6:	2201      	moveq	r2, #1
 80088d8:	6122      	str	r2, [r4, #16]
 80088da:	b1bd      	cbz	r5, 800890c <__d2b+0x94>
 80088dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088e0:	4405      	add	r5, r0
 80088e2:	603d      	str	r5, [r7, #0]
 80088e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088e8:	6030      	str	r0, [r6, #0]
 80088ea:	4620      	mov	r0, r4
 80088ec:	b003      	add	sp, #12
 80088ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088f6:	e7d6      	b.n	80088a6 <__d2b+0x2e>
 80088f8:	6161      	str	r1, [r4, #20]
 80088fa:	e7e7      	b.n	80088cc <__d2b+0x54>
 80088fc:	a801      	add	r0, sp, #4
 80088fe:	f7ff fd61 	bl	80083c4 <__lo0bits>
 8008902:	9b01      	ldr	r3, [sp, #4]
 8008904:	6163      	str	r3, [r4, #20]
 8008906:	3020      	adds	r0, #32
 8008908:	2201      	movs	r2, #1
 800890a:	e7e5      	b.n	80088d8 <__d2b+0x60>
 800890c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008910:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008914:	6038      	str	r0, [r7, #0]
 8008916:	6918      	ldr	r0, [r3, #16]
 8008918:	f7ff fd34 	bl	8008384 <__hi0bits>
 800891c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008920:	e7e2      	b.n	80088e8 <__d2b+0x70>
 8008922:	bf00      	nop
 8008924:	080091d0 	.word	0x080091d0
 8008928:	080091e1 	.word	0x080091e1

0800892c <__sflush_r>:
 800892c:	898a      	ldrh	r2, [r1, #12]
 800892e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008932:	4605      	mov	r5, r0
 8008934:	0710      	lsls	r0, r2, #28
 8008936:	460c      	mov	r4, r1
 8008938:	d458      	bmi.n	80089ec <__sflush_r+0xc0>
 800893a:	684b      	ldr	r3, [r1, #4]
 800893c:	2b00      	cmp	r3, #0
 800893e:	dc05      	bgt.n	800894c <__sflush_r+0x20>
 8008940:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008942:	2b00      	cmp	r3, #0
 8008944:	dc02      	bgt.n	800894c <__sflush_r+0x20>
 8008946:	2000      	movs	r0, #0
 8008948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800894c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800894e:	2e00      	cmp	r6, #0
 8008950:	d0f9      	beq.n	8008946 <__sflush_r+0x1a>
 8008952:	2300      	movs	r3, #0
 8008954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008958:	682f      	ldr	r7, [r5, #0]
 800895a:	6a21      	ldr	r1, [r4, #32]
 800895c:	602b      	str	r3, [r5, #0]
 800895e:	d032      	beq.n	80089c6 <__sflush_r+0x9a>
 8008960:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	075a      	lsls	r2, r3, #29
 8008966:	d505      	bpl.n	8008974 <__sflush_r+0x48>
 8008968:	6863      	ldr	r3, [r4, #4]
 800896a:	1ac0      	subs	r0, r0, r3
 800896c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800896e:	b10b      	cbz	r3, 8008974 <__sflush_r+0x48>
 8008970:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008972:	1ac0      	subs	r0, r0, r3
 8008974:	2300      	movs	r3, #0
 8008976:	4602      	mov	r2, r0
 8008978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800897a:	6a21      	ldr	r1, [r4, #32]
 800897c:	4628      	mov	r0, r5
 800897e:	47b0      	blx	r6
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	d106      	bne.n	8008994 <__sflush_r+0x68>
 8008986:	6829      	ldr	r1, [r5, #0]
 8008988:	291d      	cmp	r1, #29
 800898a:	d82b      	bhi.n	80089e4 <__sflush_r+0xb8>
 800898c:	4a29      	ldr	r2, [pc, #164]	; (8008a34 <__sflush_r+0x108>)
 800898e:	410a      	asrs	r2, r1
 8008990:	07d6      	lsls	r6, r2, #31
 8008992:	d427      	bmi.n	80089e4 <__sflush_r+0xb8>
 8008994:	2200      	movs	r2, #0
 8008996:	6062      	str	r2, [r4, #4]
 8008998:	04d9      	lsls	r1, r3, #19
 800899a:	6922      	ldr	r2, [r4, #16]
 800899c:	6022      	str	r2, [r4, #0]
 800899e:	d504      	bpl.n	80089aa <__sflush_r+0x7e>
 80089a0:	1c42      	adds	r2, r0, #1
 80089a2:	d101      	bne.n	80089a8 <__sflush_r+0x7c>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	b903      	cbnz	r3, 80089aa <__sflush_r+0x7e>
 80089a8:	6560      	str	r0, [r4, #84]	; 0x54
 80089aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089ac:	602f      	str	r7, [r5, #0]
 80089ae:	2900      	cmp	r1, #0
 80089b0:	d0c9      	beq.n	8008946 <__sflush_r+0x1a>
 80089b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089b6:	4299      	cmp	r1, r3
 80089b8:	d002      	beq.n	80089c0 <__sflush_r+0x94>
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7ff fb3a 	bl	8008034 <_free_r>
 80089c0:	2000      	movs	r0, #0
 80089c2:	6360      	str	r0, [r4, #52]	; 0x34
 80089c4:	e7c0      	b.n	8008948 <__sflush_r+0x1c>
 80089c6:	2301      	movs	r3, #1
 80089c8:	4628      	mov	r0, r5
 80089ca:	47b0      	blx	r6
 80089cc:	1c41      	adds	r1, r0, #1
 80089ce:	d1c8      	bne.n	8008962 <__sflush_r+0x36>
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0c5      	beq.n	8008962 <__sflush_r+0x36>
 80089d6:	2b1d      	cmp	r3, #29
 80089d8:	d001      	beq.n	80089de <__sflush_r+0xb2>
 80089da:	2b16      	cmp	r3, #22
 80089dc:	d101      	bne.n	80089e2 <__sflush_r+0xb6>
 80089de:	602f      	str	r7, [r5, #0]
 80089e0:	e7b1      	b.n	8008946 <__sflush_r+0x1a>
 80089e2:	89a3      	ldrh	r3, [r4, #12]
 80089e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089e8:	81a3      	strh	r3, [r4, #12]
 80089ea:	e7ad      	b.n	8008948 <__sflush_r+0x1c>
 80089ec:	690f      	ldr	r7, [r1, #16]
 80089ee:	2f00      	cmp	r7, #0
 80089f0:	d0a9      	beq.n	8008946 <__sflush_r+0x1a>
 80089f2:	0793      	lsls	r3, r2, #30
 80089f4:	680e      	ldr	r6, [r1, #0]
 80089f6:	bf08      	it	eq
 80089f8:	694b      	ldreq	r3, [r1, #20]
 80089fa:	600f      	str	r7, [r1, #0]
 80089fc:	bf18      	it	ne
 80089fe:	2300      	movne	r3, #0
 8008a00:	eba6 0807 	sub.w	r8, r6, r7
 8008a04:	608b      	str	r3, [r1, #8]
 8008a06:	f1b8 0f00 	cmp.w	r8, #0
 8008a0a:	dd9c      	ble.n	8008946 <__sflush_r+0x1a>
 8008a0c:	6a21      	ldr	r1, [r4, #32]
 8008a0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008a10:	4643      	mov	r3, r8
 8008a12:	463a      	mov	r2, r7
 8008a14:	4628      	mov	r0, r5
 8008a16:	47b0      	blx	r6
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	dc06      	bgt.n	8008a2a <__sflush_r+0xfe>
 8008a1c:	89a3      	ldrh	r3, [r4, #12]
 8008a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a22:	81a3      	strh	r3, [r4, #12]
 8008a24:	f04f 30ff 	mov.w	r0, #4294967295
 8008a28:	e78e      	b.n	8008948 <__sflush_r+0x1c>
 8008a2a:	4407      	add	r7, r0
 8008a2c:	eba8 0800 	sub.w	r8, r8, r0
 8008a30:	e7e9      	b.n	8008a06 <__sflush_r+0xda>
 8008a32:	bf00      	nop
 8008a34:	dfbffffe 	.word	0xdfbffffe

08008a38 <_fflush_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	690b      	ldr	r3, [r1, #16]
 8008a3c:	4605      	mov	r5, r0
 8008a3e:	460c      	mov	r4, r1
 8008a40:	b913      	cbnz	r3, 8008a48 <_fflush_r+0x10>
 8008a42:	2500      	movs	r5, #0
 8008a44:	4628      	mov	r0, r5
 8008a46:	bd38      	pop	{r3, r4, r5, pc}
 8008a48:	b118      	cbz	r0, 8008a52 <_fflush_r+0x1a>
 8008a4a:	6a03      	ldr	r3, [r0, #32]
 8008a4c:	b90b      	cbnz	r3, 8008a52 <_fflush_r+0x1a>
 8008a4e:	f7fe fb6f 	bl	8007130 <__sinit>
 8008a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d0f3      	beq.n	8008a42 <_fflush_r+0xa>
 8008a5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a5c:	07d0      	lsls	r0, r2, #31
 8008a5e:	d404      	bmi.n	8008a6a <_fflush_r+0x32>
 8008a60:	0599      	lsls	r1, r3, #22
 8008a62:	d402      	bmi.n	8008a6a <_fflush_r+0x32>
 8008a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a66:	f7fe fc5a 	bl	800731e <__retarget_lock_acquire_recursive>
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	4621      	mov	r1, r4
 8008a6e:	f7ff ff5d 	bl	800892c <__sflush_r>
 8008a72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a74:	07da      	lsls	r2, r3, #31
 8008a76:	4605      	mov	r5, r0
 8008a78:	d4e4      	bmi.n	8008a44 <_fflush_r+0xc>
 8008a7a:	89a3      	ldrh	r3, [r4, #12]
 8008a7c:	059b      	lsls	r3, r3, #22
 8008a7e:	d4e1      	bmi.n	8008a44 <_fflush_r+0xc>
 8008a80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a82:	f7fe fc4d 	bl	8007320 <__retarget_lock_release_recursive>
 8008a86:	e7dd      	b.n	8008a44 <_fflush_r+0xc>

08008a88 <_sbrk_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d06      	ldr	r5, [pc, #24]	; (8008aa4 <_sbrk_r+0x1c>)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	4604      	mov	r4, r0
 8008a90:	4608      	mov	r0, r1
 8008a92:	602b      	str	r3, [r5, #0]
 8008a94:	f7f9 fcde 	bl	8002454 <_sbrk>
 8008a98:	1c43      	adds	r3, r0, #1
 8008a9a:	d102      	bne.n	8008aa2 <_sbrk_r+0x1a>
 8008a9c:	682b      	ldr	r3, [r5, #0]
 8008a9e:	b103      	cbz	r3, 8008aa2 <_sbrk_r+0x1a>
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	bd38      	pop	{r3, r4, r5, pc}
 8008aa4:	2000075c 	.word	0x2000075c

08008aa8 <__assert_func>:
 8008aa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aaa:	4614      	mov	r4, r2
 8008aac:	461a      	mov	r2, r3
 8008aae:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <__assert_func+0x2c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	68d8      	ldr	r0, [r3, #12]
 8008ab6:	b14c      	cbz	r4, 8008acc <__assert_func+0x24>
 8008ab8:	4b07      	ldr	r3, [pc, #28]	; (8008ad8 <__assert_func+0x30>)
 8008aba:	9100      	str	r1, [sp, #0]
 8008abc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ac0:	4906      	ldr	r1, [pc, #24]	; (8008adc <__assert_func+0x34>)
 8008ac2:	462b      	mov	r3, r5
 8008ac4:	f000 f844 	bl	8008b50 <fiprintf>
 8008ac8:	f000 f854 	bl	8008b74 <abort>
 8008acc:	4b04      	ldr	r3, [pc, #16]	; (8008ae0 <__assert_func+0x38>)
 8008ace:	461c      	mov	r4, r3
 8008ad0:	e7f3      	b.n	8008aba <__assert_func+0x12>
 8008ad2:	bf00      	nop
 8008ad4:	20000080 	.word	0x20000080
 8008ad8:	08009346 	.word	0x08009346
 8008adc:	08009353 	.word	0x08009353
 8008ae0:	08009381 	.word	0x08009381

08008ae4 <_calloc_r>:
 8008ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ae6:	fba1 2402 	umull	r2, r4, r1, r2
 8008aea:	b94c      	cbnz	r4, 8008b00 <_calloc_r+0x1c>
 8008aec:	4611      	mov	r1, r2
 8008aee:	9201      	str	r2, [sp, #4]
 8008af0:	f7ff fb14 	bl	800811c <_malloc_r>
 8008af4:	9a01      	ldr	r2, [sp, #4]
 8008af6:	4605      	mov	r5, r0
 8008af8:	b930      	cbnz	r0, 8008b08 <_calloc_r+0x24>
 8008afa:	4628      	mov	r0, r5
 8008afc:	b003      	add	sp, #12
 8008afe:	bd30      	pop	{r4, r5, pc}
 8008b00:	220c      	movs	r2, #12
 8008b02:	6002      	str	r2, [r0, #0]
 8008b04:	2500      	movs	r5, #0
 8008b06:	e7f8      	b.n	8008afa <_calloc_r+0x16>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	f7fe fb8a 	bl	8007222 <memset>
 8008b0e:	e7f4      	b.n	8008afa <_calloc_r+0x16>

08008b10 <__ascii_mbtowc>:
 8008b10:	b082      	sub	sp, #8
 8008b12:	b901      	cbnz	r1, 8008b16 <__ascii_mbtowc+0x6>
 8008b14:	a901      	add	r1, sp, #4
 8008b16:	b142      	cbz	r2, 8008b2a <__ascii_mbtowc+0x1a>
 8008b18:	b14b      	cbz	r3, 8008b2e <__ascii_mbtowc+0x1e>
 8008b1a:	7813      	ldrb	r3, [r2, #0]
 8008b1c:	600b      	str	r3, [r1, #0]
 8008b1e:	7812      	ldrb	r2, [r2, #0]
 8008b20:	1e10      	subs	r0, r2, #0
 8008b22:	bf18      	it	ne
 8008b24:	2001      	movne	r0, #1
 8008b26:	b002      	add	sp, #8
 8008b28:	4770      	bx	lr
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	e7fb      	b.n	8008b26 <__ascii_mbtowc+0x16>
 8008b2e:	f06f 0001 	mvn.w	r0, #1
 8008b32:	e7f8      	b.n	8008b26 <__ascii_mbtowc+0x16>

08008b34 <__ascii_wctomb>:
 8008b34:	b149      	cbz	r1, 8008b4a <__ascii_wctomb+0x16>
 8008b36:	2aff      	cmp	r2, #255	; 0xff
 8008b38:	bf85      	ittet	hi
 8008b3a:	238a      	movhi	r3, #138	; 0x8a
 8008b3c:	6003      	strhi	r3, [r0, #0]
 8008b3e:	700a      	strbls	r2, [r1, #0]
 8008b40:	f04f 30ff 	movhi.w	r0, #4294967295
 8008b44:	bf98      	it	ls
 8008b46:	2001      	movls	r0, #1
 8008b48:	4770      	bx	lr
 8008b4a:	4608      	mov	r0, r1
 8008b4c:	4770      	bx	lr
	...

08008b50 <fiprintf>:
 8008b50:	b40e      	push	{r1, r2, r3}
 8008b52:	b503      	push	{r0, r1, lr}
 8008b54:	4601      	mov	r1, r0
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	4805      	ldr	r0, [pc, #20]	; (8008b70 <fiprintf+0x20>)
 8008b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5e:	6800      	ldr	r0, [r0, #0]
 8008b60:	9301      	str	r3, [sp, #4]
 8008b62:	f000 f837 	bl	8008bd4 <_vfiprintf_r>
 8008b66:	b002      	add	sp, #8
 8008b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b6c:	b003      	add	sp, #12
 8008b6e:	4770      	bx	lr
 8008b70:	20000080 	.word	0x20000080

08008b74 <abort>:
 8008b74:	b508      	push	{r3, lr}
 8008b76:	2006      	movs	r0, #6
 8008b78:	f000 fa04 	bl	8008f84 <raise>
 8008b7c:	2001      	movs	r0, #1
 8008b7e:	f7f9 fbf1 	bl	8002364 <_exit>

08008b82 <__sfputc_r>:
 8008b82:	6893      	ldr	r3, [r2, #8]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	b410      	push	{r4}
 8008b8a:	6093      	str	r3, [r2, #8]
 8008b8c:	da08      	bge.n	8008ba0 <__sfputc_r+0x1e>
 8008b8e:	6994      	ldr	r4, [r2, #24]
 8008b90:	42a3      	cmp	r3, r4
 8008b92:	db01      	blt.n	8008b98 <__sfputc_r+0x16>
 8008b94:	290a      	cmp	r1, #10
 8008b96:	d103      	bne.n	8008ba0 <__sfputc_r+0x1e>
 8008b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b9c:	f000 b934 	b.w	8008e08 <__swbuf_r>
 8008ba0:	6813      	ldr	r3, [r2, #0]
 8008ba2:	1c58      	adds	r0, r3, #1
 8008ba4:	6010      	str	r0, [r2, #0]
 8008ba6:	7019      	strb	r1, [r3, #0]
 8008ba8:	4608      	mov	r0, r1
 8008baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <__sfputs_r>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460f      	mov	r7, r1
 8008bb6:	4614      	mov	r4, r2
 8008bb8:	18d5      	adds	r5, r2, r3
 8008bba:	42ac      	cmp	r4, r5
 8008bbc:	d101      	bne.n	8008bc2 <__sfputs_r+0x12>
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	e007      	b.n	8008bd2 <__sfputs_r+0x22>
 8008bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bc6:	463a      	mov	r2, r7
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f7ff ffda 	bl	8008b82 <__sfputc_r>
 8008bce:	1c43      	adds	r3, r0, #1
 8008bd0:	d1f3      	bne.n	8008bba <__sfputs_r+0xa>
 8008bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bd4 <_vfiprintf_r>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	460d      	mov	r5, r1
 8008bda:	b09d      	sub	sp, #116	; 0x74
 8008bdc:	4614      	mov	r4, r2
 8008bde:	4698      	mov	r8, r3
 8008be0:	4606      	mov	r6, r0
 8008be2:	b118      	cbz	r0, 8008bec <_vfiprintf_r+0x18>
 8008be4:	6a03      	ldr	r3, [r0, #32]
 8008be6:	b90b      	cbnz	r3, 8008bec <_vfiprintf_r+0x18>
 8008be8:	f7fe faa2 	bl	8007130 <__sinit>
 8008bec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008bee:	07d9      	lsls	r1, r3, #31
 8008bf0:	d405      	bmi.n	8008bfe <_vfiprintf_r+0x2a>
 8008bf2:	89ab      	ldrh	r3, [r5, #12]
 8008bf4:	059a      	lsls	r2, r3, #22
 8008bf6:	d402      	bmi.n	8008bfe <_vfiprintf_r+0x2a>
 8008bf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008bfa:	f7fe fb90 	bl	800731e <__retarget_lock_acquire_recursive>
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	071b      	lsls	r3, r3, #28
 8008c02:	d501      	bpl.n	8008c08 <_vfiprintf_r+0x34>
 8008c04:	692b      	ldr	r3, [r5, #16]
 8008c06:	b99b      	cbnz	r3, 8008c30 <_vfiprintf_r+0x5c>
 8008c08:	4629      	mov	r1, r5
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f000 f93a 	bl	8008e84 <__swsetup_r>
 8008c10:	b170      	cbz	r0, 8008c30 <_vfiprintf_r+0x5c>
 8008c12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c14:	07dc      	lsls	r4, r3, #31
 8008c16:	d504      	bpl.n	8008c22 <_vfiprintf_r+0x4e>
 8008c18:	f04f 30ff 	mov.w	r0, #4294967295
 8008c1c:	b01d      	add	sp, #116	; 0x74
 8008c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c22:	89ab      	ldrh	r3, [r5, #12]
 8008c24:	0598      	lsls	r0, r3, #22
 8008c26:	d4f7      	bmi.n	8008c18 <_vfiprintf_r+0x44>
 8008c28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c2a:	f7fe fb79 	bl	8007320 <__retarget_lock_release_recursive>
 8008c2e:	e7f3      	b.n	8008c18 <_vfiprintf_r+0x44>
 8008c30:	2300      	movs	r3, #0
 8008c32:	9309      	str	r3, [sp, #36]	; 0x24
 8008c34:	2320      	movs	r3, #32
 8008c36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008c3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c3e:	2330      	movs	r3, #48	; 0x30
 8008c40:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008df4 <_vfiprintf_r+0x220>
 8008c44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c48:	f04f 0901 	mov.w	r9, #1
 8008c4c:	4623      	mov	r3, r4
 8008c4e:	469a      	mov	sl, r3
 8008c50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c54:	b10a      	cbz	r2, 8008c5a <_vfiprintf_r+0x86>
 8008c56:	2a25      	cmp	r2, #37	; 0x25
 8008c58:	d1f9      	bne.n	8008c4e <_vfiprintf_r+0x7a>
 8008c5a:	ebba 0b04 	subs.w	fp, sl, r4
 8008c5e:	d00b      	beq.n	8008c78 <_vfiprintf_r+0xa4>
 8008c60:	465b      	mov	r3, fp
 8008c62:	4622      	mov	r2, r4
 8008c64:	4629      	mov	r1, r5
 8008c66:	4630      	mov	r0, r6
 8008c68:	f7ff ffa2 	bl	8008bb0 <__sfputs_r>
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	f000 80a9 	beq.w	8008dc4 <_vfiprintf_r+0x1f0>
 8008c72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c74:	445a      	add	r2, fp
 8008c76:	9209      	str	r2, [sp, #36]	; 0x24
 8008c78:	f89a 3000 	ldrb.w	r3, [sl]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 80a1 	beq.w	8008dc4 <_vfiprintf_r+0x1f0>
 8008c82:	2300      	movs	r3, #0
 8008c84:	f04f 32ff 	mov.w	r2, #4294967295
 8008c88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c8c:	f10a 0a01 	add.w	sl, sl, #1
 8008c90:	9304      	str	r3, [sp, #16]
 8008c92:	9307      	str	r3, [sp, #28]
 8008c94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c98:	931a      	str	r3, [sp, #104]	; 0x68
 8008c9a:	4654      	mov	r4, sl
 8008c9c:	2205      	movs	r2, #5
 8008c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ca2:	4854      	ldr	r0, [pc, #336]	; (8008df4 <_vfiprintf_r+0x220>)
 8008ca4:	f7f7 fabc 	bl	8000220 <memchr>
 8008ca8:	9a04      	ldr	r2, [sp, #16]
 8008caa:	b9d8      	cbnz	r0, 8008ce4 <_vfiprintf_r+0x110>
 8008cac:	06d1      	lsls	r1, r2, #27
 8008cae:	bf44      	itt	mi
 8008cb0:	2320      	movmi	r3, #32
 8008cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cb6:	0713      	lsls	r3, r2, #28
 8008cb8:	bf44      	itt	mi
 8008cba:	232b      	movmi	r3, #43	; 0x2b
 8008cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8008cc4:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc6:	d015      	beq.n	8008cf4 <_vfiprintf_r+0x120>
 8008cc8:	9a07      	ldr	r2, [sp, #28]
 8008cca:	4654      	mov	r4, sl
 8008ccc:	2000      	movs	r0, #0
 8008cce:	f04f 0c0a 	mov.w	ip, #10
 8008cd2:	4621      	mov	r1, r4
 8008cd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cd8:	3b30      	subs	r3, #48	; 0x30
 8008cda:	2b09      	cmp	r3, #9
 8008cdc:	d94d      	bls.n	8008d7a <_vfiprintf_r+0x1a6>
 8008cde:	b1b0      	cbz	r0, 8008d0e <_vfiprintf_r+0x13a>
 8008ce0:	9207      	str	r2, [sp, #28]
 8008ce2:	e014      	b.n	8008d0e <_vfiprintf_r+0x13a>
 8008ce4:	eba0 0308 	sub.w	r3, r0, r8
 8008ce8:	fa09 f303 	lsl.w	r3, r9, r3
 8008cec:	4313      	orrs	r3, r2
 8008cee:	9304      	str	r3, [sp, #16]
 8008cf0:	46a2      	mov	sl, r4
 8008cf2:	e7d2      	b.n	8008c9a <_vfiprintf_r+0xc6>
 8008cf4:	9b03      	ldr	r3, [sp, #12]
 8008cf6:	1d19      	adds	r1, r3, #4
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	9103      	str	r1, [sp, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	bfbb      	ittet	lt
 8008d00:	425b      	neglt	r3, r3
 8008d02:	f042 0202 	orrlt.w	r2, r2, #2
 8008d06:	9307      	strge	r3, [sp, #28]
 8008d08:	9307      	strlt	r3, [sp, #28]
 8008d0a:	bfb8      	it	lt
 8008d0c:	9204      	strlt	r2, [sp, #16]
 8008d0e:	7823      	ldrb	r3, [r4, #0]
 8008d10:	2b2e      	cmp	r3, #46	; 0x2e
 8008d12:	d10c      	bne.n	8008d2e <_vfiprintf_r+0x15a>
 8008d14:	7863      	ldrb	r3, [r4, #1]
 8008d16:	2b2a      	cmp	r3, #42	; 0x2a
 8008d18:	d134      	bne.n	8008d84 <_vfiprintf_r+0x1b0>
 8008d1a:	9b03      	ldr	r3, [sp, #12]
 8008d1c:	1d1a      	adds	r2, r3, #4
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	9203      	str	r2, [sp, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	bfb8      	it	lt
 8008d26:	f04f 33ff 	movlt.w	r3, #4294967295
 8008d2a:	3402      	adds	r4, #2
 8008d2c:	9305      	str	r3, [sp, #20]
 8008d2e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008e04 <_vfiprintf_r+0x230>
 8008d32:	7821      	ldrb	r1, [r4, #0]
 8008d34:	2203      	movs	r2, #3
 8008d36:	4650      	mov	r0, sl
 8008d38:	f7f7 fa72 	bl	8000220 <memchr>
 8008d3c:	b138      	cbz	r0, 8008d4e <_vfiprintf_r+0x17a>
 8008d3e:	9b04      	ldr	r3, [sp, #16]
 8008d40:	eba0 000a 	sub.w	r0, r0, sl
 8008d44:	2240      	movs	r2, #64	; 0x40
 8008d46:	4082      	lsls	r2, r0
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	3401      	adds	r4, #1
 8008d4c:	9304      	str	r3, [sp, #16]
 8008d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d52:	4829      	ldr	r0, [pc, #164]	; (8008df8 <_vfiprintf_r+0x224>)
 8008d54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d58:	2206      	movs	r2, #6
 8008d5a:	f7f7 fa61 	bl	8000220 <memchr>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d03f      	beq.n	8008de2 <_vfiprintf_r+0x20e>
 8008d62:	4b26      	ldr	r3, [pc, #152]	; (8008dfc <_vfiprintf_r+0x228>)
 8008d64:	bb1b      	cbnz	r3, 8008dae <_vfiprintf_r+0x1da>
 8008d66:	9b03      	ldr	r3, [sp, #12]
 8008d68:	3307      	adds	r3, #7
 8008d6a:	f023 0307 	bic.w	r3, r3, #7
 8008d6e:	3308      	adds	r3, #8
 8008d70:	9303      	str	r3, [sp, #12]
 8008d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d74:	443b      	add	r3, r7
 8008d76:	9309      	str	r3, [sp, #36]	; 0x24
 8008d78:	e768      	b.n	8008c4c <_vfiprintf_r+0x78>
 8008d7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d7e:	460c      	mov	r4, r1
 8008d80:	2001      	movs	r0, #1
 8008d82:	e7a6      	b.n	8008cd2 <_vfiprintf_r+0xfe>
 8008d84:	2300      	movs	r3, #0
 8008d86:	3401      	adds	r4, #1
 8008d88:	9305      	str	r3, [sp, #20]
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	f04f 0c0a 	mov.w	ip, #10
 8008d90:	4620      	mov	r0, r4
 8008d92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d96:	3a30      	subs	r2, #48	; 0x30
 8008d98:	2a09      	cmp	r2, #9
 8008d9a:	d903      	bls.n	8008da4 <_vfiprintf_r+0x1d0>
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d0c6      	beq.n	8008d2e <_vfiprintf_r+0x15a>
 8008da0:	9105      	str	r1, [sp, #20]
 8008da2:	e7c4      	b.n	8008d2e <_vfiprintf_r+0x15a>
 8008da4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008da8:	4604      	mov	r4, r0
 8008daa:	2301      	movs	r3, #1
 8008dac:	e7f0      	b.n	8008d90 <_vfiprintf_r+0x1bc>
 8008dae:	ab03      	add	r3, sp, #12
 8008db0:	9300      	str	r3, [sp, #0]
 8008db2:	462a      	mov	r2, r5
 8008db4:	4b12      	ldr	r3, [pc, #72]	; (8008e00 <_vfiprintf_r+0x22c>)
 8008db6:	a904      	add	r1, sp, #16
 8008db8:	4630      	mov	r0, r6
 8008dba:	f7fd fd67 	bl	800688c <_printf_float>
 8008dbe:	4607      	mov	r7, r0
 8008dc0:	1c78      	adds	r0, r7, #1
 8008dc2:	d1d6      	bne.n	8008d72 <_vfiprintf_r+0x19e>
 8008dc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dc6:	07d9      	lsls	r1, r3, #31
 8008dc8:	d405      	bmi.n	8008dd6 <_vfiprintf_r+0x202>
 8008dca:	89ab      	ldrh	r3, [r5, #12]
 8008dcc:	059a      	lsls	r2, r3, #22
 8008dce:	d402      	bmi.n	8008dd6 <_vfiprintf_r+0x202>
 8008dd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008dd2:	f7fe faa5 	bl	8007320 <__retarget_lock_release_recursive>
 8008dd6:	89ab      	ldrh	r3, [r5, #12]
 8008dd8:	065b      	lsls	r3, r3, #25
 8008dda:	f53f af1d 	bmi.w	8008c18 <_vfiprintf_r+0x44>
 8008dde:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008de0:	e71c      	b.n	8008c1c <_vfiprintf_r+0x48>
 8008de2:	ab03      	add	r3, sp, #12
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	462a      	mov	r2, r5
 8008de8:	4b05      	ldr	r3, [pc, #20]	; (8008e00 <_vfiprintf_r+0x22c>)
 8008dea:	a904      	add	r1, sp, #16
 8008dec:	4630      	mov	r0, r6
 8008dee:	f7fd fff1 	bl	8006dd4 <_printf_i>
 8008df2:	e7e4      	b.n	8008dbe <_vfiprintf_r+0x1ea>
 8008df4:	08009483 	.word	0x08009483
 8008df8:	0800948d 	.word	0x0800948d
 8008dfc:	0800688d 	.word	0x0800688d
 8008e00:	08008bb1 	.word	0x08008bb1
 8008e04:	08009489 	.word	0x08009489

08008e08 <__swbuf_r>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	460e      	mov	r6, r1
 8008e0c:	4614      	mov	r4, r2
 8008e0e:	4605      	mov	r5, r0
 8008e10:	b118      	cbz	r0, 8008e1a <__swbuf_r+0x12>
 8008e12:	6a03      	ldr	r3, [r0, #32]
 8008e14:	b90b      	cbnz	r3, 8008e1a <__swbuf_r+0x12>
 8008e16:	f7fe f98b 	bl	8007130 <__sinit>
 8008e1a:	69a3      	ldr	r3, [r4, #24]
 8008e1c:	60a3      	str	r3, [r4, #8]
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	071a      	lsls	r2, r3, #28
 8008e22:	d525      	bpl.n	8008e70 <__swbuf_r+0x68>
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	b31b      	cbz	r3, 8008e70 <__swbuf_r+0x68>
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	6922      	ldr	r2, [r4, #16]
 8008e2c:	1a98      	subs	r0, r3, r2
 8008e2e:	6963      	ldr	r3, [r4, #20]
 8008e30:	b2f6      	uxtb	r6, r6
 8008e32:	4283      	cmp	r3, r0
 8008e34:	4637      	mov	r7, r6
 8008e36:	dc04      	bgt.n	8008e42 <__swbuf_r+0x3a>
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	f7ff fdfc 	bl	8008a38 <_fflush_r>
 8008e40:	b9e0      	cbnz	r0, 8008e7c <__swbuf_r+0x74>
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	60a3      	str	r3, [r4, #8]
 8008e48:	6823      	ldr	r3, [r4, #0]
 8008e4a:	1c5a      	adds	r2, r3, #1
 8008e4c:	6022      	str	r2, [r4, #0]
 8008e4e:	701e      	strb	r6, [r3, #0]
 8008e50:	6962      	ldr	r2, [r4, #20]
 8008e52:	1c43      	adds	r3, r0, #1
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d004      	beq.n	8008e62 <__swbuf_r+0x5a>
 8008e58:	89a3      	ldrh	r3, [r4, #12]
 8008e5a:	07db      	lsls	r3, r3, #31
 8008e5c:	d506      	bpl.n	8008e6c <__swbuf_r+0x64>
 8008e5e:	2e0a      	cmp	r6, #10
 8008e60:	d104      	bne.n	8008e6c <__swbuf_r+0x64>
 8008e62:	4621      	mov	r1, r4
 8008e64:	4628      	mov	r0, r5
 8008e66:	f7ff fde7 	bl	8008a38 <_fflush_r>
 8008e6a:	b938      	cbnz	r0, 8008e7c <__swbuf_r+0x74>
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e70:	4621      	mov	r1, r4
 8008e72:	4628      	mov	r0, r5
 8008e74:	f000 f806 	bl	8008e84 <__swsetup_r>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d0d5      	beq.n	8008e28 <__swbuf_r+0x20>
 8008e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8008e80:	e7f4      	b.n	8008e6c <__swbuf_r+0x64>
	...

08008e84 <__swsetup_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4b2a      	ldr	r3, [pc, #168]	; (8008f30 <__swsetup_r+0xac>)
 8008e88:	4605      	mov	r5, r0
 8008e8a:	6818      	ldr	r0, [r3, #0]
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	b118      	cbz	r0, 8008e98 <__swsetup_r+0x14>
 8008e90:	6a03      	ldr	r3, [r0, #32]
 8008e92:	b90b      	cbnz	r3, 8008e98 <__swsetup_r+0x14>
 8008e94:	f7fe f94c 	bl	8007130 <__sinit>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e9e:	0718      	lsls	r0, r3, #28
 8008ea0:	d422      	bmi.n	8008ee8 <__swsetup_r+0x64>
 8008ea2:	06d9      	lsls	r1, r3, #27
 8008ea4:	d407      	bmi.n	8008eb6 <__swsetup_r+0x32>
 8008ea6:	2309      	movs	r3, #9
 8008ea8:	602b      	str	r3, [r5, #0]
 8008eaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb4:	e034      	b.n	8008f20 <__swsetup_r+0x9c>
 8008eb6:	0758      	lsls	r0, r3, #29
 8008eb8:	d512      	bpl.n	8008ee0 <__swsetup_r+0x5c>
 8008eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ebc:	b141      	cbz	r1, 8008ed0 <__swsetup_r+0x4c>
 8008ebe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec2:	4299      	cmp	r1, r3
 8008ec4:	d002      	beq.n	8008ecc <__swsetup_r+0x48>
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	f7ff f8b4 	bl	8008034 <_free_r>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6363      	str	r3, [r4, #52]	; 0x34
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ed6:	81a3      	strh	r3, [r4, #12]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	6063      	str	r3, [r4, #4]
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	89a3      	ldrh	r3, [r4, #12]
 8008ee2:	f043 0308 	orr.w	r3, r3, #8
 8008ee6:	81a3      	strh	r3, [r4, #12]
 8008ee8:	6923      	ldr	r3, [r4, #16]
 8008eea:	b94b      	cbnz	r3, 8008f00 <__swsetup_r+0x7c>
 8008eec:	89a3      	ldrh	r3, [r4, #12]
 8008eee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ef6:	d003      	beq.n	8008f00 <__swsetup_r+0x7c>
 8008ef8:	4621      	mov	r1, r4
 8008efa:	4628      	mov	r0, r5
 8008efc:	f000 f884 	bl	8009008 <__smakebuf_r>
 8008f00:	89a0      	ldrh	r0, [r4, #12]
 8008f02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f06:	f010 0301 	ands.w	r3, r0, #1
 8008f0a:	d00a      	beq.n	8008f22 <__swsetup_r+0x9e>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60a3      	str	r3, [r4, #8]
 8008f10:	6963      	ldr	r3, [r4, #20]
 8008f12:	425b      	negs	r3, r3
 8008f14:	61a3      	str	r3, [r4, #24]
 8008f16:	6923      	ldr	r3, [r4, #16]
 8008f18:	b943      	cbnz	r3, 8008f2c <__swsetup_r+0xa8>
 8008f1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f1e:	d1c4      	bne.n	8008eaa <__swsetup_r+0x26>
 8008f20:	bd38      	pop	{r3, r4, r5, pc}
 8008f22:	0781      	lsls	r1, r0, #30
 8008f24:	bf58      	it	pl
 8008f26:	6963      	ldrpl	r3, [r4, #20]
 8008f28:	60a3      	str	r3, [r4, #8]
 8008f2a:	e7f4      	b.n	8008f16 <__swsetup_r+0x92>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	e7f7      	b.n	8008f20 <__swsetup_r+0x9c>
 8008f30:	20000080 	.word	0x20000080

08008f34 <_raise_r>:
 8008f34:	291f      	cmp	r1, #31
 8008f36:	b538      	push	{r3, r4, r5, lr}
 8008f38:	4604      	mov	r4, r0
 8008f3a:	460d      	mov	r5, r1
 8008f3c:	d904      	bls.n	8008f48 <_raise_r+0x14>
 8008f3e:	2316      	movs	r3, #22
 8008f40:	6003      	str	r3, [r0, #0]
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295
 8008f46:	bd38      	pop	{r3, r4, r5, pc}
 8008f48:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008f4a:	b112      	cbz	r2, 8008f52 <_raise_r+0x1e>
 8008f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008f50:	b94b      	cbnz	r3, 8008f66 <_raise_r+0x32>
 8008f52:	4620      	mov	r0, r4
 8008f54:	f000 f830 	bl	8008fb8 <_getpid_r>
 8008f58:	462a      	mov	r2, r5
 8008f5a:	4601      	mov	r1, r0
 8008f5c:	4620      	mov	r0, r4
 8008f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f62:	f000 b817 	b.w	8008f94 <_kill_r>
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d00a      	beq.n	8008f80 <_raise_r+0x4c>
 8008f6a:	1c59      	adds	r1, r3, #1
 8008f6c:	d103      	bne.n	8008f76 <_raise_r+0x42>
 8008f6e:	2316      	movs	r3, #22
 8008f70:	6003      	str	r3, [r0, #0]
 8008f72:	2001      	movs	r0, #1
 8008f74:	e7e7      	b.n	8008f46 <_raise_r+0x12>
 8008f76:	2400      	movs	r4, #0
 8008f78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	4798      	blx	r3
 8008f80:	2000      	movs	r0, #0
 8008f82:	e7e0      	b.n	8008f46 <_raise_r+0x12>

08008f84 <raise>:
 8008f84:	4b02      	ldr	r3, [pc, #8]	; (8008f90 <raise+0xc>)
 8008f86:	4601      	mov	r1, r0
 8008f88:	6818      	ldr	r0, [r3, #0]
 8008f8a:	f7ff bfd3 	b.w	8008f34 <_raise_r>
 8008f8e:	bf00      	nop
 8008f90:	20000080 	.word	0x20000080

08008f94 <_kill_r>:
 8008f94:	b538      	push	{r3, r4, r5, lr}
 8008f96:	4d07      	ldr	r5, [pc, #28]	; (8008fb4 <_kill_r+0x20>)
 8008f98:	2300      	movs	r3, #0
 8008f9a:	4604      	mov	r4, r0
 8008f9c:	4608      	mov	r0, r1
 8008f9e:	4611      	mov	r1, r2
 8008fa0:	602b      	str	r3, [r5, #0]
 8008fa2:	f7f9 f9cf 	bl	8002344 <_kill>
 8008fa6:	1c43      	adds	r3, r0, #1
 8008fa8:	d102      	bne.n	8008fb0 <_kill_r+0x1c>
 8008faa:	682b      	ldr	r3, [r5, #0]
 8008fac:	b103      	cbz	r3, 8008fb0 <_kill_r+0x1c>
 8008fae:	6023      	str	r3, [r4, #0]
 8008fb0:	bd38      	pop	{r3, r4, r5, pc}
 8008fb2:	bf00      	nop
 8008fb4:	2000075c 	.word	0x2000075c

08008fb8 <_getpid_r>:
 8008fb8:	f7f9 b9bc 	b.w	8002334 <_getpid>

08008fbc <__swhatbuf_r>:
 8008fbc:	b570      	push	{r4, r5, r6, lr}
 8008fbe:	460c      	mov	r4, r1
 8008fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fc4:	2900      	cmp	r1, #0
 8008fc6:	b096      	sub	sp, #88	; 0x58
 8008fc8:	4615      	mov	r5, r2
 8008fca:	461e      	mov	r6, r3
 8008fcc:	da0d      	bge.n	8008fea <__swhatbuf_r+0x2e>
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008fd4:	f04f 0100 	mov.w	r1, #0
 8008fd8:	bf0c      	ite	eq
 8008fda:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008fde:	2340      	movne	r3, #64	; 0x40
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	6031      	str	r1, [r6, #0]
 8008fe4:	602b      	str	r3, [r5, #0]
 8008fe6:	b016      	add	sp, #88	; 0x58
 8008fe8:	bd70      	pop	{r4, r5, r6, pc}
 8008fea:	466a      	mov	r2, sp
 8008fec:	f000 f848 	bl	8009080 <_fstat_r>
 8008ff0:	2800      	cmp	r0, #0
 8008ff2:	dbec      	blt.n	8008fce <__swhatbuf_r+0x12>
 8008ff4:	9901      	ldr	r1, [sp, #4]
 8008ff6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ffa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008ffe:	4259      	negs	r1, r3
 8009000:	4159      	adcs	r1, r3
 8009002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009006:	e7eb      	b.n	8008fe0 <__swhatbuf_r+0x24>

08009008 <__smakebuf_r>:
 8009008:	898b      	ldrh	r3, [r1, #12]
 800900a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800900c:	079d      	lsls	r5, r3, #30
 800900e:	4606      	mov	r6, r0
 8009010:	460c      	mov	r4, r1
 8009012:	d507      	bpl.n	8009024 <__smakebuf_r+0x1c>
 8009014:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009018:	6023      	str	r3, [r4, #0]
 800901a:	6123      	str	r3, [r4, #16]
 800901c:	2301      	movs	r3, #1
 800901e:	6163      	str	r3, [r4, #20]
 8009020:	b002      	add	sp, #8
 8009022:	bd70      	pop	{r4, r5, r6, pc}
 8009024:	ab01      	add	r3, sp, #4
 8009026:	466a      	mov	r2, sp
 8009028:	f7ff ffc8 	bl	8008fbc <__swhatbuf_r>
 800902c:	9900      	ldr	r1, [sp, #0]
 800902e:	4605      	mov	r5, r0
 8009030:	4630      	mov	r0, r6
 8009032:	f7ff f873 	bl	800811c <_malloc_r>
 8009036:	b948      	cbnz	r0, 800904c <__smakebuf_r+0x44>
 8009038:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903c:	059a      	lsls	r2, r3, #22
 800903e:	d4ef      	bmi.n	8009020 <__smakebuf_r+0x18>
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	f043 0302 	orr.w	r3, r3, #2
 8009048:	81a3      	strh	r3, [r4, #12]
 800904a:	e7e3      	b.n	8009014 <__smakebuf_r+0xc>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	6020      	str	r0, [r4, #0]
 8009050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	9b00      	ldr	r3, [sp, #0]
 8009058:	6163      	str	r3, [r4, #20]
 800905a:	9b01      	ldr	r3, [sp, #4]
 800905c:	6120      	str	r0, [r4, #16]
 800905e:	b15b      	cbz	r3, 8009078 <__smakebuf_r+0x70>
 8009060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009064:	4630      	mov	r0, r6
 8009066:	f000 f81d 	bl	80090a4 <_isatty_r>
 800906a:	b128      	cbz	r0, 8009078 <__smakebuf_r+0x70>
 800906c:	89a3      	ldrh	r3, [r4, #12]
 800906e:	f023 0303 	bic.w	r3, r3, #3
 8009072:	f043 0301 	orr.w	r3, r3, #1
 8009076:	81a3      	strh	r3, [r4, #12]
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	431d      	orrs	r5, r3
 800907c:	81a5      	strh	r5, [r4, #12]
 800907e:	e7cf      	b.n	8009020 <__smakebuf_r+0x18>

08009080 <_fstat_r>:
 8009080:	b538      	push	{r3, r4, r5, lr}
 8009082:	4d07      	ldr	r5, [pc, #28]	; (80090a0 <_fstat_r+0x20>)
 8009084:	2300      	movs	r3, #0
 8009086:	4604      	mov	r4, r0
 8009088:	4608      	mov	r0, r1
 800908a:	4611      	mov	r1, r2
 800908c:	602b      	str	r3, [r5, #0]
 800908e:	f7f9 f9b8 	bl	8002402 <_fstat>
 8009092:	1c43      	adds	r3, r0, #1
 8009094:	d102      	bne.n	800909c <_fstat_r+0x1c>
 8009096:	682b      	ldr	r3, [r5, #0]
 8009098:	b103      	cbz	r3, 800909c <_fstat_r+0x1c>
 800909a:	6023      	str	r3, [r4, #0]
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	bf00      	nop
 80090a0:	2000075c 	.word	0x2000075c

080090a4 <_isatty_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d06      	ldr	r5, [pc, #24]	; (80090c0 <_isatty_r+0x1c>)
 80090a8:	2300      	movs	r3, #0
 80090aa:	4604      	mov	r4, r0
 80090ac:	4608      	mov	r0, r1
 80090ae:	602b      	str	r3, [r5, #0]
 80090b0:	f7f9 f9b7 	bl	8002422 <_isatty>
 80090b4:	1c43      	adds	r3, r0, #1
 80090b6:	d102      	bne.n	80090be <_isatty_r+0x1a>
 80090b8:	682b      	ldr	r3, [r5, #0]
 80090ba:	b103      	cbz	r3, 80090be <_isatty_r+0x1a>
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	2000075c 	.word	0x2000075c

080090c4 <_init>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	bf00      	nop
 80090c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ca:	bc08      	pop	{r3}
 80090cc:	469e      	mov	lr, r3
 80090ce:	4770      	bx	lr

080090d0 <_fini>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	bf00      	nop
 80090d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d6:	bc08      	pop	{r3}
 80090d8:	469e      	mov	lr, r3
 80090da:	4770      	bx	lr
