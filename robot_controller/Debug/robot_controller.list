
robot_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050b0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005308  08005308  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005308  08005308  00015308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005310  08005310  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005318  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012eec  20000014  0800532c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012f00  0800532c  00022f00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000124d3  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000295a  00000000  00000000  00032517  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00034e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da0  00000000  00000000  00035d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002571a  00000000  00000000  00036ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ec3  00000000  00000000  0005c1ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f18de  00000000  00000000  0006d08d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015e96b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b40  00000000  00000000  0015e9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005278 	.word	0x08005278

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08005278 	.word	0x08005278

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <vPRINTTask>:
static void MX_GPIO_Init(void);
static void MX_LPUART1_UART_Init(void);
static void MX_USART1_UART_Init(void);


void vPRINTTask(void *pvParameters) {
 8000524:	b5b0      	push	{r4, r5, r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]

	uint8_t Test[] = "Hello World !!!\r\n";
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <vPRINTTask+0x30>)
 800052e:	f107 040c 	add.w	r4, r7, #12
 8000532:	461d      	mov	r5, r3
 8000534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000538:	682b      	ldr	r3, [r5, #0]
 800053a:	8023      	strh	r3, [r4, #0]
	for (;;) {

		 //Data to send
		HAL_UART_Transmit(&hlpuart1,Test,sizeof(Test),10);// Sending in normal mode
 800053c:	f107 010c 	add.w	r1, r7, #12
 8000540:	230a      	movs	r3, #10
 8000542:	2212      	movs	r2, #18
 8000544:	4804      	ldr	r0, [pc, #16]	; (8000558 <vPRINTTask+0x34>)
 8000546:	f001 fe45 	bl	80021d4 <HAL_UART_Transmit>
		vTaskDelay( 100 / portTICK_RATE_MS );
 800054a:	2064      	movs	r0, #100	; 0x64
 800054c:	f003 f9da 	bl	8003904 <vTaskDelay>
		HAL_UART_Transmit(&hlpuart1,Test,sizeof(Test),10);// Sending in normal mode
 8000550:	e7f4      	b.n	800053c <vPRINTTask+0x18>
 8000552:	bf00      	nop
 8000554:	08005290 	.word	0x08005290
 8000558:	20000030 	.word	0x20000030

0800055c <main>:

	vTaskDelete(NULL);
}


int main(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af02      	add	r7, sp, #8

	// Hardware configuration
    prvSetupHardware();
 8000562:	f000 f811 	bl	8000588 <prvSetupHardware>

    xTaskCreate( vPRINTTask, "Print_task", 100, NULL, 1, NULL );
 8000566:	2300      	movs	r3, #0
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2301      	movs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	2264      	movs	r2, #100	; 0x64
 8000572:	4903      	ldr	r1, [pc, #12]	; (8000580 <main+0x24>)
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <main+0x28>)
 8000576:	f003 f85b 	bl	8003630 <xTaskCreate>

	// Start the scheduler
	vTaskStartScheduler(); // should never return
 800057a:	f003 f9f7 	bl	800396c <vTaskStartScheduler>

	// Will only get here if there was not enough heap space

	while(1);
 800057e:	e7fe      	b.n	800057e <main+0x22>
 8000580:	080052a4 	.word	0x080052a4
 8000584:	08000525 	.word	0x08000525

08000588 <prvSetupHardware>:
	return 0;
}

static void prvSetupHardware(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	  HAL_Init();
 800058c:	f000 fa75 	bl	8000a7a <HAL_Init>
	  SystemClock_Config();
 8000590:	f000 f808 	bl	80005a4 <SystemClock_Config>
	  MX_GPIO_Init();
 8000594:	f000 f8e8 	bl	8000768 <MX_GPIO_Init>
	  MX_LPUART1_UART_Init();
 8000598:	f000 f850 	bl	800063c <MX_LPUART1_UART_Init>
	  MX_USART1_UART_Init();
 800059c:	f000 f898 	bl	80006d0 <MX_USART1_UART_Init>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0318 	add.w	r3, r7, #24
 80005ae:	2238      	movs	r2, #56	; 0x38
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fe58 	bl	8005268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fd84 	bl	80010d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d6:	2340      	movs	r3, #64	; 0x40
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005de:	2302      	movs	r3, #2
 80005e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005e2:	2304      	movs	r3, #4
 80005e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005e6:	2355      	movs	r3, #85	; 0x55
 80005e8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ee:	2302      	movs	r3, #2
 80005f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f2:	2302      	movs	r3, #2
 80005f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f6:	f107 0318 	add.w	r3, r7, #24
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fe1e 	bl	800123c <HAL_RCC_OscConfig>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000606:	f000 f91d 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060a:	230f      	movs	r3, #15
 800060c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800060e:	2303      	movs	r3, #3
 8000610:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2104      	movs	r1, #4
 8000622:	4618      	mov	r0, r3
 8000624:	f001 f91c 	bl	8001860 <HAL_RCC_ClockConfig>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800062e:	f000 f909 	bl	8000844 <Error_Handler>
  }
}
 8000632:	bf00      	nop
 8000634:	3750      	adds	r7, #80	; 0x50
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000640:	4b20      	ldr	r3, [pc, #128]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 8000642:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_LPUART1_UART_Init+0x8c>)
 8000644:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000646:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <MX_LPUART1_UART_Init+0x90>)
 800064a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800064c:	4b1d      	ldr	r3, [pc, #116]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000652:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 8000660:	220c      	movs	r2, #12
 8000662:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 8000678:	2200      	movs	r2, #0
 800067a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800067c:	4811      	ldr	r0, [pc, #68]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 800067e:	f001 fd59 	bl	8002134 <HAL_UART_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000688:	f000 f8dc 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800068c:	2100      	movs	r1, #0
 800068e:	480d      	ldr	r0, [pc, #52]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 8000690:	f002 fb82 	bl	8002d98 <HAL_UARTEx_SetTxFifoThreshold>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800069a:	f000 f8d3 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069e:	2100      	movs	r1, #0
 80006a0:	4808      	ldr	r0, [pc, #32]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 80006a2:	f002 fbb7 	bl	8002e14 <HAL_UARTEx_SetRxFifoThreshold>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80006ac:	f000 f8ca 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_LPUART1_UART_Init+0x88>)
 80006b2:	f002 fb38 	bl	8002d26 <HAL_UARTEx_DisableFifoMode>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80006bc:	f000 f8c2 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000030 	.word	0x20000030
 80006c8:	40008000 	.word	0x40008000
 80006cc:	00033324 	.word	0x00033324

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b22      	ldr	r3, [pc, #136]	; (8000760 <MX_USART1_UART_Init+0x90>)
 80006d6:	4a23      	ldr	r2, [pc, #140]	; (8000764 <MX_USART1_UART_Init+0x94>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_USART1_UART_Init+0x90>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_USART1_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <MX_USART1_UART_Init+0x90>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_USART1_UART_Init+0x90>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_USART1_UART_Init+0x90>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_USART1_UART_Init+0x90>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <MX_USART1_UART_Init+0x90>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <MX_USART1_UART_Init+0x90>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USART1_UART_Init+0x90>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <MX_USART1_UART_Init+0x90>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000718:	4811      	ldr	r0, [pc, #68]	; (8000760 <MX_USART1_UART_Init+0x90>)
 800071a:	f001 fd0b 	bl	8002134 <HAL_UART_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000724:	f000 f88e 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000728:	2100      	movs	r1, #0
 800072a:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_USART1_UART_Init+0x90>)
 800072c:	f002 fb34 	bl	8002d98 <HAL_UARTEx_SetTxFifoThreshold>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000736:	f000 f885 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073a:	2100      	movs	r1, #0
 800073c:	4808      	ldr	r0, [pc, #32]	; (8000760 <MX_USART1_UART_Init+0x90>)
 800073e:	f002 fb69 	bl	8002e14 <HAL_UARTEx_SetRxFifoThreshold>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000748:	f000 f87c 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	; (8000760 <MX_USART1_UART_Init+0x90>)
 800074e:	f002 faea 	bl	8002d26 <HAL_UARTEx_DisableFifoMode>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000758:	f000 f874 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000c4 	.word	0x200000c4
 8000764:	40013800 	.word	0x40013800

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077e:	4b2f      	ldr	r3, [pc, #188]	; (800083c <MX_GPIO_Init+0xd4>)
 8000780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000782:	4a2e      	ldr	r2, [pc, #184]	; (800083c <MX_GPIO_Init+0xd4>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <MX_GPIO_Init+0xd4>)
 800078c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <MX_GPIO_Init+0xd4>)
 8000798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079a:	4a28      	ldr	r2, [pc, #160]	; (800083c <MX_GPIO_Init+0xd4>)
 800079c:	f043 0320 	orr.w	r3, r3, #32
 80007a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007a2:	4b26      	ldr	r3, [pc, #152]	; (800083c <MX_GPIO_Init+0xd4>)
 80007a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a6:	f003 0320 	and.w	r3, r3, #32
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b23      	ldr	r3, [pc, #140]	; (800083c <MX_GPIO_Init+0xd4>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a22      	ldr	r2, [pc, #136]	; (800083c <MX_GPIO_Init+0xd4>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <MX_GPIO_Init+0xd4>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_GPIO_Init+0xd4>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a1c      	ldr	r2, [pc, #112]	; (800083c <MX_GPIO_Init+0xd4>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_GPIO_Init+0xd4>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2120      	movs	r1, #32
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f000 fc39 	bl	800105c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	480f      	ldr	r0, [pc, #60]	; (8000840 <MX_GPIO_Init+0xd8>)
 8000802:	f000 faa9 	bl	8000d58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000806:	2320      	movs	r3, #32
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4619      	mov	r1, r3
 800081c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000820:	f000 fa9a 	bl	8000d58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	2028      	movs	r0, #40	; 0x28
 800082a:	f000 fa60 	bl	8000cee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800082e:	2028      	movs	r0, #40	; 0x28
 8000830:	f000 fa77 	bl	8000d22 <HAL_NVIC_EnableIRQ>

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40021000 	.word	0x40021000
 8000840:	48000800 	.word	0x48000800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	e7fe      	b.n	800084c <Error_Handler+0x8>
	...

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6613      	str	r3, [r2, #96]	; 0x60
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6593      	str	r3, [r2, #88]	; 0x58
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000886:	f000 fcc9 	bl	800121c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b0a0      	sub	sp, #128	; 0x80
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b0:	f107 0318 	add.w	r3, r7, #24
 80008b4:	2254      	movs	r2, #84	; 0x54
 80008b6:	2100      	movs	r1, #0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f004 fcd5 	bl	8005268 <memset>
  if(huart->Instance==LPUART1)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a3d      	ldr	r2, [pc, #244]	; (80009b8 <HAL_UART_MspInit+0x120>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d137      	bne.n	8000938 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008c8:	2320      	movs	r3, #32
 80008ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	f107 0318 	add.w	r3, r7, #24
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 f9df 	bl	8001c98 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e0:	f7ff ffb0 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <HAL_UART_MspInit+0x124>)
 80008e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008e8:	4a34      	ldr	r2, [pc, #208]	; (80009bc <HAL_UART_MspInit+0x124>)
 80008ea:	f043 0301 	orr.w	r3, r3, #1
 80008ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008f0:	4b32      	ldr	r3, [pc, #200]	; (80009bc <HAL_UART_MspInit+0x124>)
 80008f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008f4:	f003 0301 	and.w	r3, r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <HAL_UART_MspInit+0x124>)
 80008fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000900:	4a2e      	ldr	r2, [pc, #184]	; (80009bc <HAL_UART_MspInit+0x124>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000908:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <HAL_UART_MspInit+0x124>)
 800090a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000914:	230c      	movs	r3, #12
 8000916:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000918:	2302      	movs	r3, #2
 800091a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000924:	230c      	movs	r3, #12
 8000926:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800092c:	4619      	mov	r1, r3
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f000 fa11 	bl	8000d58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000936:	e03a      	b.n	80009ae <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a20      	ldr	r2, [pc, #128]	; (80009c0 <HAL_UART_MspInit+0x128>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d135      	bne.n	80009ae <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000942:	2301      	movs	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	4618      	mov	r0, r3
 8000950:	f001 f9a2 	bl	8001c98 <HAL_RCCEx_PeriphCLKConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800095a:	f7ff ff73 	bl	8000844 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <HAL_UART_MspInit+0x124>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000962:	4a16      	ldr	r2, [pc, #88]	; (80009bc <HAL_UART_MspInit+0x124>)
 8000964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000968:	6613      	str	r3, [r2, #96]	; 0x60
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <HAL_UART_MspInit+0x124>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <HAL_UART_MspInit+0x124>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	4a10      	ldr	r2, [pc, #64]	; (80009bc <HAL_UART_MspInit+0x124>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <HAL_UART_MspInit+0x124>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800098e:	2330      	movs	r3, #48	; 0x30
 8000990:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800099e:	2307      	movs	r3, #7
 80009a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80009a6:	4619      	mov	r1, r3
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <HAL_UART_MspInit+0x12c>)
 80009aa:	f000 f9d5 	bl	8000d58 <HAL_GPIO_Init>
}
 80009ae:	bf00      	nop
 80009b0:	3780      	adds	r7, #128	; 0x80
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40008000 	.word	0x40008000
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40013800 	.word	0x40013800
 80009c4:	48000800 	.word	0x48000800

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009fc:	f000 fb46 	bl	800108c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a2c:	f7ff ffea 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a32:	490d      	ldr	r1, [pc, #52]	; (8000a68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <LoopForever+0xe>)
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a38:	e002      	b.n	8000a40 <LoopCopyDataInit>

08000a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3e:	3304      	adds	r3, #4

08000a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a44:	d3f9      	bcc.n	8000a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a48:	4c0a      	ldr	r4, [pc, #40]	; (8000a74 <LoopForever+0x16>)
  movs r3, #0
 8000a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a4c:	e001      	b.n	8000a52 <LoopFillZerobss>

08000a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a50:	3204      	adds	r2, #4

08000a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a54:	d3fb      	bcc.n	8000a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a56:	f004 fbd5 	bl	8005204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a5a:	f7ff fd7f 	bl	800055c <main>

08000a5e <LoopForever>:

LoopForever:
    b LoopForever
 8000a5e:	e7fe      	b.n	8000a5e <LoopForever>
  ldr   r0, =_estack
 8000a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a68:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000a6c:	08005318 	.word	0x08005318
  ldr r2, =_sbss
 8000a70:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000a74:	20012f00 	.word	0x20012f00

08000a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a78:	e7fe      	b.n	8000a78 <ADC1_2_IRQHandler>

08000a7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a80:	2300      	movs	r3, #0
 8000a82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 f927 	bl	8000cd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f80e 	bl	8000aac <HAL_InitTick>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d002      	beq.n	8000a9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	71fb      	strb	r3, [r7, #7]
 8000a9a:	e001      	b.n	8000aa0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a9c:	f7ff fed8 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000aa0:	79fb      	ldrb	r3, [r7, #7]

}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ab8:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <HAL_InitTick+0x68>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d022      	beq.n	8000b06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <HAL_InitTick+0x6c>)
 8000ac2:	681a      	ldr	r2, [r3, #0]
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_InitTick+0x68>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000acc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f000 f932 	bl	8000d3e <HAL_SYSTICK_Config>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d10f      	bne.n	8000b00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b0f      	cmp	r3, #15
 8000ae4:	d809      	bhi.n	8000afa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	6879      	ldr	r1, [r7, #4]
 8000aea:	f04f 30ff 	mov.w	r0, #4294967295
 8000aee:	f000 f8fe 	bl	8000cee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <HAL_InitTick+0x70>)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6013      	str	r3, [r2, #0]
 8000af8:	e007      	b.n	8000b0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	73fb      	strb	r3, [r7, #15]
 8000afe:	e004      	b.n	8000b0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	73fb      	strb	r3, [r7, #15]
 8000b04:	e001      	b.n	8000b0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b03      	ldr	r3, [pc, #12]	; (8000b34 <HAL_GetTick+0x14>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000158 	.word	0x20000158

08000b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4e:	68ba      	ldr	r2, [r7, #8]
 8000b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b54:	4013      	ands	r3, r2
 8000b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5c:	68bb      	ldr	r3, [r7, #8]
 8000b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x44>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00

08000b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b84:	4b04      	ldr	r3, [pc, #16]	; (8000b98 <__NVIC_GetPriorityGrouping+0x18>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	0a1b      	lsrs	r3, r3, #8
 8000b8a:	f003 0307 	and.w	r3, r3, #7
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	db0b      	blt.n	8000bc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	f003 021f 	and.w	r2, r3, #31
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <__NVIC_EnableIRQ+0x38>)
 8000bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bba:	095b      	lsrs	r3, r3, #5
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	e000e100 	.word	0xe000e100

08000bd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	6039      	str	r1, [r7, #0]
 8000be2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	db0a      	blt.n	8000c02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	490c      	ldr	r1, [pc, #48]	; (8000c24 <__NVIC_SetPriority+0x4c>)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	0112      	lsls	r2, r2, #4
 8000bf8:	b2d2      	uxtb	r2, r2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c00:	e00a      	b.n	8000c18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4908      	ldr	r1, [pc, #32]	; (8000c28 <__NVIC_SetPriority+0x50>)
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	f003 030f 	and.w	r3, r3, #15
 8000c0e:	3b04      	subs	r3, #4
 8000c10:	0112      	lsls	r2, r2, #4
 8000c12:	b2d2      	uxtb	r2, r2
 8000c14:	440b      	add	r3, r1
 8000c16:	761a      	strb	r2, [r3, #24]
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b089      	sub	sp, #36	; 0x24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	f1c3 0307 	rsb	r3, r3, #7
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	bf28      	it	cs
 8000c4a:	2304      	movcs	r3, #4
 8000c4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3304      	adds	r3, #4
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d902      	bls.n	8000c5c <NVIC_EncodePriority+0x30>
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3b03      	subs	r3, #3
 8000c5a:	e000      	b.n	8000c5e <NVIC_EncodePriority+0x32>
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c60:	f04f 32ff 	mov.w	r2, #4294967295
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	401a      	ands	r2, r3
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c74:	f04f 31ff 	mov.w	r1, #4294967295
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	43d9      	mvns	r1, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	4313      	orrs	r3, r2
         );
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3724      	adds	r7, #36	; 0x24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
	...

08000c94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca4:	d301      	bcc.n	8000caa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00f      	b.n	8000cca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000caa:	4a0a      	ldr	r2, [pc, #40]	; (8000cd4 <SysTick_Config+0x40>)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb2:	210f      	movs	r1, #15
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f7ff ff8e 	bl	8000bd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <SysTick_Config+0x40>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc2:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SysTick_Config+0x40>)
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	e000e010 	.word	0xe000e010

08000cd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ff29 	bl	8000b38 <__NVIC_SetPriorityGrouping>
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b086      	sub	sp, #24
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	60b9      	str	r1, [r7, #8]
 8000cf8:	607a      	str	r2, [r7, #4]
 8000cfa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cfc:	f7ff ff40 	bl	8000b80 <__NVIC_GetPriorityGrouping>
 8000d00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	68b9      	ldr	r1, [r7, #8]
 8000d06:	6978      	ldr	r0, [r7, #20]
 8000d08:	f7ff ff90 	bl	8000c2c <NVIC_EncodePriority>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d12:	4611      	mov	r1, r2
 8000d14:	4618      	mov	r0, r3
 8000d16:	f7ff ff5f 	bl	8000bd8 <__NVIC_SetPriority>
}
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b082      	sub	sp, #8
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff ff33 	bl	8000b9c <__NVIC_EnableIRQ>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ffa4 	bl	8000c94 <SysTick_Config>
 8000d4c:	4603      	mov	r3, r0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000d66:	e15a      	b.n	800101e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	fa01 f303 	lsl.w	r3, r1, r3
 8000d74:	4013      	ands	r3, r2
 8000d76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 814c 	beq.w	8001018 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d005      	beq.n	8000d98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d130      	bne.n	8000dfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	689b      	ldr	r3, [r3, #8]
 8000d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dce:	2201      	movs	r2, #1
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	091b      	lsrs	r3, r3, #4
 8000de4:	f003 0201 	and.w	r2, r3, #1
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	2b03      	cmp	r3, #3
 8000e04:	d017      	beq.n	8000e36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 0303 	and.w	r3, r3, #3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d123      	bne.n	8000e8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	08da      	lsrs	r2, r3, #3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3208      	adds	r2, #8
 8000e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	220f      	movs	r2, #15
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	691a      	ldr	r2, [r3, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f003 0307 	and.w	r3, r3, #7
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	08da      	lsrs	r2, r3, #3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3208      	adds	r2, #8
 8000e84:	6939      	ldr	r1, [r7, #16]
 8000e86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f003 0203 	and.w	r2, r3, #3
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 80a6 	beq.w	8001018 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ecc:	4b5b      	ldr	r3, [pc, #364]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ed0:	4a5a      	ldr	r2, [pc, #360]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8000ed8:	4b58      	ldr	r3, [pc, #352]	; (800103c <HAL_GPIO_Init+0x2e4>)
 8000eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ee4:	4a56      	ldr	r2, [pc, #344]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	089b      	lsrs	r3, r3, #2
 8000eea:	3302      	adds	r3, #2
 8000eec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	009b      	lsls	r3, r3, #2
 8000efa:	220f      	movs	r2, #15
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f0e:	d01f      	beq.n	8000f50 <HAL_GPIO_Init+0x1f8>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a4c      	ldr	r2, [pc, #304]	; (8001044 <HAL_GPIO_Init+0x2ec>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d019      	beq.n	8000f4c <HAL_GPIO_Init+0x1f4>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a4b      	ldr	r2, [pc, #300]	; (8001048 <HAL_GPIO_Init+0x2f0>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d013      	beq.n	8000f48 <HAL_GPIO_Init+0x1f0>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a4a      	ldr	r2, [pc, #296]	; (800104c <HAL_GPIO_Init+0x2f4>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d00d      	beq.n	8000f44 <HAL_GPIO_Init+0x1ec>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a49      	ldr	r2, [pc, #292]	; (8001050 <HAL_GPIO_Init+0x2f8>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d007      	beq.n	8000f40 <HAL_GPIO_Init+0x1e8>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a48      	ldr	r2, [pc, #288]	; (8001054 <HAL_GPIO_Init+0x2fc>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d101      	bne.n	8000f3c <HAL_GPIO_Init+0x1e4>
 8000f38:	2305      	movs	r3, #5
 8000f3a:	e00a      	b.n	8000f52 <HAL_GPIO_Init+0x1fa>
 8000f3c:	2306      	movs	r3, #6
 8000f3e:	e008      	b.n	8000f52 <HAL_GPIO_Init+0x1fa>
 8000f40:	2304      	movs	r3, #4
 8000f42:	e006      	b.n	8000f52 <HAL_GPIO_Init+0x1fa>
 8000f44:	2303      	movs	r3, #3
 8000f46:	e004      	b.n	8000f52 <HAL_GPIO_Init+0x1fa>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e002      	b.n	8000f52 <HAL_GPIO_Init+0x1fa>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <HAL_GPIO_Init+0x1fa>
 8000f50:	2300      	movs	r3, #0
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	f002 0203 	and.w	r2, r2, #3
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	4093      	lsls	r3, r2
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f62:	4937      	ldr	r1, [pc, #220]	; (8001040 <HAL_GPIO_Init+0x2e8>)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f70:	4b39      	ldr	r3, [pc, #228]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f94:	4a30      	ldr	r2, [pc, #192]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fbe:	4a26      	ldr	r2, [pc, #152]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <HAL_GPIO_Init+0x300>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001012:	4a11      	ldr	r2, [pc, #68]	; (8001058 <HAL_GPIO_Init+0x300>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	f47f ae9d 	bne.w	8000d68 <HAL_GPIO_Init+0x10>
  }
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	48000400 	.word	0x48000400
 8001048:	48000800 	.word	0x48000800
 800104c:	48000c00 	.word	0x48000c00
 8001050:	48001000 	.word	0x48001000
 8001054:	48001400 	.word	0x48001400
 8001058:	40010400 	.word	0x40010400

0800105c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001078:	e002      	b.n	8001080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001098:	695a      	ldr	r2, [r3, #20]
 800109a:	88fb      	ldrh	r3, [r7, #6]
 800109c:	4013      	ands	r3, r2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d006      	beq.n	80010b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010a4:	88fb      	ldrh	r3, [r7, #6]
 80010a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f806 	bl	80010bc <HAL_GPIO_EXTI_Callback>
  }
}
 80010b0:	bf00      	nop
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40010400 	.word	0x40010400

080010bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d141      	bne.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010e2:	4b4b      	ldr	r3, [pc, #300]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010ee:	d131      	bne.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010f0:	4b47      	ldr	r3, [pc, #284]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f6:	4a46      	ldr	r2, [pc, #280]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001100:	4b43      	ldr	r3, [pc, #268]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001108:	4a41      	ldr	r2, [pc, #260]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800110a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001110:	4b40      	ldr	r3, [pc, #256]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2232      	movs	r2, #50	; 0x32
 8001116:	fb02 f303 	mul.w	r3, r2, r3
 800111a:	4a3f      	ldr	r2, [pc, #252]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	0c9b      	lsrs	r3, r3, #18
 8001122:	3301      	adds	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001126:	e002      	b.n	800112e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3b01      	subs	r3, #1
 800112c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800112e:	4b38      	ldr	r3, [pc, #224]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800113a:	d102      	bne.n	8001142 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f2      	bne.n	8001128 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001142:	4b33      	ldr	r3, [pc, #204]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800114a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114e:	d158      	bne.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001150:	2303      	movs	r3, #3
 8001152:	e057      	b.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001154:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800115a:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001160:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001164:	e04d      	b.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800116c:	d141      	bne.n	80011f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800117a:	d131      	bne.n	80011e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800117c:	4b24      	ldr	r3, [pc, #144]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001188:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800118c:	4b20      	ldr	r3, [pc, #128]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001194:	4a1e      	ldr	r2, [pc, #120]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001196:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800119a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2232      	movs	r2, #50	; 0x32
 80011a2:	fb02 f303 	mul.w	r3, r2, r3
 80011a6:	4a1c      	ldr	r2, [pc, #112]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011a8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ac:	0c9b      	lsrs	r3, r3, #18
 80011ae:	3301      	adds	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b2:	e002      	b.n	80011ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011c6:	d102      	bne.n	80011ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d1f2      	bne.n	80011b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011da:	d112      	bne.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e011      	b.n	8001204 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011e0:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011e6:	4a0a      	ldr	r2, [pc, #40]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011f0:	e007      	b.n	8001202 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001200:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001202:	2300      	movs	r3, #0
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	40007000 	.word	0x40007000
 8001214:	20000000 	.word	0x20000000
 8001218:	431bde83 	.word	0x431bde83

0800121c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	4a04      	ldr	r2, [pc, #16]	; (8001238 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001226:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800122a:	6093      	str	r3, [r2, #8]
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40007000 	.word	0x40007000

0800123c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d101      	bne.n	800124e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e2fe      	b.n	800184c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	2b00      	cmp	r3, #0
 8001258:	d075      	beq.n	8001346 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800125a:	4b97      	ldr	r3, [pc, #604]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 030c 	and.w	r3, r3, #12
 8001262:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001264:	4b94      	ldr	r3, [pc, #592]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	f003 0303 	and.w	r3, r3, #3
 800126c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	2b0c      	cmp	r3, #12
 8001272:	d102      	bne.n	800127a <HAL_RCC_OscConfig+0x3e>
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d002      	beq.n	8001280 <HAL_RCC_OscConfig+0x44>
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	2b08      	cmp	r3, #8
 800127e:	d10b      	bne.n	8001298 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	4b8d      	ldr	r3, [pc, #564]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d05b      	beq.n	8001344 <HAL_RCC_OscConfig+0x108>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d157      	bne.n	8001344 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e2d9      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a0:	d106      	bne.n	80012b0 <HAL_RCC_OscConfig+0x74>
 80012a2:	4b85      	ldr	r3, [pc, #532]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	4a84      	ldr	r2, [pc, #528]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e01d      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b8:	d10c      	bne.n	80012d4 <HAL_RCC_OscConfig+0x98>
 80012ba:	4b7f      	ldr	r3, [pc, #508]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a7e      	ldr	r2, [pc, #504]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c4:	6013      	str	r3, [r2, #0]
 80012c6:	4b7c      	ldr	r3, [pc, #496]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a7b      	ldr	r2, [pc, #492]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	e00b      	b.n	80012ec <HAL_RCC_OscConfig+0xb0>
 80012d4:	4b78      	ldr	r3, [pc, #480]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a77      	ldr	r2, [pc, #476]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	4b75      	ldr	r3, [pc, #468]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a74      	ldr	r2, [pc, #464]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80012e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d013      	beq.n	800131c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc14 	bl	8000b20 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff fc10 	bl	8000b20 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e29e      	b.n	800184c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800130e:	4b6a      	ldr	r3, [pc, #424]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d0f0      	beq.n	80012fc <HAL_RCC_OscConfig+0xc0>
 800131a:	e014      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131c:	f7ff fc00 	bl	8000b20 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001324:	f7ff fbfc 	bl	8000b20 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b64      	cmp	r3, #100	; 0x64
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e28a      	b.n	800184c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001336:	4b60      	ldr	r3, [pc, #384]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0xe8>
 8001342:	e000      	b.n	8001346 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001344:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d075      	beq.n	800143e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001352:	4b59      	ldr	r3, [pc, #356]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800135c:	4b56      	ldr	r3, [pc, #344]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	2b0c      	cmp	r3, #12
 800136a:	d102      	bne.n	8001372 <HAL_RCC_OscConfig+0x136>
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d002      	beq.n	8001378 <HAL_RCC_OscConfig+0x13c>
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	2b04      	cmp	r3, #4
 8001376:	d11f      	bne.n	80013b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001378:	4b4f      	ldr	r3, [pc, #316]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001380:	2b00      	cmp	r3, #0
 8001382:	d005      	beq.n	8001390 <HAL_RCC_OscConfig+0x154>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e25d      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b49      	ldr	r3, [pc, #292]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	061b      	lsls	r3, r3, #24
 800139e:	4946      	ldr	r1, [pc, #280]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013a4:	4b45      	ldr	r3, [pc, #276]	; (80014bc <HAL_RCC_OscConfig+0x280>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fb7f 	bl	8000aac <HAL_InitTick>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d043      	beq.n	800143c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e249      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d023      	beq.n	8001408 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013c0:	4b3d      	ldr	r3, [pc, #244]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a3c      	ldr	r2, [pc, #240]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80013c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013cc:	f7ff fba8 	bl	8000b20 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff fba4 	bl	8000b20 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e232      	b.n	800184c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e6:	4b34      	ldr	r3, [pc, #208]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0f0      	beq.n	80013d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	061b      	lsls	r3, r3, #24
 8001400:	492d      	ldr	r1, [pc, #180]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
 8001406:	e01a      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001408:	4b2b      	ldr	r3, [pc, #172]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a2a      	ldr	r2, [pc, #168]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 800140e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001414:	f7ff fb84 	bl	8000b20 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800141c:	f7ff fb80 	bl	8000b20 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e20e      	b.n	800184c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800142e:	4b22      	ldr	r3, [pc, #136]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f0      	bne.n	800141c <HAL_RCC_OscConfig+0x1e0>
 800143a:	e000      	b.n	800143e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800143c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d041      	beq.n	80014ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01c      	beq.n	800148c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001454:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001458:	4a17      	ldr	r2, [pc, #92]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001462:	f7ff fb5d 	bl	8000b20 <HAL_GetTick>
 8001466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001468:	e008      	b.n	800147c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146a:	f7ff fb59 	bl	8000b20 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b02      	cmp	r3, #2
 8001476:	d901      	bls.n	800147c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001478:	2303      	movs	r3, #3
 800147a:	e1e7      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 800147e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d0ef      	beq.n	800146a <HAL_RCC_OscConfig+0x22e>
 800148a:	e020      	b.n	80014ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 800148e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001492:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <HAL_RCC_OscConfig+0x27c>)
 8001494:	f023 0301 	bic.w	r3, r3, #1
 8001498:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149c:	f7ff fb40 	bl	8000b20 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014a2:	e00d      	b.n	80014c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fb3c 	bl	8000b20 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d906      	bls.n	80014c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e1ca      	b.n	800184c <HAL_RCC_OscConfig+0x610>
 80014b6:	bf00      	nop
 80014b8:	40021000 	.word	0x40021000
 80014bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80014c0:	4b8c      	ldr	r3, [pc, #560]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80014c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ea      	bne.n	80014a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80a6 	beq.w	8001628 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014dc:	2300      	movs	r3, #0
 80014de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014e0:	4b84      	ldr	r3, [pc, #528]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80014e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d101      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2b4>
 80014ec:	2301      	movs	r3, #1
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x2b6>
 80014f0:	2300      	movs	r3, #0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00d      	beq.n	8001512 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b7f      	ldr	r3, [pc, #508]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a7e      	ldr	r2, [pc, #504]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6593      	str	r3, [r2, #88]	; 0x58
 8001502:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 8001504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800150e:	2301      	movs	r3, #1
 8001510:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001512:	4b79      	ldr	r3, [pc, #484]	; (80016f8 <HAL_RCC_OscConfig+0x4bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d118      	bne.n	8001550 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800151e:	4b76      	ldr	r3, [pc, #472]	; (80016f8 <HAL_RCC_OscConfig+0x4bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a75      	ldr	r2, [pc, #468]	; (80016f8 <HAL_RCC_OscConfig+0x4bc>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152a:	f7ff faf9 	bl	8000b20 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001532:	f7ff faf5 	bl	8000b20 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e183      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001544:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <HAL_RCC_OscConfig+0x4bc>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d108      	bne.n	800156a <HAL_RCC_OscConfig+0x32e>
 8001558:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 800155a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800155e:	4a65      	ldr	r2, [pc, #404]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001568:	e024      	b.n	80015b4 <HAL_RCC_OscConfig+0x378>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	2b05      	cmp	r3, #5
 8001570:	d110      	bne.n	8001594 <HAL_RCC_OscConfig+0x358>
 8001572:	4b60      	ldr	r3, [pc, #384]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 8001574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001578:	4a5e      	ldr	r2, [pc, #376]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 800157a:	f043 0304 	orr.w	r3, r3, #4
 800157e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001582:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 8001584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001588:	4a5a      	ldr	r2, [pc, #360]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001592:	e00f      	b.n	80015b4 <HAL_RCC_OscConfig+0x378>
 8001594:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 8001596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800159a:	4a56      	ldr	r2, [pc, #344]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 800159c:	f023 0301 	bic.w	r3, r3, #1
 80015a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015a4:	4b53      	ldr	r3, [pc, #332]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80015a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015aa:	4a52      	ldr	r2, [pc, #328]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d016      	beq.n	80015ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fab0 	bl	8000b20 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015c2:	e00a      	b.n	80015da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c4:	f7ff faac 	bl	8000b20 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e138      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015da:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80015dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e0:	f003 0302 	and.w	r3, r3, #2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0ed      	beq.n	80015c4 <HAL_RCC_OscConfig+0x388>
 80015e8:	e015      	b.n	8001616 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff fa99 	bl	8000b20 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fa95 	bl	8000b20 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e121      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 800160a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ed      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 800161e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001620:	4a34      	ldr	r2, [pc, #208]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 8001622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001626:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	2b00      	cmp	r3, #0
 8001632:	d03c      	beq.n	80016ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d01c      	beq.n	8001676 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800163c:	4b2d      	ldr	r3, [pc, #180]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 800163e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001642:	4a2c      	ldr	r2, [pc, #176]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fa68 	bl	8000b20 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001654:	f7ff fa64 	bl	8000b20 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e0f2      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001666:	4b23      	ldr	r3, [pc, #140]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 8001668:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0ef      	beq.n	8001654 <HAL_RCC_OscConfig+0x418>
 8001674:	e01b      	b.n	80016ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 8001678:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800167c:	4a1d      	ldr	r2, [pc, #116]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 800167e:	f023 0301 	bic.w	r3, r3, #1
 8001682:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001686:	f7ff fa4b 	bl	8000b20 <HAL_GetTick>
 800168a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800168c:	e008      	b.n	80016a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800168e:	f7ff fa47 	bl	8000b20 <HAL_GetTick>
 8001692:	4602      	mov	r2, r0
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b02      	cmp	r3, #2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e0d5      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80016a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1ef      	bne.n	800168e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80c9 	beq.w	800184a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	f000 8083 	beq.w	80017cc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d15e      	bne.n	800178c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_RCC_OscConfig+0x4b8>)
 80016d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016da:	f7ff fa21 	bl	8000b20 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e0:	e00c      	b.n	80016fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016e2:	f7ff fa1d 	bl	8000b20 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d905      	bls.n	80016fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e0ab      	b.n	800184c <HAL_RCC_OscConfig+0x610>
 80016f4:	40021000 	.word	0x40021000
 80016f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1ec      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001708:	4b52      	ldr	r3, [pc, #328]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 800170a:	68da      	ldr	r2, [r3, #12]
 800170c:	4b52      	ldr	r3, [pc, #328]	; (8001858 <HAL_RCC_OscConfig+0x61c>)
 800170e:	4013      	ands	r3, r2
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6a11      	ldr	r1, [r2, #32]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001718:	3a01      	subs	r2, #1
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	4311      	orrs	r1, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001722:	0212      	lsls	r2, r2, #8
 8001724:	4311      	orrs	r1, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800172a:	0852      	lsrs	r2, r2, #1
 800172c:	3a01      	subs	r2, #1
 800172e:	0552      	lsls	r2, r2, #21
 8001730:	4311      	orrs	r1, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001736:	0852      	lsrs	r2, r2, #1
 8001738:	3a01      	subs	r2, #1
 800173a:	0652      	lsls	r2, r2, #25
 800173c:	4311      	orrs	r1, r2
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001742:	06d2      	lsls	r2, r2, #27
 8001744:	430a      	orrs	r2, r1
 8001746:	4943      	ldr	r1, [pc, #268]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 8001748:	4313      	orrs	r3, r2
 800174a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800174c:	4b41      	ldr	r3, [pc, #260]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a40      	ldr	r2, [pc, #256]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 8001752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001756:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001758:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	4a3d      	ldr	r2, [pc, #244]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 800175e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001762:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001764:	f7ff f9dc 	bl	8000b20 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176c:	f7ff f9d8 	bl	8000b20 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e066      	b.n	800184c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800177e:	4b35      	ldr	r3, [pc, #212]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0f0      	beq.n	800176c <HAL_RCC_OscConfig+0x530>
 800178a:	e05e      	b.n	800184a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a30      	ldr	r2, [pc, #192]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 8001792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff f9c2 	bl	8000b20 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f9be 	bl	8000b20 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e04c      	b.n	800184c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80017be:	4b25      	ldr	r3, [pc, #148]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 80017c0:	68da      	ldr	r2, [r3, #12]
 80017c2:	4924      	ldr	r1, [pc, #144]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <HAL_RCC_OscConfig+0x620>)
 80017c6:	4013      	ands	r3, r2
 80017c8:	60cb      	str	r3, [r1, #12]
 80017ca:	e03e      	b.n	800184a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e039      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HAL_RCC_OscConfig+0x618>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f003 0203 	and.w	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d12c      	bne.n	8001846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f6:	3b01      	subs	r3, #1
 80017f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d123      	bne.n	8001846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d11b      	bne.n	8001846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001818:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800181a:	429a      	cmp	r2, r3
 800181c:	d113      	bne.n	8001846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d109      	bne.n	8001846 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800183c:	085b      	lsrs	r3, r3, #1
 800183e:	3b01      	subs	r3, #1
 8001840:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001842:	429a      	cmp	r2, r3
 8001844:	d001      	beq.n	800184a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	019f800c 	.word	0x019f800c
 800185c:	feeefffc 	.word	0xfeeefffc

08001860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e11e      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001878:	4b91      	ldr	r3, [pc, #580]	; (8001ac0 <HAL_RCC_ClockConfig+0x260>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	429a      	cmp	r2, r3
 8001884:	d910      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001886:	4b8e      	ldr	r3, [pc, #568]	; (8001ac0 <HAL_RCC_ClockConfig+0x260>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f023 020f 	bic.w	r2, r3, #15
 800188e:	498c      	ldr	r1, [pc, #560]	; (8001ac0 <HAL_RCC_ClockConfig+0x260>)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	4313      	orrs	r3, r2
 8001894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b8a      	ldr	r3, [pc, #552]	; (8001ac0 <HAL_RCC_ClockConfig+0x260>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d001      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e106      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d073      	beq.n	800199c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	2b03      	cmp	r3, #3
 80018ba:	d129      	bne.n	8001910 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018bc:	4b81      	ldr	r3, [pc, #516]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d101      	bne.n	80018cc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0f4      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80018cc:	f000 f99e 	bl	8001c0c <RCC_GetSysClockFreqFromPLLSource>
 80018d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4a7c      	ldr	r2, [pc, #496]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d93f      	bls.n	800195a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018da:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d033      	beq.n	800195a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d12f      	bne.n	800195a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018fa:	4b72      	ldr	r3, [pc, #456]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001902:	4a70      	ldr	r2, [pc, #448]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001908:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800190a:	2380      	movs	r3, #128	; 0x80
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e024      	b.n	800195a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d107      	bne.n	8001928 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001918:	4b6a      	ldr	r3, [pc, #424]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0c6      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001928:	4b66      	ldr	r3, [pc, #408]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0be      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001938:	f000 f8ce 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 800193c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4a61      	ldr	r2, [pc, #388]	; (8001ac8 <HAL_RCC_ClockConfig+0x268>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d909      	bls.n	800195a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001946:	4b5f      	ldr	r3, [pc, #380]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800194e:	4a5d      	ldr	r2, [pc, #372]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001954:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800195a:	4b5a      	ldr	r3, [pc, #360]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	f023 0203 	bic.w	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	4957      	ldr	r1, [pc, #348]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001968:	4313      	orrs	r3, r2
 800196a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800196c:	f7ff f8d8 	bl	8000b20 <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001972:	e00a      	b.n	800198a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001974:	f7ff f8d4 	bl	8000b20 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e095      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800198a:	4b4e      	ldr	r3, [pc, #312]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 020c 	and.w	r2, r3, #12
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	429a      	cmp	r2, r3
 800199a:	d1eb      	bne.n	8001974 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d023      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b4:	4b43      	ldr	r3, [pc, #268]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	4a42      	ldr	r2, [pc, #264]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80019ba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019be:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d007      	beq.n	80019dc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80019cc:	4b3d      	ldr	r3, [pc, #244]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80019d4:	4a3b      	ldr	r2, [pc, #236]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80019d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	4936      	ldr	r1, [pc, #216]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	608b      	str	r3, [r1, #8]
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	2b80      	cmp	r3, #128	; 0x80
 80019f4:	d105      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80019f6:	4b33      	ldr	r3, [pc, #204]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 80019fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a00:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a02:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_RCC_ClockConfig+0x260>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d21d      	bcs.n	8001a4c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a10:	4b2b      	ldr	r3, [pc, #172]	; (8001ac0 <HAL_RCC_ClockConfig+0x260>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 020f 	bic.w	r2, r3, #15
 8001a18:	4929      	ldr	r1, [pc, #164]	; (8001ac0 <HAL_RCC_ClockConfig+0x260>)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a20:	f7ff f87e 	bl	8000b20 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7ff f87a 	bl	8000b20 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e03b      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_RCC_ClockConfig+0x260>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1ed      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a58:	4b1a      	ldr	r3, [pc, #104]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	4917      	ldr	r1, [pc, #92]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d009      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	490f      	ldr	r1, [pc, #60]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a8a:	f000 f825 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_RCC_ClockConfig+0x264>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	091b      	lsrs	r3, r3, #4
 8001a96:	f003 030f 	and.w	r3, r3, #15
 8001a9a:	490c      	ldr	r1, [pc, #48]	; (8001acc <HAL_RCC_ClockConfig+0x26c>)
 8001a9c:	5ccb      	ldrb	r3, [r1, r3]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <HAL_RCC_ClockConfig+0x270>)
 8001aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_ClockConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fffc 	bl	8000aac <HAL_InitTick>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40022000 	.word	0x40022000
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	04c4b400 	.word	0x04c4b400
 8001acc:	080052c8 	.word	0x080052c8
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ade:	4b2c      	ldr	r3, [pc, #176]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b04      	cmp	r3, #4
 8001ae8:	d102      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e047      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001af0:	4b27      	ldr	r3, [pc, #156]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d102      	bne.n	8001b02 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001afc:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	e03e      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f003 030c 	and.w	r3, r3, #12
 8001b0a:	2b0c      	cmp	r3, #12
 8001b0c:	d136      	bne.n	8001b7c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3301      	adds	r3, #1
 8001b24:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b03      	cmp	r3, #3
 8001b2a:	d10c      	bne.n	8001b46 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b2c:	4a1a      	ldr	r2, [pc, #104]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b34:	4a16      	ldr	r2, [pc, #88]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b36:	68d2      	ldr	r2, [r2, #12]
 8001b38:	0a12      	lsrs	r2, r2, #8
 8001b3a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b3e:	fb02 f303 	mul.w	r3, r2, r3
 8001b42:	617b      	str	r3, [r7, #20]
      break;
 8001b44:	e00c      	b.n	8001b60 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b50:	68d2      	ldr	r2, [r2, #12]
 8001b52:	0a12      	lsrs	r2, r2, #8
 8001b54:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b58:	fb02 f303 	mul.w	r3, r2, r3
 8001b5c:	617b      	str	r3, [r7, #20]
      break;
 8001b5e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001b60:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	0e5b      	lsrs	r3, r3, #25
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	e001      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b80:	693b      	ldr	r3, [r7, #16]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	371c      	adds	r7, #28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	00f42400 	.word	0x00f42400
 8001b98:	016e3600 	.word	0x016e3600

08001b9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	; (8001bb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000000 	.word	0x20000000

08001bb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001bb8:	f7ff fff0 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	0a1b      	lsrs	r3, r3, #8
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	4904      	ldr	r1, [pc, #16]	; (8001bdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bca:	5ccb      	ldrb	r3, [r1, r3]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	080052d8 	.word	0x080052d8

08001be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001be4:	f7ff ffda 	bl	8001b9c <HAL_RCC_GetHCLKFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	0adb      	lsrs	r3, r3, #11
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	4904      	ldr	r1, [pc, #16]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021000 	.word	0x40021000
 8001c08:	080052d8 	.word	0x080052d8

08001c0c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c12:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f003 0303 	and.w	r3, r3, #3
 8001c1a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	091b      	lsrs	r3, r3, #4
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3301      	adds	r3, #1
 8001c28:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d10c      	bne.n	8001c4a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c30:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c3a:	68d2      	ldr	r2, [r2, #12]
 8001c3c:	0a12      	lsrs	r2, r2, #8
 8001c3e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	617b      	str	r3, [r7, #20]
    break;
 8001c48:	e00c      	b.n	8001c64 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4a0e      	ldr	r2, [pc, #56]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c54:	68d2      	ldr	r2, [r2, #12]
 8001c56:	0a12      	lsrs	r2, r2, #8
 8001c58:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c5c:	fb02 f303 	mul.w	r3, r2, r3
 8001c60:	617b      	str	r3, [r7, #20]
    break;
 8001c62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0e5b      	lsrs	r3, r3, #25
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	3301      	adds	r3, #1
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001c7e:	687b      	ldr	r3, [r7, #4]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	371c      	adds	r7, #28
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	016e3600 	.word	0x016e3600
 8001c94:	00f42400 	.word	0x00f42400

08001c98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f000 8098 	beq.w	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cba:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10d      	bne.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cc6:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cca:	4a3f      	ldr	r2, [pc, #252]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	60bb      	str	r3, [r7, #8]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ce2:	4b3a      	ldr	r3, [pc, #232]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a39      	ldr	r2, [pc, #228]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cee:	f7fe ff17 	bl	8000b20 <HAL_GetTick>
 8001cf2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cf4:	e009      	b.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf6:	f7fe ff13 	bl	8000b20 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d902      	bls.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	74fb      	strb	r3, [r7, #19]
        break;
 8001d08:	e005      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d0a:	4b30      	ldr	r3, [pc, #192]	; (8001dcc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0ef      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001d16:	7cfb      	ldrb	r3, [r7, #19]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d159      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d26:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d01e      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d019      	beq.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d38:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d44:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d54:	4b1c      	ldr	r3, [pc, #112]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d64:	4a18      	ldr	r2, [pc, #96]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d016      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7fe fed3 	bl	8000b20 <HAL_GetTick>
 8001d7a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d7c:	e00b      	b.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d7e:	f7fe fecf 	bl	8000b20 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d902      	bls.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	74fb      	strb	r3, [r7, #19]
            break;
 8001d94:	e006      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0ec      	beq.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001da4:	7cfb      	ldrb	r3, [r7, #19]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10b      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001daa:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db8:	4903      	ldr	r1, [pc, #12]	; (8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001dc0:	e008      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dc2:	7cfb      	ldrb	r3, [r7, #19]
 8001dc4:	74bb      	strb	r3, [r7, #18]
 8001dc6:	e005      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dd4:	7c7b      	ldrb	r3, [r7, #17]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d105      	bne.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dda:	4ba7      	ldr	r3, [pc, #668]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dde:	4aa6      	ldr	r2, [pc, #664]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001de4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00a      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001df2:	4ba1      	ldr	r3, [pc, #644]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df8:	f023 0203 	bic.w	r2, r3, #3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	499d      	ldr	r1, [pc, #628]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00a      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e14:	4b98      	ldr	r3, [pc, #608]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e1a:	f023 020c 	bic.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	4995      	ldr	r1, [pc, #596]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e24:	4313      	orrs	r3, r2
 8001e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e36:	4b90      	ldr	r3, [pc, #576]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	498c      	ldr	r1, [pc, #560]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00a      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e58:	4b87      	ldr	r3, [pc, #540]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	4984      	ldr	r1, [pc, #528]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0310 	and.w	r3, r3, #16
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00a      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e7a:	4b7f      	ldr	r3, [pc, #508]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	695b      	ldr	r3, [r3, #20]
 8001e88:	497b      	ldr	r1, [pc, #492]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d00a      	beq.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e9c:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	4973      	ldr	r1, [pc, #460]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eac:	4313      	orrs	r3, r2
 8001eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ebe:	4b6e      	ldr	r3, [pc, #440]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69db      	ldr	r3, [r3, #28]
 8001ecc:	496a      	ldr	r1, [pc, #424]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00a      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ee0:	4b65      	ldr	r3, [pc, #404]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ee6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a1b      	ldr	r3, [r3, #32]
 8001eee:	4962      	ldr	r1, [pc, #392]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00a      	beq.n	8001f18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f02:	4b5d      	ldr	r3, [pc, #372]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	4959      	ldr	r1, [pc, #356]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00a      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f24:	4b54      	ldr	r3, [pc, #336]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001f2a:	f023 0203 	bic.w	r2, r3, #3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	4951      	ldr	r1, [pc, #324]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f46:	4b4c      	ldr	r3, [pc, #304]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	4948      	ldr	r1, [pc, #288]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d015      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f68:	4b43      	ldr	r3, [pc, #268]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	4940      	ldr	r1, [pc, #256]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f86:	d105      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f88:	4b3b      	ldr	r3, [pc, #236]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a3a      	ldr	r2, [pc, #232]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f92:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d015      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fa0:	4b35      	ldr	r3, [pc, #212]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fae:	4932      	ldr	r1, [pc, #200]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fbe:	d105      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a2c      	ldr	r2, [pc, #176]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d015      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe6:	4924      	ldr	r1, [pc, #144]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ff6:	d105      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002002:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d015      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002010:	4b19      	ldr	r3, [pc, #100]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201e:	4916      	ldr	r1, [pc, #88]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800202e:	d105      	bne.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002036:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800203a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d019      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002066:	d109      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a02      	ldr	r2, [pc, #8]	; (8002078 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002072:	60d3      	str	r3, [r2, #12]
 8002074:	e002      	b.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002076:	bf00      	nop
 8002078:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d015      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002088:	4b29      	ldr	r3, [pc, #164]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800208e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	4926      	ldr	r1, [pc, #152]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020a6:	d105      	bne.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4a20      	ldr	r2, [pc, #128]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ce:	4918      	ldr	r1, [pc, #96]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020de:	d105      	bne.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4a12      	ldr	r2, [pc, #72]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ea:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80020f8:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80020fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002108:	4313      	orrs	r3, r2
 800210a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002112:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002116:	d105      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800211e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002122:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002124:	7cbb      	ldrb	r3, [r7, #18]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000

08002134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e042      	b.n	80021cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	2b00      	cmp	r3, #0
 800214e:	d106      	bne.n	800215e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fe fb9d 	bl	8000898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2224      	movs	r2, #36	; 0x24
 8002162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f000 fbb2 	bl	80028e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f8b3 	bl	80022f0 <UART_SetConfig>
 800218a:	4603      	mov	r3, r0
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e01b      	b.n	80021cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80021a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80021b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fc31 	bl	8002a2c <UART_CheckIdleState>
 80021ca:	4603      	mov	r3, r0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af02      	add	r7, sp, #8
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	d17b      	bne.n	80022e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_UART_Transmit+0x26>
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e074      	b.n	80022e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2221      	movs	r2, #33	; 0x21
 800220a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800220e:	f7fe fc87 	bl	8000b20 <HAL_GetTick>
 8002212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	88fa      	ldrh	r2, [r7, #6]
 8002218:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800222c:	d108      	bne.n	8002240 <HAL_UART_Transmit+0x6c>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d104      	bne.n	8002240 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	61bb      	str	r3, [r7, #24]
 800223e:	e003      	b.n	8002248 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002248:	e030      	b.n	80022ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2200      	movs	r2, #0
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 fc93 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e03d      	b.n	80022e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10b      	bne.n	800228a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002280:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	3302      	adds	r3, #2
 8002286:	61bb      	str	r3, [r7, #24]
 8002288:	e007      	b.n	800229a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3301      	adds	r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1c8      	bne.n	800224a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2200      	movs	r2, #0
 80022c0:	2140      	movs	r1, #64	; 0x40
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 fc5c 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d005      	beq.n	80022da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e006      	b.n	80022e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2220      	movs	r2, #32
 80022de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	e000      	b.n	80022e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80022e6:	2302      	movs	r3, #2
  }
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3720      	adds	r7, #32
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f4:	b08c      	sub	sp, #48	; 0x30
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	431a      	orrs	r2, r3
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	431a      	orrs	r2, r3
 8002310:	697b      	ldr	r3, [r7, #20]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	4313      	orrs	r3, r2
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4baa      	ldr	r3, [pc, #680]	; (80025c8 <UART_SetConfig+0x2d8>)
 8002320:	4013      	ands	r3, r2
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002328:	430b      	orrs	r3, r1
 800232a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a9f      	ldr	r2, [pc, #636]	; (80025cc <UART_SetConfig+0x2dc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d004      	beq.n	800235c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002358:	4313      	orrs	r3, r2
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002366:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	6812      	ldr	r2, [r2, #0]
 800236e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002370:	430b      	orrs	r3, r1
 8002372:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	f023 010f 	bic.w	r1, r3, #15
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a90      	ldr	r2, [pc, #576]	; (80025d0 <UART_SetConfig+0x2e0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d125      	bne.n	80023e0 <UART_SetConfig+0xf0>
 8002394:	4b8f      	ldr	r3, [pc, #572]	; (80025d4 <UART_SetConfig+0x2e4>)
 8002396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d81a      	bhi.n	80023d8 <UART_SetConfig+0xe8>
 80023a2:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <UART_SetConfig+0xb8>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023b9 	.word	0x080023b9
 80023ac:	080023c9 	.word	0x080023c9
 80023b0:	080023c1 	.word	0x080023c1
 80023b4:	080023d1 	.word	0x080023d1
 80023b8:	2301      	movs	r3, #1
 80023ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023be:	e116      	b.n	80025ee <UART_SetConfig+0x2fe>
 80023c0:	2302      	movs	r3, #2
 80023c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023c6:	e112      	b.n	80025ee <UART_SetConfig+0x2fe>
 80023c8:	2304      	movs	r3, #4
 80023ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023ce:	e10e      	b.n	80025ee <UART_SetConfig+0x2fe>
 80023d0:	2308      	movs	r3, #8
 80023d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023d6:	e10a      	b.n	80025ee <UART_SetConfig+0x2fe>
 80023d8:	2310      	movs	r3, #16
 80023da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023de:	e106      	b.n	80025ee <UART_SetConfig+0x2fe>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a7c      	ldr	r2, [pc, #496]	; (80025d8 <UART_SetConfig+0x2e8>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d138      	bne.n	800245c <UART_SetConfig+0x16c>
 80023ea:	4b7a      	ldr	r3, [pc, #488]	; (80025d4 <UART_SetConfig+0x2e4>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d82d      	bhi.n	8002454 <UART_SetConfig+0x164>
 80023f8:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <UART_SetConfig+0x110>)
 80023fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fe:	bf00      	nop
 8002400:	08002435 	.word	0x08002435
 8002404:	08002455 	.word	0x08002455
 8002408:	08002455 	.word	0x08002455
 800240c:	08002455 	.word	0x08002455
 8002410:	08002445 	.word	0x08002445
 8002414:	08002455 	.word	0x08002455
 8002418:	08002455 	.word	0x08002455
 800241c:	08002455 	.word	0x08002455
 8002420:	0800243d 	.word	0x0800243d
 8002424:	08002455 	.word	0x08002455
 8002428:	08002455 	.word	0x08002455
 800242c:	08002455 	.word	0x08002455
 8002430:	0800244d 	.word	0x0800244d
 8002434:	2300      	movs	r3, #0
 8002436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800243a:	e0d8      	b.n	80025ee <UART_SetConfig+0x2fe>
 800243c:	2302      	movs	r3, #2
 800243e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002442:	e0d4      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002444:	2304      	movs	r3, #4
 8002446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800244a:	e0d0      	b.n	80025ee <UART_SetConfig+0x2fe>
 800244c:	2308      	movs	r3, #8
 800244e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002452:	e0cc      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002454:	2310      	movs	r3, #16
 8002456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800245a:	e0c8      	b.n	80025ee <UART_SetConfig+0x2fe>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a5e      	ldr	r2, [pc, #376]	; (80025dc <UART_SetConfig+0x2ec>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d125      	bne.n	80024b2 <UART_SetConfig+0x1c2>
 8002466:	4b5b      	ldr	r3, [pc, #364]	; (80025d4 <UART_SetConfig+0x2e4>)
 8002468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002470:	2b30      	cmp	r3, #48	; 0x30
 8002472:	d016      	beq.n	80024a2 <UART_SetConfig+0x1b2>
 8002474:	2b30      	cmp	r3, #48	; 0x30
 8002476:	d818      	bhi.n	80024aa <UART_SetConfig+0x1ba>
 8002478:	2b20      	cmp	r3, #32
 800247a:	d00a      	beq.n	8002492 <UART_SetConfig+0x1a2>
 800247c:	2b20      	cmp	r3, #32
 800247e:	d814      	bhi.n	80024aa <UART_SetConfig+0x1ba>
 8002480:	2b00      	cmp	r3, #0
 8002482:	d002      	beq.n	800248a <UART_SetConfig+0x19a>
 8002484:	2b10      	cmp	r3, #16
 8002486:	d008      	beq.n	800249a <UART_SetConfig+0x1aa>
 8002488:	e00f      	b.n	80024aa <UART_SetConfig+0x1ba>
 800248a:	2300      	movs	r3, #0
 800248c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002490:	e0ad      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002492:	2302      	movs	r3, #2
 8002494:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002498:	e0a9      	b.n	80025ee <UART_SetConfig+0x2fe>
 800249a:	2304      	movs	r3, #4
 800249c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024a0:	e0a5      	b.n	80025ee <UART_SetConfig+0x2fe>
 80024a2:	2308      	movs	r3, #8
 80024a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024a8:	e0a1      	b.n	80025ee <UART_SetConfig+0x2fe>
 80024aa:	2310      	movs	r3, #16
 80024ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024b0:	e09d      	b.n	80025ee <UART_SetConfig+0x2fe>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a4a      	ldr	r2, [pc, #296]	; (80025e0 <UART_SetConfig+0x2f0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d125      	bne.n	8002508 <UART_SetConfig+0x218>
 80024bc:	4b45      	ldr	r3, [pc, #276]	; (80025d4 <UART_SetConfig+0x2e4>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80024c6:	2bc0      	cmp	r3, #192	; 0xc0
 80024c8:	d016      	beq.n	80024f8 <UART_SetConfig+0x208>
 80024ca:	2bc0      	cmp	r3, #192	; 0xc0
 80024cc:	d818      	bhi.n	8002500 <UART_SetConfig+0x210>
 80024ce:	2b80      	cmp	r3, #128	; 0x80
 80024d0:	d00a      	beq.n	80024e8 <UART_SetConfig+0x1f8>
 80024d2:	2b80      	cmp	r3, #128	; 0x80
 80024d4:	d814      	bhi.n	8002500 <UART_SetConfig+0x210>
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d002      	beq.n	80024e0 <UART_SetConfig+0x1f0>
 80024da:	2b40      	cmp	r3, #64	; 0x40
 80024dc:	d008      	beq.n	80024f0 <UART_SetConfig+0x200>
 80024de:	e00f      	b.n	8002500 <UART_SetConfig+0x210>
 80024e0:	2300      	movs	r3, #0
 80024e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024e6:	e082      	b.n	80025ee <UART_SetConfig+0x2fe>
 80024e8:	2302      	movs	r3, #2
 80024ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024ee:	e07e      	b.n	80025ee <UART_SetConfig+0x2fe>
 80024f0:	2304      	movs	r3, #4
 80024f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024f6:	e07a      	b.n	80025ee <UART_SetConfig+0x2fe>
 80024f8:	2308      	movs	r3, #8
 80024fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80024fe:	e076      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002500:	2310      	movs	r3, #16
 8002502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002506:	e072      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a35      	ldr	r2, [pc, #212]	; (80025e4 <UART_SetConfig+0x2f4>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d12a      	bne.n	8002568 <UART_SetConfig+0x278>
 8002512:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <UART_SetConfig+0x2e4>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002518:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800251c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002520:	d01a      	beq.n	8002558 <UART_SetConfig+0x268>
 8002522:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002526:	d81b      	bhi.n	8002560 <UART_SetConfig+0x270>
 8002528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800252c:	d00c      	beq.n	8002548 <UART_SetConfig+0x258>
 800252e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002532:	d815      	bhi.n	8002560 <UART_SetConfig+0x270>
 8002534:	2b00      	cmp	r3, #0
 8002536:	d003      	beq.n	8002540 <UART_SetConfig+0x250>
 8002538:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800253c:	d008      	beq.n	8002550 <UART_SetConfig+0x260>
 800253e:	e00f      	b.n	8002560 <UART_SetConfig+0x270>
 8002540:	2300      	movs	r3, #0
 8002542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002546:	e052      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002548:	2302      	movs	r3, #2
 800254a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800254e:	e04e      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002550:	2304      	movs	r3, #4
 8002552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002556:	e04a      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002558:	2308      	movs	r3, #8
 800255a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800255e:	e046      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002560:	2310      	movs	r3, #16
 8002562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002566:	e042      	b.n	80025ee <UART_SetConfig+0x2fe>
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a17      	ldr	r2, [pc, #92]	; (80025cc <UART_SetConfig+0x2dc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d13a      	bne.n	80025e8 <UART_SetConfig+0x2f8>
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <UART_SetConfig+0x2e4>)
 8002574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002578:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800257c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002580:	d01a      	beq.n	80025b8 <UART_SetConfig+0x2c8>
 8002582:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002586:	d81b      	bhi.n	80025c0 <UART_SetConfig+0x2d0>
 8002588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800258c:	d00c      	beq.n	80025a8 <UART_SetConfig+0x2b8>
 800258e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002592:	d815      	bhi.n	80025c0 <UART_SetConfig+0x2d0>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <UART_SetConfig+0x2b0>
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800259c:	d008      	beq.n	80025b0 <UART_SetConfig+0x2c0>
 800259e:	e00f      	b.n	80025c0 <UART_SetConfig+0x2d0>
 80025a0:	2300      	movs	r3, #0
 80025a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025a6:	e022      	b.n	80025ee <UART_SetConfig+0x2fe>
 80025a8:	2302      	movs	r3, #2
 80025aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025ae:	e01e      	b.n	80025ee <UART_SetConfig+0x2fe>
 80025b0:	2304      	movs	r3, #4
 80025b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025b6:	e01a      	b.n	80025ee <UART_SetConfig+0x2fe>
 80025b8:	2308      	movs	r3, #8
 80025ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025be:	e016      	b.n	80025ee <UART_SetConfig+0x2fe>
 80025c0:	2310      	movs	r3, #16
 80025c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80025c6:	e012      	b.n	80025ee <UART_SetConfig+0x2fe>
 80025c8:	cfff69f3 	.word	0xcfff69f3
 80025cc:	40008000 	.word	0x40008000
 80025d0:	40013800 	.word	0x40013800
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40004400 	.word	0x40004400
 80025dc:	40004800 	.word	0x40004800
 80025e0:	40004c00 	.word	0x40004c00
 80025e4:	40005000 	.word	0x40005000
 80025e8:	2310      	movs	r3, #16
 80025ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4aae      	ldr	r2, [pc, #696]	; (80028ac <UART_SetConfig+0x5bc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	f040 8097 	bne.w	8002728 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d823      	bhi.n	800264a <UART_SetConfig+0x35a>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <UART_SetConfig+0x318>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	0800262d 	.word	0x0800262d
 800260c:	0800264b 	.word	0x0800264b
 8002610:	08002635 	.word	0x08002635
 8002614:	0800264b 	.word	0x0800264b
 8002618:	0800263b 	.word	0x0800263b
 800261c:	0800264b 	.word	0x0800264b
 8002620:	0800264b 	.word	0x0800264b
 8002624:	0800264b 	.word	0x0800264b
 8002628:	08002643 	.word	0x08002643
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800262c:	f7ff fac2 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8002630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002632:	e010      	b.n	8002656 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002634:	4b9e      	ldr	r3, [pc, #632]	; (80028b0 <UART_SetConfig+0x5c0>)
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002638:	e00d      	b.n	8002656 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800263a:	f7ff fa4d 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 800263e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002640:	e009      	b.n	8002656 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002648:	e005      	b.n	8002656 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002654:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8130 	beq.w	80028be <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	4a94      	ldr	r2, [pc, #592]	; (80028b4 <UART_SetConfig+0x5c4>)
 8002664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002668:	461a      	mov	r2, r3
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002670:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	429a      	cmp	r2, r3
 8002680:	d305      	bcc.n	800268e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	429a      	cmp	r2, r3
 800268c:	d903      	bls.n	8002696 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002694:	e113      	b.n	80028be <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	2200      	movs	r2, #0
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	60fa      	str	r2, [r7, #12]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	4a84      	ldr	r2, [pc, #528]	; (80028b4 <UART_SetConfig+0x5c4>)
 80026a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2200      	movs	r2, #0
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	607a      	str	r2, [r7, #4]
 80026b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80026b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026b8:	f7fd fdb2 	bl	8000220 <__aeabi_uldivmod>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	020b      	lsls	r3, r1, #8
 80026ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80026d2:	0202      	lsls	r2, r0, #8
 80026d4:	6979      	ldr	r1, [r7, #20]
 80026d6:	6849      	ldr	r1, [r1, #4]
 80026d8:	0849      	lsrs	r1, r1, #1
 80026da:	2000      	movs	r0, #0
 80026dc:	460c      	mov	r4, r1
 80026de:	4605      	mov	r5, r0
 80026e0:	eb12 0804 	adds.w	r8, r2, r4
 80026e4:	eb43 0905 	adc.w	r9, r3, r5
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	469a      	mov	sl, r3
 80026f0:	4693      	mov	fp, r2
 80026f2:	4652      	mov	r2, sl
 80026f4:	465b      	mov	r3, fp
 80026f6:	4640      	mov	r0, r8
 80026f8:	4649      	mov	r1, r9
 80026fa:	f7fd fd91 	bl	8000220 <__aeabi_uldivmod>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4613      	mov	r3, r2
 8002704:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800270c:	d308      	bcc.n	8002720 <UART_SetConfig+0x430>
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002714:	d204      	bcs.n	8002720 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6a3a      	ldr	r2, [r7, #32]
 800271c:	60da      	str	r2, [r3, #12]
 800271e:	e0ce      	b.n	80028be <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002726:	e0ca      	b.n	80028be <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002730:	d166      	bne.n	8002800 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002732:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002736:	2b08      	cmp	r3, #8
 8002738:	d827      	bhi.n	800278a <UART_SetConfig+0x49a>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <UART_SetConfig+0x450>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002765 	.word	0x08002765
 8002744:	0800276d 	.word	0x0800276d
 8002748:	08002775 	.word	0x08002775
 800274c:	0800278b 	.word	0x0800278b
 8002750:	0800277b 	.word	0x0800277b
 8002754:	0800278b 	.word	0x0800278b
 8002758:	0800278b 	.word	0x0800278b
 800275c:	0800278b 	.word	0x0800278b
 8002760:	08002783 	.word	0x08002783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002764:	f7ff fa26 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800276a:	e014      	b.n	8002796 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800276c:	f7ff fa38 	bl	8001be0 <HAL_RCC_GetPCLK2Freq>
 8002770:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002772:	e010      	b.n	8002796 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002774:	4b4e      	ldr	r3, [pc, #312]	; (80028b0 <UART_SetConfig+0x5c0>)
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002778:	e00d      	b.n	8002796 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800277a:	f7ff f9ad 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 800277e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002780:	e009      	b.n	8002796 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002788:	e005      	b.n	8002796 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002794:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8090 	beq.w	80028be <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a2:	4a44      	ldr	r2, [pc, #272]	; (80028b4 <UART_SetConfig+0x5c4>)
 80027a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027a8:	461a      	mov	r2, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80027b0:	005a      	lsls	r2, r3, #1
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	441a      	add	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	2b0f      	cmp	r3, #15
 80027c8:	d916      	bls.n	80027f8 <UART_SetConfig+0x508>
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027d0:	d212      	bcs.n	80027f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	f023 030f 	bic.w	r3, r3, #15
 80027da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	8bfb      	ldrh	r3, [r7, #30]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	8bfa      	ldrh	r2, [r7, #30]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	e062      	b.n	80028be <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80027fe:	e05e      	b.n	80028be <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002804:	2b08      	cmp	r3, #8
 8002806:	d828      	bhi.n	800285a <UART_SetConfig+0x56a>
 8002808:	a201      	add	r2, pc, #4	; (adr r2, 8002810 <UART_SetConfig+0x520>)
 800280a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280e:	bf00      	nop
 8002810:	08002835 	.word	0x08002835
 8002814:	0800283d 	.word	0x0800283d
 8002818:	08002845 	.word	0x08002845
 800281c:	0800285b 	.word	0x0800285b
 8002820:	0800284b 	.word	0x0800284b
 8002824:	0800285b 	.word	0x0800285b
 8002828:	0800285b 	.word	0x0800285b
 800282c:	0800285b 	.word	0x0800285b
 8002830:	08002853 	.word	0x08002853
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002834:	f7ff f9be 	bl	8001bb4 <HAL_RCC_GetPCLK1Freq>
 8002838:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800283a:	e014      	b.n	8002866 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800283c:	f7ff f9d0 	bl	8001be0 <HAL_RCC_GetPCLK2Freq>
 8002840:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002842:	e010      	b.n	8002866 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002844:	4b1a      	ldr	r3, [pc, #104]	; (80028b0 <UART_SetConfig+0x5c0>)
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002848:	e00d      	b.n	8002866 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800284a:	f7ff f945 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 800284e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002850:	e009      	b.n	8002866 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002852:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002858:	e005      	b.n	8002866 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002864:	bf00      	nop
    }

    if (pclk != 0U)
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	2b00      	cmp	r3, #0
 800286a:	d028      	beq.n	80028be <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <UART_SetConfig+0x5c4>)
 8002872:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002876:	461a      	mov	r2, r3
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	fbb3 f2f2 	udiv	r2, r3, r2
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	085b      	lsrs	r3, r3, #1
 8002884:	441a      	add	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	fbb2 f3f3 	udiv	r3, r2, r3
 800288e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	2b0f      	cmp	r3, #15
 8002894:	d910      	bls.n	80028b8 <UART_SetConfig+0x5c8>
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289c:	d20c      	bcs.n	80028b8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	e009      	b.n	80028be <UART_SetConfig+0x5ce>
 80028aa:	bf00      	nop
 80028ac:	40008000 	.word	0x40008000
 80028b0:	00f42400 	.word	0x00f42400
 80028b4:	080052e0 	.word	0x080052e0
      }
      else
      {
        ret = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2200      	movs	r2, #0
 80028d2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2200      	movs	r2, #0
 80028d8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80028da:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3730      	adds	r7, #48	; 0x30
 80028e2:	46bd      	mov	sp, r7
 80028e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	430a      	orrs	r2, r1
 8002954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d01a      	beq.n	80029fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029e6:	d10a      	bne.n	80029fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	430a      	orrs	r2, r1
 80029fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	605a      	str	r2, [r3, #4]
  }
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b098      	sub	sp, #96	; 0x60
 8002a30:	af02      	add	r7, sp, #8
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a3c:	f7fe f870 	bl	8000b20 <HAL_GetTick>
 8002a40:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d12f      	bne.n	8002ab0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f88e 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d022      	beq.n	8002ab0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a72:	e853 3f00 	ldrex	r3, [r3]
 8002a76:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a7e:	653b      	str	r3, [r7, #80]	; 0x50
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	461a      	mov	r2, r3
 8002a86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a88:	647b      	str	r3, [r7, #68]	; 0x44
 8002a8a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e6      	bne.n	8002a6a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e063      	b.n	8002b78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d149      	bne.n	8002b52 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002abe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f000 f857 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d03c      	beq.n	8002b52 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	e853 3f00 	ldrex	r3, [r3]
 8002ae4:	623b      	str	r3, [r7, #32]
   return(result);
 8002ae6:	6a3b      	ldr	r3, [r7, #32]
 8002ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002aec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002af6:	633b      	str	r3, [r7, #48]	; 0x30
 8002af8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afe:	e841 2300 	strex	r3, r2, [r1]
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1e6      	bne.n	8002ad8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3308      	adds	r3, #8
 8002b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	e853 3f00 	ldrex	r3, [r3]
 8002b18:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f023 0301 	bic.w	r3, r3, #1
 8002b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3308      	adds	r3, #8
 8002b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b2a:	61fa      	str	r2, [r7, #28]
 8002b2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2e:	69b9      	ldr	r1, [r7, #24]
 8002b30:	69fa      	ldr	r2, [r7, #28]
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	617b      	str	r3, [r7, #20]
   return(result);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1e5      	bne.n	8002b0a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e012      	b.n	8002b78 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3758      	adds	r7, #88	; 0x58
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b90:	e04f      	b.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d04b      	beq.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b9a:	f7fd ffc1 	bl	8000b20 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d302      	bcc.n	8002bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e04e      	b.n	8002c52 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d037      	beq.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b80      	cmp	r3, #128	; 0x80
 8002bc6:	d034      	beq.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb2>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b40      	cmp	r3, #64	; 0x40
 8002bcc:	d031      	beq.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d110      	bne.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2208      	movs	r2, #8
 8002be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002be4:	68f8      	ldr	r0, [r7, #12]
 8002be6:	f000 f838 	bl	8002c5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2208      	movs	r2, #8
 8002bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e029      	b.n	8002c52 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c0c:	d111      	bne.n	8002c32 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c16:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f81e 	bl	8002c5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e00f      	b.n	8002c52 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	69da      	ldr	r2, [r3, #28]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	bf0c      	ite	eq
 8002c42:	2301      	moveq	r3, #1
 8002c44:	2300      	movne	r3, #0
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	461a      	mov	r2, r3
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d0a0      	beq.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b095      	sub	sp, #84	; 0x54
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6a:	e853 3f00 	ldrex	r3, [r3]
 8002c6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c80:	643b      	str	r3, [r7, #64]	; 0x40
 8002c82:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c88:	e841 2300 	strex	r3, r2, [r1]
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e6      	bne.n	8002c62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c9c:	6a3b      	ldr	r3, [r7, #32]
 8002c9e:	e853 3f00 	ldrex	r3, [r3]
 8002ca2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002cb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cc0:	e841 2300 	strex	r3, r2, [r1]
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1e3      	bne.n	8002c94 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d118      	bne.n	8002d06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f023 0310 	bic.w	r3, r3, #16
 8002ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf6:	6979      	ldr	r1, [r7, #20]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	613b      	str	r3, [r7, #16]
   return(result);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e6      	bne.n	8002cd4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002d1a:	bf00      	nop
 8002d1c:	3754      	adds	r7, #84	; 0x54
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b085      	sub	sp, #20
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d101      	bne.n	8002d3c <HAL_UARTEx_DisableFifoMode+0x16>
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e027      	b.n	8002d8c <HAL_UARTEx_DisableFifoMode+0x66>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2224      	movs	r2, #36	; 0x24
 8002d48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002d6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e02d      	b.n	8002e0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2224      	movs	r2, #36	; 0x24
 8002dbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f84f 	bl	8002e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68fa      	ldr	r2, [r7, #12]
 8002df8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e02d      	b.n	8002e88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0201 	bic.w	r2, r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	683a      	ldr	r2, [r7, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f811 	bl	8002e90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d108      	bne.n	8002eb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002eb0:	e031      	b.n	8002f16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002eb2:	2308      	movs	r3, #8
 8002eb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	0e5b      	lsrs	r3, r3, #25
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	0f5b      	lsrs	r3, r3, #29
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002eda:	7bbb      	ldrb	r3, [r7, #14]
 8002edc:	7b3a      	ldrb	r2, [r7, #12]
 8002ede:	4911      	ldr	r1, [pc, #68]	; (8002f24 <UARTEx_SetNbDataToProcess+0x94>)
 8002ee0:	5c8a      	ldrb	r2, [r1, r2]
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002ee6:	7b3a      	ldrb	r2, [r7, #12]
 8002ee8:	490f      	ldr	r1, [pc, #60]	; (8002f28 <UARTEx_SetNbDataToProcess+0x98>)
 8002eea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002eec:	fb93 f3f2 	sdiv	r3, r3, r2
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	7b7a      	ldrb	r2, [r7, #13]
 8002efc:	4909      	ldr	r1, [pc, #36]	; (8002f24 <UARTEx_SetNbDataToProcess+0x94>)
 8002efe:	5c8a      	ldrb	r2, [r1, r2]
 8002f00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002f04:	7b7a      	ldrb	r2, [r7, #13]
 8002f06:	4908      	ldr	r1, [pc, #32]	; (8002f28 <UARTEx_SetNbDataToProcess+0x98>)
 8002f08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002f0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002f16:	bf00      	nop
 8002f18:	3714      	adds	r7, #20
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	080052f8 	.word	0x080052f8
 8002f28:	08005300 	.word	0x08005300

08002f2c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f103 0208 	add.w	r2, r3, #8
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	f103 0208 	add.w	r2, r3, #8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f103 0208 	add.w	r2, r3, #8
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d103      	bne.n	8002fa6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e00c      	b.n	8002fc0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3308      	adds	r3, #8
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	e002      	b.n	8002fb4 <vListInsert+0x2e>
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d2f6      	bcs.n	8002fae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	1c5a      	adds	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	601a      	str	r2, [r3, #0]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6892      	ldr	r2, [r2, #8]
 800300e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6852      	ldr	r2, [r2, #4]
 8003018:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	429a      	cmp	r2, r3
 8003022:	d103      	bne.n	800302c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	1e5a      	subs	r2, r3, #1
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3714      	adds	r7, #20
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003056:	2301      	movs	r3, #1
 8003058:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10a      	bne.n	800307a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003076:	bf00      	nop
 8003078:	e7fe      	b.n	8003078 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d05d      	beq.n	800313c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003084:	2b00      	cmp	r3, #0
 8003086:	d059      	beq.n	800313c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	2100      	movs	r1, #0
 8003092:	fba3 2302 	umull	r2, r3, r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d000      	beq.n	800309c <xQueueGenericReset+0x50>
 800309a:	2101      	movs	r1, #1
 800309c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d14c      	bne.n	800313c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80030a2:	f001 fe09 	bl	8004cb8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ae:	6939      	ldr	r1, [r7, #16]
 80030b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	441a      	add	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	2200      	movs	r2, #0
 80030c0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d2:	3b01      	subs	r3, #1
 80030d4:	6939      	ldr	r1, [r7, #16]
 80030d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	441a      	add	r2, r3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	22ff      	movs	r2, #255	; 0xff
 80030e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	22ff      	movs	r2, #255	; 0xff
 80030ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d114      	bne.n	8003122 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01a      	beq.n	8003136 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	3310      	adds	r3, #16
 8003104:	4618      	mov	r0, r3
 8003106:	f000 ff79 	bl	8003ffc <xTaskRemoveFromEventList>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d012      	beq.n	8003136 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <xQueueGenericReset+0x11c>)
 8003112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	e009      	b.n	8003136 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	3310      	adds	r3, #16
 8003126:	4618      	mov	r0, r3
 8003128:	f7ff ff00 	bl	8002f2c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	3324      	adds	r3, #36	; 0x24
 8003130:	4618      	mov	r0, r3
 8003132:	f7ff fefb 	bl	8002f2c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003136:	f001 fdef 	bl	8004d18 <vPortExitCritical>
 800313a:	e001      	b.n	8003140 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10a      	bne.n	800315c <xQueueGenericReset+0x110>
        __asm volatile
 8003146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314a:	f383 8811 	msr	BASEPRI, r3
 800314e:	f3bf 8f6f 	isb	sy
 8003152:	f3bf 8f4f 	dsb	sy
 8003156:	60bb      	str	r3, [r7, #8]
    }
 8003158:	bf00      	nop
 800315a:	e7fe      	b.n	800315a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800315c:	697b      	ldr	r3, [r7, #20]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	e000ed04 	.word	0xe000ed04

0800316c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	4613      	mov	r3, r2
 8003178:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d02e      	beq.n	80031e2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003184:	2100      	movs	r1, #0
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	fba3 2302 	umull	r2, r3, r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d000      	beq.n	8003194 <xQueueGenericCreate+0x28>
 8003192:	2101      	movs	r1, #1
 8003194:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003196:	2b00      	cmp	r3, #0
 8003198:	d123      	bne.n	80031e2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80031a2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80031a6:	d81c      	bhi.n	80031e2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	fb02 f303 	mul.w	r3, r2, r3
 80031b0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3350      	adds	r3, #80	; 0x50
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fe58 	bl	8004e6c <pvPortMalloc>
 80031bc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01c      	beq.n	80031fe <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	3350      	adds	r3, #80	; 0x50
 80031cc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f814 	bl	8003208 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80031e0:	e00d      	b.n	80031fe <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <xQueueGenericCreate+0x92>
        __asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	613b      	str	r3, [r7, #16]
    }
 80031fa:	bf00      	nop
 80031fc:	e7fe      	b.n	80031fc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80031fe:	69fb      	ldr	r3, [r7, #28]
    }
 8003200:	4618      	mov	r0, r3
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
 8003214:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e002      	b.n	800322a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003236:	2101      	movs	r1, #1
 8003238:	69b8      	ldr	r0, [r7, #24]
 800323a:	f7ff ff07 	bl	800304c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003246:	bf00      	nop
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08c      	sub	sp, #48	; 0x30
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800325c:	2300      	movs	r3, #0
 800325e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <xQueueReceive+0x30>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	623b      	str	r3, [r7, #32]
    }
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d103      	bne.n	800328e <xQueueReceive+0x3e>
 8003286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <xQueueReceive+0x42>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <xQueueReceive+0x44>
 8003292:	2300      	movs	r3, #0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <xQueueReceive+0x5e>
        __asm volatile
 8003298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800329c:	f383 8811 	msr	BASEPRI, r3
 80032a0:	f3bf 8f6f 	isb	sy
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	61fb      	str	r3, [r7, #28]
    }
 80032aa:	bf00      	nop
 80032ac:	e7fe      	b.n	80032ac <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ae:	f001 f8b5 	bl	800441c <xTaskGetSchedulerState>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <xQueueReceive+0x6e>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <xQueueReceive+0x72>
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <xQueueReceive+0x74>
 80032c2:	2300      	movs	r3, #0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d10a      	bne.n	80032de <xQueueReceive+0x8e>
        __asm volatile
 80032c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032cc:	f383 8811 	msr	BASEPRI, r3
 80032d0:	f3bf 8f6f 	isb	sy
 80032d4:	f3bf 8f4f 	dsb	sy
 80032d8:	61bb      	str	r3, [r7, #24]
    }
 80032da:	bf00      	nop
 80032dc:	e7fe      	b.n	80032dc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80032de:	f001 fceb 	bl	8004cb8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d01f      	beq.n	800332e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032f2:	f000 f88d 	bl	8003410 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1e5a      	subs	r2, r3, #1
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00f      	beq.n	8003326 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003308:	3310      	adds	r3, #16
 800330a:	4618      	mov	r0, r3
 800330c:	f000 fe76 	bl	8003ffc <xTaskRemoveFromEventList>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d007      	beq.n	8003326 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <xQueueReceive+0x1bc>)
 8003318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003326:	f001 fcf7 	bl	8004d18 <vPortExitCritical>
                return pdPASS;
 800332a:	2301      	movs	r3, #1
 800332c:	e069      	b.n	8003402 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003334:	f001 fcf0 	bl	8004d18 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003338:	2300      	movs	r3, #0
 800333a:	e062      	b.n	8003402 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 800333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333e:	2b00      	cmp	r3, #0
 8003340:	d106      	bne.n	8003350 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003342:	f107 0310 	add.w	r3, r7, #16
 8003346:	4618      	mov	r0, r3
 8003348:	f000 ff2e 	bl	80041a8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800334c:	2301      	movs	r3, #1
 800334e:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003350:	f001 fce2 	bl	8004d18 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003354:	f000 fb5c 	bl	8003a10 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003358:	f001 fcae 	bl	8004cb8 <vPortEnterCritical>
 800335c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003362:	b25b      	sxtb	r3, r3
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d103      	bne.n	8003372 <xQueueReceive+0x122>
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003374:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003378:	b25b      	sxtb	r3, r3
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d103      	bne.n	8003388 <xQueueReceive+0x138>
 8003380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003388:	f001 fcc6 	bl	8004d18 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800338c:	1d3a      	adds	r2, r7, #4
 800338e:	f107 0310 	add.w	r3, r7, #16
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f000 ff1d 	bl	80041d4 <xTaskCheckForTimeOut>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d123      	bne.n	80033e8 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033a2:	f000 f8ad 	bl	8003500 <prvIsQueueEmpty>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d017      	beq.n	80033dc <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	3324      	adds	r3, #36	; 0x24
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4611      	mov	r1, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	f000 fdb7 	bl	8003f28 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80033ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033bc:	f000 f84e 	bl	800345c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80033c0:	f000 fb34 	bl	8003a2c <xTaskResumeAll>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d189      	bne.n	80032de <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <xQueueReceive+0x1bc>)
 80033cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	f3bf 8f4f 	dsb	sy
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	e780      	b.n	80032de <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80033dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033de:	f000 f83d 	bl	800345c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80033e2:	f000 fb23 	bl	8003a2c <xTaskResumeAll>
 80033e6:	e77a      	b.n	80032de <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80033e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033ea:	f000 f837 	bl	800345c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80033ee:	f000 fb1d 	bl	8003a2c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033f4:	f000 f884 	bl	8003500 <prvIsQueueEmpty>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f43f af6f 	beq.w	80032de <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003400:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003402:	4618      	mov	r0, r3
 8003404:	3730      	adds	r7, #48	; 0x30
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	e000ed04 	.word	0xe000ed04

08003410 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d018      	beq.n	8003454 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68da      	ldr	r2, [r3, #12]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	441a      	add	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d303      	bcc.n	8003444 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68d9      	ldr	r1, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344c:	461a      	mov	r2, r3
 800344e:	6838      	ldr	r0, [r7, #0]
 8003450:	f001 fefc 	bl	800524c <memcpy>
    }
}
 8003454:	bf00      	nop
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003464:	f001 fc28 	bl	8004cb8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800346e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003470:	e011      	b.n	8003496 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003476:	2b00      	cmp	r3, #0
 8003478:	d012      	beq.n	80034a0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3324      	adds	r3, #36	; 0x24
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fdbc 	bl	8003ffc <xTaskRemoveFromEventList>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800348a:	f000 ff09 	bl	80042a0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3b01      	subs	r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800349a:	2b00      	cmp	r3, #0
 800349c:	dce9      	bgt.n	8003472 <prvUnlockQueue+0x16>
 800349e:	e000      	b.n	80034a2 <prvUnlockQueue+0x46>
                    break;
 80034a0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	22ff      	movs	r2, #255	; 0xff
 80034a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80034aa:	f001 fc35 	bl	8004d18 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80034ae:	f001 fc03 	bl	8004cb8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034b8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ba:	e011      	b.n	80034e0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d012      	beq.n	80034ea <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3310      	adds	r3, #16
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fd97 	bl	8003ffc <xTaskRemoveFromEventList>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80034d4:	f000 fee4 	bl	80042a0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80034d8:	7bbb      	ldrb	r3, [r7, #14]
 80034da:	3b01      	subs	r3, #1
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80034e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	dce9      	bgt.n	80034bc <prvUnlockQueue+0x60>
 80034e8:	e000      	b.n	80034ec <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80034ea:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	22ff      	movs	r2, #255	; 0xff
 80034f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80034f4:	f001 fc10 	bl	8004d18 <vPortExitCritical>
}
 80034f8:	bf00      	nop
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003508:	f001 fbd6 	bl	8004cb8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d102      	bne.n	800351a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003514:	2301      	movs	r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	e001      	b.n	800351e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800351a:	2300      	movs	r3, #0
 800351c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800351e:	f001 fbfb 	bl	8004d18 <vPortExitCritical>

    return xReturn;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10a      	bne.n	8003556 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60fb      	str	r3, [r7, #12]
    }
 8003552:	bf00      	nop
 8003554:	e7fe      	b.n	8003554 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d024      	beq.n	80035a6 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
 8003560:	e01e      	b.n	80035a0 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003562:	4a18      	ldr	r2, [pc, #96]	; (80035c4 <vQueueAddToRegistry+0x98>)
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d105      	bne.n	800357e <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4a13      	ldr	r2, [pc, #76]	; (80035c4 <vQueueAddToRegistry+0x98>)
 8003578:	4413      	add	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
                    break;
 800357c:	e013      	b.n	80035a6 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <vQueueAddToRegistry+0x6e>
 8003584:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <vQueueAddToRegistry+0x98>)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d104      	bne.n	800359a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4a0b      	ldr	r2, [pc, #44]	; (80035c4 <vQueueAddToRegistry+0x98>)
 8003596:	4413      	add	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	3301      	adds	r3, #1
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	2b07      	cmp	r3, #7
 80035a4:	d9dd      	bls.n	8003562 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	2000015c 	.word	0x2000015c

080035c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80035d8:	f001 fb6e 	bl	8004cb8 <vPortEnterCritical>
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80035e2:	b25b      	sxtb	r3, r3
 80035e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e8:	d103      	bne.n	80035f2 <vQueueWaitForMessageRestricted+0x2a>
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035f8:	b25b      	sxtb	r3, r3
 80035fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fe:	d103      	bne.n	8003608 <vQueueWaitForMessageRestricted+0x40>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003608:	f001 fb86 	bl	8004d18 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	3324      	adds	r3, #36	; 0x24
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	68b9      	ldr	r1, [r7, #8]
 800361c:	4618      	mov	r0, r3
 800361e:	f000 fca7 	bl	8003f70 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7ff ff1a 	bl	800345c <prvUnlockQueue>
    }
 8003628:	bf00      	nop
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003630:	b580      	push	{r7, lr}
 8003632:	b08c      	sub	sp, #48	; 0x30
 8003634:	af04      	add	r7, sp, #16
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	4613      	mov	r3, r2
 800363e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003640:	88fb      	ldrh	r3, [r7, #6]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4618      	mov	r0, r3
 8003646:	f001 fc11 	bl	8004e6c <pvPortMalloc>
 800364a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d013      	beq.n	800367a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003652:	2058      	movs	r0, #88	; 0x58
 8003654:	f001 fc0a 	bl	8004e6c <pvPortMalloc>
 8003658:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003660:	2258      	movs	r2, #88	; 0x58
 8003662:	2100      	movs	r1, #0
 8003664:	69f8      	ldr	r0, [r7, #28]
 8003666:	f001 fdff 	bl	8005268 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
 8003670:	e005      	b.n	800367e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003672:	6978      	ldr	r0, [r7, #20]
 8003674:	f001 fcb4 	bl	8004fe0 <vPortFree>
 8003678:	e001      	b.n	800367e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800367a:	2300      	movs	r3, #0
 800367c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003684:	88fa      	ldrh	r2, [r7, #6]
 8003686:	2300      	movs	r3, #0
 8003688:	9303      	str	r3, [sp, #12]
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	9302      	str	r3, [sp, #8]
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f80e 	bl	80036bc <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80036a0:	69f8      	ldr	r0, [r7, #28]
 80036a2:	f000 f899 	bl	80037d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80036a6:	2301      	movs	r3, #1
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	e002      	b.n	80036b2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036ac:	f04f 33ff 	mov.w	r3, #4294967295
 80036b0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80036b2:	69bb      	ldr	r3, [r7, #24]
    }
 80036b4:	4618      	mov	r0, r3
 80036b6:	3720      	adds	r7, #32
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	461a      	mov	r2, r3
 80036d4:	21a5      	movs	r1, #165	; 0xa5
 80036d6:	f001 fdc7 	bl	8005268 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80036da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036e4:	3b01      	subs	r3, #1
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f023 0307 	bic.w	r3, r3, #7
 80036f2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <prvInitialiseNewTask+0x58>
        __asm volatile
 80036fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003702:	f383 8811 	msr	BASEPRI, r3
 8003706:	f3bf 8f6f 	isb	sy
 800370a:	f3bf 8f4f 	dsb	sy
 800370e:	617b      	str	r3, [r7, #20]
    }
 8003710:	bf00      	nop
 8003712:	e7fe      	b.n	8003712 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d01e      	beq.n	8003758 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e012      	b.n	8003746 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	7819      	ldrb	r1, [r3, #0]
 8003728:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	3334      	adds	r3, #52	; 0x34
 8003730:	460a      	mov	r2, r1
 8003732:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	4413      	add	r3, r2
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	3301      	adds	r3, #1
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2b09      	cmp	r3, #9
 800374a:	d9e9      	bls.n	8003720 <prvInitialiseNewTask+0x64>
 800374c:	e000      	b.n	8003750 <prvInitialiseNewTask+0x94>
            {
                break;
 800374e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	2b04      	cmp	r3, #4
 800375c:	d90a      	bls.n	8003774 <prvInitialiseNewTask+0xb8>
        __asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	613b      	str	r3, [r7, #16]
    }
 8003770:	bf00      	nop
 8003772:	e7fe      	b.n	8003772 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003776:	2b04      	cmp	r3, #4
 8003778:	d901      	bls.n	800377e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800377a:	2304      	movs	r3, #4
 800377c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800377e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003782:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003786:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003788:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800378c:	3304      	adds	r3, #4
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff fbec 	bl	8002f6c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003796:	3318      	adds	r3, #24
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff fbe7 	bl	8002f6c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037a6:	f1c3 0205 	rsb	r2, r3, #5
 80037aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	68f9      	ldr	r1, [r7, #12]
 80037b8:	69b8      	ldr	r0, [r7, #24]
 80037ba:	f001 f951 	bl	8004a60 <pxPortInitialiseStack>
 80037be:	4602      	mov	r2, r0
 80037c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80037c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037d0:	bf00      	nop
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80037e0:	f001 fa6a 	bl	8004cb8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80037e4:	4b40      	ldr	r3, [pc, #256]	; (80038e8 <prvAddNewTaskToReadyList+0x110>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3301      	adds	r3, #1
 80037ea:	4a3f      	ldr	r2, [pc, #252]	; (80038e8 <prvAddNewTaskToReadyList+0x110>)
 80037ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80037ee:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <prvAddNewTaskToReadyList+0x114>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80037f6:	4a3d      	ldr	r2, [pc, #244]	; (80038ec <prvAddNewTaskToReadyList+0x114>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037fc:	4b3a      	ldr	r3, [pc, #232]	; (80038e8 <prvAddNewTaskToReadyList+0x110>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d110      	bne.n	8003826 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003804:	f000 fd70 	bl	80042e8 <prvInitialiseTaskLists>
 8003808:	e00d      	b.n	8003826 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800380a:	4b39      	ldr	r3, [pc, #228]	; (80038f0 <prvAddNewTaskToReadyList+0x118>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003812:	4b36      	ldr	r3, [pc, #216]	; (80038ec <prvAddNewTaskToReadyList+0x114>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	429a      	cmp	r2, r3
 800381e:	d802      	bhi.n	8003826 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003820:	4a32      	ldr	r2, [pc, #200]	; (80038ec <prvAddNewTaskToReadyList+0x114>)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003826:	4b33      	ldr	r3, [pc, #204]	; (80038f4 <prvAddNewTaskToReadyList+0x11c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3301      	adds	r3, #1
 800382c:	4a31      	ldr	r2, [pc, #196]	; (80038f4 <prvAddNewTaskToReadyList+0x11c>)
 800382e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003830:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <prvAddNewTaskToReadyList+0x11c>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	2201      	movs	r2, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	4b2d      	ldr	r3, [pc, #180]	; (80038f8 <prvAddNewTaskToReadyList+0x120>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	4a2c      	ldr	r2, [pc, #176]	; (80038f8 <prvAddNewTaskToReadyList+0x120>)
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	492b      	ldr	r1, [pc, #172]	; (80038fc <prvAddNewTaskToReadyList+0x124>)
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	3304      	adds	r3, #4
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	609a      	str	r2, [r3, #8]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	60da      	str	r2, [r3, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	3204      	adds	r2, #4
 8003876:	605a      	str	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1d1a      	adds	r2, r3, #4
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	609a      	str	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003884:	4613      	mov	r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4a1b      	ldr	r2, [pc, #108]	; (80038fc <prvAddNewTaskToReadyList+0x124>)
 800388e:	441a      	add	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	615a      	str	r2, [r3, #20]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003898:	4918      	ldr	r1, [pc, #96]	; (80038fc <prvAddNewTaskToReadyList+0x124>)
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	4814      	ldr	r0, [pc, #80]	; (80038fc <prvAddNewTaskToReadyList+0x124>)
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4403      	add	r3, r0
 80038b4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80038b6:	f001 fa2f 	bl	8004d18 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80038ba:	4b0d      	ldr	r3, [pc, #52]	; (80038f0 <prvAddNewTaskToReadyList+0x118>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00e      	beq.n	80038e0 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038c2:	4b0a      	ldr	r3, [pc, #40]	; (80038ec <prvAddNewTaskToReadyList+0x114>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d207      	bcs.n	80038e0 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <prvAddNewTaskToReadyList+0x128>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80038e0:	bf00      	nop
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000274 	.word	0x20000274
 80038ec:	2000019c 	.word	0x2000019c
 80038f0:	20000280 	.word	0x20000280
 80038f4:	20000290 	.word	0x20000290
 80038f8:	2000027c 	.word	0x2000027c
 80038fc:	200001a0 	.word	0x200001a0
 8003900:	e000ed04 	.word	0xe000ed04

08003904 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d017      	beq.n	8003946 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <vTaskDelay+0x60>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <vTaskDelay+0x30>
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	60bb      	str	r3, [r7, #8]
    }
 8003930:	bf00      	nop
 8003932:	e7fe      	b.n	8003932 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003934:	f000 f86c 	bl	8003a10 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003938:	2100      	movs	r1, #0
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fd8c 	bl	8004458 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003940:	f000 f874 	bl	8003a2c <xTaskResumeAll>
 8003944:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d107      	bne.n	800395c <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <vTaskDelay+0x64>)
 800394e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003952:	601a      	str	r2, [r3, #0]
 8003954:	f3bf 8f4f 	dsb	sy
 8003958:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800395c:	bf00      	nop
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	2000029c 	.word	0x2000029c
 8003968:	e000ed04 	.word	0xe000ed04

0800396c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <vTaskStartScheduler+0x88>)
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2300      	movs	r3, #0
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	2282      	movs	r2, #130	; 0x82
 800397e:	491e      	ldr	r1, [pc, #120]	; (80039f8 <vTaskStartScheduler+0x8c>)
 8003980:	481e      	ldr	r0, [pc, #120]	; (80039fc <vTaskStartScheduler+0x90>)
 8003982:	f7ff fe55 	bl	8003630 <xTaskCreate>
 8003986:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d102      	bne.n	8003994 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800398e:	f000 fde3 	bl	8004558 <xTimerCreateTimerTask>
 8003992:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d116      	bne.n	80039c8 <vTaskStartScheduler+0x5c>
        __asm volatile
 800399a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399e:	f383 8811 	msr	BASEPRI, r3
 80039a2:	f3bf 8f6f 	isb	sy
 80039a6:	f3bf 8f4f 	dsb	sy
 80039aa:	60bb      	str	r3, [r7, #8]
    }
 80039ac:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80039ae:	4b14      	ldr	r3, [pc, #80]	; (8003a00 <vTaskStartScheduler+0x94>)
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80039b6:	4b13      	ldr	r3, [pc, #76]	; (8003a04 <vTaskStartScheduler+0x98>)
 80039b8:	2201      	movs	r2, #1
 80039ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039bc:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <vTaskStartScheduler+0x9c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 80039c2:	f001 f8d7 	bl	8004b74 <xPortStartScheduler>
 80039c6:	e00e      	b.n	80039e6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ce:	d10a      	bne.n	80039e6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	607b      	str	r3, [r7, #4]
    }
 80039e2:	bf00      	nop
 80039e4:	e7fe      	b.n	80039e4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <vTaskStartScheduler+0xa0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
}
 80039ea:	bf00      	nop
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	20000298 	.word	0x20000298
 80039f8:	080052b0 	.word	0x080052b0
 80039fc:	080042b9 	.word	0x080042b9
 8003a00:	20000294 	.word	0x20000294
 8003a04:	20000280 	.word	0x20000280
 8003a08:	20000278 	.word	0x20000278
 8003a0c:	2000000c 	.word	0x2000000c

08003a10 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <vTaskSuspendAll+0x18>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	4a03      	ldr	r2, [pc, #12]	; (8003a28 <vTaskSuspendAll+0x18>)
 8003a1c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	2000029c 	.word	0x2000029c

08003a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003a3a:	4b71      	ldr	r3, [pc, #452]	; (8003c00 <xTaskResumeAll+0x1d4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <xTaskResumeAll+0x2c>
        __asm volatile
 8003a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a46:	f383 8811 	msr	BASEPRI, r3
 8003a4a:	f3bf 8f6f 	isb	sy
 8003a4e:	f3bf 8f4f 	dsb	sy
 8003a52:	607b      	str	r3, [r7, #4]
    }
 8003a54:	bf00      	nop
 8003a56:	e7fe      	b.n	8003a56 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003a58:	f001 f92e 	bl	8004cb8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003a5c:	4b68      	ldr	r3, [pc, #416]	; (8003c00 <xTaskResumeAll+0x1d4>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3b01      	subs	r3, #1
 8003a62:	4a67      	ldr	r2, [pc, #412]	; (8003c00 <xTaskResumeAll+0x1d4>)
 8003a64:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a66:	4b66      	ldr	r3, [pc, #408]	; (8003c00 <xTaskResumeAll+0x1d4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f040 80c0 	bne.w	8003bf0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a70:	4b64      	ldr	r3, [pc, #400]	; (8003c04 <xTaskResumeAll+0x1d8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 80bb 	beq.w	8003bf0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a7a:	e08a      	b.n	8003b92 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a7c:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <xTaskResumeAll+0x1dc>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	6a12      	ldr	r2, [r2, #32]
 8003a92:	609a      	str	r2, [r3, #8]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	69d2      	ldr	r2, [r2, #28]
 8003a9c:	605a      	str	r2, [r3, #4]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	3318      	adds	r3, #24
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d103      	bne.n	8003ab2 <xTaskResumeAll+0x86>
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	6a1a      	ldr	r2, [r3, #32]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	1e5a      	subs	r2, r3, #1
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	68d2      	ldr	r2, [r2, #12]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	6892      	ldr	r2, [r2, #8]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	69fb      	ldr	r3, [r7, #28]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d103      	bne.n	8003af0 <xTaskResumeAll+0xc4>
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	605a      	str	r2, [r3, #4]
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2200      	movs	r2, #0
 8003af4:	615a      	str	r2, [r3, #20]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	1e5a      	subs	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	2201      	movs	r2, #1
 8003b06:	409a      	lsls	r2, r3
 8003b08:	4b40      	ldr	r3, [pc, #256]	; (8003c0c <xTaskResumeAll+0x1e0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	4a3f      	ldr	r2, [pc, #252]	; (8003c0c <xTaskResumeAll+0x1e0>)
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b16:	493e      	ldr	r1, [pc, #248]	; (8003c10 <xTaskResumeAll+0x1e4>)
 8003b18:	4613      	mov	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3304      	adds	r3, #4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60bb      	str	r3, [r7, #8]
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	3204      	adds	r2, #4
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	1d1a      	adds	r2, r3, #4
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4a2e      	ldr	r2, [pc, #184]	; (8003c10 <xTaskResumeAll+0x1e4>)
 8003b56:	441a      	add	r2, r3
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	615a      	str	r2, [r3, #20]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	492b      	ldr	r1, [pc, #172]	; (8003c10 <xTaskResumeAll+0x1e4>)
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1c59      	adds	r1, r3, #1
 8003b70:	4827      	ldr	r0, [pc, #156]	; (8003c10 <xTaskResumeAll+0x1e4>)
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4403      	add	r3, r0
 8003b7c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b82:	4b24      	ldr	r3, [pc, #144]	; (8003c14 <xTaskResumeAll+0x1e8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d302      	bcc.n	8003b92 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003b8c:	4b22      	ldr	r3, [pc, #136]	; (8003c18 <xTaskResumeAll+0x1ec>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b92:	4b1d      	ldr	r3, [pc, #116]	; (8003c08 <xTaskResumeAll+0x1dc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f47f af70 	bne.w	8003a7c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003ba2:	f000 fc1f 	bl	80043e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ba6:	4b1d      	ldr	r3, [pc, #116]	; (8003c1c <xTaskResumeAll+0x1f0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d010      	beq.n	8003bd4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003bb2:	f000 f847 	bl	8003c44 <xTaskIncrementTick>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003bbc:	4b16      	ldr	r3, [pc, #88]	; (8003c18 <xTaskResumeAll+0x1ec>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f1      	bne.n	8003bb2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003bce:	4b13      	ldr	r3, [pc, #76]	; (8003c1c <xTaskResumeAll+0x1f0>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003bd4:	4b10      	ldr	r3, [pc, #64]	; (8003c18 <xTaskResumeAll+0x1ec>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d009      	beq.n	8003bf0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003be0:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <xTaskResumeAll+0x1f4>)
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003bf0:	f001 f892 	bl	8004d18 <vPortExitCritical>

    return xAlreadyYielded;
 8003bf4:	69bb      	ldr	r3, [r7, #24]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3720      	adds	r7, #32
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	2000029c 	.word	0x2000029c
 8003c04:	20000274 	.word	0x20000274
 8003c08:	20000234 	.word	0x20000234
 8003c0c:	2000027c 	.word	0x2000027c
 8003c10:	200001a0 	.word	0x200001a0
 8003c14:	2000019c 	.word	0x2000019c
 8003c18:	20000288 	.word	0x20000288
 8003c1c:	20000284 	.word	0x20000284
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <xTaskGetTickCount+0x1c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003c30:	687b      	ldr	r3, [r7, #4]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000278 	.word	0x20000278

08003c44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c4e:	4b7d      	ldr	r3, [pc, #500]	; (8003e44 <xTaskIncrementTick+0x200>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f040 80ec 	bne.w	8003e30 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c58:	4b7b      	ldr	r3, [pc, #492]	; (8003e48 <xTaskIncrementTick+0x204>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003c60:	4a79      	ldr	r2, [pc, #484]	; (8003e48 <xTaskIncrementTick+0x204>)
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d120      	bne.n	8003cae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003c6c:	4b77      	ldr	r3, [pc, #476]	; (8003e4c <xTaskIncrementTick+0x208>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <xTaskIncrementTick+0x48>
        __asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	607b      	str	r3, [r7, #4]
    }
 8003c88:	bf00      	nop
 8003c8a:	e7fe      	b.n	8003c8a <xTaskIncrementTick+0x46>
 8003c8c:	4b6f      	ldr	r3, [pc, #444]	; (8003e4c <xTaskIncrementTick+0x208>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	4b6f      	ldr	r3, [pc, #444]	; (8003e50 <xTaskIncrementTick+0x20c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a6d      	ldr	r2, [pc, #436]	; (8003e4c <xTaskIncrementTick+0x208>)
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4a6d      	ldr	r2, [pc, #436]	; (8003e50 <xTaskIncrementTick+0x20c>)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b6c      	ldr	r3, [pc, #432]	; (8003e54 <xTaskIncrementTick+0x210>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	4a6b      	ldr	r2, [pc, #428]	; (8003e54 <xTaskIncrementTick+0x210>)
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	f000 fb9b 	bl	80043e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003cae:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <xTaskIncrementTick+0x214>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6a3a      	ldr	r2, [r7, #32]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	f0c0 80a6 	bcc.w	8003e06 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cba:	4b64      	ldr	r3, [pc, #400]	; (8003e4c <xTaskIncrementTick+0x208>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d104      	bne.n	8003cce <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cc4:	4b64      	ldr	r3, [pc, #400]	; (8003e58 <xTaskIncrementTick+0x214>)
 8003cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8003cca:	601a      	str	r2, [r3, #0]
                    break;
 8003ccc:	e09b      	b.n	8003e06 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cce:	4b5f      	ldr	r3, [pc, #380]	; (8003e4c <xTaskIncrementTick+0x208>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003cde:	6a3a      	ldr	r2, [r7, #32]
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d203      	bcs.n	8003cee <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003ce6:	4a5c      	ldr	r2, [pc, #368]	; (8003e58 <xTaskIncrementTick+0x214>)
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003cec:	e08b      	b.n	8003e06 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	613b      	str	r3, [r7, #16]
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	68d2      	ldr	r2, [r2, #12]
 8003cfc:	609a      	str	r2, [r3, #8]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	6892      	ldr	r2, [r2, #8]
 8003d06:	605a      	str	r2, [r3, #4]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d103      	bne.n	8003d1c <xTaskIncrementTick+0xd8>
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	68da      	ldr	r2, [r3, #12]
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	605a      	str	r2, [r3, #4]
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	615a      	str	r2, [r3, #20]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	1e5a      	subs	r2, r3, #1
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01e      	beq.n	8003d72 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	60fb      	str	r3, [r7, #12]
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	69db      	ldr	r3, [r3, #28]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	6a12      	ldr	r2, [r2, #32]
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	69ba      	ldr	r2, [r7, #24]
 8003d4a:	69d2      	ldr	r2, [r2, #28]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	3318      	adds	r3, #24
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d103      	bne.n	8003d62 <xTaskIncrementTick+0x11e>
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	6a1a      	ldr	r2, [r3, #32]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2200      	movs	r2, #0
 8003d66:	629a      	str	r2, [r3, #40]	; 0x28
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	1e5a      	subs	r2, r3, #1
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d76:	2201      	movs	r2, #1
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	4b38      	ldr	r3, [pc, #224]	; (8003e5c <xTaskIncrementTick+0x218>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	4a36      	ldr	r2, [pc, #216]	; (8003e5c <xTaskIncrementTick+0x218>)
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d88:	4935      	ldr	r1, [pc, #212]	; (8003e60 <xTaskIncrementTick+0x21c>)
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	440b      	add	r3, r1
 8003d94:	3304      	adds	r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	3204      	adds	r2, #4
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	1d1a      	adds	r2, r3, #4
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	609a      	str	r2, [r3, #8]
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <xTaskIncrementTick+0x21c>)
 8003dc8:	441a      	add	r2, r3
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	615a      	str	r2, [r3, #20]
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd2:	4923      	ldr	r1, [pc, #140]	; (8003e60 <xTaskIncrementTick+0x21c>)
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	4413      	add	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	440b      	add	r3, r1
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	1c59      	adds	r1, r3, #1
 8003de2:	481f      	ldr	r0, [pc, #124]	; (8003e60 <xTaskIncrementTick+0x21c>)
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4403      	add	r3, r0
 8003dee:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <xTaskIncrementTick+0x220>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	f67f af5d 	bls.w	8003cba <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8003e00:	2301      	movs	r3, #1
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e04:	e759      	b.n	8003cba <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e06:	4b17      	ldr	r3, [pc, #92]	; (8003e64 <xTaskIncrementTick+0x220>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0c:	4914      	ldr	r1, [pc, #80]	; (8003e60 <xTaskIncrementTick+0x21c>)
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d901      	bls.n	8003e22 <xTaskIncrementTick+0x1de>
            {
                xSwitchRequired = pdTRUE;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003e22:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <xTaskIncrementTick+0x224>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <xTaskIncrementTick+0x1f6>
            {
                xSwitchRequired = pdTRUE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2e:	e004      	b.n	8003e3a <xTaskIncrementTick+0x1f6>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003e30:	4b0e      	ldr	r3, [pc, #56]	; (8003e6c <xTaskIncrementTick+0x228>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3301      	adds	r3, #1
 8003e36:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <xTaskIncrementTick+0x228>)
 8003e38:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3728      	adds	r7, #40	; 0x28
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	2000029c 	.word	0x2000029c
 8003e48:	20000278 	.word	0x20000278
 8003e4c:	2000022c 	.word	0x2000022c
 8003e50:	20000230 	.word	0x20000230
 8003e54:	2000028c 	.word	0x2000028c
 8003e58:	20000294 	.word	0x20000294
 8003e5c:	2000027c 	.word	0x2000027c
 8003e60:	200001a0 	.word	0x200001a0
 8003e64:	2000019c 	.word	0x2000019c
 8003e68:	20000288 	.word	0x20000288
 8003e6c:	20000284 	.word	0x20000284

08003e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003e76:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <vTaskSwitchContext+0xa4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003e7e:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <vTaskSwitchContext+0xa8>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003e84:	e03f      	b.n	8003f06 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003e86:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <vTaskSwitchContext+0xa8>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e8c:	4b23      	ldr	r3, [pc, #140]	; (8003f1c <vTaskSwitchContext+0xac>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	fab3 f383 	clz	r3, r3
 8003e98:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	f1c3 031f 	rsb	r3, r3, #31
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	491f      	ldr	r1, [pc, #124]	; (8003f20 <vTaskSwitchContext+0xb0>)
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4413      	add	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <vTaskSwitchContext+0x5c>
        __asm volatile
 8003eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	607b      	str	r3, [r7, #4]
    }
 8003ec8:	bf00      	nop
 8003eca:	e7fe      	b.n	8003eca <vTaskSwitchContext+0x5a>
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <vTaskSwitchContext+0xb0>)
 8003ed8:	4413      	add	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	3308      	adds	r3, #8
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d104      	bne.n	8003efc <vTaskSwitchContext+0x8c>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4a08      	ldr	r2, [pc, #32]	; (8003f24 <vTaskSwitchContext+0xb4>)
 8003f04:	6013      	str	r3, [r2, #0]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	2000029c 	.word	0x2000029c
 8003f18:	20000288 	.word	0x20000288
 8003f1c:	2000027c 	.word	0x2000027c
 8003f20:	200001a0 	.word	0x200001a0
 8003f24:	2000019c 	.word	0x2000019c

08003f28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	60fb      	str	r3, [r7, #12]
    }
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f4e:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <vTaskPlaceOnEventList+0x44>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3318      	adds	r3, #24
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff f815 	bl	8002f86 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	6838      	ldr	r0, [r7, #0]
 8003f60:	f000 fa7a 	bl	8004458 <prvAddCurrentTaskToDelayedList>
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	2000019c 	.word	0x2000019c

08003f70 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f86:	f383 8811 	msr	BASEPRI, r3
 8003f8a:	f3bf 8f6f 	isb	sy
 8003f8e:	f3bf 8f4f 	dsb	sy
 8003f92:	613b      	str	r3, [r7, #16]
    }
 8003f94:	bf00      	nop
 8003f96:	e7fe      	b.n	8003f96 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	61da      	str	r2, [r3, #28]
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	6892      	ldr	r2, [r2, #8]
 8003fae:	621a      	str	r2, [r3, #32]
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	3218      	adds	r2, #24
 8003fba:	605a      	str	r2, [r3, #4]
 8003fbc:	4b0e      	ldr	r3, [pc, #56]	; (8003ff8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f103 0218 	add.w	r2, r3, #24
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	609a      	str	r2, [r3, #8]
 8003fc8:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	629a      	str	r2, [r3, #40]	; 0x28
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d002      	beq.n	8003fe6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	68b8      	ldr	r0, [r7, #8]
 8003fea:	f000 fa35 	bl	8004458 <prvAddCurrentTaskToDelayedList>
    }
 8003fee:	bf00      	nop
 8003ff0:	3718      	adds	r7, #24
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	2000019c 	.word	0x2000019c

08003ffc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b08b      	sub	sp, #44	; 0x2c
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10a      	bne.n	8004028 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	60fb      	str	r3, [r7, #12]
    }
 8004024:	bf00      	nop
 8004026:	e7fe      	b.n	8004026 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	6a3a      	ldr	r2, [r7, #32]
 8004034:	6a12      	ldr	r2, [r2, #32]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	6a3b      	ldr	r3, [r7, #32]
 800403a:	6a1b      	ldr	r3, [r3, #32]
 800403c:	6a3a      	ldr	r2, [r7, #32]
 800403e:	69d2      	ldr	r2, [r2, #28]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	3318      	adds	r3, #24
 800404a:	429a      	cmp	r2, r3
 800404c:	d103      	bne.n	8004056 <xTaskRemoveFromEventList+0x5a>
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	6a1a      	ldr	r2, [r3, #32]
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	605a      	str	r2, [r3, #4]
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	2200      	movs	r2, #0
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	1e5a      	subs	r2, r3, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004066:	4b4a      	ldr	r3, [pc, #296]	; (8004190 <xTaskRemoveFromEventList+0x194>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d15e      	bne.n	800412c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	6a3a      	ldr	r2, [r7, #32]
 800407a:	68d2      	ldr	r2, [r2, #12]
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	6a3a      	ldr	r2, [r7, #32]
 8004084:	6892      	ldr	r2, [r2, #8]
 8004086:	605a      	str	r2, [r3, #4]
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	6a3b      	ldr	r3, [r7, #32]
 800408e:	3304      	adds	r3, #4
 8004090:	429a      	cmp	r2, r3
 8004092:	d103      	bne.n	800409c <xTaskRemoveFromEventList+0xa0>
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	2200      	movs	r2, #0
 80040a0:	615a      	str	r2, [r3, #20]
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	1e5a      	subs	r2, r3, #1
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	2201      	movs	r2, #1
 80040b2:	409a      	lsls	r2, r3
 80040b4:	4b37      	ldr	r3, [pc, #220]	; (8004194 <xTaskRemoveFromEventList+0x198>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	4a36      	ldr	r2, [pc, #216]	; (8004194 <xTaskRemoveFromEventList+0x198>)
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040c2:	4935      	ldr	r1, [pc, #212]	; (8004198 <xTaskRemoveFromEventList+0x19c>)
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	440b      	add	r3, r1
 80040ce:	3304      	adds	r3, #4
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	693a      	ldr	r2, [r7, #16]
 80040d8:	609a      	str	r2, [r3, #8]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	60da      	str	r2, [r3, #12]
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	6a3a      	ldr	r2, [r7, #32]
 80040e8:	3204      	adds	r2, #4
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	6a3b      	ldr	r3, [r7, #32]
 80040ee:	1d1a      	adds	r2, r3, #4
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	609a      	str	r2, [r3, #8]
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4a25      	ldr	r2, [pc, #148]	; (8004198 <xTaskRemoveFromEventList+0x19c>)
 8004102:	441a      	add	r2, r3
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	615a      	str	r2, [r3, #20]
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410c:	4922      	ldr	r1, [pc, #136]	; (8004198 <xTaskRemoveFromEventList+0x19c>)
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	1c59      	adds	r1, r3, #1
 800411c:	481e      	ldr	r0, [pc, #120]	; (8004198 <xTaskRemoveFromEventList+0x19c>)
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4403      	add	r3, r0
 8004128:	6019      	str	r1, [r3, #0]
 800412a:	e01b      	b.n	8004164 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800412c:	4b1b      	ldr	r3, [pc, #108]	; (800419c <xTaskRemoveFromEventList+0x1a0>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	61bb      	str	r3, [r7, #24]
 8004132:	6a3b      	ldr	r3, [r7, #32]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	61da      	str	r2, [r3, #28]
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	689a      	ldr	r2, [r3, #8]
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	621a      	str	r2, [r3, #32]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	6a3a      	ldr	r2, [r7, #32]
 8004146:	3218      	adds	r2, #24
 8004148:	605a      	str	r2, [r3, #4]
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	f103 0218 	add.w	r2, r3, #24
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	609a      	str	r2, [r3, #8]
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	4a11      	ldr	r2, [pc, #68]	; (800419c <xTaskRemoveFromEventList+0x1a0>)
 8004158:	629a      	str	r2, [r3, #40]	; 0x28
 800415a:	4b10      	ldr	r3, [pc, #64]	; (800419c <xTaskRemoveFromEventList+0x1a0>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3301      	adds	r3, #1
 8004160:	4a0e      	ldr	r2, [pc, #56]	; (800419c <xTaskRemoveFromEventList+0x1a0>)
 8004162:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <xTaskRemoveFromEventList+0x1a4>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416e:	429a      	cmp	r2, r3
 8004170:	d905      	bls.n	800417e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004172:	2301      	movs	r3, #1
 8004174:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004176:	4b0b      	ldr	r3, [pc, #44]	; (80041a4 <xTaskRemoveFromEventList+0x1a8>)
 8004178:	2201      	movs	r2, #1
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e001      	b.n	8004182 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 800417e:	2300      	movs	r3, #0
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004184:	4618      	mov	r0, r3
 8004186:	372c      	adds	r7, #44	; 0x2c
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	2000029c 	.word	0x2000029c
 8004194:	2000027c 	.word	0x2000027c
 8004198:	200001a0 	.word	0x200001a0
 800419c:	20000234 	.word	0x20000234
 80041a0:	2000019c 	.word	0x2000019c
 80041a4:	20000288 	.word	0x20000288

080041a8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <vTaskInternalSetTimeOutState+0x24>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80041b8:	4b05      	ldr	r3, [pc, #20]	; (80041d0 <vTaskInternalSetTimeOutState+0x28>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	605a      	str	r2, [r3, #4]
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	2000028c 	.word	0x2000028c
 80041d0:	20000278 	.word	0x20000278

080041d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10a      	bne.n	80041fa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80041e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e8:	f383 8811 	msr	BASEPRI, r3
 80041ec:	f3bf 8f6f 	isb	sy
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	613b      	str	r3, [r7, #16]
    }
 80041f6:	bf00      	nop
 80041f8:	e7fe      	b.n	80041f8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d10a      	bne.n	8004216 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004204:	f383 8811 	msr	BASEPRI, r3
 8004208:	f3bf 8f6f 	isb	sy
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	60fb      	str	r3, [r7, #12]
    }
 8004212:	bf00      	nop
 8004214:	e7fe      	b.n	8004214 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004216:	f000 fd4f 	bl	8004cb8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800421a:	4b1f      	ldr	r3, [pc, #124]	; (8004298 <xTaskCheckForTimeOut+0xc4>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004232:	d102      	bne.n	800423a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004234:	2300      	movs	r3, #0
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	e026      	b.n	8004288 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b17      	ldr	r3, [pc, #92]	; (800429c <xTaskCheckForTimeOut+0xc8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	429a      	cmp	r2, r3
 8004244:	d00a      	beq.n	800425c <xTaskCheckForTimeOut+0x88>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	429a      	cmp	r2, r3
 800424e:	d305      	bcc.n	800425c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004250:	2301      	movs	r3, #1
 8004252:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	e015      	b.n	8004288 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	429a      	cmp	r2, r3
 8004264:	d20b      	bcs.n	800427e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	1ad2      	subs	r2, r2, r3
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff ff98 	bl	80041a8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004278:	2300      	movs	r3, #0
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e004      	b.n	8004288 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	2200      	movs	r2, #0
 8004282:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004284:	2301      	movs	r3, #1
 8004286:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004288:	f000 fd46 	bl	8004d18 <vPortExitCritical>

    return xReturn;
 800428c:	69fb      	ldr	r3, [r7, #28]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3720      	adds	r7, #32
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000278 	.word	0x20000278
 800429c:	2000028c 	.word	0x2000028c

080042a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80042a0:	b480      	push	{r7}
 80042a2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <vTaskMissedYield+0x14>)
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr
 80042b4:	20000288 	.word	0x20000288

080042b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80042c0:	f000 f852 	bl	8004368 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <prvIdleTask+0x28>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d9f9      	bls.n	80042c0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <prvIdleTask+0x2c>)
 80042ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	f3bf 8f4f 	dsb	sy
 80042d8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80042dc:	e7f0      	b.n	80042c0 <prvIdleTask+0x8>
 80042de:	bf00      	nop
 80042e0:	200001a0 	.word	0x200001a0
 80042e4:	e000ed04 	.word	0xe000ed04

080042e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042ee:	2300      	movs	r3, #0
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	e00c      	b.n	800430e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	009b      	lsls	r3, r3, #2
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <prvInitialiseTaskLists+0x60>)
 8004300:	4413      	add	r3, r2
 8004302:	4618      	mov	r0, r3
 8004304:	f7fe fe12 	bl	8002f2c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3301      	adds	r3, #1
 800430c:	607b      	str	r3, [r7, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b04      	cmp	r3, #4
 8004312:	d9ef      	bls.n	80042f4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004314:	480d      	ldr	r0, [pc, #52]	; (800434c <prvInitialiseTaskLists+0x64>)
 8004316:	f7fe fe09 	bl	8002f2c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800431a:	480d      	ldr	r0, [pc, #52]	; (8004350 <prvInitialiseTaskLists+0x68>)
 800431c:	f7fe fe06 	bl	8002f2c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004320:	480c      	ldr	r0, [pc, #48]	; (8004354 <prvInitialiseTaskLists+0x6c>)
 8004322:	f7fe fe03 	bl	8002f2c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004326:	480c      	ldr	r0, [pc, #48]	; (8004358 <prvInitialiseTaskLists+0x70>)
 8004328:	f7fe fe00 	bl	8002f2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800432c:	480b      	ldr	r0, [pc, #44]	; (800435c <prvInitialiseTaskLists+0x74>)
 800432e:	f7fe fdfd 	bl	8002f2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004332:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <prvInitialiseTaskLists+0x78>)
 8004334:	4a05      	ldr	r2, [pc, #20]	; (800434c <prvInitialiseTaskLists+0x64>)
 8004336:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004338:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <prvInitialiseTaskLists+0x7c>)
 800433a:	4a05      	ldr	r2, [pc, #20]	; (8004350 <prvInitialiseTaskLists+0x68>)
 800433c:	601a      	str	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200001a0 	.word	0x200001a0
 800434c:	20000204 	.word	0x20000204
 8004350:	20000218 	.word	0x20000218
 8004354:	20000234 	.word	0x20000234
 8004358:	20000248 	.word	0x20000248
 800435c:	20000260 	.word	0x20000260
 8004360:	2000022c 	.word	0x2000022c
 8004364:	20000230 	.word	0x20000230

08004368 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800436e:	e019      	b.n	80043a4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8004370:	f000 fca2 	bl	8004cb8 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004374:	4b10      	ldr	r3, [pc, #64]	; (80043b8 <prvCheckTasksWaitingTermination+0x50>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe fe39 	bl	8002ff8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <prvCheckTasksWaitingTermination+0x54>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3b01      	subs	r3, #1
 800438c:	4a0b      	ldr	r2, [pc, #44]	; (80043bc <prvCheckTasksWaitingTermination+0x54>)
 800438e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8004390:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <prvCheckTasksWaitingTermination+0x58>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3b01      	subs	r3, #1
 8004396:	4a0a      	ldr	r2, [pc, #40]	; (80043c0 <prvCheckTasksWaitingTermination+0x58>)
 8004398:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800439a:	f000 fcbd 	bl	8004d18 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f810 	bl	80043c4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043a4:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <prvCheckTasksWaitingTermination+0x58>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e1      	bne.n	8004370 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	3708      	adds	r7, #8
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000248 	.word	0x20000248
 80043bc:	20000274 	.word	0x20000274
 80043c0:	2000025c 	.word	0x2000025c

080043c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fe05 	bl	8004fe0 <vPortFree>
            vPortFree( pxTCB );
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fe02 	bl	8004fe0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80043dc:	bf00      	nop
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043e8:	4b0a      	ldr	r3, [pc, #40]	; (8004414 <prvResetNextTaskUnblockTime+0x30>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d104      	bne.n	80043fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <prvResetNextTaskUnblockTime+0x34>)
 80043f4:	f04f 32ff 	mov.w	r2, #4294967295
 80043f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80043fa:	e005      	b.n	8004408 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043fc:	4b05      	ldr	r3, [pc, #20]	; (8004414 <prvResetNextTaskUnblockTime+0x30>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a04      	ldr	r2, [pc, #16]	; (8004418 <prvResetNextTaskUnblockTime+0x34>)
 8004406:	6013      	str	r3, [r2, #0]
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000022c 	.word	0x2000022c
 8004418:	20000294 	.word	0x20000294

0800441c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004422:	4b0b      	ldr	r3, [pc, #44]	; (8004450 <xTaskGetSchedulerState+0x34>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d102      	bne.n	8004430 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800442a:	2301      	movs	r3, #1
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	e008      	b.n	8004442 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004430:	4b08      	ldr	r3, [pc, #32]	; (8004454 <xTaskGetSchedulerState+0x38>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004438:	2302      	movs	r3, #2
 800443a:	607b      	str	r3, [r7, #4]
 800443c:	e001      	b.n	8004442 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800443e:	2300      	movs	r3, #0
 8004440:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004442:	687b      	ldr	r3, [r7, #4]
    }
 8004444:	4618      	mov	r0, r3
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20000280 	.word	0x20000280
 8004454:	2000029c 	.word	0x2000029c

08004458 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004462:	4b36      	ldr	r3, [pc, #216]	; (800453c <prvAddCurrentTaskToDelayedList+0xe4>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004468:	4b35      	ldr	r3, [pc, #212]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	3304      	adds	r3, #4
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe fdc2 	bl	8002ff8 <uxListRemove>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10b      	bne.n	8004492 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800447a:	4b31      	ldr	r3, [pc, #196]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	2201      	movs	r2, #1
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43da      	mvns	r2, r3
 8004488:	4b2e      	ldr	r3, [pc, #184]	; (8004544 <prvAddCurrentTaskToDelayedList+0xec>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4013      	ands	r3, r2
 800448e:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <prvAddCurrentTaskToDelayedList+0xec>)
 8004490:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d124      	bne.n	80044e4 <prvAddCurrentTaskToDelayedList+0x8c>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d021      	beq.n	80044e4 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044a0:	4b29      	ldr	r3, [pc, #164]	; (8004548 <prvAddCurrentTaskToDelayedList+0xf0>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]
 80044a6:	4b26      	ldr	r3, [pc, #152]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	609a      	str	r2, [r3, #8]
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	6892      	ldr	r2, [r2, #8]
 80044b6:	60da      	str	r2, [r3, #12]
 80044b8:	4b21      	ldr	r3, [pc, #132]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	3204      	adds	r2, #4
 80044c2:	605a      	str	r2, [r3, #4]
 80044c4:	4b1e      	ldr	r3, [pc, #120]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	609a      	str	r2, [r3, #8]
 80044ce:	4b1c      	ldr	r3, [pc, #112]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a1d      	ldr	r2, [pc, #116]	; (8004548 <prvAddCurrentTaskToDelayedList+0xf0>)
 80044d4:	615a      	str	r2, [r3, #20]
 80044d6:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <prvAddCurrentTaskToDelayedList+0xf0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	4a1a      	ldr	r2, [pc, #104]	; (8004548 <prvAddCurrentTaskToDelayedList+0xf0>)
 80044de:	6013      	str	r3, [r2, #0]
 80044e0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80044e2:	e026      	b.n	8004532 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4413      	add	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044ec:	4b14      	ldr	r3, [pc, #80]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d209      	bcs.n	8004510 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044fc:	4b13      	ldr	r3, [pc, #76]	; (800454c <prvAddCurrentTaskToDelayedList+0xf4>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3304      	adds	r3, #4
 8004506:	4619      	mov	r1, r3
 8004508:	4610      	mov	r0, r2
 800450a:	f7fe fd3c 	bl	8002f86 <vListInsert>
}
 800450e:	e010      	b.n	8004532 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004510:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <prvAddCurrentTaskToDelayedList+0xf8>)
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3304      	adds	r3, #4
 800451a:	4619      	mov	r1, r3
 800451c:	4610      	mov	r0, r2
 800451e:	f7fe fd32 	bl	8002f86 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	429a      	cmp	r2, r3
 800452a:	d202      	bcs.n	8004532 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800452c:	4a09      	ldr	r2, [pc, #36]	; (8004554 <prvAddCurrentTaskToDelayedList+0xfc>)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6013      	str	r3, [r2, #0]
}
 8004532:	bf00      	nop
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000278 	.word	0x20000278
 8004540:	2000019c 	.word	0x2000019c
 8004544:	2000027c 	.word	0x2000027c
 8004548:	20000260 	.word	0x20000260
 800454c:	20000230 	.word	0x20000230
 8004550:	2000022c 	.word	0x2000022c
 8004554:	20000294 	.word	0x20000294

08004558 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800455e:	2300      	movs	r3, #0
 8004560:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004562:	f000 fa47 	bl	80049f4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004566:	4b11      	ldr	r3, [pc, #68]	; (80045ac <xTimerCreateTimerTask+0x54>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 800456e:	4b10      	ldr	r3, [pc, #64]	; (80045b0 <xTimerCreateTimerTask+0x58>)
 8004570:	9301      	str	r3, [sp, #4]
 8004572:	2302      	movs	r3, #2
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	2300      	movs	r3, #0
 8004578:	f44f 7282 	mov.w	r2, #260	; 0x104
 800457c:	490d      	ldr	r1, [pc, #52]	; (80045b4 <xTimerCreateTimerTask+0x5c>)
 800457e:	480e      	ldr	r0, [pc, #56]	; (80045b8 <xTimerCreateTimerTask+0x60>)
 8004580:	f7ff f856 	bl	8003630 <xTaskCreate>
 8004584:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	603b      	str	r3, [r7, #0]
    }
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80045a2:	687b      	ldr	r3, [r7, #4]
    }
 80045a4:	4618      	mov	r0, r3
 80045a6:	3708      	adds	r7, #8
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	200002d0 	.word	0x200002d0
 80045b0:	200002d4 	.word	0x200002d4
 80045b4:	080052b8 	.word	0x080052b8
 80045b8:	08004661 	.word	0x08004661

080045bc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80045c8:	e008      	b.n	80045dc <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	4413      	add	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	699a      	ldr	r2, [r3, #24]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	18d1      	adds	r1, r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f8dd 	bl	80047a8 <prvInsertTimerInActiveList>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1ea      	bne.n	80045ca <prvReloadTimer+0xe>
        }
    }
 80045f4:	bf00      	nop
 80045f6:	bf00      	nop
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
	...

08004600 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800460a:	4b14      	ldr	r3, [pc, #80]	; (800465c <prvProcessExpiredTimer+0x5c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3304      	adds	r3, #4
 8004618:	4618      	mov	r0, r3
 800461a:	f7fe fced 	bl	8002ff8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d005      	beq.n	8004638 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	6879      	ldr	r1, [r7, #4]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff ffc3 	bl	80045bc <prvReloadTimer>
 8004636:	e008      	b.n	800464a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	b2da      	uxtb	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	4798      	blx	r3
    }
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	200002c8 	.word	0x200002c8

08004660 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004668:	f107 0308 	add.w	r3, r7, #8
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f857 	bl	8004720 <prvGetNextExpireTime>
 8004672:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4619      	mov	r1, r3
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f803 	bl	8004684 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800467e:	f000 f8d5 	bl	800482c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004682:	e7f1      	b.n	8004668 <prvTimerTask+0x8>

08004684 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800468e:	f7ff f9bf 	bl	8003a10 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	4618      	mov	r0, r3
 8004698:	f000 f866 	bl	8004768 <prvSampleTimeNow>
 800469c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d130      	bne.n	8004706 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10a      	bne.n	80046c0 <prvProcessTimerOrBlockTask+0x3c>
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d806      	bhi.n	80046c0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80046b2:	f7ff f9bb 	bl	8003a2c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ffa1 	bl	8004600 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80046be:	e024      	b.n	800470a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d008      	beq.n	80046d8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046c6:	4b13      	ldr	r3, [pc, #76]	; (8004714 <prvProcessTimerOrBlockTask+0x90>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <prvProcessTimerOrBlockTask+0x50>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e000      	b.n	80046d6 <prvProcessTimerOrBlockTask+0x52>
 80046d4:	2300      	movs	r3, #0
 80046d6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046d8:	4b0f      	ldr	r3, [pc, #60]	; (8004718 <prvProcessTimerOrBlockTask+0x94>)
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	4619      	mov	r1, r3
 80046e6:	f7fe ff6f 	bl	80035c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80046ea:	f7ff f99f 	bl	8003a2c <xTaskResumeAll>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80046f4:	4b09      	ldr	r3, [pc, #36]	; (800471c <prvProcessTimerOrBlockTask+0x98>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
    }
 8004704:	e001      	b.n	800470a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004706:	f7ff f991 	bl	8003a2c <xTaskResumeAll>
    }
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop
 8004714:	200002cc 	.word	0x200002cc
 8004718:	200002d0 	.word	0x200002d0
 800471c:	e000ed04 	.word	0xe000ed04

08004720 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004728:	4b0e      	ldr	r3, [pc, #56]	; (8004764 <prvGetNextExpireTime+0x44>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <prvGetNextExpireTime+0x16>
 8004732:	2201      	movs	r2, #1
 8004734:	e000      	b.n	8004738 <prvGetNextExpireTime+0x18>
 8004736:	2200      	movs	r2, #0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d105      	bne.n	8004750 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <prvGetNextExpireTime+0x44>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	60fb      	str	r3, [r7, #12]
 800474e:	e001      	b.n	8004754 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004754:	68fb      	ldr	r3, [r7, #12]
    }
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	200002c8 	.word	0x200002c8

08004768 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004770:	f7ff fa58 	bl	8003c24 <xTaskGetTickCount>
 8004774:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004776:	4b0b      	ldr	r3, [pc, #44]	; (80047a4 <prvSampleTimeNow+0x3c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	429a      	cmp	r2, r3
 800477e:	d205      	bcs.n	800478c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004780:	f000 f912 	bl	80049a8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
 800478a:	e002      	b.n	8004792 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004792:	4a04      	ldr	r2, [pc, #16]	; (80047a4 <prvSampleTimeNow+0x3c>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004798:	68fb      	ldr	r3, [r7, #12]
    }
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	200002d8 	.word	0x200002d8

080047a8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
 80047b4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80047b6:	2300      	movs	r3, #0
 80047b8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	68fa      	ldr	r2, [r7, #12]
 80047c4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d812      	bhi.n	80047f4 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	1ad2      	subs	r2, r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	699b      	ldr	r3, [r3, #24]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d302      	bcc.n	80047e2 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80047dc:	2301      	movs	r3, #1
 80047de:	617b      	str	r3, [r7, #20]
 80047e0:	e01b      	b.n	800481a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <prvInsertTimerInActiveList+0x7c>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe fbca 	bl	8002f86 <vListInsert>
 80047f2:	e012      	b.n	800481a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d206      	bcs.n	800480a <prvInsertTimerInActiveList+0x62>
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d302      	bcc.n	800480a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004804:	2301      	movs	r3, #1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e007      	b.n	800481a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800480a:	4b07      	ldr	r3, [pc, #28]	; (8004828 <prvInsertTimerInActiveList+0x80>)
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7fe fbb6 	bl	8002f86 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800481a:	697b      	ldr	r3, [r7, #20]
    }
 800481c:	4618      	mov	r0, r3
 800481e:	3718      	adds	r7, #24
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	200002cc 	.word	0x200002cc
 8004828:	200002c8 	.word	0x200002c8

0800482c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004832:	e0a6      	b.n	8004982 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	f2c0 80a2 	blt.w	8004980 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	3304      	adds	r3, #4
 800484c:	4618      	mov	r0, r3
 800484e:	f7fe fbd3 	bl	8002ff8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004852:	1d3b      	adds	r3, r7, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7ff ff87 	bl	8004768 <prvSampleTimeNow>
 800485a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	3b01      	subs	r3, #1
 8004860:	2b08      	cmp	r3, #8
 8004862:	f200 808e 	bhi.w	8004982 <prvProcessReceivedCommands+0x156>
 8004866:	a201      	add	r2, pc, #4	; (adr r2, 800486c <prvProcessReceivedCommands+0x40>)
 8004868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486c:	08004891 	.word	0x08004891
 8004870:	08004891 	.word	0x08004891
 8004874:	080048f9 	.word	0x080048f9
 8004878:	0800490d 	.word	0x0800490d
 800487c:	08004957 	.word	0x08004957
 8004880:	08004891 	.word	0x08004891
 8004884:	08004891 	.word	0x08004891
 8004888:	080048f9 	.word	0x080048f9
 800488c:	0800490d 	.word	0x0800490d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004896:	f043 0301 	orr.w	r3, r3, #1
 800489a:	b2da      	uxtb	r2, r3
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	18d1      	adds	r1, r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	69f8      	ldr	r0, [r7, #28]
 80048b0:	f7ff ff7a 	bl	80047a8 <prvInsertTimerInActiveList>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d063      	beq.n	8004982 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048c0:	f003 0304 	and.w	r3, r3, #4
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	4413      	add	r3, r2
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	4619      	mov	r1, r3
 80048d4:	69f8      	ldr	r0, [r7, #28]
 80048d6:	f7ff fe71 	bl	80045bc <prvReloadTimer>
 80048da:	e008      	b.n	80048ee <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048e2:	f023 0301 	bic.w	r3, r3, #1
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	69f8      	ldr	r0, [r7, #28]
 80048f4:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80048f6:	e044      	b.n	8004982 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048fe:	f023 0301 	bic.w	r3, r3, #1
 8004902:	b2da      	uxtb	r2, r3
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800490a:	e03a      	b.n	8004982 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004912:	f043 0301 	orr.w	r3, r3, #1
 8004916:	b2da      	uxtb	r2, r3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10a      	bne.n	8004942 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800492c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004930:	f383 8811 	msr	BASEPRI, r3
 8004934:	f3bf 8f6f 	isb	sy
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	617b      	str	r3, [r7, #20]
    }
 800493e:	bf00      	nop
 8004940:	e7fe      	b.n	8004940 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	18d1      	adds	r1, r2, r3
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	69ba      	ldr	r2, [r7, #24]
 800494e:	69f8      	ldr	r0, [r7, #28]
 8004950:	f7ff ff2a 	bl	80047a8 <prvInsertTimerInActiveList>
                        break;
 8004954:	e015      	b.n	8004982 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8004964:	69f8      	ldr	r0, [r7, #28]
 8004966:	f000 fb3b 	bl	8004fe0 <vPortFree>
 800496a:	e00a      	b.n	8004982 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	b2da      	uxtb	r2, r3
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800497e:	e000      	b.n	8004982 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004980:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004982:	4b08      	ldr	r3, [pc, #32]	; (80049a4 <prvProcessReceivedCommands+0x178>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f107 0108 	add.w	r1, r7, #8
 800498a:	2200      	movs	r2, #0
 800498c:	4618      	mov	r0, r3
 800498e:	f7fe fc5f 	bl	8003250 <xQueueReceive>
 8004992:	4603      	mov	r3, r0
 8004994:	2b00      	cmp	r3, #0
 8004996:	f47f af4d 	bne.w	8004834 <prvProcessReceivedCommands+0x8>
        }
    }
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	3720      	adds	r7, #32
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	200002d0 	.word	0x200002d0

080049a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049ae:	e009      	b.n	80049c4 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <prvSwitchTimerLists+0x44>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80049ba:	f04f 31ff 	mov.w	r1, #4294967295
 80049be:	6838      	ldr	r0, [r7, #0]
 80049c0:	f7ff fe1e 	bl	8004600 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049c4:	4b09      	ldr	r3, [pc, #36]	; (80049ec <prvSwitchTimerLists+0x44>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80049ce:	4b07      	ldr	r3, [pc, #28]	; (80049ec <prvSwitchTimerLists+0x44>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80049d4:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <prvSwitchTimerLists+0x48>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a04      	ldr	r2, [pc, #16]	; (80049ec <prvSwitchTimerLists+0x44>)
 80049da:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80049dc:	4a04      	ldr	r2, [pc, #16]	; (80049f0 <prvSwitchTimerLists+0x48>)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6013      	str	r3, [r2, #0]
    }
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200002c8 	.word	0x200002c8
 80049f0:	200002cc 	.word	0x200002cc

080049f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80049f8:	f000 f95e 	bl	8004cb8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80049fc:	4b12      	ldr	r3, [pc, #72]	; (8004a48 <prvCheckForValidListAndQueue+0x54>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d11d      	bne.n	8004a40 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004a04:	4811      	ldr	r0, [pc, #68]	; (8004a4c <prvCheckForValidListAndQueue+0x58>)
 8004a06:	f7fe fa91 	bl	8002f2c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004a0a:	4811      	ldr	r0, [pc, #68]	; (8004a50 <prvCheckForValidListAndQueue+0x5c>)
 8004a0c:	f7fe fa8e 	bl	8002f2c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <prvCheckForValidListAndQueue+0x60>)
 8004a12:	4a0e      	ldr	r2, [pc, #56]	; (8004a4c <prvCheckForValidListAndQueue+0x58>)
 8004a14:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <prvCheckForValidListAndQueue+0x64>)
 8004a18:	4a0d      	ldr	r2, [pc, #52]	; (8004a50 <prvCheckForValidListAndQueue+0x5c>)
 8004a1a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	210c      	movs	r1, #12
 8004a20:	200a      	movs	r0, #10
 8004a22:	f7fe fba3 	bl	800316c <xQueueGenericCreate>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <prvCheckForValidListAndQueue+0x54>)
 8004a2a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <prvCheckForValidListAndQueue+0x54>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <prvCheckForValidListAndQueue+0x54>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4908      	ldr	r1, [pc, #32]	; (8004a5c <prvCheckForValidListAndQueue+0x68>)
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe fd76 	bl	800352c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004a40:	f000 f96a 	bl	8004d18 <vPortExitCritical>
    }
 8004a44:	bf00      	nop
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	200002d0 	.word	0x200002d0
 8004a4c:	200002a0 	.word	0x200002a0
 8004a50:	200002b4 	.word	0x200002b4
 8004a54:	200002c8 	.word	0x200002c8
 8004a58:	200002cc 	.word	0x200002cc
 8004a5c:	080052c0 	.word	0x080052c0

08004a60 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004a60:	b480      	push	{r7}
 8004a62:	b085      	sub	sp, #20
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	3b04      	subs	r3, #4
 8004a70:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004a78:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3b04      	subs	r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f023 0201 	bic.w	r2, r3, #1
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3b04      	subs	r3, #4
 8004a8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004a90:	4a0c      	ldr	r2, [pc, #48]	; (8004ac4 <pxPortInitialiseStack+0x64>)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3b14      	subs	r3, #20
 8004a9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	3b04      	subs	r3, #4
 8004aa6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f06f 0202 	mvn.w	r2, #2
 8004aae:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	3b20      	subs	r3, #32
 8004ab4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	08004ac9 	.word	0x08004ac9

08004ac8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004ad2:	4b12      	ldr	r3, [pc, #72]	; (8004b1c <prvTaskExitError+0x54>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d00a      	beq.n	8004af2 <prvTaskExitError+0x2a>
        __asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	60fb      	str	r3, [r7, #12]
    }
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <prvTaskExitError+0x28>
        __asm volatile
 8004af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af6:	f383 8811 	msr	BASEPRI, r3
 8004afa:	f3bf 8f6f 	isb	sy
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	60bb      	str	r3, [r7, #8]
    }
 8004b04:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004b06:	bf00      	nop
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0fc      	beq.n	8004b08 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004b0e:	bf00      	nop
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	20000010 	.word	0x20000010

08004b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <pxCurrentTCBConst2>)
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	6808      	ldr	r0, [r1, #0]
 8004b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2a:	f380 8809 	msr	PSP, r0
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f04f 0000 	mov.w	r0, #0
 8004b36:	f380 8811 	msr	BASEPRI, r0
 8004b3a:	4770      	bx	lr
 8004b3c:	f3af 8000 	nop.w

08004b40 <pxCurrentTCBConst2>:
 8004b40:	2000019c 	.word	0x2000019c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop

08004b48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004b48:	4808      	ldr	r0, [pc, #32]	; (8004b6c <prvPortStartFirstTask+0x24>)
 8004b4a:	6800      	ldr	r0, [r0, #0]
 8004b4c:	6800      	ldr	r0, [r0, #0]
 8004b4e:	f380 8808 	msr	MSP, r0
 8004b52:	f04f 0000 	mov.w	r0, #0
 8004b56:	f380 8814 	msr	CONTROL, r0
 8004b5a:	b662      	cpsie	i
 8004b5c:	b661      	cpsie	f
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	df00      	svc	0
 8004b68:	bf00      	nop
 8004b6a:	0000      	.short	0x0000
 8004b6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop

08004b74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b7a:	4b46      	ldr	r3, [pc, #280]	; (8004c94 <xPortStartScheduler+0x120>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a46      	ldr	r2, [pc, #280]	; (8004c98 <xPortStartScheduler+0x124>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10a      	bne.n	8004b9a <xPortStartScheduler+0x26>
        __asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	613b      	str	r3, [r7, #16]
    }
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004b9a:	4b3e      	ldr	r3, [pc, #248]	; (8004c94 <xPortStartScheduler+0x120>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a3f      	ldr	r2, [pc, #252]	; (8004c9c <xPortStartScheduler+0x128>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d10a      	bne.n	8004bba <xPortStartScheduler+0x46>
        __asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	60fb      	str	r3, [r7, #12]
    }
 8004bb6:	bf00      	nop
 8004bb8:	e7fe      	b.n	8004bb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004bba:	4b39      	ldr	r3, [pc, #228]	; (8004ca0 <xPortStartScheduler+0x12c>)
 8004bbc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	22ff      	movs	r2, #255	; 0xff
 8004bca:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <xPortStartScheduler+0x130>)
 8004be0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004be2:	4b31      	ldr	r3, [pc, #196]	; (8004ca8 <xPortStartScheduler+0x134>)
 8004be4:	2207      	movs	r2, #7
 8004be6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004be8:	e009      	b.n	8004bfe <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8004bea:	4b2f      	ldr	r3, [pc, #188]	; (8004ca8 <xPortStartScheduler+0x134>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	4a2d      	ldr	r2, [pc, #180]	; (8004ca8 <xPortStartScheduler+0x134>)
 8004bf2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	005b      	lsls	r3, r3, #1
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c06:	2b80      	cmp	r3, #128	; 0x80
 8004c08:	d0ef      	beq.n	8004bea <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c0a:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <xPortStartScheduler+0x134>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f1c3 0307 	rsb	r3, r3, #7
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d00a      	beq.n	8004c2c <xPortStartScheduler+0xb8>
        __asm volatile
 8004c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1a:	f383 8811 	msr	BASEPRI, r3
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	60bb      	str	r3, [r7, #8]
    }
 8004c28:	bf00      	nop
 8004c2a:	e7fe      	b.n	8004c2a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c2c:	4b1e      	ldr	r3, [pc, #120]	; (8004ca8 <xPortStartScheduler+0x134>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	021b      	lsls	r3, r3, #8
 8004c32:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <xPortStartScheduler+0x134>)
 8004c34:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c36:	4b1c      	ldr	r3, [pc, #112]	; (8004ca8 <xPortStartScheduler+0x134>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c3e:	4a1a      	ldr	r2, [pc, #104]	; (8004ca8 <xPortStartScheduler+0x134>)
 8004c40:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004c4a:	4b18      	ldr	r3, [pc, #96]	; (8004cac <xPortStartScheduler+0x138>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a17      	ldr	r2, [pc, #92]	; (8004cac <xPortStartScheduler+0x138>)
 8004c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004c56:	4b15      	ldr	r3, [pc, #84]	; (8004cac <xPortStartScheduler+0x138>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a14      	ldr	r2, [pc, #80]	; (8004cac <xPortStartScheduler+0x138>)
 8004c5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004c60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004c62:	f000 f8db 	bl	8004e1c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004c66:	4b12      	ldr	r3, [pc, #72]	; (8004cb0 <xPortStartScheduler+0x13c>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004c6c:	f000 f8f2 	bl	8004e54 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c70:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <xPortStartScheduler+0x140>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a0f      	ldr	r2, [pc, #60]	; (8004cb4 <xPortStartScheduler+0x140>)
 8004c76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004c7c:	f7ff ff64 	bl	8004b48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004c80:	f7ff f8f6 	bl	8003e70 <vTaskSwitchContext>
    prvTaskExitError();
 8004c84:	f7ff ff20 	bl	8004ac8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3718      	adds	r7, #24
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	e000ed00 	.word	0xe000ed00
 8004c98:	410fc271 	.word	0x410fc271
 8004c9c:	410fc270 	.word	0x410fc270
 8004ca0:	e000e400 	.word	0xe000e400
 8004ca4:	200002dc 	.word	0x200002dc
 8004ca8:	200002e0 	.word	0x200002e0
 8004cac:	e000ed20 	.word	0xe000ed20
 8004cb0:	20000010 	.word	0x20000010
 8004cb4:	e000ef34 	.word	0xe000ef34

08004cb8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
        __asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	607b      	str	r3, [r7, #4]
    }
 8004cd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004cd2:	4b0f      	ldr	r3, [pc, #60]	; (8004d10 <vPortEnterCritical+0x58>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	4a0d      	ldr	r2, [pc, #52]	; (8004d10 <vPortEnterCritical+0x58>)
 8004cda:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004cdc:	4b0c      	ldr	r3, [pc, #48]	; (8004d10 <vPortEnterCritical+0x58>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d10f      	bne.n	8004d04 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <vPortEnterCritical+0x5c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <vPortEnterCritical+0x4c>
        __asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	603b      	str	r3, [r7, #0]
    }
 8004d00:	bf00      	nop
 8004d02:	e7fe      	b.n	8004d02 <vPortEnterCritical+0x4a>
    }
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr
 8004d10:	20000010 	.word	0x20000010
 8004d14:	e000ed04 	.word	0xe000ed04

08004d18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004d1e:	4b12      	ldr	r3, [pc, #72]	; (8004d68 <vPortExitCritical+0x50>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10a      	bne.n	8004d3c <vPortExitCritical+0x24>
        __asm volatile
 8004d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2a:	f383 8811 	msr	BASEPRI, r3
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f3bf 8f4f 	dsb	sy
 8004d36:	607b      	str	r3, [r7, #4]
    }
 8004d38:	bf00      	nop
 8004d3a:	e7fe      	b.n	8004d3a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <vPortExitCritical+0x50>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3b01      	subs	r3, #1
 8004d42:	4a09      	ldr	r2, [pc, #36]	; (8004d68 <vPortExitCritical+0x50>)
 8004d44:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004d46:	4b08      	ldr	r3, [pc, #32]	; (8004d68 <vPortExitCritical+0x50>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <vPortExitCritical+0x42>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004d58:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000010 	.word	0x20000010
 8004d6c:	00000000 	.word	0x00000000

08004d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004d70:	f3ef 8009 	mrs	r0, PSP
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <pxCurrentTCBConst>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	f01e 0f10 	tst.w	lr, #16
 8004d80:	bf08      	it	eq
 8004d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8a:	6010      	str	r0, [r2, #0]
 8004d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004d94:	f380 8811 	msr	BASEPRI, r0
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	f7ff f866 	bl	8003e70 <vTaskSwitchContext>
 8004da4:	f04f 0000 	mov.w	r0, #0
 8004da8:	f380 8811 	msr	BASEPRI, r0
 8004dac:	bc09      	pop	{r0, r3}
 8004dae:	6819      	ldr	r1, [r3, #0]
 8004db0:	6808      	ldr	r0, [r1, #0]
 8004db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004db6:	f01e 0f10 	tst.w	lr, #16
 8004dba:	bf08      	it	eq
 8004dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004dc0:	f380 8809 	msr	PSP, r0
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst>:
 8004dd0:	2000019c 	.word	0x2000019c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
        __asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	607b      	str	r3, [r7, #4]
    }
 8004df0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004df2:	f7fe ff27 	bl	8003c44 <xTaskIncrementTick>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <SysTick_Handler+0x40>)
 8004dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	2300      	movs	r3, #0
 8004e06:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f383 8811 	msr	BASEPRI, r3
    }
 8004e0e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004e10:	bf00      	nop
 8004e12:	3708      	adds	r7, #8
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	e000ed04 	.word	0xe000ed04

08004e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e20:	4b08      	ldr	r3, [pc, #32]	; (8004e44 <vPortSetupTimerInterrupt+0x28>)
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e26:	4b08      	ldr	r3, [pc, #32]	; (8004e48 <vPortSetupTimerInterrupt+0x2c>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <vPortSetupTimerInterrupt+0x30>)
 8004e2e:	4a08      	ldr	r2, [pc, #32]	; (8004e50 <vPortSetupTimerInterrupt+0x34>)
 8004e30:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e32:	4b04      	ldr	r3, [pc, #16]	; (8004e44 <vPortSetupTimerInterrupt+0x28>)
 8004e34:	2207      	movs	r2, #7
 8004e36:	601a      	str	r2, [r3, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	e000e010 	.word	0xe000e010
 8004e48:	e000e018 	.word	0xe000e018
 8004e4c:	e000e014 	.word	0xe000e014
 8004e50:	0002980f 	.word	0x0002980f

08004e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004e64 <vPortEnableVFP+0x10>
 8004e58:	6801      	ldr	r1, [r0, #0]
 8004e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004e5e:	6001      	str	r1, [r0, #0]
 8004e60:	4770      	bx	lr
 8004e62:	0000      	.short	0x0000
 8004e64:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004e68:	bf00      	nop
 8004e6a:	bf00      	nop

08004e6c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004e78:	f7fe fdca 	bl	8003a10 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <pvPortMalloc+0x160>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004e84:	f000 f908 	bl	8005098 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d012      	beq.n	8004eb4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004e8e:	2208      	movs	r2, #8
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	3308      	adds	r3, #8
 8004e9a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d804      	bhi.n	8004eb0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	4413      	add	r3, r2
 8004eac:	607b      	str	r3, [r7, #4]
 8004eae:	e001      	b.n	8004eb4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	db70      	blt.n	8004f9c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d06d      	beq.n	8004f9c <pvPortMalloc+0x130>
 8004ec0:	4b43      	ldr	r3, [pc, #268]	; (8004fd0 <pvPortMalloc+0x164>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d868      	bhi.n	8004f9c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004eca:	4b42      	ldr	r3, [pc, #264]	; (8004fd4 <pvPortMalloc+0x168>)
 8004ecc:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004ece:	4b41      	ldr	r3, [pc, #260]	; (8004fd4 <pvPortMalloc+0x168>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ed4:	e004      	b.n	8004ee0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d903      	bls.n	8004ef2 <pvPortMalloc+0x86>
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1f1      	bne.n	8004ed6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ef2:	4b36      	ldr	r3, [pc, #216]	; (8004fcc <pvPortMalloc+0x160>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d04f      	beq.n	8004f9c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2208      	movs	r2, #8
 8004f02:	4413      	add	r3, r2
 8004f04:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	1ad2      	subs	r2, r2, r3
 8004f16:	2308      	movs	r3, #8
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d91f      	bls.n	8004f5e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4413      	add	r3, r2
 8004f24:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <pvPortMalloc+0xda>
        __asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	613b      	str	r3, [r7, #16]
    }
 8004f42:	bf00      	nop
 8004f44:	e7fe      	b.n	8004f44 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	1ad2      	subs	r2, r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f58:	6978      	ldr	r0, [r7, #20]
 8004f5a:	f000 f8f9 	bl	8005150 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f5e:	4b1c      	ldr	r3, [pc, #112]	; (8004fd0 <pvPortMalloc+0x164>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	4a19      	ldr	r2, [pc, #100]	; (8004fd0 <pvPortMalloc+0x164>)
 8004f6a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f6c:	4b18      	ldr	r3, [pc, #96]	; (8004fd0 <pvPortMalloc+0x164>)
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <pvPortMalloc+0x16c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d203      	bcs.n	8004f80 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f78:	4b15      	ldr	r3, [pc, #84]	; (8004fd0 <pvPortMalloc+0x164>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a16      	ldr	r2, [pc, #88]	; (8004fd8 <pvPortMalloc+0x16c>)
 8004f7e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	2200      	movs	r2, #0
 8004f90:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f92:	4b12      	ldr	r3, [pc, #72]	; (8004fdc <pvPortMalloc+0x170>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	3301      	adds	r3, #1
 8004f98:	4a10      	ldr	r2, [pc, #64]	; (8004fdc <pvPortMalloc+0x170>)
 8004f9a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004f9c:	f7fe fd46 	bl	8003a2c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <pvPortMalloc+0x154>
        __asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	60fb      	str	r3, [r7, #12]
    }
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <pvPortMalloc+0x152>
    return pvReturn;
 8004fc0:	69fb      	ldr	r3, [r7, #28]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3728      	adds	r7, #40	; 0x28
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	20012eec 	.word	0x20012eec
 8004fd0:	20012ef0 	.word	0x20012ef0
 8004fd4:	20012ee4 	.word	0x20012ee4
 8004fd8:	20012ef4 	.word	0x20012ef4
 8004fdc:	20012ef8 	.word	0x20012ef8

08004fe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d049      	beq.n	8005086 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ff2:	2308      	movs	r3, #8
 8004ff4:	425b      	negs	r3, r3
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b00      	cmp	r3, #0
 8005006:	db0a      	blt.n	800501e <vPortFree+0x3e>
        __asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	60fb      	str	r3, [r7, #12]
    }
 800501a:	bf00      	nop
 800501c:	e7fe      	b.n	800501c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d00a      	beq.n	800503c <vPortFree+0x5c>
        __asm volatile
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	60bb      	str	r3, [r7, #8]
    }
 8005038:	bf00      	nop
 800503a:	e7fe      	b.n	800503a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	0fdb      	lsrs	r3, r3, #31
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01c      	beq.n	8005086 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d118      	bne.n	8005086 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8005060:	f7fe fcd6 	bl	8003a10 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <vPortFree+0xb0>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4413      	add	r3, r2
 800506e:	4a08      	ldr	r2, [pc, #32]	; (8005090 <vPortFree+0xb0>)
 8005070:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005072:	6938      	ldr	r0, [r7, #16]
 8005074:	f000 f86c 	bl	8005150 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005078:	4b06      	ldr	r3, [pc, #24]	; (8005094 <vPortFree+0xb4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	4a05      	ldr	r2, [pc, #20]	; (8005094 <vPortFree+0xb4>)
 8005080:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005082:	f7fe fcd3 	bl	8003a2c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005086:	bf00      	nop
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20012ef0 	.word	0x20012ef0
 8005094:	20012efc 	.word	0x20012efc

08005098 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800509e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80050a2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80050a4:	4b25      	ldr	r3, [pc, #148]	; (800513c <prvHeapInit+0xa4>)
 80050a6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00c      	beq.n	80050cc <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3307      	adds	r3, #7
 80050b6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f023 0307 	bic.w	r3, r3, #7
 80050be:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	4a1d      	ldr	r2, [pc, #116]	; (800513c <prvHeapInit+0xa4>)
 80050c8:	4413      	add	r3, r2
 80050ca:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050d0:	4a1b      	ldr	r2, [pc, #108]	; (8005140 <prvHeapInit+0xa8>)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80050d6:	4b1a      	ldr	r3, [pc, #104]	; (8005140 <prvHeapInit+0xa8>)
 80050d8:	2200      	movs	r2, #0
 80050da:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	4413      	add	r3, r2
 80050e2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80050e4:	2208      	movs	r2, #8
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0307 	bic.w	r3, r3, #7
 80050f2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	4a13      	ldr	r2, [pc, #76]	; (8005144 <prvHeapInit+0xac>)
 80050f8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <prvHeapInit+0xac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2200      	movs	r2, #0
 8005100:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005102:	4b10      	ldr	r3, [pc, #64]	; (8005144 <prvHeapInit+0xac>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005118:	4b0a      	ldr	r3, [pc, #40]	; (8005144 <prvHeapInit+0xac>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4a08      	ldr	r2, [pc, #32]	; (8005148 <prvHeapInit+0xb0>)
 8005126:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	4a07      	ldr	r2, [pc, #28]	; (800514c <prvHeapInit+0xb4>)
 800512e:	6013      	str	r3, [r2, #0]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	200002e4 	.word	0x200002e4
 8005140:	20012ee4 	.word	0x20012ee4
 8005144:	20012eec 	.word	0x20012eec
 8005148:	20012ef4 	.word	0x20012ef4
 800514c:	20012ef0 	.word	0x20012ef0

08005150 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005158:	4b28      	ldr	r3, [pc, #160]	; (80051fc <prvInsertBlockIntoFreeList+0xac>)
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	e002      	b.n	8005164 <prvInsertBlockIntoFreeList+0x14>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	429a      	cmp	r2, r3
 800516c:	d8f7      	bhi.n	800515e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	4413      	add	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d108      	bne.n	8005192 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	441a      	add	r2, r3
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	441a      	add	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d118      	bne.n	80051d8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b15      	ldr	r3, [pc, #84]	; (8005200 <prvInsertBlockIntoFreeList+0xb0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d00d      	beq.n	80051ce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	e008      	b.n	80051e0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051ce:	4b0c      	ldr	r3, [pc, #48]	; (8005200 <prvInsertBlockIntoFreeList+0xb0>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	e003      	b.n	80051e0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d002      	beq.n	80051ee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80051ee:	bf00      	nop
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	20012ee4 	.word	0x20012ee4
 8005200:	20012eec 	.word	0x20012eec

08005204 <__libc_init_array>:
 8005204:	b570      	push	{r4, r5, r6, lr}
 8005206:	4d0d      	ldr	r5, [pc, #52]	; (800523c <__libc_init_array+0x38>)
 8005208:	4c0d      	ldr	r4, [pc, #52]	; (8005240 <__libc_init_array+0x3c>)
 800520a:	1b64      	subs	r4, r4, r5
 800520c:	10a4      	asrs	r4, r4, #2
 800520e:	2600      	movs	r6, #0
 8005210:	42a6      	cmp	r6, r4
 8005212:	d109      	bne.n	8005228 <__libc_init_array+0x24>
 8005214:	4d0b      	ldr	r5, [pc, #44]	; (8005244 <__libc_init_array+0x40>)
 8005216:	4c0c      	ldr	r4, [pc, #48]	; (8005248 <__libc_init_array+0x44>)
 8005218:	f000 f82e 	bl	8005278 <_init>
 800521c:	1b64      	subs	r4, r4, r5
 800521e:	10a4      	asrs	r4, r4, #2
 8005220:	2600      	movs	r6, #0
 8005222:	42a6      	cmp	r6, r4
 8005224:	d105      	bne.n	8005232 <__libc_init_array+0x2e>
 8005226:	bd70      	pop	{r4, r5, r6, pc}
 8005228:	f855 3b04 	ldr.w	r3, [r5], #4
 800522c:	4798      	blx	r3
 800522e:	3601      	adds	r6, #1
 8005230:	e7ee      	b.n	8005210 <__libc_init_array+0xc>
 8005232:	f855 3b04 	ldr.w	r3, [r5], #4
 8005236:	4798      	blx	r3
 8005238:	3601      	adds	r6, #1
 800523a:	e7f2      	b.n	8005222 <__libc_init_array+0x1e>
 800523c:	08005310 	.word	0x08005310
 8005240:	08005310 	.word	0x08005310
 8005244:	08005310 	.word	0x08005310
 8005248:	08005314 	.word	0x08005314

0800524c <memcpy>:
 800524c:	440a      	add	r2, r1
 800524e:	4291      	cmp	r1, r2
 8005250:	f100 33ff 	add.w	r3, r0, #4294967295
 8005254:	d100      	bne.n	8005258 <memcpy+0xc>
 8005256:	4770      	bx	lr
 8005258:	b510      	push	{r4, lr}
 800525a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800525e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005262:	4291      	cmp	r1, r2
 8005264:	d1f9      	bne.n	800525a <memcpy+0xe>
 8005266:	bd10      	pop	{r4, pc}

08005268 <memset>:
 8005268:	4402      	add	r2, r0
 800526a:	4603      	mov	r3, r0
 800526c:	4293      	cmp	r3, r2
 800526e:	d100      	bne.n	8005272 <memset+0xa>
 8005270:	4770      	bx	lr
 8005272:	f803 1b01 	strb.w	r1, [r3], #1
 8005276:	e7f9      	b.n	800526c <memset+0x4>

08005278 <_init>:
 8005278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527a:	bf00      	nop
 800527c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527e:	bc08      	pop	{r3}
 8005280:	469e      	mov	lr, r3
 8005282:	4770      	bx	lr

08005284 <_fini>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr
